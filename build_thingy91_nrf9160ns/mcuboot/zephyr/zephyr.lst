
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20018ea8 	.word	0x20018ea8
   4:	00002d7d 	.word	0x00002d7d
   8:	00006a95 	.word	0x00006a95
   c:	00002ddd 	.word	0x00002ddd
  10:	00002ddd 	.word	0x00002ddd
  14:	00002ddd 	.word	0x00002ddd
  18:	00002ddd 	.word	0x00002ddd
  1c:	00002ddd 	.word	0x00002ddd
	...
  2c:	00002b91 	.word	0x00002b91
  30:	00002ddd 	.word	0x00002ddd
	...
  3c:	00006835 	.word	0x00006835

00000040 <_irq_vector_table>:
  40:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  50:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  60:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  70:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  80:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  90:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  a0:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  b0:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  c0:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  d0:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  e0:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
  f0:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
 100:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
 110:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
 120:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
 130:	00002d55 00002d55 00002d55 00002d55     U-..U-..U-..U-..
 140:	00002d55                                U-..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b96c 	b.w	434 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     178:	9d08      	ldr	r5, [sp, #32]
     17a:	4604      	mov	r4, r0
     17c:	4688      	mov	r8, r1
     17e:	2b00      	cmp	r3, #0
     180:	d17d      	bne.n	27e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x7e>
     182:	428a      	cmp	r2, r1
     184:	4617      	mov	r7, r2
     186:	d93f      	bls.n	208 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x8>
     188:	fab2 f282 	clz	r2, r2
     18c:	b142      	cbz	r2, 1a0 <__udivmoddi4+0x2c>
     18e:	f1c2 0020 	rsb	r0, r2, #32
     192:	4091      	lsls	r1, r2
     194:	4097      	lsls	r7, r2
     196:	fa24 f000 	lsr.w	r0, r4, r0
     19a:	4094      	lsls	r4, r2
     19c:	ea40 0801 	orr.w	r8, r0, r1
     1a0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
     1a4:	0c23      	lsrs	r3, r4, #16
     1a6:	fa1f fe87 	uxth.w	lr, r7
     1aa:	fbb8 f6fc 	udiv	r6, r8, ip
     1ae:	fb0c 8116 	mls	r1, ip, r6, r8
     1b2:	fb06 f00e 	mul.w	r0, r6, lr
     1b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     1ba:	4298      	cmp	r0, r3
     1bc:	d905      	bls.n	1ca <__udivmoddi4+0x56>
     1be:	18fb      	adds	r3, r7, r3
     1c0:	d202      	bcs.n	1c8 <__udivmoddi4+0x54>
     1c2:	4298      	cmp	r0, r3
     1c4:	f200 8124 	bhi.w	410 <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x10>
     1c8:	3e01      	subs	r6, #1
     1ca:	1a19      	subs	r1, r3, r0
     1cc:	b2a3      	uxth	r3, r4
     1ce:	fbb1 f0fc 	udiv	r0, r1, ip
     1d2:	fb0c 1110 	mls	r1, ip, r0, r1
     1d6:	fb00 fe0e 	mul.w	lr, r0, lr
     1da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1de:	45a6      	cmp	lr, r4
     1e0:	d905      	bls.n	1ee <__udivmoddi4+0x7a>
     1e2:	193c      	adds	r4, r7, r4
     1e4:	d202      	bcs.n	1ec <__udivmoddi4+0x78>
     1e6:	45a6      	cmp	lr, r4
     1e8:	f200 810f 	bhi.w	40a <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0xa>
     1ec:	3801      	subs	r0, #1
     1ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1f2:	eba4 040e 	sub.w	r4, r4, lr
     1f6:	2600      	movs	r6, #0
     1f8:	b11d      	cbz	r5, 202 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2>
     1fa:	40d4      	lsrs	r4, r2
     1fc:	2300      	movs	r3, #0
     1fe:	e9c5 4300 	strd	r4, r3, [r5]
     202:	4631      	mov	r1, r6
     204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     208:	b902      	cbnz	r2, 20c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xc>
     20a:	deff      	udf	#255	; 0xff
     20c:	fab2 f282 	clz	r2, r2
     210:	2a00      	cmp	r2, #0
     212:	d150      	bne.n	2b6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x36>
     214:	1bcb      	subs	r3, r1, r7
     216:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     21a:	fa1f f887 	uxth.w	r8, r7
     21e:	2601      	movs	r6, #1
     220:	0c21      	lsrs	r1, r4, #16
     222:	fbb3 fcfe 	udiv	ip, r3, lr
     226:	fb0e 301c 	mls	r0, lr, ip, r3
     22a:	460b      	mov	r3, r1
     22c:	fb08 f90c 	mul.w	r9, r8, ip
     230:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     234:	4589      	cmp	r9, r1
     236:	d90a      	bls.n	24e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x4e>
     238:	1879      	adds	r1, r7, r1
     23a:	bf2c      	ite	cs
     23c:	2301      	movcs	r3, #1
     23e:	2300      	movcc	r3, #0
     240:	4589      	cmp	r9, r1
     242:	d902      	bls.n	24a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x4a>
     244:	2b00      	cmp	r3, #0
     246:	f000 80d9 	beq.w	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     24a:	f10c 3cff 	add.w	ip, ip, #4294967295
     24e:	eba1 0109 	sub.w	r1, r1, r9
     252:	b2a3      	uxth	r3, r4
     254:	fbb1 f0fe 	udiv	r0, r1, lr
     258:	fb0e 1110 	mls	r1, lr, r0, r1
     25c:	fb08 f800 	mul.w	r8, r8, r0
     260:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     264:	45a0      	cmp	r8, r4
     266:	d905      	bls.n	274 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x74>
     268:	193c      	adds	r4, r7, r4
     26a:	d202      	bcs.n	272 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x72>
     26c:	45a0      	cmp	r8, r4
     26e:	f200 80c9 	bhi.w	404 <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x4>
     272:	3801      	subs	r0, #1
     274:	eba4 0408 	sub.w	r4, r4, r8
     278:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     27c:	e7bc      	b.n	1f8 <__udivmoddi4+0x84>
     27e:	428b      	cmp	r3, r1
     280:	d909      	bls.n	296 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x16>
     282:	2d00      	cmp	r5, #0
     284:	f000 80b1 	beq.w	3ea <CONFIG_PM_PARTITION_SIZE_PROVISION+0x16a>
     288:	2600      	movs	r6, #0
     28a:	e9c5 0100 	strd	r0, r1, [r5]
     28e:	4630      	mov	r0, r6
     290:	4631      	mov	r1, r6
     292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     296:	fab3 f683 	clz	r6, r3
     29a:	2e00      	cmp	r6, #0
     29c:	d146      	bne.n	32c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xac>
     29e:	428b      	cmp	r3, r1
     2a0:	f0c0 80a6 	bcc.w	3f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x170>
     2a4:	4282      	cmp	r2, r0
     2a6:	f240 80a3 	bls.w	3f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x170>
     2aa:	4630      	mov	r0, r6
     2ac:	2d00      	cmp	r5, #0
     2ae:	d0a8      	beq.n	202 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2>
     2b0:	e9c5 4800 	strd	r4, r8, [r5]
     2b4:	e7a5      	b.n	202 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2>
     2b6:	4097      	lsls	r7, r2
     2b8:	f1c2 0320 	rsb	r3, r2, #32
     2bc:	fa01 f002 	lsl.w	r0, r1, r2
     2c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2c4:	40d9      	lsrs	r1, r3
     2c6:	fa24 f303 	lsr.w	r3, r4, r3
     2ca:	fa1f f887 	uxth.w	r8, r7
     2ce:	4094      	lsls	r4, r2
     2d0:	4303      	orrs	r3, r0
     2d2:	fbb1 f0fe 	udiv	r0, r1, lr
     2d6:	0c1e      	lsrs	r6, r3, #16
     2d8:	fb0e 1110 	mls	r1, lr, r0, r1
     2dc:	fb00 fc08 	mul.w	ip, r0, r8
     2e0:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
     2e4:	458c      	cmp	ip, r1
     2e6:	d909      	bls.n	2fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7c>
     2e8:	1879      	adds	r1, r7, r1
     2ea:	bf2c      	ite	cs
     2ec:	2601      	movcs	r6, #1
     2ee:	2600      	movcc	r6, #0
     2f0:	458c      	cmp	ip, r1
     2f2:	d902      	bls.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f4:	2e00      	cmp	r6, #0
     2f6:	f000 8093 	beq.w	420 <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x20>
     2fa:	3801      	subs	r0, #1
     2fc:	eba1 010c 	sub.w	r1, r1, ip
     300:	b29b      	uxth	r3, r3
     302:	fbb1 f6fe 	udiv	r6, r1, lr
     306:	fb0e 1116 	mls	r1, lr, r6, r1
     30a:	fb06 fc08 	mul.w	ip, r6, r8
     30e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     312:	458c      	cmp	ip, r1
     314:	d905      	bls.n	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     316:	1879      	adds	r1, r7, r1
     318:	d202      	bcs.n	320 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa0>
     31a:	458c      	cmp	ip, r1
     31c:	f200 8087 	bhi.w	42e <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x2e>
     320:	3e01      	subs	r6, #1
     322:	eba1 030c 	sub.w	r3, r1, ip
     326:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     32a:	e779      	b.n	220 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x20>
     32c:	f1c6 0720 	rsb	r7, r6, #32
     330:	fa03 f406 	lsl.w	r4, r3, r6
     334:	fa02 fc06 	lsl.w	ip, r2, r6
     338:	fa01 fe06 	lsl.w	lr, r1, r6
     33c:	40fa      	lsrs	r2, r7
     33e:	fa20 f807 	lsr.w	r8, r0, r7
     342:	40f9      	lsrs	r1, r7
     344:	fa00 f306 	lsl.w	r3, r0, r6
     348:	4322      	orrs	r2, r4
     34a:	ea48 040e 	orr.w	r4, r8, lr
     34e:	ea4f 4812 	mov.w	r8, r2, lsr #16
     352:	ea4f 4e14 	mov.w	lr, r4, lsr #16
     356:	fa1f f982 	uxth.w	r9, r2
     35a:	fbb1 faf8 	udiv	sl, r1, r8
     35e:	fb08 111a 	mls	r1, r8, sl, r1
     362:	fb0a f009 	mul.w	r0, sl, r9
     366:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
     36a:	4570      	cmp	r0, lr
     36c:	d90a      	bls.n	384 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x104>
     36e:	eb12 0e0e 	adds.w	lr, r2, lr
     372:	bf2c      	ite	cs
     374:	2101      	movcs	r1, #1
     376:	2100      	movcc	r1, #0
     378:	4570      	cmp	r0, lr
     37a:	d901      	bls.n	380 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x100>
     37c:	2900      	cmp	r1, #0
     37e:	d052      	beq.n	426 <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x26>
     380:	f10a 3aff 	add.w	sl, sl, #4294967295
     384:	ebae 0e00 	sub.w	lr, lr, r0
     388:	b2a4      	uxth	r4, r4
     38a:	fbbe f0f8 	udiv	r0, lr, r8
     38e:	fb08 ee10 	mls	lr, r8, r0, lr
     392:	fb00 f909 	mul.w	r9, r0, r9
     396:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
     39a:	45f1      	cmp	r9, lr
     39c:	d905      	bls.n	3aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12a>
     39e:	eb12 0e0e 	adds.w	lr, r2, lr
     3a2:	d201      	bcs.n	3a8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x128>
     3a4:	45f1      	cmp	r9, lr
     3a6:	d838      	bhi.n	41a <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x1a>
     3a8:	3801      	subs	r0, #1
     3aa:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3ae:	ebae 0e09 	sub.w	lr, lr, r9
     3b2:	fba0 890c 	umull	r8, r9, r0, ip
     3b6:	45ce      	cmp	lr, r9
     3b8:	4641      	mov	r1, r8
     3ba:	464c      	mov	r4, r9
     3bc:	d302      	bcc.n	3c4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x144>
     3be:	d106      	bne.n	3ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14e>
     3c0:	4543      	cmp	r3, r8
     3c2:	d204      	bcs.n	3ce <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14e>
     3c4:	3801      	subs	r0, #1
     3c6:	ebb8 010c 	subs.w	r1, r8, ip
     3ca:	eb69 0402 	sbc.w	r4, r9, r2
     3ce:	b315      	cbz	r5, 416 <CONFIG_CBOR_PARSER_MAX_RECURSIONS+0x16>
     3d0:	1a5a      	subs	r2, r3, r1
     3d2:	eb6e 0e04 	sbc.w	lr, lr, r4
     3d6:	40f2      	lsrs	r2, r6
     3d8:	fa0e f707 	lsl.w	r7, lr, r7
     3dc:	fa2e f306 	lsr.w	r3, lr, r6
     3e0:	2600      	movs	r6, #0
     3e2:	4317      	orrs	r7, r2
     3e4:	e9c5 7300 	strd	r7, r3, [r5]
     3e8:	e70b      	b.n	202 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2>
     3ea:	462e      	mov	r6, r5
     3ec:	4628      	mov	r0, r5
     3ee:	e708      	b.n	202 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2>
     3f0:	1a84      	subs	r4, r0, r2
     3f2:	eb61 0103 	sbc.w	r1, r1, r3
     3f6:	2001      	movs	r0, #1
     3f8:	4688      	mov	r8, r1
     3fa:	e757      	b.n	2ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2c>
     3fc:	f1ac 0c02 	sub.w	ip, ip, #2
     400:	4439      	add	r1, r7
     402:	e724      	b.n	24e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x4e>
     404:	3802      	subs	r0, #2
     406:	443c      	add	r4, r7
     408:	e734      	b.n	274 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x74>
     40a:	3802      	subs	r0, #2
     40c:	443c      	add	r4, r7
     40e:	e6ee      	b.n	1ee <__udivmoddi4+0x7a>
     410:	3e02      	subs	r6, #2
     412:	443b      	add	r3, r7
     414:	e6d9      	b.n	1ca <__udivmoddi4+0x56>
     416:	462e      	mov	r6, r5
     418:	e6f3      	b.n	202 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x2>
     41a:	3802      	subs	r0, #2
     41c:	4496      	add	lr, r2
     41e:	e7c4      	b.n	3aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12a>
     420:	3802      	subs	r0, #2
     422:	4439      	add	r1, r7
     424:	e76a      	b.n	2fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7c>
     426:	f1aa 0a02 	sub.w	sl, sl, #2
     42a:	4496      	add	lr, r2
     42c:	e7aa      	b.n	384 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x104>
     42e:	3e02      	subs	r6, #2
     430:	4439      	add	r1, r7
     432:	e776      	b.n	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>

00000434 <__aeabi_idiv0>:
     434:	4770      	bx	lr
     436:	bf00      	nop

00000438 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     43a:	4b40      	ldr	r3, [pc, #256]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     43c:	4a40      	ldr	r2, [pc, #256]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     43e:	4841      	ldr	r0, [pc, #260]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)
     440:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     444:	2149      	movs	r1, #73	; 0x49
     446:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     44a:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     44e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     452:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     456:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     45a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     45e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     462:	f006 f894 	bl	658e <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     466:	f005 fc20 	bl	5caa <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     46a:	4837      	ldr	r0, [pc, #220]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     46c:	f000 f880 	bl	570 <flash_device_get_binding>
     470:	b928      	cbnz	r0, 47e <main+0x46>
        BOOT_LOG_ERR("Flash device %s not found",
     472:	2145      	movs	r1, #69	; 0x45
     474:	4a34      	ldr	r2, [pc, #208]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     476:	4835      	ldr	r0, [pc, #212]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     478:	f006 f889 	bl	658e <z_log_minimal_printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     47c:	e7fe      	b.n	47c <main+0x44>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     47e:	4834      	ldr	r0, [pc, #208]	; (550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>)
     480:	f003 ff8c 	bl	439c <z_impl_device_get_binding>
     484:	4604      	mov	r4, r0
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     486:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     488:	6881      	ldr	r1, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     48a:	6813      	ldr	r3, [r2, #0]
     48c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
     490:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
     492:	680b      	ldr	r3, [r1, #0]
     494:	f44f 7288 	mov.w	r2, #272	; 0x110
     498:	211a      	movs	r1, #26
     49a:	4798      	blx	r3
					   gpio_port_value_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_get_raw(port, value);
     49c:	68a3      	ldr	r3, [r4, #8]
     49e:	4620      	mov	r0, r4
     4a0:	685b      	ldr	r3, [r3, #4]
     4a2:	a901      	add	r1, sp, #4
     4a4:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
     4a6:	b990      	cbnz	r0, 4ce <FIH_LABEL_FIH_CALL_START_501>
            ;
    }
#endif

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin(CONFIG_BOOT_SERIAL_DETECT_PORT,
     4a8:	9b01      	ldr	r3, [sp, #4]
     4aa:	015a      	lsls	r2, r3, #5
     4ac:	d40f      	bmi.n	4ce <FIH_LABEL_FIH_CALL_START_501>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     4ae:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     4b2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRF_POWER_RESETREAS_RESETPIN_MASK));
     4b6:	b10b      	cbz	r3, 4bc <main+0x84>
     4b8:	07db      	lsls	r3, r3, #31
     4ba:	d508      	bpl.n	4ce <FIH_LABEL_FIH_CALL_START_501>
            !boot_skip_serial_recovery()) {
#ifdef CONFIG_MCUBOOT_INDICATION_LED
        gpio_pin_set(led, LED0_GPIO_PIN, 1);
#endif

        BOOT_LOG_INF("Enter the serial recovery mode");
     4bc:	2149      	movs	r1, #73	; 0x49
     4be:	4825      	ldr	r0, [pc, #148]	; (554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>)
     4c0:	f006 f865 	bl	658e <z_log_minimal_printk>
        rc = boot_console_init();
     4c4:	f001 fee6 	bl	2294 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     4c8:	4823      	ldr	r0, [pc, #140]	; (558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>)
     4ca:	f002 fa63 	bl	2994 <boot_serial_start>

000004ce <FIH_LABEL_FIH_CALL_START_501>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     4ce:	a801      	add	r0, sp, #4
     4d0:	f000 fc74 	bl	dbc <boot_go>

000004d4 <FIH_LABEL_FIH_CALL_END_514>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     4d4:	4b21      	ldr	r3, [pc, #132]	; (55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>)
     4d6:	681b      	ldr	r3, [r3, #0]
     4d8:	4283      	cmp	r3, r0
     4da:	d004      	beq.n	4e6 <FIH_LABEL_FIH_CALL_END_514+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     4dc:	2145      	movs	r1, #69	; 0x45
     4de:	4820      	ldr	r0, [pc, #128]	; (560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>)
     4e0:	f006 f855 	bl	658e <z_log_minimal_printk>
        FIH_PANIC;
     4e4:	e7fe      	b.n	4e4 <FIH_LABEL_FIH_CALL_END_514+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     4e6:	9a03      	ldr	r2, [sp, #12]
     4e8:	2149      	movs	r1, #73	; 0x49
     4ea:	481e      	ldr	r0, [pc, #120]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     4ec:	f006 f84f 	bl	658e <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     4f0:	2149      	movs	r1, #73	; 0x49
     4f2:	481d      	ldr	r0, [pc, #116]	; (568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>)
     4f4:	f006 f84b 	bl	658e <z_log_minimal_printk>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4f8:	4669      	mov	r1, sp
     4fa:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4fe:	f000 f843 	bl	588 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     502:	9b00      	ldr	r3, [sp, #0]
     504:	9c03      	ldr	r4, [sp, #12]
     506:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     508:	9b01      	ldr	r3, [sp, #4]
     50a:	891d      	ldrh	r5, [r3, #8]
                                     rsp->br_image_off +
     50c:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     50e:	f04f 0220 	mov.w	r2, #32
     512:	f3ef 8311 	mrs	r3, BASEPRI
     516:	f382 8811 	msr	BASEPRI, r2
     51a:	f3bf 8f6f 	isb	sy
    sys_clock_disable();
     51e:	f006 f98a 	bl	6836 <sys_clock_disable>
    nrf_cleanup_peripheral();
     522:	f000 ff33 	bl	138c <nrf_cleanup_peripheral>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     526:	5963      	ldr	r3, [r4, r5]
     528:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     52c:	6873      	ldr	r3, [r6, #4]
     52e:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     530:	2145      	movs	r1, #69	; 0x45
     532:	480e      	ldr	r0, [pc, #56]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     534:	f006 f82b 	bl	658e <z_log_minimal_printk>
    while (1)
     538:	e7fe      	b.n	538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>
     53a:	bf00      	nop
     53c:	50018000 	.word	0x50018000
     540:	6e524635 	.word	0x6e524635
     544:	00007a40 	.word	0x00007a40
     548:	00007a59 	.word	0x00007a59
     54c:	00007a6c 	.word	0x00007a6c
     550:	00007a8b 	.word	0x00007a8b
     554:	00007a92 	.word	0x00007a92
     558:	000076c8 	.word	0x000076c8
     55c:	200146f4 	.word	0x200146f4
     560:	00007ab6 	.word	0x00007ab6
     564:	00007ad9 	.word	0x00007ad9
     568:	00007b08 	.word	0x00007b08
     56c:	00007b2d 	.word	0x00007b2d

00000570 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     570:	b510      	push	{r4, lr}
    if (!flash_dev) {
     572:	4c04      	ldr	r4, [pc, #16]	; (584 <flash_device_get_binding+0x14>)
     574:	6823      	ldr	r3, [r4, #0]
     576:	b913      	cbnz	r3, 57e <flash_device_get_binding+0xe>
     578:	f003 ff10 	bl	439c <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     57c:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     57e:	6820      	ldr	r0, [r4, #0]
     580:	bd10      	pop	{r4, pc}
     582:	bf00      	nop
     584:	200146f0 	.word	0x200146f0

00000588 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     588:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     58a:	b140      	cbz	r0, 59e <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     58c:	4602      	mov	r2, r0
     58e:	2300      	movs	r3, #0
     590:	4804      	ldr	r0, [pc, #16]	; (5a4 <flash_device_base+0x1c>)
     592:	2145      	movs	r1, #69	; 0x45
     594:	f005 fffb 	bl	658e <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     598:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     59c:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     59e:	6008      	str	r0, [r1, #0]
    return 0;
     5a0:	e7fc      	b.n	59c <flash_device_base+0x14>
     5a2:	bf00      	nop
     5a4:	00007b50 	.word	0x00007b50

000005a8 <flash_area_sector_from_off>:
{
    return flash_area_id_to_multi_image_slot(0, area_id);
}

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     5aa:	4a07      	ldr	r2, [pc, #28]	; (5c8 <flash_area_sector_from_off+0x20>)
{
     5ac:	4603      	mov	r3, r0
     5ae:	460c      	mov	r4, r1
    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
     5b0:	6810      	ldr	r0, [r2, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     5b2:	4619      	mov	r1, r3
     5b4:	aa01      	add	r2, sp, #4
     5b6:	f006 fb8d 	bl	6cd4 <z_impl_flash_get_page_info_by_offs>
    if (rc) {
     5ba:	b918      	cbnz	r0, 5c4 <flash_area_sector_from_off+0x1c>
        return rc;
    }

    sector->fs_off = page.start_offset;
     5bc:	9b01      	ldr	r3, [sp, #4]
     5be:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     5c0:	9b02      	ldr	r3, [sp, #8]
     5c2:	6063      	str	r3, [r4, #4]

    return rc;
}
     5c4:	b004      	add	sp, #16
     5c6:	bd10      	pop	{r4, pc}
     5c8:	200146f0 	.word	0x200146f0

000005cc <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     5d0:	f8df 921c 	ldr.w	r9, [pc, #540]	; 7f0 <FIH_LABEL_FIH_CALL_END_933+0x2e>
{
     5d4:	b0dd      	sub	sp, #372	; 0x174
     5d6:	4615      	mov	r5, r2
     5d8:	e9dd 4868 	ldrd	r4, r8, [sp, #416]	; 0x1a0
     5dc:	461e      	mov	r6, r3
     5de:	f8dd b198 	ldr.w	fp, [sp, #408]	; 0x198
    fih_int valid_signature = FIH_FAILURE;
     5e2:	f8d9 7000 	ldr.w	r7, [r9]
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     5e6:	f000 fe9f 	bl	1328 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     5ea:	2201      	movs	r2, #1
     5ec:	4b7e      	ldr	r3, [pc, #504]	; (7e8 <FIH_LABEL_FIH_CALL_END_933+0x26>)
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     5ee:	a83c      	add	r0, sp, #240	; 0xf0
    NRF_CRYPTOCELL->ENABLE=1;
     5f0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     5f4:	f004 fa8a 	bl	4b0c <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     5f8:	f8cd 9014 	str.w	r9, [sp, #20]
     5fc:	b13c      	cbz	r4, 60e <bootutil_img_validate+0x42>
     5fe:	f1b8 0f00 	cmp.w	r8, #0
     602:	dd04      	ble.n	60e <bootutil_img_validate+0x42>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     604:	4642      	mov	r2, r8
     606:	4621      	mov	r1, r4
     608:	a83c      	add	r0, sp, #240	; 0xf0
     60a:	f005 fe9e 	bl	634a <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     60e:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     612:	896b      	ldrh	r3, [r5, #10]
    size = hdr_size = hdr->ih_hdr_size;
     614:	f8b5 8008 	ldrh.w	r8, [r5, #8]
     618:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     61a:	68eb      	ldr	r3, [r5, #12]
     61c:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     61e:	45c8      	cmp	r8, r9
     620:	d84e      	bhi.n	6c0 <FIH_LABEL_FIH_CALL_END_387+0xe>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     622:	a90f      	add	r1, sp, #60	; 0x3c
     624:	a83c      	add	r0, sp, #240	; 0xf0
     626:	f004 fae3 	bl	4bf0 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     62a:	2200      	movs	r2, #0
     62c:	4b6e      	ldr	r3, [pc, #440]	; (7e8 <FIH_LABEL_FIH_CALL_END_933+0x26>)
     62e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     632:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     636:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
     638:	b123      	cbz	r3, 644 <bootutil_img_validate+0x78>
        memcpy(out_hash, hash, 32);
     63a:	2220      	movs	r2, #32
     63c:	4618      	mov	r0, r3
     63e:	a90f      	add	r1, sp, #60	; 0x3c
     640:	f006 fa5c 	bl	6afc <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     644:	2300      	movs	r3, #0
     646:	4632      	mov	r2, r6
     648:	9300      	str	r3, [sp, #0]
     64a:	4629      	mov	r1, r5
     64c:	f64f 73ff 	movw	r3, #65535	; 0xffff
     650:	a809      	add	r0, sp, #36	; 0x24
     652:	f005 fb2b 	bl	5cac <bootutil_tlv_iter_begin>
    if (rc) {
     656:	4604      	mov	r4, r0
     658:	2800      	cmp	r0, #0
     65a:	d144      	bne.n	6e6 <FIH_LABEL_FIH_CALL_END_387+0x34>
    int key_id = -1;
     65c:	f04f 35ff 	mov.w	r5, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     660:	f8df a190 	ldr.w	sl, [pc, #400]	; 7f4 <FIH_LABEL_FIH_CALL_END_933+0x32>
     664:	f8df 8180 	ldr.w	r8, [pc, #384]	; 7e8 <FIH_LABEL_FIH_CALL_END_933+0x26>
    int sha256_valid = 0;
     668:	9003      	str	r0, [sp, #12]
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     66a:	f10d 031e 	add.w	r3, sp, #30
     66e:	aa07      	add	r2, sp, #28
     670:	a908      	add	r1, sp, #32
     672:	a809      	add	r0, sp, #36	; 0x24
     674:	f005 fb66 	bl	5d44 <bootutil_tlv_iter_next>
        if (rc < 0) {
     678:	1e04      	subs	r4, r0, #0
     67a:	db34      	blt.n	6e6 <FIH_LABEL_FIH_CALL_END_387+0x34>
        } else if (rc > 0) {
     67c:	f040 80a4 	bne.w	7c8 <FIH_LABEL_FIH_CALL_END_933+0x6>
        if (type == IMAGE_TLV_SHA256) {
     680:	f8bd 901e 	ldrh.w	r9, [sp, #30]
     684:	f1b9 0f10 	cmp.w	r9, #16
     688:	d138      	bne.n	6fc <FIH_LABEL_FIH_CALL_END_387+0x4a>
            if (len != sizeof(hash)) {
     68a:	f8bd 901c 	ldrh.w	r9, [sp, #28]
     68e:	f1b9 0f20 	cmp.w	r9, #32
     692:	f040 80a3 	bne.w	7dc <FIH_LABEL_FIH_CALL_END_933+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     696:	464b      	mov	r3, r9
     698:	4630      	mov	r0, r6
     69a:	9908      	ldr	r1, [sp, #32]
     69c:	aa3c      	add	r2, sp, #240	; 0xf0
     69e:	f005 ffa4 	bl	65ea <flash_area_read>
            if (rc) {
     6a2:	4604      	mov	r4, r0
     6a4:	b9f8      	cbnz	r0, 6e6 <FIH_LABEL_FIH_CALL_END_387+0x34>

000006a6 <FIH_LABEL_FIH_CALL_START_368>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     6a6:	464a      	mov	r2, r9
     6a8:	a93c      	add	r1, sp, #240	; 0xf0
     6aa:	a80f      	add	r0, sp, #60	; 0x3c
     6ac:	f005 fbc1 	bl	5e32 <boot_fih_memequal>
     6b0:	4604      	mov	r4, r0

000006b2 <FIH_LABEL_FIH_CALL_END_387>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     6b2:	4b4e      	ldr	r3, [pc, #312]	; (7ec <FIH_LABEL_FIH_CALL_END_933+0x2a>)
     6b4:	681b      	ldr	r3, [r3, #0]
     6b6:	4283      	cmp	r3, r0
     6b8:	d115      	bne.n	6e6 <FIH_LABEL_FIH_CALL_END_387+0x34>
            sha256_valid = 1;
     6ba:	2301      	movs	r3, #1
     6bc:	9303      	str	r3, [sp, #12]
     6be:	e7d4      	b.n	66a <bootutil_img_validate+0x9e>
        blk_sz = size - off;
     6c0:	9a67      	ldr	r2, [sp, #412]	; 0x19c
     6c2:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     6c6:	429a      	cmp	r2, r3
     6c8:	bf28      	it	cs
     6ca:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     6cc:	4649      	mov	r1, r9
     6ce:	4613      	mov	r3, r2
     6d0:	4692      	mov	sl, r2
     6d2:	4630      	mov	r0, r6
     6d4:	465a      	mov	r2, fp
     6d6:	f005 ff88 	bl	65ea <flash_area_read>
        if (rc) {
     6da:	4604      	mov	r4, r0
     6dc:	b138      	cbz	r0, 6ee <FIH_LABEL_FIH_CALL_END_387+0x3c>
     6de:	2200      	movs	r2, #0
     6e0:	4b41      	ldr	r3, [pc, #260]	; (7e8 <FIH_LABEL_FIH_CALL_END_933+0x26>)
     6e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     6e6:	4620      	mov	r0, r4
     6e8:	b05d      	add	sp, #372	; 0x174
     6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6ee:	4652      	mov	r2, sl
     6f0:	4659      	mov	r1, fp
     6f2:	a83c      	add	r0, sp, #240	; 0xf0
     6f4:	f005 fe29 	bl	634a <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     6f8:	44d1      	add	r9, sl
     6fa:	e790      	b.n	61e <bootutil_img_validate+0x52>
        } else if (type == IMAGE_TLV_KEYHASH) {
     6fc:	f1b9 0f01 	cmp.w	r9, #1
     700:	d13f      	bne.n	782 <FIH_LABEL_FIH_CALL_END_387+0xd0>
            if (len > 32) {
     702:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     706:	2b20      	cmp	r3, #32
     708:	d868      	bhi.n	7dc <FIH_LABEL_FIH_CALL_END_933+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     70a:	4630      	mov	r0, r6
     70c:	9908      	ldr	r1, [sp, #32]
     70e:	aa3c      	add	r2, sp, #240	; 0xf0
     710:	f005 ff6b 	bl	65ea <flash_area_read>
            if (rc) {
     714:	4604      	mov	r4, r0
     716:	2800      	cmp	r0, #0
     718:	d1e5      	bne.n	6e6 <FIH_LABEL_FIH_CALL_END_387+0x34>
            key_id = bootutil_find_key(buf, len);
     71a:	f89d 501c 	ldrb.w	r5, [sp, #28]
    if (keyhash_len > 32) {
     71e:	2d20      	cmp	r5, #32
     720:	d80a      	bhi.n	738 <FIH_LABEL_FIH_CALL_END_387+0x86>
    for (i = 0; i < bootutil_key_cnt; i++) {
     722:	f8da 3000 	ldr.w	r3, [sl]
     726:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 7f8 <FIH_LABEL_FIH_CALL_END_933+0x36>
     72a:	9304      	str	r3, [sp, #16]
     72c:	9b04      	ldr	r3, [sp, #16]
     72e:	429c      	cmp	r4, r3
     730:	db05      	blt.n	73e <FIH_LABEL_FIH_CALL_END_387+0x8c>
     732:	2300      	movs	r3, #0
     734:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
        return -1;
     738:	f04f 34ff 	mov.w	r4, #4294967295
     73c:	e01d      	b.n	77a <FIH_LABEL_FIH_CALL_END_387+0xc8>
    cc310_init();
     73e:	f000 fdf3 	bl	1328 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     742:	f8c8 9500 	str.w	r9, [r8, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     746:	a81f      	add	r0, sp, #124	; 0x7c
     748:	f004 f9e0 	bl	4b0c <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     74c:	f8db 2004 	ldr.w	r2, [fp, #4]
     750:	a81f      	add	r0, sp, #124	; 0x7c
     752:	6812      	ldr	r2, [r2, #0]
     754:	f85b 1b08 	ldr.w	r1, [fp], #8
     758:	f005 fdf7 	bl	634a <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     75c:	a917      	add	r1, sp, #92	; 0x5c
     75e:	a81f      	add	r0, sp, #124	; 0x7c
     760:	f004 fa46 	bl	4bf0 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     764:	2200      	movs	r2, #0
        if (!memcmp(hash, keyhash, keyhash_len)) {
     766:	a93c      	add	r1, sp, #240	; 0xf0
     768:	f8c8 2500 	str.w	r2, [r8, #1280]	; 0x500
     76c:	a817      	add	r0, sp, #92	; 0x5c
     76e:	462a      	mov	r2, r5
     770:	f006 f9b4 	bl	6adc <memcmp>
     774:	b918      	cbnz	r0, 77e <FIH_LABEL_FIH_CALL_END_387+0xcc>
     776:	f8c8 0500 	str.w	r0, [r8, #1280]	; 0x500
            key_id = bootutil_find_key(buf, len);
     77a:	4625      	mov	r5, r4
     77c:	e775      	b.n	66a <bootutil_img_validate+0x9e>
    for (i = 0; i < bootutil_key_cnt; i++) {
     77e:	3401      	adds	r4, #1
     780:	e7d4      	b.n	72c <FIH_LABEL_FIH_CALL_END_387+0x7a>
        } else if (type == EXPECTED_SIG_TLV) {
     782:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
     786:	f47f af70 	bne.w	66a <bootutil_img_validate+0x9e>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     78a:	2d00      	cmp	r5, #0
     78c:	db19      	blt.n	7c2 <FIH_LABEL_FIH_CALL_END_933>
     78e:	f8da 3000 	ldr.w	r3, [sl]
     792:	42ab      	cmp	r3, r5
     794:	dd15      	ble.n	7c2 <FIH_LABEL_FIH_CALL_END_933>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     796:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     79a:	2b80      	cmp	r3, #128	; 0x80
     79c:	d81e      	bhi.n	7dc <FIH_LABEL_FIH_CALL_END_933+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     79e:	4630      	mov	r0, r6
     7a0:	9908      	ldr	r1, [sp, #32]
     7a2:	aa3c      	add	r2, sp, #240	; 0xf0
     7a4:	f005 ff21 	bl	65ea <flash_area_read>
            if (rc) {
     7a8:	4604      	mov	r4, r0
     7aa:	2800      	cmp	r0, #0
     7ac:	d19b      	bne.n	6e6 <FIH_LABEL_FIH_CALL_END_387+0x34>

000007ae <FIH_LABEL_FIH_CALL_START_911>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     7ae:	b2ed      	uxtb	r5, r5
     7b0:	2120      	movs	r1, #32
     7b2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     7b6:	9500      	str	r5, [sp, #0]
     7b8:	aa3c      	add	r2, sp, #240	; 0xf0
     7ba:	a80f      	add	r0, sp, #60	; 0x3c
     7bc:	f000 f81e 	bl	7fc <bootutil_verify_sig>
     7c0:	4607      	mov	r7, r0

000007c2 <FIH_LABEL_FIH_CALL_END_933>:
                key_id = -1;
     7c2:	f04f 35ff 	mov.w	r5, #4294967295
     7c6:	e750      	b.n	66a <bootutil_img_validate+0x9e>
    if (rc) {
     7c8:	9b03      	ldr	r3, [sp, #12]
     7ca:	b153      	cbz	r3, 7e2 <FIH_LABEL_FIH_CALL_END_933+0x20>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     7cc:	4b07      	ldr	r3, [pc, #28]	; (7ec <FIH_LABEL_FIH_CALL_END_933+0x2a>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     7ce:	681b      	ldr	r3, [r3, #0]
     7d0:	42bb      	cmp	r3, r7
     7d2:	d001      	beq.n	7d8 <FIH_LABEL_FIH_CALL_END_933+0x16>
        return FIH_FAILURE;
     7d4:	9b05      	ldr	r3, [sp, #20]
     7d6:	681f      	ldr	r7, [r3, #0]
                rc = -1;
     7d8:	463c      	mov	r4, r7
     7da:	e784      	b.n	6e6 <FIH_LABEL_FIH_CALL_END_387+0x34>
     7dc:	f04f 34ff 	mov.w	r4, #4294967295
     7e0:	e781      	b.n	6e6 <FIH_LABEL_FIH_CALL_END_387+0x34>
     7e2:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     7e4:	e77f      	b.n	6e6 <FIH_LABEL_FIH_CALL_END_387+0x34>
     7e6:	bf00      	nop
     7e8:	50840000 	.word	0x50840000
     7ec:	200146f4 	.word	0x200146f4
     7f0:	20014500 	.word	0x20014500
     7f4:	000076d0 	.word	0x000076d0
     7f8:	000076d4 	.word	0x000076d4

000007fc <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     800:	b096      	sub	sp, #88	; 0x58
     802:	4617      	mov	r7, r2
     804:	461d      	mov	r5, r3
     806:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     80a:	4b35      	ldr	r3, [pc, #212]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
{
     80c:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     80e:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
    end = pubkey + *bootutil_keys[key_id].len;
     812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     816:	685b      	ldr	r3, [r3, #4]
{
     818:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     81a:	6818      	ldr	r0, [r3, #0]
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     81c:	9101      	str	r1, [sp, #4]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     81e:	2330      	movs	r3, #48	; 0x30
     820:	4401      	add	r1, r0
     822:	aa02      	add	r2, sp, #8
     824:	a801      	add	r0, sp, #4
     826:	f005 fd1d 	bl	6264 <mbedtls_asn1_get_tag>
     82a:	b110      	cbz	r0, 832 <CONFIG_ISR_STACK_SIZE+0x32>
    }
    rc = mbedtls_ecdsa_read_signature(&ctx, hash, hlen, sig, slen);

#else /* CY_MBEDTLS_HW_ACCELERATION */
    if (hlen != NUM_ECC_BYTES) {
        return -1;
     82c:	f04f 30ff 	mov.w	r0, #4294967295
     830:	e053      	b.n	8da <CONFIG_ISR_STACK_SIZE+0xda>
    end = *cp + len;
     832:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     836:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     838:	4621      	mov	r1, r4
     83a:	ab06      	add	r3, sp, #24
     83c:	aa03      	add	r2, sp, #12
     83e:	a801      	add	r0, sp, #4
     840:	f005 fd38 	bl	62b4 <mbedtls_asn1_get_alg>
     844:	2800      	cmp	r0, #0
     846:	d1f1      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    if (alg.len != sizeof(ec_pubkey_oid) - 1 ||
     848:	9a04      	ldr	r2, [sp, #16]
     84a:	2a07      	cmp	r2, #7
     84c:	d1ee      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
        memcmp(alg.p, ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     84e:	4925      	ldr	r1, [pc, #148]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     850:	9805      	ldr	r0, [sp, #20]
     852:	f006 f943 	bl	6adc <memcmp>
    if (alg.len != sizeof(ec_pubkey_oid) - 1 ||
     856:	2800      	cmp	r0, #0
     858:	d1e8      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    if (param.len != sizeof(ec_secp256r1_oid) - 1 ||
     85a:	9a07      	ldr	r2, [sp, #28]
     85c:	2a08      	cmp	r2, #8
     85e:	d1e5      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
        memcmp(param.p, ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     860:	4921      	ldr	r1, [pc, #132]	; (8e8 <CONFIG_ISR_STACK_SIZE+0xe8>)
     862:	9808      	ldr	r0, [sp, #32]
     864:	f006 f93a 	bl	6adc <memcmp>
    if (param.len != sizeof(ec_secp256r1_oid) - 1 ||
     868:	2800      	cmp	r0, #0
     86a:	d1df      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     86c:	4621      	mov	r1, r4
     86e:	aa02      	add	r2, sp, #8
     870:	a801      	add	r0, sp, #4
     872:	f005 fd0b 	bl	628c <mbedtls_asn1_get_bitstring_null>
     876:	2800      	cmp	r0, #0
     878:	d1d8      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    if (*cp + len != end) {
     87a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
     87e:	4413      	add	r3, r2
     880:	429c      	cmp	r4, r3
     882:	d1d3      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     884:	2a41      	cmp	r2, #65	; 0x41
     886:	d1d1      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     888:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     88a:	2330      	movs	r3, #48	; 0x30
     88c:	4629      	mov	r1, r5
     88e:	aa03      	add	r2, sp, #12
     890:	a802      	add	r0, sp, #8
     892:	9702      	str	r7, [sp, #8]
     894:	f005 fce6 	bl	6264 <mbedtls_asn1_get_tag>
    if (rc) {
     898:	2800      	cmp	r0, #0
     89a:	d1c7      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    if (cp + len > end) {
     89c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     8a0:	4413      	add	r3, r2
     8a2:	429d      	cmp	r5, r3
     8a4:	d3c2      	bcc.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    rc = bootutil_read_bigint(signature, &cp, end);
     8a6:	462a      	mov	r2, r5
     8a8:	a902      	add	r1, sp, #8
     8aa:	a806      	add	r0, sp, #24
     8ac:	f005 fa95 	bl	5dda <bootutil_read_bigint>
    if (rc) {
     8b0:	2800      	cmp	r0, #0
     8b2:	d1bb      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     8b4:	462a      	mov	r2, r5
     8b6:	a902      	add	r1, sp, #8
     8b8:	a80e      	add	r0, sp, #56	; 0x38
     8ba:	f005 fa8e 	bl	5dda <bootutil_read_bigint>
    if (rc) {
     8be:	2800      	cmp	r0, #0
     8c0:	d1b4      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    if (hlen != NUM_ECC_BYTES) {
     8c2:	2e20      	cmp	r6, #32
     8c4:	d1b2      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>

    bootutil_ecdsa_p256_init(&ctx);
#ifdef MCUBOOT_ECDSA_NEED_ASN1_SIG
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, sig, slen);
#else
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     8c6:	9901      	ldr	r1, [sp, #4]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     8c8:	780b      	ldrb	r3, [r1, #0]
     8ca:	2b04      	cmp	r3, #4
     8cc:	d1ae      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, sig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     8ce:	4633      	mov	r3, r6
     8d0:	4640      	mov	r0, r8
     8d2:	aa06      	add	r2, sp, #24
     8d4:	3101      	adds	r1, #1
     8d6:	f000 fd3f 	bl	1358 <cc310_ecdsa_verify_secp256r1>
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     8da:	b016      	add	sp, #88	; 0x58
     8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8e0:	000076d4 	.word	0x000076d4
     8e4:	00007b76 	.word	0x00007b76
     8e8:	00007b7e 	.word	0x00007b7e

000008ec <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     8f0:	2302      	movs	r3, #2
{
     8f2:	b086      	sub	sp, #24
     8f4:	460d      	mov	r5, r1
     8f6:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     8f8:	2600      	movs	r6, #0
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     8fa:	f8df 806c 	ldr.w	r8, [pc, #108]	; 968 <boot_read_swap_size+0x7c>
    uint8_t areas[2] = {
     8fe:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     902:	f817 0b01 	ldrb.w	r0, [r7], #1
     906:	a901      	add	r1, sp, #4
     908:	f001 fa16 	bl	1d38 <flash_area_open>
        if (rc != 0) {
     90c:	4604      	mov	r4, r0
     90e:	b9d8      	cbnz	r0, 948 <boot_read_swap_size+0x5c>
        off = boot_magic_off(*fap);
     910:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     912:	2310      	movs	r3, #16
    return fap->fa_size - BOOT_MAGIC_SZ;
     914:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     916:	aa02      	add	r2, sp, #8
     918:	3910      	subs	r1, #16
     91a:	f005 fe66 	bl	65ea <flash_area_read>
        if (rc != 0) {
     91e:	4604      	mov	r4, r0
     920:	b128      	cbz	r0, 92e <boot_read_swap_size+0x42>

    rc = boot_find_status(image_index, &fap);
    if (rc == 0) {
        off = boot_swap_size_off(fap);
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
     922:	9801      	ldr	r0, [sp, #4]
     924:	f005 fe60 	bl	65e8 <flash_area_close>
     928:	e00e      	b.n	948 <boot_read_swap_size+0x5c>
     92a:	2601      	movs	r6, #1
     92c:	e7e9      	b.n	902 <boot_read_swap_size+0x16>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     92e:	2210      	movs	r2, #16
     930:	4641      	mov	r1, r8
     932:	a802      	add	r0, sp, #8
     934:	f006 f8d2 	bl	6adc <memcmp>
     938:	b150      	cbz	r0, 950 <boot_read_swap_size+0x64>
        flash_area_close(*fap);
     93a:	9801      	ldr	r0, [sp, #4]
     93c:	f005 fe54 	bl	65e8 <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     940:	2e00      	cmp	r6, #0
     942:	d0f2      	beq.n	92a <boot_read_swap_size+0x3e>
    return -1;
     944:	f04f 34ff 	mov.w	r4, #4294967295
    }

    return rc;
}
     948:	4620      	mov	r0, r4
     94a:	b006      	add	sp, #24
     94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     950:	9801      	ldr	r0, [sp, #4]
     952:	f006 fb7e 	bl	7052 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     956:	2304      	movs	r3, #4
     958:	f1a0 0108 	sub.w	r1, r0, #8
     95c:	462a      	mov	r2, r5
     95e:	9801      	ldr	r0, [sp, #4]
     960:	f005 fe43 	bl	65ea <flash_area_read>
     964:	4604      	mov	r4, r0
     966:	e7dc      	b.n	922 <boot_read_swap_size+0x36>
     968:	00007894 	.word	0x00007894

0000096c <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     970:	4b38      	ldr	r3, [pc, #224]	; (a54 <FIH_LABEL_FIH_CALL_END_455+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     972:	b088      	sub	sp, #32
     974:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     976:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     978:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     97a:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     97c:	f005 f98c 	bl	5c98 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     980:	a906      	add	r1, sp, #24
     982:	b2c0      	uxtb	r0, r0
     984:	f001 f9d8 	bl	1d38 <flash_area_open>
    if (rc != 0) {
     988:	2800      	cmp	r0, #0
     98a:	d157      	bne.n	a3c <FIH_LABEL_FIH_CALL_END_455+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     98c:	4629      	mov	r1, r5
     98e:	f005 f983 	bl	5c98 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     992:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     994:	a907      	add	r1, sp, #28
     996:	b2c0      	uxtb	r0, r0
     998:	fb04 6405 	mla	r4, r4, r5, r6
     99c:	f001 f9cc 	bl	1d38 <flash_area_open>
    if (rc != 0) {
     9a0:	2800      	cmp	r0, #0
     9a2:	d036      	beq.n	a12 <FIH_LABEL_FIH_CALL_END_455+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     9a4:	f04f 082c 	mov.w	r8, #44	; 0x2c
     9a8:	fb08 f805 	mul.w	r8, r8, r5
     9ac:	eb06 0708 	add.w	r7, r6, r8
     9b0:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     9b2:	f011 0110 	ands.w	r1, r1, #16
     9b6:	d137      	bne.n	a28 <FIH_LABEL_FIH_CALL_END_455+0x54>

000009b8 <FIH_LABEL_FIH_CALL_START_399>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     9b8:	f44f 7380 	mov.w	r3, #256	; 0x100
     9bc:	9301      	str	r3, [sp, #4]
     9be:	4b26      	ldr	r3, [pc, #152]	; (a58 <FIH_LABEL_FIH_CALL_END_455+0x84>)
     9c0:	4622      	mov	r2, r4
     9c2:	9300      	str	r3, [sp, #0]
     9c4:	4608      	mov	r0, r1
     9c6:	e9cd 1103 	strd	r1, r1, [sp, #12]
     9ca:	9b06      	ldr	r3, [sp, #24]
     9cc:	9102      	str	r1, [sp, #8]
     9ce:	f7ff fdfd 	bl	5cc <bootutil_img_validate>
     9d2:	4604      	mov	r4, r0

000009d4 <FIH_LABEL_FIH_CALL_END_455>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9d4:	4b21      	ldr	r3, [pc, #132]	; (a5c <FIH_LABEL_FIH_CALL_END_455+0x88>)
     9d6:	f856 2008 	ldr.w	r2, [r6, r8]
        }
    }
#endif

    FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     9da:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     9dc:	429a      	cmp	r2, r3
     9de:	d10c      	bne.n	9fa <FIH_LABEL_FIH_CALL_END_455+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     9e0:	893a      	ldrh	r2, [r7, #8]
     9e2:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     9e4:	43d1      	mvns	r1, r2
     9e6:	428b      	cmp	r3, r1
     9e8:	d807      	bhi.n	9fa <FIH_LABEL_FIH_CALL_END_455+0x26>
        *dest = a + b;
     9ea:	4413      	add	r3, r2
    if (size >= fap->fa_size) {
     9ec:	6882      	ldr	r2, [r0, #8]
     9ee:	4293      	cmp	r3, r2
     9f0:	d203      	bcs.n	9fa <FIH_LABEL_FIH_CALL_END_455+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     9f2:	4b1b      	ldr	r3, [pc, #108]	; (a60 <FIH_LABEL_FIH_CALL_END_455+0x8c>)
     9f4:	681b      	ldr	r3, [r3, #0]
     9f6:	42a3      	cmp	r3, r4
     9f8:	d01d      	beq.n	a36 <FIH_LABEL_FIH_CALL_END_455+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     9fa:	b345      	cbz	r5, a4e <FIH_LABEL_FIH_CALL_END_455+0x7a>
            flash_area_erase(fap, 0, fap->fa_size);
     9fc:	6882      	ldr	r2, [r0, #8]
     9fe:	2100      	movs	r1, #0
     a00:	f005 fe42 	bl	6688 <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a04:	4a17      	ldr	r2, [pc, #92]	; (a64 <FIH_LABEL_FIH_CALL_END_455+0x90>)
     a06:	2145      	movs	r1, #69	; 0x45
     a08:	4817      	ldr	r0, [pc, #92]	; (a68 <FIH_LABEL_FIH_CALL_END_455+0x94>)
     a0a:	f005 fdc0 	bl	658e <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     a0e:	2401      	movs	r4, #1
     a10:	e011      	b.n	a36 <FIH_LABEL_FIH_CALL_END_455+0x62>
    erased_val = flash_area_erased_val(fap);
     a12:	9807      	ldr	r0, [sp, #28]
     a14:	f005 fe71 	bl	66fa <flash_area_erased_val>
     a18:	4607      	mov	r7, r0
    flash_area_close(fap);
     a1a:	9807      	ldr	r0, [sp, #28]
     a1c:	f005 fde4 	bl	65e8 <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     a20:	1e63      	subs	r3, r4, #1
     a22:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     a24:	4293      	cmp	r3, r2
     a26:	d10d      	bne.n	a44 <FIH_LABEL_FIH_CALL_END_455+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     a28:	2d00      	cmp	r5, #0
     a2a:	d0f0      	beq.n	a0e <FIH_LABEL_FIH_CALL_END_455+0x3a>
            swap_erase_trailer_sectors(state, fap);
     a2c:	4630      	mov	r0, r6
     a2e:	9906      	ldr	r1, [sp, #24]
     a30:	f005 fafa 	bl	6028 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     a34:	462c      	mov	r4, r5
        fih_rc = fih_int_encode(1);
        goto out;
    }

out:
    flash_area_close(fap);
     a36:	9806      	ldr	r0, [sp, #24]
     a38:	f005 fdd6 	bl	65e8 <flash_area_close>

    FIH_RET(fih_rc);
}
     a3c:	4620      	mov	r0, r4
     a3e:	b008      	add	sp, #32
     a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     a44:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     a48:	42b9      	cmp	r1, r7
     a4a:	d0eb      	beq.n	a24 <FIH_LABEL_FIH_CALL_END_455+0x50>
     a4c:	e7aa      	b.n	9a4 <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a4e:	4a07      	ldr	r2, [pc, #28]	; (a6c <FIH_LABEL_FIH_CALL_END_455+0x98>)
     a50:	e7d9      	b.n	a06 <FIH_LABEL_FIH_CALL_END_455+0x32>
     a52:	bf00      	nop
     a54:	20014500 	.word	0x20014500
     a58:	200160de 	.word	0x200160de
     a5c:	96f3b83d 	.word	0x96f3b83d
     a60:	200146f4 	.word	0x200146f4
     a64:	00007b87 	.word	0x00007b87
     a68:	00007b99 	.word	0x00007b99
     a6c:	00007b91 	.word	0x00007b91

00000a70 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     a70:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a72:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     a74:	2100      	movs	r1, #0
{
     a76:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     a78:	4628      	mov	r0, r5
    size = copy_size = 0;
     a7a:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     a7e:	f005 fa92 	bl	5fa6 <boot_status_is_reset>
     a82:	b330      	cbz	r0, ad2 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a84:	4e16      	ldr	r6, [pc, #88]	; (ae0 <boot_swap_image+0x70>)
     a86:	6822      	ldr	r2, [r4, #0]
     a88:	42b2      	cmp	r2, r6
     a8a:	d103      	bne.n	a94 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     a8c:	4620      	mov	r0, r4
     a8e:	aa01      	add	r2, sp, #4
     a90:	f005 f9ff 	bl	5e92 <boot_read_image_size>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a96:	42b3      	cmp	r3, r6
     a98:	d104      	bne.n	aa4 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     a9a:	466a      	mov	r2, sp
     a9c:	2101      	movs	r1, #1
     a9e:	4620      	mov	r0, r4
     aa0:	f005 f9f7 	bl	5e92 <boot_read_image_size>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     aa4:	e9dd 3200 	ldrd	r3, r2, [sp]
     aa8:	4293      	cmp	r3, r2
            copy_size = size;
     aaa:	bf88      	it	hi
     aac:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     aae:	9b01      	ldr	r3, [sp, #4]
     ab0:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     ab2:	9a01      	ldr	r2, [sp, #4]
     ab4:	4629      	mov	r1, r5
     ab6:	4620      	mov	r0, r4
     ab8:	f000 fb26 	bl	1108 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     abc:	4b09      	ldr	r3, [pc, #36]	; (ae4 <boot_swap_image+0x74>)
     abe:	681a      	ldr	r2, [r3, #0]
     ac0:	2a00      	cmp	r2, #0
     ac2:	dd03      	ble.n	acc <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     ac4:	2157      	movs	r1, #87	; 0x57
     ac6:	4808      	ldr	r0, [pc, #32]	; (ae8 <boot_swap_image+0x78>)
     ac8:	f005 fd61 	bl	658e <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     acc:	2000      	movs	r0, #0
     ace:	b002      	add	sp, #8
     ad0:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     ad2:	f105 0108 	add.w	r1, r5, #8
     ad6:	f7ff ff09 	bl	8ec <boot_read_swap_size>
        copy_size = bs->swap_size;
     ada:	68ab      	ldr	r3, [r5, #8]
     adc:	9301      	str	r3, [sp, #4]
     ade:	e7e8      	b.n	ab2 <boot_swap_image+0x42>
     ae0:	96f3b83d 	.word	0x96f3b83d
     ae4:	20015758 	.word	0x20015758
     ae8:	00007bc1 	.word	0x00007bc1

00000aec <boot_copy_region>:
{
     aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     af0:	468a      	mov	sl, r1
     af2:	4690      	mov	r8, r2
     af4:	4699      	mov	r9, r3
    bytes_copied = 0;
     af6:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     af8:	f8df b070 	ldr.w	fp, [pc, #112]	; b6c <boot_copy_region+0x80>
     afc:	4c19      	ldr	r4, [pc, #100]	; (b64 <boot_copy_region+0x78>)
     afe:	4d1a      	ldr	r5, [pc, #104]	; (b68 <boot_copy_region+0x7c>)
    while (bytes_copied < sz) {
     b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b02:	429e      	cmp	r6, r3
     b04:	d301      	bcc.n	b0a <boot_copy_region+0x1e>
    return 0;
     b06:	2000      	movs	r0, #0
     b08:	e00f      	b.n	b2a <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b0c:	4650      	mov	r0, sl
        if (sz - bytes_copied > sizeof buf) {
     b0e:	1b9f      	subs	r7, r3, r6
     b10:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b14:	bf28      	it	cs
     b16:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b1a:	4a14      	ldr	r2, [pc, #80]	; (b6c <boot_copy_region+0x80>)
     b1c:	463b      	mov	r3, r7
     b1e:	eb06 0109 	add.w	r1, r6, r9
     b22:	f005 fd62 	bl	65ea <flash_area_read>
        if (rc != 0) {
     b26:	b110      	cbz	r0, b2e <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b28:	2001      	movs	r0, #1
}
     b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b2e:	990a      	ldr	r1, [sp, #40]	; 0x28
     b30:	463b      	mov	r3, r7
     b32:	465a      	mov	r2, fp
     b34:	4640      	mov	r0, r8
     b36:	1871      	adds	r1, r6, r1
     b38:	f005 fd74 	bl	6624 <flash_area_write>
        if (rc != 0) {
     b3c:	2800      	cmp	r0, #0
     b3e:	d1f3      	bne.n	b28 <boot_copy_region+0x3c>
     b40:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     b44:	443e      	add	r6, r7
     b46:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     b4a:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     b4e:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     b52:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     b56:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     b5a:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     b5e:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     b62:	e7cd      	b.n	b00 <boot_copy_region+0x14>
     b64:	50018000 	.word	0x50018000
     b68:	6e524635 	.word	0x6e524635
     b6c:	20015cde 	.word	0x20015cde

00000b70 <context_boot_go>:
    }
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
     b74:	4b89      	ldr	r3, [pc, #548]	; (d9c <FIH_LABEL_FIH_CALL_END_2383+0x42>)
{
     b76:	4604      	mov	r4, r0
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     b78:	2260      	movs	r2, #96	; 0x60
{
     b7a:	b085      	sub	sp, #20
     b7c:	460f      	mov	r7, r1
    memset(state, 0, sizeof(struct boot_loader_state));
     b7e:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     b80:	681e      	ldr	r6, [r3, #0]
    memset(state, 0, sizeof(struct boot_loader_state));
     b82:	f005 ffe6 	bl	6b52 <memset>

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b86:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b88:	4b85      	ldr	r3, [pc, #532]	; (da0 <FIH_LABEL_FIH_CALL_END_2383+0x46>)
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b8a:	4608      	mov	r0, r1
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b8c:	6263      	str	r3, [r4, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     b8e:	4b85      	ldr	r3, [pc, #532]	; (da4 <FIH_LABEL_FIH_CALL_END_2383+0x4a>)
     b90:	6523      	str	r3, [r4, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b92:	f005 f881 	bl	5c98 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b96:	f104 0120 	add.w	r1, r4, #32
     b9a:	b2c0      	uxtb	r0, r0
     b9c:	f001 f8cc 	bl	1d38 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ba0:	2101      	movs	r1, #1
     ba2:	2000      	movs	r0, #0
     ba4:	f005 f878 	bl	5c98 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     ba8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     bac:	b2c0      	uxtb	r0, r0
     bae:	f001 f8c3 	bl	1d38 <flash_area_open>
     bb2:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     bb4:	4620      	mov	r0, r4
     bb6:	f005 f9cd 	bl	5f54 <boot_read_sectors>
    if (rc != 0) {
     bba:	4602      	mov	r2, r0
     bbc:	b138      	cbz	r0, bce <context_boot_go+0x5e>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
     bc2:	2157      	movs	r1, #87	; 0x57
     bc4:	4878      	ldr	r0, [pc, #480]	; (da8 <FIH_LABEL_FIH_CALL_END_2383+0x4e>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     bc6:	f005 fce2 	bl	658e <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     bca:	2301      	movs	r3, #1
     bcc:	e08d      	b.n	cea <FIH_LABEL_FIH_CALL_END_2166+0xe>
    rc = boot_read_image_headers(state, false, NULL);
     bce:	4601      	mov	r1, r0
     bd0:	4620      	mov	r0, r4
     bd2:	f005 f9a6 	bl	5f22 <boot_read_image_headers>
    if (rc != 0) {
     bd6:	4680      	mov	r8, r0
     bd8:	b118      	cbz	r0, be2 <context_boot_go+0x72>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     bda:	2200      	movs	r2, #0
     bdc:	2157      	movs	r1, #87	; 0x57
     bde:	4873      	ldr	r0, [pc, #460]	; (dac <FIH_LABEL_FIH_CALL_END_2383+0x52>)
     be0:	e7f1      	b.n	bc6 <context_boot_go+0x56>
    if (boot_slots_compatible(state)) {
     be2:	4620      	mov	r0, r4
     be4:	f000 f9a6 	bl	f34 <boot_slots_compatible>
     be8:	2800      	cmp	r0, #0
     bea:	d0ee      	beq.n	bca <context_boot_go+0x5a>
        boot_status_reset(bs);
     bec:	4668      	mov	r0, sp
     bee:	f005 f9d1 	bl	5f94 <boot_status_reset>
        rc = swap_read_status(state, bs);
     bf2:	4669      	mov	r1, sp
     bf4:	4620      	mov	r0, r4
     bf6:	f005 fa6c 	bl	60d2 <swap_read_status>
        if (rc != 0) {
     bfa:	b118      	cbz	r0, c04 <context_boot_go+0x94>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     bfc:	4642      	mov	r2, r8
     bfe:	2157      	movs	r1, #87	; 0x57
     c00:	486b      	ldr	r0, [pc, #428]	; (db0 <FIH_LABEL_FIH_CALL_END_2383+0x56>)
     c02:	e7e0      	b.n	bc6 <context_boot_go+0x56>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     c04:	4668      	mov	r0, sp
     c06:	f005 f9ce 	bl	5fa6 <boot_status_is_reset>
     c0a:	f080 0001 	eor.w	r0, r0, #1
     c0e:	466a      	mov	r2, sp
     c10:	b2c1      	uxtb	r1, r0
     c12:	4620      	mov	r0, r4
     c14:	f005 f985 	bl	5f22 <boot_read_image_headers>
        if (rc != 0) {
     c18:	4602      	mov	r2, r0
     c1a:	2800      	cmp	r0, #0
     c1c:	d1dd      	bne.n	bda <context_boot_go+0x6a>
        if (!boot_status_is_reset(bs)) {
     c1e:	4668      	mov	r0, sp
     c20:	f005 f9c1 	bl	5fa6 <boot_status_is_reset>
     c24:	4680      	mov	r8, r0
     c26:	bb60      	cbnz	r0, c82 <context_boot_go+0x112>
    rc = boot_swap_image(state, bs);
     c28:	4669      	mov	r1, sp
     c2a:	4620      	mov	r0, r4
     c2c:	f7ff ff20 	bl	a70 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c30:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c34:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     c38:	3b03      	subs	r3, #3
     c3a:	2b01      	cmp	r3, #1
     c3c:	d806      	bhi.n	c4c <context_boot_go+0xdc>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c3e:	4640      	mov	r0, r8
     c40:	f005 fa94 	bl	616c <swap_set_image_ok>
        if (rc != 0) {
     c44:	b110      	cbz	r0, c4c <context_boot_go+0xdc>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c46:	23ff      	movs	r3, #255	; 0xff
     c48:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     c4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c50:	3b02      	subs	r3, #2
     c52:	2b02      	cmp	r3, #2
     c54:	d80b      	bhi.n	c6e <context_boot_go+0xfe>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c56:	2000      	movs	r0, #0
     c58:	f005 fa76 	bl	6148 <swap_set_copy_done>
        if (rc != 0) {
     c5c:	b138      	cbz	r0, c6e <context_boot_go+0xfe>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c5e:	23ff      	movs	r3, #255	; 0xff
     c60:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     c64:	2145      	movs	r1, #69	; 0x45
     c66:	4853      	ldr	r0, [pc, #332]	; (db4 <FIH_LABEL_FIH_CALL_END_2383+0x5a>)
     c68:	f005 fc91 	bl	658e <z_log_minimal_printk>
        while (1) {}
     c6c:	e7fe      	b.n	c6c <context_boot_go+0xfc>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c6e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c72:	2bff      	cmp	r3, #255	; 0xff
     c74:	d0f6      	beq.n	c64 <context_boot_go+0xf4>
            rc = boot_read_image_headers(state, false, bs);
     c76:	466a      	mov	r2, sp
     c78:	2100      	movs	r1, #0
     c7a:	4620      	mov	r0, r4
     c7c:	f005 f951 	bl	5f22 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c80:	e7a3      	b.n	bca <context_boot_go+0x5a>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     c82:	f89d 9007 	ldrb.w	r9, [sp, #7]
     c86:	f1b9 0f01 	cmp.w	r9, #1
     c8a:	d123      	bne.n	cd4 <FIH_LABEL_FIH_CALL_START_2146>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c8c:	4610      	mov	r0, r2
     c8e:	f003 f8c7 	bl	3e20 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c92:	1e83      	subs	r3, r0, #2
     c94:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c96:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     c98:	d80d      	bhi.n	cb6 <FIH_LABEL_FIH_CALL_END_2046+0x14>

00000c9a <FIH_LABEL_FIH_CALL_START_2022>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     c9a:	4649      	mov	r1, r9
     c9c:	4620      	mov	r0, r4
     c9e:	f7ff fe65 	bl	96c <boot_validate_slot.isra.0>

00000ca2 <FIH_LABEL_FIH_CALL_END_2046>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     ca2:	4b45      	ldr	r3, [pc, #276]	; (db8 <FIH_LABEL_FIH_CALL_END_2383+0x5e>)
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	4298      	cmp	r0, r3
     ca8:	d005      	beq.n	cb6 <FIH_LABEL_FIH_CALL_END_2046+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     caa:	2801      	cmp	r0, #1
     cac:	bf0c      	ite	eq
     cae:	f04f 0801 	moveq.w	r8, #1
     cb2:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     cb6:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     cba:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     cbe:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     cc0:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     cc4:	d814      	bhi.n	cf0 <FIH_LABEL_FIH_CALL_END_2166+0x14>
     cc6:	2b01      	cmp	r3, #1
     cc8:	d818      	bhi.n	cfc <FIH_LABEL_FIH_CALL_END_2166+0x20>
     cca:	d02f      	beq.n	d2c <FIH_LABEL_FIH_CALL_END_2166+0x50>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     ccc:	23ff      	movs	r3, #255	; 0xff
     cce:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cd2:	e02b      	b.n	d2c <FIH_LABEL_FIH_CALL_END_2166+0x50>

00000cd4 <FIH_LABEL_FIH_CALL_START_2146>:
                FIH_CALL(boot_validate_slot, fih_rc,
     cd4:	2101      	movs	r1, #1
     cd6:	4620      	mov	r0, r4
     cd8:	f7ff fe48 	bl	96c <boot_validate_slot.isra.0>

00000cdc <FIH_LABEL_FIH_CALL_END_2166>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     cdc:	4b36      	ldr	r3, [pc, #216]	; (db8 <FIH_LABEL_FIH_CALL_END_2383+0x5e>)
     cde:	681b      	ldr	r3, [r3, #0]
     ce0:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     ce2:	bf14      	ite	ne
     ce4:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ce6:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     cee:	e7e4      	b.n	cba <FIH_LABEL_FIH_CALL_END_2046+0x18>
        switch (BOOT_SWAP_TYPE(state)) {
     cf0:	2b05      	cmp	r3, #5
     cf2:	d1eb      	bne.n	ccc <FIH_LABEL_FIH_CALL_END_2046+0x2a>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cf4:	2000      	movs	r0, #0
     cf6:	f005 fa39 	bl	616c <swap_set_image_ok>
     cfa:	e012      	b.n	d22 <FIH_LABEL_FIH_CALL_END_2166+0x46>
        rc = boot_swap_image(state, bs);
     cfc:	4669      	mov	r1, sp
     cfe:	4620      	mov	r0, r4
     d00:	f7ff feb6 	bl	a70 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     d04:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     d08:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d0a:	1eda      	subs	r2, r3, #3
     d0c:	2a01      	cmp	r2, #1
     d0e:	d80b      	bhi.n	d28 <FIH_LABEL_FIH_CALL_END_2166+0x4c>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d10:	2000      	movs	r0, #0
     d12:	f005 fa2b 	bl	616c <swap_set_image_ok>
        if (rc != 0) {
     d16:	4605      	mov	r5, r0
     d18:	2800      	cmp	r0, #0
     d1a:	d1d7      	bne.n	ccc <FIH_LABEL_FIH_CALL_END_2046+0x2a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d1c:	2000      	movs	r0, #0
     d1e:	f005 fa13 	bl	6148 <swap_set_copy_done>
            if (rc != 0) {
     d22:	4605      	mov	r5, r0
     d24:	b110      	cbz	r0, d2c <FIH_LABEL_FIH_CALL_END_2166+0x50>
     d26:	e7d1      	b.n	ccc <FIH_LABEL_FIH_CALL_END_2046+0x2a>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d28:	2b02      	cmp	r3, #2
     d2a:	d0f7      	beq.n	d1c <FIH_LABEL_FIH_CALL_END_2166+0x40>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d2c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d30:	2bff      	cmp	r3, #255	; 0xff
     d32:	d104      	bne.n	d3e <FIH_LABEL_FIH_CALL_END_2166+0x62>
            BOOT_LOG_ERR("panic!");
     d34:	2145      	movs	r1, #69	; 0x45
     d36:	481f      	ldr	r0, [pc, #124]	; (db4 <FIH_LABEL_FIH_CALL_END_2383+0x5a>)
     d38:	f005 fc29 	bl	658e <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     d3c:	e7fe      	b.n	d3c <FIH_LABEL_FIH_CALL_END_2166+0x60>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     d3e:	2b01      	cmp	r3, #1
     d40:	d006      	beq.n	d50 <FIH_LABEL_FIH_CALL_START_2367>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     d42:	466a      	mov	r2, sp
     d44:	2100      	movs	r1, #0
     d46:	4620      	mov	r0, r4
     d48:	f005 f8eb 	bl	5f22 <boot_read_image_headers>
            if (rc != 0) {
     d4c:	4605      	mov	r5, r0
     d4e:	b9b8      	cbnz	r0, d80 <FIH_LABEL_FIH_CALL_END_2383+0x26>

00000d50 <FIH_LABEL_FIH_CALL_START_2367>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     d50:	2100      	movs	r1, #0
     d52:	4620      	mov	r0, r4
     d54:	f7ff fe0a 	bl	96c <boot_validate_slot.isra.0>
     d58:	4606      	mov	r6, r0

00000d5a <FIH_LABEL_FIH_CALL_END_2383>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d5a:	f8df 805c 	ldr.w	r8, [pc, #92]	; db8 <FIH_LABEL_FIH_CALL_END_2383+0x5e>
     d5e:	f8d8 3000 	ldr.w	r3, [r8]
     d62:	4298      	cmp	r0, r3
     d64:	d10c      	bne.n	d80 <FIH_LABEL_FIH_CALL_END_2383+0x26>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     d66:	2210      	movs	r2, #16
     d68:	2100      	movs	r1, #0
     d6a:	4668      	mov	r0, sp
     d6c:	f005 fef1 	bl	6b52 <memset>

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     d70:	6a23      	ldr	r3, [r4, #32]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);

    fih_rc = FIH_SUCCESS;
     d72:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     d76:	785a      	ldrb	r2, [r3, #1]
     d78:	713a      	strb	r2, [r7, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
     d7a:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
     d7c:	603c      	str	r4, [r7, #0]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
     d7e:	60bb      	str	r3, [r7, #8]
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d80:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d82:	f005 fc31 	bl	65e8 <flash_area_close>
     d86:	6a20      	ldr	r0, [r4, #32]
     d88:	f005 fc2e 	bl	65e8 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     d8c:	2d00      	cmp	r5, #0
     d8e:	bf14      	ite	ne
     d90:	4628      	movne	r0, r5
     d92:	4630      	moveq	r0, r6
     d94:	b005      	add	sp, #20
     d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     d9a:	bf00      	nop
     d9c:	20014500 	.word	0x20014500
     da0:	20014758 	.word	0x20014758
     da4:	20014f58 	.word	0x20014f58
     da8:	00007bf0 	.word	0x00007bf0
     dac:	00007c32 	.word	0x00007c32
     db0:	00007c5e 	.word	0x00007c5e
     db4:	00007c88 	.word	0x00007c88
     db8:	200146f4 	.word	0x200146f4

00000dbc <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     dbc:	b508      	push	{r3, lr}
     dbe:	4601      	mov	r1, r0

00000dc0 <FIH_LABEL_FIH_CALL_START_2947>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     dc0:	4801      	ldr	r0, [pc, #4]	; (dc8 <FIH_LABEL_FIH_CALL_END_2963+0x2>)
     dc2:	f7ff fed5 	bl	b70 <context_boot_go>

00000dc6 <FIH_LABEL_FIH_CALL_END_2963>:
    FIH_RET(fih_rc);
}
     dc6:	bd08      	pop	{r3, pc}
     dc8:	200146f8 	.word	0x200146f8

00000dcc <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
     dce:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     dd0:	461c      	mov	r4, r3
     dd2:	b333      	cbz	r3, e22 <boot_read_image_header+0x56>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     dd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
     dd6:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     dd8:	7963      	ldrb	r3, [r4, #5]
     dda:	2b01      	cmp	r3, #1
     ddc:	d115      	bne.n	e0a <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     dde:	bb01      	cbnz	r1, e22 <boot_read_image_header+0x56>
     de0:	4b1f      	ldr	r3, [pc, #124]	; (e60 <boot_read_image_header+0x94>)
     de2:	6822      	ldr	r2, [r4, #0]
     de4:	681b      	ldr	r3, [r3, #0]
    off = 0;
     de6:	429a      	cmp	r2, r3
     de8:	bf98      	it	ls
     dea:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     dec:	2000      	movs	r0, #0
     dee:	f004 ff53 	bl	5c98 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     df2:	a901      	add	r1, sp, #4
     df4:	b2c0      	uxtb	r0, r0
     df6:	f000 ff9f 	bl	1d38 <flash_area_open>
    if (rc != 0) {
     dfa:	b1f0      	cbz	r0, e3a <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     dfc:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     dfe:	9801      	ldr	r0, [sp, #4]
     e00:	f005 fbf2 	bl	65e8 <flash_area_close>
    return rc;
}
     e04:	4628      	mov	r0, r5
     e06:	b002      	add	sp, #8
     e08:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     e0a:	2b02      	cmp	r3, #2
     e0c:	d109      	bne.n	e22 <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     e0e:	6823      	ldr	r3, [r4, #0]
     e10:	2b01      	cmp	r3, #1
     e12:	d908      	bls.n	e26 <boot_read_image_header+0x5a>
     e14:	4a12      	ldr	r2, [pc, #72]	; (e60 <boot_read_image_header+0x94>)
     e16:	6812      	ldr	r2, [r2, #0]
     e18:	4293      	cmp	r3, r2
     e1a:	d802      	bhi.n	e22 <boot_read_image_header+0x56>
                if (slot == 0) {
     e1c:	fab1 f181 	clz	r1, r1
     e20:	0949      	lsrs	r1, r1, #5
    off = 0;
     e22:	2500      	movs	r5, #0
     e24:	e7e2      	b.n	dec <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     e26:	d1fc      	bne.n	e22 <boot_read_image_header+0x56>
                if (slot == 0) {
     e28:	2900      	cmp	r1, #0
     e2a:	d0df      	beq.n	dec <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     e2c:	2901      	cmp	r1, #1
     e2e:	d1f8      	bne.n	e22 <boot_read_image_header+0x56>
     e30:	7921      	ldrb	r1, [r4, #4]
     e32:	3902      	subs	r1, #2
     e34:	bf18      	it	ne
     e36:	2101      	movne	r1, #1
     e38:	e7f3      	b.n	e22 <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     e3a:	4629      	mov	r1, r5
     e3c:	2320      	movs	r3, #32
     e3e:	4632      	mov	r2, r6
     e40:	9801      	ldr	r0, [sp, #4]
     e42:	f005 fbd2 	bl	65ea <flash_area_read>
    if (rc != 0) {
     e46:	4605      	mov	r5, r0
     e48:	2800      	cmp	r0, #0
     e4a:	d1d7      	bne.n	dfc <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     e4c:	2c00      	cmp	r4, #0
     e4e:	d0d6      	beq.n	dfe <boot_read_image_header+0x32>
     e50:	6835      	ldr	r5, [r6, #0]
     e52:	4804      	ldr	r0, [pc, #16]	; (e64 <boot_read_image_header+0x98>)
     e54:	1a2d      	subs	r5, r5, r0
     e56:	bf18      	it	ne
     e58:	f04f 35ff 	movne.w	r5, #4294967295
     e5c:	e7cf      	b.n	dfe <boot_read_image_header+0x32>
     e5e:	bf00      	nop
     e60:	20014504 	.word	0x20014504
     e64:	96f3b83d 	.word	0x96f3b83d

00000e68 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e6c:	4607      	mov	r7, r0
     e6e:	460c      	mov	r4, r1
     e70:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e72:	4601      	mov	r1, r0
     e74:	2000      	movs	r0, #0
{
     e76:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e78:	f004 ffe2 	bl	5e40 <boot_status_entries>
    if (max_entries < 0) {
     e7c:	1e05      	subs	r5, r0, #0
     e7e:	db52      	blt.n	f26 <swap_read_status_bytes+0xbe>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     e80:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     e82:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     e84:	f004 ffe6 	bl	5e54 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     e88:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     e8c:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     e90:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     e94:	f04f 34ff 	mov.w	r4, #4294967295
     e98:	f105 38ff 	add.w	r8, r5, #4294967295
     e9c:	fb09 0808 	mla	r8, r9, r8, r0
    for (i = max_entries; i > 0; i--) {
     ea0:	b99d      	cbnz	r5, eca <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     ea2:	f1ba 0f01 	cmp.w	sl, #1
     ea6:	dd03      	ble.n	eb0 <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     ea8:	2145      	movs	r1, #69	; 0x45
     eaa:	4821      	ldr	r0, [pc, #132]	; (f30 <swap_read_status_bytes+0xc8>)
     eac:	f005 fb6f 	bl	658e <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     eb0:	1c63      	adds	r3, r4, #1
     eb2:	d006      	beq.n	ec2 <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     eb4:	2cff      	cmp	r4, #255	; 0xff
     eb6:	dc2a      	bgt.n	f0e <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     eb8:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ebc:	3401      	adds	r4, #1
     ebe:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     ec0:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     ec2:	4628      	mov	r0, r5
     ec4:	b005      	add	sp, #20
     ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     eca:	1e6b      	subs	r3, r5, #1
     ecc:	9300      	str	r3, [sp, #0]
     ece:	4641      	mov	r1, r8
     ed0:	2301      	movs	r3, #1
     ed2:	4638      	mov	r0, r7
     ed4:	f10d 020f 	add.w	r2, sp, #15
     ed8:	f005 fb87 	bl	65ea <flash_area_read>
        if (rc < 0) {
     edc:	1e03      	subs	r3, r0, #0
     ede:	9301      	str	r3, [sp, #4]
     ee0:	db23      	blt.n	f2a <swap_read_status_bytes+0xc2>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     ee2:	2201      	movs	r2, #1
     ee4:	4638      	mov	r0, r7
     ee6:	f10d 010f 	add.w	r1, sp, #15
     eea:	f006 f8c3 	bl	7074 <bootutil_buffer_is_erased>
     eee:	9b01      	ldr	r3, [sp, #4]
     ef0:	b140      	cbz	r0, f04 <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     ef2:	455b      	cmp	r3, fp
     ef4:	d001      	beq.n	efa <swap_read_status_bytes+0x92>
                erased_sections++;
     ef6:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     efa:	469b      	mov	fp, r3
     efc:	9d00      	ldr	r5, [sp, #0]
     efe:	eba8 0809 	sub.w	r8, r8, r9
     f02:	e7cd      	b.n	ea0 <swap_read_status_bytes+0x38>
     f04:	f1b4 3fff 	cmp.w	r4, #4294967295
     f08:	bf08      	it	eq
     f0a:	462c      	moveq	r4, r5
     f0c:	e7f5      	b.n	efa <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     f0e:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f10:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        bs->op = BOOT_STATUS_OP_SWAP;
     f14:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f16:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     f18:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f1c:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     f1e:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f20:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     f22:	7134      	strb	r4, [r6, #4]
     f24:	e7cd      	b.n	ec2 <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
     f26:	2507      	movs	r5, #7
     f28:	e7cb      	b.n	ec2 <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
     f2a:	2501      	movs	r5, #1
     f2c:	e7c9      	b.n	ec2 <swap_read_status_bytes+0x5a>
     f2e:	bf00      	nop
     f30:	00007c94 	.word	0x00007c94

00000f34 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
     f34:	6a81      	ldr	r1, [r0, #40]	; 0x28
     f36:	6d42      	ldr	r2, [r0, #84]	; 0x54
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     f38:	b538      	push	{r3, r4, r5, lr}
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     f3a:	4291      	cmp	r1, r2
     f3c:	d008      	beq.n	f50 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     f3e:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     f40:	428b      	cmp	r3, r1
     f42:	d005      	beq.n	f50 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     f44:	2157      	movs	r1, #87	; 0x57
     f46:	4814      	ldr	r0, [pc, #80]	; (f98 <boot_slots_compatible+0x64>)

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     f48:	f005 fb21 	bl	658e <z_log_minimal_printk>
            return 0;
     f4c:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     f4e:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     f50:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
     f54:	d91c      	bls.n	f90 <boot_slots_compatible+0x5c>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     f56:	2157      	movs	r1, #87	; 0x57
     f58:	4810      	ldr	r0, [pc, #64]	; (f9c <boot_slots_compatible+0x68>)
     f5a:	e7f5      	b.n	f48 <boot_slots_compatible+0x14>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     f5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
     f5e:	6d05      	ldr	r5, [r0, #80]	; 0x50
     f60:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     f64:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     f68:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     f6a:	686d      	ldr	r5, [r5, #4]
     f6c:	42ac      	cmp	r4, r5
     f6e:	d002      	beq.n	f76 <boot_slots_compatible+0x42>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     f70:	2157      	movs	r1, #87	; 0x57
     f72:	480b      	ldr	r0, [pc, #44]	; (fa0 <boot_slots_compatible+0x6c>)
     f74:	e7e8      	b.n	f48 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
     f76:	3301      	adds	r3, #1
     f78:	429a      	cmp	r2, r3
     f7a:	d1ef      	bne.n	f5c <boot_slots_compatible+0x28>
    if (num_sectors_pri > num_sectors_sec) {
     f7c:	4291      	cmp	r1, r2
     f7e:	d905      	bls.n	f8c <boot_slots_compatible+0x58>
     f80:	6a43      	ldr	r3, [r0, #36]	; 0x24
     f82:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
     f86:	6853      	ldr	r3, [r2, #4]
     f88:	42a3      	cmp	r3, r4
     f8a:	d1f1      	bne.n	f70 <boot_slots_compatible+0x3c>
    return 1;
     f8c:	2001      	movs	r0, #1
     f8e:	e7de      	b.n	f4e <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
     f90:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
     f92:	461c      	mov	r4, r3
     f94:	e7f0      	b.n	f78 <boot_slots_compatible+0x44>
     f96:	bf00      	nop
     f98:	00007cb7 	.word	0x00007cb7
     f9c:	00007cef 	.word	0x00007cef
     fa0:	00007d1e 	.word	0x00007d1e

00000fa4 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
     fa4:	b500      	push	{lr}
     fa6:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     fa8:	2002      	movs	r0, #2
     faa:	a904      	add	r1, sp, #16
     fac:	f006 f8c5 	bl	713a <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     fb0:	f89d 2010 	ldrb.w	r2, [sp, #16]
     fb4:	2a01      	cmp	r2, #1
     fb6:	d041      	beq.n	103c <swap_status_source+0x98>
     fb8:	4b25      	ldr	r3, [pc, #148]	; (1050 <swap_status_source+0xac>)
     fba:	4926      	ldr	r1, [pc, #152]	; (1054 <swap_status_source+0xb0>)
     fbc:	2a03      	cmp	r2, #3
     fbe:	bf18      	it	ne
     fc0:	460b      	movne	r3, r1
     fc2:	f89d 2013 	ldrb.w	r2, [sp, #19]
     fc6:	2149      	movs	r1, #73	; 0x49
     fc8:	9202      	str	r2, [sp, #8]
     fca:	f89d 2012 	ldrb.w	r2, [sp, #18]
     fce:	4822      	ldr	r0, [pc, #136]	; (1058 <swap_status_source+0xb4>)
     fd0:	9201      	str	r2, [sp, #4]
     fd2:	f89d 2011 	ldrb.w	r2, [sp, #17]
     fd6:	9200      	str	r2, [sp, #0]
     fd8:	4a20      	ldr	r2, [pc, #128]	; (105c <swap_status_source+0xb8>)
     fda:	f005 fad8 	bl	658e <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     fde:	2006      	movs	r0, #6
     fe0:	a906      	add	r1, sp, #24
     fe2:	f006 f8aa 	bl	713a <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     fe6:	f89d 2018 	ldrb.w	r2, [sp, #24]
     fea:	2a01      	cmp	r2, #1
     fec:	d028      	beq.n	1040 <swap_status_source+0x9c>
     fee:	4b18      	ldr	r3, [pc, #96]	; (1050 <swap_status_source+0xac>)
     ff0:	4918      	ldr	r1, [pc, #96]	; (1054 <swap_status_source+0xb0>)
     ff2:	2a03      	cmp	r2, #3
     ff4:	bf18      	it	ne
     ff6:	460b      	movne	r3, r1
     ff8:	f89d 201b 	ldrb.w	r2, [sp, #27]
     ffc:	2149      	movs	r1, #73	; 0x49
     ffe:	9202      	str	r2, [sp, #8]
    1000:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1004:	4814      	ldr	r0, [pc, #80]	; (1058 <swap_status_source+0xb4>)
    1006:	9201      	str	r2, [sp, #4]
    1008:	f89d 2019 	ldrb.w	r2, [sp, #25]
    100c:	9200      	str	r2, [sp, #0]
    100e:	4a14      	ldr	r2, [pc, #80]	; (1060 <swap_status_source+0xbc>)
    1010:	f005 fabd 	bl	658e <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    1014:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1018:	2b01      	cmp	r3, #1
    101a:	d113      	bne.n	1044 <swap_status_source+0xa0>
    101c:	f89d 3012 	ldrb.w	r3, [sp, #18]
    1020:	2b03      	cmp	r3, #3
    1022:	d10f      	bne.n	1044 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    1024:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1028:	2b01      	cmp	r3, #1
    102a:	d00b      	beq.n	1044 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    102c:	480d      	ldr	r0, [pc, #52]	; (1064 <swap_status_source+0xc0>)
    102e:	2149      	movs	r1, #73	; 0x49
    1030:	f005 faad 	bl	658e <z_log_minimal_printk>
        return source;
    1034:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    1036:	b009      	add	sp, #36	; 0x24
    1038:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    103c:	4b0a      	ldr	r3, [pc, #40]	; (1068 <swap_status_source+0xc4>)
    103e:	e7c0      	b.n	fc2 <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    1040:	4b09      	ldr	r3, [pc, #36]	; (1068 <swap_status_source+0xc4>)
    1042:	e7d9      	b.n	ff8 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    1044:	4809      	ldr	r0, [pc, #36]	; (106c <swap_status_source+0xc8>)
    1046:	2149      	movs	r1, #73	; 0x49
    1048:	f005 faa1 	bl	658e <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    104c:	2000      	movs	r0, #0
    104e:	e7f2      	b.n	1036 <swap_status_source+0x92>
    1050:	00007d4f 	.word	0x00007d4f
    1054:	00007d55 	.word	0x00007d55
    1058:	00007d67 	.word	0x00007d67
    105c:	00007d59 	.word	0x00007d59
    1060:	00007da8 	.word	0x00007da8
    1064:	00007db8 	.word	0x00007db8
    1068:	00007d4a 	.word	0x00007d4a
    106c:	00007dd7 	.word	0x00007dd7

00001070 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec, uint8_t sec_id)
{
    1070:	b570      	push	{r4, r5, r6, lr}
    1072:	4606      	mov	r6, r0
    1074:	4618      	mov	r0, r3
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1076:	684b      	ldr	r3, [r1, #4]
{
    1078:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    107a:	4a1d      	ldr	r2, [pc, #116]	; (10f0 <fixup_revert+0x80>)
    107c:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1080:	4293      	cmp	r3, r2
{
    1082:	460d      	mov	r5, r1
    1084:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1086:	d12e      	bne.n	10e6 <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    1088:	680b      	ldr	r3, [r1, #0]
    108a:	2b01      	cmp	r3, #1
    108c:	d12b      	bne.n	10e6 <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state_by_id(sec_id, &swap_state);
    108e:	a904      	add	r1, sp, #16
    1090:	f006 f853 	bl	713a <boot_read_swap_state_by_id>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1094:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1098:	2a01      	cmp	r2, #1
    109a:	d026      	beq.n	10ea <fixup_revert+0x7a>
    109c:	4b15      	ldr	r3, [pc, #84]	; (10f4 <fixup_revert+0x84>)
    109e:	4916      	ldr	r1, [pc, #88]	; (10f8 <fixup_revert+0x88>)
    10a0:	2a03      	cmp	r2, #3
    10a2:	bf18      	it	ne
    10a4:	460b      	movne	r3, r1
    10a6:	f89d 2013 	ldrb.w	r2, [sp, #19]
    10aa:	2149      	movs	r1, #73	; 0x49
    10ac:	9202      	str	r2, [sp, #8]
    10ae:	f89d 2012 	ldrb.w	r2, [sp, #18]
    10b2:	4812      	ldr	r0, [pc, #72]	; (10fc <fixup_revert+0x8c>)
    10b4:	9201      	str	r2, [sp, #4]
    10b6:	f89d 2011 	ldrb.w	r2, [sp, #17]
    10ba:	9200      	str	r2, [sp, #0]
    10bc:	4a10      	ldr	r2, [pc, #64]	; (1100 <fixup_revert+0x90>)
    10be:	f005 fa66 	bl	658e <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    10c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    10c6:	2b03      	cmp	r3, #3
    10c8:	d10d      	bne.n	10e6 <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    10ca:	4621      	mov	r1, r4
    10cc:	4630      	mov	r0, r6
    10ce:	f004 ffab 	bl	6028 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    10d2:	4620      	mov	r0, r4
    10d4:	f006 f828 	bl	7128 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    10d8:	4620      	mov	r0, r4
    10da:	68a9      	ldr	r1, [r5, #8]
    10dc:	f004 feca 	bl	5e74 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    10e0:	4620      	mov	r0, r4
    10e2:	f002 fe3f 	bl	3d64 <boot_write_magic>
        assert(rc == 0);
    }
}
    10e6:	b006      	add	sp, #24
    10e8:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    10ea:	4b06      	ldr	r3, [pc, #24]	; (1104 <fixup_revert+0x94>)
    10ec:	e7db      	b.n	10a6 <fixup_revert+0x36>
    10ee:	bf00      	nop
    10f0:	04000100 	.word	0x04000100
    10f4:	00007d4f 	.word	0x00007d4f
    10f8:	00007d55 	.word	0x00007d55
    10fc:	00007d67 	.word	0x00007d67
    1100:	00007da8 	.word	0x00007da8
    1104:	00007d4a 	.word	0x00007d4a

00001108 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    1108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    110c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    110e:	ed2d 8b02 	vpush	{d8}
    1112:	460c      	mov	r4, r1
    1114:	685e      	ldr	r6, [r3, #4]
    1116:	4605      	mov	r5, r0
    1118:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    111a:	2300      	movs	r3, #0
{
    111c:	b08b      	sub	sp, #44	; 0x2c
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    111e:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    1120:	429a      	cmp	r2, r3
    1122:	4608      	mov	r0, r1
    1124:	f101 0101 	add.w	r1, r1, #1
    1128:	d8f9      	bhi.n	111e <swap_run+0x16>
    112a:	4f78      	ldr	r7, [pc, #480]	; (130c <swap_run+0x204>)
    112c:	6038      	str	r0, [r7, #0]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    112e:	4620      	mov	r0, r4
    1130:	f004 ff39 	bl	5fa6 <boot_status_is_reset>
    1134:	46bb      	mov	fp, r7
    1136:	b1c8      	cbz	r0, 116c <swap_run+0x64>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1138:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    113a:	f004 fe7c 	bl	5e36 <boot_trailer_sz>
        sz = 0;
    113e:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1140:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1142:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    1144:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    1146:	4282      	cmp	r2, r0
    1148:	d201      	bcs.n	114e <swap_run+0x46>
                break;
            }
            first_trailer_idx--;
    114a:	3b01      	subs	r3, #1
            sz += sector_sz;
    114c:	e7fa      	b.n	1144 <swap_run+0x3c>
        }

        if (g_last_idx >= first_trailer_idx) {
    114e:	f8db 2000 	ldr.w	r2, [fp]
    1152:	429a      	cmp	r2, r3
    1154:	d30a      	bcc.n	116c <swap_run+0x64>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    1156:	2157      	movs	r1, #87	; 0x57
    1158:	486d      	ldr	r0, [pc, #436]	; (1310 <swap_run+0x208>)
    115a:	f005 fa18 	bl	658e <z_log_minimal_printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    115e:	2301      	movs	r3, #1
    1160:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    1162:	b00b      	add	sp, #44	; 0x2c
    1164:	ecbd 8b02 	vpop	{d8}
    1168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    116c:	a908      	add	r1, sp, #32
    116e:	2002      	movs	r0, #2
    1170:	f000 fde2 	bl	1d38 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1174:	a909      	add	r1, sp, #36	; 0x24
    1176:	2006      	movs	r0, #6
    1178:	f000 fdde 	bl	1d38 <flash_area_open>
    fixup_revert(state, bs, fap_sec, FLASH_AREA_IMAGE_SECONDARY(image_index));
    117c:	2306      	movs	r3, #6
    117e:	4621      	mov	r1, r4
    1180:	4628      	mov	r0, r5
    1182:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1184:	f7ff ff74 	bl	1070 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1188:	7963      	ldrb	r3, [r4, #5]
    118a:	2b01      	cmp	r3, #1
    118c:	d108      	bne.n	11a0 <swap_run+0x98>
        idx = g_last_idx;
    118e:	f8db 7000 	ldr.w	r7, [fp]
    BOOT_STATUS_ASSERT(rc == 0);
    1192:	f8df a180 	ldr.w	sl, [pc, #384]	; 1314 <swap_run+0x20c>
        while (idx > 0) {
    1196:	f8db 3000 	ldr.w	r3, [fp]
    119a:	b9a7      	cbnz	r7, 11c6 <swap_run+0xbe>
        bs->idx = BOOT_STATUS_IDX_0;
    119c:	2301      	movs	r3, #1
    119e:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    11a0:	2302      	movs	r3, #2
    idx = 1;
    11a2:	2701      	movs	r7, #1
        BOOT_STATUS_ASSERT(rc == 0);
    11a4:	f8df 816c 	ldr.w	r8, [pc, #364]	; 1314 <swap_run+0x20c>
    bs->op = BOOT_STATUS_OP_SWAP;
    11a8:	7163      	strb	r3, [r4, #5]
        bs->state = BOOT_STATUS_STATE_1;
    11aa:	9305      	str	r3, [sp, #20]
    while (idx <= g_last_idx) {
    11ac:	f8db 3000 	ldr.w	r3, [fp]
    11b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
    11b4:	429f      	cmp	r7, r3
    11b6:	d94d      	bls.n	1254 <swap_run+0x14c>
    flash_area_close(fap_pri);
    11b8:	4648      	mov	r0, r9
    11ba:	f005 fa15 	bl	65e8 <flash_area_close>
    flash_area_close(fap_sec);
    11be:	9809      	ldr	r0, [sp, #36]	; 0x24
    11c0:	f005 fa12 	bl	65e8 <flash_area_close>
    11c4:	e7cd      	b.n	1162 <swap_run+0x5a>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    11c6:	6822      	ldr	r2, [r4, #0]
    11c8:	3301      	adds	r3, #1
    11ca:	1a9b      	subs	r3, r3, r2
    11cc:	429f      	cmp	r7, r3
    11ce:	d83f      	bhi.n	1250 <swap_run+0x148>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    11d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    11d2:	2a01      	cmp	r2, #1
           BOOT_IMG(state, slot).sectors[0].fs_off;
    11d4:	6819      	ldr	r1, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    11d6:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    11da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    11de:	f853 3c08 	ldr.w	r3, [r3, #-8]
    11e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
    11e6:	eba3 0301 	sub.w	r3, r3, r1
    11ea:	ee08 3a10 	vmov	s16, r3
    11ee:	eba0 0901 	sub.w	r9, r0, r1
    11f2:	d112      	bne.n	121a <swap_run+0x112>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    11f4:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    11f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    11f8:	2a02      	cmp	r2, #2
    11fa:	d00a      	beq.n	1212 <swap_run+0x10a>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    11fc:	4641      	mov	r1, r8
    11fe:	4628      	mov	r0, r5
    1200:	9303      	str	r3, [sp, #12]
    1202:	f004 ff11 	bl	6028 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    1206:	4622      	mov	r2, r4
    1208:	4641      	mov	r1, r8
    120a:	4628      	mov	r0, r5
    120c:	f004 ff42 	bl	6094 <swap_status_init>
    1210:	9b03      	ldr	r3, [sp, #12]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1212:	4619      	mov	r1, r3
    1214:	4628      	mov	r0, r5
    1216:	f004 ff07 	bl	6028 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    121a:	4632      	mov	r2, r6
    121c:	4649      	mov	r1, r9
    121e:	4640      	mov	r0, r8
    1220:	f004 ff00 	bl	6024 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    1224:	ee18 3a10 	vmov	r3, s16
    1228:	4642      	mov	r2, r8
    122a:	4641      	mov	r1, r8
    122c:	4628      	mov	r0, r5
    122e:	e9cd 9600 	strd	r9, r6, [sp]
    1232:	f7ff fc5b 	bl	aec <boot_copy_region>
    rc = boot_write_status(state, bs);
    1236:	4621      	mov	r1, r4
    1238:	4628      	mov	r0, r5
    123a:	f004 fec1 	bl	5fc0 <boot_write_status>
    bs->idx++;
    123e:	6823      	ldr	r3, [r4, #0]
    1240:	3301      	adds	r3, #1
    1242:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    1244:	b120      	cbz	r0, 1250 <swap_run+0x148>
    1246:	f8da 3000 	ldr.w	r3, [sl]
    124a:	3301      	adds	r3, #1
    124c:	f8ca 3000 	str.w	r3, [sl]
            idx--;
    1250:	3f01      	subs	r7, #1
    1252:	e7a0      	b.n	1196 <swap_run+0x8e>
        if (idx >= bs->idx) {
    1254:	6823      	ldr	r3, [r4, #0]
    1256:	429f      	cmp	r7, r3
    1258:	d356      	bcc.n	1308 <swap_run+0x200>
    125a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    125c:	6d28      	ldr	r0, [r5, #80]	; 0x50
    125e:	f851 3037 	ldr.w	r3, [r1, r7, lsl #3]
    1262:	00fa      	lsls	r2, r7, #3
    1264:	9304      	str	r3, [sp, #16]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    1266:	680b      	ldr	r3, [r1, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1268:	3a08      	subs	r2, #8
    126a:	f850 c002 	ldr.w	ip, [r0, r2]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    126e:	9303      	str	r3, [sp, #12]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1270:	6803      	ldr	r3, [r0, #0]
    if (bs->state == BOOT_STATUS_STATE_0) {
    1272:	7920      	ldrb	r0, [r4, #4]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1274:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    if (bs->state == BOOT_STATUS_STATE_0) {
    1278:	2801      	cmp	r0, #1
    127a:	ebac 0303 	sub.w	r3, ip, r3
    127e:	d141      	bne.n	1304 <swap_run+0x1fc>
    1280:	5889      	ldr	r1, [r1, r2]
    1282:	9307      	str	r3, [sp, #28]
    1284:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1286:	4632      	mov	r2, r6
    1288:	1ac9      	subs	r1, r1, r3
    128a:	4648      	mov	r0, r9
    128c:	9106      	str	r1, [sp, #24]
    128e:	f004 fec9 	bl	6024 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    1292:	9906      	ldr	r1, [sp, #24]
    1294:	9b07      	ldr	r3, [sp, #28]
    1296:	464a      	mov	r2, r9
    1298:	9100      	str	r1, [sp, #0]
    129a:	4628      	mov	r0, r5
    129c:	4651      	mov	r1, sl
    129e:	9601      	str	r6, [sp, #4]
    12a0:	9306      	str	r3, [sp, #24]
    12a2:	f7ff fc23 	bl	aec <boot_copy_region>
        rc = boot_write_status(state, bs);
    12a6:	4621      	mov	r1, r4
    12a8:	4628      	mov	r0, r5
    12aa:	f004 fe89 	bl	5fc0 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    12ae:	9b05      	ldr	r3, [sp, #20]
    12b0:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    12b2:	9b06      	ldr	r3, [sp, #24]
    12b4:	b120      	cbz	r0, 12c0 <swap_run+0x1b8>
    12b6:	f8d8 2000 	ldr.w	r2, [r8]
    12ba:	3201      	adds	r2, #1
    12bc:	f8c8 2000 	str.w	r2, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    12c0:	4619      	mov	r1, r3
    12c2:	4632      	mov	r2, r6
    12c4:	4650      	mov	r0, sl
    12c6:	9306      	str	r3, [sp, #24]
    12c8:	f004 feac 	bl	6024 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    12cc:	9b06      	ldr	r3, [sp, #24]
    12ce:	4649      	mov	r1, r9
    12d0:	9300      	str	r3, [sp, #0]
    12d2:	4628      	mov	r0, r5
    12d4:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    12d8:	9601      	str	r6, [sp, #4]
    12da:	1a9b      	subs	r3, r3, r2
    12dc:	4652      	mov	r2, sl
    12de:	f7ff fc05 	bl	aec <boot_copy_region>
        rc = boot_write_status(state, bs);
    12e2:	4621      	mov	r1, r4
    12e4:	4628      	mov	r0, r5
    12e6:	f004 fe6b 	bl	5fc0 <boot_write_status>
        bs->idx++;
    12ea:	6823      	ldr	r3, [r4, #0]
    12ec:	3301      	adds	r3, #1
    12ee:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    12f0:	f04f 0301 	mov.w	r3, #1
    12f4:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    12f6:	b138      	cbz	r0, 1308 <swap_run+0x200>
    12f8:	f8d8 3000 	ldr.w	r3, [r8]
    12fc:	3301      	adds	r3, #1
    12fe:	f8c8 3000 	str.w	r3, [r8]
    1302:	e001      	b.n	1308 <swap_run+0x200>
    if (bs->state == BOOT_STATUS_STATE_1) {
    1304:	2802      	cmp	r0, #2
    1306:	d0db      	beq.n	12c0 <swap_run+0x1b8>
        idx++;
    1308:	3701      	adds	r7, #1
    130a:	e74f      	b.n	11ac <swap_run+0xa4>
    130c:	20014504 	.word	0x20014504
    1310:	00007dee 	.word	0x00007dee
    1314:	20015758 	.word	0x20015758

00001318 <mbedtls_platform_zeroize>:
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    memset_func( buf, 0, len );
    1318:	4b02      	ldr	r3, [pc, #8]	; (1324 <mbedtls_platform_zeroize+0xc>)
{
    131a:	460a      	mov	r2, r1
    memset_func( buf, 0, len );
    131c:	681b      	ldr	r3, [r3, #0]
    131e:	2100      	movs	r1, #0
    1320:	4718      	bx	r3
    1322:	bf00      	nop
    1324:	20014508 	.word	0x20014508

00001328 <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    1328:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    132a:	4d09      	ldr	r5, [pc, #36]	; (1350 <cc310_init+0x28>)
    132c:	782b      	ldrb	r3, [r5, #0]
    132e:	b953      	cbnz	r3, 1346 <cc310_init+0x1e>
    NRF_CRYPTOCELL->ENABLE=1;
    1330:	2601      	movs	r6, #1
    1332:	4c08      	ldr	r4, [pc, #32]	; (1354 <cc310_init+0x2c>)
    1334:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        nrf_cc310_enable();
        if (nrf_cc310_bl_init() != 0) {
    1338:	f003 fc8a 	bl	4c50 <nrf_cc310_bl_init>
    133c:	b928      	cbnz	r0, 134a <cc310_init+0x22>
            return -1;
        }
        initialized = true;
    133e:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    1340:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        nrf_cc310_disable();
    }

    return 0;
}
    1344:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    1346:	2000      	movs	r0, #0
    1348:	e7fc      	b.n	1344 <cc310_init+0x1c>
            return -1;
    134a:	f04f 30ff 	mov.w	r0, #4294967295
    134e:	e7f9      	b.n	1344 <cc310_init+0x1c>
    1350:	200161de 	.word	0x200161de
    1354:	50840000 	.word	0x50840000

00001358 <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    1358:	b570      	push	{r4, r5, r6, lr}
    135a:	b0ae      	sub	sp, #184	; 0xb8
    135c:	461d      	mov	r5, r3
    135e:	4604      	mov	r4, r0
    1360:	e9cd 2102 	strd	r2, r1, [sp, #8]
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    1364:	f7ff ffe0 	bl	1328 <cc310_init>
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    1368:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    NRF_CRYPTOCELL->ENABLE=1;
    136c:	2301      	movs	r3, #1
    136e:	4e06      	ldr	r6, [pc, #24]	; (1388 <cc310_ecdsa_verify_secp256r1+0x30>)
    1370:	a805      	add	r0, sp, #20
    1372:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
    1376:	4623      	mov	r3, r4
    1378:	9500      	str	r5, [sp, #0]
    137a:	f005 ffed 	bl	7358 <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    137e:	2300      	movs	r3, #0
    1380:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    1384:	b02e      	add	sp, #184	; 0xb8
    1386:	bd70      	pop	{r4, r5, r6, pc}
    1388:	50840000 	.word	0x50840000

0000138c <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    138c:	2201      	movs	r2, #1
    138e:	4b12      	ldr	r3, [pc, #72]	; (13d8 <nrf_cleanup_peripheral+0x4c>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1390:	4912      	ldr	r1, [pc, #72]	; (13dc <nrf_cleanup_peripheral+0x50>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1392:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    1394:	f04f 33ff 	mov.w	r3, #4294967295
    1398:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    p_reg->INTENCLR = mask;
    139c:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13a0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    13a4:	604a      	str	r2, [r1, #4]
    13a6:	3104      	adds	r1, #4
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    13a8:	2100      	movs	r1, #0
    p_reg->EVTENCLR = mask;
    13aa:	4a0d      	ldr	r2, [pc, #52]	; (13e0 <nrf_cleanup_peripheral+0x54>)
    13ac:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    13b0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    13b4:	f5a2 4250 	sub.w	r2, r2, #53248	; 0xd000
    13b8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    13bc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    13c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    13c4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    13c8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    13cc:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    13d0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#endif
    nrf_cleanup_clock();
}
    13d4:	4770      	bx	lr
    13d6:	bf00      	nop
    13d8:	50014004 	.word	0x50014004
    13dc:	50014000 	.word	0x50014000
    13e0:	50015000 	.word	0x50015000

000013e4 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    13e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    13e8:	9c07      	ldr	r4, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    13ea:	b91c      	cbnz	r4, 13f4 <base64_encode+0x10>
		*olen = 0;
		return 0;
    13ec:	4620      	mov	r0, r4
		*olen = 0;
    13ee:	6014      	str	r4, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    13f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	n = slen / 3 + (slen % 3 != 0);
    13f4:	2503      	movs	r5, #3
    13f6:	fbb4 f5f5 	udiv	r5, r4, r5
    13fa:	eb05 0745 	add.w	r7, r5, r5, lsl #1
    13fe:	42bc      	cmp	r4, r7
    1400:	bf18      	it	ne
    1402:	3501      	addne	r5, #1
	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    1404:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    1408:	d305      	bcc.n	1416 <base64_encode+0x32>
		*olen = BASE64_SIZE_T_MAX;
    140a:	f04f 33ff 	mov.w	r3, #4294967295
    140e:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
    1410:	f06f 000b 	mvn.w	r0, #11
    1414:	e7ec      	b.n	13f0 <base64_encode+0xc>
	n *= 4;
    1416:	00ad      	lsls	r5, r5, #2
	if ((dlen < n + 1) || (!dst)) {
    1418:	3501      	adds	r5, #1
    141a:	428d      	cmp	r5, r1
    141c:	d800      	bhi.n	1420 <base64_encode+0x3c>
    141e:	b908      	cbnz	r0, 1424 <base64_encode+0x40>
		*olen = n + 1;
    1420:	6015      	str	r5, [r2, #0]
    1422:	e7f5      	b.n	1410 <base64_encode+0x2c>
	for (i = 0, p = dst; i < n; i += 3) {
    1424:	4606      	mov	r6, r0
    1426:	2500      	movs	r5, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1428:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 14e0 <base64_encode+0xfc>
	for (i = 0, p = dst; i < n; i += 3) {
    142c:	42bd      	cmp	r5, r7
    142e:	4631      	mov	r1, r6
    1430:	469c      	mov	ip, r3
    1432:	f106 0604 	add.w	r6, r6, #4
    1436:	f103 0303 	add.w	r3, r3, #3
    143a:	d329      	bcc.n	1490 <base64_encode+0xac>
	if (i < slen) {
    143c:	42a5      	cmp	r5, r4
    143e:	d222      	bcs.n	1486 <base64_encode+0xa2>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1440:	3501      	adds	r5, #1
    1442:	42a5      	cmp	r5, r4
    1444:	bf28      	it	cs
    1446:	2300      	movcs	r3, #0
		C1 = *src++;
    1448:	f89c 6000 	ldrb.w	r6, [ip]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    144c:	4f24      	ldr	r7, [pc, #144]	; (14e0 <base64_encode+0xfc>)
		C2 = ((i + 1) < slen) ? *src++ : 0;
    144e:	bf38      	it	cc
    1450:	f89c 3001 	ldrbcc.w	r3, [ip, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1454:	ea4f 0ca6 	mov.w	ip, r6, asr #2
    1458:	f817 c00c 	ldrb.w	ip, [r7, ip]
		if ((i + 1) < slen) {
    145c:	42a5      	cmp	r5, r4
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    145e:	f881 c000 	strb.w	ip, [r1]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1462:	eb07 1c13 	add.w	ip, r7, r3, lsr #4
			*p++ = '=';
    1466:	bf2f      	iteee	cs
    1468:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    146a:	009b      	lslcc	r3, r3, #2
    146c:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
    1470:	5cfb      	ldrbcc	r3, [r7, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1472:	0136      	lsls	r6, r6, #4
    1474:	708b      	strb	r3, [r1, #2]
		*p++ = '=';
    1476:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1478:	f006 0630 	and.w	r6, r6, #48	; 0x30
    147c:	f81c 6006 	ldrb.w	r6, [ip, r6]
		*p++ = '=';
    1480:	70cb      	strb	r3, [r1, #3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1482:	704e      	strb	r6, [r1, #1]
		*p++ = '=';
    1484:	3104      	adds	r1, #4
	*olen = p - dst;
    1486:	1a08      	subs	r0, r1, r0
    1488:	6010      	str	r0, [r2, #0]
	*p = 0U;
    148a:	2000      	movs	r0, #0
    148c:	7008      	strb	r0, [r1, #0]
	return 0;
    148e:	e7af      	b.n	13f0 <base64_encode+0xc>
		C1 = *src++;
    1490:	f813 cc03 	ldrb.w	ip, [r3, #-3]
		C2 = *src++;
    1494:	f813 1c02 	ldrb.w	r1, [r3, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1498:	ea4f 09ac 	mov.w	r9, ip, asr #2
    149c:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    14a0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
		C3 = *src++;
    14a4:	f813 8c01 	ldrb.w	r8, [r3, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    14a8:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    14ac:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    14b0:	eb0e 1911 	add.w	r9, lr, r1, lsr #4
    14b4:	f819 c00c 	ldrb.w	ip, [r9, ip]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    14b8:	0089      	lsls	r1, r1, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    14ba:	f806 cc03 	strb.w	ip, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    14be:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    14c2:	eb0e 1c98 	add.w	ip, lr, r8, lsr #6
    14c6:	f81c 1001 	ldrb.w	r1, [ip, r1]
		*p++ = base64_enc_map[C3 & 0x3F];
    14ca:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    14ce:	f806 1c02 	strb.w	r1, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    14d2:	f81e 1008 	ldrb.w	r1, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    14d6:	3503      	adds	r5, #3
		*p++ = base64_enc_map[C3 & 0x3F];
    14d8:	f806 1c01 	strb.w	r1, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    14dc:	e7a6      	b.n	142c <base64_encode+0x48>
    14de:	bf00      	nop
    14e0:	00007ef8 	.word	0x00007ef8

000014e4 <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    14e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    14e8:	2700      	movs	r7, #0
    14ea:	463c      	mov	r4, r7
    14ec:	463d      	mov	r5, r7
{
    14ee:	9e07      	ldr	r6, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    14f0:	f8df 8128 	ldr.w	r8, [pc, #296]	; 161c <base64_decode+0x138>
	for (i = n = j = 0U; i < slen; i++) {
    14f4:	42b5      	cmp	r5, r6
    14f6:	d30a      	bcc.n	150e <base64_decode+0x2a>
    14f8:	462e      	mov	r6, r5
    14fa:	e004      	b.n	1506 <base64_decode+0x22>
			++i;
    14fc:	3501      	adds	r5, #1
		while (i < slen && src[i] == ' ') {
    14fe:	42ae      	cmp	r6, r5
			++x;
    1500:	f10e 0e01 	add.w	lr, lr, #1
		while (i < slen && src[i] == ' ') {
    1504:	d105      	bne.n	1512 <base64_decode+0x2e>
		}

		n++;
	}

	if (n == 0) {
    1506:	bbcc      	cbnz	r4, 157c <base64_decode+0x98>
		*olen = 0;
    1508:	6014      	str	r4, [r2, #0]
		}
	}

	*olen = p - dst;

	return 0;
    150a:	2000      	movs	r0, #0
    150c:	e056      	b.n	15bc <base64_decode+0xd8>
		x = 0U;
    150e:	f04f 0e00 	mov.w	lr, #0
		while (i < slen && src[i] == ' ') {
    1512:	f813 c005 	ldrb.w	ip, [r3, r5]
    1516:	f1bc 0f20 	cmp.w	ip, #32
    151a:	d0ef      	beq.n	14fc <base64_decode+0x18>
		if (i == slen) {
    151c:	42ae      	cmp	r6, r5
    151e:	d0f2      	beq.n	1506 <base64_decode+0x22>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    1520:	eba6 0905 	sub.w	r9, r6, r5
    1524:	f1b9 0f01 	cmp.w	r9, #1
    1528:	d915      	bls.n	1556 <base64_decode+0x72>
    152a:	f1bc 0f0d 	cmp.w	ip, #13
    152e:	d112      	bne.n	1556 <base64_decode+0x72>
    1530:	eb03 0905 	add.w	r9, r3, r5
    1534:	f899 9001 	ldrb.w	r9, [r9, #1]
    1538:	f1b9 0f0a 	cmp.w	r9, #10
		if (src[i] == '\n') {
    153c:	d01c      	beq.n	1578 <base64_decode+0x94>
		if (x != 0U) {
    153e:	f1be 0f00 	cmp.w	lr, #0
    1542:	d105      	bne.n	1550 <base64_decode+0x6c>
		if (src[i] == '=' && ++j > 2) {
    1544:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    1548:	d108      	bne.n	155c <base64_decode+0x78>
    154a:	3701      	adds	r7, #1
    154c:	2f02      	cmp	r7, #2
    154e:	d908      	bls.n	1562 <base64_decode+0x7e>
			return -EINVAL;
    1550:	f06f 0015 	mvn.w	r0, #21
    1554:	e032      	b.n	15bc <base64_decode+0xd8>
		if (src[i] == '\n') {
    1556:	f1bc 0f0a 	cmp.w	ip, #10
    155a:	e7ef      	b.n	153c <base64_decode+0x58>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    155c:	f01c 0f80 	tst.w	ip, #128	; 0x80
    1560:	d1f6      	bne.n	1550 <base64_decode+0x6c>
    1562:	f818 c00c 	ldrb.w	ip, [r8, ip]
    1566:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    156a:	d0f1      	beq.n	1550 <base64_decode+0x6c>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    156c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    1570:	d801      	bhi.n	1576 <base64_decode+0x92>
    1572:	2f00      	cmp	r7, #0
    1574:	d1ec      	bne.n	1550 <base64_decode+0x6c>
		n++;
    1576:	3401      	adds	r4, #1
	for (i = n = j = 0U; i < slen; i++) {
    1578:	3501      	adds	r5, #1
    157a:	e7bb      	b.n	14f4 <base64_decode+0x10>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    157c:	2506      	movs	r5, #6
    157e:	f004 0c07 	and.w	ip, r4, #7
    1582:	08e4      	lsrs	r4, r4, #3
    1584:	fb05 fc0c 	mul.w	ip, r5, ip
    1588:	436c      	muls	r4, r5
    158a:	f10c 0c07 	add.w	ip, ip, #7
	n -= j;
    158e:	1be4      	subs	r4, r4, r7
    1590:	eb04 04dc 	add.w	r4, r4, ip, lsr #3
	if (dst == NULL || dlen < n) {
    1594:	b178      	cbz	r0, 15b6 <base64_decode+0xd2>
    1596:	428c      	cmp	r4, r1
    1598:	d80d      	bhi.n	15b6 <base64_decode+0xd2>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    159a:	2700      	movs	r7, #0
	if (dst == NULL || dlen < n) {
    159c:	4601      	mov	r1, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    159e:	2503      	movs	r5, #3
    15a0:	463c      	mov	r4, r7
		j -= (base64_dec_map[*src] == 64U);
    15a2:	f8df e078 	ldr.w	lr, [pc, #120]	; 161c <base64_decode+0x138>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    15a6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1620 <base64_decode+0x13c>
    15aa:	441e      	add	r6, r3
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    15ac:	429e      	cmp	r6, r3
    15ae:	d107      	bne.n	15c0 <base64_decode+0xdc>
	*olen = p - dst;
    15b0:	1a09      	subs	r1, r1, r0
    15b2:	6011      	str	r1, [r2, #0]
    15b4:	e7a9      	b.n	150a <base64_decode+0x26>
		return -ENOMEM;
    15b6:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    15ba:	6014      	str	r4, [r2, #0]
}
    15bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    15c0:	f813 9b01 	ldrb.w	r9, [r3], #1
    15c4:	f1a9 0c0a 	sub.w	ip, r9, #10
    15c8:	fa5f fc8c 	uxtb.w	ip, ip
    15cc:	f1bc 0f16 	cmp.w	ip, #22
    15d0:	d804      	bhi.n	15dc <base64_decode+0xf8>
    15d2:	fa28 fc0c 	lsr.w	ip, r8, ip
    15d6:	f01c 0f01 	tst.w	ip, #1
    15da:	d1e7      	bne.n	15ac <base64_decode+0xc8>
		j -= (base64_dec_map[*src] == 64U);
    15dc:	f81e c009 	ldrb.w	ip, [lr, r9]
		if (++n == 4) {
    15e0:	3401      	adds	r4, #1
		j -= (base64_dec_map[*src] == 64U);
    15e2:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    15e6:	bf08      	it	eq
    15e8:	3d01      	subeq	r5, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    15ea:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
		if (++n == 4) {
    15ee:	2c04      	cmp	r4, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    15f0:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
		if (++n == 4) {
    15f4:	d1da      	bne.n	15ac <base64_decode+0xc8>
			if (j > 0) {
    15f6:	b17d      	cbz	r5, 1618 <base64_decode+0x134>
				*p++ = (unsigned char)(x >> 16);
    15f8:	0c3c      	lsrs	r4, r7, #16
			if (j > 1) {
    15fa:	2d01      	cmp	r5, #1
				*p++ = (unsigned char)(x >> 16);
    15fc:	700c      	strb	r4, [r1, #0]
			if (j > 1) {
    15fe:	d102      	bne.n	1606 <base64_decode+0x122>
				*p++ = (unsigned char)(x >> 16);
    1600:	3101      	adds	r1, #1
			n = 0;
    1602:	2400      	movs	r4, #0
    1604:	e7d2      	b.n	15ac <base64_decode+0xc8>
			if (j > 2) {
    1606:	2d02      	cmp	r5, #2
				*p++ = (unsigned char)(x >> 8);
    1608:	ea4f 2417 	mov.w	r4, r7, lsr #8
    160c:	704c      	strb	r4, [r1, #1]
				*p++ = (unsigned char)(x);
    160e:	bf16      	itet	ne
    1610:	708f      	strbne	r7, [r1, #2]
				*p++ = (unsigned char)(x >> 8);
    1612:	3102      	addeq	r1, #2
				*p++ = (unsigned char)(x);
    1614:	3103      	addne	r1, #3
    1616:	e7f4      	b.n	1602 <base64_decode+0x11e>
			n = 0;
    1618:	462c      	mov	r4, r5
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    161a:	e7c7      	b.n	15ac <base64_decode+0xc8>
    161c:	00007e78 	.word	0x00007e78
    1620:	00400009 	.word	0x00400009

00001624 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1624:	680b      	ldr	r3, [r1, #0]
    1626:	3301      	adds	r3, #1
    1628:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    162a:	4b01      	ldr	r3, [pc, #4]	; (1630 <char_out+0xc>)
    162c:	681b      	ldr	r3, [r3, #0]
    162e:	4718      	bx	r3
    1630:	2001450c 	.word	0x2001450c

00001634 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1634:	b507      	push	{r0, r1, r2, lr}
    1636:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1638:	2100      	movs	r1, #0
{
    163a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    163c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    163e:	4803      	ldr	r0, [pc, #12]	; (164c <vprintk+0x18>)
    1640:	a901      	add	r1, sp, #4
    1642:	f000 f8ed 	bl	1820 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1646:	b003      	add	sp, #12
    1648:	f85d fb04 	ldr.w	pc, [sp], #4
    164c:	00001625 	.word	0x00001625

00001650 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1654:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    1658:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    165a:	f019 0808 	ands.w	r8, r9, #8
{
    165e:	4693      	mov	fp, r2
	if (processing) {
    1660:	d00e      	beq.n	1680 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    1662:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1664:	bf0c      	ite	eq
    1666:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    166a:	f049 0920 	orrne.w	r9, r9, #32
    166e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1672:	f38b 8811 	msr	BASEPRI, fp
    1676:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    167a:	b003      	add	sp, #12
    167c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    1680:	f8df a198 	ldr.w	sl, [pc, #408]	; 181c <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1684:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1688:	2902      	cmp	r1, #2
    168a:	d107      	bne.n	169c <process_event+0x4c>
			evt = process_recheck(mgr);
    168c:	4620      	mov	r0, r4
    168e:	f004 fecf 	bl	6430 <process_recheck>
		if (evt == EVT_NOP) {
    1692:	2800      	cmp	r0, #0
    1694:	d0ed      	beq.n	1672 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1696:	2801      	cmp	r0, #1
    1698:	8b23      	ldrh	r3, [r4, #24]
    169a:	d14d      	bne.n	1738 <process_event+0xe8>
			res = mgr->last_res;
    169c:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    169e:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    16a0:	2f00      	cmp	r7, #0
    16a2:	da15      	bge.n	16d0 <process_event+0x80>
		*clients = mgr->clients;
    16a4:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16a6:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    16aa:	e9c4 8800 	strd	r8, r8, [r4]
    16ae:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    16b2:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    16b4:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16b6:	8b21      	ldrh	r1, [r4, #24]
    16b8:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    16bc:	454a      	cmp	r2, r9
    16be:	d002      	beq.n	16c6 <process_event+0x76>
		if (do_monitors
    16c0:	68a3      	ldr	r3, [r4, #8]
    16c2:	2b00      	cmp	r3, #0
    16c4:	d159      	bne.n	177a <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    16c6:	b90d      	cbnz	r5, 16cc <process_event+0x7c>
		    || (transit != NULL)) {
    16c8:	2e00      	cmp	r6, #0
    16ca:	d071      	beq.n	17b0 <process_event+0x160>
    16cc:	2300      	movs	r3, #0
    16ce:	e055      	b.n	177c <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16d0:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    16d4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    16d6:	2a01      	cmp	r2, #1
    16d8:	d81f      	bhi.n	171a <process_event+0xca>
		*clients = mgr->clients;
    16da:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    16de:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    16e0:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    16e2:	b289      	uxth	r1, r1
	list->tail = NULL;
    16e4:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    16e8:	d10c      	bne.n	1704 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    16ea:	2d00      	cmp	r5, #0
    16ec:	462b      	mov	r3, r5
    16ee:	bf38      	it	cc
    16f0:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    16f2:	b12b      	cbz	r3, 1700 <process_event+0xb0>
				mgr->refs += 1U;
    16f4:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	3201      	adds	r2, #1
    16fa:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    16fc:	2b00      	cmp	r3, #0
    16fe:	d1f8      	bne.n	16f2 <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1700:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1704:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1706:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1708:	f004 fe92 	bl	6430 <process_recheck>
    170c:	2800      	cmp	r0, #0
    170e:	d0d1      	beq.n	16b4 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1710:	8b23      	ldrh	r3, [r4, #24]
    1712:	f043 0320 	orr.w	r3, r3, #32
    1716:	8323      	strh	r3, [r4, #24]
    1718:	e7cc      	b.n	16b4 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    171a:	2b04      	cmp	r3, #4
    171c:	d10a      	bne.n	1734 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    171e:	f021 0107 	bic.w	r1, r1, #7
    1722:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    1724:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1726:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1728:	f004 fe82 	bl	6430 <process_recheck>
    172c:	b110      	cbz	r0, 1734 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    172e:	f041 0120 	orr.w	r1, r1, #32
    1732:	8321      	strh	r1, [r4, #24]
    1734:	2500      	movs	r5, #0
    1736:	e7bd      	b.n	16b4 <process_event+0x64>
		} else if (evt == EVT_START) {
    1738:	2803      	cmp	r0, #3
    173a:	d109      	bne.n	1750 <process_event+0x100>
			transit = mgr->transitions->start;
    173c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    173e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1742:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1744:	f043 0306 	orr.w	r3, r3, #6
}
    1748:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    174a:	8323      	strh	r3, [r4, #24]
		res = 0;
    174c:	462f      	mov	r7, r5
    174e:	e7b2      	b.n	16b6 <process_event+0x66>
		} else if (evt == EVT_STOP) {
    1750:	2804      	cmp	r0, #4
    1752:	d106      	bne.n	1762 <process_event+0x112>
			transit = mgr->transitions->stop;
    1754:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1756:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    175a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    175c:	f043 0304 	orr.w	r3, r3, #4
    1760:	e7f2      	b.n	1748 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    1762:	2805      	cmp	r0, #5
    1764:	d106      	bne.n	1774 <process_event+0x124>
			transit = mgr->transitions->reset;
    1766:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1768:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    176c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    176e:	f043 0305 	orr.w	r3, r3, #5
    1772:	e7e9      	b.n	1748 <process_event+0xf8>
    1774:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1776:	462e      	mov	r6, r5
    1778:	e7e8      	b.n	174c <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    177a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    177c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1780:	8321      	strh	r1, [r4, #24]
    1782:	f38b 8811 	msr	BASEPRI, fp
    1786:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    178a:	bb03      	cbnz	r3, 17ce <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    178c:	2d00      	cmp	r5, #0
    178e:	d134      	bne.n	17fa <process_event+0x1aa>
			if (transit != NULL) {
    1790:	b116      	cbz	r6, 1798 <process_event+0x148>
				transit(mgr, transition_complete);
    1792:	4651      	mov	r1, sl
    1794:	4620      	mov	r0, r4
    1796:	47b0      	blx	r6
	__asm__ volatile(
    1798:	f04f 0320 	mov.w	r3, #32
    179c:	f3ef 8b11 	mrs	fp, BASEPRI
    17a0:	f383 8811 	msr	BASEPRI, r3
    17a4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    17a8:	8b23      	ldrh	r3, [r4, #24]
    17aa:	f023 0308 	bic.w	r3, r3, #8
    17ae:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    17b0:	8b23      	ldrh	r3, [r4, #24]
    17b2:	06da      	lsls	r2, r3, #27
    17b4:	d52a      	bpl.n	180c <process_event+0x1bc>
			evt = EVT_COMPLETE;
    17b6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    17b8:	f023 0310 	bic.w	r3, r3, #16
    17bc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    17be:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    17c2:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    17c6:	2900      	cmp	r1, #0
    17c8:	f47f af5e 	bne.w	1688 <process_event+0x38>
out:
    17cc:	e751      	b.n	1672 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    17ce:	68a1      	ldr	r1, [r4, #8]
    17d0:	2900      	cmp	r1, #0
    17d2:	d0db      	beq.n	178c <process_event+0x13c>
	return node->next;
    17d4:	680b      	ldr	r3, [r1, #0]
    17d6:	2b00      	cmp	r3, #0
    17d8:	bf38      	it	cc
    17da:	2300      	movcc	r3, #0
    17dc:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    17de:	4620      	mov	r0, r4
    17e0:	463b      	mov	r3, r7
    17e2:	f8d1 b004 	ldr.w	fp, [r1, #4]
    17e6:	9201      	str	r2, [sp, #4]
    17e8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    17ea:	9a01      	ldr	r2, [sp, #4]
    17ec:	f1b9 0f00 	cmp.w	r9, #0
    17f0:	d0cc      	beq.n	178c <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    17f2:	4649      	mov	r1, r9
    17f4:	f8d9 3000 	ldr.w	r3, [r9]
    17f8:	e7ed      	b.n	17d6 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    17fa:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    17fc:	463b      	mov	r3, r7
    17fe:	4620      	mov	r0, r4
    1800:	9201      	str	r2, [sp, #4]
    1802:	682d      	ldr	r5, [r5, #0]
    1804:	f004 fe30 	bl	6468 <notify_one>
	while (!sys_slist_is_empty(list)) {
    1808:	9a01      	ldr	r2, [sp, #4]
    180a:	e7bf      	b.n	178c <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    180c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1810:	bf1e      	ittt	ne
    1812:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    1816:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1818:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    181a:	e7d0      	b.n	17be <process_event+0x16e>
    181c:	00006495 	.word	0x00006495

00001820 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    1820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1824:	468b      	mov	fp, r1
	size_t count = 0;
    1826:	f04f 0a00 	mov.w	sl, #0
{
    182a:	b08f      	sub	sp, #60	; 0x3c
    182c:	461f      	mov	r7, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    182e:	1e53      	subs	r3, r2, #1
{
    1830:	9000      	str	r0, [sp, #0]
	fmt--;
    1832:	9301      	str	r3, [sp, #4]

start:
	while (*++fmt != '%') {
    1834:	9b01      	ldr	r3, [sp, #4]
    1836:	7858      	ldrb	r0, [r3, #1]
    1838:	1c5c      	adds	r4, r3, #1
    183a:	2825      	cmp	r0, #37	; 0x25
    183c:	d122      	bne.n	1884 <cbvprintf+0x64>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    183e:	2000      	movs	r0, #0
	precision = -1;
    1840:	f04f 36ff 	mov.w	r6, #4294967295
	length_mod = 0;
    1844:	4601      	mov	r1, r0
	min_width = -1;
    1846:	4634      	mov	r4, r6
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    1848:	f04f 0e0a 	mov.w	lr, #10
	for (fmt++ ; ; fmt++) {
    184c:	f103 0c02 	add.w	ip, r3, #2
	padding_mode = 0;
    1850:	9002      	str	r0, [sp, #8]
		switch (*fmt) {
    1852:	f89c 2000 	ldrb.w	r2, [ip]
    1856:	f8cd c004 	str.w	ip, [sp, #4]
    185a:	2a39      	cmp	r2, #57	; 0x39
    185c:	f10c 0c01 	add.w	ip, ip, #1
    1860:	d858      	bhi.n	1914 <cbvprintf+0xf4>
    1862:	2a1f      	cmp	r2, #31
    1864:	d818      	bhi.n	1898 <cbvprintf+0x78>
    1866:	2a00      	cmp	r2, #0
    1868:	f000 8205 	beq.w	1c76 <cbvprintf+0x456>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    186c:	4659      	mov	r1, fp
    186e:	9b00      	ldr	r3, [sp, #0]
    1870:	2025      	movs	r0, #37	; 0x25
    1872:	4798      	blx	r3
			OUTC(*fmt);
    1874:	9b01      	ldr	r3, [sp, #4]
    1876:	4659      	mov	r1, fp
    1878:	7818      	ldrb	r0, [r3, #0]
    187a:	9b00      	ldr	r3, [sp, #0]
    187c:	4798      	blx	r3
    187e:	f10a 0a02 	add.w	sl, sl, #2
			goto start;
    1882:	e7d7      	b.n	1834 <cbvprintf+0x14>
		if (*fmt == '\0') {
    1884:	2800      	cmp	r0, #0
    1886:	f000 81f6 	beq.w	1c76 <cbvprintf+0x456>
		OUTC(*fmt);
    188a:	4659      	mov	r1, fp
    188c:	9b00      	ldr	r3, [sp, #0]
    188e:	4798      	blx	r3
    1890:	f10a 0a01 	add.w	sl, sl, #1
	while (*++fmt != '%') {
    1894:	9401      	str	r4, [sp, #4]
    1896:	e7cd      	b.n	1834 <cbvprintf+0x14>
    1898:	f1a2 0320 	sub.w	r3, r2, #32
    189c:	2b19      	cmp	r3, #25
    189e:	d8e5      	bhi.n	186c <cbvprintf+0x4c>
    18a0:	a501      	add	r5, pc, #4	; (adr r5, 18a8 <cbvprintf+0x88>)
    18a2:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    18a6:	bf00      	nop
    18a8:	00001911 	.word	0x00001911
    18ac:	0000186d 	.word	0x0000186d
    18b0:	0000186d 	.word	0x0000186d
    18b4:	00001911 	.word	0x00001911
    18b8:	0000186d 	.word	0x0000186d
    18bc:	00001991 	.word	0x00001991
    18c0:	0000186d 	.word	0x0000186d
    18c4:	0000186d 	.word	0x0000186d
    18c8:	0000186d 	.word	0x0000186d
    18cc:	0000186d 	.word	0x0000186d
    18d0:	000019d3 	.word	0x000019d3
    18d4:	00001911 	.word	0x00001911
    18d8:	0000186d 	.word	0x0000186d
    18dc:	000019e7 	.word	0x000019e7
    18e0:	0000199f 	.word	0x0000199f
    18e4:	0000186d 	.word	0x0000186d
    18e8:	000019ab 	.word	0x000019ab
    18ec:	000019c7 	.word	0x000019c7
    18f0:	000019c7 	.word	0x000019c7
    18f4:	000019c7 	.word	0x000019c7
    18f8:	000019c7 	.word	0x000019c7
    18fc:	000019c7 	.word	0x000019c7
    1900:	000019c7 	.word	0x000019c7
    1904:	000019c7 	.word	0x000019c7
    1908:	000019c7 	.word	0x000019c7
    190c:	000019c7 	.word	0x000019c7
		switch (*fmt) {
    1910:	4610      	mov	r0, r2
    1912:	e79e      	b.n	1852 <cbvprintf+0x32>
    1914:	2a58      	cmp	r2, #88	; 0x58
    1916:	f000 8145 	beq.w	1ba4 <cbvprintf+0x384>
    191a:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    191e:	b2dd      	uxtb	r5, r3
    1920:	2d17      	cmp	r5, #23
    1922:	d8a3      	bhi.n	186c <cbvprintf+0x4c>
    1924:	2b17      	cmp	r3, #23
    1926:	d8a1      	bhi.n	186c <cbvprintf+0x4c>
    1928:	a501      	add	r5, pc, #4	; (adr r5, 1930 <cbvprintf+0x110>)
    192a:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    192e:	bf00      	nop
    1930:	00001c01 	.word	0x00001c01
    1934:	00001a0d 	.word	0x00001a0d
    1938:	0000186d 	.word	0x0000186d
    193c:	0000186d 	.word	0x0000186d
    1940:	0000186d 	.word	0x0000186d
    1944:	000019ed 	.word	0x000019ed
    1948:	00001a0d 	.word	0x00001a0d
    194c:	0000186d 	.word	0x0000186d
    1950:	0000186d 	.word	0x0000186d
    1954:	000019ed 	.word	0x000019ed
    1958:	0000186d 	.word	0x0000186d
    195c:	0000186d 	.word	0x0000186d
    1960:	0000186d 	.word	0x0000186d
    1964:	00001b4b 	.word	0x00001b4b
    1968:	0000186d 	.word	0x0000186d
    196c:	0000186d 	.word	0x0000186d
    1970:	00001be3 	.word	0x00001be3
    1974:	0000186d 	.word	0x0000186d
    1978:	00001a0d 	.word	0x00001a0d
    197c:	0000186d 	.word	0x0000186d
    1980:	0000186d 	.word	0x0000186d
    1984:	00001b4b 	.word	0x00001b4b
    1988:	0000186d 	.word	0x0000186d
    198c:	000019ed 	.word	0x000019ed
			OUTC('%');
    1990:	4659      	mov	r1, fp
    1992:	2025      	movs	r0, #37	; 0x25
    1994:	9b00      	ldr	r3, [sp, #0]
    1996:	4798      	blx	r3
    1998:	f10a 0a01 	add.w	sl, sl, #1
			goto start;
    199c:	e74a      	b.n	1834 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    199e:	9b02      	ldr	r3, [sp, #8]
			precision = 0;
    19a0:	2600      	movs	r6, #0
			padding_mode &= (char)~PAD_ZERO;
    19a2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    19a6:	9302      	str	r3, [sp, #8]
			continue;
    19a8:	e753      	b.n	1852 <cbvprintf+0x32>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    19aa:	2c00      	cmp	r4, #0
    19ac:	da0b      	bge.n	19c6 <cbvprintf+0x1a6>
    19ae:	2e00      	cmp	r6, #0
    19b0:	da0b      	bge.n	19ca <cbvprintf+0x1aa>
    19b2:	9b02      	ldr	r3, [sp, #8]
    19b4:	2b00      	cmp	r3, #0
    19b6:	f000 815a 	beq.w	1c6e <cbvprintf+0x44e>
				min_width = 10 * min_width + *fmt - '0';
    19ba:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    19be:	fb0e 2404 	mla	r4, lr, r4, r2
    19c2:	3c30      	subs	r4, #48	; 0x30
    19c4:	e745      	b.n	1852 <cbvprintf+0x32>
			if (precision >= 0) {
    19c6:	2e00      	cmp	r6, #0
    19c8:	dbf7      	blt.n	19ba <cbvprintf+0x19a>
				precision = 10 * precision + *fmt - '0';
    19ca:	fb0e 2606 	mla	r6, lr, r6, r2
    19ce:	3e30      	subs	r6, #48	; 0x30
    19d0:	e73f      	b.n	1852 <cbvprintf+0x32>
			if (precision >= 0) {
    19d2:	2e00      	cmp	r6, #0
    19d4:	f857 3b04 	ldr.w	r3, [r7], #4
    19d8:	db01      	blt.n	19de <cbvprintf+0x1be>
				precision = va_arg(ap, int);
    19da:	461e      	mov	r6, r3
    19dc:	e739      	b.n	1852 <cbvprintf+0x32>
				if (min_width < 0) {
    19de:	1e1c      	subs	r4, r3, #0
    19e0:	f6bf af37 	bge.w	1852 <cbvprintf+0x32>
					min_width = -min_width;
    19e4:	4264      	negs	r4, r4
		switch (*fmt) {
    19e6:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    19e8:	9302      	str	r3, [sp, #8]
    19ea:	e732      	b.n	1852 <cbvprintf+0x32>
			if (*fmt == 'h' && length_mod == 'h') {
    19ec:	2a68      	cmp	r2, #104	; 0x68
    19ee:	d103      	bne.n	19f8 <cbvprintf+0x1d8>
    19f0:	2968      	cmp	r1, #104	; 0x68
    19f2:	d106      	bne.n	1a02 <cbvprintf+0x1e2>
				length_mod = 'H';
    19f4:	2148      	movs	r1, #72	; 0x48
    19f6:	e72c      	b.n	1852 <cbvprintf+0x32>
			} else if (*fmt == 'l' && length_mod == 'l') {
    19f8:	2a6c      	cmp	r2, #108	; 0x6c
    19fa:	d102      	bne.n	1a02 <cbvprintf+0x1e2>
    19fc:	296c      	cmp	r1, #108	; 0x6c
    19fe:	f000 8138 	beq.w	1c72 <cbvprintf+0x452>
			} else if (length_mod == '\0') {
    1a02:	2900      	cmp	r1, #0
    1a04:	f47f af32 	bne.w	186c <cbvprintf+0x4c>
    1a08:	4611      	mov	r1, r2
		switch (*fmt) {
    1a0a:	e722      	b.n	1852 <cbvprintf+0x32>
			if (length_mod == 'z') {
    1a0c:	297a      	cmp	r1, #122	; 0x7a
    1a0e:	d108      	bne.n	1a22 <cbvprintf+0x202>
				d = va_arg(ap, long);
    1a10:	463d      	mov	r5, r7
    1a12:	f855 3b04 	ldr.w	r3, [r5], #4
    1a16:	4698      	mov	r8, r3
    1a18:	ea4f 79e3 	mov.w	r9, r3, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1a1c:	2a75      	cmp	r2, #117	; 0x75
    1a1e:	d119      	bne.n	1a54 <cbvprintf+0x234>
    1a20:	e011      	b.n	1a46 <cbvprintf+0x226>
			} else if (length_mod == 'l') {
    1a22:	296c      	cmp	r1, #108	; 0x6c
    1a24:	d0f4      	beq.n	1a10 <cbvprintf+0x1f0>
			} else if (length_mod == 'L') {
    1a26:	294c      	cmp	r1, #76	; 0x4c
    1a28:	d105      	bne.n	1a36 <cbvprintf+0x216>
				long long lld = va_arg(ap, long long);
    1a2a:	1dfd      	adds	r5, r7, #7
    1a2c:	f025 0507 	bic.w	r5, r5, #7
				d = (uint_value_type) lld;
    1a30:	e8f5 8902 	ldrd	r8, r9, [r5], #8
    1a34:	e7f2      	b.n	1a1c <cbvprintf+0x1fc>
				d = va_arg(ap, unsigned int);
    1a36:	683b      	ldr	r3, [r7, #0]
			} else if (*fmt == 'u') {
    1a38:	2a75      	cmp	r2, #117	; 0x75
				d = va_arg(ap, unsigned int);
    1a3a:	4698      	mov	r8, r3
    1a3c:	f107 0504 	add.w	r5, r7, #4
			} else if (*fmt == 'u') {
    1a40:	d106      	bne.n	1a50 <cbvprintf+0x230>
				d = va_arg(ap, unsigned int);
    1a42:	f04f 0900 	mov.w	r9, #0
			} else if (special == ' ') {
    1a46:	2820      	cmp	r0, #32
    1a48:	d178      	bne.n	1b3c <cbvprintf+0x31c>
				prefix = " ";
    1a4a:	4f8d      	ldr	r7, [pc, #564]	; (1c80 <cbvprintf+0x460>)
				min_width--;
    1a4c:	3c01      	subs	r4, #1
    1a4e:	e00c      	b.n	1a6a <cbvprintf+0x24a>
				d = va_arg(ap, int);
    1a50:	ea4f 79e3 	mov.w	r9, r3, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1a54:	f1b8 0f00 	cmp.w	r8, #0
    1a58:	f179 0300 	sbcs.w	r3, r9, #0
    1a5c:	daf3      	bge.n	1a46 <cbvprintf+0x226>
				d = -d;
    1a5e:	f1d8 0800 	rsbs	r8, r8, #0
				prefix = "-";
    1a62:	4f88      	ldr	r7, [pc, #544]	; (1c84 <cbvprintf+0x464>)
				d = -d;
    1a64:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
				min_width--;
    1a68:	3c01      	subs	r4, #1
	int i = 0;
    1a6a:	ab0d      	add	r3, sp, #52	; 0x34
    1a6c:	9307      	str	r3, [sp, #28]
    1a6e:	2300      	movs	r3, #0
    1a70:	9303      	str	r3, [sp, #12]
		buftop[--i] = c + '0';
    1a72:	9b03      	ldr	r3, [sp, #12]
		unsigned int c = num % base;
    1a74:	4640      	mov	r0, r8
    1a76:	9306      	str	r3, [sp, #24]
		buftop[--i] = c + '0';
    1a78:	3b01      	subs	r3, #1
		unsigned int c = num % base;
    1a7a:	4649      	mov	r1, r9
		buftop[--i] = c + '0';
    1a7c:	9303      	str	r3, [sp, #12]
		unsigned int c = num % base;
    1a7e:	220a      	movs	r2, #10
    1a80:	2300      	movs	r3, #0
    1a82:	f7fe fb5f 	bl	144 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1a86:	9b07      	ldr	r3, [sp, #28]
    1a88:	3230      	adds	r2, #48	; 0x30
    1a8a:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
    1a8e:	4640      	mov	r0, r8
    1a90:	220a      	movs	r2, #10
    1a92:	4649      	mov	r1, r9
		buftop[--i] = c + '0';
    1a94:	9307      	str	r3, [sp, #28]
		num /= base;
    1a96:	2300      	movs	r3, #0
    1a98:	e9cd 8904 	strd	r8, r9, [sp, #16]
    1a9c:	f7fe fb52 	bl	144 <__aeabi_uldivmod>
	} while (num);
    1aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	bf08      	it	eq
    1aa8:	2a0a      	cmpeq	r2, #10
		num /= base;
    1aaa:	4680      	mov	r8, r0
    1aac:	4689      	mov	r9, r1
	} while (num);
    1aae:	d2e0      	bcs.n	1a72 <cbvprintf+0x252>
	return -i;
    1ab0:	9b06      	ldr	r3, [sp, #24]
			data = buf + sizeof(buf) - data_len;
    1ab2:	aa0e      	add	r2, sp, #56	; 0x38
	return -i;
    1ab4:	f1c3 0901 	rsb	r9, r3, #1
			data = buf + sizeof(buf) - data_len;
    1ab8:	eb03 0802 	add.w	r8, r3, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1abc:	2e00      	cmp	r6, #0
			data = buf + sizeof(buf) - data_len;
    1abe:	f1a8 0804 	sub.w	r8, r8, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1ac2:	da04      	bge.n	1ace <cbvprintf+0x2ae>
    1ac4:	9b02      	ldr	r3, [sp, #8]
    1ac6:	f013 0f01 	tst.w	r3, #1
    1aca:	bf18      	it	ne
    1acc:	4626      	movne	r6, r4
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1ace:	eba6 0309 	sub.w	r3, r6, r9
		if (precision > 0) {
    1ad2:	2b00      	cmp	r3, #0
		precision -= data_len;
    1ad4:	9303      	str	r3, [sp, #12]
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1ad6:	9b02      	ldr	r3, [sp, #8]
		min_width -= data_len;
    1ad8:	bfd4      	ite	le
    1ada:	eba4 0409 	suble.w	r4, r4, r9
			min_width -= precision;
    1ade:	1ba4      	subgt	r4, r4, r6
		if (!(padding_mode & PAD_TAIL)) {
    1ae0:	079a      	lsls	r2, r3, #30
    1ae2:	f140 80ae 	bpl.w	1c42 <cbvprintf+0x422>
    1ae6:	ebaa 0607 	sub.w	r6, sl, r7
    1aea:	eb06 0a07 	add.w	sl, r6, r7
			while (--min_width >= 0) {
				OUTC(' ');
			}
		}
		while (*prefix) {
    1aee:	f817 0b01 	ldrb.w	r0, [r7], #1
    1af2:	2800      	cmp	r0, #0
    1af4:	f040 80a7 	bne.w	1c46 <cbvprintf+0x426>
		precision -= data_len;
    1af8:	9e03      	ldr	r6, [sp, #12]
			OUTC(*prefix++);
		}
		while (--precision >= 0) {
    1afa:	3e01      	subs	r6, #1
    1afc:	f140 80a7 	bpl.w	1c4e <cbvprintf+0x42e>
    1b00:	9b03      	ldr	r3, [sp, #12]
    1b02:	464e      	mov	r6, r9
    1b04:	1e5a      	subs	r2, r3, #1
    1b06:	3201      	adds	r2, #1
    1b08:	bfac      	ite	ge
    1b0a:	461f      	movge	r7, r3
    1b0c:	2700      	movlt	r7, #0
			OUTC('0');
		}
		while (--data_len >= 0) {
    1b0e:	3e01      	subs	r6, #1
    1b10:	f140 80a2 	bpl.w	1c58 <cbvprintf+0x438>
    1b14:	f109 32ff 	add.w	r2, r9, #4294967295
    1b18:	3201      	adds	r2, #1
    1b1a:	bfac      	ite	ge
    1b1c:	464b      	movge	r3, r9
    1b1e:	2300      	movlt	r3, #0
    1b20:	4626      	mov	r6, r4
    1b22:	eb03 0907 	add.w	r9, r3, r7
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1b26:	3e01      	subs	r6, #1
    1b28:	f140 809c 	bpl.w	1c64 <cbvprintf+0x444>
    1b2c:	1e63      	subs	r3, r4, #1
    1b2e:	3301      	adds	r3, #1
    1b30:	bfb8      	it	lt
    1b32:	2400      	movlt	r4, #0
    1b34:	44a1      	add	r9, r4
    1b36:	462f      	mov	r7, r5
    1b38:	44ca      	add	sl, r9
    1b3a:	e67b      	b.n	1834 <cbvprintf+0x14>
			} else if (special == '+') {
    1b3c:	282b      	cmp	r0, #43	; 0x2b
				prefix = "+";
    1b3e:	bf0a      	itet	eq
    1b40:	4f51      	ldreq	r7, [pc, #324]	; (1c88 <cbvprintf+0x468>)
	prefix = "";
    1b42:	4f52      	ldrne	r7, [pc, #328]	; (1c8c <cbvprintf+0x46c>)
				min_width--;
    1b44:	f104 34ff 	addeq.w	r4, r4, #4294967295
    1b48:	e78f      	b.n	1a6a <cbvprintf+0x24a>
			if (*fmt == 'p') {
    1b4a:	2a70      	cmp	r2, #112	; 0x70
    1b4c:	d12a      	bne.n	1ba4 <cbvprintf+0x384>
				x = (uintptr_t)va_arg(ap, void *);
    1b4e:	463d      	mov	r5, r7
    1b50:	f855 1b04 	ldr.w	r1, [r5], #4
				if (x == (uint_value_type)0) {
    1b54:	2900      	cmp	r1, #0
    1b56:	d05d      	beq.n	1c14 <cbvprintf+0x3f4>
				x = (uintptr_t)va_arg(ap, void *);
    1b58:	4688      	mov	r8, r1
    1b5a:	f04f 0900 	mov.w	r9, #0
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1b5e:	4f4c      	ldr	r7, [pc, #304]	; (1c90 <cbvprintf+0x470>)
				min_width -= 2;
    1b60:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1b62:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1b66:	f1a2 0e39 	sub.w	lr, r2, #57	; 0x39
	int i = 0;
    1b6a:	2200      	movs	r2, #0
    1b6c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
		unsigned int c = num % base;
    1b70:	f008 030f 	and.w	r3, r8, #15
		if (c >= 10) {
    1b74:	2b09      	cmp	r3, #9
			c += alpha;
    1b76:	bf88      	it	hi
    1b78:	4473      	addhi	r3, lr
		buftop[--i] = c + '0';
    1b7a:	3330      	adds	r3, #48	; 0x30
	} while (num);
    1b7c:	f1b9 0f00 	cmp.w	r9, #0
		buftop[--i] = c + '0';
    1b80:	f80c 3901 	strb.w	r3, [ip], #-1
	} while (num);
    1b84:	bf08      	it	eq
    1b86:	f1b8 0f10 	cmpeq.w	r8, #16
		num /= base;
    1b8a:	ea4f 1318 	mov.w	r3, r8, lsr #4
		buftop[--i] = c + '0';
    1b8e:	f102 30ff 	add.w	r0, r2, #4294967295
		num /= base;
    1b92:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
    1b96:	ea4f 1119 	mov.w	r1, r9, lsr #4
	} while (num);
    1b9a:	d21e      	bcs.n	1bda <cbvprintf+0x3ba>
	return -i;
    1b9c:	f1c2 0901 	rsb	r9, r2, #1
			data = buf + sizeof(buf) - data_len;
    1ba0:	ab0e      	add	r3, sp, #56	; 0x38
    1ba2:	e789      	b.n	1ab8 <cbvprintf+0x298>
			} else if (length_mod == 'l') {
    1ba4:	296c      	cmp	r1, #108	; 0x6c
    1ba6:	d106      	bne.n	1bb6 <cbvprintf+0x396>
				x = va_arg(ap, unsigned int);
    1ba8:	463d      	mov	r5, r7
    1baa:	f855 3b04 	ldr.w	r3, [r5], #4
    1bae:	f04f 0900 	mov.w	r9, #0
    1bb2:	4698      	mov	r8, r3
    1bb4:	e006      	b.n	1bc4 <cbvprintf+0x3a4>
			} else if (length_mod == 'L') {
    1bb6:	294c      	cmp	r1, #76	; 0x4c
    1bb8:	d1f6      	bne.n	1ba8 <cbvprintf+0x388>
				x = va_arg(ap, unsigned long long);
    1bba:	1dfd      	adds	r5, r7, #7
    1bbc:	f025 0507 	bic.w	r5, r5, #7
    1bc0:	e8f5 8902 	ldrd	r8, r9, [r5], #8
			if (special == '#') {
    1bc4:	2823      	cmp	r0, #35	; 0x23
    1bc6:	d106      	bne.n	1bd6 <cbvprintf+0x3b6>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1bc8:	4b31      	ldr	r3, [pc, #196]	; (1c90 <cbvprintf+0x470>)
    1bca:	f012 0f20 	tst.w	r2, #32
    1bce:	4f31      	ldr	r7, [pc, #196]	; (1c94 <cbvprintf+0x474>)
    1bd0:	bf18      	it	ne
    1bd2:	461f      	movne	r7, r3
    1bd4:	e7c4      	b.n	1b60 <cbvprintf+0x340>
	prefix = "";
    1bd6:	4f2d      	ldr	r7, [pc, #180]	; (1c8c <cbvprintf+0x46c>)
    1bd8:	e7c3      	b.n	1b62 <cbvprintf+0x342>
		buftop[--i] = c + '0';
    1bda:	4602      	mov	r2, r0
		num /= base;
    1bdc:	4698      	mov	r8, r3
    1bde:	4689      	mov	r9, r1
    1be0:	e7c6      	b.n	1b70 <cbvprintf+0x350>
			data = va_arg(ap, char *);
    1be2:	463d      	mov	r5, r7
    1be4:	f855 8b04 	ldr.w	r8, [r5], #4
			data_len = strlen(data);
    1be8:	4640      	mov	r0, r8
    1bea:	f004 ff64 	bl	6ab6 <strlen>
			if (precision >= 0 && data_len > precision) {
    1bee:	2e00      	cmp	r6, #0
			data_len = strlen(data);
    1bf0:	4681      	mov	r9, r0
			if (precision >= 0 && data_len > precision) {
    1bf2:	db02      	blt.n	1bfa <cbvprintf+0x3da>
    1bf4:	42b0      	cmp	r0, r6
    1bf6:	bfa8      	it	ge
    1bf8:	46b1      	movge	r9, r6
    1bfa:	2600      	movs	r6, #0
    1bfc:	4f23      	ldr	r7, [pc, #140]	; (1c8c <cbvprintf+0x46c>)
    1bfe:	e766      	b.n	1ace <cbvprintf+0x2ae>
			int c = va_arg(ap, int);
    1c00:	463d      	mov	r5, r7
			buf[0] = c;
    1c02:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    1c06:	f04f 0901 	mov.w	r9, #1
			buf[0] = c;
    1c0a:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    1c0e:	f10d 0820 	add.w	r8, sp, #32
    1c12:	e7f2      	b.n	1bfa <cbvprintf+0x3da>
					data_len = 5;
    1c14:	f04f 0905 	mov.w	r9, #5
					data = "(nil)";
    1c18:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1c98 <cbvprintf+0x478>
    1c1c:	e7ed      	b.n	1bfa <cbvprintf+0x3da>
				OUTC(' ');
    1c1e:	4659      	mov	r1, fp
    1c20:	2020      	movs	r0, #32
    1c22:	9b00      	ldr	r3, [sp, #0]
    1c24:	4798      	blx	r3
			while (--min_width >= 0) {
    1c26:	3e01      	subs	r6, #1
    1c28:	d5f9      	bpl.n	1c1e <cbvprintf+0x3fe>
    1c2a:	1e62      	subs	r2, r4, #1
    1c2c:	1c53      	adds	r3, r2, #1
    1c2e:	bfac      	ite	ge
    1c30:	4621      	movge	r1, r4
    1c32:	2100      	movlt	r1, #0
    1c34:	f1c4 0400 	rsb	r4, r4, #0
    1c38:	bfb8      	it	lt
    1c3a:	2400      	movlt	r4, #0
    1c3c:	448a      	add	sl, r1
    1c3e:	4414      	add	r4, r2
    1c40:	e751      	b.n	1ae6 <cbvprintf+0x2c6>
    1c42:	4626      	mov	r6, r4
    1c44:	e7ef      	b.n	1c26 <cbvprintf+0x406>
			OUTC(*prefix++);
    1c46:	4659      	mov	r1, fp
    1c48:	9b00      	ldr	r3, [sp, #0]
    1c4a:	4798      	blx	r3
    1c4c:	e74d      	b.n	1aea <cbvprintf+0x2ca>
			OUTC('0');
    1c4e:	4659      	mov	r1, fp
    1c50:	9b00      	ldr	r3, [sp, #0]
    1c52:	2030      	movs	r0, #48	; 0x30
    1c54:	4798      	blx	r3
    1c56:	e750      	b.n	1afa <cbvprintf+0x2da>
			OUTC(*data++);
    1c58:	4659      	mov	r1, fp
    1c5a:	f818 0b01 	ldrb.w	r0, [r8], #1
    1c5e:	9b00      	ldr	r3, [sp, #0]
    1c60:	4798      	blx	r3
    1c62:	e754      	b.n	1b0e <cbvprintf+0x2ee>
			OUTC(' ');
    1c64:	4659      	mov	r1, fp
    1c66:	9b00      	ldr	r3, [sp, #0]
    1c68:	2020      	movs	r0, #32
    1c6a:	4798      	blx	r3
    1c6c:	e75b      	b.n	1b26 <cbvprintf+0x306>
				padding_mode = PAD_ZERO;
    1c6e:	2301      	movs	r3, #1
    1c70:	e6ba      	b.n	19e8 <cbvprintf+0x1c8>
				length_mod = 'L';
    1c72:	214c      	movs	r1, #76	; 0x4c
    1c74:	e5ed      	b.n	1852 <cbvprintf+0x32>
		}

		goto start;
	}
}
    1c76:	4650      	mov	r0, sl
    1c78:	b00f      	add	sp, #60	; 0x3c
    1c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c7e:	bf00      	nop
    1c80:	0000848b 	.word	0x0000848b
    1c84:	00007f38 	.word	0x00007f38
    1c88:	00007f3a 	.word	0x00007f3a
    1c8c:	0000877f 	.word	0x0000877f
    1c90:	00007f3c 	.word	0x00007f3c
    1c94:	00007f3f 	.word	0x00007f3f
    1c98:	00007f42 	.word	0x00007f42

00001c9c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1c9c:	b507      	push	{r0, r1, r2, lr}
    1c9e:	9001      	str	r0, [sp, #4]
    1ca0:	f04f 0220 	mov.w	r2, #32
    1ca4:	f3ef 8311 	mrs	r3, BASEPRI
    1ca8:	f382 8811 	msr	BASEPRI, r2
    1cac:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    1cb0:	f004 fdc1 	bl	6836 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1cb4:	9801      	ldr	r0, [sp, #4]
    1cb6:	f001 fa5f 	bl	3178 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1cba:	4803      	ldr	r0, [pc, #12]	; (1cc8 <sys_reboot+0x2c>)
    1cbc:	f004 fbab 	bl	6416 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1cc0:	f000 ffd0 	bl	2c64 <arch_cpu_idle>
    1cc4:	e7fc      	b.n	1cc0 <sys_reboot+0x24>
    1cc6:	bf00      	nop
    1cc8:	00007f48 	.word	0x00007f48

00001ccc <nordicsemi_nrf91_init>:
    1ccc:	f04f 0220 	mov.w	r2, #32
    1cd0:	f3ef 8311 	mrs	r3, BASEPRI
    1cd4:	f382 8811 	msr	BASEPRI, r2
    1cd8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1cdc:	2101      	movs	r1, #1
    1cde:	4a04      	ldr	r2, [pc, #16]	; (1cf0 <nordicsemi_nrf91_init+0x24>)
    1ce0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1ce4:	f383 8811 	msr	BASEPRI, r3
    1ce8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1cec:	2000      	movs	r0, #0
    1cee:	4770      	bx	lr
    1cf0:	50039000 	.word	0x50039000

00001cf4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1cf4:	b120      	cbz	r0, 1d00 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1cf6:	4b03      	ldr	r3, [pc, #12]	; (1d04 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1cf8:	0180      	lsls	r0, r0, #6
    1cfa:	f043 0301 	orr.w	r3, r3, #1
    1cfe:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1d00:	4770      	bx	lr
    1d02:	bf00      	nop
    1d04:	000076c0 	.word	0x000076c0

00001d08 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1d08:	4b09      	ldr	r3, [pc, #36]	; (1d30 <get_flash_area_from_id+0x28>)
{
    1d0a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    1d0c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    1d0e:	4b09      	ldr	r3, [pc, #36]	; (1d34 <get_flash_area_from_id+0x2c>)
    1d10:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    1d12:	2300      	movs	r3, #0
    1d14:	429d      	cmp	r5, r3
    1d16:	dc02      	bgt.n	1d1e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    1d18:	2100      	movs	r1, #0
}
    1d1a:	4608      	mov	r0, r1
    1d1c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    1d1e:	011a      	lsls	r2, r3, #4
    1d20:	5ca2      	ldrb	r2, [r4, r2]
    1d22:	eb04 1103 	add.w	r1, r4, r3, lsl #4
    1d26:	4282      	cmp	r2, r0
    1d28:	d0f7      	beq.n	1d1a <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
    1d2a:	3301      	adds	r3, #1
    1d2c:	e7f2      	b.n	1d14 <get_flash_area_from_id+0xc>
    1d2e:	bf00      	nop
    1d30:	000077a8 	.word	0x000077a8
    1d34:	20014510 	.word	0x20014510

00001d38 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1d38:	4b08      	ldr	r3, [pc, #32]	; (1d5c <flash_area_open+0x24>)
{
    1d3a:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    1d3c:	681b      	ldr	r3, [r3, #0]
{
    1d3e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    1d40:	b12b      	cbz	r3, 1d4e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    1d42:	f7ff ffe1 	bl	1d08 <get_flash_area_from_id>
	if (area == NULL) {
    1d46:	b128      	cbz	r0, 1d54 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    1d48:	6020      	str	r0, [r4, #0]
	return 0;
    1d4a:	2000      	movs	r0, #0
}
    1d4c:	bd10      	pop	{r4, pc}
		return -EACCES;
    1d4e:	f06f 000c 	mvn.w	r0, #12
    1d52:	e7fb      	b.n	1d4c <flash_area_open+0x14>
		return -ENOENT;
    1d54:	f06f 0001 	mvn.w	r0, #1
    1d58:	e7f8      	b.n	1d4c <flash_area_open+0x14>
    1d5a:	bf00      	nop
    1d5c:	20014510 	.word	0x20014510

00001d60 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1d60:	b530      	push	{r4, r5, lr}
    1d62:	b089      	sub	sp, #36	; 0x24
    1d64:	460c      	mov	r4, r1
    1d66:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    1d68:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    1d6a:	f7ff ffcd 	bl	1d08 <get_flash_area_from_id>
	if (fa == NULL) {
    1d6e:	b1b8      	cbz	r0, 1da0 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    1d70:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1d72:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1d74:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1d76:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1d78:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    1d7a:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    1d7e:	2300      	movs	r3, #0
	cb_data->status = 0;
    1d80:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1d84:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1d86:	f004 fc0f 	bl	65a8 <device_get_binding>
	if (flash_dev == NULL) {
    1d8a:	b160      	cbz	r0, 1da6 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    1d8c:	4907      	ldr	r1, [pc, #28]	; (1dac <flash_area_get_sectors+0x4c>)
    1d8e:	aa01      	add	r2, sp, #4
    1d90:	f004 ffa4 	bl	6cdc <flash_page_foreach>
	if (cb_data->status == 0) {
    1d94:	9807      	ldr	r0, [sp, #28]
    1d96:	b908      	cbnz	r0, 1d9c <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    1d98:	9b05      	ldr	r3, [sp, #20]
    1d9a:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1d9c:	b009      	add	sp, #36	; 0x24
    1d9e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    1da0:	f06f 0015 	mvn.w	r0, #21
    1da4:	e7fa      	b.n	1d9c <flash_area_get_sectors+0x3c>
		return -ENODEV;
    1da6:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1daa:	e7f7      	b.n	1d9c <flash_area_get_sectors+0x3c>
    1dac:	000065ad 	.word	0x000065ad

00001db0 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1db0:	b570      	push	{r4, r5, r6, lr}
    1db2:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    1db4:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    1db6:	480d      	ldr	r0, [pc, #52]	; (1dec <onoff_stop+0x3c>)
{
    1db8:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    1dba:	1a23      	subs	r3, r4, r0
    1dbc:	109a      	asrs	r2, r3, #2
    1dbe:	4b0c      	ldr	r3, [pc, #48]	; (1df0 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    1dc0:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1dc2:	4353      	muls	r3, r2
    1dc4:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    1dc6:	435d      	muls	r5, r3
    1dc8:	f105 0340 	add.w	r3, r5, #64	; 0x40
    1dcc:	4418      	add	r0, r3
    1dce:	f004 fca6 	bl	671e <set_off_state>
	if (err < 0) {
    1dd2:	1e01      	subs	r1, r0, #0
    1dd4:	db04      	blt.n	1de0 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    1dd6:	4b07      	ldr	r3, [pc, #28]	; (1df4 <onoff_stop+0x44>)
    1dd8:	442b      	add	r3, r5
    1dda:	685b      	ldr	r3, [r3, #4]
    1ddc:	4798      	blx	r3
	return 0;
    1dde:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    1de0:	4620      	mov	r0, r4
    1de2:	4633      	mov	r3, r6
}
    1de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1de8:	4718      	bx	r3
    1dea:	bf00      	nop
    1dec:	20015770 	.word	0x20015770
    1df0:	b6db6db7 	.word	0xb6db6db7
    1df4:	000076f4 	.word	0x000076f4

00001df8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1dfc:	4c0f      	ldr	r4, [pc, #60]	; (1e3c <onoff_start+0x44>)
    1dfe:	4d10      	ldr	r5, [pc, #64]	; (1e40 <onoff_start+0x48>)
    1e00:	1b03      	subs	r3, r0, r4
    1e02:	109b      	asrs	r3, r3, #2
    1e04:	435d      	muls	r5, r3
    1e06:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    1e08:	250c      	movs	r5, #12
    1e0a:	435d      	muls	r5, r3
{
    1e0c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    1e0e:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    1e12:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    1e14:	4420      	add	r0, r4
    1e16:	2140      	movs	r1, #64	; 0x40
    1e18:	f004 fc9a 	bl	6750 <set_starting_state>
	if (err < 0) {
    1e1c:	1e01      	subs	r1, r0, #0
    1e1e:	db08      	blt.n	1e32 <onoff_start+0x3a>
	subdata->cb = cb;
    1e20:	4b08      	ldr	r3, [pc, #32]	; (1e44 <onoff_start+0x4c>)
    1e22:	442c      	add	r4, r5
	subdata->user_data = user_data;
    1e24:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    1e28:	4b07      	ldr	r3, [pc, #28]	; (1e48 <onoff_start+0x50>)
    1e2a:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    1e30:	4718      	bx	r3
		notify(mgr, err);
    1e32:	4638      	mov	r0, r7
    1e34:	4633      	mov	r3, r6
}
    1e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1e3a:	4718      	bx	r3
    1e3c:	20015770 	.word	0x20015770
    1e40:	b6db6db7 	.word	0xb6db6db7
    1e44:	000067b9 	.word	0x000067b9
    1e48:	000076f4 	.word	0x000076f4

00001e4c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1e4e:	2200      	movs	r2, #0
    1e50:	2101      	movs	r1, #1
{
    1e52:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1e54:	2005      	movs	r0, #5
    1e56:	f000 fec9 	bl	2bec <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1e5a:	2005      	movs	r0, #5
    1e5c:	f000 fea8 	bl	2bb0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1e60:	480f      	ldr	r0, [pc, #60]	; (1ea0 <clk_init+0x54>)
    1e62:	f002 f905 	bl	4070 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1e66:	4b0f      	ldr	r3, [pc, #60]	; (1ea4 <clk_init+0x58>)
    1e68:	4298      	cmp	r0, r3
    1e6a:	d115      	bne.n	1e98 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1e6c:	f005 f98b 	bl	7186 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1e70:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e72:	490d      	ldr	r1, [pc, #52]	; (1ea8 <clk_init+0x5c>)
    1e74:	4630      	mov	r0, r6
    1e76:	f004 fb2b 	bl	64d0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1e7a:	2800      	cmp	r0, #0
    1e7c:	db0b      	blt.n	1e96 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e7e:	2501      	movs	r5, #1
    1e80:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    1e82:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e84:	4908      	ldr	r1, [pc, #32]	; (1ea8 <clk_init+0x5c>)
    1e86:	f104 001c 	add.w	r0, r4, #28
    1e8a:	f004 fb21 	bl	64d0 <onoff_manager_init>
		if (err < 0) {
    1e8e:	2800      	cmp	r0, #0
    1e90:	db01      	blt.n	1e96 <clk_init+0x4a>
	}

	return 0;
    1e92:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e94:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    1e96:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1e98:	f06f 0004 	mvn.w	r0, #4
    1e9c:	e7fb      	b.n	1e96 <clk_init+0x4a>
    1e9e:	bf00      	nop
    1ea0:	00001ee9 	.word	0x00001ee9
    1ea4:	0bad0000 	.word	0x0bad0000
    1ea8:	0000770c 	.word	0x0000770c

00001eac <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1eac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1eae:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    1eb0:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    1eb2:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    1eb4:	434b      	muls	r3, r1
    1eb6:	480a      	ldr	r0, [pc, #40]	; (1ee0 <clkstarted_handle.constprop.0+0x34>)
    1eb8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1eba:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    1ebc:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1ec0:	4418      	add	r0, r3
	sub_data->cb = NULL;
    1ec2:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
    1ec4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    1ec6:	f004 fc61 	bl	678c <set_on_state>
	if (callback) {
    1eca:	b135      	cbz	r5, 1eda <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1ecc:	462b      	mov	r3, r5
    1ece:	9a01      	ldr	r2, [sp, #4]
    1ed0:	4804      	ldr	r0, [pc, #16]	; (1ee4 <clkstarted_handle.constprop.0+0x38>)
}
    1ed2:	b002      	add	sp, #8
    1ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1ed8:	4718      	bx	r3
}
    1eda:	b002      	add	sp, #8
    1edc:	bd70      	pop	{r4, r5, r6, pc}
    1ede:	bf00      	nop
    1ee0:	20015770 	.word	0x20015770
    1ee4:	200145dc 	.word	0x200145dc

00001ee8 <clock_event_handler>:
	switch (event) {
    1ee8:	b110      	cbz	r0, 1ef0 <clock_event_handler+0x8>
    1eea:	2801      	cmp	r0, #1
    1eec:	d004      	beq.n	1ef8 <clock_event_handler+0x10>
    1eee:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1ef0:	4b03      	ldr	r3, [pc, #12]	; (1f00 <clock_event_handler+0x18>)
    1ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ef4:	075b      	lsls	r3, r3, #29
    1ef6:	d101      	bne.n	1efc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1ef8:	f7ff bfd8 	b.w	1eac <clkstarted_handle.constprop.0>
}
    1efc:	4770      	bx	lr
    1efe:	bf00      	nop
    1f00:	20015770 	.word	0x20015770

00001f04 <generic_hfclk_start>:
{
    1f04:	b508      	push	{r3, lr}
	__asm__ volatile(
    1f06:	f04f 0320 	mov.w	r3, #32
    1f0a:	f3ef 8111 	mrs	r1, BASEPRI
    1f0e:	f383 8811 	msr	BASEPRI, r3
    1f12:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1f16:	4a12      	ldr	r2, [pc, #72]	; (1f60 <generic_hfclk_start+0x5c>)
    1f18:	6813      	ldr	r3, [r2, #0]
    1f1a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1f1e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1f22:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1f24:	d00c      	beq.n	1f40 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1f26:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1f2a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1f2e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1f32:	f013 0301 	ands.w	r3, r3, #1
    1f36:	d003      	beq.n	1f40 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1f38:	480a      	ldr	r0, [pc, #40]	; (1f64 <generic_hfclk_start+0x60>)
    1f3a:	f004 fc27 	bl	678c <set_on_state>
			already_started = true;
    1f3e:	2301      	movs	r3, #1
	__asm__ volatile(
    1f40:	f381 8811 	msr	BASEPRI, r1
    1f44:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1f48:	b123      	cbz	r3, 1f54 <generic_hfclk_start+0x50>
}
    1f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1f4e:	2000      	movs	r0, #0
    1f50:	f7ff bfac 	b.w	1eac <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1f54:	2001      	movs	r0, #1
}
    1f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1f5a:	f002 b899 	b.w	4090 <nrfx_clock_start>
    1f5e:	bf00      	nop
    1f60:	200157c0 	.word	0x200157c0
    1f64:	200157b0 	.word	0x200157b0

00001f68 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1f68:	4b07      	ldr	r3, [pc, #28]	; (1f88 <generic_hfclk_stop+0x20>)
    1f6a:	e8d3 2fef 	ldaex	r2, [r3]
    1f6e:	f022 0102 	bic.w	r1, r2, #2
    1f72:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1f76:	2800      	cmp	r0, #0
    1f78:	d1f7      	bne.n	1f6a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1f7a:	07d3      	lsls	r3, r2, #31
    1f7c:	d402      	bmi.n	1f84 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1f7e:	2001      	movs	r0, #1
    1f80:	f002 b8b8 	b.w	40f4 <nrfx_clock_stop>
}
    1f84:	4770      	bx	lr
    1f86:	bf00      	nop
    1f88:	200157c0 	.word	0x200157c0

00001f8c <z_nrf_clock_control_lf_on>:
{
    1f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1f90:	2201      	movs	r2, #1
    1f92:	4606      	mov	r6, r0
    1f94:	4936      	ldr	r1, [pc, #216]	; (2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>)
    1f96:	e8d1 3fef 	ldaex	r3, [r1]
    1f9a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1f9e:	2800      	cmp	r0, #0
    1fa0:	d1f9      	bne.n	1f96 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1fa2:	b933      	cbnz	r3, 1fb2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1fa4:	4933      	ldr	r1, [pc, #204]	; (2074 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x74>)
		err = onoff_request(mgr, &cli);
    1fa6:	4834      	ldr	r0, [pc, #208]	; (2078 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x78>)
    1fa8:	604b      	str	r3, [r1, #4]
    1faa:	60cb      	str	r3, [r1, #12]
    1fac:	608a      	str	r2, [r1, #8]
    1fae:	f004 faa2 	bl	64f6 <onoff_request>
	switch (start_mode) {
    1fb2:	1e73      	subs	r3, r6, #1
    1fb4:	2b01      	cmp	r3, #1
    1fb6:	d832      	bhi.n	201e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1fb8:	2e01      	cmp	r6, #1
    1fba:	d107      	bne.n	1fcc <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1fbc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1fc0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1fc4:	f003 0303 	and.w	r3, r3, #3
    1fc8:	2b02      	cmp	r3, #2
    1fca:	d028      	beq.n	201e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1fcc:	f005 f9b8 	bl	7340 <k_is_in_isr>
    1fd0:	4604      	mov	r4, r0
    1fd2:	b918      	cbnz	r0, 1fdc <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    1fd4:	4b29      	ldr	r3, [pc, #164]	; (207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>)
	int key = isr_mode ? irq_lock() : 0;
    1fd6:	781b      	ldrb	r3, [r3, #0]
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d141      	bne.n	2060 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x60>
	__asm__ volatile(
    1fdc:	f04f 0320 	mov.w	r3, #32
    1fe0:	f3ef 8511 	mrs	r5, BASEPRI
    1fe4:	f383 8811 	msr	BASEPRI, r3
    1fe8:	f3bf 8f6f 	isb	sy
    1fec:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1fee:	4f24      	ldr	r7, [pc, #144]	; (2080 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x80>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ff0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2084 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1ff4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2088 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x88>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1ff8:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1ffc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2000:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2004:	03d2      	lsls	r2, r2, #15
    2006:	d50c      	bpl.n	2022 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2008:	f003 0303 	and.w	r3, r3, #3
    200c:	2b02      	cmp	r3, #2
    200e:	d001      	beq.n	2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2010:	2e01      	cmp	r6, #1
    2012:	d106      	bne.n	2022 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22>
	if (isr_mode) {
    2014:	b1f4      	cbz	r4, 2054 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x54>
	__asm__ volatile(
    2016:	f385 8811 	msr	BASEPRI, r5
    201a:	f3bf 8f6f 	isb	sy
}
    201e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2022:	4628      	mov	r0, r5
    2024:	f000 fe2c 	bl	2c80 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2028:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    202c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2030:	b2db      	uxtb	r3, r3
    2032:	2b01      	cmp	r3, #1
    2034:	d1e0      	bne.n	1ff8 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2036:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2038:	2900      	cmp	r1, #0
    203a:	d0dd      	beq.n	1ff8 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    203c:	2100      	movs	r1, #0
    203e:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2040:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2042:	2102      	movs	r1, #2
    2044:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    2048:	2220      	movs	r2, #32
    204a:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    204e:	f8c9 3000 	str.w	r3, [r9]
}
    2052:	e7d1      	b.n	1ff8 <z_nrf_clock_control_lf_on+0x6c>
    p_reg->INTENSET = mask;
    2054:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2058:	2202      	movs	r2, #2
    205a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    205e:	e7de      	b.n	201e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e>
    p_reg->INTENCLR = mask;
    2060:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2064:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    2066:	4605      	mov	r5, r0
    2068:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    206c:	e7bf      	b.n	1fee <z_nrf_clock_control_lf_on+0x62>
    206e:	bf00      	nop
    2070:	200157c4 	.word	0x200157c4
    2074:	20015760 	.word	0x20015760
    2078:	2001578c 	.word	0x2001578c
    207c:	200166a3 	.word	0x200166a3
    2080:	50005104 	.word	0x50005104
    2084:	e000e100 	.word	0xe000e100
    2088:	50005008 	.word	0x50005008

0000208c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    208e:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2090:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2092:	4e0f      	ldr	r6, [pc, #60]	; (20d0 <rtc_nrf_isr+0x44>)
    2094:	4b0f      	ldr	r3, [pc, #60]	; (20d4 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    2096:	4a10      	ldr	r2, [pc, #64]	; (20d8 <rtc_nrf_isr+0x4c>)
    2098:	4618      	mov	r0, r3
    209a:	681d      	ldr	r5, [r3, #0]
    209c:	b104      	cbz	r4, 20a0 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    209e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20a0:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    20a4:	03c9      	lsls	r1, r1, #15
    20a6:	d5fa      	bpl.n	209e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    20a8:	6831      	ldr	r1, [r6, #0]
    20aa:	2900      	cmp	r1, #0
    20ac:	d0f7      	beq.n	209e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    20ae:	6034      	str	r4, [r6, #0]
    20b0:	6831      	ldr	r1, [r6, #0]
    p_reg->EVTENCLR = mask;
    20b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    20b6:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    20ba:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    20bc:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    20c0:	b125      	cbz	r5, 20cc <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    20c2:	2000      	movs	r0, #0
    20c4:	685a      	ldr	r2, [r3, #4]
    20c6:	601f      	str	r7, [r3, #0]
    20c8:	47a8      	blx	r5
    20ca:	e7e3      	b.n	2094 <rtc_nrf_isr+0x8>
    20cc:	6005      	str	r5, [r0, #0]
}
    20ce:	e7e6      	b.n	209e <rtc_nrf_isr+0x12>
    20d0:	50015140 	.word	0x50015140
    20d4:	200157cc 	.word	0x200157cc
    20d8:	50015000 	.word	0x50015000

000020dc <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    20dc:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    20de:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    20e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    20e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    20e8:	4d0d      	ldr	r5, [pc, #52]	; (2120 <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    20ea:	2101      	movs	r1, #1
    20ec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    20f0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    20f4:	4b0b      	ldr	r3, [pc, #44]	; (2124 <sys_clock_driver_init+0x48>)
    20f6:	2015      	movs	r0, #21
    20f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    20fc:	4622      	mov	r2, r4
    20fe:	f000 fd75 	bl	2bec <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2102:	2015      	movs	r0, #21
    2104:	f000 fd54 	bl	2bb0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2108:	2301      	movs	r3, #1
    210a:	4a07      	ldr	r2, [pc, #28]	; (2128 <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    210c:	2002      	movs	r0, #2
    210e:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    2110:	4a06      	ldr	r2, [pc, #24]	; (212c <sys_clock_driver_init+0x50>)
    2112:	602b      	str	r3, [r5, #0]
    2114:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    2116:	f7ff ff39 	bl	1f8c <z_nrf_clock_control_lf_on>

	return 0;
}
    211a:	4620      	mov	r0, r4
    211c:	bd38      	pop	{r3, r4, r5, pc}
    211e:	bf00      	nop
    2120:	50015000 	.word	0x50015000
    2124:	e000e100 	.word	0xe000e100
    2128:	50015008 	.word	0x50015008
    212c:	200157d4 	.word	0x200157d4

00002130 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2130:	4801      	ldr	r0, [pc, #4]	; (2138 <nrf_cc3xx_platform_abort_init+0x8>)
    2132:	f002 ba59 	b.w	45e8 <nrf_cc3xx_platform_set_abort>
    2136:	bf00      	nop
    2138:	000077ac 	.word	0x000077ac

0000213c <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    213c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    213e:	4d26      	ldr	r5, [pc, #152]	; (21d8 <boot_uart_fifo_callback+0x9c>)
    2140:	6828      	ldr	r0, [r5, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    2142:	6883      	ldr	r3, [r0, #8]
    2144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2146:	b103      	cbz	r3, 214a <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    2148:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    214a:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready == NULL) {
    214c:	6883      	ldr	r3, [r0, #8]
    214e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2150:	b9a3      	cbnz	r3, 217c <boot_uart_fifo_callback+0x40>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    2152:	4c22      	ldr	r4, [pc, #136]	; (21dc <boot_uart_fifo_callback+0xa0>)
Z_GENLIST_IS_EMPTY(slist)
    2154:	4e22      	ldr	r6, [pc, #136]	; (21e0 <boot_uart_fifo_callback+0xa4>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    2156:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read != NULL) {
    2158:	6883      	ldr	r3, [r0, #8]
    215a:	699b      	ldr	r3, [r3, #24]
    215c:	b18b      	cbz	r3, 2182 <boot_uart_fifo_callback+0x46>
		return api->fifo_read(dev, rx_data, size);
    215e:	2201      	movs	r2, #1
    2160:	f10d 0107 	add.w	r1, sp, #7
    2164:	4798      	blx	r3
		if (rx != 1) {
    2166:	2801      	cmp	r0, #1
    2168:	d10b      	bne.n	2182 <boot_uart_fifo_callback+0x46>
		if (!cmd) {
    216a:	6823      	ldr	r3, [r4, #0]
    216c:	b993      	cbnz	r3, 2194 <boot_uart_fifo_callback+0x58>
    216e:	6833      	ldr	r3, [r6, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    2170:	b94b      	cbnz	r3, 2186 <boot_uart_fifo_callback+0x4a>
			sys_snode_t *node;

			node = sys_slist_get(&avail_queue);
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
    2172:	2145      	movs	r1, #69	; 0x45
    2174:	481b      	ldr	r0, [pc, #108]	; (21e4 <boot_uart_fifo_callback+0xa8>)
    2176:	f004 fa0a 	bl	658e <z_log_minimal_printk>
					     " incoming data!");
				return;
    217a:	e002      	b.n	2182 <boot_uart_fifo_callback+0x46>
	return api->irq_rx_ready(dev);
    217c:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    217e:	2800      	cmp	r0, #0
    2180:	d1e7      	bne.n	2152 <boot_uart_fifo_callback+0x16>
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
			cmd = NULL;
		}
	}
}
    2182:	b003      	add	sp, #12
    2184:	bdf0      	pop	{r4, r5, r6, r7, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2186:	6871      	ldr	r1, [r6, #4]
    2188:	681a      	ldr	r2, [r3, #0]
    218a:	428b      	cmp	r3, r1
	list->head = node;
    218c:	6032      	str	r2, [r6, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    218e:	d100      	bne.n	2192 <boot_uart_fifo_callback+0x56>
	list->tail = node;
    2190:	6072      	str	r2, [r6, #4]
			cmd = CONTAINER_OF(node, struct line_input, node);
    2192:	6023      	str	r3, [r4, #0]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    2194:	4914      	ldr	r1, [pc, #80]	; (21e8 <boot_uart_fifo_callback+0xac>)
    2196:	f89d 7007 	ldrb.w	r7, [sp, #7]
    219a:	880a      	ldrh	r2, [r1, #0]
    219c:	4608      	mov	r0, r1
    219e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    21a2:	d206      	bcs.n	21b2 <boot_uart_fifo_callback+0x76>
			cmd->line[cur++] = byte;
    21a4:	6823      	ldr	r3, [r4, #0]
    21a6:	f102 0c01 	add.w	ip, r2, #1
    21aa:	4413      	add	r3, r2
    21ac:	f8a1 c000 	strh.w	ip, [r1]
    21b0:	721f      	strb	r7, [r3, #8]
		if (byte ==  '\n') {
    21b2:	2f0a      	cmp	r7, #10
    21b4:	d1cf      	bne.n	2156 <boot_uart_fifo_callback+0x1a>
			cmd->len = cur;
    21b6:	6823      	ldr	r3, [r4, #0]
    21b8:	8802      	ldrh	r2, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    21ba:	490c      	ldr	r1, [pc, #48]	; (21ec <boot_uart_fifo_callback+0xb0>)
    21bc:	605a      	str	r2, [r3, #4]
	parent->next = child;
    21be:	2200      	movs	r2, #0
    21c0:	601a      	str	r2, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    21c2:	684e      	ldr	r6, [r1, #4]
    21c4:	b926      	cbnz	r6, 21d0 <boot_uart_fifo_callback+0x94>
	list->head = node;
    21c6:	e9c1 3300 	strd	r3, r3, [r1]
			cur = 0;
    21ca:	8002      	strh	r2, [r0, #0]
			cmd = NULL;
    21cc:	6022      	str	r2, [r4, #0]
    21ce:	e7c1      	b.n	2154 <boot_uart_fifo_callback+0x18>
	parent->next = child;
    21d0:	6033      	str	r3, [r6, #0]
	list->tail = node;
    21d2:	604b      	str	r3, [r1, #4]
}
    21d4:	e7f9      	b.n	21ca <boot_uart_fifo_callback+0x8e>
    21d6:	bf00      	nop
    21d8:	20015c00 	.word	0x20015c00
    21dc:	200157e0 	.word	0x200157e0
    21e0:	200157d8 	.word	0x200157d8
    21e4:	00007f9f 	.word	0x00007f9f
    21e8:	20015cdc 	.word	0x20015cdc
    21ec:	20015bf8 	.word	0x20015bf8

000021f0 <console_out>:
	uart_poll_out(uart_dev, c);
    21f0:	4b04      	ldr	r3, [pc, #16]	; (2204 <console_out+0x14>)
{
    21f2:	b510      	push	{r4, lr}
    21f4:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    21f6:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    21f8:	6883      	ldr	r3, [r0, #8]
    21fa:	b2e1      	uxtb	r1, r4
    21fc:	685b      	ldr	r3, [r3, #4]
    21fe:	4798      	blx	r3
}
    2200:	4620      	mov	r0, r4
    2202:	bd10      	pop	{r4, pc}
    2204:	20015c00 	.word	0x20015c00

00002208 <console_read>:
{
    2208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    220a:	4606      	mov	r6, r0
    220c:	460b      	mov	r3, r1
    220e:	4615      	mov	r5, r2
	__asm__ volatile(
    2210:	f04f 0220 	mov.w	r2, #32
    2214:	f3ef 8c11 	mrs	ip, BASEPRI
    2218:	f382 8811 	msr	BASEPRI, r2
    221c:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    2220:	4c19      	ldr	r4, [pc, #100]	; (2288 <console_read+0x80>)
    2222:	6821      	ldr	r1, [r4, #0]
    2224:	b149      	cbz	r1, 223a <console_read+0x32>
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    2226:	4a19      	ldr	r2, [pc, #100]	; (228c <console_read+0x84>)
    2228:	6850      	ldr	r0, [r2, #4]
    222a:	4288      	cmp	r0, r1
    222c:	d005      	beq.n	223a <console_read+0x32>
	parent->next = child;
    222e:	2000      	movs	r0, #0
    2230:	6008      	str	r0, [r1, #0]
Z_GENLIST_APPEND(slist, snode)
    2232:	6850      	ldr	r0, [r2, #4]
    2234:	b998      	cbnz	r0, 225e <console_read+0x56>
	list->head = node;
    2236:	e9c2 1100 	strd	r1, r1, [r2]
Z_GENLIST_IS_EMPTY(slist)
    223a:	4a15      	ldr	r2, [pc, #84]	; (2290 <console_read+0x88>)
    223c:	6811      	ldr	r1, [r2, #0]
Z_GENLIST_GET(slist, snode)
    223e:	b129      	cbz	r1, 224c <console_read+0x44>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2240:	6857      	ldr	r7, [r2, #4]
    2242:	6808      	ldr	r0, [r1, #0]
    2244:	42b9      	cmp	r1, r7
	list->head = node;
    2246:	6010      	str	r0, [r2, #0]
	list->tail = node;
    2248:	bf08      	it	eq
    224a:	6050      	streq	r0, [r2, #4]
	__asm__ volatile(
    224c:	f38c 8811 	msr	BASEPRI, ip
    2250:	f3bf 8f6f 	isb	sy

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    2254:	6021      	str	r1, [r4, #0]
	if (node == NULL) {
    2256:	b929      	cbnz	r1, 2264 <console_read+0x5c>
		*newline = 0;
    2258:	2000      	movs	r0, #0
    225a:	6028      	str	r0, [r5, #0]
}
    225c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    225e:	6001      	str	r1, [r0, #0]
	list->tail = node;
    2260:	6051      	str	r1, [r2, #4]
}
    2262:	e7ea      	b.n	223a <console_read+0x32>
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    2264:	6848      	ldr	r0, [r1, #4]
	if (line == NULL) {
    2266:	3108      	adds	r1, #8
    2268:	d0f6      	beq.n	2258 <console_read+0x50>
	if (len > str_size - 1) {
    226a:	1e5c      	subs	r4, r3, #1
    226c:	4284      	cmp	r4, r0
    226e:	bfa8      	it	ge
    2270:	4604      	movge	r4, r0
	memcpy(str, line, len);
    2272:	4630      	mov	r0, r6
    2274:	4622      	mov	r2, r4
    2276:	f004 fc41 	bl	6afc <memcpy>
	str[len] = '\0';
    227a:	2300      	movs	r3, #0
    227c:	5533      	strb	r3, [r6, r4]
	*newline = 1;
    227e:	2301      	movs	r3, #1
    2280:	602b      	str	r3, [r5, #0]
	return len + 1;
    2282:	18e0      	adds	r0, r4, r3
    2284:	e7ea      	b.n	225c <console_read+0x54>
    2286:	bf00      	nop
    2288:	200157e4 	.word	0x200157e4
    228c:	200157d8 	.word	0x200157d8
    2290:	20015bf8 	.word	0x20015bf8

00002294 <boot_console_init>:
{
    2294:	b537      	push	{r0, r1, r2, r4, r5, lr}
	list->head = NULL;
    2296:	2500      	movs	r5, #0
    2298:	4b1e      	ldr	r3, [pc, #120]	; (2314 <boot_console_init+0x80>)
	list->head = node;
    229a:	4a1f      	ldr	r2, [pc, #124]	; (2318 <boot_console_init+0x84>)
	list->tail = NULL;
    229c:	e9c3 5500 	strd	r5, r5, [r3]
	list->head = node;
    22a0:	4b1e      	ldr	r3, [pc, #120]	; (231c <boot_console_init+0x88>)
	parent->next = child;
    22a2:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    22a6:	6013      	str	r3, [r2, #0]
	parent->next = child;
    22a8:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
    22ac:	6019      	str	r1, [r3, #0]
	list->tail = node;
    22ae:	6051      	str	r1, [r2, #4]
    22b0:	481b      	ldr	r0, [pc, #108]	; (2320 <boot_console_init+0x8c>)
    22b2:	f002 f873 	bl	439c <z_impl_device_get_binding>

static int
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = device_get_binding(CONFIG_RECOVERY_UART_DEV_NAME);
    22b6:	4c1b      	ldr	r4, [pc, #108]	; (2324 <boot_console_init+0x90>)
    22b8:	6020      	str	r0, [r4, #0]
		}
	}
#endif
	uint8_t c;

	if (!uart_dev) {
    22ba:	b338      	cbz	r0, 230c <boot_console_init+0x78>
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    22bc:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    22be:	b123      	cbz	r3, 22ca <boot_console_init+0x36>
    22c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    22c2:	b113      	cbz	r3, 22ca <boot_console_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
    22c4:	462a      	mov	r2, r5
    22c6:	4918      	ldr	r1, [pc, #96]	; (2328 <boot_console_init+0x94>)
    22c8:	4798      	blx	r3
	}

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    22ca:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
    22cc:	6883      	ldr	r3, [r0, #8]
    22ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    22d0:	b183      	cbz	r3, 22f4 <boot_console_init+0x60>
	return api->irq_rx_ready(dev);
    22d2:	4798      	blx	r3
    22d4:	b970      	cbnz	r0, 22f4 <boot_console_init+0x60>
		while (uart_fifo_read(uart_dev, &c, 1)) {
			;
		}
	}

	cur = 0;
    22d6:	2300      	movs	r3, #0
    22d8:	4a14      	ldr	r2, [pc, #80]	; (232c <boot_console_init+0x98>)

	uart_irq_rx_enable(uart_dev);
    22da:	6820      	ldr	r0, [r4, #0]
	cur = 0;
    22dc:	8013      	strh	r3, [r2, #0]
	if (api->irq_rx_enable != NULL) {
    22de:	6882      	ldr	r2, [r0, #8]
    22e0:	461c      	mov	r4, r3
    22e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    22e4:	b982      	cbnz	r2, 2308 <boot_console_init+0x74>
    22e6:	f384 8811 	msr	BASEPRI, r4
    22ea:	f3bf 8f6f 	isb	sy
	 * to Zephyr issue #8393. This should be removed once the
	 * issue is fixed in upstream Zephyr.
	 */
	irq_unlock(0);

	return 0;
    22ee:	2000      	movs	r0, #0
}
    22f0:	b003      	add	sp, #12
    22f2:	bd30      	pop	{r4, r5, pc}
		while (uart_fifo_read(uart_dev, &c, 1)) {
    22f4:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read != NULL) {
    22f6:	6883      	ldr	r3, [r0, #8]
    22f8:	699b      	ldr	r3, [r3, #24]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d0eb      	beq.n	22d6 <boot_console_init+0x42>
		return api->fifo_read(dev, rx_data, size);
    22fe:	2201      	movs	r2, #1
    2300:	f10d 0107 	add.w	r1, sp, #7
    2304:	4798      	blx	r3
    2306:	e7e5      	b.n	22d4 <boot_console_init+0x40>
		api->irq_rx_enable(dev);
    2308:	4790      	blx	r2
    230a:	e7ec      	b.n	22e6 <boot_console_init+0x52>
		return (-1);
    230c:	f04f 30ff 	mov.w	r0, #4294967295
	return boot_uart_fifo_init();
    2310:	e7ee      	b.n	22f0 <boot_console_init+0x5c>
    2312:	bf00      	nop
    2314:	20015bf8 	.word	0x20015bf8
    2318:	200157d8 	.word	0x200157d8
    231c:	200157e8 	.word	0x200157e8
    2320:	00007fce 	.word	0x00007fce
    2324:	20015c00 	.word	0x20015c00
    2328:	0000213d 	.word	0x0000213d
    232c:	20015cdc 	.word	0x20015cdc

00002330 <bs_cbor_writer>:
static CborEncoder bs_root;
static CborEncoder bs_rsp;

int
bs_cbor_writer(struct cbor_encoder_writer *cew, const char *data, int len)
{
    2330:	b538      	push	{r3, r4, r5, lr}
    if (cew->bytes_written + len > sizeof(bs_obuf)) {
    2332:	6843      	ldr	r3, [r0, #4]
{
    2334:	4604      	mov	r4, r0
    if (cew->bytes_written + len > sizeof(bs_obuf)) {
    2336:	1898      	adds	r0, r3, r2
    2338:	2880      	cmp	r0, #128	; 0x80
{
    233a:	4615      	mov	r5, r2
    if (cew->bytes_written + len > sizeof(bs_obuf)) {
    233c:	d808      	bhi.n	2350 <bs_cbor_writer+0x20>
        return CborErrorOutOfMemory;
    }

    memcpy(&bs_obuf[cew->bytes_written], data, len);
    233e:	4806      	ldr	r0, [pc, #24]	; (2358 <bs_cbor_writer+0x28>)
    2340:	4418      	add	r0, r3
    2342:	f004 fbdb 	bl	6afc <memcpy>
    cew->bytes_written += len;

    return 0;
    2346:	2000      	movs	r0, #0
    cew->bytes_written += len;
    2348:	6862      	ldr	r2, [r4, #4]
    234a:	442a      	add	r2, r5
    234c:	6062      	str	r2, [r4, #4]
}
    234e:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
    2350:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    2354:	e7fb      	b.n	234e <bs_cbor_writer+0x1e>
    2356:	bf00      	nop
    2358:	200161df 	.word	0x200161df

0000235c <boot_serial_output>:
{
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    235c:	f640 1306 	movw	r3, #2310	; 0x906
{
    2360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char encoded_buf[BASE64_ENCODE_SIZE(BOOT_SERIAL_OUT_MAX)];

    data = bs_obuf;
    len = bs_writer.bytes_written;

    bs_hdr->nh_op++;
    2364:	f8df 8114 	ldr.w	r8, [pc, #276]	; 247c <boot_serial_output+0x120>
{
    2368:	b0d2      	sub	sp, #328	; 0x148
    bs_hdr->nh_op++;
    236a:	f8d8 0000 	ldr.w	r0, [r8]
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    236e:	f8ad 300c 	strh.w	r3, [sp, #12]
    len = bs_writer.bytes_written;
    2372:	4b3d      	ldr	r3, [pc, #244]	; (2468 <boot_serial_output+0x10c>)
    bs_hdr->nh_flags = 0;
    bs_hdr->nh_len = htons(len);
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    2374:	8881      	ldrh	r1, [r0, #4]
    len = bs_writer.bytes_written;
    2376:	685c      	ldr	r4, [r3, #4]
    bs_hdr->nh_op++;
    2378:	7803      	ldrb	r3, [r0, #0]
    bs_hdr->nh_len = htons(len);
    237a:	f3c4 2207 	ubfx	r2, r4, #8, #8
    bs_hdr->nh_op++;
    237e:	3301      	adds	r3, #1
    2380:	7003      	strb	r3, [r0, #0]
    bs_hdr->nh_flags = 0;
    2382:	2300      	movs	r3, #0
    bs_hdr->nh_len = htons(len);
    2384:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    2388:	8042      	strh	r2, [r0, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    238a:	020a      	lsls	r2, r1, #8
    238c:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
    bs_hdr->nh_flags = 0;
    2390:	7043      	strb	r3, [r0, #1]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    2392:	8082      	strh	r2, [r0, #4]

#ifdef __ZEPHYR__
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    2394:	2108      	movs	r1, #8
    2396:	9300      	str	r3, [sp, #0]
    2398:	f241 0221 	movw	r2, #4129	; 0x1021
    239c:	f003 fff0 	bl	6380 <crc16>
                 CRC16_INITIAL_CRC, false);
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    23a0:	2301      	movs	r3, #1
    23a2:	4f32      	ldr	r7, [pc, #200]	; (246c <boot_serial_output+0x110>)
    23a4:	f241 0221 	movw	r2, #4129	; 0x1021
    23a8:	4621      	mov	r1, r4
    crc =  crc16((uint8_t *)bs_hdr, sizeof(*bs_hdr), CRC_CITT_POLYMINAL,
    23aa:	f8ad 0010 	strh.w	r0, [sp, #16]
    crc =  crc16(data, len, CRC_CITT_POLYMINAL, crc, true);
    23ae:	9300      	str	r3, [sp, #0]
    23b0:	4603      	mov	r3, r0
    23b2:	4638      	mov	r0, r7
    23b4:	f003 ffe4 	bl	6380 <crc16>

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    23b8:	2502      	movs	r5, #2
    boot_uf->write(pkt_start, sizeof(pkt_start));
    23ba:	4e2d      	ldr	r6, [pc, #180]	; (2470 <boot_serial_output+0x114>)
    crc = htons(crc);
    23bc:	ba40      	rev16	r0, r0
    boot_uf->write(pkt_start, sizeof(pkt_start));
    23be:	6833      	ldr	r3, [r6, #0]
    crc = htons(crc);
    23c0:	f8ad 0010 	strh.w	r0, [sp, #16]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    23c4:	2102      	movs	r1, #2
    23c6:	a803      	add	r0, sp, #12
    23c8:	685b      	ldr	r3, [r3, #4]
    23ca:	4798      	blx	r3
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    23cc:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    23d0:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    23d2:	f10d 0112 	add.w	r1, sp, #18
    23d6:	2202      	movs	r2, #2
    23d8:	a806      	add	r0, sp, #24
    totlen = htons(totlen);
    23da:	f8ad 3012 	strh.w	r3, [sp, #18]
    memcpy(buf, &totlen, sizeof(totlen));
    23de:	f004 fb8d 	bl	6afc <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    23e2:	f8d8 1000 	ldr.w	r1, [r8]
    23e6:	2208      	movs	r2, #8
    23e8:	f10d 001a 	add.w	r0, sp, #26
    totlen = sizeof(totlen);
    23ec:	f8ad 5012 	strh.w	r5, [sp, #18]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    23f0:	f004 fb84 	bl	6afc <memcpy>
    totlen += sizeof(*bs_hdr);
    23f4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    23f8:	ab06      	add	r3, sp, #24
    totlen += sizeof(*bs_hdr);
    23fa:	3008      	adds	r0, #8
    23fc:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    23fe:	4622      	mov	r2, r4
    2400:	4639      	mov	r1, r7
    totlen += sizeof(*bs_hdr);
    2402:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], data, len);
    2406:	4418      	add	r0, r3
    2408:	f004 fb78 	bl	6afc <memcpy>
    totlen += len;
    240c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2410:	ab06      	add	r3, sp, #24
    totlen += len;
    2412:	4420      	add	r0, r4
    2414:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    2416:	462a      	mov	r2, r5
    totlen += len;
    2418:	f8ad 0012 	strh.w	r0, [sp, #18]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    241c:	a904      	add	r1, sp, #16
    241e:	4418      	add	r0, r3
    2420:	f004 fb6c 	bl	6afc <memcpy>
    totlen += sizeof(crc);
    2424:	f8bd 3012 	ldrh.w	r3, [sp, #18]
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    2428:	aa05      	add	r2, sp, #20
    totlen += sizeof(crc);
    242a:	442b      	add	r3, r5
    242c:	b29b      	uxth	r3, r3
    242e:	f8ad 3012 	strh.w	r3, [sp, #18]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    2432:	9300      	str	r3, [sp, #0]
    2434:	21ad      	movs	r1, #173	; 0xad
    2436:	ab06      	add	r3, sp, #24
    2438:	a826      	add	r0, sp, #152	; 0x98
    243a:	f7fe ffd3 	bl	13e4 <base64_encode>
    totlen = enc_len;
    243e:	9905      	ldr	r1, [sp, #20]
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    2440:	6833      	ldr	r3, [r6, #0]
    totlen = enc_len;
    2442:	f8ad 1012 	strh.w	r1, [sp, #18]
    boot_uf->write(encoded_buf, totlen);
    2446:	a826      	add	r0, sp, #152	; 0x98
    2448:	685b      	ldr	r3, [r3, #4]
    244a:	b289      	uxth	r1, r1
    244c:	4798      	blx	r3
    boot_uf->write("\n\r", 2);
    244e:	6833      	ldr	r3, [r6, #0]
    2450:	4629      	mov	r1, r5
    2452:	685b      	ldr	r3, [r3, #4]
    2454:	4807      	ldr	r0, [pc, #28]	; (2474 <boot_serial_output+0x118>)
    2456:	4798      	blx	r3
    BOOT_LOG_INF("TX");
    2458:	2149      	movs	r1, #73	; 0x49
    245a:	4807      	ldr	r0, [pc, #28]	; (2478 <boot_serial_output+0x11c>)
    245c:	f004 f897 	bl	658e <z_log_minimal_printk>
}
    2460:	b052      	add	sp, #328	; 0x148
    2462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2466:	bf00      	nop
    2468:	20014514 	.word	0x20014514
    246c:	200161df 	.word	0x200161df
    2470:	20015c04 	.word	0x20015c04
    2474:	00007fe4 	.word	0x00007fe4
    2478:	00007fe7 	.word	0x00007fe7
    247c:	20015c08 	.word	0x20015c08

00002480 <bs_empty_rsp.isra.0>:
bs_empty_rsp(char *buf, int len)
    2480:	b538      	push	{r3, r4, r5, lr}
    cbor_encoder_create_map(&bs_root, &bs_rsp, CborIndefiniteLength);
    2482:	4c0c      	ldr	r4, [pc, #48]	; (24b4 <bs_empty_rsp.isra.0+0x34>)
    2484:	4d0c      	ldr	r5, [pc, #48]	; (24b8 <bs_empty_rsp.isra.0+0x38>)
    2486:	f04f 32ff 	mov.w	r2, #4294967295
    248a:	4621      	mov	r1, r4
    248c:	4628      	mov	r0, r5
    248e:	f004 ff28 	bl	72e2 <cbor_encoder_create_map>
    cbor_encode_text_stringz(&bs_rsp, "rc");
    2492:	490a      	ldr	r1, [pc, #40]	; (24bc <bs_empty_rsp.isra.0+0x3c>)
    2494:	4620      	mov	r0, r4
    2496:	f004 fa03 	bl	68a0 <cbor_encode_text_stringz>
    cbor_encode_int(&bs_rsp, 0);
    249a:	2300      	movs	r3, #0
    249c:	2200      	movs	r2, #0
    249e:	4620      	mov	r0, r4
    24a0:	f004 fefc 	bl	729c <cbor_encode_int>
    cbor_encoder_close_container(&bs_root, &bs_rsp);
    24a4:	4621      	mov	r1, r4
    24a6:	4628      	mov	r0, r5
    24a8:	f004 ff2c 	bl	7304 <cbor_encoder_close_container>
}
    24ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    boot_serial_output();
    24b0:	f7ff bf54 	b.w	235c <boot_serial_output>
    24b4:	20015c1c 	.word	0x20015c1c
    24b8:	20015c0c 	.word	0x20015c0c
    24bc:	00007fef 	.word	0x00007fef

000024c0 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    24c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    24c4:	680c      	ldr	r4, [r1, #0]
    24c6:	4f1b      	ldr	r7, [pc, #108]	; (2534 <boot_serial_in_dec.constprop.0+0x74>)
    24c8:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    24ca:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    24cc:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    24d0:	9000      	str	r0, [sp, #0]
    24d2:	4b19      	ldr	r3, [pc, #100]	; (2538 <boot_serial_in_dec.constprop.0+0x78>)
    24d4:	1938      	adds	r0, r7, r4
    24d6:	aa03      	add	r2, sp, #12
    24d8:	3101      	adds	r1, #1
    24da:	f7ff f803 	bl	14e4 <base64_decode>
    if (err) {
    24de:	4604      	mov	r4, r0
    24e0:	bb28      	cbnz	r0, 252e <boot_serial_in_dec.constprop.0+0x6e>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    24e2:	682b      	ldr	r3, [r5, #0]
    24e4:	9a03      	ldr	r2, [sp, #12]
    24e6:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    24e8:	2b02      	cmp	r3, #2
    *out_off += rc;
    24ea:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    24ec:	d91b      	bls.n	2526 <boot_serial_in_dec.constprop.0+0x66>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    24ee:	8839      	ldrh	r1, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    24f0:	3b02      	subs	r3, #2
    len = ntohs(*(uint16_t *)out);
    24f2:	020e      	lsls	r6, r1, #8
    24f4:	ea46 2611 	orr.w	r6, r6, r1, lsr #8
    24f8:	b2b6      	uxth	r6, r6
    if (len != *out_off - sizeof(uint16_t)) {
    24fa:	429e      	cmp	r6, r3
    24fc:	d113      	bne.n	2526 <boot_serial_in_dec.constprop.0+0x66>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16(out, len, CRC_CITT_POLYMINAL, CRC16_INITIAL_CRC, true);
    24fe:	f04f 0801 	mov.w	r8, #1
    2502:	4603      	mov	r3, r0
    2504:	f241 0221 	movw	r2, #4129	; 0x1021
    2508:	4631      	mov	r1, r6
    250a:	f8cd 8000 	str.w	r8, [sp]
    250e:	1cb8      	adds	r0, r7, #2
    2510:	f003 ff36 	bl	6380 <crc16>
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    2514:	b938      	cbnz	r0, 2526 <boot_serial_in_dec.constprop.0+0x66>
    2516:	2e02      	cmp	r6, #2
    2518:	d905      	bls.n	2526 <boot_serial_in_dec.constprop.0+0x66>
        return 0;
    }
    *out_off -= sizeof(crc);
    251a:	682b      	ldr	r3, [r5, #0]
    251c:	3b02      	subs	r3, #2
    out[*out_off] = '\0';
    251e:	441f      	add	r7, r3
    *out_off -= sizeof(crc);
    2520:	602b      	str	r3, [r5, #0]
    out[*out_off] = '\0';
    2522:	70bc      	strb	r4, [r7, #2]

    return 1;
    2524:	4644      	mov	r4, r8
}
    2526:	4620      	mov	r0, r4
    2528:	b004      	add	sp, #16
    252a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    252e:	f04f 34ff 	mov.w	r4, #4294967295
    2532:	e7f8      	b.n	2526 <boot_serial_in_dec.constprop.0+0x66>
    2534:	2001625f 	.word	0x2001625f
    2538:	20016462 	.word	0x20016462

0000253c <boot_serial_input>:
{
    253c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (len < sizeof(*hdr) ||
    2540:	2907      	cmp	r1, #7
{
    2542:	4604      	mov	r4, r0
    2544:	b0b5      	sub	sp, #212	; 0xd4
    if (len < sizeof(*hdr) ||
    2546:	d960      	bls.n	260a <boot_serial_input+0xce>
    2548:	7805      	ldrb	r5, [r0, #0]
    254a:	f015 05fd 	ands.w	r5, r5, #253	; 0xfd
    254e:	d15c      	bne.n	260a <boot_serial_input+0xce>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    2550:	8842      	ldrh	r2, [r0, #2]
    2552:	f1a1 0608 	sub.w	r6, r1, #8
    2556:	0213      	lsls	r3, r2, #8
    2558:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    255c:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    255e:	42b3      	cmp	r3, r6
    2560:	d353      	bcc.n	260a <boot_serial_input+0xce>
    hdr->nh_group = ntohs(hdr->nh_group);
    2562:	8882      	ldrh	r2, [r0, #4]
    bs_hdr = hdr;
    2564:	4bb6      	ldr	r3, [pc, #728]	; (2840 <CONFIG_MAIN_STACK_SIZE+0x40>)
    bs_writer.bytes_written = 0;
    2566:	49b7      	ldr	r1, [pc, #732]	; (2844 <CONFIG_MAIN_STACK_SIZE+0x44>)
    bs_hdr = hdr;
    2568:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    256a:	0213      	lsls	r3, r2, #8
    256c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    2570:	8083      	strh	r3, [r0, #4]
    cbor_encoder_init(&bs_root, &bs_writer, 0);
    2572:	462a      	mov	r2, r5
    2574:	48b4      	ldr	r0, [pc, #720]	; (2848 <CONFIG_MAIN_STACK_SIZE+0x48>)
    bs_writer.bytes_written = 0;
    2576:	604d      	str	r5, [r1, #4]
    cbor_encoder_init(&bs_root, &bs_writer, 0);
    2578:	f004 fe83 	bl	7282 <cbor_encoder_init>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    257c:	88a3      	ldrh	r3, [r4, #4]
    257e:	2b01      	cmp	r3, #1
    2580:	f040 81ec 	bne.w	295c <CONFIG_MAIN_STACK_SIZE+0x15c>
        switch (hdr->nh_id) {
    2584:	79e3      	ldrb	r3, [r4, #7]
    2586:	b12b      	cbz	r3, 2594 <boot_serial_input+0x58>
    2588:	2b01      	cmp	r3, #1
    258a:	f000 809c 	beq.w	26c6 <boot_serial_input+0x18a>
            bs_empty_rsp(buf, len);
    258e:	f7ff ff77 	bl	2480 <bs_empty_rsp.isra.0>
            break;
    2592:	e03a      	b.n	260a <boot_serial_input+0xce>
    cbor_encoder_create_map(&bs_root, &bs_rsp, CborIndefiniteLength);
    2594:	f04f 32ff 	mov.w	r2, #4294967295
    2598:	49ac      	ldr	r1, [pc, #688]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    259a:	48ab      	ldr	r0, [pc, #684]	; (2848 <CONFIG_MAIN_STACK_SIZE+0x48>)
    259c:	f004 fea1 	bl	72e2 <cbor_encoder_create_map>
    cbor_encode_text_stringz(&bs_rsp, "images");
    25a0:	49ab      	ldr	r1, [pc, #684]	; (2850 <CONFIG_MAIN_STACK_SIZE+0x50>)
    25a2:	48aa      	ldr	r0, [pc, #680]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    25a4:	f004 f97c 	bl	68a0 <cbor_encode_text_stringz>
    cbor_encoder_create_array(&bs_rsp, &images, CborIndefiniteLength);
    25a8:	f04f 32ff 	mov.w	r2, #4294967295
    25ac:	48a7      	ldr	r0, [pc, #668]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    25ae:	a90a      	add	r1, sp, #40	; 0x28
    25b0:	f004 fe94 	bl	72dc <cbor_encoder_create_array>
    25b4:	2600      	movs	r6, #0
    25b6:	2700      	movs	r7, #0
            if (hdr.ih_magic != IMAGE_MAGIC ||
    25b8:	4da6      	ldr	r5, [pc, #664]	; (2854 <CONFIG_MAIN_STACK_SIZE+0x54>)
            cbor_encode_text_stringz(&image, "slot");
    25ba:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 287c <CONFIG_MAIN_STACK_SIZE+0x7c>
            cbor_encode_text_stringz(&image, "version");
    25be:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 2880 <CONFIG_MAIN_STACK_SIZE+0x80>
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    25c2:	4631      	mov	r1, r6
    25c4:	2000      	movs	r0, #0
    25c6:	f003 fb67 	bl	5c98 <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    25ca:	a909      	add	r1, sp, #36	; 0x24
    25cc:	b2c0      	uxtb	r0, r0
    25ce:	f7ff fbb3 	bl	1d38 <flash_area_open>
    25d2:	4604      	mov	r4, r0
    25d4:	b958      	cbnz	r0, 25ee <boot_serial_input+0xb2>
            flash_area_read(fap, 0, &hdr, sizeof(hdr));
    25d6:	2320      	movs	r3, #32
    25d8:	4601      	mov	r1, r0
    25da:	aa12      	add	r2, sp, #72	; 0x48
    25dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    25de:	f004 f804 	bl	65ea <flash_area_read>
            if (hdr.ih_magic != IMAGE_MAGIC ||
    25e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    25e4:	42ab      	cmp	r3, r5
    25e6:	d016      	beq.n	2616 <boot_serial_input+0xda>
                flash_area_close(fap);
    25e8:	9809      	ldr	r0, [sp, #36]	; 0x24
    25ea:	f003 fffd 	bl	65e8 <flash_area_close>
        for (slot = 0; slot < 2; slot++) {
    25ee:	2f00      	cmp	r7, #0
    25f0:	bf08      	it	eq
    25f2:	2e01      	cmpeq	r6, #1
    25f4:	d10c      	bne.n	2610 <boot_serial_input+0xd4>
    cbor_encoder_close_container(&bs_rsp, &images);
    25f6:	a90a      	add	r1, sp, #40	; 0x28
    25f8:	4894      	ldr	r0, [pc, #592]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    25fa:	f004 fe83 	bl	7304 <cbor_encoder_close_container>
    cbor_encoder_close_container(&bs_root, &bs_rsp);
    25fe:	4993      	ldr	r1, [pc, #588]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    2600:	4891      	ldr	r0, [pc, #580]	; (2848 <CONFIG_MAIN_STACK_SIZE+0x48>)
    2602:	f004 fe7f 	bl	7304 <cbor_encoder_close_container>
    boot_serial_output();
    2606:	f7ff fea9 	bl	235c <boot_serial_output>
}
    260a:	b035      	add	sp, #212	; 0xd4
    260c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2610:	2601      	movs	r6, #1
    2612:	2700      	movs	r7, #0
    2614:	e7d5      	b.n	25c2 <boot_serial_input+0x86>
              bootutil_img_validate(NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    2616:	2340      	movs	r3, #64	; 0x40
    2618:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
    261c:	9301      	str	r3, [sp, #4]
    261e:	4621      	mov	r1, r4
    2620:	4620      	mov	r0, r4
    2622:	e9cd 4403 	strd	r4, r4, [sp, #12]
    2626:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2628:	9402      	str	r4, [sp, #8]
    262a:	f8cd a000 	str.w	sl, [sp]
    262e:	aa12      	add	r2, sp, #72	; 0x48
    2630:	f7fd ffcc 	bl	5cc <bootutil_img_validate>
            if (hdr.ih_magic != IMAGE_MAGIC ||
    2634:	2800      	cmp	r0, #0
    2636:	d1d7      	bne.n	25e8 <boot_serial_input+0xac>
            flash_area_close(fap);
    2638:	9809      	ldr	r0, [sp, #36]	; 0x24
    263a:	f003 ffd5 	bl	65e8 <flash_area_close>
            cbor_encoder_create_map(&images, &image, CborIndefiniteLength);
    263e:	f04f 32ff 	mov.w	r2, #4294967295
    2642:	a90e      	add	r1, sp, #56	; 0x38
    2644:	a80a      	add	r0, sp, #40	; 0x28
    2646:	f004 fe4c 	bl	72e2 <cbor_encoder_create_map>
            cbor_encode_text_stringz(&image, "slot");
    264a:	4641      	mov	r1, r8
    264c:	a80e      	add	r0, sp, #56	; 0x38
    264e:	f004 f927 	bl	68a0 <cbor_encode_text_stringz>
            cbor_encode_int(&image, slot);
    2652:	4632      	mov	r2, r6
    2654:	463b      	mov	r3, r7
    2656:	a80e      	add	r0, sp, #56	; 0x38
    2658:	f004 fe20 	bl	729c <cbor_encode_int>
            cbor_encode_text_stringz(&image, "version");
    265c:	4649      	mov	r1, r9
    265e:	a80e      	add	r0, sp, #56	; 0x38
    2660:	f004 f91e 	bl	68a0 <cbor_encode_text_stringz>
    off = u32toa(dst, ver->iv_major);
    2664:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
    2668:	4650      	mov	r0, sl
    266a:	f004 f8f7 	bl	685c <u32toa>
    dst[off++] = '.';
    266e:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
    2672:	ab34      	add	r3, sp, #208	; 0xd0
    2674:	1c44      	adds	r4, r0, #1
    2676:	4418      	add	r0, r3
    off += u32toa(dst + off, ver->iv_minor);
    2678:	f89d 105d 	ldrb.w	r1, [sp, #93]	; 0x5d
    dst[off++] = '.';
    267c:	f800 bc68 	strb.w	fp, [r0, #-104]
    off += u32toa(dst + off, ver->iv_minor);
    2680:	eb0a 0004 	add.w	r0, sl, r4
    2684:	f004 f8ea 	bl	685c <u32toa>
    dst[off++] = '.';
    2688:	ab34      	add	r3, sp, #208	; 0xd0
    off += u32toa(dst + off, ver->iv_minor);
    268a:	4420      	add	r0, r4
    dst[off++] = '.';
    268c:	1c44      	adds	r4, r0, #1
    268e:	4418      	add	r0, r3
    off += u32toa(dst + off, ver->iv_revision);
    2690:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
    dst[off++] = '.';
    2694:	f800 bc68 	strb.w	fp, [r0, #-104]
    off += u32toa(dst + off, ver->iv_revision);
    2698:	eb0a 0004 	add.w	r0, sl, r4
    269c:	f004 f8de 	bl	685c <u32toa>
    dst[off++] = '.';
    26a0:	ab34      	add	r3, sp, #208	; 0xd0
    off += u32toa(dst + off, ver->iv_revision);
    26a2:	4420      	add	r0, r4
    dst[off++] = '.';
    26a4:	4403      	add	r3, r0
    26a6:	3001      	adds	r0, #1
    off += u32toa(dst + off, ver->iv_build_num);
    26a8:	9918      	ldr	r1, [sp, #96]	; 0x60
    dst[off++] = '.';
    26aa:	f803 bc68 	strb.w	fp, [r3, #-104]
    off += u32toa(dst + off, ver->iv_build_num);
    26ae:	4450      	add	r0, sl
    26b0:	f004 f8d4 	bl	685c <u32toa>
            cbor_encode_text_stringz(&image, (char *)tmpbuf);
    26b4:	4651      	mov	r1, sl
    26b6:	a80e      	add	r0, sp, #56	; 0x38
    26b8:	f004 f8f2 	bl	68a0 <cbor_encode_text_stringz>
            cbor_encoder_close_container(&images, &image);
    26bc:	a90e      	add	r1, sp, #56	; 0x38
    26be:	a80a      	add	r0, sp, #40	; 0x28
    26c0:	f004 fe20 	bl	7304 <cbor_encoder_close_container>
    26c4:	e793      	b.n	25ee <boot_serial_input+0xb2>
    if (!cbor_decode_Upload((const uint8_t *)buf, len, &upload)) {
    26c6:	4631      	mov	r1, r6
    26c8:	aa1a      	add	r2, sp, #104	; 0x68
    26ca:	f104 0008 	add.w	r0, r4, #8
    const struct flash_area *fap = NULL;
    26ce:	950a      	str	r5, [sp, #40]	; 0x28
    if (!cbor_decode_Upload((const uint8_t *)buf, len, &upload)) {
    26d0:	f000 fa3a 	bl	2b48 <cbor_decode_Upload>
    26d4:	b908      	cbnz	r0, 26da <boot_serial_input+0x19e>
        rc = MGMT_ERR_EINVAL;
    26d6:	2603      	movs	r6, #3
    26d8:	e038      	b.n	274c <boot_serial_input+0x210>
    long long int data_len = UINT_MAX;
    26da:	f04f 38ff 	mov.w	r8, #4294967295
    26de:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < upload._Upload_members_count; i++) {
    26e2:	462a      	mov	r2, r5
    img_num = 0;
    26e4:	4628      	mov	r0, r5
    size_t img_blen = 0;
    26e6:	462c      	mov	r4, r5
    long long int off = UINT_MAX;
    26e8:	4646      	mov	r6, r8
    26ea:	464f      	mov	r7, r9
    const uint8_t *img_data = NULL;
    26ec:	46ab      	mov	fp, r5
    26ee:	f8dd c0cc 	ldr.w	ip, [sp, #204]	; 0xcc
    26f2:	ab1a      	add	r3, sp, #104	; 0x68
    for (int i = 0; i < upload._Upload_members_count; i++) {
    26f4:	4594      	cmp	ip, r2
    26f6:	d152      	bne.n	279e <boot_serial_input+0x262>
    if (off == UINT_MAX || img_data == NULL) {
    26f8:	2f00      	cmp	r7, #0
    26fa:	bf08      	it	eq
    26fc:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    2700:	d0e9      	beq.n	26d6 <boot_serial_input+0x19a>
    2702:	f1bb 0f00 	cmp.w	fp, #0
    2706:	d0e6      	beq.n	26d6 <boot_serial_input+0x19a>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    2708:	2100      	movs	r1, #0
    270a:	f003 fac5 	bl	5c98 <flash_area_id_from_multi_image_slot>
    270e:	a90a      	add	r1, sp, #40	; 0x28
    2710:	b2c0      	uxtb	r0, r0
    2712:	f7ff fb11 	bl	1d38 <flash_area_open>
    if (rc) {
    2716:	2800      	cmp	r0, #0
    2718:	d1dd      	bne.n	26d6 <boot_serial_input+0x19a>
    if (off == 0) {
    271a:	ea56 0307 	orrs.w	r3, r6, r7
    271e:	f8df a148 	ldr.w	sl, [pc, #328]	; 2868 <CONFIG_MAIN_STACK_SIZE+0x68>
    2722:	d10b      	bne.n	273c <boot_serial_input+0x200>
        if (data_len > fap->fa_size) {
    2724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        curr_off = 0;
    2726:	f8ca 0000 	str.w	r0, [sl]
        if (data_len > fap->fa_size) {
    272a:	689a      	ldr	r2, [r3, #8]
    272c:	2300      	movs	r3, #0
    272e:	4542      	cmp	r2, r8
    2730:	eb73 0309 	sbcs.w	r3, r3, r9
    2734:	dbcf      	blt.n	26d6 <boot_serial_input+0x19a>
        img_size = data_len;
    2736:	4b48      	ldr	r3, [pc, #288]	; (2858 <CONFIG_MAIN_STACK_SIZE+0x58>)
    2738:	f8c3 8000 	str.w	r8, [r3]
    if (off != curr_off) {
    273c:	2300      	movs	r3, #0
    273e:	f8da 1000 	ldr.w	r1, [sl]
    2742:	42bb      	cmp	r3, r7
    2744:	bf08      	it	eq
    2746:	42b1      	cmpeq	r1, r6
    2748:	d03f      	beq.n	27ca <boot_serial_input+0x28e>
        rc = 0;
    274a:	2600      	movs	r6, #0
    BOOT_LOG_INF("RX: 0x%x", rc);
    274c:	4632      	mov	r2, r6
    274e:	2149      	movs	r1, #73	; 0x49
    2750:	4842      	ldr	r0, [pc, #264]	; (285c <CONFIG_MAIN_STACK_SIZE+0x5c>)
    2752:	f003 ff1c 	bl	658e <z_log_minimal_printk>
    cbor_encoder_create_map(&bs_root, &bs_rsp, CborIndefiniteLength);
    2756:	f04f 32ff 	mov.w	r2, #4294967295
    275a:	493c      	ldr	r1, [pc, #240]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    275c:	483a      	ldr	r0, [pc, #232]	; (2848 <CONFIG_MAIN_STACK_SIZE+0x48>)
    275e:	f004 fdc0 	bl	72e2 <cbor_encoder_create_map>
    cbor_encode_text_stringz(&bs_rsp, "rc");
    2762:	493f      	ldr	r1, [pc, #252]	; (2860 <CONFIG_MAIN_STACK_SIZE+0x60>)
    2764:	4839      	ldr	r0, [pc, #228]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    2766:	f004 f89b 	bl	68a0 <cbor_encode_text_stringz>
    cbor_encode_int(&bs_rsp, rc);
    276a:	4632      	mov	r2, r6
    276c:	4837      	ldr	r0, [pc, #220]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    276e:	17f3      	asrs	r3, r6, #31
    2770:	f004 fd94 	bl	729c <cbor_encode_int>
    if (rc == 0) {
    2774:	b94e      	cbnz	r6, 278a <boot_serial_input+0x24e>
        cbor_encode_text_stringz(&bs_rsp, "off");
    2776:	493b      	ldr	r1, [pc, #236]	; (2864 <CONFIG_MAIN_STACK_SIZE+0x64>)
    2778:	4834      	ldr	r0, [pc, #208]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    277a:	f004 f891 	bl	68a0 <cbor_encode_text_stringz>
        cbor_encode_uint(&bs_rsp, curr_off);
    277e:	4b3a      	ldr	r3, [pc, #232]	; (2868 <CONFIG_MAIN_STACK_SIZE+0x68>)
    2780:	4832      	ldr	r0, [pc, #200]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    2782:	681a      	ldr	r2, [r3, #0]
    2784:	4633      	mov	r3, r6
    2786:	f004 fd81 	bl	728c <cbor_encode_uint>
    cbor_encoder_close_container(&bs_root, &bs_rsp);
    278a:	4930      	ldr	r1, [pc, #192]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    278c:	482e      	ldr	r0, [pc, #184]	; (2848 <CONFIG_MAIN_STACK_SIZE+0x48>)
    278e:	f004 fdb9 	bl	7304 <cbor_encoder_close_container>
    boot_serial_output();
    2792:	f7ff fde3 	bl	235c <boot_serial_output>
    flash_area_close(fap);
    2796:	980a      	ldr	r0, [sp, #40]	; 0x28
    2798:	f003 ff26 	bl	65e8 <flash_area_close>
}
    279c:	e735      	b.n	260a <boot_serial_input+0xce>
        switch(member->_Member_choice) {
    279e:	7c19      	ldrb	r1, [r3, #16]
    27a0:	2903      	cmp	r1, #3
    27a2:	d804      	bhi.n	27ae <boot_serial_input+0x272>
    27a4:	e8df f001 	tbb	[pc, r1]
    27a8:	0e090602 	.word	0x0e090602
                img_num = member->_Member_image;
    27ac:	6898      	ldr	r0, [r3, #8]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    27ae:	3201      	adds	r2, #1
    27b0:	3314      	adds	r3, #20
    27b2:	e79f      	b.n	26f4 <boot_serial_input+0x1b8>
                slen = member->_Member_data.len;
    27b4:	e9d3 b402 	ldrd	fp, r4, [r3, #8]
                break;
    27b8:	e7f9      	b.n	27ae <boot_serial_input+0x272>
                data_len = member->_Member_len;
    27ba:	6899      	ldr	r1, [r3, #8]
    27bc:	4688      	mov	r8, r1
    27be:	ea4f 79e1 	mov.w	r9, r1, asr #31
                break;
    27c2:	e7f4      	b.n	27ae <boot_serial_input+0x272>
                off = member->_Member_off;
    27c4:	689e      	ldr	r6, [r3, #8]
    27c6:	17f7      	asrs	r7, r6, #31
                break;
    27c8:	e7f1      	b.n	27ae <boot_serial_input+0x272>
    if (curr_off + img_blen > img_size) {
    27ca:	4b23      	ldr	r3, [pc, #140]	; (2858 <CONFIG_MAIN_STACK_SIZE+0x58>)
    27cc:	4421      	add	r1, r4
    27ce:	681a      	ldr	r2, [r3, #0]
    27d0:	4698      	mov	r8, r3
    27d2:	4291      	cmp	r1, r2
    27d4:	f63f af7f 	bhi.w	26d6 <boot_serial_input+0x19a>
    rem_bytes = img_blen % flash_area_align(fap);
    27d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    27da:	f003 ff85 	bl	66e8 <flash_area_align>
    27de:	fbb4 f3f0 	udiv	r3, r4, r0
    27e2:	fb03 4310 	mls	r3, r3, r0, r4
    if ((curr_off + img_blen < img_size) && rem_bytes) {
    27e6:	f8da 0000 	ldr.w	r0, [sl]
    27ea:	f8d8 2000 	ldr.w	r2, [r8]
    27ee:	1901      	adds	r1, r0, r4
    27f0:	4291      	cmp	r1, r2
        img_blen -= rem_bytes;
    27f2:	bf38      	it	cc
    27f4:	1ae4      	subcc	r4, r4, r3
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    27f6:	a90e      	add	r1, sp, #56	; 0x38
    27f8:	4420      	add	r0, r4
    rem_bytes = img_blen % flash_area_align(fap);
    27fa:	bf28      	it	cs
    27fc:	b2dd      	uxtbcs	r5, r3
    rc = flash_area_sector_from_off(curr_off + img_blen, &sector);
    27fe:	f7fd fed3 	bl	5a8 <flash_area_sector_from_off>
    if (rc) {
    2802:	4606      	mov	r6, r0
    2804:	b120      	cbz	r0, 2810 <CONFIG_MAIN_STACK_SIZE+0x10>
        BOOT_LOG_ERR("Unable to determine flash sector size");
    2806:	2145      	movs	r1, #69	; 0x45
    2808:	4818      	ldr	r0, [pc, #96]	; (286c <CONFIG_MAIN_STACK_SIZE+0x6c>)
                BOOT_LOG_ERR("Unable to determine flash sector of"
    280a:	f003 fec0 	bl	658e <z_log_minimal_printk>
                goto out;
    280e:	e79d      	b.n	274c <boot_serial_input+0x210>
    if (off_last != sector.fs_off) {
    2810:	4b17      	ldr	r3, [pc, #92]	; (2870 <CONFIG_MAIN_STACK_SIZE+0x70>)
    2812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2814:	6819      	ldr	r1, [r3, #0]
    2816:	461f      	mov	r7, r3
    2818:	428a      	cmp	r2, r1
    281a:	d033      	beq.n	2884 <CONFIG_MAIN_STACK_SIZE+0x84>
        BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    281c:	2149      	movs	r1, #73	; 0x49
    281e:	4815      	ldr	r0, [pc, #84]	; (2874 <CONFIG_MAIN_STACK_SIZE+0x74>)
        off_last = sector.fs_off;
    2820:	601a      	str	r2, [r3, #0]
        BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    2822:	f003 feb4 	bl	658e <z_log_minimal_printk>
        rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    2826:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    282a:	980a      	ldr	r0, [sp, #40]	; 0x28
    282c:	f003 ff2c 	bl	6688 <flash_area_erase>
        if (rc) {
    2830:	4606      	mov	r6, r0
    2832:	b338      	cbz	r0, 2884 <CONFIG_MAIN_STACK_SIZE+0x84>
                    BOOT_LOG_ERR("Error %d while erasing sector", rc);
    2834:	4632      	mov	r2, r6
    2836:	2145      	movs	r1, #69	; 0x45
    2838:	480f      	ldr	r0, [pc, #60]	; (2878 <CONFIG_MAIN_STACK_SIZE+0x78>)
    283a:	f003 fea8 	bl	658e <z_log_minimal_printk>
                    goto out;
    283e:	e785      	b.n	274c <boot_serial_input+0x210>
    2840:	20015c08 	.word	0x20015c08
    2844:	20014514 	.word	0x20014514
    2848:	20015c0c 	.word	0x20015c0c
    284c:	20015c1c 	.word	0x20015c1c
    2850:	00007ff2 	.word	0x00007ff2
    2854:	96f3b83d 	.word	0x96f3b83d
    2858:	20015c30 	.word	0x20015c30
    285c:	000080d1 	.word	0x000080d1
    2860:	00007fef 	.word	0x00007fef
    2864:	000080df 	.word	0x000080df
    2868:	20015c2c 	.word	0x20015c2c
    286c:	00008006 	.word	0x00008006
    2870:	2001451c 	.word	0x2001451c
    2874:	00008031 	.word	0x00008031
    2878:	00008054 	.word	0x00008054
    287c:	00007ff9 	.word	0x00007ff9
    2880:	00007ffe 	.word	0x00007ffe
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_blen);
    2884:	f8da 2000 	ldr.w	r2, [sl]
    2888:	2149      	movs	r1, #73	; 0x49
    288a:	483e      	ldr	r0, [pc, #248]	; (2984 <CONFIG_MAIN_STACK_SIZE+0x184>)
    288c:	18a3      	adds	r3, r4, r2
    288e:	f003 fe7e 	bl	658e <z_log_minimal_printk>
    if (rem_bytes) {
    2892:	2d00      	cmp	r5, #0
    2894:	d049      	beq.n	292a <CONFIG_MAIN_STACK_SIZE+0x12a>
        if (w_size) {
    2896:	1b66      	subs	r6, r4, r5
    2898:	d030      	beq.n	28fc <CONFIG_MAIN_STACK_SIZE+0xfc>
            rc = flash_area_write(fap, curr_off, img_data, w_size);
    289a:	4633      	mov	r3, r6
    289c:	465a      	mov	r2, fp
    289e:	f8da 1000 	ldr.w	r1, [sl]
    28a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    28a4:	f003 febe 	bl	6624 <flash_area_write>
            if (rc) {
    28a8:	2800      	cmp	r0, #0
    28aa:	f47f af14 	bne.w	26d6 <boot_serial_input+0x19a>
            img_blen -= w_size;
    28ae:	462c      	mov	r4, r5
            curr_off += w_size;
    28b0:	f8da 3000 	ldr.w	r3, [sl]
            img_data += w_size;
    28b4:	44b3      	add	fp, r6
            curr_off += w_size;
    28b6:	4433      	add	r3, r6
    28b8:	f8ca 3000 	str.w	r3, [sl]
            memcpy(wbs_aligned, img_data, rem_bytes);
    28bc:	462a      	mov	r2, r5
    28be:	4659      	mov	r1, fp
    28c0:	a812      	add	r0, sp, #72	; 0x48
    28c2:	f004 f91b 	bl	6afc <memcpy>
            memset(wbs_aligned + rem_bytes, flash_area_erased_val(fap),
    28c6:	980a      	ldr	r0, [sp, #40]	; 0x28
    28c8:	f003 ff17 	bl	66fa <flash_area_erased_val>
    28cc:	ab12      	add	r3, sp, #72	; 0x48
    28ce:	f1c5 0208 	rsb	r2, r5, #8
    28d2:	4601      	mov	r1, r0
    28d4:	1958      	adds	r0, r3, r5
    28d6:	f004 f93c 	bl	6b52 <memset>
            rc = flash_area_write(fap, curr_off, wbs_aligned, flash_area_align(fap));
    28da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    28dc:	f8da 1000 	ldr.w	r1, [sl]
    28e0:	4628      	mov	r0, r5
    28e2:	9107      	str	r1, [sp, #28]
    28e4:	f003 ff00 	bl	66e8 <flash_area_align>
    28e8:	4603      	mov	r3, r0
    28ea:	4628      	mov	r0, r5
    28ec:	9907      	ldr	r1, [sp, #28]
    28ee:	aa12      	add	r2, sp, #72	; 0x48
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    28f0:	f003 fe98 	bl	6624 <flash_area_write>
    if (rc == 0) {
    28f4:	2800      	cmp	r0, #0
    28f6:	f47f aeee 	bne.w	26d6 <boot_serial_input+0x19a>
    28fa:	e001      	b.n	2900 <CONFIG_MAIN_STACK_SIZE+0x100>
        if (img_blen) {
    28fc:	2c00      	cmp	r4, #0
    28fe:	d1dd      	bne.n	28bc <CONFIG_MAIN_STACK_SIZE+0xbc>
        curr_off += img_blen;
    2900:	f8da 3000 	ldr.w	r3, [sl]
    2904:	441c      	add	r4, r3
        if (curr_off == img_size) {
    2906:	f8d8 3000 	ldr.w	r3, [r8]
        curr_off += img_blen;
    290a:	f8ca 4000 	str.w	r4, [sl]
        if (curr_off == img_size) {
    290e:	429c      	cmp	r4, r3
    2910:	f47f af1b 	bne.w	274a <boot_serial_input+0x20e>
            rc = flash_area_sector_from_off(boot_status_off(fap), &sector);
    2914:	980a      	ldr	r0, [sp, #40]	; 0x28
    2916:	f003 fa9d 	bl	5e54 <boot_status_off>
    291a:	a90e      	add	r1, sp, #56	; 0x38
    291c:	f7fd fe44 	bl	5a8 <flash_area_sector_from_off>
            if (rc) {
    2920:	4606      	mov	r6, r0
    2922:	b140      	cbz	r0, 2936 <CONFIG_MAIN_STACK_SIZE+0x136>
                BOOT_LOG_ERR("Unable to determine flash sector of"
    2924:	2145      	movs	r1, #69	; 0x45
    2926:	4818      	ldr	r0, [pc, #96]	; (2988 <CONFIG_MAIN_STACK_SIZE+0x188>)
    2928:	e76f      	b.n	280a <CONFIG_MAIN_STACK_SIZE+0xa>
        rc = flash_area_write(fap, curr_off, img_data, img_blen);
    292a:	4623      	mov	r3, r4
    292c:	465a      	mov	r2, fp
    292e:	f8da 1000 	ldr.w	r1, [sl]
    2932:	980a      	ldr	r0, [sp, #40]	; 0x28
    2934:	e7dc      	b.n	28f0 <CONFIG_MAIN_STACK_SIZE+0xf0>
            if (off_last < sector.fs_off) {
    2936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2938:	683b      	ldr	r3, [r7, #0]
    293a:	429a      	cmp	r2, r3
    293c:	f77f af05 	ble.w	274a <boot_serial_input+0x20e>
                BOOT_LOG_INF("Erasing sector at offset 0x%x", sector.fs_off);
    2940:	2149      	movs	r1, #73	; 0x49
    2942:	4812      	ldr	r0, [pc, #72]	; (298c <CONFIG_MAIN_STACK_SIZE+0x18c>)
    2944:	f003 fe23 	bl	658e <z_log_minimal_printk>
                rc = flash_area_erase(fap, sector.fs_off, sector.fs_size);
    2948:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    294c:	980a      	ldr	r0, [sp, #40]	; 0x28
    294e:	f003 fe9b 	bl	6688 <flash_area_erase>
                if (rc) {
    2952:	4606      	mov	r6, r0
    2954:	2800      	cmp	r0, #0
    2956:	f43f aef9 	beq.w	274c <boot_serial_input+0x210>
    295a:	e76b      	b.n	2834 <CONFIG_MAIN_STACK_SIZE+0x34>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    295c:	2b00      	cmp	r3, #0
    295e:	f47f ae54 	bne.w	260a <boot_serial_input+0xce>
        switch (hdr->nh_id) {
    2962:	79e3      	ldrb	r3, [r4, #7]
    2964:	2b01      	cmp	r3, #1
    2966:	f43f ae12 	beq.w	258e <boot_serial_input+0x52>
    296a:	2b05      	cmp	r3, #5
    296c:	f47f ae4d 	bne.w	260a <boot_serial_input+0xce>
    bs_empty_rsp(buf, len);
    2970:	f7ff fd86 	bl	2480 <bs_empty_rsp.isra.0>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    2974:	4806      	ldr	r0, [pc, #24]	; (2990 <CONFIG_MAIN_STACK_SIZE+0x190>)
    2976:	f004 fce9 	bl	734c <z_impl_k_busy_wait>
    sys_reboot(SYS_REBOOT_COLD);
    297a:	2001      	movs	r0, #1
    297c:	f7ff f98e 	bl	1c9c <sys_reboot>
}
    2980:	e643      	b.n	260a <boot_serial_input+0xce>
    2982:	bf00      	nop
    2984:	00008077 	.word	0x00008077
    2988:	00008097 	.word	0x00008097
    298c:	00008031 	.word	0x00008031
    2990:	0003d090 	.word	0x0003d090

00002994 <boot_serial_start>:
 * Task which waits reading console, expecting to get image over
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    2994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    boot_uf = f;
    max_input = sizeof(in_buf);

    off = 0;
    while (1) {
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    2998:	4f1b      	ldr	r7, [pc, #108]	; (2a08 <boot_serial_start+0x74>)
    int dec_off = 0;
    299a:	2400      	movs	r4, #0
{
    299c:	4605      	mov	r5, r0
    299e:	463e      	mov	r6, r7
    boot_uf = f;
    29a0:	4b1a      	ldr	r3, [pc, #104]	; (2a0c <boot_serial_start+0x78>)
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
        }

        /* serve errors: out of decode memory, or bad encoding */
        if (rc == 1) {
            boot_serial_input(&dec_buf[2], dec_off - 2);
    29a2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2a10 <boot_serial_start+0x7c>
    int dec_off = 0;
    29a6:	9400      	str	r4, [sp, #0]
    boot_uf = f;
    29a8:	6018      	str	r0, [r3, #0]
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    29aa:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    29ae:	682b      	ldr	r3, [r5, #0]
    29b0:	aa01      	add	r2, sp, #4
    29b2:	3101      	adds	r1, #1
    29b4:	1938      	adds	r0, r7, r4
    29b6:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    29b8:	2800      	cmp	r0, #0
    29ba:	9b01      	ldr	r3, [sp, #4]
    29bc:	dc01      	bgt.n	29c2 <boot_serial_start+0x2e>
    29be:	2b00      	cmp	r3, #0
    29c0:	d0f3      	beq.n	29aa <boot_serial_start+0x16>
        off += rc;
    29c2:	4404      	add	r4, r0
        if (!full_line) {
    29c4:	b92b      	cbnz	r3, 29d2 <boot_serial_start+0x3e>
            if (off == max_input) {
    29c6:	f240 2301 	movw	r3, #513	; 0x201
    29ca:	429c      	cmp	r4, r3
    29cc:	d1ed      	bne.n	29aa <boot_serial_start+0x16>
        }
        off = 0;
    29ce:	2400      	movs	r4, #0
    29d0:	e7eb      	b.n	29aa <boot_serial_start+0x16>
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    29d2:	7833      	ldrb	r3, [r6, #0]
    29d4:	2b06      	cmp	r3, #6
    29d6:	d109      	bne.n	29ec <boot_serial_start+0x58>
    29d8:	7873      	ldrb	r3, [r6, #1]
    29da:	2b09      	cmp	r3, #9
    29dc:	d10b      	bne.n	29f6 <boot_serial_start+0x62>
            dec_off = 0;
    29de:	2300      	movs	r3, #0
    29e0:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    29e2:	4669      	mov	r1, sp
    29e4:	1ea0      	subs	r0, r4, #2
    29e6:	f7ff fd6b 	bl	24c0 <boot_serial_in_dec.constprop.0>
    29ea:	e004      	b.n	29f6 <boot_serial_start+0x62>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    29ec:	2b04      	cmp	r3, #4
    29ee:	d102      	bne.n	29f6 <boot_serial_start+0x62>
    29f0:	7873      	ldrb	r3, [r6, #1]
    29f2:	2b14      	cmp	r3, #20
    29f4:	d0f5      	beq.n	29e2 <boot_serial_start+0x4e>
        if (rc == 1) {
    29f6:	2801      	cmp	r0, #1
    29f8:	d1e9      	bne.n	29ce <boot_serial_start+0x3a>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    29fa:	9900      	ldr	r1, [sp, #0]
    29fc:	4640      	mov	r0, r8
    29fe:	3902      	subs	r1, #2
    2a00:	f7ff fd9c 	bl	253c <boot_serial_input>
    2a04:	e7e3      	b.n	29ce <boot_serial_start+0x3a>
    2a06:	bf00      	nop
    2a08:	20016460 	.word	0x20016460
    2a0c:	20015c04 	.word	0x20015c04
    2a10:	20016261 	.word	0x20016261

00002a14 <decode_Member>:


static bool decode_Member(
		cbor_decode_state_t *p_state, void * p_result, void * p_min_value,
		void * p_max_value)
{
    2a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cbor_decode_print("decode_Member\n");
	uint8_t const * p_payload_bak;
	size_t elem_count_bak;
	_Member_t* p_type_result = (_Member_t*)p_result;

	bool result = (((p_payload_bak = p_state->p_payload) && ((elem_count_bak = p_state->elem_count) || 1) && ((((strx_decode(p_state, &((*p_type_result)._Member_image_key), NULL, NULL))&& !memcmp("image", (*p_type_result)._Member_image_key.value, (*p_type_result)._Member_image_key.len)
    2a18:	6807      	ldr	r7, [r0, #0]
{
    2a1a:	4605      	mov	r5, r0
    2a1c:	460c      	mov	r4, r1
	bool result = (((p_payload_bak = p_state->p_payload) && ((elem_count_bak = p_state->elem_count) || 1) && ((((strx_decode(p_state, &((*p_type_result)._Member_image_key), NULL, NULL))&& !memcmp("image", (*p_type_result)._Member_image_key.value, (*p_type_result)._Member_image_key.len)
    2a1e:	b917      	cbnz	r7, 2a26 <decode_Member+0x12>
    2a20:	2000      	movs	r0, #0
	{
		cbor_decode_trace();
	}

	return result;
}
    2a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool result = (((p_payload_bak = p_state->p_payload) && ((elem_count_bak = p_state->elem_count) || 1) && ((((strx_decode(p_state, &((*p_type_result)._Member_image_key), NULL, NULL))&& !memcmp("image", (*p_type_result)._Member_image_key.value, (*p_type_result)._Member_image_key.len)
    2a26:	2300      	movs	r3, #0
    2a28:	461a      	mov	r2, r3
    2a2a:	f8d0 8008 	ldr.w	r8, [r0, #8]
    2a2e:	f003 ffd7 	bl	69e0 <strx_decode>
    2a32:	b188      	cbz	r0, 2a58 <decode_Member+0x44>
    2a34:	e9d4 1200 	ldrd	r1, r2, [r4]
    2a38:	483e      	ldr	r0, [pc, #248]	; (2b34 <decode_Member+0x120>)
    2a3a:	f004 f84f 	bl	6adc <memcmp>
    2a3e:	4606      	mov	r6, r0
    2a40:	b950      	cbnz	r0, 2a58 <decode_Member+0x44>
	&& (intx32_decode(p_state, &((*p_type_result)._Member_image), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_image) || 1))
    2a42:	4603      	mov	r3, r0
    2a44:	4602      	mov	r2, r0
    2a46:	f104 0108 	add.w	r1, r4, #8
    2a4a:	4628      	mov	r0, r5
    2a4c:	f003 ff8e 	bl	696c <intx32_decode>
    2a50:	b110      	cbz	r0, 2a58 <decode_Member+0x44>
    2a52:	7426      	strb	r6, [r4, #16]
	bool result = (((p_payload_bak = p_state->p_payload) && ((elem_count_bak = p_state->elem_count) || 1) && ((((strx_decode(p_state, &((*p_type_result)._Member_image_key), NULL, NULL))&& !memcmp("image", (*p_type_result)._Member_image_key.value, (*p_type_result)._Member_image_key.len)
    2a54:	2001      	movs	r0, #1
    2a56:	e7e4      	b.n	2a22 <decode_Member+0xe>
	|| ((p_state->p_payload = p_payload_bak) && ((p_state->elem_count = elem_count_bak) || 1) && (((strx_decode(p_state, &((*p_type_result)._Member_data_key), NULL, NULL))&& !memcmp("data", (*p_type_result)._Member_data_key.value, (*p_type_result)._Member_data_key.len)
    2a58:	2300      	movs	r3, #0
    2a5a:	4621      	mov	r1, r4
    2a5c:	461a      	mov	r2, r3
    2a5e:	4628      	mov	r0, r5
    2a60:	602f      	str	r7, [r5, #0]
    2a62:	f8c5 8008 	str.w	r8, [r5, #8]
    2a66:	f003 ffbb 	bl	69e0 <strx_decode>
    2a6a:	b180      	cbz	r0, 2a8e <decode_Member+0x7a>
    2a6c:	e9d4 1200 	ldrd	r1, r2, [r4]
    2a70:	4831      	ldr	r0, [pc, #196]	; (2b38 <decode_Member+0x124>)
    2a72:	f004 f833 	bl	6adc <memcmp>
    2a76:	4603      	mov	r3, r0
    2a78:	b948      	cbnz	r0, 2a8e <decode_Member+0x7a>
	&& (strx_decode(p_state, &((*p_type_result)._Member_data), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_data) || 1)))
    2a7a:	4602      	mov	r2, r0
    2a7c:	f104 0108 	add.w	r1, r4, #8
    2a80:	4628      	mov	r0, r5
    2a82:	f003 ffad 	bl	69e0 <strx_decode>
    2a86:	b110      	cbz	r0, 2a8e <decode_Member+0x7a>
    2a88:	2001      	movs	r0, #1
    2a8a:	7420      	strb	r0, [r4, #16]
    2a8c:	e7c9      	b.n	2a22 <decode_Member+0xe>
	|| ((p_state->p_payload = p_payload_bak) && ((p_state->elem_count = elem_count_bak) || 1) && (((strx_decode(p_state, &((*p_type_result)._Member_len_key), NULL, NULL))&& !memcmp("len", (*p_type_result)._Member_len_key.value, (*p_type_result)._Member_len_key.len)
    2a8e:	2300      	movs	r3, #0
    2a90:	4621      	mov	r1, r4
    2a92:	461a      	mov	r2, r3
    2a94:	4628      	mov	r0, r5
    2a96:	602f      	str	r7, [r5, #0]
    2a98:	f8c5 8008 	str.w	r8, [r5, #8]
    2a9c:	f003 ffa0 	bl	69e0 <strx_decode>
    2aa0:	b180      	cbz	r0, 2ac4 <decode_Member+0xb0>
    2aa2:	e9d4 1200 	ldrd	r1, r2, [r4]
    2aa6:	4825      	ldr	r0, [pc, #148]	; (2b3c <decode_Member+0x128>)
    2aa8:	f004 f818 	bl	6adc <memcmp>
    2aac:	4603      	mov	r3, r0
    2aae:	b948      	cbnz	r0, 2ac4 <decode_Member+0xb0>
	&& (intx32_decode(p_state, &((*p_type_result)._Member_len), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_len) || 1)))
    2ab0:	4602      	mov	r2, r0
    2ab2:	f104 0108 	add.w	r1, r4, #8
    2ab6:	4628      	mov	r0, r5
    2ab8:	f003 ff58 	bl	696c <intx32_decode>
    2abc:	b110      	cbz	r0, 2ac4 <decode_Member+0xb0>
    2abe:	2302      	movs	r3, #2
	&& (strx_decode(p_state, &((*p_type_result)._Member_sha), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_sha) || 1))))));
    2ac0:	7423      	strb	r3, [r4, #16]
    2ac2:	e7c7      	b.n	2a54 <decode_Member+0x40>
	|| ((p_state->p_payload = p_payload_bak) && ((p_state->elem_count = elem_count_bak) || 1) && (((strx_decode(p_state, &((*p_type_result)._Member_off_key), NULL, NULL))&& !memcmp("off", (*p_type_result)._Member_off_key.value, (*p_type_result)._Member_off_key.len)
    2ac4:	2300      	movs	r3, #0
    2ac6:	4621      	mov	r1, r4
    2ac8:	461a      	mov	r2, r3
    2aca:	4628      	mov	r0, r5
    2acc:	602f      	str	r7, [r5, #0]
    2ace:	f8c5 8008 	str.w	r8, [r5, #8]
    2ad2:	f003 ff85 	bl	69e0 <strx_decode>
    2ad6:	b178      	cbz	r0, 2af8 <decode_Member+0xe4>
    2ad8:	e9d4 1200 	ldrd	r1, r2, [r4]
    2adc:	4818      	ldr	r0, [pc, #96]	; (2b40 <decode_Member+0x12c>)
    2ade:	f003 fffd 	bl	6adc <memcmp>
    2ae2:	4603      	mov	r3, r0
    2ae4:	b940      	cbnz	r0, 2af8 <decode_Member+0xe4>
	&& (intx32_decode(p_state, &((*p_type_result)._Member_off), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_off) || 1)))
    2ae6:	4602      	mov	r2, r0
    2ae8:	f104 0108 	add.w	r1, r4, #8
    2aec:	4628      	mov	r0, r5
    2aee:	f003 ff3d 	bl	696c <intx32_decode>
    2af2:	b108      	cbz	r0, 2af8 <decode_Member+0xe4>
    2af4:	2303      	movs	r3, #3
    2af6:	e7e3      	b.n	2ac0 <decode_Member+0xac>
	|| ((p_state->p_payload = p_payload_bak) && ((p_state->elem_count = elem_count_bak) || 1) && (((strx_decode(p_state, &((*p_type_result)._Member_sha_key), NULL, NULL))&& !memcmp("sha", (*p_type_result)._Member_sha_key.value, (*p_type_result)._Member_sha_key.len)
    2af8:	2300      	movs	r3, #0
    2afa:	4621      	mov	r1, r4
    2afc:	461a      	mov	r2, r3
    2afe:	4628      	mov	r0, r5
    2b00:	602f      	str	r7, [r5, #0]
    2b02:	f8c5 8008 	str.w	r8, [r5, #8]
    2b06:	f003 ff6b 	bl	69e0 <strx_decode>
    2b0a:	2800      	cmp	r0, #0
    2b0c:	d088      	beq.n	2a20 <decode_Member+0xc>
    2b0e:	e9d4 1200 	ldrd	r1, r2, [r4]
    2b12:	480c      	ldr	r0, [pc, #48]	; (2b44 <decode_Member+0x130>)
    2b14:	f003 ffe2 	bl	6adc <memcmp>
    2b18:	4603      	mov	r3, r0
    2b1a:	2800      	cmp	r0, #0
    2b1c:	d180      	bne.n	2a20 <decode_Member+0xc>
	&& (strx_decode(p_state, &((*p_type_result)._Member_sha), NULL, NULL))) && (((*p_type_result)._Member_choice = _Member_sha) || 1))))));
    2b1e:	4602      	mov	r2, r0
    2b20:	f104 0108 	add.w	r1, r4, #8
    2b24:	4628      	mov	r0, r5
    2b26:	f003 ff5b 	bl	69e0 <strx_decode>
    2b2a:	2800      	cmp	r0, #0
    2b2c:	f43f af78 	beq.w	2a20 <decode_Member+0xc>
    2b30:	2304      	movs	r3, #4
    2b32:	e7c5      	b.n	2ac0 <decode_Member+0xac>
    2b34:	00007db2 	.word	0x00007db2
    2b38:	000080e3 	.word	0x000080e3
    2b3c:	000080e8 	.word	0x000080e8
    2b40:	000080df 	.word	0x000080df
    2b44:	000080ec 	.word	0x000080ec

00002b48 <cbor_decode_Upload>:
	return result;
}


bool cbor_decode_Upload(const uint8_t * p_payload, size_t payload_len, Upload_t * p_result)
{
    2b48:	b570      	push	{r4, r5, r6, lr}
	cbor_decode_state_t state = {
    2b4a:	2501      	movs	r5, #1
{
    2b4c:	b08c      	sub	sp, #48	; 0x30
		.p_payload = p_payload,
		.p_payload_end = p_payload + payload_len,
    2b4e:	4401      	add	r1, r0
	bool result = (((list_start_decode(p_state, &(*(p_temp_elem_count++)), 1, 5))
    2b50:	ae09      	add	r6, sp, #36	; 0x24
    2b52:	2305      	movs	r3, #5
	cbor_decode_state_t state = {
    2b54:	9009      	str	r0, [sp, #36]	; 0x24
    2b56:	910a      	str	r1, [sp, #40]	; 0x28
{
    2b58:	4614      	mov	r4, r2
	bool result = (((list_start_decode(p_state, &(*(p_temp_elem_count++)), 1, 5))
    2b5a:	4630      	mov	r0, r6
    2b5c:	462a      	mov	r2, r5
    2b5e:	a907      	add	r1, sp, #28
	cbor_decode_state_t state = {
    2b60:	950b      	str	r5, [sp, #44]	; 0x2c
	bool result = (((list_start_decode(p_state, &(*(p_temp_elem_count++)), 1, 5))
    2b62:	f003 ff48 	bl	69f6 <list_start_decode>
    2b66:	2300      	movs	r3, #0
	&& ((p_state->elem_count = *(--p_temp_elem_count)) || 1)));
    2b68:	b160      	cbz	r0, 2b84 <cbor_decode_Upload+0x3c>
	&& multi_decode(1, 5, &(*p_type_result)._Upload_members_count, (void*)decode_Member, p_state, &((*p_type_result)._Upload_members), NULL, NULL, sizeof(_Member_t))
    2b6a:	2214      	movs	r2, #20
    2b6c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2b70:	e9cd 3203 	strd	r3, r2, [sp, #12]
    2b74:	2105      	movs	r1, #5
    2b76:	4628      	mov	r0, r5
    2b78:	4b04      	ldr	r3, [pc, #16]	; (2b8c <cbor_decode_Upload+0x44>)
    2b7a:	9600      	str	r6, [sp, #0]
    2b7c:	f104 0264 	add.w	r2, r4, #100	; 0x64
    2b80:	f003 ff57 	bl	6a32 <multi_decode>
		.elem_count = 1
	};

	return decode_Upload(&state, p_result, NULL, NULL);
}
    2b84:	f000 0001 	and.w	r0, r0, #1
    2b88:	b00c      	add	sp, #48	; 0x30
    2b8a:	bd70      	pop	{r4, r5, r6, pc}
    2b8c:	00002a15 	.word	0x00002a15

00002b90 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2b90:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2b94:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2b96:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2b9a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2b9e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2ba0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2ba4:	2902      	cmp	r1, #2
    beq _oops
    2ba6:	d0ff      	beq.n	2ba8 <_oops>

00002ba8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2ba8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2baa:	f003 ff6f 	bl	6a8c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2bae:	bd01      	pop	{r0, pc}

00002bb0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2bb0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	db08      	blt.n	2bc8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bb6:	2201      	movs	r2, #1
    2bb8:	f000 001f 	and.w	r0, r0, #31
    2bbc:	fa02 f000 	lsl.w	r0, r2, r0
    2bc0:	4a02      	ldr	r2, [pc, #8]	; (2bcc <arch_irq_enable+0x1c>)
    2bc2:	095b      	lsrs	r3, r3, #5
    2bc4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2bc8:	4770      	bx	lr
    2bca:	bf00      	nop
    2bcc:	e000e100 	.word	0xe000e100

00002bd0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2bd0:	4b05      	ldr	r3, [pc, #20]	; (2be8 <arch_irq_is_enabled+0x18>)
    2bd2:	0942      	lsrs	r2, r0, #5
    2bd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2bd8:	2301      	movs	r3, #1
    2bda:	f000 001f 	and.w	r0, r0, #31
    2bde:	fa03 f000 	lsl.w	r0, r3, r0
}
    2be2:	4010      	ands	r0, r2
    2be4:	4770      	bx	lr
    2be6:	bf00      	nop
    2be8:	e000e100 	.word	0xe000e100

00002bec <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2bec:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2bee:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    2bf0:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bf4:	bfac      	ite	ge
    2bf6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bfa:	4b06      	ldrlt	r3, [pc, #24]	; (2c14 <z_arm_irq_priority_set+0x28>)
    2bfc:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2c00:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c02:	bfab      	itete	ge
    2c04:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c08:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c0c:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c10:	5419      	strblt	r1, [r3, r0]
}
    2c12:	4770      	bx	lr
    2c14:	e000ed14 	.word	0xe000ed14

00002c18 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    2c18:	4604      	mov	r4, r0
    2c1a:	4608      	mov	r0, r1
    2c1c:	4611      	mov	r1, r2
    2c1e:	461a      	mov	r2, r3
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    2c20:	2300      	movs	r3, #0
    2c22:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2c26:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    2c2a:	4b0a      	ldr	r3, [pc, #40]	; (2c54 <loop+0x2>)
    2c2c:	2520      	movs	r5, #32
    2c2e:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    2c32:	f386 880b 	msr	PSPLIM, r6
    2c36:	f383 8809 	msr	PSP, r3
    2c3a:	b663      	cpsie	if
    2c3c:	f04f 0300 	mov.w	r3, #0
    2c40:	f383 8811 	msr	BASEPRI, r3
    2c44:	f3bf 8f6f 	isb	sy
    2c48:	47a0      	blx	r4
    2c4a:	f385 8811 	msr	BASEPRI, r5
    2c4e:	f3bf 8f6f 	isb	sy

00002c52 <loop>:
    2c52:	e7fe      	b.n	2c52 <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2c54:	20018ea8 	.word	0x20018ea8

00002c58 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2c58:	4901      	ldr	r1, [pc, #4]	; (2c60 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2c5a:	2210      	movs	r2, #16
	str	r2, [r1]
    2c5c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2c5e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2c60:	e000ed10 	.word	0xe000ed10

00002c64 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2c64:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2c66:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2c68:	f380 8811 	msr	BASEPRI, r0
	isb
    2c6c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2c70:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2c74:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2c76:	b662      	cpsie	i
	isb
    2c78:	f3bf 8f6f 	isb	sy

	bx	lr
    2c7c:	4770      	bx	lr
    2c7e:	bf00      	nop

00002c80 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2c80:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2c82:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2c84:	f381 8811 	msr	BASEPRI, r1

	wfe
    2c88:	bf20      	wfe

	msr	BASEPRI, r0
    2c8a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2c8e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2c90:	4770      	bx	lr
    2c92:	bf00      	nop

00002c94 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2c96:	4605      	mov	r5, r0

	if (esf != NULL) {
    2c98:	460c      	mov	r4, r1
    2c9a:	b1c9      	cbz	r1, 2cd0 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2c9c:	688b      	ldr	r3, [r1, #8]
    2c9e:	4810      	ldr	r0, [pc, #64]	; (2ce0 <z_arm_fatal_error+0x4c>)
    2ca0:	9300      	str	r3, [sp, #0]
    2ca2:	e9d1 2300 	ldrd	r2, r3, [r1]
    2ca6:	2145      	movs	r1, #69	; 0x45
    2ca8:	f003 fc71 	bl	658e <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2cac:	6963      	ldr	r3, [r4, #20]
    2cae:	2145      	movs	r1, #69	; 0x45
    2cb0:	9300      	str	r3, [sp, #0]
    2cb2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    2cb6:	480b      	ldr	r0, [pc, #44]	; (2ce4 <z_arm_fatal_error+0x50>)
    2cb8:	f003 fc69 	bl	658e <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2cbc:	2145      	movs	r1, #69	; 0x45
    2cbe:	69e2      	ldr	r2, [r4, #28]
    2cc0:	4809      	ldr	r0, [pc, #36]	; (2ce8 <z_arm_fatal_error+0x54>)
    2cc2:	f003 fc64 	bl	658e <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2cc6:	2145      	movs	r1, #69	; 0x45
    2cc8:	69a2      	ldr	r2, [r4, #24]
    2cca:	4808      	ldr	r0, [pc, #32]	; (2cec <z_arm_fatal_error+0x58>)
    2ccc:	f003 fc5f 	bl	658e <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2cd0:	4621      	mov	r1, r4
    2cd2:	4628      	mov	r0, r5
}
    2cd4:	b003      	add	sp, #12
    2cd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    2cda:	f001 bb8b 	b.w	43f4 <z_fatal_error>
    2cde:	bf00      	nop
    2ce0:	000080f0 	.word	0x000080f0
    2ce4:	00008124 	.word	0x00008124
    2ce8:	00008158 	.word	0x00008158
    2cec:	0000816c 	.word	0x0000816c

00002cf0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2cf0:	bf30      	wfi
    b z_SysNmiOnReset
    2cf2:	f7ff bffd 	b.w	2cf0 <z_SysNmiOnReset>
    2cf6:	bf00      	nop

00002cf8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2cf8:	4a14      	ldr	r2, [pc, #80]	; (2d4c <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2cfa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2cfc:	4b14      	ldr	r3, [pc, #80]	; (2d50 <z_arm_prep_c+0x58>)
    2cfe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2d02:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2d04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d08:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2d0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2d10:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    2d18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2d1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    2d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    2d24:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    2d28:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    2d2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d30:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    2d34:	2300      	movs	r3, #0
    2d36:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2d3a:	f001 fb99 	bl	4470 <z_bss_zero>
	z_data_copy();
    2d3e:	f001 fbef 	bl	4520 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2d42:	f000 fa61 	bl	3208 <z_arm_interrupt_init>
	z_cstart();
    2d46:	f001 fbb5 	bl	44b4 <z_cstart>
    2d4a:	bf00      	nop
    2d4c:	00000000 	.word	0x00000000
    2d50:	e000ed00 	.word	0xe000ed00

00002d54 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2d54:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2d56:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2d5a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2d5e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2d62:	4904      	ldr	r1, [pc, #16]	; (2d74 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2d64:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2d66:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2d68:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2d6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2d6e:	4902      	ldr	r1, [pc, #8]	; (2d78 <_isr_wrapper+0x24>)
	bx r1
    2d70:	4708      	bx	r1
    2d72:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    2d74:	00007400 	.word	0x00007400
	ldr r1, =z_arm_int_exit
    2d78:	00003175 	.word	0x00003175

00002d7c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2d7c:	2000      	movs	r0, #0
    msr CONTROL, r0
    2d7e:	f380 8814 	msr	CONTROL, r0
    isb
    2d82:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    2d86:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2d88:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2d8c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    2d90:	f003 fbfb 	bl	658a <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2d94:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2d96:	490e      	ldr	r1, [pc, #56]	; (2dd0 <__start+0x54>)
    str r0, [r1]
    2d98:	6008      	str	r0, [r1, #0]
    dsb
    2d9a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2d9e:	480d      	ldr	r0, [pc, #52]	; (2dd4 <__start+0x58>)
    msr msp, r0
    2da0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2da4:	f000 fa0a 	bl	31bc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2da8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2daa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2dae:	480a      	ldr	r0, [pc, #40]	; (2dd8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2db4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2db6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2dba:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2dbe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2dc0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2dc2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2dc6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2dca:	f7ff ff95 	bl	2cf8 <z_arm_prep_c>
    2dce:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2dd0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2dd4:	20018ea8 	.word	0x20018ea8
    ldr r0, =z_interrupt_stacks
    2dd8:	20018ea8 	.word	0x20018ea8

00002ddc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2ddc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2de0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2de4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2de6:	4672      	mov	r2, lr
	bl z_arm_fault
    2de8:	f000 f908 	bl	2ffc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2dec:	bd01      	pop	{r0, pc}
    2dee:	bf00      	nop

00002df0 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2df0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2df2:	4c22      	ldr	r4, [pc, #136]	; (2e7c <mem_manage_fault.isra.0+0x8c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2df4:	4606      	mov	r6, r0
    2df6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2df8:	4821      	ldr	r0, [pc, #132]	; (2e80 <mem_manage_fault.isra.0+0x90>)
    2dfa:	2145      	movs	r1, #69	; 0x45
    2dfc:	f003 fbc7 	bl	658e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2e00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2e02:	06d0      	lsls	r0, r2, #27
    2e04:	d503      	bpl.n	2e0e <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2e06:	2145      	movs	r1, #69	; 0x45
    2e08:	481e      	ldr	r0, [pc, #120]	; (2e84 <mem_manage_fault.isra.0+0x94>)
    2e0a:	f003 fbc0 	bl	658e <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2e0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e10:	0719      	lsls	r1, r3, #28
    2e12:	d503      	bpl.n	2e1c <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2e14:	2145      	movs	r1, #69	; 0x45
    2e16:	481c      	ldr	r0, [pc, #112]	; (2e88 <mem_manage_fault.isra.0+0x98>)
    2e18:	f003 fbb9 	bl	658e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2e1c:	4c17      	ldr	r4, [pc, #92]	; (2e7c <mem_manage_fault.isra.0+0x8c>)
    2e1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e20:	079a      	lsls	r2, r3, #30
    2e22:	d510      	bpl.n	2e46 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    2e24:	2145      	movs	r1, #69	; 0x45
    2e26:	4819      	ldr	r0, [pc, #100]	; (2e8c <mem_manage_fault.isra.0+0x9c>)
    2e28:	f003 fbb1 	bl	658e <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2e2c:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2e2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e30:	061b      	lsls	r3, r3, #24
    2e32:	d508      	bpl.n	2e46 <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2e34:	2145      	movs	r1, #69	; 0x45
    2e36:	4816      	ldr	r0, [pc, #88]	; (2e90 <mem_manage_fault.isra.0+0xa0>)
    2e38:	f003 fba9 	bl	658e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2e3c:	b11e      	cbz	r6, 2e46 <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2e3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2e44:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2e46:	4c0d      	ldr	r4, [pc, #52]	; (2e7c <mem_manage_fault.isra.0+0x8c>)
    2e48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2e4a:	07d0      	lsls	r0, r2, #31
    2e4c:	d503      	bpl.n	2e56 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    2e4e:	2145      	movs	r1, #69	; 0x45
    2e50:	4810      	ldr	r0, [pc, #64]	; (2e94 <mem_manage_fault.isra.0+0xa4>)
    2e52:	f003 fb9c 	bl	658e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2e56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e58:	0699      	lsls	r1, r3, #26
    2e5a:	d503      	bpl.n	2e64 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    2e5c:	2145      	movs	r1, #69	; 0x45
    2e5e:	480e      	ldr	r0, [pc, #56]	; (2e98 <mem_manage_fault.isra.0+0xa8>)
    2e60:	f003 fb95 	bl	658e <z_log_minimal_printk>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2e64:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2e66:	4b05      	ldr	r3, [pc, #20]	; (2e7c <mem_manage_fault.isra.0+0x8c>)
    2e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2e6a:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2e6c:	bf58      	it	pl
    2e6e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2e72:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2e76:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2e78:	7028      	strb	r0, [r5, #0]

	return reason;
}
    2e7a:	bd70      	pop	{r4, r5, r6, pc}
    2e7c:	e000ed00 	.word	0xe000ed00
    2e80:	0000819f 	.word	0x0000819f
    2e84:	000081ba 	.word	0x000081ba
    2e88:	000081f2 	.word	0x000081f2
    2e8c:	0000820a 	.word	0x0000820a
    2e90:	00008227 	.word	0x00008227
    2e94:	00008242 	.word	0x00008242
    2e98:	00008266 	.word	0x00008266

00002e9c <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2e9c:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2e9e:	4c23      	ldr	r4, [pc, #140]	; (2f2c <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2ea0:	4606      	mov	r6, r0
    2ea2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2ea4:	4822      	ldr	r0, [pc, #136]	; (2f30 <bus_fault.isra.0+0x94>)
    2ea6:	2145      	movs	r1, #69	; 0x45
    2ea8:	f003 fb71 	bl	658e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2eac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2eae:	04d1      	lsls	r1, r2, #19
    2eb0:	d503      	bpl.n	2eba <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    2eb2:	2145      	movs	r1, #69	; 0x45
    2eb4:	481f      	ldr	r0, [pc, #124]	; (2f34 <bus_fault.isra.0+0x98>)
    2eb6:	f003 fb6a 	bl	658e <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ebc:	051a      	lsls	r2, r3, #20
    2ebe:	d503      	bpl.n	2ec8 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2ec0:	2145      	movs	r1, #69	; 0x45
    2ec2:	481d      	ldr	r0, [pc, #116]	; (2f38 <bus_fault.isra.0+0x9c>)
    2ec4:	f003 fb63 	bl	658e <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2ec8:	4c18      	ldr	r4, [pc, #96]	; (2f2c <bus_fault.isra.0+0x90>)
    2eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ecc:	059b      	lsls	r3, r3, #22
    2ece:	d510      	bpl.n	2ef2 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2ed0:	481a      	ldr	r0, [pc, #104]	; (2f3c <bus_fault.isra.0+0xa0>)
    2ed2:	2145      	movs	r1, #69	; 0x45
    2ed4:	f003 fb5b 	bl	658e <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2ed8:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2edc:	0418      	lsls	r0, r3, #16
    2ede:	d508      	bpl.n	2ef2 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2ee0:	2145      	movs	r1, #69	; 0x45
    2ee2:	4817      	ldr	r0, [pc, #92]	; (2f40 <bus_fault.isra.0+0xa4>)
    2ee4:	f003 fb53 	bl	658e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2ee8:	b11e      	cbz	r6, 2ef2 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2eea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2eec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2ef0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2ef2:	4c0e      	ldr	r4, [pc, #56]	; (2f2c <bus_fault.isra.0+0x90>)
    2ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ef6:	0559      	lsls	r1, r3, #21
    2ef8:	d503      	bpl.n	2f02 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    2efa:	2145      	movs	r1, #69	; 0x45
    2efc:	4811      	ldr	r0, [pc, #68]	; (2f44 <bus_fault.isra.0+0xa8>)
    2efe:	f003 fb46 	bl	658e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2f02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f04:	05da      	lsls	r2, r3, #23
    2f06:	d50b      	bpl.n	2f20 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2f08:	2145      	movs	r1, #69	; 0x45
    2f0a:	480f      	ldr	r0, [pc, #60]	; (2f48 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2f0c:	f003 fb3f 	bl	658e <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    2f10:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2f12:	4a06      	ldr	r2, [pc, #24]	; (2f2c <bus_fault.isra.0+0x90>)
    2f14:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2f16:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2f1a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2f1c:	7028      	strb	r0, [r5, #0]

	return reason;
}
    2f1e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2f20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f22:	049b      	lsls	r3, r3, #18
    2f24:	d5f4      	bpl.n	2f10 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2f26:	2145      	movs	r1, #69	; 0x45
    2f28:	4808      	ldr	r0, [pc, #32]	; (2f4c <bus_fault.isra.0+0xb0>)
    2f2a:	e7ef      	b.n	2f0c <bus_fault.isra.0+0x70>
    2f2c:	e000ed00 	.word	0xe000ed00
    2f30:	0000829a 	.word	0x0000829a
    2f34:	000082b5 	.word	0x000082b5
    2f38:	000081f2 	.word	0x000081f2
    2f3c:	000082cb 	.word	0x000082cb
    2f40:	000082e9 	.word	0x000082e9
    2f44:	00008303 	.word	0x00008303
    2f48:	00008323 	.word	0x00008323
    2f4c:	00008266 	.word	0x00008266

00002f50 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2f50:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2f52:	4c21      	ldr	r4, [pc, #132]	; (2fd8 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2f54:	2145      	movs	r1, #69	; 0x45
    2f56:	4821      	ldr	r0, [pc, #132]	; (2fdc <usage_fault.isra.0+0x8c>)
    2f58:	f003 fb19 	bl	658e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2f5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2f5e:	0195      	lsls	r5, r2, #6
    2f60:	d503      	bpl.n	2f6a <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    2f62:	2145      	movs	r1, #69	; 0x45
    2f64:	481e      	ldr	r0, [pc, #120]	; (2fe0 <usage_fault.isra.0+0x90>)
    2f66:	f003 fb12 	bl	658e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f6c:	01dc      	lsls	r4, r3, #7
    2f6e:	d503      	bpl.n	2f78 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    2f70:	2145      	movs	r1, #69	; 0x45
    2f72:	481c      	ldr	r0, [pc, #112]	; (2fe4 <usage_fault.isra.0+0x94>)
    2f74:	f003 fb0b 	bl	658e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2f78:	4d17      	ldr	r5, [pc, #92]	; (2fd8 <usage_fault.isra.0+0x88>)
    2f7a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2f7c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    2f80:	d004      	beq.n	2f8c <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2f82:	2145      	movs	r1, #69	; 0x45
    2f84:	4818      	ldr	r0, [pc, #96]	; (2fe8 <usage_fault.isra.0+0x98>)
    2f86:	f003 fb02 	bl	658e <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    2f8a:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2f8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f8e:	0318      	lsls	r0, r3, #12
    2f90:	d503      	bpl.n	2f9a <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2f92:	2145      	movs	r1, #69	; 0x45
    2f94:	4815      	ldr	r0, [pc, #84]	; (2fec <usage_fault.isra.0+0x9c>)
    2f96:	f003 fafa 	bl	658e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2f9a:	4d0f      	ldr	r5, [pc, #60]	; (2fd8 <usage_fault.isra.0+0x88>)
    2f9c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2f9e:	0351      	lsls	r1, r2, #13
    2fa0:	d503      	bpl.n	2faa <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2fa2:	2145      	movs	r1, #69	; 0x45
    2fa4:	4812      	ldr	r0, [pc, #72]	; (2ff0 <usage_fault.isra.0+0xa0>)
    2fa6:	f003 faf2 	bl	658e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2faa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fac:	039a      	lsls	r2, r3, #14
    2fae:	d503      	bpl.n	2fb8 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2fb0:	2145      	movs	r1, #69	; 0x45
    2fb2:	4810      	ldr	r0, [pc, #64]	; (2ff4 <usage_fault.isra.0+0xa4>)
    2fb4:	f003 faeb 	bl	658e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2fb8:	4d07      	ldr	r5, [pc, #28]	; (2fd8 <usage_fault.isra.0+0x88>)
    2fba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fbc:	03db      	lsls	r3, r3, #15
    2fbe:	d503      	bpl.n	2fc8 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2fc0:	2145      	movs	r1, #69	; 0x45
    2fc2:	480d      	ldr	r0, [pc, #52]	; (2ff8 <usage_fault.isra.0+0xa8>)
    2fc4:	f003 fae3 	bl	658e <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2fc8:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    2fca:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2fcc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2fd0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2fd4:	62ab      	str	r3, [r5, #40]	; 0x28
}
    2fd6:	bd38      	pop	{r3, r4, r5, pc}
    2fd8:	e000ed00 	.word	0xe000ed00
    2fdc:	00008340 	.word	0x00008340
    2fe0:	0000835d 	.word	0x0000835d
    2fe4:	00008375 	.word	0x00008375
    2fe8:	00008394 	.word	0x00008394
    2fec:	000083c3 	.word	0x000083c3
    2ff0:	000083e6 	.word	0x000083e6
    2ff4:	00008410 	.word	0x00008410
    2ff8:	0000842f 	.word	0x0000842f

00002ffc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3000:	4b4a      	ldr	r3, [pc, #296]	; (312c <z_arm_fault+0x130>)
    3002:	2500      	movs	r5, #0
    3004:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    3008:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    300a:	f3c9 0808 	ubfx	r8, r9, #0, #9
    300e:	f385 8811 	msr	BASEPRI, r5
    3012:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3016:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    301a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    301e:	d107      	bne.n	3030 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3020:	f002 030c 	and.w	r3, r2, #12
    3024:	2b08      	cmp	r3, #8
    3026:	d105      	bne.n	3034 <z_arm_fault+0x38>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3028:	2145      	movs	r1, #69	; 0x45
    302a:	4841      	ldr	r0, [pc, #260]	; (3130 <z_arm_fault+0x134>)
    302c:	f003 faaf 	bl	658e <z_log_minimal_printk>
		return NULL;
    3030:	462f      	mov	r7, r5
    3032:	e004      	b.n	303e <z_arm_fault+0x42>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3034:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3036:	bf4e      	itee	mi
    3038:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    303a:	4607      	movpl	r7, r0
			*nested_exc = true;
    303c:	2501      	movpl	r5, #1
	*recoverable = false;
    303e:	2200      	movs	r2, #0
    3040:	f1a8 0603 	sub.w	r6, r8, #3
    3044:	4614      	mov	r4, r2
    3046:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    304a:	2e09      	cmp	r6, #9
    304c:	d85b      	bhi.n	3106 <z_arm_fault+0x10a>
    304e:	e8df f006 	tbb	[pc, r6]
    3052:	4f05      	.short	0x4f05
    3054:	5a5a3353 	.word	0x5a5a3353
    3058:	575a5a5a 	.word	0x575a5a5a
	PR_FAULT_INFO("***** HARD FAULT *****");
    305c:	2145      	movs	r1, #69	; 0x45
    305e:	4835      	ldr	r0, [pc, #212]	; (3134 <z_arm_fault+0x138>)
    3060:	f003 fa95 	bl	658e <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3064:	4b31      	ldr	r3, [pc, #196]	; (312c <z_arm_fault+0x130>)
	*recoverable = false;
    3066:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    306a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    306c:	f014 0402 	ands.w	r4, r4, #2
    3070:	d005      	beq.n	307e <z_arm_fault+0x82>
		PR_EXC("  Bus fault on vector table read");
    3072:	2145      	movs	r1, #69	; 0x45
    3074:	4830      	ldr	r0, [pc, #192]	; (3138 <z_arm_fault+0x13c>)
	PR_FAULT_INFO(
    3076:	f003 fa8a 	bl	658e <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    307a:	2400      	movs	r4, #0
}
    307c:	e01f      	b.n	30be <z_arm_fault+0xc2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3080:	005b      	lsls	r3, r3, #1
    3082:	d51c      	bpl.n	30be <z_arm_fault+0xc2>
		PR_EXC("  Fault escalation (see below)");
    3084:	2145      	movs	r1, #69	; 0x45
    3086:	482d      	ldr	r0, [pc, #180]	; (313c <z_arm_fault+0x140>)
    3088:	f003 fa81 	bl	658e <z_log_minimal_printk>
		if (SCB_MMFSR != 0) {
    308c:	4b2c      	ldr	r3, [pc, #176]	; (3140 <z_arm_fault+0x144>)
    308e:	781b      	ldrb	r3, [r3, #0]
    3090:	b12b      	cbz	r3, 309e <z_arm_fault+0xa2>
			reason = mem_manage_fault(esf, 1, recoverable);
    3092:	2001      	movs	r0, #1
    3094:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    3098:	f7ff feaa 	bl	2df0 <mem_manage_fault.isra.0>
    309c:	e00e      	b.n	30bc <z_arm_fault+0xc0>
		} else if (SCB_BFSR != 0) {
    309e:	4b29      	ldr	r3, [pc, #164]	; (3144 <z_arm_fault+0x148>)
    30a0:	781b      	ldrb	r3, [r3, #0]
    30a2:	b12b      	cbz	r3, 30b0 <z_arm_fault+0xb4>
			reason = bus_fault(esf, 1, recoverable);
    30a4:	2001      	movs	r0, #1
    30a6:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    30aa:	f7ff fef7 	bl	2e9c <bus_fault.isra.0>
    30ae:	e005      	b.n	30bc <z_arm_fault+0xc0>
		} else if (SCB_UFSR != 0) {
    30b0:	4b25      	ldr	r3, [pc, #148]	; (3148 <z_arm_fault+0x14c>)
    30b2:	881b      	ldrh	r3, [r3, #0]
    30b4:	b29b      	uxth	r3, r3
    30b6:	b113      	cbz	r3, 30be <z_arm_fault+0xc2>
			reason = usage_fault(esf);
    30b8:	f7ff ff4a 	bl	2f50 <usage_fault.isra.0>
    30bc:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    30be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    30c2:	b993      	cbnz	r3, 30ea <z_arm_fault+0xee>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    30c4:	2220      	movs	r2, #32
    30c6:	4639      	mov	r1, r7
    30c8:	a802      	add	r0, sp, #8
    30ca:	f003 fd17 	bl	6afc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    30ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    30d0:	b335      	cbz	r5, 3120 <z_arm_fault+0x124>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    30d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    30d6:	b922      	cbnz	r2, 30e2 <z_arm_fault+0xe6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    30d8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    30dc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    30e0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    30e2:	4620      	mov	r0, r4
    30e4:	a902      	add	r1, sp, #8
    30e6:	f7ff fdd5 	bl	2c94 <z_arm_fatal_error>
}
    30ea:	b00b      	add	sp, #44	; 0x2c
    30ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    30f0:	2000      	movs	r0, #0
    30f2:	f10d 0107 	add.w	r1, sp, #7
    30f6:	e7cf      	b.n	3098 <z_arm_fault+0x9c>
		reason = bus_fault(esf, 0, recoverable);
    30f8:	2000      	movs	r0, #0
    30fa:	f10d 0107 	add.w	r1, sp, #7
    30fe:	e7d4      	b.n	30aa <z_arm_fault+0xae>
	PR_FAULT_INFO(
    3100:	2145      	movs	r1, #69	; 0x45
    3102:	4812      	ldr	r0, [pc, #72]	; (314c <z_arm_fault+0x150>)
    3104:	e7b7      	b.n	3076 <z_arm_fault+0x7a>
	PR_FAULT_INFO("***** %s %d) *****",
    3106:	4912      	ldr	r1, [pc, #72]	; (3150 <z_arm_fault+0x154>)
    3108:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    310c:	4a11      	ldr	r2, [pc, #68]	; (3154 <z_arm_fault+0x158>)
    310e:	4812      	ldr	r0, [pc, #72]	; (3158 <z_arm_fault+0x15c>)
    3110:	bf08      	it	eq
    3112:	460a      	moveq	r2, r1
    3114:	f1a8 0310 	sub.w	r3, r8, #16
    3118:	2145      	movs	r1, #69	; 0x45
    311a:	f003 fa38 	bl	658e <z_log_minimal_printk>
    311e:	e7ac      	b.n	307a <z_arm_fault+0x7e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3120:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3124:	f023 0301 	bic.w	r3, r3, #1
    3128:	e7da      	b.n	30e0 <z_arm_fault+0xe4>
    312a:	bf00      	nop
    312c:	e000ed00 	.word	0xe000ed00
    3130:	0000848d 	.word	0x0000848d
    3134:	000084bd 	.word	0x000084bd
    3138:	000084d9 	.word	0x000084d9
    313c:	000084ff 	.word	0x000084ff
    3140:	e000ed28 	.word	0xe000ed28
    3144:	e000ed29 	.word	0xe000ed29
    3148:	e000ed2a 	.word	0xe000ed2a
    314c:	00008523 	.word	0x00008523
    3150:	0000845f 	.word	0x0000845f
    3154:	00008474 	.word	0x00008474
    3158:	0000854c 	.word	0x0000854c

0000315c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    315c:	4b04      	ldr	r3, [pc, #16]	; (3170 <z_arm_fault_init+0x14>)
    315e:	695a      	ldr	r2, [r3, #20]
    3160:	f042 0210 	orr.w	r2, r2, #16
    3164:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    3166:	695a      	ldr	r2, [r3, #20]
    3168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    316c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    316e:	4770      	bx	lr
    3170:	e000ed00 	.word	0xe000ed00

00003174 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3174:	4770      	bx	lr
    3176:	bf00      	nop

00003178 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    3178:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    317c:	4905      	ldr	r1, [pc, #20]	; (3194 <sys_arch_reboot+0x1c>)
    317e:	4b06      	ldr	r3, [pc, #24]	; (3198 <sys_arch_reboot+0x20>)
    3180:	68ca      	ldr	r2, [r1, #12]
    3182:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3186:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3188:	60cb      	str	r3, [r1, #12]
    318a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    318e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3190:	e7fd      	b.n	318e <sys_arch_reboot+0x16>
    3192:	bf00      	nop
    3194:	e000ed00 	.word	0xe000ed00
    3198:	05fa0004 	.word	0x05fa0004

0000319c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    319c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    319e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    31a0:	4a05      	ldr	r2, [pc, #20]	; (31b8 <z_arm_clear_arm_mpu_config+0x1c>)
    31a2:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    31a4:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    31a8:	428b      	cmp	r3, r1
    31aa:	d100      	bne.n	31ae <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    31ac:	4770      	bx	lr
  mpu->RNR = rnr;
    31ae:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    31b0:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    31b2:	3301      	adds	r3, #1
    31b4:	e7f8      	b.n	31a8 <z_arm_clear_arm_mpu_config+0xc>
    31b6:	bf00      	nop
    31b8:	e000ed90 	.word	0xe000ed90

000031bc <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    31bc:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    31be:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    31c0:	2400      	movs	r4, #0
    31c2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    31c6:	f7ff ffe9 	bl	319c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    31ca:	4a0e      	ldr	r2, [pc, #56]	; (3204 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    31cc:	4623      	mov	r3, r4
    31ce:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    31d0:	f04f 34ff 	mov.w	r4, #4294967295
    31d4:	f103 0020 	add.w	r0, r3, #32
    31d8:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    31da:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    31dc:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    31e0:	d1f8      	bne.n	31d4 <z_arm_init_arch_hw_at_boot+0x18>
    31e2:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    31e4:	f04f 30ff 	mov.w	r0, #4294967295
    31e8:	f103 0260 	add.w	r2, r3, #96	; 0x60
    31ec:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    31ee:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    31f0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    31f4:	d1f8      	bne.n	31e8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    31f6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    31f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31fc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3200:	bd10      	pop	{r4, pc}
    3202:	bf00      	nop
    3204:	e000e100 	.word	0xe000e100

00003208 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3208:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    320a:	2120      	movs	r1, #32
    320c:	4803      	ldr	r0, [pc, #12]	; (321c <z_arm_interrupt_init+0x14>)
    320e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3210:	3301      	adds	r3, #1
    3212:	2b41      	cmp	r3, #65	; 0x41
    3214:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3218:	d1f9      	bne.n	320e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    321a:	4770      	bx	lr
    321c:	e000e100 	.word	0xe000e100

00003220 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3220:	2101      	movs	r1, #1
    3222:	4b02      	ldr	r3, [pc, #8]	; (322c <z_arm_configure_static_mpu_regions+0xc>)
    3224:	4a02      	ldr	r2, [pc, #8]	; (3230 <z_arm_configure_static_mpu_regions+0x10>)
    3226:	4803      	ldr	r0, [pc, #12]	; (3234 <z_arm_configure_static_mpu_regions+0x14>)
    3228:	f000 b90c 	b.w	3444 <arm_core_mpu_configure_static_mpu_regions>
    322c:	20040000 	.word	0x20040000
    3230:	20014500 	.word	0x20014500
    3234:	000077b4 	.word	0x000077b4

00003238 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    3238:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    323a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    323c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    323e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    3242:	f004 031f 	and.w	r3, r4, #31
    3246:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    3248:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    324a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    324c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    3250:	4904      	ldr	r1, [pc, #16]	; (3264 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    3252:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    3256:	f043 0301 	orr.w	r3, r3, #1
    325a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    325c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    325e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    3260:	bd10      	pop	{r4, pc}
    3262:	bf00      	nop
    3264:	e000ed90 	.word	0xe000ed90

00003268 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    3268:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    326a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    326c:	680c      	ldr	r4, [r1, #0]
{
    326e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    3270:	890a      	ldrh	r2, [r1, #8]
    3272:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    3274:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3276:	3b01      	subs	r3, #1
    3278:	f024 041f 	bic.w	r4, r4, #31
    327c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    327e:	f002 021f 	and.w	r2, r2, #31
    3282:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3286:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    328a:	280f      	cmp	r0, #15
    328c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    328e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    3292:	9303      	str	r3, [sp, #12]
    3294:	d909      	bls.n	32aa <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3296:	4602      	mov	r2, r0
    3298:	2145      	movs	r1, #69	; 0x45
    329a:	4806      	ldr	r0, [pc, #24]	; (32b4 <mpu_configure_region+0x4c>)
    329c:	f003 f977 	bl	658e <z_log_minimal_printk>
    32a0:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    32a4:	4620      	mov	r0, r4
    32a6:	b005      	add	sp, #20
    32a8:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    32aa:	4669      	mov	r1, sp
    32ac:	f7ff ffc4 	bl	3238 <region_init>
	return region_allocate_and_init(index,
    32b0:	e7f8      	b.n	32a4 <mpu_configure_region+0x3c>
    32b2:	bf00      	nop
    32b4:	00008568 	.word	0x00008568

000032b8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    32b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32bc:	4689      	mov	r9, r1
    32be:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    32c0:	4606      	mov	r6, r0
    32c2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    32c6:	4d52      	ldr	r5, [pc, #328]	; (3410 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    32c8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    32ca:	45c8      	cmp	r8, r9
    32cc:	da23      	bge.n	3316 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    32ce:	6877      	ldr	r7, [r6, #4]
    32d0:	2f00      	cmp	r7, #0
    32d2:	d042      	beq.n	335a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    32d4:	2f1f      	cmp	r7, #31
    32d6:	d917      	bls.n	3308 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    32d8:	06fb      	lsls	r3, r7, #27
    32da:	d115      	bne.n	3308 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    32dc:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    32e0:	f01a 0f1f 	tst.w	sl, #31
    32e4:	d110      	bne.n	3308 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    32e6:	4650      	mov	r0, sl
    32e8:	f003 fbdb 	bl	6aa2 <arm_cmse_mpu_region_get>
    32ec:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    32ee:	eb07 000a 	add.w	r0, r7, sl
    32f2:	3801      	subs	r0, #1
    32f4:	f003 fbd5 	bl	6aa2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    32f8:	4583      	cmp	fp, r0
    32fa:	d010      	beq.n	331e <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    32fc:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    3300:	465a      	mov	r2, fp
    3302:	2145      	movs	r1, #69	; 0x45
    3304:	4843      	ldr	r0, [pc, #268]	; (3414 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    3306:	e002      	b.n	330e <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3308:	4642      	mov	r2, r8
    330a:	2145      	movs	r1, #69	; 0x45
    330c:	4842      	ldr	r0, [pc, #264]	; (3418 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    330e:	f003 f93e 	bl	658e <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    3312:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    3316:	4620      	mov	r0, r4
    3318:	b005      	add	sp, #20
    331a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    331e:	f11b 0f16 	cmn.w	fp, #22
    3322:	d0ed      	beq.n	3300 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    3324:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    3326:	455b      	cmp	r3, fp
    3328:	dbea      	blt.n	3300 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    332a:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    332e:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    3330:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3334:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    3336:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    333a:	e9d6 3200 	ldrd	r3, r2, [r6]
    333e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    3340:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3342:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    3346:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    334a:	d11c      	bne.n	3386 <mpu_configure_regions_and_partition.constprop.0+0xce>
    334c:	4557      	cmp	r7, sl
    334e:	d108      	bne.n	3362 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    3350:	4631      	mov	r1, r6
    3352:	fa5f f08b 	uxtb.w	r0, fp
    3356:	f7ff ff87 	bl	3268 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    335a:	f108 0801 	add.w	r8, r8, #1
    335e:	360c      	adds	r6, #12
    3360:	e7b3      	b.n	32ca <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    3362:	4631      	mov	r1, r6
	MPU->RNR = index;
    3364:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3368:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    336a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    336e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    3372:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    3374:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    3376:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    3378:	f7ff ff76 	bl	3268 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    337c:	f110 0f16 	cmn.w	r0, #22
    3380:	d0c7      	beq.n	3312 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    3382:	1c44      	adds	r4, r0, #1
    3384:	e7e9      	b.n	335a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    3386:	3b01      	subs	r3, #1
    3388:	4557      	cmp	r7, sl
    338a:	b2e0      	uxtb	r0, r4
    338c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    3390:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    3394:	d106      	bne.n	33a4 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    3396:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    3398:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    339a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    339e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    33a0:	612b      	str	r3, [r5, #16]
			reg_index =
    33a2:	e7e9      	b.n	3378 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    33a4:	6929      	ldr	r1, [r5, #16]
    33a6:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    33aa:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    33ac:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    33ae:	4631      	mov	r1, r6
    33b0:	f7ff ff5a 	bl	3268 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    33b4:	f110 0f16 	cmn.w	r0, #22
    33b8:	d0ab      	beq.n	3312 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    33ba:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    33be:	68ea      	ldr	r2, [r5, #12]
    33c0:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    33c4:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    33c6:	f362 0304 	bfi	r3, r2, #0, #5
    33ca:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    33ce:	692b      	ldr	r3, [r5, #16]
    33d0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    33d4:	085b      	lsrs	r3, r3, #1
    33d6:	f363 1247 	bfi	r2, r3, #5, #3
    33da:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    33de:	e9d6 3200 	ldrd	r3, r2, [r6]
    33e2:	4413      	add	r3, r2
    33e4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    33e6:	f023 031f 	bic.w	r3, r3, #31
    33ea:	443b      	add	r3, r7
			reg_index++;
    33ec:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    33ee:	eba3 0a0a 	sub.w	sl, r3, sl
    33f2:	b2e0      	uxtb	r0, r4
    33f4:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    33f8:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    33fa:	9303      	str	r3, [sp, #12]
    33fc:	d903      	bls.n	3406 <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    33fe:	4602      	mov	r2, r0
    3400:	2145      	movs	r1, #69	; 0x45
    3402:	4806      	ldr	r0, [pc, #24]	; (341c <mpu_configure_regions_and_partition.constprop.0+0x164>)
    3404:	e783      	b.n	330e <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    3406:	4669      	mov	r1, sp
    3408:	f7ff ff16 	bl	3238 <region_init>
    340c:	e7b9      	b.n	3382 <mpu_configure_regions_and_partition.constprop.0+0xca>
    340e:	bf00      	nop
    3410:	e000ed90 	.word	0xe000ed90
    3414:	000085bb 	.word	0x000085bb
    3418:	00008593 	.word	0x00008593
    341c:	00008568 	.word	0x00008568

00003420 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3420:	2205      	movs	r2, #5
    3422:	4b03      	ldr	r3, [pc, #12]	; (3430 <arm_core_mpu_enable+0x10>)
    3424:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    3426:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    342a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    342e:	4770      	bx	lr
    3430:	e000ed90 	.word	0xe000ed90

00003434 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3434:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3438:	2200      	movs	r2, #0
    343a:	4b01      	ldr	r3, [pc, #4]	; (3440 <arm_core_mpu_disable+0xc>)
    343c:	605a      	str	r2, [r3, #4]
}
    343e:	4770      	bx	lr
    3440:	e000ed90 	.word	0xe000ed90

00003444 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3444:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3446:	4c03      	ldr	r4, [pc, #12]	; (3454 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    3448:	7822      	ldrb	r2, [r4, #0]
    344a:	f7ff ff35 	bl	32b8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    344e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3450:	bd10      	pop	{r4, pc}
    3452:	bf00      	nop
    3454:	20016661 	.word	0x20016661

00003458 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3458:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    345a:	4c0e      	ldr	r4, [pc, #56]	; (3494 <z_arm_mpu_init+0x3c>)
    345c:	6825      	ldr	r5, [r4, #0]
    345e:	2d10      	cmp	r5, #16
    3460:	d814      	bhi.n	348c <z_arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3462:	f7ff ffe7 	bl	3434 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3466:	2000      	movs	r0, #0
	MPU->MAIR0 =
    3468:	4b0b      	ldr	r3, [pc, #44]	; (3498 <z_arm_mpu_init+0x40>)
    346a:	4a0c      	ldr	r2, [pc, #48]	; (349c <z_arm_mpu_init+0x44>)
    346c:	631a      	str	r2, [r3, #48]	; 0x30
    346e:	4285      	cmp	r5, r0
    3470:	d105      	bne.n	347e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3472:	4b0b      	ldr	r3, [pc, #44]	; (34a0 <z_arm_mpu_init+0x48>)
    3474:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    3476:	f7ff ffd3 	bl	3420 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    347a:	2000      	movs	r0, #0
}
    347c:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    347e:	6861      	ldr	r1, [r4, #4]
    3480:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    3484:	f7ff fed8 	bl	3238 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3488:	3001      	adds	r0, #1
    348a:	e7f0      	b.n	346e <z_arm_mpu_init+0x16>
		return -1;
    348c:	f04f 30ff 	mov.w	r0, #4294967295
    3490:	e7f4      	b.n	347c <z_arm_mpu_init+0x24>
    3492:	bf00      	nop
    3494:	000077c0 	.word	0x000077c0
    3498:	e000ed90 	.word	0xe000ed90
    349c:	0044ffaa 	.word	0x0044ffaa
    34a0:	20016661 	.word	0x20016661

000034a4 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    34a4:	4a06      	ldr	r2, [pc, #24]	; (34c0 <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    34a6:	f000 001f 	and.w	r0, r0, #31
    34aa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    34ae:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    34b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    34b6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    34ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    34be:	4770      	bx	lr
    34c0:	50842500 	.word	0x50842500

000034c4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    34c4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    34c6:	4b09      	ldr	r3, [pc, #36]	; (34ec <gpio_nrfx_init+0x28>)
    34c8:	781a      	ldrb	r2, [r3, #0]
    34ca:	b96a      	cbnz	r2, 34e8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    34cc:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    34ce:	200d      	movs	r0, #13
		gpio_initialized = true;
    34d0:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    34d2:	2105      	movs	r1, #5
    34d4:	f7ff fb8a 	bl	2bec <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    34d8:	200d      	movs	r0, #13
    34da:	f7ff fb69 	bl	2bb0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    34de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    34e2:	4b03      	ldr	r3, [pc, #12]	; (34f0 <gpio_nrfx_init+0x2c>)
    34e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    34e8:	2000      	movs	r0, #0
    34ea:	bd08      	pop	{r3, pc}
    34ec:	20016662 	.word	0x20016662
    34f0:	5000d000 	.word	0x5000d000

000034f4 <gpio_nrfx_pin_interrupt_configure>:
{
    34f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    34f6:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    34f8:	6841      	ldr	r1, [r0, #4]
    34fa:	f006 051f 	and.w	r5, r6, #31
    34fe:	7a09      	ldrb	r1, [r1, #8]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    3500:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    3504:	6907      	ldr	r7, [r0, #16]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    3506:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    350a:	d10a      	bne.n	3522 <gpio_nrfx_pin_interrupt_configure+0x2e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    350c:	485c      	ldr	r0, [pc, #368]	; (3680 <gpio_nrfx_pin_interrupt_configure+0x18c>)
    *p_pin = pin_number & 0x1F;
    350e:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3512:	3180      	adds	r1, #128	; 0x80
    3514:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3518:	07c8      	lsls	r0, r1, #31
    351a:	d507      	bpl.n	352c <gpio_nrfx_pin_interrupt_configure+0x38>
		return -ENOTSUP;
    351c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3520:	e093      	b.n	364a <gpio_nrfx_pin_interrupt_configure+0x156>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3522:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3526:	68f9      	ldr	r1, [r7, #12]
    3528:	f000 8091 	beq.w	364e <gpio_nrfx_pin_interrupt_configure+0x15a>
    352c:	2101      	movs	r1, #1
    352e:	68f8      	ldr	r0, [r7, #12]
    3530:	40b1      	lsls	r1, r6
    3532:	4301      	orrs	r1, r0
    3534:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    3536:	2101      	movs	r1, #1
    3538:	6978      	ldr	r0, [r7, #20]
    353a:	40b1      	lsls	r1, r6
    353c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3540:	bf0c      	ite	eq
    3542:	4308      	orreq	r0, r1
    3544:	4388      	bicne	r0, r1
    3546:	6178      	str	r0, [r7, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3548:	2000      	movs	r0, #0
    354a:	69ba      	ldr	r2, [r7, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    354c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3550:	bf0c      	ite	eq
    3552:	430a      	orreq	r2, r1
    3554:	438a      	bicne	r2, r1
    3556:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3558:	693a      	ldr	r2, [r7, #16]
    355a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    355e:	bf0c      	ite	eq
    3560:	4311      	orreq	r1, r2
    3562:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    3566:	4a47      	ldr	r2, [pc, #284]	; (3684 <gpio_nrfx_pin_interrupt_configure+0x190>)
    3568:	6139      	str	r1, [r7, #16]
    356a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    356e:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3570:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3574:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    3578:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    357c:	428d      	cmp	r5, r1
    357e:	d16b      	bne.n	3658 <gpio_nrfx_pin_interrupt_configure+0x164>
		    && (intenset & BIT(i))) {
    3580:	fa23 f100 	lsr.w	r1, r3, r0
    3584:	07c9      	lsls	r1, r1, #31
    3586:	d567      	bpl.n	3658 <gpio_nrfx_pin_interrupt_configure+0x164>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3588:	0083      	lsls	r3, r0, #2
    358a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    358e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3592:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    3596:	f021 0101 	bic.w	r1, r1, #1
    359a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    359e:	2301      	movs	r3, #1
    35a0:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    35a2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    35a6:	b2c0      	uxtb	r0, r0
    35a8:	f000 fe44 	bl	4234 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    35ac:	4628      	mov	r0, r5
    35ae:	2100      	movs	r1, #0
    35b0:	f7ff ff78 	bl	34a4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    35b4:	68f8      	ldr	r0, [r7, #12]
    35b6:	40f0      	lsrs	r0, r6
    35b8:	f010 0001 	ands.w	r0, r0, #1
    35bc:	d045      	beq.n	364a <gpio_nrfx_pin_interrupt_configure+0x156>
		if (data->trig_edge & BIT(pin)) {
    35be:	6978      	ldr	r0, [r7, #20]
    35c0:	40f0      	lsrs	r0, r6
    35c2:	f010 0401 	ands.w	r4, r0, #1
    35c6:	d04e      	beq.n	3666 <gpio_nrfx_pin_interrupt_configure+0x172>
				if (data->double_edge & BIT(pin)) {
    35c8:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    35ca:	f10d 0007 	add.w	r0, sp, #7
				if (data->double_edge & BIT(pin)) {
    35ce:	40f3      	lsrs	r3, r6
    35d0:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    35d2:	bf57      	itett	pl
    35d4:	6939      	ldrpl	r1, [r7, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    35d6:	2603      	movmi	r6, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    35d8:	fa21 f606 	lsrpl.w	r6, r1, r6
    35dc:	f006 0601 	andpl.w	r6, r6, #1
    35e0:	bf5c      	itt	pl
    35e2:	f1c6 0602 	rsbpl	r6, r6, #2
    35e6:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    35e8:	f000 fe46 	bl	4278 <nrfx_gpiote_channel_alloc>
    35ec:	4b26      	ldr	r3, [pc, #152]	; (3688 <gpio_nrfx_pin_interrupt_configure+0x194>)
    35ee:	4298      	cmp	r0, r3
    35f0:	d136      	bne.n	3660 <gpio_nrfx_pin_interrupt_configure+0x16c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35f2:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    35f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    35f8:	022d      	lsls	r5, r5, #8
    35fa:	008b      	lsls	r3, r1, #2
    35fc:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3600:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3604:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3608:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    360c:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    3610:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    3614:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3618:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    361c:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    361e:	008a      	lsls	r2, r1, #2
    3620:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    3624:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3628:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    362c:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3630:	6010      	str	r0, [r2, #0]
    3632:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3634:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3638:	f042 0201 	orr.w	r2, r2, #1
    363c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    3640:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    3642:	4a10      	ldr	r2, [pc, #64]	; (3684 <gpio_nrfx_pin_interrupt_configure+0x190>)
    3644:	408b      	lsls	r3, r1
    3646:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    364a:	b003      	add	sp, #12
    364c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    364e:	2001      	movs	r0, #1
    3650:	40b0      	lsls	r0, r6
    3652:	ea21 0100 	bic.w	r1, r1, r0
    3656:	e76d      	b.n	3534 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3658:	3001      	adds	r0, #1
    365a:	2808      	cmp	r0, #8
    365c:	d188      	bne.n	3570 <gpio_nrfx_pin_interrupt_configure+0x7c>
    365e:	e7a5      	b.n	35ac <gpio_nrfx_pin_interrupt_configure+0xb8>
		return -ENODEV;
    3660:	f06f 0012 	mvn.w	r0, #18
    3664:	e7f1      	b.n	364a <gpio_nrfx_pin_interrupt_configure+0x156>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3666:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3668:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    366a:	40f1      	lsrs	r1, r6
    366c:	f001 0101 	and.w	r1, r1, #1
    3670:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3674:	b2c9      	uxtb	r1, r1
    3676:	f7ff ff15 	bl	34a4 <nrf_gpio_cfg_sense_set>
	int res = 0;
    367a:	4620      	mov	r0, r4
    367c:	e7e5      	b.n	364a <gpio_nrfx_pin_interrupt_configure+0x156>
    367e:	bf00      	nop
    3680:	50842500 	.word	0x50842500
    3684:	5000d000 	.word	0x5000d000
    3688:	0bad0000 	.word	0x0bad0000

0000368c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    368c:	4b28      	ldr	r3, [pc, #160]	; (3730 <gpio_nrfx_config+0xa4>)
{
    368e:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3690:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3692:	4828      	ldr	r0, [pc, #160]	; (3734 <gpio_nrfx_config+0xa8>)
    3694:	4013      	ands	r3, r2
    3696:	4283      	cmp	r3, r0
    3698:	d03b      	beq.n	3712 <gpio_nrfx_config+0x86>
    369a:	d80d      	bhi.n	36b8 <gpio_nrfx_config+0x2c>
    369c:	2b06      	cmp	r3, #6
    369e:	d015      	beq.n	36cc <gpio_nrfx_config+0x40>
    36a0:	d805      	bhi.n	36ae <gpio_nrfx_config+0x22>
    36a2:	b19b      	cbz	r3, 36cc <gpio_nrfx_config+0x40>
    36a4:	2b02      	cmp	r3, #2
    36a6:	d036      	beq.n	3716 <gpio_nrfx_config+0x8a>
    36a8:	f06f 0015 	mvn.w	r0, #21
    36ac:	e030      	b.n	3710 <gpio_nrfx_config+0x84>
    36ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    36b2:	d1f9      	bne.n	36a8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    36b4:	2301      	movs	r3, #1
    36b6:	e009      	b.n	36cc <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    36b8:	481f      	ldr	r0, [pc, #124]	; (3738 <gpio_nrfx_config+0xac>)
    36ba:	4283      	cmp	r3, r0
    36bc:	d02d      	beq.n	371a <gpio_nrfx_config+0x8e>
    36be:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    36c2:	d02c      	beq.n	371e <gpio_nrfx_config+0x92>
    36c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    36c8:	d1ee      	bne.n	36a8 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    36ca:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    36cc:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    36ce:	bf4c      	ite	mi
    36d0:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
    36d2:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    36d6:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    36da:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    36de:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    36e2:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    36e6:	d006      	beq.n	36f6 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    36e8:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    36ec:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    36ee:	d018      	beq.n	3722 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
    36f0:	2201      	movs	r2, #1
    36f2:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    36f4:	60b2      	str	r2, [r6, #8]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    36f6:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
    36fa:	2000      	movs	r0, #0
    36fc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
    3700:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = cnf;
    3704:	4a0d      	ldr	r2, [pc, #52]	; (373c <gpio_nrfx_config+0xb0>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3706:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    370a:	3180      	adds	r1, #128	; 0x80
    370c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3710:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    3712:	2307      	movs	r3, #7
    3714:	e7da      	b.n	36cc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    3716:	2304      	movs	r3, #4
    3718:	e7d8      	b.n	36cc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    371a:	2305      	movs	r3, #5
    371c:	e7d6      	b.n	36cc <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    371e:	2303      	movs	r3, #3
    3720:	e7d4      	b.n	36cc <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    3722:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    3724:	bf42      	ittt	mi
    3726:	2201      	movmi	r2, #1
    3728:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    372a:	60f2      	strmi	r2, [r6, #12]
}
    372c:	e7e3      	b.n	36f6 <gpio_nrfx_config+0x6a>
    372e:	bf00      	nop
    3730:	00f00006 	.word	0x00f00006
    3734:	00100006 	.word	0x00100006
    3738:	00400002 	.word	0x00400002
    373c:	50842500 	.word	0x50842500

00003740 <gpiote_event_handler>:
{
    3740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3744:	4d45      	ldr	r5, [pc, #276]	; (385c <gpiote_event_handler+0x11c>)
    3746:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
    3748:	2e00      	cmp	r6, #0
    374a:	d05b      	beq.n	3804 <gpiote_event_handler+0xc4>
	uint32_t out = data->pin_int_en;
    374c:	4b44      	ldr	r3, [pc, #272]	; (3860 <gpiote_event_handler+0x120>)
	uint32_t bit = 1U << pin;
    374e:	f04f 0801 	mov.w	r8, #1
	out &= ~data->trig_edge & ~data->double_edge;
    3752:	e9d3 2005 	ldrd	r2, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
    3756:	68d9      	ldr	r1, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    3758:	4302      	orrs	r2, r0
    375a:	ea21 0902 	bic.w	r9, r1, r2
    return p_reg->IN;
    375e:	4a41      	ldr	r2, [pc, #260]	; (3864 <gpiote_event_handler+0x124>)
	uint32_t check_pins = level_pins;
    3760:	464f      	mov	r7, r9
	uint32_t pin = 0U;
    3762:	f04f 0b00 	mov.w	fp, #0
    3766:	4692      	mov	sl, r2
    3768:	6914      	ldr	r4, [r2, #16]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    376a:	691b      	ldr	r3, [r3, #16]
    376c:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    376e:	ea29 0404 	bic.w	r4, r9, r4
	while (check_pins) {
    3772:	bb7f      	cbnz	r7, 37d4 <gpiote_event_handler+0x94>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3774:	602f      	str	r7, [r5, #0]
    3776:	682b      	ldr	r3, [r5, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3778:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    377a:	2501      	movs	r5, #1
    377c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    377e:	483a      	ldr	r0, [pc, #232]	; (3868 <gpiote_event_handler+0x128>)
    3780:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    3784:	fa05 f103 	lsl.w	r1, r5, r3
    3788:	4211      	tst	r1, r2
    378a:	d011      	beq.n	37b0 <gpiote_event_handler+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    378c:	009a      	lsls	r2, r3, #2
    378e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    3792:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
    3796:	6811      	ldr	r1, [r2, #0]
    3798:	b151      	cbz	r1, 37b0 <gpiote_event_handler+0x70>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    379a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    379e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    37a2:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    37a4:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    37a8:	fa05 f101 	lsl.w	r1, r5, r1
    37ac:	6812      	ldr	r2, [r2, #0]
    37ae:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    37b0:	3301      	adds	r3, #1
    37b2:	2b08      	cmp	r3, #8
    37b4:	d1e4      	bne.n	3780 <gpiote_event_handler+0x40>
	if (fired_triggers[0]) {
    37b6:	bb3c      	cbnz	r4, 3808 <gpiote_event_handler+0xc8>
	if (port_event) {
    37b8:	b156      	cbz	r6, 37d0 <gpiote_event_handler+0x90>
	uint32_t bit = 1U << pin;
    37ba:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    37bc:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
    37be:	4d28      	ldr	r5, [pc, #160]	; (3860 <gpiote_event_handler+0x120>)
    37c0:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    37c2:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
    37c6:	430a      	orrs	r2, r1
    37c8:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
    37cc:	2c00      	cmp	r4, #0
    37ce:	d133      	bne.n	3838 <gpiote_event_handler+0xf8>
}
    37d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    37d4:	ea18 0f07 	tst.w	r8, r7
    37d8:	d00f      	beq.n	37fa <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
    37da:	ea18 0f09 	tst.w	r8, r9
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    37de:	f00b 001f 	and.w	r0, fp, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    37e2:	bf08      	it	eq
    37e4:	f100 0380 	addeq.w	r3, r0, #128	; 0x80
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    37e8:	f04f 0100 	mov.w	r1, #0
    37ec:	bf08      	it	eq
    37ee:	f85a 3023 	ldreq.w	r3, [sl, r3, lsl #2]
    37f2:	f7ff fe57 	bl	34a4 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    37f6:	ea27 0708 	bic.w	r7, r7, r8
		++pin;
    37fa:	f10b 0b01 	add.w	fp, fp, #1
		bit <<= 1;
    37fe:	ea4f 0848 	mov.w	r8, r8, lsl #1
    3802:	e7b6      	b.n	3772 <gpiote_event_handler+0x32>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3804:	4634      	mov	r4, r6
    3806:	e7b7      	b.n	3778 <gpiote_event_handler+0x38>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3808:	4b15      	ldr	r3, [pc, #84]	; (3860 <gpiote_event_handler+0x120>)
    380a:	6859      	ldr	r1, [r3, #4]
    380c:	2900      	cmp	r1, #0
    380e:	d0d3      	beq.n	37b8 <gpiote_event_handler+0x78>
	return node->next;
    3810:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3812:	4f16      	ldr	r7, [pc, #88]	; (386c <gpiote_event_handler+0x12c>)
    3814:	2d00      	cmp	r5, #0
    3816:	bf38      	it	cc
    3818:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    381a:	688a      	ldr	r2, [r1, #8]
    381c:	4022      	ands	r2, r4
    381e:	d002      	beq.n	3826 <gpiote_event_handler+0xe6>
			cb->handler(port, cb, cb->pin_mask & pins);
    3820:	4638      	mov	r0, r7
    3822:	684b      	ldr	r3, [r1, #4]
    3824:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3826:	2d00      	cmp	r5, #0
    3828:	d0c6      	beq.n	37b8 <gpiote_event_handler+0x78>
    382a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    382c:	4629      	mov	r1, r5
    382e:	2b00      	cmp	r3, #0
    3830:	bf38      	it	cc
    3832:	2300      	movcc	r3, #0
    3834:	461d      	mov	r5, r3
    3836:	e7f0      	b.n	381a <gpiote_event_handler+0xda>
		if (level_pins & bit) {
    3838:	4226      	tst	r6, r4
    383a:	d00c      	beq.n	3856 <gpiote_event_handler+0x116>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    383c:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    383e:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3842:	40f9      	lsrs	r1, r7
    3844:	f001 0101 	and.w	r1, r1, #1
    3848:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    384c:	b2c9      	uxtb	r1, r1
    384e:	f7ff fe29 	bl	34a4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3852:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    3856:	3701      	adds	r7, #1
		bit <<= 1;
    3858:	0076      	lsls	r6, r6, #1
    385a:	e7b7      	b.n	37cc <gpiote_event_handler+0x8c>
    385c:	5000d17c 	.word	0x5000d17c
    3860:	20015c38 	.word	0x20015c38
    3864:	50842500 	.word	0x50842500
    3868:	5000d000 	.word	0x5000d000
    386c:	2001463c 	.word	0x2001463c

00003870 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    3870:	4b02      	ldr	r3, [pc, #8]	; (387c <flash_nrf_pages_layout+0xc>)
    3872:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    3874:	2301      	movs	r3, #1
    3876:	6013      	str	r3, [r2, #0]
}
    3878:	4770      	bx	lr
    387a:	bf00      	nop
    387c:	20015c58 	.word	0x20015c58

00003880 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    3880:	4800      	ldr	r0, [pc, #0]	; (3884 <flash_nrf_get_parameters+0x4>)
    3882:	4770      	bx	lr
    3884:	00007830 	.word	0x00007830

00003888 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    3888:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    388a:	f003 fc8d 	bl	71a8 <nrfx_nvmc_flash_page_count_get>
    388e:	4c03      	ldr	r4, [pc, #12]	; (389c <nrf_flash_init+0x14>)
    3890:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    3892:	f003 fc86 	bl	71a2 <nrfx_nvmc_flash_page_size_get>
    3896:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    3898:	2000      	movs	r0, #0
    389a:	bd10      	pop	{r4, pc}
    389c:	20015c58 	.word	0x20015c58

000038a0 <flash_nrf_erase>:
{
    38a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38a2:	460e      	mov	r6, r1
    38a4:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    38a6:	f003 fc7c 	bl	71a2 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    38aa:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    38ac:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    38ae:	4630      	mov	r0, r6
    38b0:	f003 f9bd 	bl	6c2e <is_regular_addr_valid>
    38b4:	4637      	mov	r7, r6
    38b6:	b1f8      	cbz	r0, 38f8 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    38b8:	fbb6 f3f5 	udiv	r3, r6, r5
    38bc:	fb05 6313 	mls	r3, r5, r3, r6
    38c0:	b923      	cbnz	r3, 38cc <flash_nrf_erase+0x2c>
    38c2:	fbb4 f3f5 	udiv	r3, r4, r5
    38c6:	fb05 4013 	mls	r0, r5, r3, r4
    38ca:	b140      	cbz	r0, 38de <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    38cc:	4623      	mov	r3, r4
    38ce:	4632      	mov	r2, r6
    38d0:	2145      	movs	r1, #69	; 0x45
    38d2:	480c      	ldr	r0, [pc, #48]	; (3904 <flash_nrf_erase+0x64>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    38d4:	f002 fe5b 	bl	658e <z_log_minimal_printk>
    38d8:	f06f 0015 	mvn.w	r0, #21
    38dc:	e00b      	b.n	38f6 <flash_nrf_erase+0x56>
		if (!n_pages) {
    38de:	42a5      	cmp	r5, r4
    38e0:	d809      	bhi.n	38f6 <flash_nrf_erase+0x56>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    38e2:	f003 fc5e 	bl	71a2 <nrfx_nvmc_flash_page_size_get>
    38e6:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    38e8:	4638      	mov	r0, r7
    38ea:	f000 fd07 	bl	42fc <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    38ee:	1b64      	subs	r4, r4, r5
    38f0:	442f      	add	r7, r5
    38f2:	d1f9      	bne.n	38e8 <flash_nrf_erase+0x48>
	return ret;
    38f4:	4620      	mov	r0, r4
}
    38f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    38f8:	4623      	mov	r3, r4
    38fa:	4632      	mov	r2, r6
    38fc:	2145      	movs	r1, #69	; 0x45
    38fe:	4802      	ldr	r0, [pc, #8]	; (3908 <flash_nrf_erase+0x68>)
    3900:	e7e8      	b.n	38d4 <flash_nrf_erase+0x34>
    3902:	bf00      	nop
    3904:	000085f2 	.word	0x000085f2
    3908:	00008616 	.word	0x00008616

0000390c <flash_nrf_read>:
{
    390c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    390e:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
    3910:	4619      	mov	r1, r3
    3912:	4620      	mov	r0, r4
    3914:	9301      	str	r3, [sp, #4]
{
    3916:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
    3918:	f003 f989 	bl	6c2e <is_regular_addr_valid>
    391c:	9b01      	ldr	r3, [sp, #4]
    391e:	b940      	cbnz	r0, 3932 <flash_nrf_read+0x26>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3920:	4809      	ldr	r0, [pc, #36]	; (3948 <flash_nrf_read+0x3c>)
    3922:	4622      	mov	r2, r4
    3924:	2145      	movs	r1, #69	; 0x45
    3926:	f002 fe32 	bl	658e <z_log_minimal_printk>
    392a:	f06f 0015 	mvn.w	r0, #21
}
    392e:	b003      	add	sp, #12
    3930:	bd30      	pop	{r4, r5, pc}
	if (!len) {
    3932:	b133      	cbz	r3, 3942 <flash_nrf_read+0x36>
	memcpy(data, (void *)addr, len);
    3934:	461a      	mov	r2, r3
    3936:	4621      	mov	r1, r4
    3938:	4628      	mov	r0, r5
    393a:	f003 f8df 	bl	6afc <memcpy>
	return 0;
    393e:	2000      	movs	r0, #0
    3940:	e7f5      	b.n	392e <flash_nrf_read+0x22>
		return 0;
    3942:	4618      	mov	r0, r3
    3944:	e7f3      	b.n	392e <flash_nrf_read+0x22>
    3946:	bf00      	nop
    3948:	00008616 	.word	0x00008616

0000394c <flash_nrf_write>:
{
    394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    394e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    3950:	4619      	mov	r1, r3
    3952:	4630      	mov	r0, r6
{
    3954:	4617      	mov	r7, r2
    3956:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3958:	f003 f969 	bl	6c2e <is_regular_addr_valid>
    395c:	b940      	cbnz	r0, 3970 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    395e:	4623      	mov	r3, r4
    3960:	4632      	mov	r2, r6
    3962:	2145      	movs	r1, #69	; 0x45
    3964:	4812      	ldr	r0, [pc, #72]	; (39b0 <flash_nrf_write+0x64>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3966:	f002 fe12 	bl	658e <z_log_minimal_printk>
		return -EINVAL;
    396a:	f06f 0015 	mvn.w	r0, #21
}
    396e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    3970:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    3974:	f015 0503 	ands.w	r5, r5, #3
    3978:	d004      	beq.n	3984 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    397a:	4623      	mov	r3, r4
    397c:	4632      	mov	r2, r6
    397e:	2145      	movs	r1, #69	; 0x45
    3980:	480c      	ldr	r0, [pc, #48]	; (39b4 <flash_nrf_write+0x68>)
    3982:	e7f0      	b.n	3966 <flash_nrf_write+0x1a>
	if (!len) {
    3984:	b18c      	cbz	r4, 39aa <flash_nrf_write+0x5e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    3986:	192b      	adds	r3, r5, r4
    3988:	2b03      	cmp	r3, #3
    398a:	eba6 0005 	sub.w	r0, r6, r5
    398e:	d806      	bhi.n	399e <flash_nrf_write+0x52>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3990:	4a09      	ldr	r2, [pc, #36]	; (39b8 <flash_nrf_write+0x6c>)
    3992:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    3996:	07db      	lsls	r3, r3, #31
    3998:	d5fb      	bpl.n	3992 <flash_nrf_write+0x46>
	return ret;
    399a:	2000      	movs	r0, #0
    399c:	e7e7      	b.n	396e <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    399e:	1b7b      	subs	r3, r7, r5
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    39a0:	6819      	ldr	r1, [r3, #0]
    39a2:	f000 fcc9 	bl	4338 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    39a6:	3d04      	subs	r5, #4
}
    39a8:	e7ed      	b.n	3986 <flash_nrf_write+0x3a>
		return 0;
    39aa:	4620      	mov	r0, r4
    39ac:	e7df      	b.n	396e <flash_nrf_write+0x22>
    39ae:	bf00      	nop
    39b0:	00008616 	.word	0x00008616
    39b4:	00008638 	.word	0x00008638
    39b8:	50039000 	.word	0x50039000

000039bc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    39bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    39be:	794b      	ldrb	r3, [r1, #5]
    39c0:	2b01      	cmp	r3, #1
    39c2:	d02a      	beq.n	3a1a <uarte_nrfx_configure+0x5e>
    39c4:	2b03      	cmp	r3, #3
    39c6:	d125      	bne.n	3a14 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    39c8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    39ca:	798b      	ldrb	r3, [r1, #6]
    39cc:	2b03      	cmp	r3, #3
    39ce:	d121      	bne.n	3a14 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    39d0:	79cc      	ldrb	r4, [r1, #7]
    39d2:	b12c      	cbz	r4, 39e0 <uarte_nrfx_configure+0x24>
    39d4:	2c01      	cmp	r4, #1
    39d6:	d11d      	bne.n	3a14 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    39d8:	6843      	ldr	r3, [r0, #4]
    39da:	685b      	ldr	r3, [r3, #4]
    39dc:	079b      	lsls	r3, r3, #30
    39de:	d019      	beq.n	3a14 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    39e0:	790a      	ldrb	r2, [r1, #4]
    39e2:	b112      	cbz	r2, 39ea <uarte_nrfx_configure+0x2e>
    39e4:	2a02      	cmp	r2, #2
    39e6:	d115      	bne.n	3a14 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    39e8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    39ea:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    39ec:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    39ee:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    39f2:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    39f4:	d065      	beq.n	3ac2 <uarte_nrfx_configure+0x106>
    39f6:	d82d      	bhi.n	3a54 <uarte_nrfx_configure+0x98>
    39f8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    39fc:	d064      	beq.n	3ac8 <uarte_nrfx_configure+0x10c>
    39fe:	d816      	bhi.n	3a2e <uarte_nrfx_configure+0x72>
    3a00:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3a04:	d062      	beq.n	3acc <uarte_nrfx_configure+0x110>
    3a06:	d80a      	bhi.n	3a1e <uarte_nrfx_configure+0x62>
    3a08:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3a0c:	d061      	beq.n	3ad2 <uarte_nrfx_configure+0x116>
    3a0e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3a12:	d061      	beq.n	3ad8 <uarte_nrfx_configure+0x11c>
    3a14:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3a18:	e052      	b.n	3ac0 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    3a1a:	2600      	movs	r6, #0
    3a1c:	e7d5      	b.n	39ca <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3a1e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3a22:	d05c      	beq.n	3ade <uarte_nrfx_configure+0x122>
    3a24:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3a28:	d1f4      	bne.n	3a14 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3a2a:	4b37      	ldr	r3, [pc, #220]	; (3b08 <uarte_nrfx_configure+0x14c>)
    3a2c:	e03c      	b.n	3aa8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    3a2e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3a32:	d057      	beq.n	3ae4 <uarte_nrfx_configure+0x128>
    3a34:	d807      	bhi.n	3a46 <uarte_nrfx_configure+0x8a>
    3a36:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3a3a:	d055      	beq.n	3ae8 <uarte_nrfx_configure+0x12c>
    3a3c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3a40:	d1e8      	bne.n	3a14 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3a42:	4b32      	ldr	r3, [pc, #200]	; (3b0c <uarte_nrfx_configure+0x150>)
    3a44:	e030      	b.n	3aa8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    3a46:	f647 2712 	movw	r7, #31250	; 0x7a12
    3a4a:	42bb      	cmp	r3, r7
    3a4c:	d1e2      	bne.n	3a14 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3a4e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3a52:	e029      	b.n	3aa8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    3a54:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3a58:	d048      	beq.n	3aec <uarte_nrfx_configure+0x130>
    3a5a:	d813      	bhi.n	3a84 <uarte_nrfx_configure+0xc8>
    3a5c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3a60:	d047      	beq.n	3af2 <uarte_nrfx_configure+0x136>
    3a62:	d809      	bhi.n	3a78 <uarte_nrfx_configure+0xbc>
    3a64:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3a68:	42bb      	cmp	r3, r7
    3a6a:	d044      	beq.n	3af6 <uarte_nrfx_configure+0x13a>
    3a6c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3a70:	d1d0      	bne.n	3a14 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3a72:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3a76:	e017      	b.n	3aa8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    3a78:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3a7c:	d1ca      	bne.n	3a14 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3a7e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3a82:	e011      	b.n	3aa8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    3a84:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3a88:	d038      	beq.n	3afc <uarte_nrfx_configure+0x140>
    3a8a:	d808      	bhi.n	3a9e <uarte_nrfx_configure+0xe2>
    3a8c:	4f20      	ldr	r7, [pc, #128]	; (3b10 <uarte_nrfx_configure+0x154>)
    3a8e:	42bb      	cmp	r3, r7
    3a90:	d037      	beq.n	3b02 <uarte_nrfx_configure+0x146>
    3a92:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3a96:	d1bd      	bne.n	3a14 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3a98:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3a9c:	e004      	b.n	3aa8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    3a9e:	4f1d      	ldr	r7, [pc, #116]	; (3b14 <uarte_nrfx_configure+0x158>)
    3aa0:	42bb      	cmp	r3, r7
    3aa2:	d1b7      	bne.n	3a14 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3aa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3aa8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3aac:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    3aae:	4334      	orrs	r4, r6
    3ab0:	4322      	orrs	r2, r4
    3ab2:	3304      	adds	r3, #4
    3ab4:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3ab6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3aba:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3abe:	2000      	movs	r0, #0
}
    3ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3ac2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3ac6:	e7ef      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3ac8:	4b13      	ldr	r3, [pc, #76]	; (3b18 <uarte_nrfx_configure+0x15c>)
    3aca:	e7ed      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3acc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3ad0:	e7ea      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    3ad2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3ad6:	e7e7      	b.n	3aa8 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    3ad8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3adc:	e7e4      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3ade:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3ae2:	e7e1      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3ae4:	4b0d      	ldr	r3, [pc, #52]	; (3b1c <uarte_nrfx_configure+0x160>)
    3ae6:	e7df      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3ae8:	4b0d      	ldr	r3, [pc, #52]	; (3b20 <uarte_nrfx_configure+0x164>)
    3aea:	e7dd      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3aec:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3af0:	e7da      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3af2:	4b0c      	ldr	r3, [pc, #48]	; (3b24 <uarte_nrfx_configure+0x168>)
    3af4:	e7d8      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3af6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3afa:	e7d5      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3afc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3b00:	e7d2      	b.n	3aa8 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3b02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3b06:	e7cf      	b.n	3aa8 <uarte_nrfx_configure+0xec>
    3b08:	0013b000 	.word	0x0013b000
    3b0c:	004ea000 	.word	0x004ea000
    3b10:	0003d090 	.word	0x0003d090
    3b14:	000f4240 	.word	0x000f4240
    3b18:	00275000 	.word	0x00275000
    3b1c:	0075c000 	.word	0x0075c000
    3b20:	003af000 	.word	0x003af000
    3b24:	013a9000 	.word	0x013a9000

00003b28 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b2a:	4605      	mov	r5, r0
    3b2c:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3b2e:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3b30:	f003 fc06 	bl	7340 <k_is_in_isr>
    3b34:	b910      	cbnz	r0, 3b3c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3b36:	4b1e      	ldr	r3, [pc, #120]	; (3bb0 <uarte_nrfx_poll_out+0x88>)
	int key;

	if (isr_mode) {
    3b38:	781b      	ldrb	r3, [r3, #0]
    3b3a:	b9a3      	cbnz	r3, 3b66 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    3b3c:	f04f 0320 	mov.w	r3, #32
    3b40:	f3ef 8411 	mrs	r4, BASEPRI
    3b44:	f383 8811 	msr	BASEPRI, r3
    3b48:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3b4c:	4628      	mov	r0, r5
    3b4e:	f003 f960 	bl	6e12 <is_tx_ready>
    3b52:	bb00      	cbnz	r0, 3b96 <uarte_nrfx_poll_out+0x6e>
	__asm__ volatile(
    3b54:	f384 8811 	msr	BASEPRI, r4
    3b58:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3b5c:	e7ee      	b.n	3b3c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    3b5e:	f384 8811 	msr	BASEPRI, r4
    3b62:	f3bf 8f6f 	isb	sy
{
    3b66:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3b68:	4628      	mov	r0, r5
    3b6a:	f003 f952 	bl	6e12 <is_tx_ready>
    3b6e:	b928      	cbnz	r0, 3b7c <uarte_nrfx_poll_out+0x54>
    3b70:	2001      	movs	r0, #1
    3b72:	f003 fb06 	bl	7182 <nrfx_busy_wait>
    3b76:	3c01      	subs	r4, #1
    3b78:	d1f6      	bne.n	3b68 <uarte_nrfx_poll_out+0x40>
    3b7a:	e7f4      	b.n	3b66 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    3b7c:	f04f 0320 	mov.w	r3, #32
    3b80:	f3ef 8411 	mrs	r4, BASEPRI
    3b84:	f383 8811 	msr	BASEPRI, r3
    3b88:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3b8c:	4628      	mov	r0, r5
    3b8e:	f003 f940 	bl	6e12 <is_tx_ready>
    3b92:	2800      	cmp	r0, #0
    3b94:	d0e3      	beq.n	3b5e <uarte_nrfx_poll_out+0x36>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3b96:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    3b98:	2201      	movs	r2, #1
    3b9a:	4628      	mov	r0, r5
	data->char_out = c;
    3b9c:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    3ba0:	f003 f9c8 	bl	6f34 <tx_start>
	__asm__ volatile(
    3ba4:	f384 8811 	msr	BASEPRI, r4
    3ba8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    3bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bae:	bf00      	nop
    3bb0:	200166a3 	.word	0x200166a3

00003bb4 <uarte_instance_init.isra.0>:
	return config->uarte_regs;
    3bb4:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    3bba:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3bbc:	2300      	movs	r3, #0
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3bbe:	6906      	ldr	r6, [r0, #16]
static int uarte_instance_init(const struct device *dev,
    3bc0:	460f      	mov	r7, r1
    3bc2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    3bc6:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3bc8:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
    3bca:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3bcc:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
    3bce:	4b44      	ldr	r3, [pc, #272]	; (3ce0 <uarte_instance_init.isra.0+0x12c>)
    *p_pin = pin_number & 0x1F;
    3bd0:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3bd4:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    3bd6:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = cnf;
    3bd8:	2103      	movs	r1, #3
    3bda:	3280      	adds	r2, #128	; 0x80
    3bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    3be0:	687a      	ldr	r2, [r7, #4]
    3be2:	1c51      	adds	r1, r2, #1
    3be4:	bf1f      	itttt	ne
    3be6:	f04f 0c0c 	movne.w	ip, #12
    *p_pin = pin_number & 0x1F;
    3bea:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    3bee:	3180      	addne	r1, #128	; 0x80
    3bf0:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    3bf4:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
    3bf6:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    3bfa:	1c48      	adds	r0, r1, #1
    3bfc:	bf18      	it	ne
    3bfe:	200c      	movne	r0, #12
    p_reg->PSEL.RXD = pselrxd;
    3c00:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    3c04:	bf1e      	ittt	ne
    3c06:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = cnf;
    3c0a:	3280      	addne	r2, #128	; 0x80
    3c0c:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    3c10:	68f8      	ldr	r0, [r7, #12]
    3c12:	1c42      	adds	r2, r0, #1
    3c14:	d00c      	beq.n	3c30 <uarte_instance_init.isra.0+0x7c>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3c16:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    3c1a:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3c1e:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    3c22:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = cnf;
    3c26:	f04f 0c03 	mov.w	ip, #3
    3c2a:	3280      	adds	r2, #128	; 0x80
    3c2c:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    3c30:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    3c34:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3c38:	6929      	ldr	r1, [r5, #16]
    3c3a:	4628      	mov	r0, r5
    3c3c:	3104      	adds	r1, #4
    3c3e:	f7ff febd 	bl	39bc <uarte_nrfx_configure>
	if (err) {
    3c42:	4680      	mov	r8, r0
    3c44:	b980      	cbnz	r0, 3c68 <uarte_instance_init.isra.0+0xb4>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3c46:	686b      	ldr	r3, [r5, #4]
    3c48:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3c4a:	0719      	lsls	r1, r3, #28
    3c4c:	d51c      	bpl.n	3c88 <uarte_instance_init.isra.0+0xd4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3c4e:	f106 0016 	add.w	r0, r6, #22
    3c52:	f000 fac5 	bl	41e0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3c56:	4b23      	ldr	r3, [pc, #140]	; (3ce4 <uarte_instance_init.isra.0+0x130>)
    3c58:	4298      	cmp	r0, r3
    3c5a:	d008      	beq.n	3c6e <uarte_instance_init.isra.0+0xba>
		LOG_ERR("Failed to allocate PPI Channel");
    3c5c:	2145      	movs	r1, #69	; 0x45
    3c5e:	4822      	ldr	r0, [pc, #136]	; (3ce8 <uarte_instance_init.isra.0+0x134>)
    3c60:	f002 fc95 	bl	658e <z_log_minimal_printk>
		return -EIO;
    3c64:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3c68:	4640      	mov	r0, r8
    3c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3c6e:	7db3      	ldrb	r3, [r6, #22]
    3c70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3c74:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3c78:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3c7c:	2301      	movs	r3, #1
    3c7e:	7db2      	ldrb	r2, [r6, #22]
    3c80:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    3c82:	4a1a      	ldr	r2, [pc, #104]	; (3cec <uarte_instance_init.isra.0+0x138>)
    3c84:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3c88:	2308      	movs	r3, #8
    3c8a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	3301      	adds	r3, #1
    3c92:	d00c      	beq.n	3cae <uarte_instance_init.isra.0+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c94:	2300      	movs	r3, #0
    3c96:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3c9a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3c9e:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3ca2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3ca6:	2301      	movs	r3, #1
    3ca8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3cac:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3cae:	686b      	ldr	r3, [r5, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3cb0:	3614      	adds	r6, #20
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3cb2:	685b      	ldr	r3, [r3, #4]
    3cb4:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    3cb6:	bf5c      	itt	pl
    3cb8:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3cbc:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3cc0:	06db      	lsls	r3, r3, #27
    3cc2:	bf44      	itt	mi
    3cc4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3cc8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    3ccc:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3cce:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3cd2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3cd6:	2301      	movs	r3, #1
    3cd8:	60a3      	str	r3, [r4, #8]
    3cda:	60e3      	str	r3, [r4, #12]
	return 0;
    3cdc:	e7c4      	b.n	3c68 <uarte_instance_init.isra.0+0xb4>
    3cde:	bf00      	nop
    3ce0:	50842500 	.word	0x50842500
    3ce4:	0bad0000 	.word	0x0bad0000
    3ce8:	00008665 	.word	0x00008665
    3cec:	50017000 	.word	0x50017000

00003cf0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3cf0:	b530      	push	{r4, r5, lr}
    3cf2:	b085      	sub	sp, #20
    3cf4:	466c      	mov	r4, sp
    3cf6:	4605      	mov	r5, r0
    3cf8:	4b08      	ldr	r3, [pc, #32]	; (3d1c <uarte_0_init+0x2c>)
    3cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3d00:	2200      	movs	r2, #0
    3d02:	2101      	movs	r1, #1
    3d04:	2008      	movs	r0, #8
    3d06:	f7fe ff71 	bl	2bec <z_arm_irq_priority_set>
    3d0a:	2008      	movs	r0, #8
    3d0c:	f7fe ff50 	bl	2bb0 <arch_irq_enable>
    3d10:	4621      	mov	r1, r4
    3d12:	4628      	mov	r0, r5
    3d14:	f7ff ff4e 	bl	3bb4 <uarte_instance_init.isra.0>
    3d18:	b005      	add	sp, #20
    3d1a:	bd30      	pop	{r4, r5, pc}
    3d1c:	00007690 	.word	0x00007690

00003d20 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    3d20:	b530      	push	{r4, r5, lr}
    3d22:	b085      	sub	sp, #20
    3d24:	466c      	mov	r4, sp
    3d26:	4605      	mov	r5, r0
    3d28:	4b08      	ldr	r3, [pc, #32]	; (3d4c <uarte_1_init+0x2c>)
    3d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3d30:	2200      	movs	r2, #0
    3d32:	2101      	movs	r1, #1
    3d34:	2009      	movs	r0, #9
    3d36:	f7fe ff59 	bl	2bec <z_arm_irq_priority_set>
    3d3a:	2009      	movs	r0, #9
    3d3c:	f7fe ff38 	bl	2bb0 <arch_irq_enable>
    3d40:	4621      	mov	r1, r4
    3d42:	4628      	mov	r0, r5
    3d44:	f7ff ff36 	bl	3bb4 <uarte_instance_init.isra.0>
    3d48:	b005      	add	sp, #20
    3d4a:	bd30      	pop	{r4, r5, pc}
    3d4c:	000076a0 	.word	0x000076a0

00003d50 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3d50:	4803      	ldr	r0, [pc, #12]	; (3d60 <k_sys_fatal_error_handler+0x10>)
    3d52:	2145      	movs	r1, #69	; 0x45
{
    3d54:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    3d56:	f002 fc1a 	bl	658e <z_log_minimal_printk>
		sys_arch_reboot(0);
    3d5a:	2000      	movs	r0, #0
    3d5c:	f7ff fa0c 	bl	3178 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3d60:	000086a0 	.word	0x000086a0

00003d64 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    3d64:	6881      	ldr	r1, [r0, #8]
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    3d66:	b508      	push	{r3, lr}
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    3d68:	4a04      	ldr	r2, [pc, #16]	; (3d7c <boot_write_magic+0x18>)
    3d6a:	2310      	movs	r3, #16
    3d6c:	3910      	subs	r1, #16
    3d6e:	f002 fc59 	bl	6624 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    3d72:	3800      	subs	r0, #0
    3d74:	bf18      	it	ne
    3d76:	2001      	movne	r0, #1
    3d78:	bd08      	pop	{r3, pc}
    3d7a:	bf00      	nop
    3d7c:	00007894 	.word	0x00007894

00003d80 <boot_read_swap_state>:
{
    3d80:	b530      	push	{r4, r5, lr}
    3d82:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    3d84:	6881      	ldr	r1, [r0, #8]
{
    3d86:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3d88:	2310      	movs	r3, #16
    3d8a:	aa02      	add	r2, sp, #8
    3d8c:	3910      	subs	r1, #16
{
    3d8e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3d90:	f002 fc2b 	bl	65ea <flash_area_read>
    if (rc < 0) {
    3d94:	2800      	cmp	r0, #0
    3d96:	db11      	blt.n	3dbc <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
    3d98:	2210      	movs	r2, #16
    3d9a:	4628      	mov	r0, r5
    3d9c:	a902      	add	r1, sp, #8
    3d9e:	f003 f947 	bl	7030 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    3da2:	b168      	cbz	r0, 3dc0 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
    3da4:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    3da6:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    3da8:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3daa:	2301      	movs	r3, #1
    3dac:	4628      	mov	r0, r5
    3dae:	f10d 0207 	add.w	r2, sp, #7
    3db2:	3928      	subs	r1, #40	; 0x28
    3db4:	f002 fc19 	bl	65ea <flash_area_read>
    if (rc < 0) {
    3db8:	2800      	cmp	r0, #0
    3dba:	da0b      	bge.n	3dd4 <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
    3dbc:	2001      	movs	r0, #1
    3dbe:	e02a      	b.n	3e16 <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    3dc0:	2210      	movs	r2, #16
    3dc2:	4916      	ldr	r1, [pc, #88]	; (3e1c <boot_read_swap_state+0x9c>)
    3dc4:	a802      	add	r0, sp, #8
    3dc6:	f002 fe89 	bl	6adc <memcmp>
    3dca:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
    3dcc:	bf14      	ite	ne
    3dce:	2302      	movne	r3, #2
    3dd0:	2301      	moveq	r3, #1
    3dd2:	e7e8      	b.n	3da6 <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3dd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3dd8:	4628      	mov	r0, r5
    3dda:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3dde:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3de0:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3de2:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    3de4:	2201      	movs	r2, #1
    3de6:	f10d 0107 	add.w	r1, sp, #7
    3dea:	f003 f921 	bl	7030 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    3dee:	b910      	cbnz	r0, 3df6 <boot_read_swap_state+0x76>
    3df0:	7863      	ldrb	r3, [r4, #1]
    3df2:	2b04      	cmp	r3, #4
    3df4:	d903      	bls.n	3dfe <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    3df6:	2301      	movs	r3, #1
    3df8:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    3dfa:	2300      	movs	r3, #0
    3dfc:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    3dfe:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3e00:	4628      	mov	r0, r5
    3e02:	3a20      	subs	r2, #32
    3e04:	1ca1      	adds	r1, r4, #2
    3e06:	f003 f93b 	bl	7080 <boot_read_flag>
    if (rc) {
    3e0a:	2800      	cmp	r0, #0
    3e0c:	d1d6      	bne.n	3dbc <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
    3e0e:	4628      	mov	r0, r5
    3e10:	1ce1      	adds	r1, r4, #3
    3e12:	f003 f98e 	bl	7132 <boot_read_image_ok>
}
    3e16:	b007      	add	sp, #28
    3e18:	bd30      	pop	{r4, r5, pc}
    3e1a:	bf00      	nop
    3e1c:	00007894 	.word	0x00007894

00003e20 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    3e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e24:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3e26:	4669      	mov	r1, sp
    3e28:	2002      	movs	r0, #2
    3e2a:	f003 f986 	bl	713a <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    3e2e:	b118      	cbz	r0, 3e38 <boot_swap_type_multi+0x18>
        return BOOT_SWAP_TYPE_PANIC;
    3e30:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    3e32:	b005      	add	sp, #20
    3e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3e38:	2006      	movs	r0, #6
    3e3a:	a902      	add	r1, sp, #8
    3e3c:	f003 f97d 	bl	713a <boot_read_swap_state_by_id>
    if (rc) {
    3e40:	2800      	cmp	r0, #0
    3e42:	d1f5      	bne.n	3e30 <boot_swap_type_multi+0x10>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    3e44:	4602      	mov	r2, r0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3e46:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    3e4a:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3e4e:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3e52:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    3e56:	f89d 9002 	ldrb.w	r9, [sp, #2]
    3e5a:	4c1e      	ldr	r4, [pc, #120]	; (3ed4 <boot_swap_type_multi+0xb4>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3e5c:	4629      	mov	r1, r5
    3e5e:	7820      	ldrb	r0, [r4, #0]
    3e60:	f003 f8fa 	bl	7058 <boot_magic_compatible_check>
    3e64:	b300      	cbz	r0, 3ea8 <boot_swap_type_multi+0x88>
            boot_magic_compatible_check(table->magic_secondary_slot,
    3e66:	4631      	mov	r1, r6
    3e68:	7860      	ldrb	r0, [r4, #1]
    3e6a:	f003 f8f5 	bl	7058 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3e6e:	b1d8      	cbz	r0, 3ea8 <boot_swap_type_multi+0x88>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3e70:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    3e72:	2b04      	cmp	r3, #4
    3e74:	d001      	beq.n	3e7a <boot_swap_type_multi+0x5a>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3e76:	42bb      	cmp	r3, r7
    3e78:	d116      	bne.n	3ea8 <boot_swap_type_multi+0x88>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3e7a:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3e7c:	2b04      	cmp	r3, #4
    3e7e:	d001      	beq.n	3e84 <boot_swap_type_multi+0x64>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3e80:	4543      	cmp	r3, r8
    3e82:	d111      	bne.n	3ea8 <boot_swap_type_multi+0x88>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3e84:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3e86:	2b04      	cmp	r3, #4
    3e88:	d10c      	bne.n	3ea4 <boot_swap_type_multi+0x84>
            BOOT_LOG_INF("Swap type: %s",
    3e8a:	7963      	ldrb	r3, [r4, #5]
    3e8c:	2b02      	cmp	r3, #2
    3e8e:	d116      	bne.n	3ebe <boot_swap_type_multi+0x9e>
    3e90:	4a11      	ldr	r2, [pc, #68]	; (3ed8 <boot_swap_type_multi+0xb8>)
    3e92:	4812      	ldr	r0, [pc, #72]	; (3edc <boot_swap_type_multi+0xbc>)
    3e94:	2149      	movs	r1, #73	; 0x49
    3e96:	f002 fb7a 	bl	658e <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    3e9a:	7960      	ldrb	r0, [r4, #5]
    3e9c:	1e83      	subs	r3, r0, #2
    3e9e:	2b02      	cmp	r3, #2
    3ea0:	d9c7      	bls.n	3e32 <boot_swap_type_multi+0x12>
    3ea2:	e7c5      	b.n	3e30 <boot_swap_type_multi+0x10>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3ea4:	454b      	cmp	r3, r9
    3ea6:	d0f0      	beq.n	3e8a <boot_swap_type_multi+0x6a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    3ea8:	3201      	adds	r2, #1
    3eaa:	2a03      	cmp	r2, #3
    3eac:	f104 0406 	add.w	r4, r4, #6
    3eb0:	d1d4      	bne.n	3e5c <boot_swap_type_multi+0x3c>
    BOOT_LOG_INF("Swap type: none");
    3eb2:	480b      	ldr	r0, [pc, #44]	; (3ee0 <boot_swap_type_multi+0xc0>)
    3eb4:	2149      	movs	r1, #73	; 0x49
    3eb6:	f002 fb6a 	bl	658e <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    3eba:	2001      	movs	r0, #1
    3ebc:	e7b9      	b.n	3e32 <boot_swap_type_multi+0x12>
            BOOT_LOG_INF("Swap type: %s",
    3ebe:	2b03      	cmp	r3, #3
    3ec0:	d005      	beq.n	3ece <boot_swap_type_multi+0xae>
    3ec2:	4a08      	ldr	r2, [pc, #32]	; (3ee4 <boot_swap_type_multi+0xc4>)
    3ec4:	4908      	ldr	r1, [pc, #32]	; (3ee8 <boot_swap_type_multi+0xc8>)
    3ec6:	2b04      	cmp	r3, #4
    3ec8:	bf18      	it	ne
    3eca:	460a      	movne	r2, r1
    3ecc:	e7e1      	b.n	3e92 <boot_swap_type_multi+0x72>
    3ece:	4a07      	ldr	r2, [pc, #28]	; (3eec <boot_swap_type_multi+0xcc>)
    3ed0:	e7df      	b.n	3e92 <boot_swap_type_multi+0x72>
    3ed2:	bf00      	nop
    3ed4:	0000870d 	.word	0x0000870d
    3ed8:	000086c9 	.word	0x000086c9
    3edc:	000086e5 	.word	0x000086e5
    3ee0:	000086f8 	.word	0x000086f8
    3ee4:	000086c2 	.word	0x000086c2
    3ee8:	000086d3 	.word	0x000086d3
    3eec:	000086ce 	.word	0x000086ce

00003ef0 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3ef0:	4b05      	ldr	r3, [pc, #20]	; (3f08 <nrf91_errata_14+0x18>)
    3ef2:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3ef4:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3ef6:	681b      	ldr	r3, [r3, #0]
    3ef8:	2b09      	cmp	r3, #9
    3efa:	d103      	bne.n	3f04 <nrf91_errata_14+0x14>
            {
                switch(var2)
    3efc:	1e43      	subs	r3, r0, #1
    3efe:	4258      	negs	r0, r3
    3f00:	4158      	adcs	r0, r3
    3f02:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3f04:	2000      	movs	r0, #0
    #endif
}
    3f06:	4770      	bx	lr
    3f08:	00ff0134 	.word	0x00ff0134

00003f0c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    3f0c:	b508      	push	{r3, lr}
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3f0e:	4b4c      	ldr	r3, [pc, #304]	; (4040 <SystemInit+0x134>)
            if (var1 == 0x09)
    3f10:	681b      	ldr	r3, [r3, #0]
    3f12:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    3f14:	bf01      	itttt	eq
    3f16:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    3f1a:	2200      	moveq	r2, #0
    3f1c:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    3f20:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    3f24:	f7ff ffe4 	bl	3ef0 <nrf91_errata_14>
    3f28:	b130      	cbz	r0, 3f38 <SystemInit+0x2c>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    3f2a:	2301      	movs	r3, #1
    3f2c:	4a45      	ldr	r2, [pc, #276]	; (4044 <SystemInit+0x138>)
    3f2e:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3f30:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    3f34:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3f38:	4b41      	ldr	r3, [pc, #260]	; (4040 <SystemInit+0x134>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3f3a:	681b      	ldr	r3, [r3, #0]
    3f3c:	2b09      	cmp	r3, #9
    3f3e:	d107      	bne.n	3f50 <SystemInit+0x44>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3f40:	4b41      	ldr	r3, [pc, #260]	; (4048 <SystemInit+0x13c>)
            {
                switch(var2)
    3f42:	681b      	ldr	r3, [r3, #0]
    3f44:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3f46:	bf1e      	ittt	ne
    3f48:	2201      	movne	r2, #1
    3f4a:	4b40      	ldrne	r3, [pc, #256]	; (404c <SystemInit+0x140>)
    3f4c:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    3f50:	f7ff ffce 	bl	3ef0 <nrf91_errata_14>
    3f54:	b110      	cbz	r0, 3f5c <SystemInit+0x50>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    3f56:	220e      	movs	r2, #14
    3f58:	4b3d      	ldr	r3, [pc, #244]	; (4050 <SystemInit+0x144>)
    3f5a:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3f5c:	4b38      	ldr	r3, [pc, #224]	; (4040 <SystemInit+0x134>)
            if (var1 == 0x09)
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	2b09      	cmp	r3, #9
    3f62:	d104      	bne.n	3f6e <SystemInit+0x62>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    3f64:	2200      	movs	r2, #0
    3f66:	4b3b      	ldr	r3, [pc, #236]	; (4054 <SystemInit+0x148>)
    3f68:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    3f6a:	2201      	movs	r2, #1
    3f6c:	605a      	str	r2, [r3, #4]
{
    3f6e:	2200      	movs	r2, #0
    3f70:	00d3      	lsls	r3, r2, #3
    3f72:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3f76:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    3f7a:	3101      	adds	r1, #1
    3f7c:	d008      	beq.n	3f90 <SystemInit+0x84>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3f7e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3f82:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3f84:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3f88:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3f8c:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3f8e:	d1ef      	bne.n	3f70 <SystemInit+0x64>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    3f90:	4b31      	ldr	r3, [pc, #196]	; (4058 <SystemInit+0x14c>)
    3f92:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    3f94:	07d1      	lsls	r1, r2, #31
    3f96:	d53b      	bpl.n	4010 <SystemInit+0x104>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3f98:	4b30      	ldr	r3, [pc, #192]	; (405c <SystemInit+0x150>)
    3f9a:	4619      	mov	r1, r3
    3f9c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3fa0:	2a01      	cmp	r2, #1
    3fa2:	d1fb      	bne.n	3f9c <SystemInit+0x90>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    3fa4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3fa8:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    3fac:	2b01      	cmp	r3, #1
    3fae:	d1fb      	bne.n	3fa8 <SystemInit+0x9c>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    3fb0:	4b29      	ldr	r3, [pc, #164]	; (4058 <SystemInit+0x14c>)
    3fb2:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    3fb4:	07d2      	lsls	r2, r2, #31
    3fb6:	d508      	bpl.n	3fca <SystemInit+0xbe>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    3fb8:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3fba:	4928      	ldr	r1, [pc, #160]	; (405c <SystemInit+0x150>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    3fbc:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    3fc0:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3fc2:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    3fc6:	2a01      	cmp	r2, #1
    3fc8:	d1fb      	bne.n	3fc2 <SystemInit+0xb6>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    3fca:	6a1a      	ldr	r2, [r3, #32]
    3fcc:	3201      	adds	r2, #1
    3fce:	d10a      	bne.n	3fe6 <SystemInit+0xda>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    3fd0:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    3fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    3fd6:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    3fda:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3fdc:	4a1f      	ldr	r2, [pc, #124]	; (405c <SystemInit+0x150>)
    3fde:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3fe2:	2b01      	cmp	r3, #1
    3fe4:	d1fb      	bne.n	3fde <SystemInit+0xd2>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    3fe6:	2200      	movs	r2, #0
    3fe8:	4b1c      	ldr	r3, [pc, #112]	; (405c <SystemInit+0x150>)
    3fea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3fee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3ff2:	2a01      	cmp	r2, #1
    3ff4:	d1fb      	bne.n	3fee <SystemInit+0xe2>
  __ASM volatile ("dsb 0xF":::"memory");
    3ff6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3ffa:	4919      	ldr	r1, [pc, #100]	; (4060 <SystemInit+0x154>)
    3ffc:	4b19      	ldr	r3, [pc, #100]	; (4064 <SystemInit+0x158>)
    3ffe:	68ca      	ldr	r2, [r1, #12]
    4000:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4004:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4006:	60cb      	str	r3, [r1, #12]
    4008:	f3bf 8f4f 	dsb	sy
    __NOP();
    400c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    400e:	e7fd      	b.n	400c <SystemInit+0x100>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    4010:	6a1b      	ldr	r3, [r3, #32]
    4012:	3301      	adds	r3, #1
    4014:	d0c0      	beq.n	3f98 <SystemInit+0x8c>
        SCB->NSACR |= (3UL << 10);
    4016:	4b12      	ldr	r3, [pc, #72]	; (4060 <SystemInit+0x154>)
    4018:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    401c:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    4020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    4024:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4028:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    402c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    4030:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4034:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    4038:	4b0b      	ldr	r3, [pc, #44]	; (4068 <SystemInit+0x15c>)
    403a:	4a0c      	ldr	r2, [pc, #48]	; (406c <SystemInit+0x160>)
    403c:	601a      	str	r2, [r3, #0]
}
    403e:	bd08      	pop	{r3, pc}
    4040:	00ff0130 	.word	0x00ff0130
    4044:	50004a38 	.word	0x50004a38
    4048:	00ff0134 	.word	0x00ff0134
    404c:	50004000 	.word	0x50004000
    4050:	5003aee4 	.word	0x5003aee4
    4054:	5000470c 	.word	0x5000470c
    4058:	00ff8000 	.word	0x00ff8000
    405c:	50039000 	.word	0x50039000
    4060:	e000ed00 	.word	0xe000ed00
    4064:	05fa0004 	.word	0x05fa0004
    4068:	20014578 	.word	0x20014578
    406c:	03d09000 	.word	0x03d09000

00004070 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4070:	4b04      	ldr	r3, [pc, #16]	; (4084 <nrfx_clock_init+0x14>)
    4072:	791a      	ldrb	r2, [r3, #4]
    4074:	b922      	cbnz	r2, 4080 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4076:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4078:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    407a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    407c:	4802      	ldr	r0, [pc, #8]	; (4088 <nrfx_clock_init+0x18>)
    407e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4080:	4802      	ldr	r0, [pc, #8]	; (408c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4082:	4770      	bx	lr
    4084:	20015c68 	.word	0x20015c68
    4088:	0bad0000 	.word	0x0bad0000
    408c:	0bad000c 	.word	0x0bad000c

00004090 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4090:	b110      	cbz	r0, 4098 <nrfx_clock_start+0x8>
    4092:	2801      	cmp	r0, #1
    4094:	d020      	beq.n	40d8 <nrfx_clock_start+0x48>
    4096:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4098:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    409c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    40a0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    40a4:	03c9      	lsls	r1, r1, #15
    40a6:	d511      	bpl.n	40cc <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    40a8:	f003 0303 	and.w	r3, r3, #3
    40ac:	2b02      	cmp	r3, #2
    40ae:	d10d      	bne.n	40cc <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    40b0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40b4:	2200      	movs	r2, #0
    40b6:	4b0d      	ldr	r3, [pc, #52]	; (40ec <nrfx_clock_start+0x5c>)
    40b8:	601a      	str	r2, [r3, #0]
    40ba:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    40bc:	2202      	movs	r2, #2
    40be:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    40c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40c6:	2201      	movs	r2, #1
    40c8:	609a      	str	r2, [r3, #8]
}
    40ca:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    40cc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    40d0:	2201      	movs	r2, #1
    40d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    40d6:	e7ed      	b.n	40b4 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40d8:	2200      	movs	r2, #0
    40da:	4b05      	ldr	r3, [pc, #20]	; (40f0 <nrfx_clock_start+0x60>)
    40dc:	601a      	str	r2, [r3, #0]
    40de:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    40e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    40e4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40e8:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    40ea:	4770      	bx	lr
    40ec:	50005104 	.word	0x50005104
    40f0:	50005100 	.word	0x50005100

000040f4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    40f4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    40f6:	b110      	cbz	r0, 40fe <nrfx_clock_stop+0xa>
    40f8:	2801      	cmp	r0, #1
    40fa:	d018      	beq.n	412e <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    40fc:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    40fe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4102:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4104:	2101      	movs	r1, #1
    4106:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    410a:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
    410c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4110:	4a15      	ldr	r2, [pc, #84]	; (4168 <nrfx_clock_stop+0x74>)
    4112:	6010      	str	r0, [r2, #0]
    4114:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4116:	4a15      	ldr	r2, [pc, #84]	; (416c <nrfx_clock_stop+0x78>)
    4118:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    411a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    411e:	03db      	lsls	r3, r3, #15
    4120:	d5ec      	bpl.n	40fc <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    4122:	2001      	movs	r0, #1
    4124:	f003 f82d 	bl	7182 <nrfx_busy_wait>
    4128:	3d01      	subs	r5, #1
    412a:	d1f6      	bne.n	411a <nrfx_clock_stop+0x26>
    412c:	e7e6      	b.n	40fc <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    412e:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4132:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4134:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4138:	4b0d      	ldr	r3, [pc, #52]	; (4170 <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
    413a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    413e:	601a      	str	r2, [r3, #0]
    4140:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4142:	4b0c      	ldr	r3, [pc, #48]	; (4174 <nrfx_clock_stop+0x80>)
    4144:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4146:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    414a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    414e:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4152:	03d2      	lsls	r2, r2, #15
    4154:	d5d2      	bpl.n	40fc <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4156:	2b00      	cmp	r3, #0
    4158:	d0d0      	beq.n	40fc <nrfx_clock_stop+0x8>
    415a:	2001      	movs	r0, #1
    415c:	f003 f811 	bl	7182 <nrfx_busy_wait>
    4160:	3d01      	subs	r5, #1
    4162:	d1f0      	bne.n	4146 <nrfx_clock_stop+0x52>
    4164:	e7ca      	b.n	40fc <nrfx_clock_stop+0x8>
    4166:	bf00      	nop
    4168:	50005104 	.word	0x50005104
    416c:	5000500c 	.word	0x5000500c
    4170:	50005100 	.word	0x50005100
    4174:	50005004 	.word	0x50005004

00004178 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4178:	4b16      	ldr	r3, [pc, #88]	; (41d4 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    417a:	b510      	push	{r4, lr}
    417c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    417e:	b152      	cbz	r2, 4196 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4180:	2000      	movs	r0, #0
    4182:	6018      	str	r0, [r3, #0]
    4184:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    4186:	2201      	movs	r2, #1
    4188:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    418c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4190:	4b11      	ldr	r3, [pc, #68]	; (41d8 <nrfx_power_clock_irq_handler+0x60>)
    4192:	681b      	ldr	r3, [r3, #0]
    4194:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4196:	4b11      	ldr	r3, [pc, #68]	; (41dc <nrfx_power_clock_irq_handler+0x64>)
    4198:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    419a:	b18a      	cbz	r2, 41c0 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    419c:	2200      	movs	r2, #0
    419e:	601a      	str	r2, [r3, #0]
    41a0:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    41a2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    41a6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    41aa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    41ae:	f002 0203 	and.w	r2, r2, #3
    41b2:	2a01      	cmp	r2, #1
    41b4:	f04f 0102 	mov.w	r1, #2
    41b8:	d103      	bne.n	41c2 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    41ba:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41be:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    41c0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    41c2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    41c6:	4b04      	ldr	r3, [pc, #16]	; (41d8 <nrfx_power_clock_irq_handler+0x60>)
    41c8:	2001      	movs	r0, #1
}
    41ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	4718      	bx	r3
    41d2:	bf00      	nop
    41d4:	50005100 	.word	0x50005100
    41d8:	20015c68 	.word	0x20015c68
    41dc:	50005104 	.word	0x50005104

000041e0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    41e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    41e2:	f04f 0320 	mov.w	r3, #32
    41e6:	f3ef 8711 	mrs	r7, BASEPRI
    41ea:	f383 8811 	msr	BASEPRI, r3
    41ee:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    41f2:	4a0d      	ldr	r2, [pc, #52]	; (4228 <nrfx_dppi_channel_alloc+0x48>)
    41f4:	6816      	ldr	r6, [r2, #0]
    41f6:	43f1      	mvns	r1, r6
    41f8:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
    41fa:	b191      	cbz	r1, 4222 <nrfx_dppi_channel_alloc+0x42>
    41fc:	2500      	movs	r5, #0
    41fe:	b2ec      	uxtb	r4, r5
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
    4200:	fa21 f304 	lsr.w	r3, r1, r4
    4204:	07db      	lsls	r3, r3, #31
    4206:	f105 0501 	add.w	r5, r5, #1
    420a:	d5f8      	bpl.n	41fe <nrfx_dppi_channel_alloc+0x1e>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
    420c:	2301      	movs	r3, #1
    420e:	40a3      	lsls	r3, r4
    4210:	4333      	orrs	r3, r6
        *p_channel = channel;
    4212:	7004      	strb	r4, [r0, #0]

        err_code = NRFX_SUCCESS;
    4214:	4805      	ldr	r0, [pc, #20]	; (422c <nrfx_dppi_channel_alloc+0x4c>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
    4216:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4218:	f387 8811 	msr	BASEPRI, r7
    421c:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
    4220:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
    4222:	4803      	ldr	r0, [pc, #12]	; (4230 <nrfx_dppi_channel_alloc+0x50>)
    4224:	e7f8      	b.n	4218 <nrfx_dppi_channel_alloc+0x38>
    4226:	bf00      	nop
    4228:	20015c70 	.word	0x20015c70
    422c:	0bad0000 	.word	0x0bad0000
    4230:	0bad0002 	.word	0x0bad0002

00004234 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    4234:	2301      	movs	r3, #1
    4236:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    423a:	f010 0fff 	tst.w	r0, #255	; 0xff
    423e:	d012      	beq.n	4266 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    4240:	f04f 0320 	mov.w	r3, #32
    4244:	f3ef 8111 	mrs	r1, BASEPRI
    4248:	f383 8811 	msr	BASEPRI, r3
    424c:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    4250:	4a06      	ldr	r2, [pc, #24]	; (426c <nrfx_gpiote_channel_free+0x38>)
    4252:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    4254:	ea23 0000 	bic.w	r0, r3, r0
    4258:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    425a:	f381 8811 	msr	BASEPRI, r1
    425e:	f3bf 8f6f 	isb	sy
    4262:	4803      	ldr	r0, [pc, #12]	; (4270 <nrfx_gpiote_channel_free+0x3c>)
    4264:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    4266:	4803      	ldr	r0, [pc, #12]	; (4274 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4268:	4770      	bx	lr
    426a:	bf00      	nop
    426c:	20015c74 	.word	0x20015c74
    4270:	0bad0000 	.word	0x0bad0000
    4274:	0bad0004 	.word	0x0bad0004

00004278 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    4278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    427c:	22ff      	movs	r2, #255	; 0xff
{
    427e:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    4280:	2601      	movs	r6, #1
{
    4282:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    4284:	f8df e058 	ldr.w	lr, [pc, #88]	; 42e0 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    4288:	4814      	ldr	r0, [pc, #80]	; (42dc <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    428a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 42e4 <nrfx_gpiote_channel_alloc+0x6c>
    428e:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    4290:	f04f 0120 	mov.w	r1, #32
    4294:	f3ef 8c11 	mrs	ip, BASEPRI
    4298:	f381 8811 	msr	BASEPRI, r1
    429c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    42a0:	fa22 f103 	lsr.w	r1, r2, r3
    42a4:	07c9      	lsls	r1, r1, #31
    42a6:	d50a      	bpl.n	42be <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    42a8:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    42ac:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    42b0:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    42b2:	bf01      	itttt	eq
    42b4:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    42b6:	4339      	orreq	r1, r7
    42b8:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
    42bc:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    42be:	f38c 8811 	msr	BASEPRI, ip
    42c2:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    42c6:	4540      	cmp	r0, r8
    42c8:	d005      	beq.n	42d6 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    42ca:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    42ce:	439a      	bics	r2, r3
    42d0:	f104 0401 	add.w	r4, r4, #1
    42d4:	d1db      	bne.n	428e <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    42d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42da:	bf00      	nop
    42dc:	0bad0002 	.word	0x0bad0002
    42e0:	20015c74 	.word	0x20015c74
    42e4:	0bad0000 	.word	0x0bad0000

000042e8 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    42e8:	2200      	movs	r2, #0
    42ea:	4b03      	ldr	r3, [pc, #12]	; (42f8 <nvmc_readonly_mode_set+0x10>)
    42ec:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    42f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    42f4:	4770      	bx	lr
    42f6:	bf00      	nop
    42f8:	50039000 	.word	0x50039000

000042fc <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    42fc:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    42fe:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    4302:	b983      	cbnz	r3, 4326 <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    4304:	2202      	movs	r2, #2
    4306:	4b09      	ldr	r3, [pc, #36]	; (432c <nrfx_nvmc_page_erase+0x30>)
    4308:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    430c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    4310:	f04f 32ff 	mov.w	r2, #4294967295
    4314:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    4316:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    431a:	07d2      	lsls	r2, r2, #31
    431c:	d5fb      	bpl.n	4316 <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    431e:	f7ff ffe3 	bl	42e8 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    4322:	4803      	ldr	r0, [pc, #12]	; (4330 <nrfx_nvmc_page_erase+0x34>)
}
    4324:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    4326:	4803      	ldr	r0, [pc, #12]	; (4334 <nrfx_nvmc_page_erase+0x38>)
    4328:	e7fc      	b.n	4324 <nrfx_nvmc_page_erase+0x28>
    432a:	bf00      	nop
    432c:	50039000 	.word	0x50039000
    4330:	0bad0000 	.word	0x0bad0000
    4334:	0bad000a 	.word	0x0bad000a

00004338 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    4338:	2201      	movs	r2, #1
    433a:	4b07      	ldr	r3, [pc, #28]	; (4358 <nrfx_nvmc_word_write+0x20>)
    433c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4340:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    4344:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    4348:	07d2      	lsls	r2, r2, #31
    434a:	d5fb      	bpl.n	4344 <nrfx_nvmc_word_write+0xc>
    *(volatile uint32_t *)addr = value;
    434c:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    434e:	f3bf 8f5f 	dmb	sy

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
    4352:	f7ff bfc9 	b.w	42e8 <nvmc_readonly_mode_set>
    4356:	bf00      	nop
    4358:	50039000 	.word	0x50039000

0000435c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    435c:	4b0e      	ldr	r3, [pc, #56]	; (4398 <z_sys_init_run_level+0x3c>)
{
    435e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4360:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4364:	3001      	adds	r0, #1
    4366:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    436a:	42a6      	cmp	r6, r4
    436c:	d800      	bhi.n	4370 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    436e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4370:	e9d4 3500 	ldrd	r3, r5, [r4]
    4374:	4628      	mov	r0, r5
    4376:	4798      	blx	r3
		if (dev != NULL) {
    4378:	b165      	cbz	r5, 4394 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    437a:	68eb      	ldr	r3, [r5, #12]
    437c:	b130      	cbz	r0, 438c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    437e:	2800      	cmp	r0, #0
    4380:	bfb8      	it	lt
    4382:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4384:	28ff      	cmp	r0, #255	; 0xff
    4386:	bfa8      	it	ge
    4388:	20ff      	movge	r0, #255	; 0xff
    438a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    438c:	785a      	ldrb	r2, [r3, #1]
    438e:	f042 0201 	orr.w	r2, r2, #1
    4392:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4394:	3408      	adds	r4, #8
    4396:	e7e8      	b.n	436a <z_sys_init_run_level+0xe>
    4398:	000078a4 	.word	0x000078a4

0000439c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    439c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    439e:	4605      	mov	r5, r0
    43a0:	b910      	cbnz	r0, 43a8 <z_impl_device_get_binding+0xc>
		return NULL;
    43a2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    43a4:	4620      	mov	r0, r4
    43a6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    43a8:	7803      	ldrb	r3, [r0, #0]
    43aa:	2b00      	cmp	r3, #0
    43ac:	d0f9      	beq.n	43a2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    43ae:	4a0f      	ldr	r2, [pc, #60]	; (43ec <z_impl_device_get_binding+0x50>)
    43b0:	4c0f      	ldr	r4, [pc, #60]	; (43f0 <z_impl_device_get_binding+0x54>)
    43b2:	4616      	mov	r6, r2
    43b4:	4294      	cmp	r4, r2
    43b6:	d108      	bne.n	43ca <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    43b8:	4c0d      	ldr	r4, [pc, #52]	; (43f0 <z_impl_device_get_binding+0x54>)
    43ba:	42b4      	cmp	r4, r6
    43bc:	d0f1      	beq.n	43a2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    43be:	4620      	mov	r0, r4
    43c0:	f002 ffb5 	bl	732e <z_device_ready>
    43c4:	b950      	cbnz	r0, 43dc <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    43c6:	3418      	adds	r4, #24
    43c8:	e7f7      	b.n	43ba <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    43ca:	4620      	mov	r0, r4
    43cc:	f002 ffaf 	bl	732e <z_device_ready>
    43d0:	b110      	cbz	r0, 43d8 <z_impl_device_get_binding+0x3c>
    43d2:	6823      	ldr	r3, [r4, #0]
    43d4:	42ab      	cmp	r3, r5
    43d6:	d0e5      	beq.n	43a4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    43d8:	3418      	adds	r4, #24
    43da:	e7eb      	b.n	43b4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    43dc:	4628      	mov	r0, r5
    43de:	6821      	ldr	r1, [r4, #0]
    43e0:	f002 fb70 	bl	6ac4 <strcmp>
    43e4:	2800      	cmp	r0, #0
    43e6:	d1ee      	bne.n	43c6 <z_impl_device_get_binding+0x2a>
    43e8:	e7dc      	b.n	43a4 <z_impl_device_get_binding+0x8>
    43ea:	bf00      	nop
    43ec:	2001466c 	.word	0x2001466c
    43f0:	200145dc 	.word	0x200145dc

000043f4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    43f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    43f6:	4604      	mov	r4, r0
    43f8:	460d      	mov	r5, r1
	__asm__ volatile(
    43fa:	f04f 0320 	mov.w	r3, #32
    43fe:	f3ef 8611 	mrs	r6, BASEPRI
    4402:	f383 8811 	msr	BASEPRI, r3
    4406:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    440a:	2200      	movs	r2, #0
    440c:	2804      	cmp	r0, #4
    440e:	bf96      	itet	ls
    4410:	4b11      	ldrls	r3, [pc, #68]	; (4458 <z_fatal_error+0x64>)
    4412:	4b12      	ldrhi	r3, [pc, #72]	; (445c <z_fatal_error+0x68>)
	return 0;
    4414:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4418:	9200      	str	r2, [sp, #0]
    441a:	2145      	movs	r1, #69	; 0x45
    441c:	4602      	mov	r2, r0
    441e:	4810      	ldr	r0, [pc, #64]	; (4460 <z_fatal_error+0x6c>)
    4420:	f002 f8b5 	bl	658e <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4424:	b13d      	cbz	r5, 4436 <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4426:	69eb      	ldr	r3, [r5, #28]
    4428:	f3c3 0308 	ubfx	r3, r3, #0, #9
    442c:	b11b      	cbz	r3, 4436 <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    442e:	2145      	movs	r1, #69	; 0x45
    4430:	480c      	ldr	r0, [pc, #48]	; (4464 <z_fatal_error+0x70>)
    4432:	f002 f8ac 	bl	658e <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4436:	2200      	movs	r2, #0
    4438:	4b0b      	ldr	r3, [pc, #44]	; (4468 <z_fatal_error+0x74>)
    443a:	2145      	movs	r1, #69	; 0x45
    443c:	480b      	ldr	r0, [pc, #44]	; (446c <z_fatal_error+0x78>)
    443e:	f002 f8a6 	bl	658e <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4442:	4629      	mov	r1, r5
    4444:	4620      	mov	r0, r4
    4446:	f7ff fc83 	bl	3d50 <k_sys_fatal_error_handler>
	__asm__ volatile(
    444a:	f386 8811 	msr	BASEPRI, r6
    444e:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4452:	b002      	add	sp, #8
    4454:	bd70      	pop	{r4, r5, r6, pc}
    4456:	bf00      	nop
    4458:	000078b8 	.word	0x000078b8
    445c:	0000871f 	.word	0x0000871f
    4460:	0000872d 	.word	0x0000872d
    4464:	0000875a 	.word	0x0000875a
    4468:	00008780 	.word	0x00008780
    446c:	00008788 	.word	0x00008788

00004470 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4470:	4802      	ldr	r0, [pc, #8]	; (447c <z_bss_zero+0xc>)
    4472:	4a03      	ldr	r2, [pc, #12]	; (4480 <z_bss_zero+0x10>)
    4474:	2100      	movs	r1, #0
    4476:	1a12      	subs	r2, r2, r0
    4478:	f002 bb6b 	b.w	6b52 <memset>
    447c:	20014670 	.word	0x20014670
    4480:	200166a4 	.word	0x200166a4

00004484 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4484:	2201      	movs	r2, #1
{
    4486:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4488:	4b08      	ldr	r3, [pc, #32]	; (44ac <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    448a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    448c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    448e:	f7ff ff65 	bl	435c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4492:	f002 ff5f 	bl	7354 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4496:	2003      	movs	r0, #3
    4498:	f7ff ff60 	bl	435c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    449c:	f7fb ffcc 	bl	438 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    44a0:	4a03      	ldr	r2, [pc, #12]	; (44b0 <bg_thread_main+0x2c>)
    44a2:	7b13      	ldrb	r3, [r2, #12]
    44a4:	f023 0301 	bic.w	r3, r3, #1
    44a8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    44aa:	bd08      	pop	{r3, pc}
    44ac:	200166a3 	.word	0x200166a3
    44b0:	20014670 	.word	0x20014670

000044b4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    44b4:	b508      	push	{r3, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    44b6:	4b17      	ldr	r3, [pc, #92]	; (4514 <z_cstart+0x60>)
	uint32_t msp =
    44b8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    44bc:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    44c0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    44c4:	2500      	movs	r5, #0
    44c6:	23e0      	movs	r3, #224	; 0xe0
    44c8:	4c13      	ldr	r4, [pc, #76]	; (4518 <z_cstart+0x64>)
    44ca:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    44ce:	77e5      	strb	r5, [r4, #31]
    44d0:	7625      	strb	r5, [r4, #24]
    44d2:	7665      	strb	r5, [r4, #25]
    44d4:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    44d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    44d8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    44dc:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    44de:	f7fe fe3d 	bl	315c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    44e2:	f7fe fbb9 	bl	2c58 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    44e6:	f04f 33ff 	mov.w	r3, #4294967295
    44ea:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    44ec:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    44ee:	f7fe ffb3 	bl	3458 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    44f2:	f7fe fe95 	bl	3220 <z_arm_configure_static_mpu_regions>
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    44f6:	f002 ff19 	bl	732c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    44fa:	4628      	mov	r0, r5
    44fc:	f7ff ff2e 	bl	435c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4500:	2001      	movs	r0, #1
    4502:	f7ff ff2b 	bl	435c <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    4506:	462b      	mov	r3, r5
    4508:	462a      	mov	r2, r5
    450a:	4629      	mov	r1, r5
    450c:	4803      	ldr	r0, [pc, #12]	; (451c <z_cstart+0x68>)
    450e:	f7fe fb83 	bl	2c18 <z_arm_switch_to_main_no_multithreading>
    4512:	bf00      	nop
    4514:	20018ea8 	.word	0x20018ea8
    4518:	e000ed00 	.word	0xe000ed00
    451c:	00004485 	.word	0x00004485

00004520 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4520:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    4522:	4806      	ldr	r0, [pc, #24]	; (453c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4524:	4a06      	ldr	r2, [pc, #24]	; (4540 <z_data_copy+0x20>)
    4526:	4907      	ldr	r1, [pc, #28]	; (4544 <z_data_copy+0x24>)
    4528:	1a12      	subs	r2, r2, r0
    452a:	f002 fae7 	bl	6afc <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    452e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    4532:	4a05      	ldr	r2, [pc, #20]	; (4548 <z_data_copy+0x28>)
    4534:	4905      	ldr	r1, [pc, #20]	; (454c <z_data_copy+0x2c>)
    4536:	4806      	ldr	r0, [pc, #24]	; (4550 <z_data_copy+0x30>)
    4538:	f002 bae0 	b.w	6afc <memcpy>
    453c:	20014500 	.word	0x20014500
    4540:	2001466c 	.word	0x2001466c
    4544:	0000880c 	.word	0x0000880c
    4548:	00000000 	.word	0x00000000
    454c:	000087f4 	.word	0x000087f4
    4550:	20014500 	.word	0x20014500

00004554 <nrf_cc3xx_platform_init_no_rng>:
    4554:	b510      	push	{r4, lr}
    4556:	4c0a      	ldr	r4, [pc, #40]	; (4580 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4558:	6823      	ldr	r3, [r4, #0]
    455a:	b11b      	cbz	r3, 4564 <nrf_cc3xx_platform_init_no_rng+0x10>
    455c:	2301      	movs	r3, #1
    455e:	2000      	movs	r0, #0
    4560:	6023      	str	r3, [r4, #0]
    4562:	bd10      	pop	{r4, pc}
    4564:	f000 f848 	bl	45f8 <CC_LibInitNoRng>
    4568:	2800      	cmp	r0, #0
    456a:	d0f7      	beq.n	455c <nrf_cc3xx_platform_init_no_rng+0x8>
    456c:	3801      	subs	r0, #1
    456e:	2806      	cmp	r0, #6
    4570:	d803      	bhi.n	457a <nrf_cc3xx_platform_init_no_rng+0x26>
    4572:	4b04      	ldr	r3, [pc, #16]	; (4584 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4574:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4578:	bd10      	pop	{r4, pc}
    457a:	4803      	ldr	r0, [pc, #12]	; (4588 <nrf_cc3xx_platform_init_no_rng+0x34>)
    457c:	bd10      	pop	{r4, pc}
    457e:	bf00      	nop
    4580:	20015cc4 	.word	0x20015cc4
    4584:	000078cc 	.word	0x000078cc
    4588:	ffff8ffe 	.word	0xffff8ffe

0000458c <nrf_cc3xx_platform_abort>:
    458c:	f3bf 8f4f 	dsb	sy
    4590:	4905      	ldr	r1, [pc, #20]	; (45a8 <nrf_cc3xx_platform_abort+0x1c>)
    4592:	4b06      	ldr	r3, [pc, #24]	; (45ac <nrf_cc3xx_platform_abort+0x20>)
    4594:	68ca      	ldr	r2, [r1, #12]
    4596:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    459a:	4313      	orrs	r3, r2
    459c:	60cb      	str	r3, [r1, #12]
    459e:	f3bf 8f4f 	dsb	sy
    45a2:	bf00      	nop
    45a4:	e7fd      	b.n	45a2 <nrf_cc3xx_platform_abort+0x16>
    45a6:	bf00      	nop
    45a8:	e000ed00 	.word	0xe000ed00
    45ac:	05fa0004 	.word	0x05fa0004

000045b0 <CC_PalAbort>:
    45b0:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    45b4:	2100      	movs	r1, #0
    45b6:	b430      	push	{r4, r5}
    45b8:	4a06      	ldr	r2, [pc, #24]	; (45d4 <CC_PalAbort+0x24>)
    45ba:	4d07      	ldr	r5, [pc, #28]	; (45d8 <CC_PalAbort+0x28>)
    45bc:	4c07      	ldr	r4, [pc, #28]	; (45dc <CC_PalAbort+0x2c>)
    45be:	602b      	str	r3, [r5, #0]
    45c0:	6013      	str	r3, [r2, #0]
    45c2:	6023      	str	r3, [r4, #0]
    45c4:	4a06      	ldr	r2, [pc, #24]	; (45e0 <CC_PalAbort+0x30>)
    45c6:	4c07      	ldr	r4, [pc, #28]	; (45e4 <CC_PalAbort+0x34>)
    45c8:	60eb      	str	r3, [r5, #12]
    45ca:	6863      	ldr	r3, [r4, #4]
    45cc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    45d0:	bc30      	pop	{r4, r5}
    45d2:	4718      	bx	r3
    45d4:	50841404 	.word	0x50841404
    45d8:	50841400 	.word	0x50841400
    45dc:	50841408 	.word	0x50841408
    45e0:	50840000 	.word	0x50840000
    45e4:	2001457c 	.word	0x2001457c

000045e8 <nrf_cc3xx_platform_set_abort>:
    45e8:	4b02      	ldr	r3, [pc, #8]	; (45f4 <nrf_cc3xx_platform_set_abort+0xc>)
    45ea:	e9d0 1200 	ldrd	r1, r2, [r0]
    45ee:	e9c3 1200 	strd	r1, r2, [r3]
    45f2:	4770      	bx	lr
    45f4:	2001457c 	.word	0x2001457c

000045f8 <CC_LibInitNoRng>:
    45f8:	b510      	push	{r4, lr}
    45fa:	f000 f833 	bl	4664 <CC_HalInit>
    45fe:	b120      	cbz	r0, 460a <CC_LibInitNoRng+0x12>
    4600:	2403      	movs	r4, #3
    4602:	f000 f867 	bl	46d4 <CC_PalTerminate>
    4606:	4620      	mov	r0, r4
    4608:	bd10      	pop	{r4, pc}
    460a:	f000 f835 	bl	4678 <CC_PalInit>
    460e:	b990      	cbnz	r0, 4636 <CC_LibInitNoRng+0x3e>
    4610:	f000 f8b0 	bl	4774 <CC_PalPowerSaveModeSelect>
    4614:	b990      	cbnz	r0, 463c <CC_LibInitNoRng+0x44>
    4616:	4b0f      	ldr	r3, [pc, #60]	; (4654 <CC_LibInitNoRng+0x5c>)
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	0e1b      	lsrs	r3, r3, #24
    461c:	2bf0      	cmp	r3, #240	; 0xf0
    461e:	d108      	bne.n	4632 <CC_LibInitNoRng+0x3a>
    4620:	4a0d      	ldr	r2, [pc, #52]	; (4658 <CC_LibInitNoRng+0x60>)
    4622:	4b0e      	ldr	r3, [pc, #56]	; (465c <CC_LibInitNoRng+0x64>)
    4624:	6812      	ldr	r2, [r2, #0]
    4626:	429a      	cmp	r2, r3
    4628:	d00a      	beq.n	4640 <CC_LibInitNoRng+0x48>
    462a:	2407      	movs	r4, #7
    462c:	f000 f81c 	bl	4668 <CC_HalTerminate>
    4630:	e7e7      	b.n	4602 <CC_LibInitNoRng+0xa>
    4632:	2406      	movs	r4, #6
    4634:	e7fa      	b.n	462c <CC_LibInitNoRng+0x34>
    4636:	2404      	movs	r4, #4
    4638:	4620      	mov	r0, r4
    463a:	bd10      	pop	{r4, pc}
    463c:	2400      	movs	r4, #0
    463e:	e7f5      	b.n	462c <CC_LibInitNoRng+0x34>
    4640:	2001      	movs	r0, #1
    4642:	f000 f897 	bl	4774 <CC_PalPowerSaveModeSelect>
    4646:	4604      	mov	r4, r0
    4648:	2800      	cmp	r0, #0
    464a:	d1f7      	bne.n	463c <CC_LibInitNoRng+0x44>
    464c:	4b04      	ldr	r3, [pc, #16]	; (4660 <CC_LibInitNoRng+0x68>)
    464e:	6018      	str	r0, [r3, #0]
    4650:	e7d9      	b.n	4606 <CC_LibInitNoRng+0xe>
    4652:	bf00      	nop
    4654:	50841928 	.word	0x50841928
    4658:	50841a24 	.word	0x50841a24
    465c:	20e00000 	.word	0x20e00000
    4660:	50841a0c 	.word	0x50841a0c

00004664 <CC_HalInit>:
    4664:	2000      	movs	r0, #0
    4666:	4770      	bx	lr

00004668 <CC_HalTerminate>:
    4668:	2000      	movs	r0, #0
    466a:	4770      	bx	lr

0000466c <CC_HalMaskInterrupt>:
    466c:	4b01      	ldr	r3, [pc, #4]	; (4674 <CC_HalMaskInterrupt+0x8>)
    466e:	6018      	str	r0, [r3, #0]
    4670:	4770      	bx	lr
    4672:	bf00      	nop
    4674:	50841a04 	.word	0x50841a04

00004678 <CC_PalInit>:
    4678:	b510      	push	{r4, lr}
    467a:	4811      	ldr	r0, [pc, #68]	; (46c0 <CC_PalInit+0x48>)
    467c:	f000 f848 	bl	4710 <CC_PalMutexCreate>
    4680:	b100      	cbz	r0, 4684 <CC_PalInit+0xc>
    4682:	bd10      	pop	{r4, pc}
    4684:	480f      	ldr	r0, [pc, #60]	; (46c4 <CC_PalInit+0x4c>)
    4686:	f000 f843 	bl	4710 <CC_PalMutexCreate>
    468a:	2800      	cmp	r0, #0
    468c:	d1f9      	bne.n	4682 <CC_PalInit+0xa>
    468e:	4c0e      	ldr	r4, [pc, #56]	; (46c8 <CC_PalInit+0x50>)
    4690:	4620      	mov	r0, r4
    4692:	f000 f83d 	bl	4710 <CC_PalMutexCreate>
    4696:	2800      	cmp	r0, #0
    4698:	d1f3      	bne.n	4682 <CC_PalInit+0xa>
    469a:	4b0c      	ldr	r3, [pc, #48]	; (46cc <CC_PalInit+0x54>)
    469c:	480c      	ldr	r0, [pc, #48]	; (46d0 <CC_PalInit+0x58>)
    469e:	601c      	str	r4, [r3, #0]
    46a0:	f000 f836 	bl	4710 <CC_PalMutexCreate>
    46a4:	4601      	mov	r1, r0
    46a6:	2800      	cmp	r0, #0
    46a8:	d1eb      	bne.n	4682 <CC_PalInit+0xa>
    46aa:	f000 f82d 	bl	4708 <CC_PalDmaInit>
    46ae:	4604      	mov	r4, r0
    46b0:	b108      	cbz	r0, 46b6 <CC_PalInit+0x3e>
    46b2:	4620      	mov	r0, r4
    46b4:	bd10      	pop	{r4, pc}
    46b6:	f000 f83f 	bl	4738 <CC_PalPowerSaveModeInit>
    46ba:	4620      	mov	r0, r4
    46bc:	e7fa      	b.n	46b4 <CC_PalInit+0x3c>
    46be:	bf00      	nop
    46c0:	20014590 	.word	0x20014590
    46c4:	20014584 	.word	0x20014584
    46c8:	2001458c 	.word	0x2001458c
    46cc:	20014594 	.word	0x20014594
    46d0:	20014588 	.word	0x20014588

000046d4 <CC_PalTerminate>:
    46d4:	b508      	push	{r3, lr}
    46d6:	4808      	ldr	r0, [pc, #32]	; (46f8 <CC_PalTerminate+0x24>)
    46d8:	f000 f824 	bl	4724 <CC_PalMutexDestroy>
    46dc:	4807      	ldr	r0, [pc, #28]	; (46fc <CC_PalTerminate+0x28>)
    46de:	f000 f821 	bl	4724 <CC_PalMutexDestroy>
    46e2:	4807      	ldr	r0, [pc, #28]	; (4700 <CC_PalTerminate+0x2c>)
    46e4:	f000 f81e 	bl	4724 <CC_PalMutexDestroy>
    46e8:	4806      	ldr	r0, [pc, #24]	; (4704 <CC_PalTerminate+0x30>)
    46ea:	f000 f81b 	bl	4724 <CC_PalMutexDestroy>
    46ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46f2:	f000 b80b 	b.w	470c <CC_PalDmaTerminate>
    46f6:	bf00      	nop
    46f8:	20014590 	.word	0x20014590
    46fc:	20014584 	.word	0x20014584
    4700:	2001458c 	.word	0x2001458c
    4704:	20014588 	.word	0x20014588

00004708 <CC_PalDmaInit>:
    4708:	2000      	movs	r0, #0
    470a:	4770      	bx	lr

0000470c <CC_PalDmaTerminate>:
    470c:	4770      	bx	lr
    470e:	bf00      	nop

00004710 <CC_PalMutexCreate>:
    4710:	b508      	push	{r3, lr}
    4712:	4b03      	ldr	r3, [pc, #12]	; (4720 <CC_PalMutexCreate+0x10>)
    4714:	6802      	ldr	r2, [r0, #0]
    4716:	681b      	ldr	r3, [r3, #0]
    4718:	6810      	ldr	r0, [r2, #0]
    471a:	4798      	blx	r3
    471c:	2000      	movs	r0, #0
    471e:	bd08      	pop	{r3, pc}
    4720:	200145a0 	.word	0x200145a0

00004724 <CC_PalMutexDestroy>:
    4724:	b508      	push	{r3, lr}
    4726:	4b03      	ldr	r3, [pc, #12]	; (4734 <CC_PalMutexDestroy+0x10>)
    4728:	6802      	ldr	r2, [r0, #0]
    472a:	685b      	ldr	r3, [r3, #4]
    472c:	6810      	ldr	r0, [r2, #0]
    472e:	4798      	blx	r3
    4730:	2000      	movs	r0, #0
    4732:	bd08      	pop	{r3, pc}
    4734:	200145a0 	.word	0x200145a0

00004738 <CC_PalPowerSaveModeInit>:
    4738:	b570      	push	{r4, r5, r6, lr}
    473a:	4c09      	ldr	r4, [pc, #36]	; (4760 <CC_PalPowerSaveModeInit+0x28>)
    473c:	4d09      	ldr	r5, [pc, #36]	; (4764 <CC_PalPowerSaveModeInit+0x2c>)
    473e:	6920      	ldr	r0, [r4, #16]
    4740:	68ab      	ldr	r3, [r5, #8]
    4742:	4798      	blx	r3
    4744:	b118      	cbz	r0, 474e <CC_PalPowerSaveModeInit+0x16>
    4746:	4b08      	ldr	r3, [pc, #32]	; (4768 <CC_PalPowerSaveModeInit+0x30>)
    4748:	4808      	ldr	r0, [pc, #32]	; (476c <CC_PalPowerSaveModeInit+0x34>)
    474a:	685b      	ldr	r3, [r3, #4]
    474c:	4798      	blx	r3
    474e:	2100      	movs	r1, #0
    4750:	4a07      	ldr	r2, [pc, #28]	; (4770 <CC_PalPowerSaveModeInit+0x38>)
    4752:	68eb      	ldr	r3, [r5, #12]
    4754:	6011      	str	r1, [r2, #0]
    4756:	6920      	ldr	r0, [r4, #16]
    4758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    475c:	4718      	bx	r3
    475e:	bf00      	nop
    4760:	200145b0 	.word	0x200145b0
    4764:	200145a0 	.word	0x200145a0
    4768:	2001457c 	.word	0x2001457c
    476c:	000078e8 	.word	0x000078e8
    4770:	20015cc8 	.word	0x20015cc8

00004774 <CC_PalPowerSaveModeSelect>:
    4774:	b570      	push	{r4, r5, r6, lr}
    4776:	4d1a      	ldr	r5, [pc, #104]	; (47e0 <CC_PalPowerSaveModeSelect+0x6c>)
    4778:	4e1a      	ldr	r6, [pc, #104]	; (47e4 <CC_PalPowerSaveModeSelect+0x70>)
    477a:	4604      	mov	r4, r0
    477c:	68b2      	ldr	r2, [r6, #8]
    477e:	6928      	ldr	r0, [r5, #16]
    4780:	4790      	blx	r2
    4782:	b9f0      	cbnz	r0, 47c2 <CC_PalPowerSaveModeSelect+0x4e>
    4784:	b15c      	cbz	r4, 479e <CC_PalPowerSaveModeSelect+0x2a>
    4786:	4c18      	ldr	r4, [pc, #96]	; (47e8 <CC_PalPowerSaveModeSelect+0x74>)
    4788:	6823      	ldr	r3, [r4, #0]
    478a:	b1ab      	cbz	r3, 47b8 <CC_PalPowerSaveModeSelect+0x44>
    478c:	2b01      	cmp	r3, #1
    478e:	d01a      	beq.n	47c6 <CC_PalPowerSaveModeSelect+0x52>
    4790:	3b01      	subs	r3, #1
    4792:	6023      	str	r3, [r4, #0]
    4794:	6928      	ldr	r0, [r5, #16]
    4796:	68f3      	ldr	r3, [r6, #12]
    4798:	4798      	blx	r3
    479a:	2000      	movs	r0, #0
    479c:	bd70      	pop	{r4, r5, r6, pc}
    479e:	4c12      	ldr	r4, [pc, #72]	; (47e8 <CC_PalPowerSaveModeSelect+0x74>)
    47a0:	6821      	ldr	r1, [r4, #0]
    47a2:	b939      	cbnz	r1, 47b4 <CC_PalPowerSaveModeSelect+0x40>
    47a4:	2001      	movs	r0, #1
    47a6:	4b11      	ldr	r3, [pc, #68]	; (47ec <CC_PalPowerSaveModeSelect+0x78>)
    47a8:	4a11      	ldr	r2, [pc, #68]	; (47f0 <CC_PalPowerSaveModeSelect+0x7c>)
    47aa:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    47ae:	6813      	ldr	r3, [r2, #0]
    47b0:	2b00      	cmp	r3, #0
    47b2:	d1fc      	bne.n	47ae <CC_PalPowerSaveModeSelect+0x3a>
    47b4:	3101      	adds	r1, #1
    47b6:	6021      	str	r1, [r4, #0]
    47b8:	68f3      	ldr	r3, [r6, #12]
    47ba:	6928      	ldr	r0, [r5, #16]
    47bc:	4798      	blx	r3
    47be:	2000      	movs	r0, #0
    47c0:	bd70      	pop	{r4, r5, r6, pc}
    47c2:	480c      	ldr	r0, [pc, #48]	; (47f4 <CC_PalPowerSaveModeSelect+0x80>)
    47c4:	bd70      	pop	{r4, r5, r6, pc}
    47c6:	4a0a      	ldr	r2, [pc, #40]	; (47f0 <CC_PalPowerSaveModeSelect+0x7c>)
    47c8:	6813      	ldr	r3, [r2, #0]
    47ca:	2b00      	cmp	r3, #0
    47cc:	d1fc      	bne.n	47c8 <CC_PalPowerSaveModeSelect+0x54>
    47ce:	4a07      	ldr	r2, [pc, #28]	; (47ec <CC_PalPowerSaveModeSelect+0x78>)
    47d0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    47d4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    47d8:	f7ff ff48 	bl	466c <CC_HalMaskInterrupt>
    47dc:	6823      	ldr	r3, [r4, #0]
    47de:	e7d7      	b.n	4790 <CC_PalPowerSaveModeSelect+0x1c>
    47e0:	200145b0 	.word	0x200145b0
    47e4:	200145a0 	.word	0x200145a0
    47e8:	20015cc8 	.word	0x20015cc8
    47ec:	50840000 	.word	0x50840000
    47f0:	50841910 	.word	0x50841910
    47f4:	ffff8fe9 	.word	0xffff8fe9

000047f8 <mutex_unlock>:
    47f8:	b148      	cbz	r0, 480e <mutex_unlock+0x16>
    47fa:	6843      	ldr	r3, [r0, #4]
    47fc:	b12b      	cbz	r3, 480a <mutex_unlock+0x12>
    47fe:	f3bf 8f5f 	dmb	sy
    4802:	2300      	movs	r3, #0
    4804:	6003      	str	r3, [r0, #0]
    4806:	4618      	mov	r0, r3
    4808:	4770      	bx	lr
    480a:	4802      	ldr	r0, [pc, #8]	; (4814 <mutex_unlock+0x1c>)
    480c:	4770      	bx	lr
    480e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4812:	4770      	bx	lr
    4814:	ffff8fea 	.word	0xffff8fea

00004818 <mutex_free>:
    4818:	b510      	push	{r4, lr}
    481a:	4604      	mov	r4, r0
    481c:	b128      	cbz	r0, 482a <mutex_free+0x12>
    481e:	6863      	ldr	r3, [r4, #4]
    4820:	b113      	cbz	r3, 4828 <mutex_free+0x10>
    4822:	2300      	movs	r3, #0
    4824:	6023      	str	r3, [r4, #0]
    4826:	6063      	str	r3, [r4, #4]
    4828:	bd10      	pop	{r4, pc}
    482a:	4b02      	ldr	r3, [pc, #8]	; (4834 <mutex_free+0x1c>)
    482c:	4802      	ldr	r0, [pc, #8]	; (4838 <mutex_free+0x20>)
    482e:	685b      	ldr	r3, [r3, #4]
    4830:	4798      	blx	r3
    4832:	e7f4      	b.n	481e <mutex_free+0x6>
    4834:	2001457c 	.word	0x2001457c
    4838:	00007908 	.word	0x00007908

0000483c <mutex_init>:
    483c:	b510      	push	{r4, lr}
    483e:	4604      	mov	r4, r0
    4840:	b130      	cbz	r0, 4850 <mutex_init+0x14>
    4842:	2200      	movs	r2, #0
    4844:	6863      	ldr	r3, [r4, #4]
    4846:	6022      	str	r2, [r4, #0]
    4848:	f043 0301 	orr.w	r3, r3, #1
    484c:	6063      	str	r3, [r4, #4]
    484e:	bd10      	pop	{r4, pc}
    4850:	4801      	ldr	r0, [pc, #4]	; (4858 <mutex_init+0x1c>)
    4852:	f7ff fead 	bl	45b0 <CC_PalAbort>
    4856:	e7f4      	b.n	4842 <mutex_init+0x6>
    4858:	00007930 	.word	0x00007930

0000485c <mutex_lock>:
    485c:	b180      	cbz	r0, 4880 <mutex_lock+0x24>
    485e:	6843      	ldr	r3, [r0, #4]
    4860:	b163      	cbz	r3, 487c <mutex_lock+0x20>
    4862:	2201      	movs	r2, #1
    4864:	e8d0 3fef 	ldaex	r3, [r0]
    4868:	e8c0 2fe1 	stlex	r1, r2, [r0]
    486c:	2900      	cmp	r1, #0
    486e:	d1f9      	bne.n	4864 <mutex_lock+0x8>
    4870:	2b01      	cmp	r3, #1
    4872:	d0f7      	beq.n	4864 <mutex_lock+0x8>
    4874:	f3bf 8f5f 	dmb	sy
    4878:	2000      	movs	r0, #0
    487a:	4770      	bx	lr
    487c:	4802      	ldr	r0, [pc, #8]	; (4888 <mutex_lock+0x2c>)
    487e:	4770      	bx	lr
    4880:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4884:	4770      	bx	lr
    4886:	bf00      	nop
    4888:	ffff8fea 	.word	0xffff8fea

0000488c <verify_context_ecdsa_verify_secp256r1>:
    488c:	b130      	cbz	r0, 489c <verify_context_ecdsa_verify_secp256r1+0x10>
    488e:	6802      	ldr	r2, [r0, #0]
    4890:	4b03      	ldr	r3, [pc, #12]	; (48a0 <verify_context_ecdsa_verify_secp256r1+0x14>)
    4892:	4804      	ldr	r0, [pc, #16]	; (48a4 <verify_context_ecdsa_verify_secp256r1+0x18>)
    4894:	429a      	cmp	r2, r3
    4896:	bf08      	it	eq
    4898:	2000      	moveq	r0, #0
    489a:	4770      	bx	lr
    489c:	4802      	ldr	r0, [pc, #8]	; (48a8 <verify_context_ecdsa_verify_secp256r1+0x1c>)
    489e:	4770      	bx	lr
    48a0:	bbaa55dd 	.word	0xbbaa55dd
    48a4:	00f00882 	.word	0x00f00882
    48a8:	00f00871 	.word	0x00f00871

000048ac <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    48ac:	b538      	push	{r3, r4, r5, lr}
    48ae:	460d      	mov	r5, r1
    48b0:	4604      	mov	r4, r0
    48b2:	b1b0      	cbz	r0, 48e2 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    48b4:	22a0      	movs	r2, #160	; 0xa0
    48b6:	2100      	movs	r1, #0
    48b8:	3004      	adds	r0, #4
    48ba:	f002 fd66 	bl	738a <SaSi_PalMemSet>
    48be:	b195      	cbz	r5, 48e6 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    48c0:	2208      	movs	r2, #8
    48c2:	4629      	mov	r1, r5
    48c4:	f104 0064 	add.w	r0, r4, #100	; 0x64
    48c8:	f002 fd65 	bl	7396 <CRYS_COMMON_ReverseMemcpy32>
    48cc:	2208      	movs	r2, #8
    48ce:	f105 0120 	add.w	r1, r5, #32
    48d2:	f104 0084 	add.w	r0, r4, #132	; 0x84
    48d6:	f002 fd5e 	bl	7396 <CRYS_COMMON_ReverseMemcpy32>
    48da:	2000      	movs	r0, #0
    48dc:	4b03      	ldr	r3, [pc, #12]	; (48ec <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    48de:	6023      	str	r3, [r4, #0]
    48e0:	bd38      	pop	{r3, r4, r5, pc}
    48e2:	4803      	ldr	r0, [pc, #12]	; (48f0 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    48e4:	e7fc      	b.n	48e0 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    48e6:	4803      	ldr	r0, [pc, #12]	; (48f4 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    48e8:	e7fa      	b.n	48e0 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    48ea:	bf00      	nop
    48ec:	bbaa55dd 	.word	0xbbaa55dd
    48f0:	00f00871 	.word	0x00f00871
    48f4:	00f00883 	.word	0x00f00883

000048f8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    48f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    48fc:	4605      	mov	r5, r0
    48fe:	460e      	mov	r6, r1
    4900:	4699      	mov	r9, r3
    4902:	4611      	mov	r1, r2
    4904:	f7ff ffc2 	bl	488c <verify_context_ecdsa_verify_secp256r1>
    4908:	4604      	mov	r4, r0
    490a:	2800      	cmp	r0, #0
    490c:	f040 8084 	bne.w	4a18 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4910:	2e00      	cmp	r6, #0
    4912:	f000 8085 	beq.w	4a20 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    4916:	2900      	cmp	r1, #0
    4918:	f000 8084 	beq.w	4a24 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    491c:	f1b9 0f20 	cmp.w	r9, #32
    4920:	f040 8082 	bne.w	4a28 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    4924:	f105 0444 	add.w	r4, r5, #68	; 0x44
    4928:	2208      	movs	r2, #8
    492a:	f105 0804 	add.w	r8, r5, #4
    492e:	4620      	mov	r0, r4
    4930:	f002 fd31 	bl	7396 <CRYS_COMMON_ReverseMemcpy32>
    4934:	f105 0724 	add.w	r7, r5, #36	; 0x24
    4938:	2208      	movs	r2, #8
    493a:	4631      	mov	r1, r6
    493c:	4640      	mov	r0, r8
    493e:	f002 fd2a 	bl	7396 <CRYS_COMMON_ReverseMemcpy32>
    4942:	f106 0120 	add.w	r1, r6, #32
    4946:	2208      	movs	r2, #8
    4948:	4638      	mov	r0, r7
    494a:	f002 fd24 	bl	7396 <CRYS_COMMON_ReverseMemcpy32>
    494e:	a902      	add	r1, sp, #8
    4950:	f841 9d04 	str.w	r9, [r1, #-4]!
    4954:	f44f 7080 	mov.w	r0, #256	; 0x100
    4958:	f002 fd11 	bl	737e <PkaInitAndMutexLock>
    495c:	2800      	cmp	r0, #0
    495e:	d165      	bne.n	4a2c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    4960:	f44f 7380 	mov.w	r3, #256	; 0x100
    4964:	4a32      	ldr	r2, [pc, #200]	; (4a30 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    4966:	2101      	movs	r1, #1
    4968:	6013      	str	r3, [r2, #0]
    496a:	6093      	str	r3, [r2, #8]
    496c:	2308      	movs	r3, #8
    496e:	4a31      	ldr	r2, [pc, #196]	; (4a34 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    4970:	f000 fb34 	bl	4fdc <PkaCopyDataIntoPkaReg>
    4974:	2101      	movs	r1, #1
    4976:	2305      	movs	r3, #5
    4978:	4608      	mov	r0, r1
    497a:	4a2f      	ldr	r2, [pc, #188]	; (4a38 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    497c:	f000 fb2e 	bl	4fdc <PkaCopyDataIntoPkaReg>
    4980:	2308      	movs	r3, #8
    4982:	4642      	mov	r2, r8
    4984:	2101      	movs	r1, #1
    4986:	201c      	movs	r0, #28
    4988:	f000 fb28 	bl	4fdc <PkaCopyDataIntoPkaReg>
    498c:	2308      	movs	r3, #8
    498e:	463a      	mov	r2, r7
    4990:	2101      	movs	r1, #1
    4992:	2003      	movs	r0, #3
    4994:	f000 fb22 	bl	4fdc <PkaCopyDataIntoPkaReg>
    4998:	4622      	mov	r2, r4
    499a:	2308      	movs	r3, #8
    499c:	2101      	movs	r1, #1
    499e:	2002      	movs	r0, #2
    49a0:	f000 fb1c 	bl	4fdc <PkaCopyDataIntoPkaReg>
    49a4:	2308      	movs	r3, #8
    49a6:	4a25      	ldr	r2, [pc, #148]	; (4a3c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    49a8:	2101      	movs	r1, #1
    49aa:	201a      	movs	r0, #26
    49ac:	f000 fb16 	bl	4fdc <PkaCopyDataIntoPkaReg>
    49b0:	2305      	movs	r3, #5
    49b2:	4a23      	ldr	r2, [pc, #140]	; (4a40 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    49b4:	2101      	movs	r1, #1
    49b6:	201b      	movs	r0, #27
    49b8:	f000 fb10 	bl	4fdc <PkaCopyDataIntoPkaReg>
    49bc:	2308      	movs	r3, #8
    49be:	4a21      	ldr	r2, [pc, #132]	; (4a44 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    49c0:	2101      	movs	r1, #1
    49c2:	2014      	movs	r0, #20
    49c4:	f000 fb0a 	bl	4fdc <PkaCopyDataIntoPkaReg>
    49c8:	2308      	movs	r3, #8
    49ca:	4a1f      	ldr	r2, [pc, #124]	; (4a48 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    49cc:	2101      	movs	r1, #1
    49ce:	2015      	movs	r0, #21
    49d0:	f000 fb04 	bl	4fdc <PkaCopyDataIntoPkaReg>
    49d4:	2308      	movs	r3, #8
    49d6:	f105 0264 	add.w	r2, r5, #100	; 0x64
    49da:	2101      	movs	r1, #1
    49dc:	2016      	movs	r0, #22
    49de:	f000 fafd 	bl	4fdc <PkaCopyDataIntoPkaReg>
    49e2:	2308      	movs	r3, #8
    49e4:	f105 0284 	add.w	r2, r5, #132	; 0x84
    49e8:	2101      	movs	r1, #1
    49ea:	2017      	movs	r0, #23
    49ec:	f000 faf6 	bl	4fdc <PkaCopyDataIntoPkaReg>
    49f0:	2308      	movs	r3, #8
    49f2:	4a16      	ldr	r2, [pc, #88]	; (4a4c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    49f4:	2101      	movs	r1, #1
    49f6:	200b      	movs	r0, #11
    49f8:	f000 faf0 	bl	4fdc <PkaCopyDataIntoPkaReg>
    49fc:	f000 fb4a 	bl	5094 <PkaEcdsaVerify>
    4a00:	4604      	mov	r4, r0
    4a02:	9801      	ldr	r0, [sp, #4]
    4a04:	f000 fad8 	bl	4fb8 <PkaFinishAndMutexUnlock>
    4a08:	4b11      	ldr	r3, [pc, #68]	; (4a50 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    4a0a:	2c00      	cmp	r4, #0
    4a0c:	bf18      	it	ne
    4a0e:	461c      	movne	r4, r3
    4a10:	21a4      	movs	r1, #164	; 0xa4
    4a12:	4628      	mov	r0, r5
    4a14:	f002 fcbb 	bl	738e <SaSi_PalMemSetZero>
    4a18:	4620      	mov	r0, r4
    4a1a:	b003      	add	sp, #12
    4a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4a20:	4c0c      	ldr	r4, [pc, #48]	; (4a54 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    4a22:	e7f9      	b.n	4a18 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4a24:	4c0c      	ldr	r4, [pc, #48]	; (4a58 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    4a26:	e7f7      	b.n	4a18 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4a28:	4c0c      	ldr	r4, [pc, #48]	; (4a5c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    4a2a:	e7f5      	b.n	4a18 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4a2c:	4c08      	ldr	r4, [pc, #32]	; (4a50 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    4a2e:	e7ef      	b.n	4a10 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    4a30:	50841090 	.word	0x50841090
    4a34:	00007994 	.word	0x00007994
    4a38:	00007a0c 	.word	0x00007a0c
    4a3c:	00007954 	.word	0x00007954
    4a40:	000079f8 	.word	0x000079f8
    4a44:	000079b8 	.word	0x000079b8
    4a48:	000079d8 	.word	0x000079d8
    4a4c:	00007974 	.word	0x00007974
    4a50:	00f00884 	.word	0x00f00884
    4a54:	00f00876 	.word	0x00f00876
    4a58:	00f00880 	.word	0x00f00880
    4a5c:	00f00881 	.word	0x00f00881

00004a60 <set_digest_in_hw_sha256>:
    4a60:	69c2      	ldr	r2, [r0, #28]
    4a62:	4b0c      	ldr	r3, [pc, #48]	; (4a94 <set_digest_in_hw_sha256+0x34>)
    4a64:	601a      	str	r2, [r3, #0]
    4a66:	6982      	ldr	r2, [r0, #24]
    4a68:	f843 2c04 	str.w	r2, [r3, #-4]
    4a6c:	6942      	ldr	r2, [r0, #20]
    4a6e:	f843 2c08 	str.w	r2, [r3, #-8]
    4a72:	6902      	ldr	r2, [r0, #16]
    4a74:	f843 2c0c 	str.w	r2, [r3, #-12]
    4a78:	68c2      	ldr	r2, [r0, #12]
    4a7a:	f843 2c10 	str.w	r2, [r3, #-16]
    4a7e:	6882      	ldr	r2, [r0, #8]
    4a80:	f843 2c14 	str.w	r2, [r3, #-20]
    4a84:	6842      	ldr	r2, [r0, #4]
    4a86:	f843 2c18 	str.w	r2, [r3, #-24]
    4a8a:	6802      	ldr	r2, [r0, #0]
    4a8c:	f843 2c1c 	str.w	r2, [r3, #-28]
    4a90:	4770      	bx	lr
    4a92:	bf00      	nop
    4a94:	5084165c 	.word	0x5084165c

00004a98 <read_digest_in_hw_sha256>:
    4a98:	4b0c      	ldr	r3, [pc, #48]	; (4acc <read_digest_in_hw_sha256+0x34>)
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	61c3      	str	r3, [r0, #28]
    4a9e:	4b0c      	ldr	r3, [pc, #48]	; (4ad0 <read_digest_in_hw_sha256+0x38>)
    4aa0:	681b      	ldr	r3, [r3, #0]
    4aa2:	6183      	str	r3, [r0, #24]
    4aa4:	4b0b      	ldr	r3, [pc, #44]	; (4ad4 <read_digest_in_hw_sha256+0x3c>)
    4aa6:	681b      	ldr	r3, [r3, #0]
    4aa8:	6143      	str	r3, [r0, #20]
    4aaa:	4b0b      	ldr	r3, [pc, #44]	; (4ad8 <read_digest_in_hw_sha256+0x40>)
    4aac:	681b      	ldr	r3, [r3, #0]
    4aae:	6103      	str	r3, [r0, #16]
    4ab0:	4b0a      	ldr	r3, [pc, #40]	; (4adc <read_digest_in_hw_sha256+0x44>)
    4ab2:	681b      	ldr	r3, [r3, #0]
    4ab4:	60c3      	str	r3, [r0, #12]
    4ab6:	4b0a      	ldr	r3, [pc, #40]	; (4ae0 <read_digest_in_hw_sha256+0x48>)
    4ab8:	681b      	ldr	r3, [r3, #0]
    4aba:	6083      	str	r3, [r0, #8]
    4abc:	4b09      	ldr	r3, [pc, #36]	; (4ae4 <read_digest_in_hw_sha256+0x4c>)
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	6043      	str	r3, [r0, #4]
    4ac2:	4b09      	ldr	r3, [pc, #36]	; (4ae8 <read_digest_in_hw_sha256+0x50>)
    4ac4:	681b      	ldr	r3, [r3, #0]
    4ac6:	6003      	str	r3, [r0, #0]
    4ac8:	4770      	bx	lr
    4aca:	bf00      	nop
    4acc:	5084165c 	.word	0x5084165c
    4ad0:	50841658 	.word	0x50841658
    4ad4:	50841654 	.word	0x50841654
    4ad8:	50841650 	.word	0x50841650
    4adc:	5084164c 	.word	0x5084164c
    4ae0:	50841648 	.word	0x50841648
    4ae4:	50841644 	.word	0x50841644
    4ae8:	50841640 	.word	0x50841640

00004aec <verify_context_hash_sha256>:
    4aec:	b130      	cbz	r0, 4afc <verify_context_hash_sha256+0x10>
    4aee:	6802      	ldr	r2, [r0, #0]
    4af0:	4b03      	ldr	r3, [pc, #12]	; (4b00 <verify_context_hash_sha256+0x14>)
    4af2:	4804      	ldr	r0, [pc, #16]	; (4b04 <verify_context_hash_sha256+0x18>)
    4af4:	429a      	cmp	r2, r3
    4af6:	bf08      	it	eq
    4af8:	2000      	moveq	r0, #0
    4afa:	4770      	bx	lr
    4afc:	4802      	ldr	r0, [pc, #8]	; (4b08 <verify_context_hash_sha256+0x1c>)
    4afe:	4770      	bx	lr
    4b00:	bbaa55dd 	.word	0xbbaa55dd
    4b04:	00f00202 	.word	0x00f00202
    4b08:	00f00200 	.word	0x00f00200

00004b0c <nrf_cc310_bl_hash_sha256_init>:
    4b0c:	b538      	push	{r3, r4, r5, lr}
    4b0e:	4604      	mov	r4, r0
    4b10:	b168      	cbz	r0, 4b2e <nrf_cc310_bl_hash_sha256_init+0x22>
    4b12:	1d05      	adds	r5, r0, #4
    4b14:	2170      	movs	r1, #112	; 0x70
    4b16:	4628      	mov	r0, r5
    4b18:	f002 fc39 	bl	738e <SaSi_PalMemSetZero>
    4b1c:	4628      	mov	r0, r5
    4b1e:	2220      	movs	r2, #32
    4b20:	4904      	ldr	r1, [pc, #16]	; (4b34 <nrf_cc310_bl_hash_sha256_init+0x28>)
    4b22:	f002 fc30 	bl	7386 <SaSi_PalMemCopy>
    4b26:	2000      	movs	r0, #0
    4b28:	4b03      	ldr	r3, [pc, #12]	; (4b38 <nrf_cc310_bl_hash_sha256_init+0x2c>)
    4b2a:	6023      	str	r3, [r4, #0]
    4b2c:	bd38      	pop	{r3, r4, r5, pc}
    4b2e:	4803      	ldr	r0, [pc, #12]	; (4b3c <nrf_cc310_bl_hash_sha256_init+0x30>)
    4b30:	e7fc      	b.n	4b2c <nrf_cc310_bl_hash_sha256_init+0x20>
    4b32:	bf00      	nop
    4b34:	00007a20 	.word	0x00007a20
    4b38:	bbaa55dd 	.word	0xbbaa55dd
    4b3c:	00f00200 	.word	0x00f00200

00004b40 <nrf_cc310_bl_hash_sha256_update>:
    4b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b44:	b085      	sub	sp, #20
    4b46:	4615      	mov	r5, r2
    4b48:	466f      	mov	r7, sp
    4b4a:	4b27      	ldr	r3, [pc, #156]	; (4be8 <nrf_cc310_bl_hash_sha256_update+0xa8>)
    4b4c:	4604      	mov	r4, r0
    4b4e:	460e      	mov	r6, r1
    4b50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4b52:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    4b56:	b92d      	cbnz	r5, 4b64 <nrf_cc310_bl_hash_sha256_update+0x24>
    4b58:	f04f 0900 	mov.w	r9, #0
    4b5c:	4648      	mov	r0, r9
    4b5e:	b005      	add	sp, #20
    4b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4b64:	4620      	mov	r0, r4
    4b66:	f7ff ffc1 	bl	4aec <verify_context_hash_sha256>
    4b6a:	4681      	mov	r9, r0
    4b6c:	2800      	cmp	r0, #0
    4b6e:	d1f5      	bne.n	4b5c <nrf_cc310_bl_hash_sha256_update+0x1c>
    4b70:	1d23      	adds	r3, r4, #4
    4b72:	9301      	str	r3, [sp, #4]
    4b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b76:	bba3      	cbnz	r3, 4be2 <nrf_cc310_bl_hash_sha256_update+0xa2>
    4b78:	6f23      	ldr	r3, [r4, #112]	; 0x70
    4b7a:	b18b      	cbz	r3, 4ba0 <nrf_cc310_bl_hash_sha256_update+0x60>
    4b7c:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    4b80:	45a8      	cmp	r8, r5
    4b82:	bf28      	it	cs
    4b84:	46a8      	movcs	r8, r5
    4b86:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4b8a:	4631      	mov	r1, r6
    4b8c:	4418      	add	r0, r3
    4b8e:	4642      	mov	r2, r8
    4b90:	f002 fbf9 	bl	7386 <SaSi_PalMemCopy>
    4b94:	6f23      	ldr	r3, [r4, #112]	; 0x70
    4b96:	4446      	add	r6, r8
    4b98:	4443      	add	r3, r8
    4b9a:	6723      	str	r3, [r4, #112]	; 0x70
    4b9c:	eba5 0508 	sub.w	r5, r5, r8
    4ba0:	6f22      	ldr	r2, [r4, #112]	; 0x70
    4ba2:	2a40      	cmp	r2, #64	; 0x40
    4ba4:	d106      	bne.n	4bb4 <nrf_cc310_bl_hash_sha256_update+0x74>
    4ba6:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4baa:	4638      	mov	r0, r7
    4bac:	f000 fbb4 	bl	5318 <nrf_cc310_bl_hash_update_internal>
    4bb0:	2300      	movs	r3, #0
    4bb2:	6723      	str	r3, [r4, #112]	; 0x70
    4bb4:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    4bb8:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    4bbc:	d005      	beq.n	4bca <nrf_cc310_bl_hash_sha256_update+0x8a>
    4bbe:	4631      	mov	r1, r6
    4bc0:	462a      	mov	r2, r5
    4bc2:	4638      	mov	r0, r7
    4bc4:	f000 fba8 	bl	5318 <nrf_cc310_bl_hash_update_internal>
    4bc8:	442e      	add	r6, r5
    4bca:	f1b8 0f00 	cmp.w	r8, #0
    4bce:	d0c3      	beq.n	4b58 <nrf_cc310_bl_hash_sha256_update+0x18>
    4bd0:	4642      	mov	r2, r8
    4bd2:	4631      	mov	r1, r6
    4bd4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4bd8:	f002 fbd5 	bl	7386 <SaSi_PalMemCopy>
    4bdc:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    4be0:	e7bc      	b.n	4b5c <nrf_cc310_bl_hash_sha256_update+0x1c>
    4be2:	f8df 9008 	ldr.w	r9, [pc, #8]	; 4bec <nrf_cc310_bl_hash_sha256_update+0xac>
    4be6:	e7b9      	b.n	4b5c <nrf_cc310_bl_hash_sha256_update+0x1c>
    4be8:	000076b0 	.word	0x000076b0
    4bec:	00f0020c 	.word	0x00f0020c

00004bf0 <nrf_cc310_bl_hash_sha256_finalize>:
    4bf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4bf4:	4604      	mov	r4, r0
    4bf6:	466f      	mov	r7, sp
    4bf8:	4b13      	ldr	r3, [pc, #76]	; (4c48 <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    4bfa:	460e      	mov	r6, r1
    4bfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4bfe:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    4c02:	4620      	mov	r0, r4
    4c04:	f7ff ff72 	bl	4aec <verify_context_hash_sha256>
    4c08:	4680      	mov	r8, r0
    4c0a:	b9b0      	cbnz	r0, 4c3a <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    4c0c:	b1ce      	cbz	r6, 4c42 <nrf_cc310_bl_hash_sha256_finalize+0x52>
    4c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c10:	1d25      	adds	r5, r4, #4
    4c12:	9501      	str	r5, [sp, #4]
    4c14:	b93b      	cbnz	r3, 4c26 <nrf_cc310_bl_hash_sha256_finalize+0x36>
    4c16:	2301      	movs	r3, #1
    4c18:	6f22      	ldr	r2, [r4, #112]	; 0x70
    4c1a:	6263      	str	r3, [r4, #36]	; 0x24
    4c1c:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4c20:	4638      	mov	r0, r7
    4c22:	f000 fb79 	bl	5318 <nrf_cc310_bl_hash_update_internal>
    4c26:	462b      	mov	r3, r5
    4c28:	3e04      	subs	r6, #4
    4c2a:	3424      	adds	r4, #36	; 0x24
    4c2c:	f853 2b04 	ldr.w	r2, [r3], #4
    4c30:	ba12      	rev	r2, r2
    4c32:	42a3      	cmp	r3, r4
    4c34:	f846 2f04 	str.w	r2, [r6, #4]!
    4c38:	d1f8      	bne.n	4c2c <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    4c3a:	4640      	mov	r0, r8
    4c3c:	b004      	add	sp, #16
    4c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c42:	f8df 8008 	ldr.w	r8, [pc, #8]	; 4c4c <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    4c46:	e7f8      	b.n	4c3a <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    4c48:	000076b0 	.word	0x000076b0
    4c4c:	00f00205 	.word	0x00f00205

00004c50 <nrf_cc310_bl_init>:
    4c50:	4b08      	ldr	r3, [pc, #32]	; (4c74 <nrf_cc310_bl_init+0x24>)
    4c52:	681b      	ldr	r3, [r3, #0]
    4c54:	0e1b      	lsrs	r3, r3, #24
    4c56:	2bf0      	cmp	r3, #240	; 0xf0
    4c58:	d108      	bne.n	4c6c <nrf_cc310_bl_init+0x1c>
    4c5a:	4b07      	ldr	r3, [pc, #28]	; (4c78 <nrf_cc310_bl_init+0x28>)
    4c5c:	681a      	ldr	r2, [r3, #0]
    4c5e:	4b07      	ldr	r3, [pc, #28]	; (4c7c <nrf_cc310_bl_init+0x2c>)
    4c60:	429a      	cmp	r2, r3
    4c62:	d105      	bne.n	4c70 <nrf_cc310_bl_init+0x20>
    4c64:	2000      	movs	r0, #0
    4c66:	4b06      	ldr	r3, [pc, #24]	; (4c80 <nrf_cc310_bl_init+0x30>)
    4c68:	6018      	str	r0, [r3, #0]
    4c6a:	4770      	bx	lr
    4c6c:	2005      	movs	r0, #5
    4c6e:	4770      	bx	lr
    4c70:	2006      	movs	r0, #6
    4c72:	4770      	bx	lr
    4c74:	50841928 	.word	0x50841928
    4c78:	50841a24 	.word	0x50841a24
    4c7c:	20e00000 	.word	0x20e00000
    4c80:	50841a0c 	.word	0x50841a0c

00004c84 <PkaSetRegsMapTab>:
    4c84:	2200      	movs	r2, #0
    4c86:	b530      	push	{r4, r5, lr}
    4c88:	4613      	mov	r3, r2
    4c8a:	f640 75fc 	movw	r5, #4092	; 0xffc
    4c8e:	0049      	lsls	r1, r1, #1
    4c90:	3802      	subs	r0, #2
    4c92:	f102 54a1 	add.w	r4, r2, #337641472	; 0x14200000
    4c96:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
    4c9a:	4290      	cmp	r0, r2
    4c9c:	ea4f 0484 	mov.w	r4, r4, lsl #2
    4ca0:	f102 0201 	add.w	r2, r2, #1
    4ca4:	bfca      	itet	gt
    4ca6:	6023      	strgt	r3, [r4, #0]
    4ca8:	6025      	strle	r5, [r4, #0]
    4caa:	185b      	addgt	r3, r3, r1
    4cac:	2a1e      	cmp	r2, #30
    4cae:	d1f0      	bne.n	4c92 <PkaSetRegsMapTab+0xe>
    4cb0:	4a03      	ldr	r2, [pc, #12]	; (4cc0 <PkaSetRegsMapTab+0x3c>)
    4cb2:	6013      	str	r3, [r2, #0]
    4cb4:	440b      	add	r3, r1
    4cb6:	6053      	str	r3, [r2, #4]
    4cb8:	4b02      	ldr	r3, [pc, #8]	; (4cc4 <PkaSetRegsMapTab+0x40>)
    4cba:	4a03      	ldr	r2, [pc, #12]	; (4cc8 <PkaSetRegsMapTab+0x44>)
    4cbc:	601a      	str	r2, [r3, #0]
    4cbe:	bd30      	pop	{r4, r5, pc}
    4cc0:	50841078 	.word	0x50841078
    4cc4:	50841084 	.word	0x50841084
    4cc8:	000ff820 	.word	0x000ff820

00004ccc <PkaGetRegEffectiveSizeInBits>:
    4ccc:	4b1e      	ldr	r3, [pc, #120]	; (4d48 <PkaGetRegEffectiveSizeInBits+0x7c>)
    4cce:	b530      	push	{r4, r5, lr}
    4cd0:	461a      	mov	r2, r3
    4cd2:	b085      	sub	sp, #20
    4cd4:	6819      	ldr	r1, [r3, #0]
    4cd6:	9100      	str	r1, [sp, #0]
    4cd8:	9900      	ldr	r1, [sp, #0]
    4cda:	07cc      	lsls	r4, r1, #31
    4cdc:	d5fa      	bpl.n	4cd4 <PkaGetRegEffectiveSizeInBits+0x8>
    4cde:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4ce2:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4ce6:	0080      	lsls	r0, r0, #2
    4ce8:	6801      	ldr	r1, [r0, #0]
    4cea:	6813      	ldr	r3, [r2, #0]
    4cec:	9301      	str	r3, [sp, #4]
    4cee:	9b01      	ldr	r3, [sp, #4]
    4cf0:	07d8      	lsls	r0, r3, #31
    4cf2:	d5fa      	bpl.n	4cea <PkaGetRegEffectiveSizeInBits+0x1e>
    4cf4:	4b15      	ldr	r3, [pc, #84]	; (4d4c <PkaGetRegEffectiveSizeInBits+0x80>)
    4cf6:	4c16      	ldr	r4, [pc, #88]	; (4d50 <PkaGetRegEffectiveSizeInBits+0x84>)
    4cf8:	6818      	ldr	r0, [r3, #0]
    4cfa:	2320      	movs	r3, #32
    4cfc:	301f      	adds	r0, #31
    4cfe:	fb90 f0f3 	sdiv	r0, r0, r3
    4d02:	4d14      	ldr	r5, [pc, #80]	; (4d54 <PkaGetRegEffectiveSizeInBits+0x88>)
    4d04:	3801      	subs	r0, #1
    4d06:	2800      	cmp	r0, #0
    4d08:	da10      	bge.n	4d2c <PkaGetRegEffectiveSizeInBits+0x60>
    4d0a:	2300      	movs	r3, #0
    4d0c:	3001      	adds	r0, #1
    4d0e:	0140      	lsls	r0, r0, #5
    4d10:	b153      	cbz	r3, 4d28 <PkaGetRegEffectiveSizeInBits+0x5c>
    4d12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4d16:	f1a0 0120 	sub.w	r1, r0, #32
    4d1a:	4213      	tst	r3, r2
    4d1c:	d104      	bne.n	4d28 <PkaGetRegEffectiveSizeInBits+0x5c>
    4d1e:	3801      	subs	r0, #1
    4d20:	4288      	cmp	r0, r1
    4d22:	ea4f 0252 	mov.w	r2, r2, lsr #1
    4d26:	d1f8      	bne.n	4d1a <PkaGetRegEffectiveSizeInBits+0x4e>
    4d28:	b005      	add	sp, #20
    4d2a:	bd30      	pop	{r4, r5, pc}
    4d2c:	6813      	ldr	r3, [r2, #0]
    4d2e:	9303      	str	r3, [sp, #12]
    4d30:	9b03      	ldr	r3, [sp, #12]
    4d32:	07db      	lsls	r3, r3, #31
    4d34:	d5fa      	bpl.n	4d2c <PkaGetRegEffectiveSizeInBits+0x60>
    4d36:	1843      	adds	r3, r0, r1
    4d38:	6023      	str	r3, [r4, #0]
    4d3a:	682b      	ldr	r3, [r5, #0]
    4d3c:	9302      	str	r3, [sp, #8]
    4d3e:	9b02      	ldr	r3, [sp, #8]
    4d40:	2b00      	cmp	r3, #0
    4d42:	d1e3      	bne.n	4d0c <PkaGetRegEffectiveSizeInBits+0x40>
    4d44:	3801      	subs	r0, #1
    4d46:	e7de      	b.n	4d06 <PkaGetRegEffectiveSizeInBits+0x3a>
    4d48:	508410b4 	.word	0x508410b4
    4d4c:	508410ac 	.word	0x508410ac
    4d50:	508410e4 	.word	0x508410e4
    4d54:	508410dc 	.word	0x508410dc

00004d58 <PkaGetNextMsBit>:
    4d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d5a:	681d      	ldr	r5, [r3, #0]
    4d5c:	b085      	sub	sp, #20
    4d5e:	f001 041f 	and.w	r4, r1, #31
    4d62:	b90d      	cbnz	r5, 4d68 <PkaGetNextMsBit+0x10>
    4d64:	2c1f      	cmp	r4, #31
    4d66:	d128      	bne.n	4dba <PkaGetNextMsBit+0x62>
    4d68:	4d17      	ldr	r5, [pc, #92]	; (4dc8 <PkaGetNextMsBit+0x70>)
    4d6a:	462e      	mov	r6, r5
    4d6c:	682f      	ldr	r7, [r5, #0]
    4d6e:	9701      	str	r7, [sp, #4]
    4d70:	9f01      	ldr	r7, [sp, #4]
    4d72:	07ff      	lsls	r7, r7, #31
    4d74:	d5fa      	bpl.n	4d6c <PkaGetNextMsBit+0x14>
    4d76:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4d7a:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4d7e:	0080      	lsls	r0, r0, #2
    4d80:	6800      	ldr	r0, [r0, #0]
    4d82:	6835      	ldr	r5, [r6, #0]
    4d84:	9503      	str	r5, [sp, #12]
    4d86:	9d03      	ldr	r5, [sp, #12]
    4d88:	07ed      	lsls	r5, r5, #31
    4d8a:	d5fa      	bpl.n	4d82 <PkaGetNextMsBit+0x2a>
    4d8c:	2c1f      	cmp	r4, #31
    4d8e:	eb00 1061 	add.w	r0, r0, r1, asr #5
    4d92:	bf18      	it	ne
    4d94:	43c9      	mvnne	r1, r1
    4d96:	4d0d      	ldr	r5, [pc, #52]	; (4dcc <PkaGetNextMsBit+0x74>)
    4d98:	bf18      	it	ne
    4d9a:	f001 011f 	andne.w	r1, r1, #31
    4d9e:	6028      	str	r0, [r5, #0]
    4da0:	480b      	ldr	r0, [pc, #44]	; (4dd0 <PkaGetNextMsBit+0x78>)
    4da2:	6800      	ldr	r0, [r0, #0]
    4da4:	9002      	str	r0, [sp, #8]
    4da6:	9802      	ldr	r0, [sp, #8]
    4da8:	bf1c      	itt	ne
    4daa:	fa00 f101 	lslne.w	r1, r0, r1
    4dae:	6011      	strne	r1, [r2, #0]
    4db0:	f04f 0100 	mov.w	r1, #0
    4db4:	bf08      	it	eq
    4db6:	6010      	streq	r0, [r2, #0]
    4db8:	6019      	str	r1, [r3, #0]
    4dba:	6810      	ldr	r0, [r2, #0]
    4dbc:	0043      	lsls	r3, r0, #1
    4dbe:	0fc0      	lsrs	r0, r0, #31
    4dc0:	6013      	str	r3, [r2, #0]
    4dc2:	b005      	add	sp, #20
    4dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dc6:	bf00      	nop
    4dc8:	508410b4 	.word	0x508410b4
    4dcc:	508410e4 	.word	0x508410e4
    4dd0:	508410dc 	.word	0x508410dc

00004dd4 <PkaSetRegsSizesTab>:
    4dd4:	4b0c      	ldr	r3, [pc, #48]	; (4e08 <PkaSetRegsSizesTab+0x34>)
    4dd6:	0189      	lsls	r1, r1, #6
    4dd8:	6018      	str	r0, [r3, #0]
    4dda:	303f      	adds	r0, #63	; 0x3f
    4ddc:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    4de0:	3040      	adds	r0, #64	; 0x40
    4de2:	6058      	str	r0, [r3, #4]
    4de4:	6099      	str	r1, [r3, #8]
    4de6:	4809      	ldr	r0, [pc, #36]	; (4e0c <PkaSetRegsSizesTab+0x38>)
    4de8:	60d9      	str	r1, [r3, #12]
    4dea:	6119      	str	r1, [r3, #16]
    4dec:	6159      	str	r1, [r3, #20]
    4dee:	6199      	str	r1, [r3, #24]
    4df0:	331c      	adds	r3, #28
    4df2:	b082      	sub	sp, #8
    4df4:	6019      	str	r1, [r3, #0]
    4df6:	6802      	ldr	r2, [r0, #0]
    4df8:	9201      	str	r2, [sp, #4]
    4dfa:	9a01      	ldr	r2, [sp, #4]
    4dfc:	07d2      	lsls	r2, r2, #31
    4dfe:	d5fa      	bpl.n	4df6 <PkaSetRegsSizesTab+0x22>
    4e00:	6019      	str	r1, [r3, #0]
    4e02:	b002      	add	sp, #8
    4e04:	4770      	bx	lr
    4e06:	bf00      	nop
    4e08:	50841090 	.word	0x50841090
    4e0c:	508410b4 	.word	0x508410b4

00004e10 <PkaInitPka>:
    4e10:	b538      	push	{r3, r4, r5, lr}
    4e12:	f1a0 0320 	sub.w	r3, r0, #32
    4e16:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    4e1a:	4605      	mov	r5, r0
    4e1c:	d82c      	bhi.n	4e78 <PkaInitPka+0x68>
    4e1e:	288f      	cmp	r0, #143	; 0x8f
    4e20:	d826      	bhi.n	4e70 <PkaInitPka+0x60>
    4e22:	f100 0347 	add.w	r3, r0, #71	; 0x47
    4e26:	f100 0466 	add.w	r4, r0, #102	; 0x66
    4e2a:	06db      	lsls	r3, r3, #27
    4e2c:	ea4f 1454 	mov.w	r4, r4, lsr #5
    4e30:	d000      	beq.n	4e34 <PkaInitPka+0x24>
    4e32:	3401      	adds	r4, #1
    4e34:	0164      	lsls	r4, r4, #5
    4e36:	343f      	adds	r4, #63	; 0x3f
    4e38:	09a4      	lsrs	r4, r4, #6
    4e3a:	3401      	adds	r4, #1
    4e3c:	b111      	cbz	r1, 4e44 <PkaInitPka+0x34>
    4e3e:	42a1      	cmp	r1, r4
    4e40:	d31a      	bcc.n	4e78 <PkaInitPka+0x68>
    4e42:	460c      	mov	r4, r1
    4e44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4e48:	00e3      	lsls	r3, r4, #3
    4e4a:	fbb0 f0f3 	udiv	r0, r0, r3
    4e4e:	2820      	cmp	r0, #32
    4e50:	bf28      	it	cs
    4e52:	2020      	movcs	r0, #32
    4e54:	b102      	cbz	r2, 4e58 <PkaInitPka+0x48>
    4e56:	6010      	str	r0, [r2, #0]
    4e58:	2201      	movs	r2, #1
    4e5a:	4b08      	ldr	r3, [pc, #32]	; (4e7c <PkaInitPka+0x6c>)
    4e5c:	4621      	mov	r1, r4
    4e5e:	601a      	str	r2, [r3, #0]
    4e60:	f7ff ff10 	bl	4c84 <PkaSetRegsMapTab>
    4e64:	4628      	mov	r0, r5
    4e66:	4621      	mov	r1, r4
    4e68:	f7ff ffb4 	bl	4dd4 <PkaSetRegsSizesTab>
    4e6c:	2000      	movs	r0, #0
    4e6e:	bd38      	pop	{r3, r4, r5, pc}
    4e70:	f100 041f 	add.w	r4, r0, #31
    4e74:	0964      	lsrs	r4, r4, #5
    4e76:	e7dd      	b.n	4e34 <PkaInitPka+0x24>
    4e78:	4801      	ldr	r0, [pc, #4]	; (4e80 <PkaInitPka+0x70>)
    4e7a:	e7f8      	b.n	4e6e <PkaInitPka+0x5e>
    4e7c:	5084181c 	.word	0x5084181c
    4e80:	00f02122 	.word	0x00f02122

00004e84 <PkaClearBlockOfRegs>:
    4e84:	4b46      	ldr	r3, [pc, #280]	; (4fa0 <PkaClearBlockOfRegs+0x11c>)
    4e86:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e88:	461d      	mov	r5, r3
    4e8a:	b089      	sub	sp, #36	; 0x24
    4e8c:	681c      	ldr	r4, [r3, #0]
    4e8e:	9401      	str	r4, [sp, #4]
    4e90:	9c01      	ldr	r4, [sp, #4]
    4e92:	07e4      	lsls	r4, r4, #31
    4e94:	d5fa      	bpl.n	4e8c <PkaClearBlockOfRegs+0x8>
    4e96:	4b43      	ldr	r3, [pc, #268]	; (4fa4 <PkaClearBlockOfRegs+0x120>)
    4e98:	2400      	movs	r4, #0
    4e9a:	4413      	add	r3, r2
    4e9c:	009b      	lsls	r3, r3, #2
    4e9e:	681a      	ldr	r2, [r3, #0]
    4ea0:	180b      	adds	r3, r1, r0
    4ea2:	2b1e      	cmp	r3, #30
    4ea4:	bf88      	it	hi
    4ea6:	f1c0 011e 	rsbhi	r1, r0, #30
    4eaa:	321f      	adds	r2, #31
    4eac:	180b      	adds	r3, r1, r0
    4eae:	0952      	lsrs	r2, r2, #5
    4eb0:	4353      	muls	r3, r2
    4eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4eb6:	bf84      	itt	hi
    4eb8:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    4ebc:	fbb1 f1f2 	udivhi	r1, r1, r2
    4ec0:	4627      	mov	r7, r4
    4ec2:	bf88      	it	hi
    4ec4:	1a09      	subhi	r1, r1, r0
    4ec6:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 4fac <PkaClearBlockOfRegs+0x128>
    4eca:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4ece:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 4fb0 <PkaClearBlockOfRegs+0x12c>
    4ed2:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4ed6:	42a1      	cmp	r1, r4
    4ed8:	dc33      	bgt.n	4f42 <PkaClearBlockOfRegs+0xbe>
    4eda:	682b      	ldr	r3, [r5, #0]
    4edc:	9304      	str	r3, [sp, #16]
    4ede:	9b04      	ldr	r3, [sp, #16]
    4ee0:	07db      	lsls	r3, r3, #31
    4ee2:	d5fa      	bpl.n	4eda <PkaClearBlockOfRegs+0x56>
    4ee4:	4b30      	ldr	r3, [pc, #192]	; (4fa8 <PkaClearBlockOfRegs+0x124>)
    4ee6:	681b      	ldr	r3, [r3, #0]
    4ee8:	6829      	ldr	r1, [r5, #0]
    4eea:	9105      	str	r1, [sp, #20]
    4eec:	9905      	ldr	r1, [sp, #20]
    4eee:	07cf      	lsls	r7, r1, #31
    4ef0:	d5fa      	bpl.n	4ee8 <PkaClearBlockOfRegs+0x64>
    4ef2:	4c2e      	ldr	r4, [pc, #184]	; (4fac <PkaClearBlockOfRegs+0x128>)
    4ef4:	492e      	ldr	r1, [pc, #184]	; (4fb0 <PkaClearBlockOfRegs+0x12c>)
    4ef6:	6023      	str	r3, [r4, #0]
    4ef8:	2300      	movs	r3, #0
    4efa:	461e      	mov	r6, r3
    4efc:	4293      	cmp	r3, r2
    4efe:	f103 0001 	add.w	r0, r3, #1
    4f02:	d140      	bne.n	4f86 <PkaClearBlockOfRegs+0x102>
    4f04:	4619      	mov	r1, r3
    4f06:	2600      	movs	r6, #0
    4f08:	f020 0201 	bic.w	r2, r0, #1
    4f0c:	4828      	ldr	r0, [pc, #160]	; (4fb0 <PkaClearBlockOfRegs+0x12c>)
    4f0e:	428a      	cmp	r2, r1
    4f10:	d83c      	bhi.n	4f8c <PkaClearBlockOfRegs+0x108>
    4f12:	6829      	ldr	r1, [r5, #0]
    4f14:	9106      	str	r1, [sp, #24]
    4f16:	9906      	ldr	r1, [sp, #24]
    4f18:	07ce      	lsls	r6, r1, #31
    4f1a:	d5fa      	bpl.n	4f12 <PkaClearBlockOfRegs+0x8e>
    4f1c:	4925      	ldr	r1, [pc, #148]	; (4fb4 <PkaClearBlockOfRegs+0x130>)
    4f1e:	6809      	ldr	r1, [r1, #0]
    4f20:	6828      	ldr	r0, [r5, #0]
    4f22:	9007      	str	r0, [sp, #28]
    4f24:	9807      	ldr	r0, [sp, #28]
    4f26:	07c0      	lsls	r0, r0, #31
    4f28:	d5fa      	bpl.n	4f20 <PkaClearBlockOfRegs+0x9c>
    4f2a:	6021      	str	r1, [r4, #0]
    4f2c:	2100      	movs	r1, #0
    4f2e:	460c      	mov	r4, r1
    4f30:	481f      	ldr	r0, [pc, #124]	; (4fb0 <PkaClearBlockOfRegs+0x12c>)
    4f32:	428b      	cmp	r3, r1
    4f34:	d12d      	bne.n	4f92 <PkaClearBlockOfRegs+0x10e>
    4f36:	2000      	movs	r0, #0
    4f38:	491d      	ldr	r1, [pc, #116]	; (4fb0 <PkaClearBlockOfRegs+0x12c>)
    4f3a:	429a      	cmp	r2, r3
    4f3c:	d82c      	bhi.n	4f98 <PkaClearBlockOfRegs+0x114>
    4f3e:	b009      	add	sp, #36	; 0x24
    4f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f42:	682b      	ldr	r3, [r5, #0]
    4f44:	9302      	str	r3, [sp, #8]
    4f46:	9b02      	ldr	r3, [sp, #8]
    4f48:	07db      	lsls	r3, r3, #31
    4f4a:	d5fa      	bpl.n	4f42 <PkaClearBlockOfRegs+0xbe>
    4f4c:	1903      	adds	r3, r0, r4
    4f4e:	009b      	lsls	r3, r3, #2
    4f50:	681b      	ldr	r3, [r3, #0]
    4f52:	682e      	ldr	r6, [r5, #0]
    4f54:	9603      	str	r6, [sp, #12]
    4f56:	9e03      	ldr	r6, [sp, #12]
    4f58:	07f6      	lsls	r6, r6, #31
    4f5a:	d5fa      	bpl.n	4f52 <PkaClearBlockOfRegs+0xce>
    4f5c:	f8ce 3000 	str.w	r3, [lr]
    4f60:	2300      	movs	r3, #0
    4f62:	4293      	cmp	r3, r2
    4f64:	f103 0301 	add.w	r3, r3, #1
    4f68:	d106      	bne.n	4f78 <PkaClearBlockOfRegs+0xf4>
    4f6a:	4616      	mov	r6, r2
    4f6c:	f023 0301 	bic.w	r3, r3, #1
    4f70:	42b3      	cmp	r3, r6
    4f72:	d804      	bhi.n	4f7e <PkaClearBlockOfRegs+0xfa>
    4f74:	3401      	adds	r4, #1
    4f76:	e7ae      	b.n	4ed6 <PkaClearBlockOfRegs+0x52>
    4f78:	f8cc 7000 	str.w	r7, [ip]
    4f7c:	e7f1      	b.n	4f62 <PkaClearBlockOfRegs+0xde>
    4f7e:	f8cc 7000 	str.w	r7, [ip]
    4f82:	3601      	adds	r6, #1
    4f84:	e7f4      	b.n	4f70 <PkaClearBlockOfRegs+0xec>
    4f86:	600e      	str	r6, [r1, #0]
    4f88:	4603      	mov	r3, r0
    4f8a:	e7b7      	b.n	4efc <PkaClearBlockOfRegs+0x78>
    4f8c:	6006      	str	r6, [r0, #0]
    4f8e:	3101      	adds	r1, #1
    4f90:	e7bd      	b.n	4f0e <PkaClearBlockOfRegs+0x8a>
    4f92:	6004      	str	r4, [r0, #0]
    4f94:	3101      	adds	r1, #1
    4f96:	e7cc      	b.n	4f32 <PkaClearBlockOfRegs+0xae>
    4f98:	6008      	str	r0, [r1, #0]
    4f9a:	3301      	adds	r3, #1
    4f9c:	e7cd      	b.n	4f3a <PkaClearBlockOfRegs+0xb6>
    4f9e:	bf00      	nop
    4fa0:	508410b4 	.word	0x508410b4
    4fa4:	14210424 	.word	0x14210424
    4fa8:	5084107c 	.word	0x5084107c
    4fac:	508410d4 	.word	0x508410d4
    4fb0:	508410d8 	.word	0x508410d8
    4fb4:	50841078 	.word	0x50841078

00004fb8 <PkaFinishAndMutexUnlock>:
    4fb8:	b508      	push	{r3, lr}
    4fba:	b140      	cbz	r0, 4fce <PkaFinishAndMutexUnlock+0x16>
    4fbc:	2820      	cmp	r0, #32
    4fbe:	4601      	mov	r1, r0
    4fc0:	f04f 0207 	mov.w	r2, #7
    4fc4:	bf28      	it	cs
    4fc6:	2120      	movcs	r1, #32
    4fc8:	2000      	movs	r0, #0
    4fca:	f7ff ff5b 	bl	4e84 <PkaClearBlockOfRegs>
    4fce:	2200      	movs	r2, #0
    4fd0:	4b01      	ldr	r3, [pc, #4]	; (4fd8 <PkaFinishAndMutexUnlock+0x20>)
    4fd2:	601a      	str	r2, [r3, #0]
    4fd4:	bd08      	pop	{r3, pc}
    4fd6:	bf00      	nop
    4fd8:	5084181c 	.word	0x5084181c

00004fdc <PkaCopyDataIntoPkaReg>:
    4fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fde:	4d29      	ldr	r5, [pc, #164]	; (5084 <PkaCopyDataIntoPkaReg+0xa8>)
    4fe0:	b085      	sub	sp, #20
    4fe2:	462c      	mov	r4, r5
    4fe4:	682e      	ldr	r6, [r5, #0]
    4fe6:	9600      	str	r6, [sp, #0]
    4fe8:	9e00      	ldr	r6, [sp, #0]
    4fea:	07f6      	lsls	r6, r6, #31
    4fec:	d5fa      	bpl.n	4fe4 <PkaCopyDataIntoPkaReg+0x8>
    4fee:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4ff2:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4ff6:	0080      	lsls	r0, r0, #2
    4ff8:	6805      	ldr	r5, [r0, #0]
    4ffa:	6820      	ldr	r0, [r4, #0]
    4ffc:	9001      	str	r0, [sp, #4]
    4ffe:	9801      	ldr	r0, [sp, #4]
    5000:	07c7      	lsls	r7, r0, #31
    5002:	d5fa      	bpl.n	4ffa <PkaCopyDataIntoPkaReg+0x1e>
    5004:	4820      	ldr	r0, [pc, #128]	; (5088 <PkaCopyDataIntoPkaReg+0xac>)
    5006:	4f21      	ldr	r7, [pc, #132]	; (508c <PkaCopyDataIntoPkaReg+0xb0>)
    5008:	6005      	str	r5, [r0, #0]
    500a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    500e:	42b2      	cmp	r2, r6
    5010:	d129      	bne.n	5066 <PkaCopyDataIntoPkaReg+0x8a>
    5012:	2700      	movs	r7, #0
    5014:	1c5a      	adds	r2, r3, #1
    5016:	4e1d      	ldr	r6, [pc, #116]	; (508c <PkaCopyDataIntoPkaReg+0xb0>)
    5018:	f022 0201 	bic.w	r2, r2, #1
    501c:	429a      	cmp	r2, r3
    501e:	d827      	bhi.n	5070 <PkaCopyDataIntoPkaReg+0x94>
    5020:	6823      	ldr	r3, [r4, #0]
    5022:	9302      	str	r3, [sp, #8]
    5024:	9b02      	ldr	r3, [sp, #8]
    5026:	07de      	lsls	r6, r3, #31
    5028:	d5fa      	bpl.n	5020 <PkaCopyDataIntoPkaReg+0x44>
    502a:	4b19      	ldr	r3, [pc, #100]	; (5090 <PkaCopyDataIntoPkaReg+0xb4>)
    502c:	440b      	add	r3, r1
    502e:	009b      	lsls	r3, r3, #2
    5030:	681b      	ldr	r3, [r3, #0]
    5032:	331f      	adds	r3, #31
    5034:	095b      	lsrs	r3, r3, #5
    5036:	429a      	cmp	r2, r3
    5038:	d213      	bcs.n	5062 <PkaCopyDataIntoPkaReg+0x86>
    503a:	6821      	ldr	r1, [r4, #0]
    503c:	9103      	str	r1, [sp, #12]
    503e:	9903      	ldr	r1, [sp, #12]
    5040:	07c9      	lsls	r1, r1, #31
    5042:	d5fa      	bpl.n	503a <PkaCopyDataIntoPkaReg+0x5e>
    5044:	2100      	movs	r1, #0
    5046:	4415      	add	r5, r2
    5048:	6005      	str	r5, [r0, #0]
    504a:	4608      	mov	r0, r1
    504c:	1a9b      	subs	r3, r3, r2
    504e:	4a0f      	ldr	r2, [pc, #60]	; (508c <PkaCopyDataIntoPkaReg+0xb0>)
    5050:	428b      	cmp	r3, r1
    5052:	d810      	bhi.n	5076 <PkaCopyDataIntoPkaReg+0x9a>
    5054:	2000      	movs	r0, #0
    5056:	1c5a      	adds	r2, r3, #1
    5058:	490c      	ldr	r1, [pc, #48]	; (508c <PkaCopyDataIntoPkaReg+0xb0>)
    505a:	f022 0201 	bic.w	r2, r2, #1
    505e:	429a      	cmp	r2, r3
    5060:	d80c      	bhi.n	507c <PkaCopyDataIntoPkaReg+0xa0>
    5062:	b005      	add	sp, #20
    5064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5066:	f852 cb04 	ldr.w	ip, [r2], #4
    506a:	f8c7 c000 	str.w	ip, [r7]
    506e:	e7ce      	b.n	500e <PkaCopyDataIntoPkaReg+0x32>
    5070:	6037      	str	r7, [r6, #0]
    5072:	3301      	adds	r3, #1
    5074:	e7d2      	b.n	501c <PkaCopyDataIntoPkaReg+0x40>
    5076:	6010      	str	r0, [r2, #0]
    5078:	3101      	adds	r1, #1
    507a:	e7e9      	b.n	5050 <PkaCopyDataIntoPkaReg+0x74>
    507c:	6008      	str	r0, [r1, #0]
    507e:	3301      	adds	r3, #1
    5080:	e7ed      	b.n	505e <PkaCopyDataIntoPkaReg+0x82>
    5082:	bf00      	nop
    5084:	508410b4 	.word	0x508410b4
    5088:	508410d4 	.word	0x508410d4
    508c:	508410d8 	.word	0x508410d8
    5090:	14210424 	.word	0x14210424

00005094 <PkaEcdsaVerify>:
    5094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5098:	4b81      	ldr	r3, [pc, #516]	; (52a0 <PkaEcdsaVerify+0x20c>)
    509a:	b0a0      	sub	sp, #128	; 0x80
    509c:	681d      	ldr	r5, [r3, #0]
    509e:	6898      	ldr	r0, [r3, #8]
    50a0:	3320      	adds	r3, #32
    50a2:	461e      	mov	r6, r3
    50a4:	681a      	ldr	r2, [r3, #0]
    50a6:	9201      	str	r2, [sp, #4]
    50a8:	9a01      	ldr	r2, [sp, #4]
    50aa:	07d7      	lsls	r7, r2, #31
    50ac:	d5fa      	bpl.n	50a4 <PkaEcdsaVerify+0x10>
    50ae:	4b7d      	ldr	r3, [pc, #500]	; (52a4 <PkaEcdsaVerify+0x210>)
    50b0:	4a7d      	ldr	r2, [pc, #500]	; (52a8 <PkaEcdsaVerify+0x214>)
    50b2:	601a      	str	r2, [r3, #0]
    50b4:	6832      	ldr	r2, [r6, #0]
    50b6:	9202      	str	r2, [sp, #8]
    50b8:	9a02      	ldr	r2, [sp, #8]
    50ba:	07d4      	lsls	r4, r2, #31
    50bc:	d5fa      	bpl.n	50b4 <PkaEcdsaVerify+0x20>
    50be:	4a7b      	ldr	r2, [pc, #492]	; (52ac <PkaEcdsaVerify+0x218>)
    50c0:	601a      	str	r2, [r3, #0]
    50c2:	4a7b      	ldr	r2, [pc, #492]	; (52b0 <PkaEcdsaVerify+0x21c>)
    50c4:	4614      	mov	r4, r2
    50c6:	6811      	ldr	r1, [r2, #0]
    50c8:	9103      	str	r1, [sp, #12]
    50ca:	9903      	ldr	r1, [sp, #12]
    50cc:	07c9      	lsls	r1, r1, #31
    50ce:	d5fa      	bpl.n	50c6 <PkaEcdsaVerify+0x32>
    50d0:	4a78      	ldr	r2, [pc, #480]	; (52b4 <PkaEcdsaVerify+0x220>)
    50d2:	6811      	ldr	r1, [r2, #0]
    50d4:	f3c1 2140 	ubfx	r1, r1, #9, #1
    50d8:	6837      	ldr	r7, [r6, #0]
    50da:	9704      	str	r7, [sp, #16]
    50dc:	9f04      	ldr	r7, [sp, #16]
    50de:	07ff      	lsls	r7, r7, #31
    50e0:	d5fa      	bpl.n	50d8 <PkaEcdsaVerify+0x44>
    50e2:	4f75      	ldr	r7, [pc, #468]	; (52b8 <PkaEcdsaVerify+0x224>)
    50e4:	601f      	str	r7, [r3, #0]
    50e6:	6827      	ldr	r7, [r4, #0]
    50e8:	9705      	str	r7, [sp, #20]
    50ea:	9f05      	ldr	r7, [sp, #20]
    50ec:	07ff      	lsls	r7, r7, #31
    50ee:	d5fa      	bpl.n	50e6 <PkaEcdsaVerify+0x52>
    50f0:	6817      	ldr	r7, [r2, #0]
    50f2:	2900      	cmp	r1, #0
    50f4:	f000 80cf 	beq.w	5296 <PkaEcdsaVerify+0x202>
    50f8:	05b9      	lsls	r1, r7, #22
    50fa:	f140 80cc 	bpl.w	5296 <PkaEcdsaVerify+0x202>
    50fe:	6831      	ldr	r1, [r6, #0]
    5100:	9106      	str	r1, [sp, #24]
    5102:	9906      	ldr	r1, [sp, #24]
    5104:	07cf      	lsls	r7, r1, #31
    5106:	d5fa      	bpl.n	50fe <PkaEcdsaVerify+0x6a>
    5108:	496c      	ldr	r1, [pc, #432]	; (52bc <PkaEcdsaVerify+0x228>)
    510a:	6019      	str	r1, [r3, #0]
    510c:	6821      	ldr	r1, [r4, #0]
    510e:	9107      	str	r1, [sp, #28]
    5110:	9907      	ldr	r1, [sp, #28]
    5112:	07c9      	lsls	r1, r1, #31
    5114:	d5fa      	bpl.n	510c <PkaEcdsaVerify+0x78>
    5116:	6811      	ldr	r1, [r2, #0]
    5118:	f3c1 2140 	ubfx	r1, r1, #9, #1
    511c:	6837      	ldr	r7, [r6, #0]
    511e:	9708      	str	r7, [sp, #32]
    5120:	9f08      	ldr	r7, [sp, #32]
    5122:	07ff      	lsls	r7, r7, #31
    5124:	d5fa      	bpl.n	511c <PkaEcdsaVerify+0x88>
    5126:	4f66      	ldr	r7, [pc, #408]	; (52c0 <PkaEcdsaVerify+0x22c>)
    5128:	601f      	str	r7, [r3, #0]
    512a:	6827      	ldr	r7, [r4, #0]
    512c:	9709      	str	r7, [sp, #36]	; 0x24
    512e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5130:	07ff      	lsls	r7, r7, #31
    5132:	d5fa      	bpl.n	512a <PkaEcdsaVerify+0x96>
    5134:	6812      	ldr	r2, [r2, #0]
    5136:	2900      	cmp	r1, #0
    5138:	f000 80af 	beq.w	529a <PkaEcdsaVerify+0x206>
    513c:	0591      	lsls	r1, r2, #22
    513e:	f140 80ac 	bpl.w	529a <PkaEcdsaVerify+0x206>
    5142:	6832      	ldr	r2, [r6, #0]
    5144:	920a      	str	r2, [sp, #40]	; 0x28
    5146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5148:	07d2      	lsls	r2, r2, #31
    514a:	d5fa      	bpl.n	5142 <PkaEcdsaVerify+0xae>
    514c:	4a56      	ldr	r2, [pc, #344]	; (52a8 <PkaEcdsaVerify+0x214>)
    514e:	601a      	str	r2, [r3, #0]
    5150:	6832      	ldr	r2, [r6, #0]
    5152:	920b      	str	r2, [sp, #44]	; 0x2c
    5154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5156:	07d7      	lsls	r7, r2, #31
    5158:	d5fa      	bpl.n	5150 <PkaEcdsaVerify+0xbc>
    515a:	4a5a      	ldr	r2, [pc, #360]	; (52c4 <PkaEcdsaVerify+0x230>)
    515c:	601a      	str	r2, [r3, #0]
    515e:	6831      	ldr	r1, [r6, #0]
    5160:	910c      	str	r1, [sp, #48]	; 0x30
    5162:	990c      	ldr	r1, [sp, #48]	; 0x30
    5164:	07cc      	lsls	r4, r1, #31
    5166:	d5fa      	bpl.n	515e <PkaEcdsaVerify+0xca>
    5168:	4957      	ldr	r1, [pc, #348]	; (52c8 <PkaEcdsaVerify+0x234>)
    516a:	6019      	str	r1, [r3, #0]
    516c:	6831      	ldr	r1, [r6, #0]
    516e:	910d      	str	r1, [sp, #52]	; 0x34
    5170:	990d      	ldr	r1, [sp, #52]	; 0x34
    5172:	07c9      	lsls	r1, r1, #31
    5174:	d5fa      	bpl.n	516c <PkaEcdsaVerify+0xd8>
    5176:	4955      	ldr	r1, [pc, #340]	; (52cc <PkaEcdsaVerify+0x238>)
    5178:	6019      	str	r1, [r3, #0]
    517a:	6831      	ldr	r1, [r6, #0]
    517c:	910e      	str	r1, [sp, #56]	; 0x38
    517e:	990e      	ldr	r1, [sp, #56]	; 0x38
    5180:	07cf      	lsls	r7, r1, #31
    5182:	d5fa      	bpl.n	517a <PkaEcdsaVerify+0xe6>
    5184:	4952      	ldr	r1, [pc, #328]	; (52d0 <PkaEcdsaVerify+0x23c>)
    5186:	6019      	str	r1, [r3, #0]
    5188:	6831      	ldr	r1, [r6, #0]
    518a:	910f      	str	r1, [sp, #60]	; 0x3c
    518c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    518e:	07cc      	lsls	r4, r1, #31
    5190:	d5fa      	bpl.n	5188 <PkaEcdsaVerify+0xf4>
    5192:	4950      	ldr	r1, [pc, #320]	; (52d4 <PkaEcdsaVerify+0x240>)
    5194:	6019      	str	r1, [r3, #0]
    5196:	4b50      	ldr	r3, [pc, #320]	; (52d8 <PkaEcdsaVerify+0x244>)
    5198:	461e      	mov	r6, r3
    519a:	6819      	ldr	r1, [r3, #0]
    519c:	9110      	str	r1, [sp, #64]	; 0x40
    519e:	9910      	ldr	r1, [sp, #64]	; 0x40
    51a0:	07c9      	lsls	r1, r1, #31
    51a2:	d5fa      	bpl.n	519a <PkaEcdsaVerify+0x106>
    51a4:	4c3f      	ldr	r4, [pc, #252]	; (52a4 <PkaEcdsaVerify+0x210>)
    51a6:	4b4d      	ldr	r3, [pc, #308]	; (52dc <PkaEcdsaVerify+0x248>)
    51a8:	6023      	str	r3, [r4, #0]
    51aa:	6833      	ldr	r3, [r6, #0]
    51ac:	9311      	str	r3, [sp, #68]	; 0x44
    51ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    51b0:	07db      	lsls	r3, r3, #31
    51b2:	d5fa      	bpl.n	51aa <PkaEcdsaVerify+0x116>
    51b4:	4b4a      	ldr	r3, [pc, #296]	; (52e0 <PkaEcdsaVerify+0x24c>)
    51b6:	6023      	str	r3, [r4, #0]
    51b8:	6833      	ldr	r3, [r6, #0]
    51ba:	9312      	str	r3, [sp, #72]	; 0x48
    51bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    51be:	07df      	lsls	r7, r3, #31
    51c0:	d5fa      	bpl.n	51b8 <PkaEcdsaVerify+0x124>
    51c2:	4b48      	ldr	r3, [pc, #288]	; (52e4 <PkaEcdsaVerify+0x250>)
    51c4:	6023      	str	r3, [r4, #0]
    51c6:	4b3a      	ldr	r3, [pc, #232]	; (52b0 <PkaEcdsaVerify+0x21c>)
    51c8:	4698      	mov	r8, r3
    51ca:	6819      	ldr	r1, [r3, #0]
    51cc:	9113      	str	r1, [sp, #76]	; 0x4c
    51ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
    51d0:	07c9      	lsls	r1, r1, #31
    51d2:	d5fa      	bpl.n	51ca <PkaEcdsaVerify+0x136>
    51d4:	4f32      	ldr	r7, [pc, #200]	; (52a0 <PkaEcdsaVerify+0x20c>)
    51d6:	6038      	str	r0, [r7, #0]
    51d8:	6833      	ldr	r3, [r6, #0]
    51da:	9314      	str	r3, [sp, #80]	; 0x50
    51dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    51de:	07db      	lsls	r3, r3, #31
    51e0:	d5fa      	bpl.n	51d8 <PkaEcdsaVerify+0x144>
    51e2:	6022      	str	r2, [r4, #0]
    51e4:	6833      	ldr	r3, [r6, #0]
    51e6:	9315      	str	r3, [sp, #84]	; 0x54
    51e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    51ea:	07d8      	lsls	r0, r3, #31
    51ec:	d5fa      	bpl.n	51e4 <PkaEcdsaVerify+0x150>
    51ee:	4b3e      	ldr	r3, [pc, #248]	; (52e8 <PkaEcdsaVerify+0x254>)
    51f0:	6023      	str	r3, [r4, #0]
    51f2:	6833      	ldr	r3, [r6, #0]
    51f4:	9316      	str	r3, [sp, #88]	; 0x58
    51f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    51f8:	07d9      	lsls	r1, r3, #31
    51fa:	d5fa      	bpl.n	51f2 <PkaEcdsaVerify+0x15e>
    51fc:	4b3b      	ldr	r3, [pc, #236]	; (52ec <PkaEcdsaVerify+0x258>)
    51fe:	6023      	str	r3, [r4, #0]
    5200:	6833      	ldr	r3, [r6, #0]
    5202:	9317      	str	r3, [sp, #92]	; 0x5c
    5204:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5206:	07da      	lsls	r2, r3, #31
    5208:	d5fa      	bpl.n	5200 <PkaEcdsaVerify+0x16c>
    520a:	4b39      	ldr	r3, [pc, #228]	; (52f0 <PkaEcdsaVerify+0x25c>)
    520c:	6023      	str	r3, [r4, #0]
    520e:	6833      	ldr	r3, [r6, #0]
    5210:	9318      	str	r3, [sp, #96]	; 0x60
    5212:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5214:	07db      	lsls	r3, r3, #31
    5216:	d5fa      	bpl.n	520e <PkaEcdsaVerify+0x17a>
    5218:	4b36      	ldr	r3, [pc, #216]	; (52f4 <PkaEcdsaVerify+0x260>)
    521a:	6023      	str	r3, [r4, #0]
    521c:	6833      	ldr	r3, [r6, #0]
    521e:	9319      	str	r3, [sp, #100]	; 0x64
    5220:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5222:	07d8      	lsls	r0, r3, #31
    5224:	d5fa      	bpl.n	521c <PkaEcdsaVerify+0x188>
    5226:	4b34      	ldr	r3, [pc, #208]	; (52f8 <PkaEcdsaVerify+0x264>)
    5228:	6023      	str	r3, [r4, #0]
    522a:	6833      	ldr	r3, [r6, #0]
    522c:	931a      	str	r3, [sp, #104]	; 0x68
    522e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    5230:	07d9      	lsls	r1, r3, #31
    5232:	d5fa      	bpl.n	522a <PkaEcdsaVerify+0x196>
    5234:	4b31      	ldr	r3, [pc, #196]	; (52fc <PkaEcdsaVerify+0x268>)
    5236:	6023      	str	r3, [r4, #0]
    5238:	6833      	ldr	r3, [r6, #0]
    523a:	931b      	str	r3, [sp, #108]	; 0x6c
    523c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    523e:	07da      	lsls	r2, r3, #31
    5240:	d5fa      	bpl.n	5238 <PkaEcdsaVerify+0x1a4>
    5242:	4b2f      	ldr	r3, [pc, #188]	; (5300 <PkaEcdsaVerify+0x26c>)
    5244:	6023      	str	r3, [r4, #0]
    5246:	f000 fc1d 	bl	5a84 <PkaSum2ScalarMullt>
    524a:	bb08      	cbnz	r0, 5290 <PkaEcdsaVerify+0x1fc>
    524c:	f8d8 3000 	ldr.w	r3, [r8]
    5250:	931c      	str	r3, [sp, #112]	; 0x70
    5252:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    5254:	07db      	lsls	r3, r3, #31
    5256:	d5f9      	bpl.n	524c <PkaEcdsaVerify+0x1b8>
    5258:	603d      	str	r5, [r7, #0]
    525a:	6833      	ldr	r3, [r6, #0]
    525c:	931d      	str	r3, [sp, #116]	; 0x74
    525e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    5260:	07d9      	lsls	r1, r3, #31
    5262:	d5fa      	bpl.n	525a <PkaEcdsaVerify+0x1c6>
    5264:	4b27      	ldr	r3, [pc, #156]	; (5304 <PkaEcdsaVerify+0x270>)
    5266:	6023      	str	r3, [r4, #0]
    5268:	6833      	ldr	r3, [r6, #0]
    526a:	931e      	str	r3, [sp, #120]	; 0x78
    526c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    526e:	07da      	lsls	r2, r3, #31
    5270:	d5fa      	bpl.n	5268 <PkaEcdsaVerify+0x1d4>
    5272:	4b25      	ldr	r3, [pc, #148]	; (5308 <PkaEcdsaVerify+0x274>)
    5274:	6023      	str	r3, [r4, #0]
    5276:	f8d8 3000 	ldr.w	r3, [r8]
    527a:	931f      	str	r3, [sp, #124]	; 0x7c
    527c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    527e:	07db      	lsls	r3, r3, #31
    5280:	d5f9      	bpl.n	5276 <PkaEcdsaVerify+0x1e2>
    5282:	4b0c      	ldr	r3, [pc, #48]	; (52b4 <PkaEcdsaVerify+0x220>)
    5284:	681b      	ldr	r3, [r3, #0]
    5286:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    528a:	4b20      	ldr	r3, [pc, #128]	; (530c <PkaEcdsaVerify+0x278>)
    528c:	bf08      	it	eq
    528e:	4618      	moveq	r0, r3
    5290:	b020      	add	sp, #128	; 0x80
    5292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5296:	481e      	ldr	r0, [pc, #120]	; (5310 <PkaEcdsaVerify+0x27c>)
    5298:	e7fa      	b.n	5290 <PkaEcdsaVerify+0x1fc>
    529a:	481e      	ldr	r0, [pc, #120]	; (5314 <PkaEcdsaVerify+0x280>)
    529c:	e7f8      	b.n	5290 <PkaEcdsaVerify+0x1fc>
    529e:	bf00      	nop
    52a0:	50841090 	.word	0x50841090
    52a4:	50841080 	.word	0x50841080
    52a8:	51021000 	.word	0x51021000
    52ac:	29721fc0 	.word	0x29721fc0
    52b0:	508410b4 	.word	0x508410b4
    52b4:	50841088 	.word	0x50841088
    52b8:	2901cfc0 	.word	0x2901cfc0
    52bc:	290e1fc0 	.word	0x290e1fc0
    52c0:	29003fc0 	.word	0x29003fc0
    52c4:	49020140 	.word	0x49020140
    52c8:	a8843100 	.word	0xa8843100
    52cc:	49160000 	.word	0x49160000
    52d0:	a1080140 	.word	0xa1080140
    52d4:	88084480 	.word	0x88084480
    52d8:	508410b0 	.word	0x508410b0
    52dc:	887044c0 	.word	0x887044c0
    52e0:	417a0780 	.word	0x417a0780
    52e4:	417e07c0 	.word	0x417e07c0
    52e8:	496a0000 	.word	0x496a0000
    52ec:	49160680 	.word	0x49160680
    52f0:	496e0040 	.word	0x496e0040
    52f4:	21000200 	.word	0x21000200
    52f8:	21208200 	.word	0x21208200
    52fc:	21208240 	.word	0x21208240
    5300:	21248280 	.word	0x21248280
    5304:	a161a140 	.word	0xa161a140
    5308:	5161c800 	.word	0x5161c800
    530c:	00f10803 	.word	0x00f10803
    5310:	00f10801 	.word	0x00f10801
    5314:	00f10802 	.word	0x00f10802

00005318 <nrf_cc310_bl_hash_update_internal>:
    5318:	4b32      	ldr	r3, [pc, #200]	; (53e4 <nrf_cc310_bl_hash_update_internal+0xcc>)
    531a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    531e:	4680      	mov	r8, r0
    5320:	4692      	mov	sl, r2
    5322:	4699      	mov	r9, r3
    5324:	6844      	ldr	r4, [r0, #4]
    5326:	681a      	ldr	r2, [r3, #0]
    5328:	2a00      	cmp	r2, #0
    532a:	d1fc      	bne.n	5326 <nrf_cc310_bl_hash_update_internal+0xe>
    532c:	4b2e      	ldr	r3, [pc, #184]	; (53e8 <nrf_cc310_bl_hash_update_internal+0xd0>)
    532e:	469b      	mov	fp, r3
    5330:	681a      	ldr	r2, [r3, #0]
    5332:	2a00      	cmp	r2, #0
    5334:	d1fc      	bne.n	5330 <nrf_cc310_bl_hash_update_internal+0x18>
    5336:	f04f 30ff 	mov.w	r0, #4294967295
    533a:	9101      	str	r1, [sp, #4]
    533c:	f000 fc94 	bl	5c68 <SaSi_HalClearInterruptBit>
    5340:	2080      	movs	r0, #128	; 0x80
    5342:	f000 fc97 	bl	5c74 <SaSi_HalMaskInterrupt>
    5346:	2301      	movs	r3, #1
    5348:	2007      	movs	r0, #7
    534a:	4a28      	ldr	r2, [pc, #160]	; (53ec <nrf_cc310_bl_hash_update_internal+0xd4>)
    534c:	4d28      	ldr	r5, [pc, #160]	; (53f0 <nrf_cc310_bl_hash_update_internal+0xd8>)
    534e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    5352:	602b      	str	r3, [r5, #0]
    5354:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    5358:	6013      	str	r3, [r2, #0]
    535a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    535c:	4f25      	ldr	r7, [pc, #148]	; (53f4 <nrf_cc310_bl_hash_update_internal+0xdc>)
    535e:	4e26      	ldr	r6, [pc, #152]	; (53f8 <nrf_cc310_bl_hash_update_internal+0xe0>)
    5360:	603b      	str	r3, [r7, #0]
    5362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5364:	4620      	mov	r0, r4
    5366:	6033      	str	r3, [r6, #0]
    5368:	f8d8 3000 	ldr.w	r3, [r8]
    536c:	f842 3c04 	str.w	r3, [r2, #-4]
    5370:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5374:	4798      	blx	r3
    5376:	9901      	ldr	r1, [sp, #4]
    5378:	f8d9 3000 	ldr.w	r3, [r9]
    537c:	2b00      	cmp	r3, #0
    537e:	d1fb      	bne.n	5378 <nrf_cc310_bl_hash_update_internal+0x60>
    5380:	f1ba 0f00 	cmp.w	sl, #0
    5384:	d120      	bne.n	53c8 <nrf_cc310_bl_hash_update_internal+0xb0>
    5386:	2204      	movs	r2, #4
    5388:	4b1c      	ldr	r3, [pc, #112]	; (53fc <nrf_cc310_bl_hash_update_internal+0xe4>)
    538a:	601a      	str	r2, [r3, #0]
    538c:	f8d9 3000 	ldr.w	r3, [r9]
    5390:	2b00      	cmp	r3, #0
    5392:	d1fb      	bne.n	538c <nrf_cc310_bl_hash_update_internal+0x74>
    5394:	f8db a000 	ldr.w	sl, [fp]
    5398:	f1ba 0f00 	cmp.w	sl, #0
    539c:	d1fa      	bne.n	5394 <nrf_cc310_bl_hash_update_internal+0x7c>
    539e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    53a2:	4620      	mov	r0, r4
    53a4:	4798      	blx	r3
    53a6:	683b      	ldr	r3, [r7, #0]
    53a8:	6263      	str	r3, [r4, #36]	; 0x24
    53aa:	6833      	ldr	r3, [r6, #0]
    53ac:	62a3      	str	r3, [r4, #40]	; 0x28
    53ae:	4b14      	ldr	r3, [pc, #80]	; (5400 <nrf_cc310_bl_hash_update_internal+0xe8>)
    53b0:	f8c3 a000 	str.w	sl, [r3]
    53b4:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    53b8:	f8d9 3000 	ldr.w	r3, [r9]
    53bc:	2b00      	cmp	r3, #0
    53be:	d1fb      	bne.n	53b8 <nrf_cc310_bl_hash_update_internal+0xa0>
    53c0:	602b      	str	r3, [r5, #0]
    53c2:	b003      	add	sp, #12
    53c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53c8:	6a23      	ldr	r3, [r4, #32]
    53ca:	2040      	movs	r0, #64	; 0x40
    53cc:	2b01      	cmp	r3, #1
    53ce:	bf04      	itt	eq
    53d0:	4a0b      	ldreq	r2, [pc, #44]	; (5400 <nrf_cc310_bl_hash_update_internal+0xe8>)
    53d2:	6013      	streq	r3, [r2, #0]
    53d4:	4b0b      	ldr	r3, [pc, #44]	; (5404 <nrf_cc310_bl_hash_update_internal+0xec>)
    53d6:	6019      	str	r1, [r3, #0]
    53d8:	f8c3 a004 	str.w	sl, [r3, #4]
    53dc:	f000 fc50 	bl	5c80 <SaSi_HalWaitInterrupt>
    53e0:	e7d4      	b.n	538c <nrf_cc310_bl_hash_update_internal+0x74>
    53e2:	bf00      	nop
    53e4:	50841910 	.word	0x50841910
    53e8:	50841c20 	.word	0x50841c20
    53ec:	50841900 	.word	0x50841900
    53f0:	50841818 	.word	0x50841818
    53f4:	508417cc 	.word	0x508417cc
    53f8:	508417d0 	.word	0x508417d0
    53fc:	508417c8 	.word	0x508417c8
    5400:	50841684 	.word	0x50841684
    5404:	50841c28 	.word	0x50841c28

00005408 <PkaDoubleMdf2Mdf>:
    5408:	4b54      	ldr	r3, [pc, #336]	; (555c <PkaDoubleMdf2Mdf+0x154>)
    540a:	b510      	push	{r4, lr}
    540c:	4619      	mov	r1, r3
    540e:	b098      	sub	sp, #96	; 0x60
    5410:	681a      	ldr	r2, [r3, #0]
    5412:	9201      	str	r2, [sp, #4]
    5414:	9a01      	ldr	r2, [sp, #4]
    5416:	07d2      	lsls	r2, r2, #31
    5418:	d5fa      	bpl.n	5410 <PkaDoubleMdf2Mdf+0x8>
    541a:	4b51      	ldr	r3, [pc, #324]	; (5560 <PkaDoubleMdf2Mdf+0x158>)
    541c:	4a51      	ldr	r2, [pc, #324]	; (5564 <PkaDoubleMdf2Mdf+0x15c>)
    541e:	601a      	str	r2, [r3, #0]
    5420:	680a      	ldr	r2, [r1, #0]
    5422:	9202      	str	r2, [sp, #8]
    5424:	9a02      	ldr	r2, [sp, #8]
    5426:	07d4      	lsls	r4, r2, #31
    5428:	d5fa      	bpl.n	5420 <PkaDoubleMdf2Mdf+0x18>
    542a:	4a4f      	ldr	r2, [pc, #316]	; (5568 <PkaDoubleMdf2Mdf+0x160>)
    542c:	601a      	str	r2, [r3, #0]
    542e:	680a      	ldr	r2, [r1, #0]
    5430:	9203      	str	r2, [sp, #12]
    5432:	9a03      	ldr	r2, [sp, #12]
    5434:	07d0      	lsls	r0, r2, #31
    5436:	d5fa      	bpl.n	542e <PkaDoubleMdf2Mdf+0x26>
    5438:	484c      	ldr	r0, [pc, #304]	; (556c <PkaDoubleMdf2Mdf+0x164>)
    543a:	6018      	str	r0, [r3, #0]
    543c:	680a      	ldr	r2, [r1, #0]
    543e:	9204      	str	r2, [sp, #16]
    5440:	9a04      	ldr	r2, [sp, #16]
    5442:	07d2      	lsls	r2, r2, #31
    5444:	d5fa      	bpl.n	543c <PkaDoubleMdf2Mdf+0x34>
    5446:	4a4a      	ldr	r2, [pc, #296]	; (5570 <PkaDoubleMdf2Mdf+0x168>)
    5448:	601a      	str	r2, [r3, #0]
    544a:	680a      	ldr	r2, [r1, #0]
    544c:	9205      	str	r2, [sp, #20]
    544e:	9a05      	ldr	r2, [sp, #20]
    5450:	07d4      	lsls	r4, r2, #31
    5452:	d5fa      	bpl.n	544a <PkaDoubleMdf2Mdf+0x42>
    5454:	4a47      	ldr	r2, [pc, #284]	; (5574 <PkaDoubleMdf2Mdf+0x16c>)
    5456:	601a      	str	r2, [r3, #0]
    5458:	680a      	ldr	r2, [r1, #0]
    545a:	9206      	str	r2, [sp, #24]
    545c:	9a06      	ldr	r2, [sp, #24]
    545e:	07d2      	lsls	r2, r2, #31
    5460:	d5fa      	bpl.n	5458 <PkaDoubleMdf2Mdf+0x50>
    5462:	4a45      	ldr	r2, [pc, #276]	; (5578 <PkaDoubleMdf2Mdf+0x170>)
    5464:	601a      	str	r2, [r3, #0]
    5466:	680a      	ldr	r2, [r1, #0]
    5468:	9207      	str	r2, [sp, #28]
    546a:	9a07      	ldr	r2, [sp, #28]
    546c:	07d4      	lsls	r4, r2, #31
    546e:	d5fa      	bpl.n	5466 <PkaDoubleMdf2Mdf+0x5e>
    5470:	4a42      	ldr	r2, [pc, #264]	; (557c <PkaDoubleMdf2Mdf+0x174>)
    5472:	601a      	str	r2, [r3, #0]
    5474:	680a      	ldr	r2, [r1, #0]
    5476:	9208      	str	r2, [sp, #32]
    5478:	9a08      	ldr	r2, [sp, #32]
    547a:	07d2      	lsls	r2, r2, #31
    547c:	d5fa      	bpl.n	5474 <PkaDoubleMdf2Mdf+0x6c>
    547e:	4a40      	ldr	r2, [pc, #256]	; (5580 <PkaDoubleMdf2Mdf+0x178>)
    5480:	601a      	str	r2, [r3, #0]
    5482:	680a      	ldr	r2, [r1, #0]
    5484:	9209      	str	r2, [sp, #36]	; 0x24
    5486:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5488:	07d4      	lsls	r4, r2, #31
    548a:	d5fa      	bpl.n	5482 <PkaDoubleMdf2Mdf+0x7a>
    548c:	4a3d      	ldr	r2, [pc, #244]	; (5584 <PkaDoubleMdf2Mdf+0x17c>)
    548e:	601a      	str	r2, [r3, #0]
    5490:	680a      	ldr	r2, [r1, #0]
    5492:	920a      	str	r2, [sp, #40]	; 0x28
    5494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5496:	07d2      	lsls	r2, r2, #31
    5498:	d5fa      	bpl.n	5490 <PkaDoubleMdf2Mdf+0x88>
    549a:	4a3b      	ldr	r2, [pc, #236]	; (5588 <PkaDoubleMdf2Mdf+0x180>)
    549c:	601a      	str	r2, [r3, #0]
    549e:	680a      	ldr	r2, [r1, #0]
    54a0:	920b      	str	r2, [sp, #44]	; 0x2c
    54a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    54a4:	07d4      	lsls	r4, r2, #31
    54a6:	d5fa      	bpl.n	549e <PkaDoubleMdf2Mdf+0x96>
    54a8:	4a38      	ldr	r2, [pc, #224]	; (558c <PkaDoubleMdf2Mdf+0x184>)
    54aa:	601a      	str	r2, [r3, #0]
    54ac:	680a      	ldr	r2, [r1, #0]
    54ae:	920c      	str	r2, [sp, #48]	; 0x30
    54b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    54b2:	07d2      	lsls	r2, r2, #31
    54b4:	d5fa      	bpl.n	54ac <PkaDoubleMdf2Mdf+0xa4>
    54b6:	4a36      	ldr	r2, [pc, #216]	; (5590 <PkaDoubleMdf2Mdf+0x188>)
    54b8:	601a      	str	r2, [r3, #0]
    54ba:	680a      	ldr	r2, [r1, #0]
    54bc:	920d      	str	r2, [sp, #52]	; 0x34
    54be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    54c0:	07d4      	lsls	r4, r2, #31
    54c2:	d5fa      	bpl.n	54ba <PkaDoubleMdf2Mdf+0xb2>
    54c4:	4a33      	ldr	r2, [pc, #204]	; (5594 <PkaDoubleMdf2Mdf+0x18c>)
    54c6:	601a      	str	r2, [r3, #0]
    54c8:	680a      	ldr	r2, [r1, #0]
    54ca:	920e      	str	r2, [sp, #56]	; 0x38
    54cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    54ce:	07d2      	lsls	r2, r2, #31
    54d0:	d5fa      	bpl.n	54c8 <PkaDoubleMdf2Mdf+0xc0>
    54d2:	4a31      	ldr	r2, [pc, #196]	; (5598 <PkaDoubleMdf2Mdf+0x190>)
    54d4:	601a      	str	r2, [r3, #0]
    54d6:	680a      	ldr	r2, [r1, #0]
    54d8:	920f      	str	r2, [sp, #60]	; 0x3c
    54da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    54dc:	07d4      	lsls	r4, r2, #31
    54de:	d5fa      	bpl.n	54d6 <PkaDoubleMdf2Mdf+0xce>
    54e0:	4a2e      	ldr	r2, [pc, #184]	; (559c <PkaDoubleMdf2Mdf+0x194>)
    54e2:	601a      	str	r2, [r3, #0]
    54e4:	680a      	ldr	r2, [r1, #0]
    54e6:	9210      	str	r2, [sp, #64]	; 0x40
    54e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    54ea:	07d2      	lsls	r2, r2, #31
    54ec:	d5fa      	bpl.n	54e4 <PkaDoubleMdf2Mdf+0xdc>
    54ee:	4a2c      	ldr	r2, [pc, #176]	; (55a0 <PkaDoubleMdf2Mdf+0x198>)
    54f0:	601a      	str	r2, [r3, #0]
    54f2:	4b1a      	ldr	r3, [pc, #104]	; (555c <PkaDoubleMdf2Mdf+0x154>)
    54f4:	4619      	mov	r1, r3
    54f6:	681c      	ldr	r4, [r3, #0]
    54f8:	9411      	str	r4, [sp, #68]	; 0x44
    54fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
    54fc:	07e4      	lsls	r4, r4, #31
    54fe:	d5fa      	bpl.n	54f6 <PkaDoubleMdf2Mdf+0xee>
    5500:	4b17      	ldr	r3, [pc, #92]	; (5560 <PkaDoubleMdf2Mdf+0x158>)
    5502:	6018      	str	r0, [r3, #0]
    5504:	6808      	ldr	r0, [r1, #0]
    5506:	9012      	str	r0, [sp, #72]	; 0x48
    5508:	9812      	ldr	r0, [sp, #72]	; 0x48
    550a:	07c4      	lsls	r4, r0, #31
    550c:	d5fa      	bpl.n	5504 <PkaDoubleMdf2Mdf+0xfc>
    550e:	601a      	str	r2, [r3, #0]
    5510:	680a      	ldr	r2, [r1, #0]
    5512:	9213      	str	r2, [sp, #76]	; 0x4c
    5514:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5516:	07d0      	lsls	r0, r2, #31
    5518:	d5fa      	bpl.n	5510 <PkaDoubleMdf2Mdf+0x108>
    551a:	4a12      	ldr	r2, [pc, #72]	; (5564 <PkaDoubleMdf2Mdf+0x15c>)
    551c:	601a      	str	r2, [r3, #0]
    551e:	680a      	ldr	r2, [r1, #0]
    5520:	9214      	str	r2, [sp, #80]	; 0x50
    5522:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5524:	07d2      	lsls	r2, r2, #31
    5526:	d5fa      	bpl.n	551e <PkaDoubleMdf2Mdf+0x116>
    5528:	4a1e      	ldr	r2, [pc, #120]	; (55a4 <PkaDoubleMdf2Mdf+0x19c>)
    552a:	601a      	str	r2, [r3, #0]
    552c:	680a      	ldr	r2, [r1, #0]
    552e:	9215      	str	r2, [sp, #84]	; 0x54
    5530:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5532:	07d4      	lsls	r4, r2, #31
    5534:	d5fa      	bpl.n	552c <PkaDoubleMdf2Mdf+0x124>
    5536:	4a1c      	ldr	r2, [pc, #112]	; (55a8 <PkaDoubleMdf2Mdf+0x1a0>)
    5538:	601a      	str	r2, [r3, #0]
    553a:	680a      	ldr	r2, [r1, #0]
    553c:	9216      	str	r2, [sp, #88]	; 0x58
    553e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    5540:	07d0      	lsls	r0, r2, #31
    5542:	d5fa      	bpl.n	553a <PkaDoubleMdf2Mdf+0x132>
    5544:	4a19      	ldr	r2, [pc, #100]	; (55ac <PkaDoubleMdf2Mdf+0x1a4>)
    5546:	601a      	str	r2, [r3, #0]
    5548:	680a      	ldr	r2, [r1, #0]
    554a:	9217      	str	r2, [sp, #92]	; 0x5c
    554c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    554e:	07d2      	lsls	r2, r2, #31
    5550:	d5fa      	bpl.n	5548 <PkaDoubleMdf2Mdf+0x140>
    5552:	4a17      	ldr	r2, [pc, #92]	; (55b0 <PkaDoubleMdf2Mdf+0x1a8>)
    5554:	601a      	str	r2, [r3, #0]
    5556:	b018      	add	sp, #96	; 0x60
    5558:	bd10      	pop	{r4, pc}
    555a:	bf00      	nop
    555c:	508410b0 	.word	0x508410b0
    5560:	50841080 	.word	0x50841080
    5564:	21659300 	.word	0x21659300
    5568:	90310400 	.word	0x90310400
    556c:	90659640 	.word	0x90659640
    5570:	21618300 	.word	0x21618300
    5574:	2130c300 	.word	0x2130c300
    5578:	9064c300 	.word	0x9064c300
    557c:	90618100 	.word	0x90618100
    5580:	21104600 	.word	0x21104600
    5584:	21118100 	.word	0x21118100
    5588:	21444100 	.word	0x21444100
    558c:	2920c300 	.word	0x2920c300
    5590:	c810460c 	.word	0xc810460c
    5594:	21318600 	.word	0x21318600
    5598:	2160c300 	.word	0x2160c300
    559c:	2928c140 	.word	0x2928c140
    55a0:	21659640 	.word	0x21659640
    55a4:	90311300 	.word	0x90311300
    55a8:	29259640 	.word	0x29259640
    55ac:	c8144659 	.word	0xc8144659
    55b0:	49320440 	.word	0x49320440

000055b4 <PkaDoubleMdf2Jcb>:
    55b4:	4b49      	ldr	r3, [pc, #292]	; (56dc <PkaDoubleMdf2Jcb+0x128>)
    55b6:	b510      	push	{r4, lr}
    55b8:	4619      	mov	r1, r3
    55ba:	b094      	sub	sp, #80	; 0x50
    55bc:	681a      	ldr	r2, [r3, #0]
    55be:	9200      	str	r2, [sp, #0]
    55c0:	9a00      	ldr	r2, [sp, #0]
    55c2:	07d2      	lsls	r2, r2, #31
    55c4:	d5fa      	bpl.n	55bc <PkaDoubleMdf2Jcb+0x8>
    55c6:	4b46      	ldr	r3, [pc, #280]	; (56e0 <PkaDoubleMdf2Jcb+0x12c>)
    55c8:	4a46      	ldr	r2, [pc, #280]	; (56e4 <PkaDoubleMdf2Jcb+0x130>)
    55ca:	601a      	str	r2, [r3, #0]
    55cc:	680a      	ldr	r2, [r1, #0]
    55ce:	9201      	str	r2, [sp, #4]
    55d0:	9a01      	ldr	r2, [sp, #4]
    55d2:	07d4      	lsls	r4, r2, #31
    55d4:	d5fa      	bpl.n	55cc <PkaDoubleMdf2Jcb+0x18>
    55d6:	4a44      	ldr	r2, [pc, #272]	; (56e8 <PkaDoubleMdf2Jcb+0x134>)
    55d8:	601a      	str	r2, [r3, #0]
    55da:	680a      	ldr	r2, [r1, #0]
    55dc:	9202      	str	r2, [sp, #8]
    55de:	9a02      	ldr	r2, [sp, #8]
    55e0:	07d0      	lsls	r0, r2, #31
    55e2:	d5fa      	bpl.n	55da <PkaDoubleMdf2Jcb+0x26>
    55e4:	4841      	ldr	r0, [pc, #260]	; (56ec <PkaDoubleMdf2Jcb+0x138>)
    55e6:	6018      	str	r0, [r3, #0]
    55e8:	680a      	ldr	r2, [r1, #0]
    55ea:	9203      	str	r2, [sp, #12]
    55ec:	9a03      	ldr	r2, [sp, #12]
    55ee:	07d2      	lsls	r2, r2, #31
    55f0:	d5fa      	bpl.n	55e8 <PkaDoubleMdf2Jcb+0x34>
    55f2:	4a3f      	ldr	r2, [pc, #252]	; (56f0 <PkaDoubleMdf2Jcb+0x13c>)
    55f4:	601a      	str	r2, [r3, #0]
    55f6:	680a      	ldr	r2, [r1, #0]
    55f8:	9204      	str	r2, [sp, #16]
    55fa:	9a04      	ldr	r2, [sp, #16]
    55fc:	07d4      	lsls	r4, r2, #31
    55fe:	d5fa      	bpl.n	55f6 <PkaDoubleMdf2Jcb+0x42>
    5600:	4a3c      	ldr	r2, [pc, #240]	; (56f4 <PkaDoubleMdf2Jcb+0x140>)
    5602:	601a      	str	r2, [r3, #0]
    5604:	680a      	ldr	r2, [r1, #0]
    5606:	9205      	str	r2, [sp, #20]
    5608:	9a05      	ldr	r2, [sp, #20]
    560a:	07d2      	lsls	r2, r2, #31
    560c:	d5fa      	bpl.n	5604 <PkaDoubleMdf2Jcb+0x50>
    560e:	4a3a      	ldr	r2, [pc, #232]	; (56f8 <PkaDoubleMdf2Jcb+0x144>)
    5610:	601a      	str	r2, [r3, #0]
    5612:	680a      	ldr	r2, [r1, #0]
    5614:	9206      	str	r2, [sp, #24]
    5616:	9a06      	ldr	r2, [sp, #24]
    5618:	07d4      	lsls	r4, r2, #31
    561a:	d5fa      	bpl.n	5612 <PkaDoubleMdf2Jcb+0x5e>
    561c:	4a37      	ldr	r2, [pc, #220]	; (56fc <PkaDoubleMdf2Jcb+0x148>)
    561e:	601a      	str	r2, [r3, #0]
    5620:	680a      	ldr	r2, [r1, #0]
    5622:	9207      	str	r2, [sp, #28]
    5624:	9a07      	ldr	r2, [sp, #28]
    5626:	07d2      	lsls	r2, r2, #31
    5628:	d5fa      	bpl.n	5620 <PkaDoubleMdf2Jcb+0x6c>
    562a:	4a35      	ldr	r2, [pc, #212]	; (5700 <PkaDoubleMdf2Jcb+0x14c>)
    562c:	601a      	str	r2, [r3, #0]
    562e:	680a      	ldr	r2, [r1, #0]
    5630:	9208      	str	r2, [sp, #32]
    5632:	9a08      	ldr	r2, [sp, #32]
    5634:	07d4      	lsls	r4, r2, #31
    5636:	d5fa      	bpl.n	562e <PkaDoubleMdf2Jcb+0x7a>
    5638:	4a32      	ldr	r2, [pc, #200]	; (5704 <PkaDoubleMdf2Jcb+0x150>)
    563a:	601a      	str	r2, [r3, #0]
    563c:	680a      	ldr	r2, [r1, #0]
    563e:	9209      	str	r2, [sp, #36]	; 0x24
    5640:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5642:	07d2      	lsls	r2, r2, #31
    5644:	d5fa      	bpl.n	563c <PkaDoubleMdf2Jcb+0x88>
    5646:	4a30      	ldr	r2, [pc, #192]	; (5708 <PkaDoubleMdf2Jcb+0x154>)
    5648:	601a      	str	r2, [r3, #0]
    564a:	680a      	ldr	r2, [r1, #0]
    564c:	920a      	str	r2, [sp, #40]	; 0x28
    564e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5650:	07d4      	lsls	r4, r2, #31
    5652:	d5fa      	bpl.n	564a <PkaDoubleMdf2Jcb+0x96>
    5654:	4a2d      	ldr	r2, [pc, #180]	; (570c <PkaDoubleMdf2Jcb+0x158>)
    5656:	601a      	str	r2, [r3, #0]
    5658:	680a      	ldr	r2, [r1, #0]
    565a:	920b      	str	r2, [sp, #44]	; 0x2c
    565c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    565e:	07d2      	lsls	r2, r2, #31
    5660:	d5fa      	bpl.n	5658 <PkaDoubleMdf2Jcb+0xa4>
    5662:	4a2b      	ldr	r2, [pc, #172]	; (5710 <PkaDoubleMdf2Jcb+0x15c>)
    5664:	601a      	str	r2, [r3, #0]
    5666:	680a      	ldr	r2, [r1, #0]
    5668:	920c      	str	r2, [sp, #48]	; 0x30
    566a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    566c:	07d4      	lsls	r4, r2, #31
    566e:	d5fa      	bpl.n	5666 <PkaDoubleMdf2Jcb+0xb2>
    5670:	4a28      	ldr	r2, [pc, #160]	; (5714 <PkaDoubleMdf2Jcb+0x160>)
    5672:	601a      	str	r2, [r3, #0]
    5674:	680a      	ldr	r2, [r1, #0]
    5676:	920d      	str	r2, [sp, #52]	; 0x34
    5678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    567a:	07d2      	lsls	r2, r2, #31
    567c:	d5fa      	bpl.n	5674 <PkaDoubleMdf2Jcb+0xc0>
    567e:	4a26      	ldr	r2, [pc, #152]	; (5718 <PkaDoubleMdf2Jcb+0x164>)
    5680:	601a      	str	r2, [r3, #0]
    5682:	680a      	ldr	r2, [r1, #0]
    5684:	920e      	str	r2, [sp, #56]	; 0x38
    5686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5688:	07d4      	lsls	r4, r2, #31
    568a:	d5fa      	bpl.n	5682 <PkaDoubleMdf2Jcb+0xce>
    568c:	4a23      	ldr	r2, [pc, #140]	; (571c <PkaDoubleMdf2Jcb+0x168>)
    568e:	601a      	str	r2, [r3, #0]
    5690:	680a      	ldr	r2, [r1, #0]
    5692:	920f      	str	r2, [sp, #60]	; 0x3c
    5694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5696:	07d2      	lsls	r2, r2, #31
    5698:	d5fa      	bpl.n	5690 <PkaDoubleMdf2Jcb+0xdc>
    569a:	4a21      	ldr	r2, [pc, #132]	; (5720 <PkaDoubleMdf2Jcb+0x16c>)
    569c:	601a      	str	r2, [r3, #0]
    569e:	4b0f      	ldr	r3, [pc, #60]	; (56dc <PkaDoubleMdf2Jcb+0x128>)
    56a0:	4619      	mov	r1, r3
    56a2:	681c      	ldr	r4, [r3, #0]
    56a4:	9410      	str	r4, [sp, #64]	; 0x40
    56a6:	9c10      	ldr	r4, [sp, #64]	; 0x40
    56a8:	07e4      	lsls	r4, r4, #31
    56aa:	d5fa      	bpl.n	56a2 <PkaDoubleMdf2Jcb+0xee>
    56ac:	4b0c      	ldr	r3, [pc, #48]	; (56e0 <PkaDoubleMdf2Jcb+0x12c>)
    56ae:	6018      	str	r0, [r3, #0]
    56b0:	6808      	ldr	r0, [r1, #0]
    56b2:	9011      	str	r0, [sp, #68]	; 0x44
    56b4:	9811      	ldr	r0, [sp, #68]	; 0x44
    56b6:	07c4      	lsls	r4, r0, #31
    56b8:	d5fa      	bpl.n	56b0 <PkaDoubleMdf2Jcb+0xfc>
    56ba:	601a      	str	r2, [r3, #0]
    56bc:	680a      	ldr	r2, [r1, #0]
    56be:	9212      	str	r2, [sp, #72]	; 0x48
    56c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    56c2:	07d0      	lsls	r0, r2, #31
    56c4:	d5fa      	bpl.n	56bc <PkaDoubleMdf2Jcb+0x108>
    56c6:	4a17      	ldr	r2, [pc, #92]	; (5724 <PkaDoubleMdf2Jcb+0x170>)
    56c8:	601a      	str	r2, [r3, #0]
    56ca:	680a      	ldr	r2, [r1, #0]
    56cc:	9213      	str	r2, [sp, #76]	; 0x4c
    56ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    56d0:	07d2      	lsls	r2, r2, #31
    56d2:	d5fa      	bpl.n	56ca <PkaDoubleMdf2Jcb+0x116>
    56d4:	4a14      	ldr	r2, [pc, #80]	; (5728 <PkaDoubleMdf2Jcb+0x174>)
    56d6:	601a      	str	r2, [r3, #0]
    56d8:	b014      	add	sp, #80	; 0x50
    56da:	bd10      	pop	{r4, pc}
    56dc:	508410b0 	.word	0x508410b0
    56e0:	50841080 	.word	0x50841080
    56e4:	21659080 	.word	0x21659080
    56e8:	90090400 	.word	0x90090400
    56ec:	90659640 	.word	0x90659640
    56f0:	21618080 	.word	0x21618080
    56f4:	21082080 	.word	0x21082080
    56f8:	90642080 	.word	0x90642080
    56fc:	90618100 	.word	0x90618100
    5700:	21104600 	.word	0x21104600
    5704:	21118100 	.word	0x21118100
    5708:	21444100 	.word	0x21444100
    570c:	29202080 	.word	0x29202080
    5710:	c8104602 	.word	0xc8104602
    5714:	21098600 	.word	0x21098600
    5718:	21602080 	.word	0x21602080
    571c:	29282140 	.word	0x29282140
    5720:	21659640 	.word	0x21659640
    5724:	29259640 	.word	0x29259640
    5728:	c8144659 	.word	0xc8144659

0000572c <PkaAddJcbAfn2Mdf>:
    572c:	4b50      	ldr	r3, [pc, #320]	; (5870 <PkaAddJcbAfn2Mdf+0x144>)
    572e:	b510      	push	{r4, lr}
    5730:	461c      	mov	r4, r3
    5732:	b096      	sub	sp, #88	; 0x58
    5734:	681a      	ldr	r2, [r3, #0]
    5736:	9201      	str	r2, [sp, #4]
    5738:	9a01      	ldr	r2, [sp, #4]
    573a:	07d2      	lsls	r2, r2, #31
    573c:	d5fa      	bpl.n	5734 <PkaAddJcbAfn2Mdf+0x8>
    573e:	4b4d      	ldr	r3, [pc, #308]	; (5874 <PkaAddJcbAfn2Mdf+0x148>)
    5740:	4a4d      	ldr	r2, [pc, #308]	; (5878 <PkaAddJcbAfn2Mdf+0x14c>)
    5742:	601a      	str	r2, [r3, #0]
    5744:	6822      	ldr	r2, [r4, #0]
    5746:	9202      	str	r2, [sp, #8]
    5748:	9a02      	ldr	r2, [sp, #8]
    574a:	07d2      	lsls	r2, r2, #31
    574c:	d5fa      	bpl.n	5744 <PkaAddJcbAfn2Mdf+0x18>
    574e:	4a4b      	ldr	r2, [pc, #300]	; (587c <PkaAddJcbAfn2Mdf+0x150>)
    5750:	601a      	str	r2, [r3, #0]
    5752:	4a4b      	ldr	r2, [pc, #300]	; (5880 <PkaAddJcbAfn2Mdf+0x154>)
    5754:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    5758:	6822      	ldr	r2, [r4, #0]
    575a:	9203      	str	r2, [sp, #12]
    575c:	9a03      	ldr	r2, [sp, #12]
    575e:	07d2      	lsls	r2, r2, #31
    5760:	d5fa      	bpl.n	5758 <PkaAddJcbAfn2Mdf+0x2c>
    5762:	6018      	str	r0, [r3, #0]
    5764:	6822      	ldr	r2, [r4, #0]
    5766:	9204      	str	r2, [sp, #16]
    5768:	9a04      	ldr	r2, [sp, #16]
    576a:	07d0      	lsls	r0, r2, #31
    576c:	d5fa      	bpl.n	5764 <PkaAddJcbAfn2Mdf+0x38>
    576e:	4a45      	ldr	r2, [pc, #276]	; (5884 <PkaAddJcbAfn2Mdf+0x158>)
    5770:	601a      	str	r2, [r3, #0]
    5772:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    5776:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    577a:	6822      	ldr	r2, [r4, #0]
    577c:	9205      	str	r2, [sp, #20]
    577e:	9a05      	ldr	r2, [sp, #20]
    5780:	07d2      	lsls	r2, r2, #31
    5782:	d5fa      	bpl.n	577a <PkaAddJcbAfn2Mdf+0x4e>
    5784:	6019      	str	r1, [r3, #0]
    5786:	6822      	ldr	r2, [r4, #0]
    5788:	9206      	str	r2, [sp, #24]
    578a:	9a06      	ldr	r2, [sp, #24]
    578c:	07d0      	lsls	r0, r2, #31
    578e:	d5fa      	bpl.n	5786 <PkaAddJcbAfn2Mdf+0x5a>
    5790:	4a3d      	ldr	r2, [pc, #244]	; (5888 <PkaAddJcbAfn2Mdf+0x15c>)
    5792:	601a      	str	r2, [r3, #0]
    5794:	6822      	ldr	r2, [r4, #0]
    5796:	9207      	str	r2, [sp, #28]
    5798:	9a07      	ldr	r2, [sp, #28]
    579a:	07d1      	lsls	r1, r2, #31
    579c:	d5fa      	bpl.n	5794 <PkaAddJcbAfn2Mdf+0x68>
    579e:	4a3b      	ldr	r2, [pc, #236]	; (588c <PkaAddJcbAfn2Mdf+0x160>)
    57a0:	601a      	str	r2, [r3, #0]
    57a2:	6822      	ldr	r2, [r4, #0]
    57a4:	9208      	str	r2, [sp, #32]
    57a6:	9a08      	ldr	r2, [sp, #32]
    57a8:	07d2      	lsls	r2, r2, #31
    57aa:	d5fa      	bpl.n	57a2 <PkaAddJcbAfn2Mdf+0x76>
    57ac:	4a38      	ldr	r2, [pc, #224]	; (5890 <PkaAddJcbAfn2Mdf+0x164>)
    57ae:	601a      	str	r2, [r3, #0]
    57b0:	6822      	ldr	r2, [r4, #0]
    57b2:	9209      	str	r2, [sp, #36]	; 0x24
    57b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    57b6:	07d0      	lsls	r0, r2, #31
    57b8:	d5fa      	bpl.n	57b0 <PkaAddJcbAfn2Mdf+0x84>
    57ba:	4a36      	ldr	r2, [pc, #216]	; (5894 <PkaAddJcbAfn2Mdf+0x168>)
    57bc:	601a      	str	r2, [r3, #0]
    57be:	6822      	ldr	r2, [r4, #0]
    57c0:	920a      	str	r2, [sp, #40]	; 0x28
    57c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    57c4:	07d1      	lsls	r1, r2, #31
    57c6:	d5fa      	bpl.n	57be <PkaAddJcbAfn2Mdf+0x92>
    57c8:	4a33      	ldr	r2, [pc, #204]	; (5898 <PkaAddJcbAfn2Mdf+0x16c>)
    57ca:	601a      	str	r2, [r3, #0]
    57cc:	6822      	ldr	r2, [r4, #0]
    57ce:	920b      	str	r2, [sp, #44]	; 0x2c
    57d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    57d2:	07d2      	lsls	r2, r2, #31
    57d4:	d5fa      	bpl.n	57cc <PkaAddJcbAfn2Mdf+0xa0>
    57d6:	4a31      	ldr	r2, [pc, #196]	; (589c <PkaAddJcbAfn2Mdf+0x170>)
    57d8:	601a      	str	r2, [r3, #0]
    57da:	6822      	ldr	r2, [r4, #0]
    57dc:	920c      	str	r2, [sp, #48]	; 0x30
    57de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    57e0:	07d0      	lsls	r0, r2, #31
    57e2:	d5fa      	bpl.n	57da <PkaAddJcbAfn2Mdf+0xae>
    57e4:	4a2e      	ldr	r2, [pc, #184]	; (58a0 <PkaAddJcbAfn2Mdf+0x174>)
    57e6:	601a      	str	r2, [r3, #0]
    57e8:	6822      	ldr	r2, [r4, #0]
    57ea:	920d      	str	r2, [sp, #52]	; 0x34
    57ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    57ee:	07d1      	lsls	r1, r2, #31
    57f0:	d5fa      	bpl.n	57e8 <PkaAddJcbAfn2Mdf+0xbc>
    57f2:	4a2c      	ldr	r2, [pc, #176]	; (58a4 <PkaAddJcbAfn2Mdf+0x178>)
    57f4:	601a      	str	r2, [r3, #0]
    57f6:	6822      	ldr	r2, [r4, #0]
    57f8:	920e      	str	r2, [sp, #56]	; 0x38
    57fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    57fc:	07d2      	lsls	r2, r2, #31
    57fe:	d5fa      	bpl.n	57f6 <PkaAddJcbAfn2Mdf+0xca>
    5800:	4a29      	ldr	r2, [pc, #164]	; (58a8 <PkaAddJcbAfn2Mdf+0x17c>)
    5802:	601a      	str	r2, [r3, #0]
    5804:	6822      	ldr	r2, [r4, #0]
    5806:	920f      	str	r2, [sp, #60]	; 0x3c
    5808:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    580a:	07d0      	lsls	r0, r2, #31
    580c:	d5fa      	bpl.n	5804 <PkaAddJcbAfn2Mdf+0xd8>
    580e:	4a27      	ldr	r2, [pc, #156]	; (58ac <PkaAddJcbAfn2Mdf+0x180>)
    5810:	601a      	str	r2, [r3, #0]
    5812:	6821      	ldr	r1, [r4, #0]
    5814:	9110      	str	r1, [sp, #64]	; 0x40
    5816:	9910      	ldr	r1, [sp, #64]	; 0x40
    5818:	07c9      	lsls	r1, r1, #31
    581a:	d5fa      	bpl.n	5812 <PkaAddJcbAfn2Mdf+0xe6>
    581c:	601a      	str	r2, [r3, #0]
    581e:	4b14      	ldr	r3, [pc, #80]	; (5870 <PkaAddJcbAfn2Mdf+0x144>)
    5820:	461a      	mov	r2, r3
    5822:	6819      	ldr	r1, [r3, #0]
    5824:	9111      	str	r1, [sp, #68]	; 0x44
    5826:	9911      	ldr	r1, [sp, #68]	; 0x44
    5828:	07c8      	lsls	r0, r1, #31
    582a:	d5fa      	bpl.n	5822 <PkaAddJcbAfn2Mdf+0xf6>
    582c:	4b11      	ldr	r3, [pc, #68]	; (5874 <PkaAddJcbAfn2Mdf+0x148>)
    582e:	4920      	ldr	r1, [pc, #128]	; (58b0 <PkaAddJcbAfn2Mdf+0x184>)
    5830:	6019      	str	r1, [r3, #0]
    5832:	6811      	ldr	r1, [r2, #0]
    5834:	9112      	str	r1, [sp, #72]	; 0x48
    5836:	9912      	ldr	r1, [sp, #72]	; 0x48
    5838:	07c9      	lsls	r1, r1, #31
    583a:	d5fa      	bpl.n	5832 <PkaAddJcbAfn2Mdf+0x106>
    583c:	491d      	ldr	r1, [pc, #116]	; (58b4 <PkaAddJcbAfn2Mdf+0x188>)
    583e:	6019      	str	r1, [r3, #0]
    5840:	6811      	ldr	r1, [r2, #0]
    5842:	9113      	str	r1, [sp, #76]	; 0x4c
    5844:	9913      	ldr	r1, [sp, #76]	; 0x4c
    5846:	07cc      	lsls	r4, r1, #31
    5848:	d5fa      	bpl.n	5840 <PkaAddJcbAfn2Mdf+0x114>
    584a:	490b      	ldr	r1, [pc, #44]	; (5878 <PkaAddJcbAfn2Mdf+0x14c>)
    584c:	6019      	str	r1, [r3, #0]
    584e:	6811      	ldr	r1, [r2, #0]
    5850:	9114      	str	r1, [sp, #80]	; 0x50
    5852:	9914      	ldr	r1, [sp, #80]	; 0x50
    5854:	07c8      	lsls	r0, r1, #31
    5856:	d5fa      	bpl.n	584e <PkaAddJcbAfn2Mdf+0x122>
    5858:	4917      	ldr	r1, [pc, #92]	; (58b8 <PkaAddJcbAfn2Mdf+0x18c>)
    585a:	6019      	str	r1, [r3, #0]
    585c:	6811      	ldr	r1, [r2, #0]
    585e:	9115      	str	r1, [sp, #84]	; 0x54
    5860:	9915      	ldr	r1, [sp, #84]	; 0x54
    5862:	07c9      	lsls	r1, r1, #31
    5864:	d5fa      	bpl.n	585c <PkaAddJcbAfn2Mdf+0x130>
    5866:	4a15      	ldr	r2, [pc, #84]	; (58bc <PkaAddJcbAfn2Mdf+0x190>)
    5868:	601a      	str	r2, [r3, #0]
    586a:	b016      	add	sp, #88	; 0x58
    586c:	bd10      	pop	{r4, pc}
    586e:	bf00      	nop
    5870:	508410b0 	.word	0x508410b0
    5874:	50841080 	.word	0x50841080
    5878:	90410440 	.word	0x90410440
    587c:	29298600 	.word	0x29298600
    5880:	c80110d8 	.word	0xc80110d8
    5884:	90411440 	.word	0x90411440
    5888:	29211440 	.word	0x29211440
    588c:	21651440 	.word	0x21651440
    5890:	90403400 	.word	0x90403400
    5894:	900c3100 	.word	0x900c3100
    5898:	900c40c0 	.word	0x900c40c0
    589c:	292030c0 	.word	0x292030c0
    58a0:	900d9640 	.word	0x900d9640
    58a4:	90604100 	.word	0x90604100
    58a8:	c8451603 	.word	0xc8451603
    58ac:	21118600 	.word	0x21118600
    58b0:	21604100 	.word	0x21604100
    58b4:	c8444659 	.word	0xc8444659
    58b8:	90451440 	.word	0x90451440
    58bc:	902d1440 	.word	0x902d1440

000058c0 <PkaJcb2Afn>:
    58c0:	4826      	ldr	r0, [pc, #152]	; (595c <PkaJcb2Afn+0x9c>)
    58c2:	b570      	push	{r4, r5, r6, lr}
    58c4:	4605      	mov	r5, r0
    58c6:	b088      	sub	sp, #32
    58c8:	6804      	ldr	r4, [r0, #0]
    58ca:	9400      	str	r4, [sp, #0]
    58cc:	9c00      	ldr	r4, [sp, #0]
    58ce:	07e6      	lsls	r6, r4, #31
    58d0:	d5fa      	bpl.n	58c8 <PkaJcb2Afn+0x8>
    58d2:	4c23      	ldr	r4, [pc, #140]	; (5960 <PkaJcb2Afn+0xa0>)
    58d4:	4823      	ldr	r0, [pc, #140]	; (5964 <PkaJcb2Afn+0xa4>)
    58d6:	6004      	str	r4, [r0, #0]
    58d8:	4c23      	ldr	r4, [pc, #140]	; (5968 <PkaJcb2Afn+0xa8>)
    58da:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    58de:	682c      	ldr	r4, [r5, #0]
    58e0:	9401      	str	r4, [sp, #4]
    58e2:	9c01      	ldr	r4, [sp, #4]
    58e4:	07e4      	lsls	r4, r4, #31
    58e6:	d5fa      	bpl.n	58de <PkaJcb2Afn+0x1e>
    58e8:	6003      	str	r3, [r0, #0]
    58ea:	0193      	lsls	r3, r2, #6
    58ec:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    58f0:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    58f4:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    58f8:	682b      	ldr	r3, [r5, #0]
    58fa:	9302      	str	r3, [sp, #8]
    58fc:	9b02      	ldr	r3, [sp, #8]
    58fe:	07de      	lsls	r6, r3, #31
    5900:	d5fa      	bpl.n	58f8 <PkaJcb2Afn+0x38>
    5902:	6004      	str	r4, [r0, #0]
    5904:	682b      	ldr	r3, [r5, #0]
    5906:	9303      	str	r3, [sp, #12]
    5908:	9b03      	ldr	r3, [sp, #12]
    590a:	07db      	lsls	r3, r3, #31
    590c:	d5fa      	bpl.n	5904 <PkaJcb2Afn+0x44>
    590e:	4b17      	ldr	r3, [pc, #92]	; (596c <PkaJcb2Afn+0xac>)
    5910:	6003      	str	r3, [r0, #0]
    5912:	018b      	lsls	r3, r1, #6
    5914:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    5918:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    591c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    5920:	682e      	ldr	r6, [r5, #0]
    5922:	9604      	str	r6, [sp, #16]
    5924:	9e04      	ldr	r6, [sp, #16]
    5926:	07f6      	lsls	r6, r6, #31
    5928:	d5fa      	bpl.n	5920 <PkaJcb2Afn+0x60>
    592a:	6003      	str	r3, [r0, #0]
    592c:	682b      	ldr	r3, [r5, #0]
    592e:	9305      	str	r3, [sp, #20]
    5930:	9b05      	ldr	r3, [sp, #20]
    5932:	07de      	lsls	r6, r3, #31
    5934:	d5fa      	bpl.n	592c <PkaJcb2Afn+0x6c>
    5936:	6004      	str	r4, [r0, #0]
    5938:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    593c:	682b      	ldr	r3, [r5, #0]
    593e:	9306      	str	r3, [sp, #24]
    5940:	9b06      	ldr	r3, [sp, #24]
    5942:	07dc      	lsls	r4, r3, #31
    5944:	d5fa      	bpl.n	593c <PkaJcb2Afn+0x7c>
    5946:	6001      	str	r1, [r0, #0]
    5948:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    594c:	682b      	ldr	r3, [r5, #0]
    594e:	9307      	str	r3, [sp, #28]
    5950:	9b07      	ldr	r3, [sp, #28]
    5952:	07db      	lsls	r3, r3, #31
    5954:	d5fa      	bpl.n	594c <PkaJcb2Afn+0x8c>
    5956:	6002      	str	r2, [r0, #0]
    5958:	b008      	add	sp, #32
    595a:	bd70      	pop	{r4, r5, r6, pc}
    595c:	508410b0 	.word	0x508410b0
    5960:	290221c0 	.word	0x290221c0
    5964:	50841080 	.word	0x50841080
    5968:	98007180 	.word	0x98007180
    596c:	90186180 	.word	0x90186180

00005970 <PkaAddAff>:
    5970:	4b35      	ldr	r3, [pc, #212]	; (5a48 <PkaAddAff+0xd8>)
    5972:	b08e      	sub	sp, #56	; 0x38
    5974:	4619      	mov	r1, r3
    5976:	681a      	ldr	r2, [r3, #0]
    5978:	9200      	str	r2, [sp, #0]
    597a:	9a00      	ldr	r2, [sp, #0]
    597c:	07d2      	lsls	r2, r2, #31
    597e:	d5fa      	bpl.n	5976 <PkaAddAff+0x6>
    5980:	4b32      	ldr	r3, [pc, #200]	; (5a4c <PkaAddAff+0xdc>)
    5982:	4a33      	ldr	r2, [pc, #204]	; (5a50 <PkaAddAff+0xe0>)
    5984:	601a      	str	r2, [r3, #0]
    5986:	680a      	ldr	r2, [r1, #0]
    5988:	9201      	str	r2, [sp, #4]
    598a:	9a01      	ldr	r2, [sp, #4]
    598c:	07d0      	lsls	r0, r2, #31
    598e:	d5fa      	bpl.n	5986 <PkaAddAff+0x16>
    5990:	4a30      	ldr	r2, [pc, #192]	; (5a54 <PkaAddAff+0xe4>)
    5992:	601a      	str	r2, [r3, #0]
    5994:	680a      	ldr	r2, [r1, #0]
    5996:	9202      	str	r2, [sp, #8]
    5998:	9a02      	ldr	r2, [sp, #8]
    599a:	07d2      	lsls	r2, r2, #31
    599c:	d5fa      	bpl.n	5994 <PkaAddAff+0x24>
    599e:	4a2e      	ldr	r2, [pc, #184]	; (5a58 <PkaAddAff+0xe8>)
    59a0:	601a      	str	r2, [r3, #0]
    59a2:	680a      	ldr	r2, [r1, #0]
    59a4:	9203      	str	r2, [sp, #12]
    59a6:	9a03      	ldr	r2, [sp, #12]
    59a8:	07d0      	lsls	r0, r2, #31
    59aa:	d5fa      	bpl.n	59a2 <PkaAddAff+0x32>
    59ac:	4a2b      	ldr	r2, [pc, #172]	; (5a5c <PkaAddAff+0xec>)
    59ae:	601a      	str	r2, [r3, #0]
    59b0:	680a      	ldr	r2, [r1, #0]
    59b2:	9204      	str	r2, [sp, #16]
    59b4:	9a04      	ldr	r2, [sp, #16]
    59b6:	07d2      	lsls	r2, r2, #31
    59b8:	d5fa      	bpl.n	59b0 <PkaAddAff+0x40>
    59ba:	4a29      	ldr	r2, [pc, #164]	; (5a60 <PkaAddAff+0xf0>)
    59bc:	601a      	str	r2, [r3, #0]
    59be:	680a      	ldr	r2, [r1, #0]
    59c0:	9205      	str	r2, [sp, #20]
    59c2:	9a05      	ldr	r2, [sp, #20]
    59c4:	07d0      	lsls	r0, r2, #31
    59c6:	d5fa      	bpl.n	59be <PkaAddAff+0x4e>
    59c8:	4a26      	ldr	r2, [pc, #152]	; (5a64 <PkaAddAff+0xf4>)
    59ca:	601a      	str	r2, [r3, #0]
    59cc:	680a      	ldr	r2, [r1, #0]
    59ce:	9206      	str	r2, [sp, #24]
    59d0:	9a06      	ldr	r2, [sp, #24]
    59d2:	07d2      	lsls	r2, r2, #31
    59d4:	d5fa      	bpl.n	59cc <PkaAddAff+0x5c>
    59d6:	4a24      	ldr	r2, [pc, #144]	; (5a68 <PkaAddAff+0xf8>)
    59d8:	601a      	str	r2, [r3, #0]
    59da:	680a      	ldr	r2, [r1, #0]
    59dc:	9207      	str	r2, [sp, #28]
    59de:	9a07      	ldr	r2, [sp, #28]
    59e0:	07d0      	lsls	r0, r2, #31
    59e2:	d5fa      	bpl.n	59da <PkaAddAff+0x6a>
    59e4:	4a21      	ldr	r2, [pc, #132]	; (5a6c <PkaAddAff+0xfc>)
    59e6:	601a      	str	r2, [r3, #0]
    59e8:	680a      	ldr	r2, [r1, #0]
    59ea:	9208      	str	r2, [sp, #32]
    59ec:	9a08      	ldr	r2, [sp, #32]
    59ee:	07d2      	lsls	r2, r2, #31
    59f0:	d5fa      	bpl.n	59e8 <PkaAddAff+0x78>
    59f2:	4a1f      	ldr	r2, [pc, #124]	; (5a70 <PkaAddAff+0x100>)
    59f4:	601a      	str	r2, [r3, #0]
    59f6:	680a      	ldr	r2, [r1, #0]
    59f8:	9209      	str	r2, [sp, #36]	; 0x24
    59fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    59fc:	07d0      	lsls	r0, r2, #31
    59fe:	d5fa      	bpl.n	59f6 <PkaAddAff+0x86>
    5a00:	4a1c      	ldr	r2, [pc, #112]	; (5a74 <PkaAddAff+0x104>)
    5a02:	601a      	str	r2, [r3, #0]
    5a04:	680a      	ldr	r2, [r1, #0]
    5a06:	920a      	str	r2, [sp, #40]	; 0x28
    5a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5a0a:	07d2      	lsls	r2, r2, #31
    5a0c:	d5fa      	bpl.n	5a04 <PkaAddAff+0x94>
    5a0e:	4a1a      	ldr	r2, [pc, #104]	; (5a78 <PkaAddAff+0x108>)
    5a10:	601a      	str	r2, [r3, #0]
    5a12:	6808      	ldr	r0, [r1, #0]
    5a14:	900b      	str	r0, [sp, #44]	; 0x2c
    5a16:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5a18:	07c0      	lsls	r0, r0, #31
    5a1a:	d5fa      	bpl.n	5a12 <PkaAddAff+0xa2>
    5a1c:	601a      	str	r2, [r3, #0]
    5a1e:	680a      	ldr	r2, [r1, #0]
    5a20:	920c      	str	r2, [sp, #48]	; 0x30
    5a22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5a24:	07d0      	lsls	r0, r2, #31
    5a26:	d5fa      	bpl.n	5a1e <PkaAddAff+0xae>
    5a28:	4a14      	ldr	r2, [pc, #80]	; (5a7c <PkaAddAff+0x10c>)
    5a2a:	601a      	str	r2, [r3, #0]
    5a2c:	680a      	ldr	r2, [r1, #0]
    5a2e:	920d      	str	r2, [sp, #52]	; 0x34
    5a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5a32:	07d2      	lsls	r2, r2, #31
    5a34:	d5fa      	bpl.n	5a2c <PkaAddAff+0xbc>
    5a36:	4a12      	ldr	r2, [pc, #72]	; (5a80 <PkaAddAff+0x110>)
    5a38:	210e      	movs	r1, #14
    5a3a:	601a      	str	r2, [r3, #0]
    5a3c:	2000      	movs	r0, #0
    5a3e:	230d      	movs	r3, #13
    5a40:	220f      	movs	r2, #15
    5a42:	b00e      	add	sp, #56	; 0x38
    5a44:	f7ff bf3c 	b.w	58c0 <PkaJcb2Afn>
    5a48:	508410b0 	.word	0x508410b0
    5a4c:	50841080 	.word	0x50841080
    5a50:	29014380 	.word	0x29014380
    5a54:	21396340 	.word	0x21396340
    5a58:	29017080 	.word	0x29017080
    5a5c:	21542080 	.word	0x21542080
    5a60:	9034d100 	.word	0x9034d100
    5a64:	903440c0 	.word	0x903440c0
    5a68:	292030c0 	.word	0x292030c0
    5a6c:	900d53c0 	.word	0x900d53c0
    5a70:	90384100 	.word	0x90384100
    5a74:	c8082383 	.word	0xc8082383
    5a78:	2110e380 	.word	0x2110e380
    5a7c:	21384100 	.word	0x21384100
    5a80:	c80843cf 	.word	0xc80843cf

00005a84 <PkaSum2ScalarMullt>:
    5a84:	2301      	movs	r3, #1
    5a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a8a:	b092      	sub	sp, #72	; 0x48
    5a8c:	e9cd 3303 	strd	r3, r3, [sp, #12]
    5a90:	4b62      	ldr	r3, [pc, #392]	; (5c1c <PkaSum2ScalarMullt+0x198>)
    5a92:	461d      	mov	r5, r3
    5a94:	681a      	ldr	r2, [r3, #0]
    5a96:	9205      	str	r2, [sp, #20]
    5a98:	9a05      	ldr	r2, [sp, #20]
    5a9a:	07d2      	lsls	r2, r2, #31
    5a9c:	d5fa      	bpl.n	5a94 <PkaSum2ScalarMullt+0x10>
    5a9e:	4b60      	ldr	r3, [pc, #384]	; (5c20 <PkaSum2ScalarMullt+0x19c>)
    5aa0:	4c60      	ldr	r4, [pc, #384]	; (5c24 <PkaSum2ScalarMullt+0x1a0>)
    5aa2:	6023      	str	r3, [r4, #0]
    5aa4:	4b60      	ldr	r3, [pc, #384]	; (5c28 <PkaSum2ScalarMullt+0x1a4>)
    5aa6:	4619      	mov	r1, r3
    5aa8:	681a      	ldr	r2, [r3, #0]
    5aaa:	9206      	str	r2, [sp, #24]
    5aac:	9a06      	ldr	r2, [sp, #24]
    5aae:	07d7      	lsls	r7, r2, #31
    5ab0:	d5fa      	bpl.n	5aa8 <PkaSum2ScalarMullt+0x24>
    5ab2:	4b5e      	ldr	r3, [pc, #376]	; (5c2c <PkaSum2ScalarMullt+0x1a8>)
    5ab4:	681a      	ldr	r2, [r3, #0]
    5ab6:	04d6      	lsls	r6, r2, #19
    5ab8:	f100 80a8 	bmi.w	5c0c <PkaSum2ScalarMullt+0x188>
    5abc:	682a      	ldr	r2, [r5, #0]
    5abe:	9207      	str	r2, [sp, #28]
    5ac0:	9a07      	ldr	r2, [sp, #28]
    5ac2:	07d0      	lsls	r0, r2, #31
    5ac4:	d5fa      	bpl.n	5abc <PkaSum2ScalarMullt+0x38>
    5ac6:	4a5a      	ldr	r2, [pc, #360]	; (5c30 <PkaSum2ScalarMullt+0x1ac>)
    5ac8:	6022      	str	r2, [r4, #0]
    5aca:	680a      	ldr	r2, [r1, #0]
    5acc:	9208      	str	r2, [sp, #32]
    5ace:	9a08      	ldr	r2, [sp, #32]
    5ad0:	07d2      	lsls	r2, r2, #31
    5ad2:	d5fa      	bpl.n	5aca <PkaSum2ScalarMullt+0x46>
    5ad4:	681e      	ldr	r6, [r3, #0]
    5ad6:	f3c6 3600 	ubfx	r6, r6, #12, #1
    5ada:	2e00      	cmp	r6, #0
    5adc:	f040 8098 	bne.w	5c10 <PkaSum2ScalarMullt+0x18c>
    5ae0:	2012      	movs	r0, #18
    5ae2:	f7ff f8f3 	bl	4ccc <PkaGetRegEffectiveSizeInBits>
    5ae6:	4607      	mov	r7, r0
    5ae8:	2013      	movs	r0, #19
    5aea:	f7ff f8ef 	bl	4ccc <PkaGetRegEffectiveSizeInBits>
    5aee:	4287      	cmp	r7, r0
    5af0:	bf8c      	ite	hi
    5af2:	2012      	movhi	r0, #18
    5af4:	2013      	movls	r0, #19
    5af6:	f7ff f8e9 	bl	4ccc <PkaGetRegEffectiveSizeInBits>
    5afa:	1e47      	subs	r7, r0, #1
    5afc:	f7ff ff38 	bl	5970 <PkaAddAff>
    5b00:	ab03      	add	r3, sp, #12
    5b02:	aa01      	add	r2, sp, #4
    5b04:	4639      	mov	r1, r7
    5b06:	2012      	movs	r0, #18
    5b08:	f7ff f926 	bl	4d58 <PkaGetNextMsBit>
    5b0c:	ab04      	add	r3, sp, #16
    5b0e:	4680      	mov	r8, r0
    5b10:	aa02      	add	r2, sp, #8
    5b12:	4639      	mov	r1, r7
    5b14:	2013      	movs	r0, #19
    5b16:	f7ff f91f 	bl	4d58 <PkaGetNextMsBit>
    5b1a:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    5b1e:	2802      	cmp	r0, #2
    5b20:	d032      	beq.n	5b88 <PkaSum2ScalarMullt+0x104>
    5b22:	2803      	cmp	r0, #3
    5b24:	d03e      	beq.n	5ba4 <PkaSum2ScalarMullt+0x120>
    5b26:	2801      	cmp	r0, #1
    5b28:	d174      	bne.n	5c14 <PkaSum2ScalarMullt+0x190>
    5b2a:	682b      	ldr	r3, [r5, #0]
    5b2c:	9309      	str	r3, [sp, #36]	; 0x24
    5b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b30:	07db      	lsls	r3, r3, #31
    5b32:	d5fa      	bpl.n	5b2a <PkaSum2ScalarMullt+0xa6>
    5b34:	4b3f      	ldr	r3, [pc, #252]	; (5c34 <PkaSum2ScalarMullt+0x1b0>)
    5b36:	6023      	str	r3, [r4, #0]
    5b38:	682b      	ldr	r3, [r5, #0]
    5b3a:	930a      	str	r3, [sp, #40]	; 0x28
    5b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5b3e:	07d8      	lsls	r0, r3, #31
    5b40:	d5fa      	bpl.n	5b38 <PkaSum2ScalarMullt+0xb4>
    5b42:	4b3d      	ldr	r3, [pc, #244]	; (5c38 <PkaSum2ScalarMullt+0x1b4>)
    5b44:	6023      	str	r3, [r4, #0]
    5b46:	682b      	ldr	r3, [r5, #0]
    5b48:	930f      	str	r3, [sp, #60]	; 0x3c
    5b4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5b4c:	07d9      	lsls	r1, r3, #31
    5b4e:	d5fa      	bpl.n	5b46 <PkaSum2ScalarMullt+0xc2>
    5b50:	4b3a      	ldr	r3, [pc, #232]	; (5c3c <PkaSum2ScalarMullt+0x1b8>)
    5b52:	6023      	str	r3, [r4, #0]
    5b54:	682b      	ldr	r3, [r5, #0]
    5b56:	9310      	str	r3, [sp, #64]	; 0x40
    5b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5b5a:	07da      	lsls	r2, r3, #31
    5b5c:	d5fa      	bpl.n	5b54 <PkaSum2ScalarMullt+0xd0>
    5b5e:	4b38      	ldr	r3, [pc, #224]	; (5c40 <PkaSum2ScalarMullt+0x1bc>)
    5b60:	6023      	str	r3, [r4, #0]
    5b62:	682b      	ldr	r3, [r5, #0]
    5b64:	9311      	str	r3, [sp, #68]	; 0x44
    5b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5b68:	07db      	lsls	r3, r3, #31
    5b6a:	d5fa      	bpl.n	5b62 <PkaSum2ScalarMullt+0xde>
    5b6c:	4b35      	ldr	r3, [pc, #212]	; (5c44 <PkaSum2ScalarMullt+0x1c0>)
    5b6e:	6023      	str	r3, [r4, #0]
    5b70:	3f01      	subs	r7, #1
    5b72:	d525      	bpl.n	5bc0 <PkaSum2ScalarMullt+0x13c>
    5b74:	2310      	movs	r3, #16
    5b76:	2219      	movs	r2, #25
    5b78:	2118      	movs	r1, #24
    5b7a:	2000      	movs	r0, #0
    5b7c:	f7ff fea0 	bl	58c0 <PkaJcb2Afn>
    5b80:	4630      	mov	r0, r6
    5b82:	b012      	add	sp, #72	; 0x48
    5b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b88:	682b      	ldr	r3, [r5, #0]
    5b8a:	930b      	str	r3, [sp, #44]	; 0x2c
    5b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5b8e:	07d9      	lsls	r1, r3, #31
    5b90:	d5fa      	bpl.n	5b88 <PkaSum2ScalarMullt+0x104>
    5b92:	4b2d      	ldr	r3, [pc, #180]	; (5c48 <PkaSum2ScalarMullt+0x1c4>)
    5b94:	6023      	str	r3, [r4, #0]
    5b96:	682b      	ldr	r3, [r5, #0]
    5b98:	930c      	str	r3, [sp, #48]	; 0x30
    5b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b9c:	07da      	lsls	r2, r3, #31
    5b9e:	d5fa      	bpl.n	5b96 <PkaSum2ScalarMullt+0x112>
    5ba0:	4b2a      	ldr	r3, [pc, #168]	; (5c4c <PkaSum2ScalarMullt+0x1c8>)
    5ba2:	e7cf      	b.n	5b44 <PkaSum2ScalarMullt+0xc0>
    5ba4:	682b      	ldr	r3, [r5, #0]
    5ba6:	930d      	str	r3, [sp, #52]	; 0x34
    5ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5baa:	07db      	lsls	r3, r3, #31
    5bac:	d5fa      	bpl.n	5ba4 <PkaSum2ScalarMullt+0x120>
    5bae:	4b28      	ldr	r3, [pc, #160]	; (5c50 <PkaSum2ScalarMullt+0x1cc>)
    5bb0:	6023      	str	r3, [r4, #0]
    5bb2:	682b      	ldr	r3, [r5, #0]
    5bb4:	930e      	str	r3, [sp, #56]	; 0x38
    5bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5bb8:	07d8      	lsls	r0, r3, #31
    5bba:	d5fa      	bpl.n	5bb2 <PkaSum2ScalarMullt+0x12e>
    5bbc:	4b25      	ldr	r3, [pc, #148]	; (5c54 <PkaSum2ScalarMullt+0x1d0>)
    5bbe:	e7c1      	b.n	5b44 <PkaSum2ScalarMullt+0xc0>
    5bc0:	ab03      	add	r3, sp, #12
    5bc2:	aa01      	add	r2, sp, #4
    5bc4:	4639      	mov	r1, r7
    5bc6:	2012      	movs	r0, #18
    5bc8:	f7ff f8c6 	bl	4d58 <PkaGetNextMsBit>
    5bcc:	ab04      	add	r3, sp, #16
    5bce:	4604      	mov	r4, r0
    5bd0:	aa02      	add	r2, sp, #8
    5bd2:	4639      	mov	r1, r7
    5bd4:	2013      	movs	r0, #19
    5bd6:	f7ff f8bf 	bl	4d58 <PkaGetNextMsBit>
    5bda:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    5bde:	d102      	bne.n	5be6 <PkaSum2ScalarMullt+0x162>
    5be0:	f7ff fc12 	bl	5408 <PkaDoubleMdf2Mdf>
    5be4:	e7c4      	b.n	5b70 <PkaSum2ScalarMullt+0xec>
    5be6:	f7ff fce5 	bl	55b4 <PkaDoubleMdf2Jcb>
    5bea:	2c02      	cmp	r4, #2
    5bec:	d008      	beq.n	5c00 <PkaSum2ScalarMullt+0x17c>
    5bee:	2c03      	cmp	r4, #3
    5bf0:	d009      	beq.n	5c06 <PkaSum2ScalarMullt+0x182>
    5bf2:	2c01      	cmp	r4, #1
    5bf4:	d110      	bne.n	5c18 <PkaSum2ScalarMullt+0x194>
    5bf6:	2117      	movs	r1, #23
    5bf8:	2016      	movs	r0, #22
    5bfa:	f7ff fd97 	bl	572c <PkaAddJcbAfn2Mdf>
    5bfe:	e7b7      	b.n	5b70 <PkaSum2ScalarMullt+0xec>
    5c00:	2115      	movs	r1, #21
    5c02:	2014      	movs	r0, #20
    5c04:	e7f9      	b.n	5bfa <PkaSum2ScalarMullt+0x176>
    5c06:	210f      	movs	r1, #15
    5c08:	200e      	movs	r0, #14
    5c0a:	e7f6      	b.n	5bfa <PkaSum2ScalarMullt+0x176>
    5c0c:	4e12      	ldr	r6, [pc, #72]	; (5c58 <PkaSum2ScalarMullt+0x1d4>)
    5c0e:	e7b7      	b.n	5b80 <PkaSum2ScalarMullt+0xfc>
    5c10:	4e12      	ldr	r6, [pc, #72]	; (5c5c <PkaSum2ScalarMullt+0x1d8>)
    5c12:	e7b5      	b.n	5b80 <PkaSum2ScalarMullt+0xfc>
    5c14:	4e12      	ldr	r6, [pc, #72]	; (5c60 <PkaSum2ScalarMullt+0x1dc>)
    5c16:	e7b3      	b.n	5b80 <PkaSum2ScalarMullt+0xfc>
    5c18:	4e12      	ldr	r6, [pc, #72]	; (5c64 <PkaSum2ScalarMullt+0x1e0>)
    5c1a:	e7b1      	b.n	5b80 <PkaSum2ScalarMullt+0xfc>
    5c1c:	508410b0 	.word	0x508410b0
    5c20:	514a0800 	.word	0x514a0800
    5c24:	50841080 	.word	0x50841080
    5c28:	508410b4 	.word	0x508410b4
    5c2c:	50841088 	.word	0x50841088
    5c30:	514e0800 	.word	0x514e0800
    5c34:	495a0600 	.word	0x495a0600
    5c38:	495e0640 	.word	0x495e0640
    5c3c:	41420400 	.word	0x41420400
    5c40:	49421400 	.word	0x49421400
    5c44:	492e0440 	.word	0x492e0440
    5c48:	49520600 	.word	0x49520600
    5c4c:	49560640 	.word	0x49560640
    5c50:	493a0600 	.word	0x493a0600
    5c54:	493e0640 	.word	0x493e0640
    5c58:	00f10806 	.word	0x00f10806
    5c5c:	00f10807 	.word	0x00f10807
    5c60:	00f10804 	.word	0x00f10804
    5c64:	00f10805 	.word	0x00f10805

00005c68 <SaSi_HalClearInterruptBit>:
    5c68:	4b01      	ldr	r3, [pc, #4]	; (5c70 <SaSi_HalClearInterruptBit+0x8>)
    5c6a:	6018      	str	r0, [r3, #0]
    5c6c:	4770      	bx	lr
    5c6e:	bf00      	nop
    5c70:	50841a08 	.word	0x50841a08

00005c74 <SaSi_HalMaskInterrupt>:
    5c74:	4b01      	ldr	r3, [pc, #4]	; (5c7c <SaSi_HalMaskInterrupt+0x8>)
    5c76:	6018      	str	r0, [r3, #0]
    5c78:	4770      	bx	lr
    5c7a:	bf00      	nop
    5c7c:	50841a04 	.word	0x50841a04

00005c80 <SaSi_HalWaitInterrupt>:
    5c80:	4a03      	ldr	r2, [pc, #12]	; (5c90 <SaSi_HalWaitInterrupt+0x10>)
    5c82:	6813      	ldr	r3, [r2, #0]
    5c84:	4218      	tst	r0, r3
    5c86:	d0fc      	beq.n	5c82 <SaSi_HalWaitInterrupt+0x2>
    5c88:	4a02      	ldr	r2, [pc, #8]	; (5c94 <SaSi_HalWaitInterrupt+0x14>)
    5c8a:	6010      	str	r0, [r2, #0]
    5c8c:	4618      	mov	r0, r3
    5c8e:	4770      	bx	lr
    5c90:	50841a00 	.word	0x50841a00
    5c94:	50841a08 	.word	0x50841a08

00005c98 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    5c98:	b129      	cbz	r1, 5ca6 <flash_area_id_from_multi_image_slot+0xe>
    5c9a:	2901      	cmp	r1, #1
    5c9c:	bf14      	ite	ne
    5c9e:	f06f 0015 	mvnne.w	r0, #21
    5ca2:	2006      	moveq	r0, #6
    5ca4:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    5ca6:	2002      	movs	r0, #2
}
    5ca8:	4770      	bx	lr

00005caa <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    5caa:	4770      	bx	lr

00005cac <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    5cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5cb0:	460e      	mov	r6, r1
    5cb2:	4617      	mov	r7, r2
    5cb4:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    5cb6:	4604      	mov	r4, r0
    5cb8:	b928      	cbnz	r0, 5cc6 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    5cba:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    5cbe:	4640      	mov	r0, r8
    5cc0:	b003      	add	sp, #12
    5cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    5cc6:	2900      	cmp	r1, #0
    5cc8:	d0f7      	beq.n	5cba <bootutil_tlv_iter_begin+0xe>
    5cca:	2a00      	cmp	r2, #0
    5ccc:	d0f5      	beq.n	5cba <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    5cce:	68cb      	ldr	r3, [r1, #12]
    5cd0:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5cd2:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    5cd4:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5cd6:	2304      	movs	r3, #4
    5cd8:	4629      	mov	r1, r5
    5cda:	eb0d 0203 	add.w	r2, sp, r3
    5cde:	f000 fc84 	bl	65ea <flash_area_read>
    5ce2:	4680      	mov	r8, r0
    5ce4:	2800      	cmp	r0, #0
    5ce6:	d1e8      	bne.n	5cba <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5ce8:	f646 1208 	movw	r2, #26888	; 0x6908
    5cec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5cf0:	8973      	ldrh	r3, [r6, #10]
    5cf2:	4291      	cmp	r1, r2
    5cf4:	d123      	bne.n	5d3e <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5cf6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5cfa:	4299      	cmp	r1, r3
    5cfc:	d1dd      	bne.n	5cba <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    5cfe:	2304      	movs	r3, #4
    5d00:	4638      	mov	r0, r7
    5d02:	eb0d 0203 	add.w	r2, sp, r3
    5d06:	4429      	add	r1, r5
    5d08:	f000 fc6f 	bl	65ea <flash_area_read>
    5d0c:	2800      	cmp	r0, #0
    5d0e:	d1d4      	bne.n	5cba <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5d10:	f646 1307 	movw	r3, #26887	; 0x6907
    5d14:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5d18:	429a      	cmp	r2, r3
    5d1a:	d1ce      	bne.n	5cba <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    5d1c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5d20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    5d24:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5d26:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    5d28:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5d2c:	442b      	add	r3, r5
    5d2e:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    5d30:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5d32:	4413      	add	r3, r2
    it->type = type;
    5d34:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5d38:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    5d3a:	6125      	str	r5, [r4, #16]
    return 0;
    5d3c:	e7bf      	b.n	5cbe <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    5d3e:	2b00      	cmp	r3, #0
    5d40:	d0e6      	beq.n	5d10 <bootutil_tlv_iter_begin+0x64>
    5d42:	e7ba      	b.n	5cba <bootutil_tlv_iter_begin+0xe>

00005d44 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    5d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5d48:	460f      	mov	r7, r1
    5d4a:	4690      	mov	r8, r2
    5d4c:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5d4e:	4604      	mov	r4, r0
    5d50:	b920      	cbnz	r0, 5d5c <bootutil_tlv_iter_next+0x18>
        return -1;
    5d52:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    5d56:	b003      	add	sp, #12
    5d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5d5c:	6803      	ldr	r3, [r0, #0]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d0f7      	beq.n	5d52 <bootutil_tlv_iter_next+0xe>
    5d62:	6843      	ldr	r3, [r0, #4]
    5d64:	2b00      	cmp	r3, #0
    5d66:	d0f4      	beq.n	5d52 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5d68:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    5d6c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5d70:	429a      	cmp	r2, r3
    5d72:	d216      	bcs.n	5da2 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    5d74:	6823      	ldr	r3, [r4, #0]
    5d76:	895b      	ldrh	r3, [r3, #10]
    5d78:	b123      	cbz	r3, 5d84 <bootutil_tlv_iter_next+0x40>
    5d7a:	68e3      	ldr	r3, [r4, #12]
    5d7c:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    5d7e:	bf04      	itt	eq
    5d80:	3304      	addeq	r3, #4
    5d82:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    5d84:	2304      	movs	r3, #4
    5d86:	6921      	ldr	r1, [r4, #16]
    5d88:	6860      	ldr	r0, [r4, #4]
    5d8a:	eb0d 0203 	add.w	r2, sp, r3
    5d8e:	f000 fc2c 	bl	65ea <flash_area_read>
        if (rc) {
    5d92:	2800      	cmp	r0, #0
    5d94:	d1dd      	bne.n	5d52 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5d96:	7aa3      	ldrb	r3, [r4, #10]
    5d98:	6925      	ldr	r5, [r4, #16]
    5d9a:	b123      	cbz	r3, 5da6 <bootutil_tlv_iter_next+0x62>
    5d9c:	68e3      	ldr	r3, [r4, #12]
    5d9e:	42ab      	cmp	r3, r5
    5da0:	d801      	bhi.n	5da6 <bootutil_tlv_iter_next+0x62>
            return 1;
    5da2:	2001      	movs	r0, #1
    5da4:	e7d7      	b.n	5d56 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5da6:	8921      	ldrh	r1, [r4, #8]
    5da8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5dac:	4549      	cmp	r1, r9
    5dae:	f103 0204 	add.w	r2, r3, #4
    5db2:	d003      	beq.n	5dbc <bootutil_tlv_iter_next+0x78>
    5db4:	f8bd c004 	ldrh.w	ip, [sp, #4]
    5db8:	458c      	cmp	ip, r1
    5dba:	d10b      	bne.n	5dd4 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    5dbc:	b116      	cbz	r6, 5dc4 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    5dbe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5dc2:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    5dc4:	3504      	adds	r5, #4
    5dc6:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    5dc8:	f8a8 3000 	strh.w	r3, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5dcc:	6923      	ldr	r3, [r4, #16]
    5dce:	4413      	add	r3, r2
    5dd0:	6123      	str	r3, [r4, #16]
            return 0;
    5dd2:	e7c0      	b.n	5d56 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5dd4:	4415      	add	r5, r2
    5dd6:	6125      	str	r5, [r4, #16]
    5dd8:	e7c8      	b.n	5d6c <bootutil_tlv_iter_next+0x28>

00005dda <bootutil_read_bigint>:
{
    5dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5ddc:	460c      	mov	r4, r1
    5dde:	4606      	mov	r6, r0
    5de0:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    5de2:	2302      	movs	r3, #2
    5de4:	4620      	mov	r0, r4
    5de6:	aa01      	add	r2, sp, #4
    5de8:	f000 fa3c 	bl	6264 <mbedtls_asn1_get_tag>
    5dec:	4605      	mov	r5, r0
    5dee:	b9e8      	cbnz	r0, 5e2c <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    5df0:	9a01      	ldr	r2, [sp, #4]
    5df2:	2a1f      	cmp	r2, #31
    5df4:	d90e      	bls.n	5e14 <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    5df6:	f1a2 0120 	sub.w	r1, r2, #32
    5dfa:	4630      	mov	r0, r6
    5dfc:	2220      	movs	r2, #32
    5dfe:	6823      	ldr	r3, [r4, #0]
    5e00:	4419      	add	r1, r3
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    5e02:	f000 fe7b 	bl	6afc <memcpy>
    *cp += len;
    5e06:	6823      	ldr	r3, [r4, #0]
    5e08:	9a01      	ldr	r2, [sp, #4]
    5e0a:	4413      	add	r3, r2
    5e0c:	6023      	str	r3, [r4, #0]
}
    5e0e:	4628      	mov	r0, r5
    5e10:	b002      	add	sp, #8
    5e12:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    5e14:	4601      	mov	r1, r0
    5e16:	f1c2 0220 	rsb	r2, r2, #32
    5e1a:	4630      	mov	r0, r6
    5e1c:	f000 fe99 	bl	6b52 <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    5e20:	9a01      	ldr	r2, [sp, #4]
    5e22:	6821      	ldr	r1, [r4, #0]
    5e24:	f1c2 0020 	rsb	r0, r2, #32
    5e28:	4430      	add	r0, r6
    5e2a:	e7ea      	b.n	5e02 <bootutil_read_bigint+0x28>
        return -3;
    5e2c:	f06f 0502 	mvn.w	r5, #2
    5e30:	e7ed      	b.n	5e0e <bootutil_read_bigint+0x34>

00005e32 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    5e32:	f000 be53 	b.w	6adc <memcmp>

00005e36 <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    5e36:	f44f 7340 	mov.w	r3, #768	; 0x300
    5e3a:	4358      	muls	r0, r3
}
    5e3c:	3030      	adds	r0, #48	; 0x30
    5e3e:	4770      	bx	lr

00005e40 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    5e40:	780b      	ldrb	r3, [r1, #0]
    5e42:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    5e46:	2b02      	cmp	r3, #2
}
    5e48:	bf14      	ite	ne
    5e4a:	f04f 30ff 	movne.w	r0, #4294967295
    5e4e:	f44f 7040 	moveq.w	r0, #768	; 0x300
    5e52:	4770      	bx	lr

00005e54 <boot_status_off>:
{
    5e54:	b510      	push	{r4, lr}
    5e56:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    5e58:	f000 fc46 	bl	66e8 <flash_area_align>
}
    5e5c:	f44f 7240 	mov.w	r2, #768	; 0x300
    return fap->fa_size - off_from_end;
    5e60:	68a3      	ldr	r3, [r4, #8]
    5e62:	3b30      	subs	r3, #48	; 0x30
}
    5e64:	fb02 3010 	mls	r0, r2, r0, r3
    5e68:	bd10      	pop	{r4, pc}

00005e6a <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    5e6a:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5e6c:	2201      	movs	r2, #1
    5e6e:	3920      	subs	r1, #32
    5e70:	f001 b950 	b.w	7114 <boot_write_trailer_flag>

00005e74 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    5e74:	b513      	push	{r0, r1, r4, lr}
    5e76:	4604      	mov	r4, r0
    5e78:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5e7a:	f001 f8ea 	bl	7052 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    5e7e:	2304      	movs	r3, #4
    5e80:	f1a0 0108 	sub.w	r1, r0, #8
    5e84:	eb0d 0203 	add.w	r2, sp, r3
    5e88:	4620      	mov	r0, r4
    5e8a:	f001 f916 	bl	70ba <boot_write_trailer>
}
    5e8e:	b002      	add	sp, #8
    5e90:	bd10      	pop	{r4, pc}

00005e92 <boot_read_image_size>:
{
    5e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e94:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5e96:	2000      	movs	r0, #0
{
    5e98:	460c      	mov	r4, r1
    5e9a:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5e9c:	f7ff fefc 	bl	5c98 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5ea0:	4669      	mov	r1, sp
    5ea2:	b2c0      	uxtb	r0, r0
    5ea4:	f7fb ff48 	bl	1d38 <flash_area_open>
    if (rc != 0) {
    5ea8:	b130      	cbz	r0, 5eb8 <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    5eaa:	2501      	movs	r5, #1
    flash_area_close(fap);
    5eac:	9800      	ldr	r0, [sp, #0]
    5eae:	f000 fb9b 	bl	65e8 <flash_area_close>
}
    5eb2:	4628      	mov	r0, r5
    5eb4:	b003      	add	sp, #12
    5eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5eb8:	212c      	movs	r1, #44	; 0x2c
    5eba:	fb01 5404 	mla	r4, r1, r4, r5
    5ebe:	8921      	ldrh	r1, [r4, #8]
    5ec0:	68e3      	ldr	r3, [r4, #12]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5ec2:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5ec4:	18ce      	adds	r6, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5ec6:	2304      	movs	r3, #4
    5ec8:	4631      	mov	r1, r6
    5eca:	eb0d 0203 	add.w	r2, sp, r3
    5ece:	f000 fb8c 	bl	65ea <flash_area_read>
    5ed2:	4605      	mov	r5, r0
    5ed4:	2800      	cmp	r0, #0
    5ed6:	d1e8      	bne.n	5eaa <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5ed8:	f646 1308 	movw	r3, #26888	; 0x6908
    5edc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    5ee0:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5ee2:	429a      	cmp	r2, r3
    5ee4:	d11a      	bne.n	5f1c <boot_read_image_size+0x8a>
        if (protect_tlv_size != info.it_tlv_tot) {
    5ee6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5eea:	429c      	cmp	r4, r3
    5eec:	d001      	beq.n	5ef2 <boot_read_image_size+0x60>
            rc = BOOT_EBADIMAGE;
    5eee:	2503      	movs	r5, #3
    5ef0:	e7dc      	b.n	5eac <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5ef2:	2304      	movs	r3, #4
    5ef4:	9800      	ldr	r0, [sp, #0]
    5ef6:	eb0d 0203 	add.w	r2, sp, r3
    5efa:	19a1      	adds	r1, r4, r6
    5efc:	f000 fb75 	bl	65ea <flash_area_read>
    5f00:	2800      	cmp	r0, #0
    5f02:	d1d2      	bne.n	5eaa <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5f04:	f646 1307 	movw	r3, #26887	; 0x6907
    5f08:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5f0c:	429a      	cmp	r2, r3
    5f0e:	d1ee      	bne.n	5eee <boot_read_image_size+0x5c>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5f10:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5f14:	4421      	add	r1, r4
    5f16:	4431      	add	r1, r6
    5f18:	6039      	str	r1, [r7, #0]
    rc = 0;
    5f1a:	e7c7      	b.n	5eac <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    5f1c:	2c00      	cmp	r4, #0
    5f1e:	d0f1      	beq.n	5f04 <boot_read_image_size+0x72>
    5f20:	e7e5      	b.n	5eee <boot_read_image_size+0x5c>

00005f22 <boot_read_image_headers>:
{
    5f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5f24:	4613      	mov	r3, r2
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5f26:	9201      	str	r2, [sp, #4]
{
    5f28:	460e      	mov	r6, r1
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5f2a:	4602      	mov	r2, r0
    5f2c:	2100      	movs	r1, #0
{
    5f2e:	4605      	mov	r5, r0
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5f30:	f7fa ff4c 	bl	dcc <boot_read_image_header>
        if (rc != 0) {
    5f34:	4604      	mov	r4, r0
    5f36:	b950      	cbnz	r0, 5f4e <boot_read_image_headers+0x2c>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5f38:	2101      	movs	r1, #1
    5f3a:	4628      	mov	r0, r5
    5f3c:	9b01      	ldr	r3, [sp, #4]
    5f3e:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    5f42:	f7fa ff43 	bl	dcc <boot_read_image_header>
        if (rc != 0) {
    5f46:	b110      	cbz	r0, 5f4e <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    5f48:	2e00      	cmp	r6, #0
    5f4a:	bf18      	it	ne
    5f4c:	4604      	movne	r4, r0
}
    5f4e:	4620      	mov	r0, r4
    5f50:	b002      	add	sp, #8
    5f52:	bd70      	pop	{r4, r5, r6, pc}

00005f54 <boot_read_sectors>:
{
    5f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
    num_sectors = BOOT_MAX_IMG_SECTORS;
    5f56:	f44f 7580 	mov.w	r5, #256	; 0x100
{
    5f5a:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5f5c:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5f5e:	a901      	add	r1, sp, #4
    5f60:	2002      	movs	r0, #2
    num_sectors = BOOT_MAX_IMG_SECTORS;
    5f62:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5f64:	f7fb fefc 	bl	1d60 <flash_area_get_sectors>
    if (rc != 0) {
    5f68:	b948      	cbnz	r0, 5f7e <boot_read_sectors+0x2a>
    *out_num_sectors = num_sectors;
    5f6a:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5f6c:	2006      	movs	r0, #6
    5f6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    5f70:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5f72:	a901      	add	r1, sp, #4
    num_sectors = BOOT_MAX_IMG_SECTORS;
    5f74:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5f76:	f7fb fef3 	bl	1d60 <flash_area_get_sectors>
    if (rc != 0) {
    5f7a:	4605      	mov	r5, r0
    5f7c:	b108      	cbz	r0, 5f82 <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    5f7e:	2501      	movs	r5, #1
    5f80:	e005      	b.n	5f8e <boot_read_sectors+0x3a>
    *out_num_sectors = num_sectors;
    5f82:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5f84:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5f86:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5f88:	f000 fbae 	bl	66e8 <flash_area_align>
    5f8c:	65e0      	str	r0, [r4, #92]	; 0x5c
}
    5f8e:	4628      	mov	r0, r5
    5f90:	b003      	add	sp, #12
    5f92:	bd30      	pop	{r4, r5, pc}

00005f94 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5f94:	2301      	movs	r3, #1
    5f96:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5f98:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    5f9c:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    5f9e:	2300      	movs	r3, #0
    bs->source = 0;
    5fa0:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5fa4:	4770      	bx	lr

00005fa6 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5fa6:	7943      	ldrb	r3, [r0, #5]
    5fa8:	2b01      	cmp	r3, #1
    5faa:	d107      	bne.n	5fbc <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5fac:	6803      	ldr	r3, [r0, #0]
    5fae:	2b01      	cmp	r3, #1
    5fb0:	d104      	bne.n	5fbc <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    5fb2:	7900      	ldrb	r0, [r0, #4]
    5fb4:	1e43      	subs	r3, r0, #1
    5fb6:	4258      	negs	r0, r3
    5fb8:	4158      	adcs	r0, r3
    5fba:	4770      	bx	lr
    5fbc:	2000      	movs	r0, #0
}
    5fbe:	4770      	bx	lr

00005fc0 <boot_write_status>:
{
    5fc0:	b570      	push	{r4, r5, r6, lr}
    5fc2:	b086      	sub	sp, #24
    5fc4:	4606      	mov	r6, r0
    5fc6:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5fc8:	2002      	movs	r0, #2
    5fca:	a903      	add	r1, sp, #12
    5fcc:	f7fb feb4 	bl	1d38 <flash_area_open>
    if (rc != 0) {
    5fd0:	bb30      	cbnz	r0, 6020 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    5fd2:	9803      	ldr	r0, [sp, #12]
    5fd4:	f7ff ff3e 	bl	5e54 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5fd8:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5fda:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5fdc:	4628      	mov	r0, r5
    5fde:	f000 f8e3 	bl	61a8 <boot_status_internal_off>
    off = boot_status_off(fap) +
    5fe2:	4404      	add	r4, r0
    align = flash_area_align(fap);
    5fe4:	9803      	ldr	r0, [sp, #12]
    5fe6:	f000 fb7f 	bl	66e8 <flash_area_align>
    5fea:	9001      	str	r0, [sp, #4]
    erased_val = flash_area_erased_val(fap);
    5fec:	9803      	ldr	r0, [sp, #12]
    5fee:	f000 fb84 	bl	66fa <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5ff2:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    5ff4:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5ff6:	a804      	add	r0, sp, #16
    5ff8:	f000 fdab 	bl	6b52 <memset>
    buf[0] = bs->state;
    5ffc:	792a      	ldrb	r2, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    5ffe:	4621      	mov	r1, r4
    buf[0] = bs->state;
    6000:	f88d 2010 	strb.w	r2, [sp, #16]
    rc = flash_area_write(fap, off, buf, align);
    6004:	9b01      	ldr	r3, [sp, #4]
    6006:	9803      	ldr	r0, [sp, #12]
    6008:	aa04      	add	r2, sp, #16
    600a:	f000 fb0b 	bl	6624 <flash_area_write>
    if (rc != 0) {
    600e:	1e04      	subs	r4, r0, #0
    6010:	bf18      	it	ne
    6012:	2401      	movne	r4, #1
    flash_area_close(fap);
    6014:	9803      	ldr	r0, [sp, #12]
    6016:	f000 fae7 	bl	65e8 <flash_area_close>
}
    601a:	4620      	mov	r0, r4
    601c:	b006      	add	sp, #24
    601e:	bd70      	pop	{r4, r5, r6, pc}
        rc = BOOT_EFLASH;
    6020:	2401      	movs	r4, #1
    6022:	e7f7      	b.n	6014 <boot_write_status+0x54>

00006024 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    6024:	f000 bb30 	b.w	6688 <flash_area_erase>

00006028 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    6028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    602c:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    602e:	2100      	movs	r1, #0
{
    6030:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    6032:	4608      	mov	r0, r1
    6034:	f7ff fe30 	bl	5c98 <flash_area_id_from_multi_image_slot>
    6038:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    603a:	2101      	movs	r1, #1
    603c:	2000      	movs	r0, #0
    603e:	f7ff fe2b 	bl	5c98 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    6042:	7833      	ldrb	r3, [r6, #0]
    6044:	429c      	cmp	r4, r3
    6046:	d021      	beq.n	608c <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    6048:	4298      	cmp	r0, r3
    604a:	d121      	bne.n	6090 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    604c:	2401      	movs	r4, #1
    return BOOT_IMG(state, slot).num_sectors;
    604e:	232c      	movs	r3, #44	; 0x2c
    6050:	fb03 7404 	mla	r4, r3, r4, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6054:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    6056:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6058:	f7ff feed 	bl	5e36 <boot_trailer_sz>
    total_sz = 0;
    605c:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    6060:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    6062:	3d01      	subs	r5, #1
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    6064:	6a63      	ldr	r3, [r4, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    6066:	4630      	mov	r0, r6
    6068:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    606c:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    6070:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    6074:	681b      	ldr	r3, [r3, #0]
    6076:	464a      	mov	r2, r9
    6078:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    607a:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    607c:	f7ff ffd2 	bl	6024 <boot_erase_region>
    } while (total_sz < trailer_sz);
    6080:	45b8      	cmp	r8, r7
        sector--;
    6082:	f105 35ff 	add.w	r5, r5, #4294967295
    } while (total_sz < trailer_sz);
    6086:	d3ed      	bcc.n	6064 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    6088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    608c:	2400      	movs	r4, #0
    608e:	e7de      	b.n	604e <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    6090:	2001      	movs	r0, #1
    6092:	e7f9      	b.n	6088 <swap_erase_trailer_sectors+0x60>

00006094 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    6094:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6096:	4615      	mov	r5, r2
    6098:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    609a:	2006      	movs	r0, #6
    609c:	4669      	mov	r1, sp
    609e:	f001 f84c 	bl	713a <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    60a2:	79e9      	ldrb	r1, [r5, #7]
    60a4:	2901      	cmp	r1, #1
    60a6:	d003      	beq.n	60b0 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    60a8:	2200      	movs	r2, #0
    60aa:	4620      	mov	r0, r4
    60ac:	f001 f859 	bl	7162 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    60b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    60b4:	2b01      	cmp	r3, #1
    60b6:	d102      	bne.n	60be <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    60b8:	4620      	mov	r0, r4
    60ba:	f001 f835 	bl	7128 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    60be:	68a9      	ldr	r1, [r5, #8]
    60c0:	4620      	mov	r0, r4
    60c2:	f7ff fed7 	bl	5e74 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    60c6:	4620      	mov	r0, r4
    60c8:	f7fd fe4c 	bl	3d64 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    60cc:	2000      	movs	r0, #0
    60ce:	b003      	add	sp, #12
    60d0:	bd30      	pop	{r4, r5, pc}

000060d2 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    60d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    60d4:	460d      	mov	r5, r1
    60d6:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    60d8:	f7fa ff64 	bl	fa4 <swap_status_source>
    60dc:	4604      	mov	r4, r0
    60de:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    60e0:	b130      	cbz	r0, 60f0 <swap_read_status+0x1e>
    60e2:	2802      	cmp	r0, #2
    60e4:	d12e      	bne.n	6144 <swap_read_status+0x72>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    60e6:	a901      	add	r1, sp, #4
    60e8:	f7fb fe26 	bl	1d38 <flash_area_open>
    if (rc != 0) {
    60ec:	b118      	cbz	r0, 60f6 <swap_read_status+0x24>
        return BOOT_EFLASH;
    60ee:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    60f0:	4620      	mov	r0, r4
    60f2:	b002      	add	sp, #8
    60f4:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    60f6:	462a      	mov	r2, r5
    60f8:	4631      	mov	r1, r6
    60fa:	9801      	ldr	r0, [sp, #4]
    60fc:	f7fa feb4 	bl	e68 <swap_read_status_bytes>
    if (rc == 0) {
    6100:	4604      	mov	r4, r0
    6102:	b9d8      	cbnz	r0, 613c <swap_read_status+0x6a>
        off = boot_swap_info_off(fap);
    6104:	9801      	ldr	r0, [sp, #4]
    6106:	f000 ffa4 	bl	7052 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    610a:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    610c:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    610e:	f10d 0203 	add.w	r2, sp, #3
    6112:	9801      	ldr	r0, [sp, #4]
    6114:	f000 fa69 	bl	65ea <flash_area_read>
        if (rc != 0) {
    6118:	4604      	mov	r4, r0
    611a:	2800      	cmp	r0, #0
    611c:	d1e7      	bne.n	60ee <swap_read_status+0x1c>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    611e:	2201      	movs	r2, #1
    6120:	9801      	ldr	r0, [sp, #4]
    6122:	f10d 0103 	add.w	r1, sp, #3
    6126:	f000 ffa5 	bl	7074 <bootutil_buffer_is_erased>
    612a:	b110      	cbz	r0, 6132 <swap_read_status+0x60>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    612c:	2301      	movs	r3, #1
    612e:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    6132:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6136:	f003 030f 	and.w	r3, r3, #15
    613a:	71eb      	strb	r3, [r5, #7]
    flash_area_close(fap);
    613c:	9801      	ldr	r0, [sp, #4]
    613e:	f000 fa53 	bl	65e8 <flash_area_close>
    return rc;
    6142:	e7d5      	b.n	60f0 <swap_read_status+0x1e>
    switch (bs->source) {
    6144:	2407      	movs	r4, #7
    6146:	e7d3      	b.n	60f0 <swap_read_status+0x1e>

00006148 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    6148:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    614a:	2002      	movs	r0, #2
    614c:	a901      	add	r1, sp, #4
    614e:	f7fb fdf3 	bl	1d38 <flash_area_open>
            &fap);
    if (rc != 0) {
    6152:	b948      	cbnz	r0, 6168 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    6154:	9801      	ldr	r0, [sp, #4]
    6156:	f7ff fe88 	bl	5e6a <boot_write_copy_done>
    615a:	4604      	mov	r4, r0
    flash_area_close(fap);
    615c:	9801      	ldr	r0, [sp, #4]
    615e:	f000 fa43 	bl	65e8 <flash_area_close>
    return rc;
}
    6162:	4620      	mov	r0, r4
    6164:	b002      	add	sp, #8
    6166:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6168:	2401      	movs	r4, #1
    616a:	e7fa      	b.n	6162 <swap_set_copy_done+0x1a>

0000616c <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    616c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    616e:	2002      	movs	r0, #2
    6170:	a901      	add	r1, sp, #4
    6172:	f7fb fde1 	bl	1d38 <flash_area_open>
            &fap);
    if (rc != 0) {
    6176:	b9a8      	cbnz	r0, 61a4 <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    6178:	9801      	ldr	r0, [sp, #4]
    617a:	a902      	add	r1, sp, #8
    617c:	f7fd fe00 	bl	3d80 <boot_read_swap_state>
    if (rc != 0) {
    6180:	4604      	mov	r4, r0
    6182:	b968      	cbnz	r0, 61a0 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    6184:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6188:	2b03      	cmp	r3, #3
    618a:	d103      	bne.n	6194 <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    618c:	9801      	ldr	r0, [sp, #4]
    618e:	f000 ffcb 	bl	7128 <boot_write_image_ok>
    6192:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    6194:	9801      	ldr	r0, [sp, #4]
    6196:	f000 fa27 	bl	65e8 <flash_area_close>
    return rc;
}
    619a:	4620      	mov	r0, r4
    619c:	b004      	add	sp, #16
    619e:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    61a0:	2401      	movs	r4, #1
    61a2:	e7f7      	b.n	6194 <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    61a4:	2401      	movs	r4, #1
    61a6:	e7f8      	b.n	619a <swap_set_image_ok+0x2e>

000061a8 <boot_status_internal_off>:
{
    61a8:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    61aa:	7943      	ldrb	r3, [r0, #5]
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    61ac:	6804      	ldr	r4, [r0, #0]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    61ae:	2b01      	cmp	r3, #1
    61b0:	bf0a      	itet	eq
    61b2:	2201      	moveq	r2, #1
    61b4:	2202      	movne	r2, #2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    61b6:	2500      	moveq	r5, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    61b8:	fb01 f202 	mul.w	r2, r1, r2
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    61bc:	f104 34ff 	add.w	r4, r4, #4294967295
    61c0:	fb02 f204 	mul.w	r2, r2, r4
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    61c4:	7903      	ldrb	r3, [r0, #4]
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    61c6:	bf18      	it	ne
    61c8:	020d      	lslne	r5, r1, #8
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    61ca:	3b01      	subs	r3, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    61cc:	fb01 2103 	mla	r1, r1, r3, r2
}
    61d0:	1948      	adds	r0, r1, r5
    61d2:	bd30      	pop	{r4, r5, pc}

000061d4 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    61d4:	6803      	ldr	r3, [r0, #0]
{
    61d6:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    61d8:	1acd      	subs	r5, r1, r3
    61da:	2d00      	cmp	r5, #0
    61dc:	dd0d      	ble.n	61fa <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    61de:	f993 6000 	ldrsb.w	r6, [r3]
    61e2:	781c      	ldrb	r4, [r3, #0]
    61e4:	2e00      	cmp	r6, #0
    61e6:	db0b      	blt.n	6200 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    61e8:	1c5c      	adds	r4, r3, #1
    61ea:	6004      	str	r4, [r0, #0]
    61ec:	781b      	ldrb	r3, [r3, #0]
    61ee:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    61f0:	6803      	ldr	r3, [r0, #0]
    61f2:	1ac9      	subs	r1, r1, r3
    61f4:	6813      	ldr	r3, [r2, #0]
    61f6:	428b      	cmp	r3, r1
    61f8:	d932      	bls.n	6260 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    61fa:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    61fe:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    6200:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6204:	3c01      	subs	r4, #1
    6206:	2c03      	cmp	r4, #3
    6208:	d827      	bhi.n	625a <mbedtls_asn1_get_len+0x86>
    620a:	e8df f004 	tbb	[pc, r4]
    620e:	0902      	.short	0x0902
    6210:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    6212:	2d01      	cmp	r5, #1
    6214:	d0f1      	beq.n	61fa <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    6216:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    6218:	3302      	adds	r3, #2
            *len = (*p)[1];
    621a:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    621c:	6003      	str	r3, [r0, #0]
            break;
    621e:	e7e7      	b.n	61f0 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    6220:	2d02      	cmp	r5, #2
    6222:	ddea      	ble.n	61fa <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6224:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    6228:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    622a:	ba64      	rev16	r4, r4
    622c:	b2a4      	uxth	r4, r4
    622e:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    6230:	e7f4      	b.n	621c <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    6232:	2d03      	cmp	r5, #3
    6234:	dde1      	ble.n	61fa <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6236:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    6238:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    623a:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    623c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6240:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    6242:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6244:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    6246:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    6248:	e7e8      	b.n	621c <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    624a:	2d04      	cmp	r5, #4
    624c:	ddd5      	ble.n	61fa <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    624e:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    6252:	3305      	adds	r3, #5
    6254:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    6256:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    6258:	e7e0      	b.n	621c <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
    625a:	f06f 0063 	mvn.w	r0, #99	; 0x63
    625e:	e7ce      	b.n	61fe <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    6260:	2000      	movs	r0, #0
    6262:	e7cc      	b.n	61fe <mbedtls_asn1_get_len+0x2a>

00006264 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    6264:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    6266:	6804      	ldr	r4, [r0, #0]
    6268:	1b0e      	subs	r6, r1, r4
    626a:	2e00      	cmp	r6, #0
    626c:	dd07      	ble.n	627e <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    626e:	7826      	ldrb	r6, [r4, #0]
    6270:	429e      	cmp	r6, r3
    6272:	d108      	bne.n	6286 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    6274:	3401      	adds	r4, #1
    6276:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    6278:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    627a:	f7ff bfab 	b.w	61d4 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    627e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    6282:	bc70      	pop	{r4, r5, r6}
    6284:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    6286:	f06f 0061 	mvn.w	r0, #97	; 0x61
    628a:	e7fa      	b.n	6282 <mbedtls_asn1_get_tag+0x1e>

0000628c <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    628c:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    628e:	2303      	movs	r3, #3
{
    6290:	4604      	mov	r4, r0
    6292:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    6294:	f7ff ffe6 	bl	6264 <mbedtls_asn1_get_tag>
    6298:	b958      	cbnz	r0, 62b2 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
    629a:	6813      	ldr	r3, [r2, #0]
    629c:	1e5a      	subs	r2, r3, #1
    629e:	2b01      	cmp	r3, #1
    62a0:	602a      	str	r2, [r5, #0]
    62a2:	d904      	bls.n	62ae <mbedtls_asn1_get_bitstring_null+0x22>
    62a4:	6823      	ldr	r3, [r4, #0]
    62a6:	1c5a      	adds	r2, r3, #1
    62a8:	6022      	str	r2, [r4, #0]
    62aa:	781b      	ldrb	r3, [r3, #0]
    62ac:	b10b      	cbz	r3, 62b2 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    62ae:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
    62b2:	bd38      	pop	{r3, r4, r5, pc}

000062b4 <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    62b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    62b8:	4690      	mov	r8, r2
    62ba:	461f      	mov	r7, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    62bc:	aa01      	add	r2, sp, #4
    62be:	2330      	movs	r3, #48	; 0x30
{
    62c0:	4605      	mov	r5, r0
    62c2:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    62c4:	f7ff ffce 	bl	6264 <mbedtls_asn1_get_tag>
    62c8:	4604      	mov	r4, r0
    62ca:	b9f8      	cbnz	r0, 630c <mbedtls_asn1_get_alg+0x58>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    62cc:	682e      	ldr	r6, [r5, #0]
    62ce:	eba9 0906 	sub.w	r9, r9, r6
    62d2:	f1b9 0f00 	cmp.w	r9, #0
    62d6:	dd35      	ble.n	6344 <mbedtls_asn1_get_alg+0x90>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    62d8:	4642      	mov	r2, r8
    end = *p + len;
    62da:	9901      	ldr	r1, [sp, #4]
    alg->tag = **p;
    62dc:	7833      	ldrb	r3, [r6, #0]
    end = *p + len;
    62de:	440e      	add	r6, r1
    alg->tag = **p;
    62e0:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    62e4:	4631      	mov	r1, r6
    62e6:	2306      	movs	r3, #6
    62e8:	4628      	mov	r0, r5
    62ea:	f7ff ffbb 	bl	6264 <mbedtls_asn1_get_tag>
    62ee:	4604      	mov	r4, r0
    62f0:	b960      	cbnz	r0, 630c <mbedtls_asn1_get_alg+0x58>
        return( ret );

    alg->p = *p;
    62f2:	682a      	ldr	r2, [r5, #0]
    *p += alg->len;
    62f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
    62f8:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
    62fc:	1853      	adds	r3, r2, r1

    if( *p == end )
    62fe:	42b3      	cmp	r3, r6
    *p += alg->len;
    6300:	602b      	str	r3, [r5, #0]
    if( *p == end )
    6302:	d107      	bne.n	6314 <mbedtls_asn1_get_alg+0x60>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    6304:	210c      	movs	r1, #12
    6306:	4638      	mov	r0, r7
    6308:	f7fb f806 	bl	1318 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    630c:	4620      	mov	r0, r4
    630e:	b003      	add	sp, #12
    6310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
    6314:	5c51      	ldrb	r1, [r2, r1]
    6316:	463a      	mov	r2, r7
    (*p)++;
    6318:	3301      	adds	r3, #1
    params->tag = **p;
    631a:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    631e:	4628      	mov	r0, r5
    6320:	4631      	mov	r1, r6
    (*p)++;
    6322:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    6324:	f7ff ff56 	bl	61d4 <mbedtls_asn1_get_len>
    6328:	4604      	mov	r4, r0
    632a:	2800      	cmp	r0, #0
    632c:	d1ee      	bne.n	630c <mbedtls_asn1_get_alg+0x58>
    params->p = *p;
    632e:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    6330:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    6332:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    6334:	4413      	add	r3, r2
    if( *p != end )
    6336:	42b3      	cmp	r3, r6
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    6338:	bf0c      	ite	eq
    633a:	4604      	moveq	r4, r0
    633c:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    *p += params->len;
    6340:	602b      	str	r3, [r5, #0]
    if( *p != end )
    6342:	e7e3      	b.n	630c <mbedtls_asn1_get_alg+0x58>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6344:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    6348:	e7e0      	b.n	630c <mbedtls_asn1_get_alg+0x58>

0000634a <cc310_sha256_update>:
{
    634a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    634c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    6350:	4605      	mov	r5, r0
    6352:	4614      	mov	r4, r2
    6354:	af00      	add	r7, sp, #0
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    6356:	d210      	bcs.n	637a <cc310_sha256_update+0x30>
    6358:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    635a:	1dd3      	adds	r3, r2, #7
    635c:	f023 0307 	bic.w	r3, r3, #7
    6360:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    6364:	4668      	mov	r0, sp
    6366:	f000 fbc9 	bl	6afc <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    636a:	4669      	mov	r1, sp
    636c:	4622      	mov	r2, r4
    636e:	4628      	mov	r0, r5
    6370:	f7fe fbe6 	bl	4b40 <nrf_cc310_bl_hash_sha256_update>
    6374:	46b5      	mov	sp, r6
};
    6376:	46bd      	mov	sp, r7
    6378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    637a:	f7fe fbe1 	bl	4b40 <nrf_cc310_bl_hash_sha256_update>
};
    637e:	e7fa      	b.n	6376 <cc310_sha256_update+0x2c>

00006380 <crc16>:

#include <sys/crc.h>

uint16_t crc16(const uint8_t *src, size_t len, uint16_t polynomial,
	    uint16_t initial_value, bool pad)
{
    6380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
    6384:	f89d 4018 	ldrb.w	r4, [sp, #24]
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
    6388:	2500      	movs	r5, #0
	size_t padding = pad ? sizeof(crc) : 0;
    638a:	2c00      	cmp	r4, #0
    638c:	bf14      	ite	ne
    638e:	2402      	movne	r4, #2
    6390:	2400      	moveq	r4, #0

			crc = (crc << 1U);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80U >> b));
    6392:	f04f 0c80 	mov.w	ip, #128	; 0x80
	for (i = 0; i < len + padding; i++) {
    6396:	1867      	adds	r7, r4, r1
    6398:	42af      	cmp	r7, r5
    639a:	d81b      	bhi.n	63d4 <crc16+0x54>
			}
		}
	}

	return crc;
}
    639c:	4618      	mov	r0, r3
    639e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    63a2:	4623      	mov	r3, r4
			crc = (crc << 1U);
    63a4:	005c      	lsls	r4, r3, #1
			if (i < len) {
    63a6:	428d      	cmp	r5, r1
			crc = (crc << 1U);
    63a8:	b2a4      	uxth	r4, r4
			if (i < len) {
    63aa:	d208      	bcs.n	63be <crc16+0x3e>
				crc |= !!(src[i] & (0x80U >> b));
    63ac:	f890 8000 	ldrb.w	r8, [r0]
    63b0:	fa2c fe06 	lsr.w	lr, ip, r6
    63b4:	ea18 0f0e 	tst.w	r8, lr
    63b8:	bf18      	it	ne
    63ba:	f044 0401 	orrne.w	r4, r4, #1
			if (divide != 0U) {
    63be:	041b      	lsls	r3, r3, #16
		for (b = 0; b < 8; b++) {
    63c0:	f106 0601 	add.w	r6, r6, #1
				crc = crc ^ polynomial;
    63c4:	bf48      	it	mi
    63c6:	4054      	eormi	r4, r2
		for (b = 0; b < 8; b++) {
    63c8:	2e08      	cmp	r6, #8
    63ca:	d1ea      	bne.n	63a2 <crc16+0x22>
	for (i = 0; i < len + padding; i++) {
    63cc:	4623      	mov	r3, r4
    63ce:	3501      	adds	r5, #1
    63d0:	3001      	adds	r0, #1
    63d2:	e7e1      	b.n	6398 <crc16+0x18>
		for (b = 0; b < 8; b++) {
    63d4:	2600      	movs	r6, #0
    63d6:	e7e5      	b.n	63a4 <crc16+0x24>

000063d8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    63d8:	b160      	cbz	r0, 63f4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    63da:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    63dc:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    63e0:	2b01      	cmp	r3, #1
    63e2:	d003      	beq.n	63ec <sys_notify_validate+0x14>
    63e4:	2b03      	cmp	r3, #3
    63e6:	d105      	bne.n	63f4 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    63e8:	6803      	ldr	r3, [r0, #0]
    63ea:	b11b      	cbz	r3, 63f4 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    63ec:	2300      	movs	r3, #0
    63ee:	6083      	str	r3, [r0, #8]
    63f0:	4618      	mov	r0, r3
    63f2:	4770      	bx	lr
		return -EINVAL;
    63f4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    63f8:	4770      	bx	lr

000063fa <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    63fa:	2200      	movs	r2, #0
    63fc:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    63fe:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6400:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
    6404:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = NULL;
    6406:	bf14      	ite	ne
    6408:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    640a:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    640c:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    640e:	4618      	mov	r0, r3
    6410:	4770      	bx	lr

00006412 <arch_printk_char_out>:
}
    6412:	2000      	movs	r0, #0
    6414:	4770      	bx	lr

00006416 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    6416:	b40f      	push	{r0, r1, r2, r3}
    6418:	b507      	push	{r0, r1, r2, lr}
    641a:	a904      	add	r1, sp, #16
    641c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6420:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    6422:	f7fb f907 	bl	1634 <vprintk>
	}
	va_end(ap);
}
    6426:	b003      	add	sp, #12
    6428:	f85d eb04 	ldr.w	lr, [sp], #4
    642c:	b004      	add	sp, #16
    642e:	4770      	bx	lr

00006430 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6430:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6432:	f013 0307 	ands.w	r3, r3, #7
    6436:	d105      	bne.n	6444 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6438:	6803      	ldr	r3, [r0, #0]
    643a:	2b00      	cmp	r3, #0
		evt = EVT_START;
    643c:	bf0c      	ite	eq
    643e:	2000      	moveq	r0, #0
    6440:	2003      	movne	r0, #3
    6442:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6444:	2b02      	cmp	r3, #2
    6446:	d105      	bne.n	6454 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6448:	8b43      	ldrh	r3, [r0, #26]
    644a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    644c:	bf14      	ite	ne
    644e:	2000      	movne	r0, #0
    6450:	2004      	moveq	r0, #4
    6452:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6454:	2b01      	cmp	r3, #1
    6456:	d105      	bne.n	6464 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6458:	6803      	ldr	r3, [r0, #0]
    645a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    645c:	bf0c      	ite	eq
    645e:	2000      	moveq	r0, #0
    6460:	2005      	movne	r0, #5
    6462:	4770      	bx	lr
	int evt = EVT_NOP;
    6464:	2000      	movs	r0, #0
}
    6466:	4770      	bx	lr

00006468 <notify_one>:
{
    6468:	b573      	push	{r0, r1, r4, r5, r6, lr}
    646a:	460d      	mov	r5, r1
    646c:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    646e:	4619      	mov	r1, r3
    6470:	1d28      	adds	r0, r5, #4
{
    6472:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6474:	9300      	str	r3, [sp, #0]
    6476:	f7ff ffc0 	bl	63fa <sys_notify_finalize>
	if (cb) {
    647a:	4604      	mov	r4, r0
    647c:	b140      	cbz	r0, 6490 <notify_one+0x28>
		cb(mgr, cli, state, res);
    647e:	e9dd 3200 	ldrd	r3, r2, [sp]
    6482:	4629      	mov	r1, r5
    6484:	4630      	mov	r0, r6
    6486:	46a4      	mov	ip, r4
}
    6488:	b002      	add	sp, #8
    648a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
    648e:	4760      	bx	ip
}
    6490:	b002      	add	sp, #8
    6492:	bd70      	pop	{r4, r5, r6, pc}

00006494 <transition_complete>:
{
    6494:	b410      	push	{r4}
	__asm__ volatile(
    6496:	f04f 0420 	mov.w	r4, #32
    649a:	f3ef 8211 	mrs	r2, BASEPRI
    649e:	f384 8811 	msr	BASEPRI, r4
    64a2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    64a6:	6141      	str	r1, [r0, #20]
}
    64a8:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    64ac:	2101      	movs	r1, #1
    64ae:	f7fb b8cf 	b.w	1650 <process_event>

000064b2 <validate_args>:
{
    64b2:	b510      	push	{r4, lr}
    64b4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    64b6:	b140      	cbz	r0, 64ca <validate_args+0x18>
    64b8:	b139      	cbz	r1, 64ca <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    64ba:	1d08      	adds	r0, r1, #4
    64bc:	f7ff ff8c 	bl	63d8 <sys_notify_validate>
	if ((rv == 0)
    64c0:	b928      	cbnz	r0, 64ce <validate_args+0x1c>
	    && ((cli->notify.flags
    64c2:	68a3      	ldr	r3, [r4, #8]
    64c4:	f033 0303 	bics.w	r3, r3, #3
    64c8:	d001      	beq.n	64ce <validate_args+0x1c>
		rv = -EINVAL;
    64ca:	f06f 0015 	mvn.w	r0, #21
}
    64ce:	bd10      	pop	{r4, pc}

000064d0 <onoff_manager_init>:
{
    64d0:	b538      	push	{r3, r4, r5, lr}
    64d2:	460c      	mov	r4, r1
	if ((mgr == NULL)
    64d4:	4605      	mov	r5, r0
    64d6:	b158      	cbz	r0, 64f0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    64d8:	b151      	cbz	r1, 64f0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    64da:	680b      	ldr	r3, [r1, #0]
    64dc:	b143      	cbz	r3, 64f0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    64de:	684b      	ldr	r3, [r1, #4]
    64e0:	b133      	cbz	r3, 64f0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    64e2:	221c      	movs	r2, #28
    64e4:	2100      	movs	r1, #0
    64e6:	f000 fb34 	bl	6b52 <memset>
	return 0;
    64ea:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    64ec:	612c      	str	r4, [r5, #16]
}
    64ee:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    64f0:	f06f 0015 	mvn.w	r0, #21
    64f4:	e7fb      	b.n	64ee <onoff_manager_init+0x1e>

000064f6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    64f6:	b570      	push	{r4, r5, r6, lr}
    64f8:	4604      	mov	r4, r0
    64fa:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    64fc:	f7ff ffd9 	bl	64b2 <validate_args>

	if (rv < 0) {
    6500:	1e05      	subs	r5, r0, #0
    6502:	db31      	blt.n	6568 <onoff_request+0x72>
    6504:	f04f 0320 	mov.w	r3, #32
    6508:	f3ef 8111 	mrs	r1, BASEPRI
    650c:	f383 8811 	msr	BASEPRI, r3
    6510:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6514:	f64f 75ff 	movw	r5, #65535	; 0xffff
    6518:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    651a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    651c:	42ab      	cmp	r3, r5
    651e:	f000 0207 	and.w	r2, r0, #7
    6522:	d02e      	beq.n	6582 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    6524:	2a02      	cmp	r2, #2
    6526:	d10e      	bne.n	6546 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    6528:	3301      	adds	r3, #1
    652a:	8363      	strh	r3, [r4, #26]
	rv = state;
    652c:	4615      	mov	r5, r2
		notify = true;
    652e:	2301      	movs	r3, #1
	__asm__ volatile(
    6530:	f381 8811 	msr	BASEPRI, r1
    6534:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    6538:	b1b3      	cbz	r3, 6568 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    653a:	2300      	movs	r3, #0
    653c:	4631      	mov	r1, r6
    653e:	4620      	mov	r0, r4
    6540:	f7ff ff92 	bl	6468 <notify_one>
    6544:	e010      	b.n	6568 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    6546:	0783      	lsls	r3, r0, #30
    6548:	d001      	beq.n	654e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    654a:	2a06      	cmp	r2, #6
    654c:	d10e      	bne.n	656c <onoff_request+0x76>
	parent->next = child;
    654e:	2300      	movs	r3, #0
    6550:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    6552:	6863      	ldr	r3, [r4, #4]
    6554:	b993      	cbnz	r3, 657c <onoff_request+0x86>
	list->head = node;
    6556:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    655a:	4615      	mov	r5, r2
    655c:	b962      	cbnz	r2, 6578 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    655e:	460a      	mov	r2, r1
    6560:	4620      	mov	r0, r4
    6562:	2102      	movs	r1, #2
    6564:	f7fb f874 	bl	1650 <process_event>
		}
	}

	return rv;
}
    6568:	4628      	mov	r0, r5
    656a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    656c:	2a05      	cmp	r2, #5
    656e:	bf0c      	ite	eq
    6570:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    6574:	f06f 0504 	mvnne.w	r5, #4
    6578:	2300      	movs	r3, #0
    657a:	e7d9      	b.n	6530 <onoff_request+0x3a>
	parent->next = child;
    657c:	601e      	str	r6, [r3, #0]
	list->tail = node;
    657e:	6066      	str	r6, [r4, #4]
}
    6580:	e7eb      	b.n	655a <onoff_request+0x64>
		rv = -EAGAIN;
    6582:	f06f 050a 	mvn.w	r5, #10
    6586:	e7f7      	b.n	6578 <onoff_request+0x82>

00006588 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6588:	4770      	bx	lr

0000658a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    658a:	f7fd bcbf 	b.w	3f0c <SystemInit>

0000658e <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    658e:	b40f      	push	{r0, r1, r2, r3}
    6590:	b507      	push	{r0, r1, r2, lr}
    6592:	a904      	add	r1, sp, #16
    6594:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6598:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    659a:	f7fb f84b 	bl	1634 <vprintk>
	va_end(ap);
}
    659e:	b003      	add	sp, #12
    65a0:	f85d eb04 	ldr.w	lr, [sp], #4
    65a4:	b004      	add	sp, #16
    65a6:	4770      	bx	lr

000065a8 <device_get_binding>:
    65a8:	f7fd bef8 	b.w	439c <z_impl_device_get_binding>

000065ac <get_sectors_cb>:
{
    65ac:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    65ae:	6802      	ldr	r2, [r0, #0]
    65b0:	684c      	ldr	r4, [r1, #4]
    65b2:	42a2      	cmp	r2, r4
    65b4:	d316      	bcc.n	65e4 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    65b6:	688b      	ldr	r3, [r1, #8]
    65b8:	4423      	add	r3, r4
    65ba:	429a      	cmp	r2, r3
    65bc:	d206      	bcs.n	65cc <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    65be:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    65c2:	42ab      	cmp	r3, r5
    65c4:	d304      	bcc.n	65d0 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    65c6:	f06f 030b 	mvn.w	r3, #11
    65ca:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    65cc:	2000      	movs	r0, #0
    65ce:	e00a      	b.n	65e6 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    65d0:	68cd      	ldr	r5, [r1, #12]
    65d2:	1b12      	subs	r2, r2, r4
    65d4:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    65d8:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    65da:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    65de:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    65e0:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    65e2:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    65e4:	2001      	movs	r0, #1
}
    65e6:	bd70      	pop	{r4, r5, r6, pc}

000065e8 <flash_area_close>:
}
    65e8:	4770      	bx	lr

000065ea <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    65ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    65ec:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    65ee:	6883      	ldr	r3, [r0, #8]
{
    65f0:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    65f2:	428b      	cmp	r3, r1
{
    65f4:	460c      	mov	r4, r1
    65f6:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    65f8:	d310      	bcc.n	661c <flash_area_read+0x32>
    65fa:	1871      	adds	r1, r6, r1
    65fc:	428b      	cmp	r3, r1
    65fe:	d30d      	bcc.n	661c <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    6600:	68c0      	ldr	r0, [r0, #12]
    6602:	f7ff ffd1 	bl	65a8 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    6606:	6869      	ldr	r1, [r5, #4]
    6608:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    660a:	6883      	ldr	r3, [r0, #8]
    660c:	9a01      	ldr	r2, [sp, #4]
    660e:	681c      	ldr	r4, [r3, #0]
    6610:	4633      	mov	r3, r6
    6612:	46a4      	mov	ip, r4
}
    6614:	b002      	add	sp, #8
    6616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    661a:	4760      	bx	ip
    661c:	f06f 0015 	mvn.w	r0, #21
    6620:	b002      	add	sp, #8
    6622:	bd70      	pop	{r4, r5, r6, pc}

00006624 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    6624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6628:	461f      	mov	r7, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    662a:	6883      	ldr	r3, [r0, #8]
{
    662c:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    662e:	428b      	cmp	r3, r1
{
    6630:	460c      	mov	r4, r1
    6632:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6634:	d325      	bcc.n	6682 <flash_area_write+0x5e>
    6636:	187a      	adds	r2, r7, r1
    6638:	4293      	cmp	r3, r2
    663a:	d322      	bcc.n	6682 <flash_area_write+0x5e>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    663c:	68c0      	ldr	r0, [r0, #12]
    663e:	f7ff ffb3 	bl	65a8 <device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    6642:	686d      	ldr	r5, [r5, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
    6644:	4606      	mov	r6, r0
	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    6646:	4425      	add	r5, r4
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
    6648:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    664c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6650:	b96b      	cbnz	r3, 666e <flash_area_write+0x4a>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
    6652:	463b      	mov	r3, r7
    6654:	f8d8 4004 	ldr.w	r4, [r8, #4]
    6658:	464a      	mov	r2, r9
    665a:	4629      	mov	r1, r5
    665c:	4630      	mov	r0, r6
    665e:	47a0      	blx	r4

	if (api->write_protection != NULL) {
    6660:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
    6664:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    6666:	b943      	cbnz	r3, 667a <flash_area_write+0x56>

	return rc;
}
    6668:	4620      	mov	r0, r4
    666a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    666e:	2100      	movs	r1, #0
    6670:	4798      	blx	r3
		if (rc) {
    6672:	4604      	mov	r4, r0
    6674:	2800      	cmp	r0, #0
    6676:	d0ec      	beq.n	6652 <flash_area_write+0x2e>
    6678:	e7f6      	b.n	6668 <flash_area_write+0x44>
		(void) api->write_protection(dev, true);
    667a:	2101      	movs	r1, #1
    667c:	4630      	mov	r0, r6
    667e:	4798      	blx	r3
    6680:	e7f2      	b.n	6668 <flash_area_write+0x44>
		return -EINVAL;
    6682:	f06f 0415 	mvn.w	r4, #21
    6686:	e7ef      	b.n	6668 <flash_area_write+0x44>

00006688 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    6688:	6883      	ldr	r3, [r0, #8]
{
    668a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    668e:	428b      	cmp	r3, r1
{
    6690:	4605      	mov	r5, r0
    6692:	460c      	mov	r4, r1
    6694:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    6696:	d324      	bcc.n	66e2 <flash_area_erase+0x5a>
    6698:	440a      	add	r2, r1
    669a:	4293      	cmp	r3, r2
    669c:	d321      	bcc.n	66e2 <flash_area_erase+0x5a>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    669e:	68c0      	ldr	r0, [r0, #12]
    66a0:	f7ff ff82 	bl	65a8 <device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    66a4:	686d      	ldr	r5, [r5, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
    66a6:	4606      	mov	r6, r0
	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    66a8:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    66aa:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    66ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
    66b2:	b963      	cbnz	r3, 66ce <flash_area_erase+0x46>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    66b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    66b8:	463a      	mov	r2, r7
    66ba:	4629      	mov	r1, r5
    66bc:	4630      	mov	r0, r6
    66be:	4798      	blx	r3

	if (api->write_protection != NULL) {
    66c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    66c4:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    66c6:	b943      	cbnz	r3, 66da <flash_area_erase+0x52>

	return rc;
}
    66c8:	4620      	mov	r0, r4
    66ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    66ce:	2100      	movs	r1, #0
    66d0:	4798      	blx	r3
		if (rc) {
    66d2:	4604      	mov	r4, r0
    66d4:	2800      	cmp	r0, #0
    66d6:	d0ed      	beq.n	66b4 <flash_area_erase+0x2c>
    66d8:	e7f6      	b.n	66c8 <flash_area_erase+0x40>
		(void) api->write_protection(dev, true);
    66da:	2101      	movs	r1, #1
    66dc:	4630      	mov	r0, r6
    66de:	4798      	blx	r3
    66e0:	e7f2      	b.n	66c8 <flash_area_erase+0x40>
		return -EINVAL;
    66e2:	f06f 0415 	mvn.w	r4, #21
    66e6:	e7ef      	b.n	66c8 <flash_area_erase+0x40>

000066e8 <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
    66e8:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    66ea:	68c0      	ldr	r0, [r0, #12]
    66ec:	f7ff ff5c 	bl	65a8 <device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    66f0:	6883      	ldr	r3, [r0, #8]
    66f2:	691b      	ldr	r3, [r3, #16]
    66f4:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    66f6:	7800      	ldrb	r0, [r0, #0]
    66f8:	bd08      	pop	{r3, pc}

000066fa <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    66fa:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    66fc:	68c0      	ldr	r0, [r0, #12]
    66fe:	f7ff ff53 	bl	65a8 <device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    6702:	6883      	ldr	r3, [r0, #8]
    6704:	691b      	ldr	r3, [r3, #16]
    6706:	4798      	blx	r3

	return param->erase_value;
}
    6708:	7900      	ldrb	r0, [r0, #4]
    670a:	bd08      	pop	{r3, pc}

0000670c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    670c:	b2cb      	uxtb	r3, r1
    670e:	210c      	movs	r1, #12
    6710:	6902      	ldr	r2, [r0, #16]
    6712:	fb03 2101 	mla	r1, r3, r1, r2
    6716:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    6718:	f000 0007 	and.w	r0, r0, #7
    671c:	4770      	bx	lr

0000671e <set_off_state>:
	__asm__ volatile(
    671e:	f04f 0320 	mov.w	r3, #32
    6722:	f3ef 8211 	mrs	r2, BASEPRI
    6726:	f383 8811 	msr	BASEPRI, r3
    672a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    672e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6730:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    6734:	d001      	beq.n	673a <set_off_state+0x1c>
    6736:	428b      	cmp	r3, r1
    6738:	d107      	bne.n	674a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    673a:	2301      	movs	r3, #1
    673c:	6003      	str	r3, [r0, #0]
	int err = 0;
    673e:	2000      	movs	r0, #0
	__asm__ volatile(
    6740:	f382 8811 	msr	BASEPRI, r2
    6744:	f3bf 8f6f 	isb	sy
}
    6748:	4770      	bx	lr
		err = -EPERM;
    674a:	f04f 30ff 	mov.w	r0, #4294967295
    674e:	e7f7      	b.n	6740 <set_off_state+0x22>

00006750 <set_starting_state>:
{
    6750:	b510      	push	{r4, lr}
	__asm__ volatile(
    6752:	f04f 0320 	mov.w	r3, #32
    6756:	f3ef 8211 	mrs	r2, BASEPRI
    675a:	f383 8811 	msr	BASEPRI, r3
    675e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6762:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6764:	f003 0407 	and.w	r4, r3, #7
    6768:	2c01      	cmp	r4, #1
    676a:	d106      	bne.n	677a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    676c:	6001      	str	r1, [r0, #0]
	int err = 0;
    676e:	2000      	movs	r0, #0
	__asm__ volatile(
    6770:	f382 8811 	msr	BASEPRI, r2
    6774:	f3bf 8f6f 	isb	sy
}
    6778:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    677a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    677e:	428b      	cmp	r3, r1
		err = -EALREADY;
    6780:	bf14      	ite	ne
    6782:	f04f 30ff 	movne.w	r0, #4294967295
    6786:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    678a:	e7f1      	b.n	6770 <set_starting_state+0x20>

0000678c <set_on_state>:
	__asm__ volatile(
    678c:	f04f 0320 	mov.w	r3, #32
    6790:	f3ef 8211 	mrs	r2, BASEPRI
    6794:	f383 8811 	msr	BASEPRI, r3
    6798:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    679c:	6803      	ldr	r3, [r0, #0]
    679e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    67a2:	f043 0302 	orr.w	r3, r3, #2
    67a6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    67a8:	f382 8811 	msr	BASEPRI, r2
    67ac:	f3bf 8f6f 	isb	sy
}
    67b0:	4770      	bx	lr

000067b2 <api_blocking_start>:
}
    67b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    67b6:	4770      	bx	lr

000067b8 <onoff_started_callback>:
{
    67b8:	b410      	push	{r4}
	notify(mgr, 0);
    67ba:	241c      	movs	r4, #28
	return &data->mgr[type];
    67bc:	6900      	ldr	r0, [r0, #16]
    67be:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    67c0:	fb03 0004 	mla	r0, r3, r4, r0
    67c4:	2100      	movs	r1, #0
}
    67c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    67ca:	4710      	bx	r2

000067cc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    67cc:	2000      	movs	r0, #0
    67ce:	f7fd bc5f 	b.w	4090 <nrfx_clock_start>

000067d2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    67d2:	2000      	movs	r0, #0
    67d4:	f7fd bc8e 	b.w	40f4 <nrfx_clock_stop>

000067d8 <api_stop>:
{
    67d8:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    67da:	240c      	movs	r4, #12
    67dc:	b2c9      	uxtb	r1, r1
    67de:	434c      	muls	r4, r1
{
    67e0:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    67e2:	6900      	ldr	r0, [r0, #16]
    67e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
    67e8:	2180      	movs	r1, #128	; 0x80
    67ea:	4418      	add	r0, r3
    67ec:	f7ff ff97 	bl	671e <set_off_state>
	if (err < 0) {
    67f0:	2800      	cmp	r0, #0
    67f2:	db04      	blt.n	67fe <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    67f4:	6869      	ldr	r1, [r5, #4]
    67f6:	440c      	add	r4, r1
    67f8:	6863      	ldr	r3, [r4, #4]
    67fa:	4798      	blx	r3
	return 0;
    67fc:	2000      	movs	r0, #0
}
    67fe:	bd38      	pop	{r3, r4, r5, pc}

00006800 <api_start>:
{
    6800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    6804:	240c      	movs	r4, #12
    6806:	b2c9      	uxtb	r1, r1
    6808:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    680a:	6905      	ldr	r5, [r0, #16]
{
    680c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    680e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    6812:	2180      	movs	r1, #128	; 0x80
    6814:	4428      	add	r0, r5
{
    6816:	4690      	mov	r8, r2
    6818:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    681a:	f7ff ff99 	bl	6750 <set_starting_state>
	if (err < 0) {
    681e:	2800      	cmp	r0, #0
    6820:	db06      	blt.n	6830 <api_start+0x30>
	subdata->cb = cb;
    6822:	4425      	add	r5, r4
	subdata->user_data = user_data;
    6824:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6828:	6873      	ldr	r3, [r6, #4]
    682a:	591b      	ldr	r3, [r3, r4]
    682c:	4798      	blx	r3
	return 0;
    682e:	2000      	movs	r0, #0
}
    6830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006834 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    6834:	4770      	bx	lr

00006836 <sys_clock_disable>:
    6836:	4770      	bx	lr

00006838 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    6838:	2000      	movs	r0, #0
    683a:	f7fb ba2f 	b.w	1c9c <sys_reboot>

0000683e <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    683e:	4770      	bx	lr

00006840 <console_write>:
{
    6840:	b570      	push	{r4, r5, r6, lr}
    6842:	4606      	mov	r6, r0
    6844:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    6846:	2400      	movs	r4, #0
    6848:	42ac      	cmp	r4, r5
    684a:	db00      	blt.n	684e <console_write+0xe>
}
    684c:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    684e:	5d30      	ldrb	r0, [r6, r4]
    6850:	f7fb fcce 	bl	21f0 <console_out>
    6854:	3001      	adds	r0, #1
    6856:	d0f9      	beq.n	684c <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    6858:	3401      	adds	r4, #1
    685a:	e7f5      	b.n	6848 <console_write+0x8>

0000685c <u32toa>:
{
    685c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t d = 1;
    685e:	2301      	movs	r3, #1
        d *= 10;
    6860:	240a      	movs	r4, #10
    while (val / d >= 10) {
    6862:	fbb1 f2f3 	udiv	r2, r1, r3
    6866:	2a09      	cmp	r2, #9
    6868:	d806      	bhi.n	6878 <u32toa+0x1c>
    dst = tgt;
    686a:	4602      	mov	r2, r0
    int n = 0;
    686c:	2500      	movs	r5, #0
        d /= 10;
    686e:	260a      	movs	r6, #10
    while (d) {
    6870:	b923      	cbnz	r3, 687c <u32toa+0x20>
    *dst = '\0';
    6872:	7013      	strb	r3, [r2, #0]
}
    6874:	1a10      	subs	r0, r2, r0
    6876:	bdf0      	pop	{r4, r5, r6, r7, pc}
        d *= 10;
    6878:	4363      	muls	r3, r4
    687a:	e7f2      	b.n	6862 <u32toa+0x6>
        dgt = val / d;
    687c:	fbb1 f4f3 	udiv	r4, r1, r3
        d /= 10;
    6880:	fbb3 fcf6 	udiv	ip, r3, r6
        val %= d;
    6884:	fb03 1714 	mls	r7, r3, r4, r1
        if (n || dgt > 0 || d == 0) {
    6888:	b91d      	cbnz	r5, 6892 <u32toa+0x36>
    688a:	4299      	cmp	r1, r3
    688c:	d201      	bcs.n	6892 <u32toa+0x36>
    688e:	2b09      	cmp	r3, #9
    6890:	d803      	bhi.n	689a <u32toa+0x3e>
            *dst++ = dgt + '0';
    6892:	3430      	adds	r4, #48	; 0x30
    6894:	f802 4b01 	strb.w	r4, [r2], #1
            ++n;
    6898:	3501      	adds	r5, #1
            *dst++ = dgt + '0';
    689a:	4663      	mov	r3, ip
    689c:	4639      	mov	r1, r7
    689e:	e7e7      	b.n	6870 <u32toa+0x14>

000068a0 <cbor_encode_text_stringz>:
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    68a0:	b513      	push	{r0, r1, r4, lr}
    68a2:	4604      	mov	r4, r0
    68a4:	4608      	mov	r0, r1
    68a6:	9101      	str	r1, [sp, #4]
    68a8:	f000 f905 	bl	6ab6 <strlen>
    68ac:	4602      	mov	r2, r0
    68ae:	4620      	mov	r0, r4
    68b0:	9901      	ldr	r1, [sp, #4]
    68b2:	b002      	add	sp, #8
    68b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68b8:	f000 bcfe 	b.w	72b8 <cbor_encode_text_string>

000068bc <value_extract>:
 *          CBOR values are always big-endian, so this function converts from
 *          big to little-endian if necessary (@ref CONFIG_BIG_ENDIAN).
 */
static bool value_extract(cbor_decode_state_t * p_state,
		void * const p_result, size_t result_len)
{
    68bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68be:	4604      	mov	r4, r0
	cbor_decode_trace();
	cbor_decode_assert(result_len != 0, "0-length result not supported.\n");

	FAIL_AND_DECR_IF(p_state->elem_count == 0);
    68c0:	6803      	ldr	r3, [r0, #0]
    68c2:	6880      	ldr	r0, [r0, #8]
{
    68c4:	460d      	mov	r5, r1
    68c6:	4617      	mov	r7, r2
	FAIL_AND_DECR_IF(p_state->elem_count == 0);
    68c8:	b910      	cbnz	r0, 68d0 <value_extract+0x14>
    68ca:	3b01      	subs	r3, #1
    68cc:	6023      	str	r3, [r4, #0]
		(p_state->p_payload) += len;
	}

	(p_state->elem_count)--;
	return true;
}
    68ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FAIL_AND_DECR_IF(p_state->p_payload >= p_state->p_payload_end);
    68d0:	6861      	ldr	r1, [r4, #4]
    68d2:	4299      	cmp	r1, r3
    68d4:	d803      	bhi.n	68de <value_extract+0x22>
    68d6:	3b01      	subs	r3, #1
    68d8:	6023      	str	r3, [r4, #0]
		FAIL_AND_DECR_IF((p_state->p_payload + len)
    68da:	2000      	movs	r0, #0
    68dc:	e7f7      	b.n	68ce <value_extract+0x12>
	uint8_t additional = ADDITIONAL(*p_state->p_payload);
    68de:	f813 6b01 	ldrb.w	r6, [r3], #1
	memset(p_result, 0, result_len);
    68e2:	2100      	movs	r1, #0
    68e4:	4628      	mov	r0, r5
	uint8_t additional = ADDITIONAL(*p_state->p_payload);
    68e6:	f006 061f 	and.w	r6, r6, #31
	(p_state->p_payload)++;
    68ea:	6023      	str	r3, [r4, #0]
	memset(p_result, 0, result_len);
    68ec:	f000 f931 	bl	6b52 <memset>
	if (additional <= VALUE_IN_HEADER) {
    68f0:	2e17      	cmp	r6, #23
    68f2:	d805      	bhi.n	6900 <value_extract+0x44>
		p_u8_result[0] = additional;
    68f4:	702e      	strb	r6, [r5, #0]
	(p_state->elem_count)--;
    68f6:	68a3      	ldr	r3, [r4, #8]
	return true;
    68f8:	2001      	movs	r0, #1
	(p_state->elem_count)--;
    68fa:	3b01      	subs	r3, #1
    68fc:	60a3      	str	r3, [r4, #8]
	return true;
    68fe:	e7e6      	b.n	68ce <value_extract+0x12>
	if (24 <= additional && additional <= 27) {
    6900:	3e18      	subs	r6, #24
    6902:	b2f3      	uxtb	r3, r6
    6904:	2b03      	cmp	r3, #3
    6906:	6822      	ldr	r2, [r4, #0]
    6908:	d807      	bhi.n	691a <value_extract+0x5e>
		return 1 << (additional - 24);
    690a:	2301      	movs	r3, #1
    690c:	fa03 f606 	lsl.w	r6, r3, r6
		FAIL_AND_DECR_IF(len > result_len);
    6910:	42b7      	cmp	r7, r6
    6912:	d203      	bcs.n	691c <value_extract+0x60>
		FAIL_AND_DECR_IF((p_state->p_payload + len)
    6914:	3a01      	subs	r2, #1
    6916:	6022      	str	r2, [r4, #0]
    6918:	e7df      	b.n	68da <value_extract+0x1e>
	return 0;
    691a:	2600      	movs	r6, #0
		FAIL_AND_DECR_IF((p_state->p_payload + len)
    691c:	6861      	ldr	r1, [r4, #4]
    691e:	1993      	adds	r3, r2, r6
    6920:	4299      	cmp	r1, r3
    6922:	d3f7      	bcc.n	6914 <value_extract+0x58>
    6924:	1e72      	subs	r2, r6, #1
    6926:	3d01      	subs	r5, #1
		for (uint32_t i = 0; i < len; i++) {
    6928:	1c51      	adds	r1, r2, #1
    692a:	6823      	ldr	r3, [r4, #0]
    692c:	d102      	bne.n	6934 <value_extract+0x78>
		(p_state->p_payload) += len;
    692e:	441e      	add	r6, r3
    6930:	6026      	str	r6, [r4, #0]
    6932:	e7e0      	b.n	68f6 <value_extract+0x3a>
			p_u8_result[i] = (p_state->p_payload)[len - i - 1];
    6934:	5c9b      	ldrb	r3, [r3, r2]
    6936:	3a01      	subs	r2, #1
    6938:	f805 3f01 	strb.w	r3, [r5, #1]!
		for (uint32_t i = 0; i < len; i++) {
    693c:	e7f4      	b.n	6928 <value_extract+0x6c>

0000693e <uint32_decode>:
}


static bool uint32_decode(cbor_decode_state_t * p_state,
		void *p_result, void *p_min_value, void *p_max_value)
{
    693e:	b570      	push	{r4, r5, r6, lr}
    6940:	4616      	mov	r6, r2
	if (!value_extract(p_state, p_result, 4)) {
    6942:	2204      	movs	r2, #4
{
    6944:	460d      	mov	r5, r1
    6946:	461c      	mov	r4, r3
	if (!value_extract(p_state, p_result, 4)) {
    6948:	f7ff ffb8 	bl	68bc <value_extract>
    694c:	b158      	cbz	r0, 6966 <uint32_decode+0x28>
		FAIL();
	}

	if (!PTR_VALUE_IN_RANGE(uint32_t, p_result, p_min_value, p_max_value)) {
    694e:	b11e      	cbz	r6, 6958 <uint32_decode+0x1a>
    6950:	682a      	ldr	r2, [r5, #0]
    6952:	6833      	ldr	r3, [r6, #0]
    6954:	429a      	cmp	r2, r3
    6956:	d307      	bcc.n	6968 <uint32_decode+0x2a>
    6958:	b12c      	cbz	r4, 6966 <uint32_decode+0x28>
    695a:	6828      	ldr	r0, [r5, #0]
    695c:	6823      	ldr	r3, [r4, #0]
    695e:	4298      	cmp	r0, r3
    6960:	bf8c      	ite	hi
    6962:	2000      	movhi	r0, #0
    6964:	2001      	movls	r0, #1
		FAIL();
	}
	cbor_decode_print("val: %u\r\n", *(uint32_t *)p_result);
	return true;
}
    6966:	bd70      	pop	{r4, r5, r6, pc}
		FAIL();
    6968:	2000      	movs	r0, #0
    696a:	e7fc      	b.n	6966 <uint32_decode+0x28>

0000696c <intx32_decode>:
{
    696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    696e:	461d      	mov	r5, r3
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    6970:	6803      	ldr	r3, [r0, #0]
{
    6972:	460c      	mov	r4, r1
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    6974:	781b      	ldrb	r3, [r3, #0]
{
    6976:	4616      	mov	r6, r2
	if (major_type != CBOR_MAJOR_TYPE_PINT
    6978:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    697a:	ea4f 1753 	mov.w	r7, r3, lsr #5
	if (major_type != CBOR_MAJOR_TYPE_PINT
    697e:	d901      	bls.n	6984 <intx32_decode+0x18>
		FAIL();
    6980:	2000      	movs	r0, #0
}
    6982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!value_extract(p_state, p_result, 4)) {
    6984:	2204      	movs	r2, #4
    6986:	f7ff ff99 	bl	68bc <value_extract>
    698a:	2800      	cmp	r0, #0
    698c:	d0f8      	beq.n	6980 <intx32_decode+0x14>
	if (*p_result < 0) {
    698e:	6823      	ldr	r3, [r4, #0]
    6990:	2b00      	cmp	r3, #0
    6992:	dbf5      	blt.n	6980 <intx32_decode+0x14>
	if (major_type == CBOR_MAJOR_TYPE_NINT) {
    6994:	2f01      	cmp	r7, #1
		*p_result = 1 - *p_result;
    6996:	bf04      	itt	eq
    6998:	f1c3 0301 	rsbeq	r3, r3, #1
    699c:	6023      	streq	r3, [r4, #0]
	if (!PTR_VALUE_IN_RANGE(int32_t, p_result, p_min_value, p_max_value)) {
    699e:	b11e      	cbz	r6, 69a8 <intx32_decode+0x3c>
    69a0:	6822      	ldr	r2, [r4, #0]
    69a2:	6833      	ldr	r3, [r6, #0]
    69a4:	429a      	cmp	r2, r3
    69a6:	dbeb      	blt.n	6980 <intx32_decode+0x14>
    69a8:	2d00      	cmp	r5, #0
    69aa:	d0ea      	beq.n	6982 <intx32_decode+0x16>
    69ac:	6820      	ldr	r0, [r4, #0]
    69ae:	682b      	ldr	r3, [r5, #0]
    69b0:	4298      	cmp	r0, r3
    69b2:	bfcc      	ite	gt
    69b4:	2000      	movgt	r0, #0
    69b6:	2001      	movle	r0, #1
    69b8:	e7e3      	b.n	6982 <intx32_decode+0x16>

000069ba <strx_start_decode>:
}


bool strx_start_decode(cbor_decode_state_t * p_state,
		cbor_string_type_t *p_result, void *p_min_len, void *p_max_len)
{
    69ba:	b570      	push	{r4, r5, r6, lr}
    69bc:	460d      	mov	r5, r1
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    69be:	6801      	ldr	r1, [r0, #0]
{
    69c0:	4606      	mov	r6, r0
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    69c2:	780c      	ldrb	r4, [r1, #0]
    69c4:	0964      	lsrs	r4, r4, #5
	cbor_string_type_t *p_str_result = (cbor_string_type_t *)p_result;

	if (major_type != CBOR_MAJOR_TYPE_BSTR
    69c6:	3c02      	subs	r4, #2
    69c8:	2c01      	cmp	r4, #1
    69ca:	d901      	bls.n	69d0 <strx_start_decode+0x16>
		&& major_type != CBOR_MAJOR_TYPE_TSTR) {
		/* Value to be read doesn't have the right type. */
		FAIL();
    69cc:	2000      	movs	r0, #0
			(size_t *)p_max_len)) {
		FAIL();
	}
	p_str_result->value = p_state->p_payload;
	return true;
}
    69ce:	bd70      	pop	{r4, r5, r6, pc}
	return uint32_decode(p_state,
    69d0:	1d29      	adds	r1, r5, #4
    69d2:	f7ff ffb4 	bl	693e <uint32_decode>
	if (!size_decode(p_state,
    69d6:	2800      	cmp	r0, #0
    69d8:	d0f8      	beq.n	69cc <strx_start_decode+0x12>
	p_str_result->value = p_state->p_payload;
    69da:	6833      	ldr	r3, [r6, #0]
    69dc:	602b      	str	r3, [r5, #0]
	return true;
    69de:	e7f6      	b.n	69ce <strx_start_decode+0x14>

000069e0 <strx_decode>:


bool strx_decode(cbor_decode_state_t * p_state,
		cbor_string_type_t *p_result, void *p_min_len, void *p_max_len)
{
    69e0:	b538      	push	{r3, r4, r5, lr}
    69e2:	4604      	mov	r4, r0
    69e4:	460d      	mov	r5, r1
	if (!strx_start_decode(p_state, p_result,
    69e6:	f7ff ffe8 	bl	69ba <strx_start_decode>
    69ea:	b118      	cbz	r0, 69f4 <strx_decode+0x14>
				p_min_len, p_max_len)) {
		return false;
	}
	(p_state->p_payload) += p_result->len;
    69ec:	6823      	ldr	r3, [r4, #0]
    69ee:	686a      	ldr	r2, [r5, #4]
    69f0:	4413      	add	r3, r2
    69f2:	6023      	str	r3, [r4, #0]
	return true;
}
    69f4:	bd38      	pop	{r3, r4, r5, pc}

000069f6 <list_start_decode>:


bool list_start_decode(cbor_decode_state_t * p_state,
		size_t *p_result, size_t min_num, size_t max_num)
{
    69f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    69f8:	e9cd 3200 	strd	r3, r2, [sp]
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    69fc:	6803      	ldr	r3, [r0, #0]
{
    69fe:	4604      	mov	r4, r0
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    6a00:	781e      	ldrb	r6, [r3, #0]

	*p_result = p_state->elem_count;
    6a02:	6883      	ldr	r3, [r0, #8]
	uint8_t major_type = MAJOR_TYPE(*p_state->p_payload);
    6a04:	0976      	lsrs	r6, r6, #5
	*p_result = p_state->elem_count;
    6a06:	600b      	str	r3, [r1, #0]

	if (major_type != CBOR_MAJOR_TYPE_LIST
    6a08:	1f33      	subs	r3, r6, #4
    6a0a:	2b01      	cmp	r3, #1
{
    6a0c:	460d      	mov	r5, r1
	if (major_type != CBOR_MAJOR_TYPE_LIST
    6a0e:	d902      	bls.n	6a16 <list_start_decode+0x20>
		&& major_type != CBOR_MAJOR_TYPE_MAP) {
		FAIL();
    6a10:	2000      	movs	r0, #0
	}
	size_t tmp = *p_result;
	*p_result = p_state->elem_count;
	p_state->elem_count = major_type == CBOR_MAJOR_TYPE_MAP ? tmp * 2 : tmp;
	return true;
}
    6a12:	b002      	add	sp, #8
    6a14:	bd70      	pop	{r4, r5, r6, pc}
	if (!uint32_decode(p_state,
    6a16:	466b      	mov	r3, sp
    6a18:	aa01      	add	r2, sp, #4
    6a1a:	f7ff ff90 	bl	693e <uint32_decode>
    6a1e:	2800      	cmp	r0, #0
    6a20:	d0f6      	beq.n	6a10 <list_start_decode+0x1a>
	size_t tmp = *p_result;
    6a22:	682b      	ldr	r3, [r5, #0]
	*p_result = p_state->elem_count;
    6a24:	68a2      	ldr	r2, [r4, #8]
	p_state->elem_count = major_type == CBOR_MAJOR_TYPE_MAP ? tmp * 2 : tmp;
    6a26:	2e05      	cmp	r6, #5
    6a28:	bf08      	it	eq
    6a2a:	005b      	lsleq	r3, r3, #1
	*p_result = p_state->elem_count;
    6a2c:	602a      	str	r2, [r5, #0]
	p_state->elem_count = major_type == CBOR_MAJOR_TYPE_MAP ? tmp * 2 : tmp;
    6a2e:	60a3      	str	r3, [r4, #8]
	return true;
    6a30:	e7ef      	b.n	6a12 <list_start_decode+0x1c>

00006a32 <multi_decode>:
		cbor_decode_state_t * p_state,
		void *p_result,
		void *p_min_result,
		void *p_max_result,
		size_t result_len)
{
    6a32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a36:	4680      	mov	r8, r0
    6a38:	4616      	mov	r6, r2
    6a3a:	4699      	mov	r9, r3
	for (size_t i = 0; i < max_decode; i++) {
    6a3c:	2400      	movs	r4, #0
{
    6a3e:	460f      	mov	r7, r1
    6a40:	e9dd 510c 	ldrd	r5, r1, [sp, #48]	; 0x30
	for (size_t i = 0; i < max_decode; i++) {
    6a44:	42bc      	cmp	r4, r7
    6a46:	d102      	bne.n	6a4e <multi_decode+0x1c>
			return true;
		}
	}
	cbor_decode_print("Found %zu elements.\n", max_decode);
	*p_num_decode = max_decode;
	return true;
    6a48:	2001      	movs	r0, #1
	*p_num_decode = max_decode;
    6a4a:	6034      	str	r4, [r6, #0]
	return true;
    6a4c:	e015      	b.n	6a7a <multi_decode+0x48>
		if (!decoder(p_state,
    6a4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    6a52:	4628      	mov	r0, r5
    6a54:	9101      	str	r1, [sp, #4]
		uint8_t const *p_payload_bak = p_state->p_payload;
    6a56:	f8d5 b000 	ldr.w	fp, [r5]
		size_t elem_count_bak = p_state->elem_count;
    6a5a:	f8d5 a008 	ldr.w	sl, [r5, #8]
		if (!decoder(p_state,
    6a5e:	47c8      	blx	r9
    6a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6a62:	9901      	ldr	r1, [sp, #4]
    6a64:	4419      	add	r1, r3
    6a66:	b958      	cbnz	r0, 6a80 <multi_decode+0x4e>
			if (i < min_decode) {
    6a68:	4544      	cmp	r4, r8
    6a6a:	bf34      	ite	cc
    6a6c:	2000      	movcc	r0, #0
    6a6e:	2001      	movcs	r0, #1
			*p_num_decode = i;
    6a70:	6034      	str	r4, [r6, #0]
			p_state->p_payload = p_payload_bak;
    6a72:	f8c5 b000 	str.w	fp, [r5]
			p_state->elem_count = elem_count_bak;
    6a76:	f8c5 a008 	str.w	sl, [r5, #8]
}
    6a7a:	b003      	add	sp, #12
    6a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < max_decode; i++) {
    6a80:	3401      	adds	r4, #1
    6a82:	e7df      	b.n	6a44 <multi_decode+0x12>

00006a84 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6a84:	2100      	movs	r1, #0
    6a86:	2001      	movs	r0, #1
    6a88:	f7fc b904 	b.w	2c94 <z_arm_fatal_error>

00006a8c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6a8c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6a8e:	6800      	ldr	r0, [r0, #0]
    6a90:	f7fc b900 	b.w	2c94 <z_arm_fatal_error>

00006a94 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6a94:	b508      	push	{r3, lr}
	handler();
    6a96:	f7fc f92b 	bl	2cf0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6a9e:	f7fc bb69 	b.w	3174 <z_arm_exc_exit>

00006aa2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    6aa2:	e840 f000 	tt	r0, r0
    6aa6:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    6aa8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    6aac:	bf14      	ite	ne
    6aae:	4618      	movne	r0, r3
    6ab0:	f06f 0015 	mvneq.w	r0, #21
    6ab4:	4770      	bx	lr

00006ab6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6ab6:	4603      	mov	r3, r0
	size_t n = 0;
    6ab8:	2000      	movs	r0, #0

	while (*s != '\0') {
    6aba:	5c1a      	ldrb	r2, [r3, r0]
    6abc:	b902      	cbnz	r2, 6ac0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6abe:	4770      	bx	lr
		n++;
    6ac0:	3001      	adds	r0, #1
    6ac2:	e7fa      	b.n	6aba <strlen+0x4>

00006ac4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6ac4:	3801      	subs	r0, #1
    6ac6:	3901      	subs	r1, #1
    6ac8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    6acc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6ad0:	4293      	cmp	r3, r2
    6ad2:	d101      	bne.n	6ad8 <strcmp+0x14>
    6ad4:	2b00      	cmp	r3, #0
    6ad6:	d1f7      	bne.n	6ac8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    6ad8:	1a98      	subs	r0, r3, r2
    6ada:	4770      	bx	lr

00006adc <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    6adc:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    6ade:	b15a      	cbz	r2, 6af8 <memcmp+0x1c>
    6ae0:	3901      	subs	r1, #1
    6ae2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    6ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
    6ae8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    6aec:	42a0      	cmp	r0, r4
    6aee:	d001      	beq.n	6af4 <memcmp+0x18>
    6af0:	429a      	cmp	r2, r3
    6af2:	d0f7      	beq.n	6ae4 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    6af4:	1ad0      	subs	r0, r2, r3
}
    6af6:	bd10      	pop	{r4, pc}
		return 0;
    6af8:	4610      	mov	r0, r2
    6afa:	e7fc      	b.n	6af6 <memcmp+0x1a>

00006afc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    6afc:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    6afe:	ea81 0400 	eor.w	r4, r1, r0
    6b02:	07a5      	lsls	r5, r4, #30
    6b04:	4603      	mov	r3, r0
    6b06:	d00b      	beq.n	6b20 <memcpy+0x24>
    6b08:	3b01      	subs	r3, #1
    6b0a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    6b0c:	4291      	cmp	r1, r2
    6b0e:	d11b      	bne.n	6b48 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    6b12:	2a00      	cmp	r2, #0
    6b14:	d0fc      	beq.n	6b10 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    6b16:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    6b1a:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    6b1c:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    6b20:	079c      	lsls	r4, r3, #30
    6b22:	d1f6      	bne.n	6b12 <memcpy+0x16>
    6b24:	f022 0403 	bic.w	r4, r2, #3
    6b28:	1f1d      	subs	r5, r3, #4
    6b2a:	0896      	lsrs	r6, r2, #2
    6b2c:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    6b2e:	42b9      	cmp	r1, r7
    6b30:	d105      	bne.n	6b3e <memcpy+0x42>
    6b32:	f06f 0503 	mvn.w	r5, #3
    6b36:	4423      	add	r3, r4
    6b38:	fb05 2206 	mla	r2, r5, r6, r2
    6b3c:	e7e4      	b.n	6b08 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    6b3e:	f851 cb04 	ldr.w	ip, [r1], #4
    6b42:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    6b46:	e7f2      	b.n	6b2e <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    6b48:	f811 4b01 	ldrb.w	r4, [r1], #1
    6b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6b50:	e7dc      	b.n	6b0c <memcpy+0x10>

00006b52 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    6b52:	4603      	mov	r3, r0
{
    6b54:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    6b56:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    6b58:	079c      	lsls	r4, r3, #30
    6b5a:	d111      	bne.n	6b80 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    6b5c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    6b60:	f022 0603 	bic.w	r6, r2, #3
    6b64:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    6b68:	441e      	add	r6, r3
    6b6a:	0894      	lsrs	r4, r2, #2
    6b6c:	42b3      	cmp	r3, r6
    6b6e:	d10d      	bne.n	6b8c <memset+0x3a>
    6b70:	f06f 0503 	mvn.w	r5, #3
    6b74:	fb05 2204 	mla	r2, r5, r4, r2
    6b78:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    6b7a:	4293      	cmp	r3, r2
    6b7c:	d109      	bne.n	6b92 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6b7e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    6b80:	2a00      	cmp	r2, #0
    6b82:	d0fc      	beq.n	6b7e <memset+0x2c>
		*(d_byte++) = c_byte;
    6b84:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6b88:	3a01      	subs	r2, #1
    6b8a:	e7e5      	b.n	6b58 <memset+0x6>
		*(d_word++) = c_word;
    6b8c:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    6b90:	e7ec      	b.n	6b6c <memset+0x1a>
		*(d_byte++) = c_byte;
    6b92:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6b96:	e7f0      	b.n	6b7a <memset+0x28>

00006b98 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b98:	6843      	ldr	r3, [r0, #4]
}
    6b9a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b9c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6b9e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    6ba0:	600b      	str	r3, [r1, #0]
}
    6ba2:	4770      	bx	lr

00006ba4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ba4:	6843      	ldr	r3, [r0, #4]
    6ba6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6ba8:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6baa:	4042      	eors	r2, r0
    6bac:	400a      	ands	r2, r1
    6bae:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6bb0:	605a      	str	r2, [r3, #4]
}
    6bb2:	2000      	movs	r0, #0
    6bb4:	4770      	bx	lr

00006bb6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6bb6:	6843      	ldr	r3, [r0, #4]
}
    6bb8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6bba:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    6bbc:	6099      	str	r1, [r3, #8]
}
    6bbe:	4770      	bx	lr

00006bc0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6bc0:	6843      	ldr	r3, [r0, #4]
}
    6bc2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6bc4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    6bc6:	60d9      	str	r1, [r3, #12]
}
    6bc8:	4770      	bx	lr

00006bca <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6bca:	6843      	ldr	r3, [r0, #4]
}
    6bcc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6bce:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6bd0:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    6bd2:	4059      	eors	r1, r3
    p_reg->OUT = value;
    6bd4:	6051      	str	r1, [r2, #4]
}
    6bd6:	4770      	bx	lr

00006bd8 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6bd8:	6903      	ldr	r3, [r0, #16]
{
    6bda:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    6bdc:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    6bde:	b158      	cbz	r0, 6bf8 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6be0:	2400      	movs	r4, #0
    6be2:	4281      	cmp	r1, r0
    6be4:	d113      	bne.n	6c0e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    6be6:	6808      	ldr	r0, [r1, #0]
    6be8:	b95c      	cbnz	r4, 6c02 <gpio_nrfx_manage_callback+0x2a>
    6bea:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    6bec:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6bee:	42a1      	cmp	r1, r4
    6bf0:	d100      	bne.n	6bf4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    6bf2:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6bf4:	2000      	movs	r0, #0
    6bf6:	6008      	str	r0, [r1, #0]
	if (set) {
    6bf8:	b972      	cbnz	r2, 6c18 <gpio_nrfx_manage_callback+0x40>
	return 0;
    6bfa:	2000      	movs	r0, #0
}
    6bfc:	bd30      	pop	{r4, r5, pc}
    6bfe:	4628      	mov	r0, r5
    6c00:	e7ef      	b.n	6be2 <gpio_nrfx_manage_callback+0xa>
    6c02:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    6c04:	6898      	ldr	r0, [r3, #8]
    6c06:	4281      	cmp	r1, r0
	list->tail = node;
    6c08:	bf08      	it	eq
    6c0a:	609c      	streq	r4, [r3, #8]
}
    6c0c:	e7f2      	b.n	6bf4 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6c0e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6c10:	4604      	mov	r4, r0
    6c12:	2d00      	cmp	r5, #0
    6c14:	d1f3      	bne.n	6bfe <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    6c16:	b13a      	cbz	r2, 6c28 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    6c18:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    6c1a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    6c1c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    6c1e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6c20:	2800      	cmp	r0, #0
    6c22:	d1ea      	bne.n	6bfa <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    6c24:	6099      	str	r1, [r3, #8]
}
    6c26:	e7e9      	b.n	6bfc <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    6c28:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6c2c:	e7e6      	b.n	6bfc <gpio_nrfx_manage_callback+0x24>

00006c2e <is_regular_addr_valid>:
{
    6c2e:	b538      	push	{r3, r4, r5, lr}
    6c30:	4604      	mov	r4, r0
    6c32:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    6c34:	f000 fab2 	bl	719c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    6c38:	4284      	cmp	r4, r0
    6c3a:	d209      	bcs.n	6c50 <is_regular_addr_valid+0x22>
    6c3c:	2c00      	cmp	r4, #0
    6c3e:	db07      	blt.n	6c50 <is_regular_addr_valid+0x22>
	    addr < 0 ||
    6c40:	42a8      	cmp	r0, r5
    6c42:	d305      	bcc.n	6c50 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    6c44:	1961      	adds	r1, r4, r5
	    len > flash_size ||
    6c46:	4281      	cmp	r1, r0
    6c48:	bf8c      	ite	hi
    6c4a:	2000      	movhi	r0, #0
    6c4c:	2001      	movls	r0, #1
}
    6c4e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    6c50:	2000      	movs	r0, #0
    6c52:	e7fc      	b.n	6c4e <is_regular_addr_valid+0x20>

00006c54 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
    6c54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6c58:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
    6c5a:	6883      	ldr	r3, [r0, #8]
{
    6c5c:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
    6c5e:	695b      	ldr	r3, [r3, #20]
    6c60:	4669      	mov	r1, sp
{
    6c62:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
    6c64:	aa01      	add	r2, sp, #4
    6c66:	4798      	blx	r3

	while (layout_size--) {
    6c68:	e9dd 1000 	ldrd	r1, r0, [sp]
    6c6c:	2300      	movs	r3, #0
	off_t end = 0;
    6c6e:	461d      	mov	r5, r3
	off_t group_offs = 0;
    6c70:	469e      	mov	lr, r3
	size_t page_count = 0;
    6c72:	469c      	mov	ip, r3
    6c74:	f100 38ff 	add.w	r8, r0, #4294967295
	while (layout_size--) {
    6c78:	f1b8 3fff 	cmp.w	r8, #4294967295
    6c7c:	d102      	bne.n	6c84 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
    6c7e:	f06f 0015 	mvn.w	r0, #21
    6c82:	e018      	b.n	6cb6 <flash_get_page_info+0x62>
		if (use_addr) {
    6c84:	680a      	ldr	r2, [r1, #0]
    6c86:	b1cf      	cbz	r7, 6cbc <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
    6c88:	6848      	ldr	r0, [r1, #4]
    6c8a:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
    6c8e:	42a5      	cmp	r5, r4
    6c90:	f108 38ff 	add.w	r8, r8, #4294967295
    6c94:	dd17      	ble.n	6cc6 <flash_get_page_info+0x72>
    6c96:	b103      	cbz	r3, 6c9a <flash_get_page_info+0x46>
    6c98:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
    6c9a:	9b00      	ldr	r3, [sp, #0]
    6c9c:	685b      	ldr	r3, [r3, #4]
    6c9e:	6073      	str	r3, [r6, #4]
			if (use_addr) {
    6ca0:	b177      	cbz	r7, 6cc0 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
    6ca2:	eba4 040e 	sub.w	r4, r4, lr
    6ca6:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
    6caa:	2000      	movs	r0, #0
			info->start_offset = group_offs +
    6cac:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
    6cb0:	4464      	add	r4, ip
			info->start_offset = group_offs +
    6cb2:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
    6cb4:	60b4      	str	r4, [r6, #8]
}
    6cb6:	b002      	add	sp, #8
    6cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
    6cbc:	4415      	add	r5, r2
    6cbe:	e7e6      	b.n	6c8e <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
    6cc0:	eba4 040c 	sub.w	r4, r4, ip
    6cc4:	e7f1      	b.n	6caa <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
    6cc6:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
    6cc8:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
    6cca:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
    6cce:	3108      	adds	r1, #8
    6cd0:	2301      	movs	r3, #1
    6cd2:	e7d1      	b.n	6c78 <flash_get_page_info+0x24>

00006cd4 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    6cd4:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
    6cd6:	2201      	movs	r2, #1
    6cd8:	f7ff bfbc 	b.w	6c54 <flash_get_page_info>

00006cdc <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    6cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    6ce0:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    6ce2:	6883      	ldr	r3, [r0, #8]
{
    6ce4:	b086      	sub	sp, #24
    6ce6:	4688      	mov	r8, r1
    6ce8:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    6cea:	695b      	ldr	r3, [r3, #20]
    6cec:	aa02      	add	r2, sp, #8
    6cee:	a901      	add	r1, sp, #4
    6cf0:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    6cf2:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    6cf4:	4625      	mov	r5, r4
    6cf6:	9b02      	ldr	r3, [sp, #8]
    6cf8:	42ab      	cmp	r3, r5
    6cfa:	d802      	bhi.n	6d02 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    6cfc:	b006      	add	sp, #24
    6cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    6d02:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    6d04:	9f01      	ldr	r7, [sp, #4]
    6d06:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    6d0a:	687b      	ldr	r3, [r7, #4]
    6d0c:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6d0e:	683a      	ldr	r2, [r7, #0]
    6d10:	eb0a 0306 	add.w	r3, sl, r6
    6d14:	42b2      	cmp	r2, r6
    6d16:	d802      	bhi.n	6d1e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    6d18:	469a      	mov	sl, r3
    6d1a:	3501      	adds	r5, #1
    6d1c:	e7eb      	b.n	6cf6 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    6d1e:	4649      	mov	r1, r9
    6d20:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    6d22:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    6d24:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    6d26:	47c0      	blx	r8
    6d28:	2800      	cmp	r0, #0
    6d2a:	d0e7      	beq.n	6cfc <flash_page_foreach+0x20>
			off += page_info.size;
    6d2c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    6d2e:	3601      	adds	r6, #1
			off += page_info.size;
    6d30:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    6d32:	e7ec      	b.n	6d0e <flash_page_foreach+0x32>

00006d34 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6d34:	6843      	ldr	r3, [r0, #4]
{
    6d36:	b410      	push	{r4}
	return config->uarte_regs;
    6d38:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6d3a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6d3e:	05d1      	lsls	r1, r2, #23
    6d40:	d518      	bpl.n	6d74 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6d42:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6d46:	b1aa      	cbz	r2, 6d74 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    6d48:	f04f 0120 	mov.w	r1, #32
    6d4c:	f3ef 8211 	mrs	r2, BASEPRI
    6d50:	f381 8811 	msr	BASEPRI, r1
    6d54:	f3bf 8f6f 	isb	sy
    6d58:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6d5c:	b131      	cbz	r1, 6d6c <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d5e:	2100      	movs	r1, #0
    6d60:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6d64:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d68:	2101      	movs	r1, #1
    6d6a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6d6c:	f382 8811 	msr	BASEPRI, r2
    6d70:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6d74:	6842      	ldr	r2, [r0, #4]
    6d76:	6852      	ldr	r2, [r2, #4]
    6d78:	06d2      	lsls	r2, r2, #27
    6d7a:	d51a      	bpl.n	6db2 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
    6d7c:	f04f 0220 	mov.w	r2, #32
    6d80:	f3ef 8111 	mrs	r1, BASEPRI
    6d84:	f382 8811 	msr	BASEPRI, r2
    6d88:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6d8c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6d90:	b112      	cbz	r2, 6d98 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6d92:	2200      	movs	r2, #0
    6d94:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    6d98:	6902      	ldr	r2, [r0, #16]
    6d9a:	68d2      	ldr	r2, [r2, #12]
    6d9c:	b10a      	cbz	r2, 6da2 <uarte_nrfx_isr_int+0x6e>
    6d9e:	6912      	ldr	r2, [r2, #16]
    6da0:	b91a      	cbnz	r2, 6daa <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
    6da2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6da6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    6daa:	f381 8811 	msr	BASEPRI, r1
    6dae:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    6db2:	6902      	ldr	r2, [r0, #16]
    6db4:	68d2      	ldr	r2, [r2, #12]
    6db6:	b15a      	cbz	r2, 6dd0 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6db8:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6dbc:	b159      	cbz	r1, 6dd6 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
    6dbe:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
    6dc0:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    6dc2:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    6dc4:	b13c      	cbz	r4, 6dd6 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
    6dc6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    6dca:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    6dce:	7391      	strb	r1, [r2, #14]
}
    6dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
    6dd4:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6dd6:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    6dda:	b121      	cbz	r1, 6de6 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ddc:	2100      	movs	r1, #0
    6dde:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    6de2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    6de6:	6813      	ldr	r3, [r2, #0]
    6de8:	2b00      	cmp	r3, #0
    6dea:	d0f1      	beq.n	6dd0 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6dec:	6851      	ldr	r1, [r2, #4]
}
    6dee:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
    6df2:	4718      	bx	r3

00006df4 <uarte_nrfx_config_get>:
{
    6df4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6df6:	6902      	ldr	r2, [r0, #16]
    6df8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6dfc:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6e00:	2000      	movs	r0, #0
    6e02:	4770      	bx	lr

00006e04 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6e04:	6843      	ldr	r3, [r0, #4]
    6e06:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6e08:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6e0c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6e10:	4770      	bx	lr

00006e12 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    6e12:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6e14:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e16:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6e1a:	b940      	cbnz	r0, 6e2e <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6e1c:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6e1e:	0712      	lsls	r2, r2, #28
    6e20:	d406      	bmi.n	6e30 <is_tx_ready+0x1e>
    6e22:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    6e26:	3800      	subs	r0, #0
    6e28:	bf18      	it	ne
    6e2a:	2001      	movne	r0, #1
    6e2c:	4770      	bx	lr
    6e2e:	2001      	movs	r0, #1
}
    6e30:	4770      	bx	lr

00006e32 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6e32:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    6e34:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6e36:	681b      	ldr	r3, [r3, #0]
    6e38:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6e3c:	b148      	cbz	r0, 6e52 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e3e:	2000      	movs	r0, #0
	*c = data->rx_data;
    6e40:	7d52      	ldrb	r2, [r2, #21]
    6e42:	700a      	strb	r2, [r1, #0]
    6e44:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6e48:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e4c:	2201      	movs	r2, #1
    6e4e:	601a      	str	r2, [r3, #0]
	return 0;
    6e50:	4770      	bx	lr
		return -1;
    6e52:	f04f 30ff 	mov.w	r0, #4294967295
}
    6e56:	4770      	bx	lr

00006e58 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6e58:	2a00      	cmp	r2, #0
    6e5a:	dd0f      	ble.n	6e7c <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
    6e5c:	6843      	ldr	r3, [r0, #4]
    6e5e:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e60:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6e64:	b153      	cbz	r3, 6e7c <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    6e66:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e68:	2000      	movs	r0, #0
    6e6a:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    6e6e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e72:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    6e74:	7d5b      	ldrb	r3, [r3, #21]
    6e76:	700b      	strb	r3, [r1, #0]
    6e78:	6010      	str	r0, [r2, #0]
}
    6e7a:	4770      	bx	lr
	int num_rx = 0;
    6e7c:	2000      	movs	r0, #0
    6e7e:	4770      	bx	lr

00006e80 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    6e80:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    6e82:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    6e84:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    6e86:	f04f 0020 	mov.w	r0, #32
    6e8a:	f3ef 8311 	mrs	r3, BASEPRI
    6e8e:	f380 8811 	msr	BASEPRI, r0
    6e92:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    6e96:	2000      	movs	r0, #0
    6e98:	68c9      	ldr	r1, [r1, #12]
    6e9a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    6e9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6ea0:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    6ea4:	f383 8811 	msr	BASEPRI, r3
    6ea8:	f3bf 8f6f 	isb	sy
}
    6eac:	4770      	bx	lr

00006eae <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    6eae:	2201      	movs	r2, #1
    6eb0:	6903      	ldr	r3, [r0, #16]
    6eb2:	68db      	ldr	r3, [r3, #12]
    6eb4:	739a      	strb	r2, [r3, #14]
}
    6eb6:	4770      	bx	lr

00006eb8 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    6eb8:	6903      	ldr	r3, [r0, #16]
    6eba:	68db      	ldr	r3, [r3, #12]
    6ebc:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6ebe:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    6ec2:	b962      	cbnz	r2, 6ede <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    6ec4:	6842      	ldr	r2, [r0, #4]
    6ec6:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ec8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    6ecc:	b140      	cbz	r0, 6ee0 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    6ece:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    6ed2:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    6ed6:	d003      	beq.n	6ee0 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6ed8:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    6eda:	6119      	str	r1, [r3, #16]
    6edc:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6ede:	2000      	movs	r0, #0
}
    6ee0:	4770      	bx	lr

00006ee2 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    6ee2:	6843      	ldr	r3, [r0, #4]
    6ee4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ee6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    6eea:	3800      	subs	r0, #0
    6eec:	bf18      	it	ne
    6eee:	2001      	movne	r0, #1
    6ef0:	4770      	bx	lr

00006ef2 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    6ef2:	2210      	movs	r2, #16
	return config->uarte_regs;
    6ef4:	6843      	ldr	r3, [r0, #4]
    6ef6:	681b      	ldr	r3, [r3, #0]
    6ef8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6efc:	4770      	bx	lr

00006efe <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    6efe:	2210      	movs	r2, #16
	return config->uarte_regs;
    6f00:	6843      	ldr	r3, [r0, #4]
    6f02:	681b      	ldr	r3, [r3, #0]
    6f04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6f08:	4770      	bx	lr

00006f0a <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    6f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6f0e:	6843      	ldr	r3, [r0, #4]
    6f10:	681b      	ldr	r3, [r3, #0]
    6f12:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6f16:	4770      	bx	lr

00006f18 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    6f18:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6f1c:	6843      	ldr	r3, [r0, #4]
    6f1e:	681b      	ldr	r3, [r3, #0]
    6f20:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6f24:	4770      	bx	lr

00006f26 <uarte_nrfx_irq_update>:
}
    6f26:	2001      	movs	r0, #1
    6f28:	4770      	bx	lr

00006f2a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    6f2a:	6903      	ldr	r3, [r0, #16]
    6f2c:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    6f2e:	e9c3 1200 	strd	r1, r2, [r3]
}
    6f32:	4770      	bx	lr

00006f34 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    6f34:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
    6f36:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6f38:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6f3c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f40:	2200      	movs	r2, #0
    6f42:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6f46:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6f4a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    6f4e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6f52:	6842      	ldr	r2, [r0, #4]
    6f54:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6f56:	bf41      	itttt	mi
    6f58:	2208      	movmi	r2, #8
    6f5a:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    6f5e:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    6f62:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6f66:	2201      	movs	r2, #1
    6f68:	609a      	str	r2, [r3, #8]
}
    6f6a:	4770      	bx	lr

00006f6c <uarte_nrfx_fifo_fill>:
{
    6f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    6f6e:	6906      	ldr	r6, [r0, #16]
{
    6f70:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
    6f72:	68f3      	ldr	r3, [r6, #12]
    6f74:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6f76:	3310      	adds	r3, #16
    6f78:	4294      	cmp	r4, r2
    6f7a:	bfa8      	it	ge
    6f7c:	4614      	movge	r4, r2
    6f7e:	2201      	movs	r2, #1
    6f80:	e8d3 0fef 	ldaex	r0, [r3]
    6f84:	2800      	cmp	r0, #0
    6f86:	d103      	bne.n	6f90 <uarte_nrfx_fifo_fill+0x24>
    6f88:	e8c3 2fe7 	stlex	r7, r2, [r3]
    6f8c:	2f00      	cmp	r7, #0
    6f8e:	d1f7      	bne.n	6f80 <uarte_nrfx_fifo_fill+0x14>
    6f90:	bf0c      	ite	eq
    6f92:	4613      	moveq	r3, r2
    6f94:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    6f96:	d01d      	beq.n	6fd4 <uarte_nrfx_fifo_fill+0x68>
		return 0;
    6f98:	461c      	mov	r4, r3
}
    6f9a:	4620      	mov	r0, r4
    6f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    6f9e:	68f2      	ldr	r2, [r6, #12]
    6fa0:	5cc8      	ldrb	r0, [r1, r3]
    6fa2:	6892      	ldr	r2, [r2, #8]
    6fa4:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
    6fa6:	3301      	adds	r3, #1
    6fa8:	42a3      	cmp	r3, r4
    6faa:	dbf8      	blt.n	6f9e <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
    6fac:	f04f 0320 	mov.w	r3, #32
    6fb0:	f3ef 8711 	mrs	r7, BASEPRI
    6fb4:	f383 8811 	msr	BASEPRI, r3
    6fb8:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    6fbc:	4628      	mov	r0, r5
    6fbe:	f7ff ff28 	bl	6e12 <is_tx_ready>
    6fc2:	68f3      	ldr	r3, [r6, #12]
    6fc4:	b940      	cbnz	r0, 6fd8 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
    6fc6:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    6fc8:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    6fca:	f387 8811 	msr	BASEPRI, r7
    6fce:	f3bf 8f6f 	isb	sy
	return len;
    6fd2:	e7e2      	b.n	6f9a <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
    6fd4:	2300      	movs	r3, #0
    6fd6:	e7e7      	b.n	6fa8 <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
    6fd8:	4622      	mov	r2, r4
    6fda:	4628      	mov	r0, r5
    6fdc:	6899      	ldr	r1, [r3, #8]
    6fde:	f7ff ffa9 	bl	6f34 <tx_start>
    6fe2:	e7f2      	b.n	6fca <uarte_nrfx_fifo_fill+0x5e>

00006fe4 <uarte_nrfx_irq_is_pending>:
{
    6fe4:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    6fe6:	6843      	ldr	r3, [r0, #4]
{
    6fe8:	4604      	mov	r4, r0
	return config->uarte_regs;
    6fea:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    6fec:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    6ff0:	025b      	lsls	r3, r3, #9
    6ff2:	d405      	bmi.n	7000 <uarte_nrfx_irq_is_pending+0x1c>
    6ff4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    6ff8:	f010 0010 	ands.w	r0, r0, #16
    6ffc:	d106      	bne.n	700c <uarte_nrfx_irq_is_pending+0x28>
}
    6ffe:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    7000:	f7ff ff5a 	bl	6eb8 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    7004:	2800      	cmp	r0, #0
    7006:	d0f5      	beq.n	6ff4 <uarte_nrfx_irq_is_pending+0x10>
		||
    7008:	2001      	movs	r0, #1
    700a:	e7f8      	b.n	6ffe <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    700c:	4620      	mov	r0, r4
    700e:	f7ff ff68 	bl	6ee2 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    7012:	3800      	subs	r0, #0
    7014:	bf18      	it	ne
    7016:	2001      	movne	r0, #1
    7018:	e7f1      	b.n	6ffe <uarte_nrfx_irq_is_pending+0x1a>

0000701a <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    701a:	f7fd ba9b 	b.w	4554 <nrf_cc3xx_platform_init_no_rng>

0000701e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    701e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7020:	f7fb f886 	bl	2130 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7024:	f7ff fc0b 	bl	683e <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    702c:	f7fd ba92 	b.w	4554 <nrf_cc3xx_platform_init_no_rng>

00007030 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    7030:	b538      	push	{r3, r4, r5, lr}
    7032:	460c      	mov	r4, r1
    7034:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
    7036:	f7ff fb60 	bl	66fa <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    703a:	4621      	mov	r1, r4
    703c:	4425      	add	r5, r4
    703e:	42a9      	cmp	r1, r5
    7040:	d101      	bne.n	7046 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    7042:	2001      	movs	r0, #1
}
    7044:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    7046:	f811 3b01 	ldrb.w	r3, [r1], #1
    704a:	4298      	cmp	r0, r3
    704c:	d0f7      	beq.n	703e <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    704e:	2000      	movs	r0, #0
    7050:	e7f8      	b.n	7044 <bootutil_buffer_is_erased.part.0+0x14>

00007052 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    7052:	6880      	ldr	r0, [r0, #8]
}
    7054:	3828      	subs	r0, #40	; 0x28
    7056:	4770      	bx	lr

00007058 <boot_magic_compatible_check>:
    switch (tbl_val) {
    7058:	2804      	cmp	r0, #4
    705a:	d009      	beq.n	7070 <boot_magic_compatible_check+0x18>
    705c:	2805      	cmp	r0, #5
    705e:	d103      	bne.n	7068 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    7060:	1e48      	subs	r0, r1, #1
    7062:	bf18      	it	ne
    7064:	2001      	movne	r0, #1
    7066:	4770      	bx	lr
        return tbl_val == val;
    7068:	1a43      	subs	r3, r0, r1
    706a:	4258      	negs	r0, r3
    706c:	4158      	adcs	r0, r3
    706e:	4770      	bx	lr
    switch (tbl_val) {
    7070:	2001      	movs	r0, #1
}
    7072:	4770      	bx	lr

00007074 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    7074:	b111      	cbz	r1, 707c <bootutil_buffer_is_erased+0x8>
    7076:	b10a      	cbz	r2, 707c <bootutil_buffer_is_erased+0x8>
    7078:	f7ff bfda 	b.w	7030 <bootutil_buffer_is_erased.part.0>
}
    707c:	2000      	movs	r0, #0
    707e:	4770      	bx	lr

00007080 <boot_read_flag>:
{
    7080:	b538      	push	{r3, r4, r5, lr}
    7082:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    7084:	2301      	movs	r3, #1
{
    7086:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    7088:	4622      	mov	r2, r4
{
    708a:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    708c:	f7ff faad 	bl	65ea <flash_area_read>
    if (rc < 0) {
    7090:	2800      	cmp	r0, #0
    7092:	db10      	blt.n	70b6 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    7094:	2201      	movs	r2, #1
    7096:	4621      	mov	r1, r4
    7098:	4628      	mov	r0, r5
    709a:	f7ff ffeb 	bl	7074 <bootutil_buffer_is_erased>
    709e:	b118      	cbz	r0, 70a8 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    70a0:	2303      	movs	r3, #3
    return 0;
    70a2:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
    70a4:	7023      	strb	r3, [r4, #0]
}
    70a6:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    70a8:	7823      	ldrb	r3, [r4, #0]
    70aa:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
    70ac:	bf0c      	ite	eq
    70ae:	2301      	moveq	r3, #1
    70b0:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    70b2:	7023      	strb	r3, [r4, #0]
    70b4:	e7f7      	b.n	70a6 <boot_read_flag+0x26>
        return BOOT_EFLASH;
    70b6:	2001      	movs	r0, #1
    70b8:	e7f5      	b.n	70a6 <boot_read_flag+0x26>

000070ba <boot_write_trailer>:
{
    70ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    70be:	461d      	mov	r5, r3
    70c0:	4606      	mov	r6, r0
    70c2:	460f      	mov	r7, r1
    70c4:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    70c6:	f7ff fb0f 	bl	66e8 <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
    70ca:	1944      	adds	r4, r0, r5
    70cc:	3c01      	subs	r4, #1
    70ce:	4240      	negs	r0, r0
    70d0:	4004      	ands	r4, r0
    70d2:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    70d4:	2c08      	cmp	r4, #8
    70d6:	d81a      	bhi.n	710e <boot_write_trailer+0x54>
    erased_val = flash_area_erased_val(fap);
    70d8:	4630      	mov	r0, r6
    70da:	f7ff fb0e 	bl	66fa <flash_area_erased_val>
    70de:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    70e0:	462a      	mov	r2, r5
    70e2:	4641      	mov	r1, r8
    70e4:	4668      	mov	r0, sp
    70e6:	f7ff fd09 	bl	6afc <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    70ea:	4649      	mov	r1, r9
    70ec:	1b62      	subs	r2, r4, r5
    70ee:	eb0d 0005 	add.w	r0, sp, r5
    70f2:	f7ff fd2e 	bl	6b52 <memset>
    rc = flash_area_write(fap, off, buf, align);
    70f6:	4623      	mov	r3, r4
    70f8:	466a      	mov	r2, sp
    70fa:	4639      	mov	r1, r7
    70fc:	4630      	mov	r0, r6
    70fe:	f7ff fa91 	bl	6624 <flash_area_write>
    if (rc != 0) {
    7102:	3800      	subs	r0, #0
    7104:	bf18      	it	ne
    7106:	2001      	movne	r0, #1
}
    7108:	b003      	add	sp, #12
    710a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    710e:	f04f 30ff 	mov.w	r0, #4294967295
    7112:	e7f9      	b.n	7108 <boot_write_trailer+0x4e>

00007114 <boot_write_trailer_flag>:
{
    7114:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    7116:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    7118:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    711c:	aa01      	add	r2, sp, #4
    711e:	f7ff ffcc 	bl	70ba <boot_write_trailer>
}
    7122:	b003      	add	sp, #12
    7124:	f85d fb04 	ldr.w	pc, [sp], #4

00007128 <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    7128:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    712a:	2201      	movs	r2, #1
    712c:	3918      	subs	r1, #24
    712e:	f7ff bff1 	b.w	7114 <boot_write_trailer_flag>

00007132 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    7132:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    7134:	3a18      	subs	r2, #24
    7136:	f7ff bfa3 	b.w	7080 <boot_read_flag>

0000713a <boot_read_swap_state_by_id>:
{
    713a:	b513      	push	{r0, r1, r4, lr}
    713c:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    713e:	b2c0      	uxtb	r0, r0
    7140:	a901      	add	r1, sp, #4
    7142:	f7fa fdf9 	bl	1d38 <flash_area_open>
    if (rc != 0) {
    7146:	b950      	cbnz	r0, 715e <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    7148:	4621      	mov	r1, r4
    714a:	9801      	ldr	r0, [sp, #4]
    714c:	f7fc fe18 	bl	3d80 <boot_read_swap_state>
    7150:	4604      	mov	r4, r0
    flash_area_close(fap);
    7152:	9801      	ldr	r0, [sp, #4]
    7154:	f7ff fa48 	bl	65e8 <flash_area_close>
}
    7158:	4620      	mov	r0, r4
    715a:	b002      	add	sp, #8
    715c:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    715e:	2401      	movs	r4, #1
    7160:	e7fa      	b.n	7158 <boot_read_swap_state_by_id+0x1e>

00007162 <boot_write_swap_info>:
{
    7162:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    7164:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    7168:	6881      	ldr	r1, [r0, #8]
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    716a:	f88d 2007 	strb.w	r2, [sp, #7]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    716e:	2301      	movs	r3, #1
    7170:	f10d 0207 	add.w	r2, sp, #7
    7174:	3928      	subs	r1, #40	; 0x28
    7176:	f7ff ffa0 	bl	70ba <boot_write_trailer>
}
    717a:	b003      	add	sp, #12
    717c:	f85d fb04 	ldr.w	pc, [sp], #4

00007180 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7180:	4700      	bx	r0

00007182 <nrfx_busy_wait>:
    7182:	f000 b8e3 	b.w	734c <z_impl_k_busy_wait>

00007186 <nrfx_clock_enable>:
{
    7186:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7188:	2005      	movs	r0, #5
    718a:	f7fb fd21 	bl	2bd0 <arch_irq_is_enabled>
    718e:	b920      	cbnz	r0, 719a <nrfx_clock_enable+0x14>
}
    7190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7194:	2005      	movs	r0, #5
    7196:	f7fb bd0b 	b.w	2bb0 <arch_irq_enable>
    719a:	bd08      	pop	{r3, pc}

0000719c <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    719c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    71a0:	4770      	bx	lr

000071a2 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    71a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    71a6:	4770      	bx	lr

000071a8 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    71a8:	f44f 7080 	mov.w	r0, #256	; 0x100
    71ac:	4770      	bx	lr

000071ae <append_to_buffer.isra.0>:
    memcpy(where, &v, sizeof(v));
}

static inline CborError append_to_buffer(CborEncoder *encoder, const void *data, size_t len)
{
    return encoder->writer->write(encoder->writer, data, len);
    71ae:	6803      	ldr	r3, [r0, #0]
    71b0:	4718      	bx	r3

000071b2 <encode_number_no_update>:
{
    return append_to_buffer(encoder, &byte, 1);
}

static inline CborError encode_number_no_update(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
    71b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    71b4:	461d      	mov	r5, r3
    71b6:	4614      	mov	r4, r2
    71b8:	b087      	sub	sp, #28
    v = cbor_htonll(v);
    71ba:	ba13      	rev	r3, r2
    71bc:	ba2a      	rev	r2, r5
    memcpy(where, &v, sizeof(v));
    71be:	4669      	mov	r1, sp
    v = cbor_htonll(v);
    71c0:	e9cd 2300 	strd	r2, r3, [sp]
{
    71c4:	4606      	mov	r6, r0
    memcpy(where, &v, sizeof(v));
    71c6:	2208      	movs	r2, #8
    71c8:	a804      	add	r0, sp, #16
{
    71ca:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    memcpy(where, &v, sizeof(v));
    71ce:	f7ff fc95 	bl	6afc <memcpy>
    uint64_t buf[2];
    uint8_t *const bufend = (uint8_t *)buf + sizeof(buf);
    uint8_t *bufstart = bufend - 1;
    put64(buf + 1, ui);     /* we probably have a bunch of zeros in the beginning */

    if (ui < Value8Bit) {
    71d2:	2d00      	cmp	r5, #0
    71d4:	bf08      	it	eq
    71d6:	2c18      	cmpeq	r4, #24
    71d8:	f10d 0117 	add.w	r1, sp, #23
    71dc:	d20b      	bcs.n	71f6 <encode_number_no_update+0x44>
        *bufstart += shiftedMajorType;
    71de:	f89d 3017 	ldrb.w	r3, [sp, #23]
    71e2:	443b      	add	r3, r7
    71e4:	f88d 3017 	strb.w	r3, [sp, #23]
            ++more;
        bufstart -= (size_t)1 << more;
        *bufstart = shiftedMajorType + Value8Bit + more;
    }

    return append_to_buffer(encoder, bufstart, bufend - bufstart);
    71e8:	ab06      	add	r3, sp, #24
    71ea:	6830      	ldr	r0, [r6, #0]
    71ec:	1a5a      	subs	r2, r3, r1
    71ee:	f7ff ffde 	bl	71ae <append_to_buffer.isra.0>
}
    71f2:	b007      	add	sp, #28
    71f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ui > 0xffU)
    71f6:	2d00      	cmp	r5, #0
    71f8:	bf08      	it	eq
    71fa:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
            ++more;
    71fe:	bf2c      	ite	cs
    7200:	2301      	movcs	r3, #1
    7202:	2300      	movcc	r3, #0
        bufstart -= (size_t)1 << more;
    7204:	2201      	movs	r2, #1
        if (ui > 0xffffU)
    7206:	2d00      	cmp	r5, #0
    7208:	bf08      	it	eq
    720a:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
            ++more;
    720e:	bf28      	it	cs
    7210:	3301      	addcs	r3, #1
        if (ui > 0xffffffffU)
    7212:	2d01      	cmp	r5, #1
    7214:	bf08      	it	eq
    7216:	2c00      	cmpeq	r4, #0
            ++more;
    7218:	bf24      	itt	cs
    721a:	3301      	addcs	r3, #1
    721c:	b2db      	uxtbcs	r3, r3
        bufstart -= (size_t)1 << more;
    721e:	409a      	lsls	r2, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
    7220:	443b      	add	r3, r7
        bufstart -= (size_t)1 << more;
    7222:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
    7224:	3318      	adds	r3, #24
    7226:	700b      	strb	r3, [r1, #0]
    7228:	e7de      	b.n	71e8 <encode_number_no_update+0x36>

0000722a <encode_number>:

static inline CborError encode_number(CborEncoder *encoder, uint64_t ui, uint8_t shiftedMajorType)
{
    722a:	b430      	push	{r4, r5}
    ++encoder->added;
    722c:	6884      	ldr	r4, [r0, #8]
{
    722e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    ++encoder->added;
    7232:	3401      	adds	r4, #1
    7234:	6084      	str	r4, [r0, #8]
    return encode_number_no_update(encoder, ui, shiftedMajorType);
    7236:	9502      	str	r5, [sp, #8]
}
    7238:	bc30      	pop	{r4, r5}
    return encode_number_no_update(encoder, ui, shiftedMajorType);
    723a:	f7ff bfba 	b.w	71b2 <encode_number_no_update>

0000723e <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
    723e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    CborError err;
    container->writer = encoder->writer;
    ++encoder->added;
    container->added = 0;
    7240:	2500      	movs	r5, #0
    ++encoder->added;
    7242:	6884      	ldr	r4, [r0, #8]
    container->writer = encoder->writer;
    7244:	6806      	ldr	r6, [r0, #0]
    ++encoder->added;
    7246:	3401      	adds	r4, #1
    container->writer = encoder->writer;
    7248:	600e      	str	r6, [r1, #0]
    ++encoder->added;
    724a:	6084      	str	r4, [r0, #8]
    container->added = 0;
    724c:	f003 0420 	and.w	r4, r3, #32

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;

    if (length == CborIndefiniteLength) {
    7250:	1c50      	adds	r0, r2, #1
    container->added = 0;
    7252:	608d      	str	r5, [r1, #8]
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
    7254:	60cc      	str	r4, [r1, #12]
    if (length == CborIndefiniteLength) {
    7256:	d10e      	bne.n	7276 <create_container+0x38>
        container->flags |= CborIteratorFlag_UnknownLength;
    7258:	f044 0404 	orr.w	r4, r4, #4
    725c:	60cc      	str	r4, [r1, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
    725e:	331f      	adds	r3, #31
    return append_to_buffer(encoder, &byte, 1);
    7260:	2201      	movs	r2, #1
    7262:	4630      	mov	r0, r6
    7264:	f10d 010f 	add.w	r1, sp, #15
    7268:	f88d 300f 	strb.w	r3, [sp, #15]
    726c:	f7ff ff9f 	bl	71ae <append_to_buffer.isra.0>
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
    7270:	2000      	movs	r0, #0
    7272:	b004      	add	sp, #16
    7274:	bd70      	pop	{r4, r5, r6, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
    7276:	9300      	str	r3, [sp, #0]
    7278:	4608      	mov	r0, r1
    727a:	462b      	mov	r3, r5
    727c:	f7ff ff99 	bl	71b2 <encode_number_no_update>
    7280:	e7f6      	b.n	7270 <create_container+0x32>

00007282 <cbor_encoder_init>:
    encoder->added = 0;
    7282:	2300      	movs	r3, #0
    encoder->writer = writer;
    7284:	6001      	str	r1, [r0, #0]
    encoder->flags = flags;
    7286:	e9c0 3202 	strd	r3, r2, [r0, #8]
}
    728a:	4770      	bx	lr

0000728c <cbor_encode_uint>:
{
    728c:	b507      	push	{r0, r1, r2, lr}
    return encode_number(encoder, value, UnsignedIntegerType << MajorTypeShift);
    728e:	2100      	movs	r1, #0
    7290:	9100      	str	r1, [sp, #0]
    7292:	f7ff ffca 	bl	722a <encode_number>
}
    7296:	b003      	add	sp, #12
    7298:	f85d fb04 	ldr.w	pc, [sp], #4

0000729c <cbor_encode_int>:
{
    729c:	b507      	push	{r0, r1, r2, lr}
    uint64_t ui = value >> 63;              /* extend sign to whole length */
    729e:	17d9      	asrs	r1, r3, #31
    return encode_number(encoder, ui, majorType);
    72a0:	f001 0120 	and.w	r1, r1, #32
    72a4:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    72a8:	9100      	str	r1, [sp, #0]
    72aa:	ea83 73e3 	eor.w	r3, r3, r3, asr #31
    72ae:	f7ff ffbc 	bl	722a <encode_number>
}
    72b2:	b003      	add	sp, #12
    72b4:	f85d fb04 	ldr.w	pc, [sp], #4

000072b8 <cbor_encode_text_string>:
    CborError err = encode_number(encoder, length, shiftedMajorType);
    72b8:	2360      	movs	r3, #96	; 0x60
{
    72ba:	b530      	push	{r4, r5, lr}
    72bc:	4615      	mov	r5, r2
    72be:	b085      	sub	sp, #20
    72c0:	4604      	mov	r4, r0
    CborError err = encode_number(encoder, length, shiftedMajorType);
    72c2:	9300      	str	r3, [sp, #0]
    72c4:	2300      	movs	r3, #0
{
    72c6:	9103      	str	r1, [sp, #12]
    CborError err = encode_number(encoder, length, shiftedMajorType);
    72c8:	f7ff ffaf 	bl	722a <encode_number>
    return append_to_buffer(encoder, string, length);
    72cc:	462a      	mov	r2, r5
    72ce:	9903      	ldr	r1, [sp, #12]
    72d0:	6820      	ldr	r0, [r4, #0]
}
    72d2:	b005      	add	sp, #20
    72d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return append_to_buffer(encoder, string, length);
    72d8:	f7ff bf69 	b.w	71ae <append_to_buffer.isra.0>

000072dc <cbor_encoder_create_array>:
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
    72dc:	2380      	movs	r3, #128	; 0x80
    72de:	f7ff bfae 	b.w	723e <create_container>

000072e2 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
    72e2:	b410      	push	{r4}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
    72e4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    72e8:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
    72ec:	42a3      	cmp	r3, r4
    72ee:	d304      	bcc.n	72fa <cbor_encoder_create_map+0x18>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
    72f0:	23a0      	movs	r3, #160	; 0xa0
}
    72f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
    72f6:	f7ff bfa2 	b.w	723e <create_container>
}
    72fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
    72fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    7302:	4770      	bx	lr

00007304 <cbor_encoder_close_container>:
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
    7304:	68cb      	ldr	r3, [r1, #12]
{
    7306:	b513      	push	{r0, r1, r4, lr}
    encoder->writer = containerEncoder->writer;
    7308:	680c      	ldr	r4, [r1, #0]
    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
    730a:	f013 0304 	ands.w	r3, r3, #4
    encoder->writer = containerEncoder->writer;
    730e:	6004      	str	r4, [r0, #0]
    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
    7310:	d00a      	beq.n	7328 <cbor_encoder_close_container+0x24>
        return append_byte_to_buffer(encoder, BreakByte);
    7312:	23ff      	movs	r3, #255	; 0xff
    return append_to_buffer(encoder, &byte, 1);
    7314:	2201      	movs	r2, #1
    7316:	4620      	mov	r0, r4
    7318:	f10d 0107 	add.w	r1, sp, #7
    731c:	f88d 3007 	strb.w	r3, [sp, #7]
    7320:	f7ff ff45 	bl	71ae <append_to_buffer.isra.0>
    return CborNoError;
}
    7324:	b002      	add	sp, #8
    7326:	bd10      	pop	{r4, pc}
    return CborNoError;
    7328:	4618      	mov	r0, r3
    732a:	e7fb      	b.n	7324 <cbor_encoder_close_container+0x20>

0000732c <z_device_state_init>:
}
    732c:	4770      	bx	lr

0000732e <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
    732e:	68c3      	ldr	r3, [r0, #12]
    7330:	8818      	ldrh	r0, [r3, #0]
    7332:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
    7336:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    733a:	4258      	negs	r0, r3
    733c:	4158      	adcs	r0, r3
    733e:	4770      	bx	lr

00007340 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7340:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    7344:	3800      	subs	r0, #0
    7346:	bf18      	it	ne
    7348:	2001      	movne	r0, #1
    734a:	4770      	bx	lr

0000734c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    734c:	b108      	cbz	r0, 7352 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    734e:	f7fa bcd1 	b.w	1cf4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7352:	4770      	bx	lr

00007354 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    7354:	4770      	bx	lr

00007356 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7356:	4770      	bx	lr

00007358 <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    7358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    735c:	9f06      	ldr	r7, [sp, #24]
    735e:	4604      	mov	r4, r0
    7360:	4615      	mov	r5, r2
    7362:	461e      	mov	r6, r3
    7364:	f7fd faa2 	bl	48ac <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    7368:	b938      	cbnz	r0, 737a <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    736a:	463b      	mov	r3, r7
    736c:	4632      	mov	r2, r6
    736e:	4629      	mov	r1, r5
    7370:	4620      	mov	r0, r4
    7372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7376:	f7fd babf 	b.w	48f8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    737a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000737e <PkaInitAndMutexLock>:
    737e:	460a      	mov	r2, r1
    7380:	2100      	movs	r1, #0
    7382:	f7fd bd45 	b.w	4e10 <PkaInitPka>

00007386 <SaSi_PalMemCopy>:
    7386:	f7ff bbb9 	b.w	6afc <memcpy>

0000738a <SaSi_PalMemSet>:
    738a:	f7ff bbe2 	b.w	6b52 <memset>

0000738e <SaSi_PalMemSetZero>:
    738e:	460a      	mov	r2, r1
    7390:	2100      	movs	r1, #0
    7392:	f7ff bbde 	b.w	6b52 <memset>

00007396 <CRYS_COMMON_ReverseMemcpy32>:
    7396:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    739a:	3804      	subs	r0, #4
    739c:	428a      	cmp	r2, r1
    739e:	d101      	bne.n	73a4 <CRYS_COMMON_ReverseMemcpy32+0xe>
    73a0:	2000      	movs	r0, #0
    73a2:	4770      	bx	lr
    73a4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    73a8:	ba1b      	rev	r3, r3
    73aa:	f840 3f04 	str.w	r3, [r0, #4]!
    73ae:	e7f5      	b.n	739c <CRYS_COMMON_ReverseMemcpy32+0x6>
