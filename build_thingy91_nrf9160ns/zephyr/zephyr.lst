
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_start>:
   1c200:	200212a8 	.word	0x200212a8
   1c204:	000234c9 	.word	0x000234c9
   1c208:	0003a4e3 	.word	0x0003a4e3
   1c20c:	00023529 	.word	0x00023529
   1c210:	00023529 	.word	0x00023529
   1c214:	00023529 	.word	0x00023529
   1c218:	00023529 	.word	0x00023529
   1c21c:	00023529 	.word	0x00023529
	...
   1c22c:	000231ad 	.word	0x000231ad
   1c230:	00023529 	.word	0x00023529
   1c234:	00000000 	.word	0x00000000
   1c238:	00023119 	.word	0x00023119
   1c23c:	00022e1d 	.word	0x00022e1d

0001c240 <_irq_vector_table>:
   1c240:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c250:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c260:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c270:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c280:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c290:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c2a0:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c2b0:	00026cc1 0003ba49 00023489 00023489     .l..I....4...4..
   1c2c0:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c2d0:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c2e0:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c2f0:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c300:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c310:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c320:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c330:	00023489 00023489 00023489 00023489     .4...4...4...4..
   1c340:	00023489                                .4..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	0002abfc 00000001 0001c200 0001c200     ................
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	3c01      	subs	r4, #1
   1c57c:	bf28      	it	cs
   1c57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c582:	d2e9      	bcs.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_dcmpun>:
   1ccec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1ccf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1ccf4:	d102      	bne.n	1ccfc <__aeabi_dcmpun+0x10>
   1ccf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1ccfa:	d10a      	bne.n	1cd12 <__aeabi_dcmpun+0x26>
   1ccfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cd00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cd04:	d102      	bne.n	1cd0c <__aeabi_dcmpun+0x20>
   1cd06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cd0a:	d102      	bne.n	1cd12 <__aeabi_dcmpun+0x26>
   1cd0c:	f04f 0000 	mov.w	r0, #0
   1cd10:	4770      	bx	lr
   1cd12:	f04f 0001 	mov.w	r0, #1
   1cd16:	4770      	bx	lr

0001cd18 <__aeabi_d2iz>:
   1cd18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cd1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd20:	d215      	bcs.n	1cd4e <__aeabi_d2iz+0x36>
   1cd22:	d511      	bpl.n	1cd48 <__aeabi_d2iz+0x30>
   1cd24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd2c:	d912      	bls.n	1cd54 <__aeabi_d2iz+0x3c>
   1cd2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd3e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd42:	bf18      	it	ne
   1cd44:	4240      	negne	r0, r0
   1cd46:	4770      	bx	lr
   1cd48:	f04f 0000 	mov.w	r0, #0
   1cd4c:	4770      	bx	lr
   1cd4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd52:	d105      	bne.n	1cd60 <__aeabi_d2iz+0x48>
   1cd54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd58:	bf08      	it	eq
   1cd5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd5e:	4770      	bx	lr
   1cd60:	f04f 0000 	mov.w	r0, #0
   1cd64:	4770      	bx	lr
   1cd66:	bf00      	nop

0001cd68 <__aeabi_d2f>:
   1cd68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cd6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cd70:	bf24      	itt	cs
   1cd72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cd76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cd7a:	d90d      	bls.n	1cd98 <__aeabi_d2f+0x30>
   1cd7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cd80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cd84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cd88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cd8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cd90:	bf08      	it	eq
   1cd92:	f020 0001 	biceq.w	r0, r0, #1
   1cd96:	4770      	bx	lr
   1cd98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cd9c:	d121      	bne.n	1cde2 <__aeabi_d2f+0x7a>
   1cd9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cda2:	bfbc      	itt	lt
   1cda4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cda8:	4770      	bxlt	lr
   1cdaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cdae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1cdb2:	f1c2 0218 	rsb	r2, r2, #24
   1cdb6:	f1c2 0c20 	rsb	ip, r2, #32
   1cdba:	fa10 f30c 	lsls.w	r3, r0, ip
   1cdbe:	fa20 f002 	lsr.w	r0, r0, r2
   1cdc2:	bf18      	it	ne
   1cdc4:	f040 0001 	orrne.w	r0, r0, #1
   1cdc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cdcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1cdd0:	fa03 fc0c 	lsl.w	ip, r3, ip
   1cdd4:	ea40 000c 	orr.w	r0, r0, ip
   1cdd8:	fa23 f302 	lsr.w	r3, r3, r2
   1cddc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1cde0:	e7cc      	b.n	1cd7c <__aeabi_d2f+0x14>
   1cde2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1cde6:	d107      	bne.n	1cdf8 <__aeabi_d2f+0x90>
   1cde8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1cdec:	bf1e      	ittt	ne
   1cdee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1cdf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1cdf6:	4770      	bxne	lr
   1cdf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1cdfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ce00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce04:	4770      	bx	lr
   1ce06:	bf00      	nop

0001ce08 <__aeabi_ldivmod>:
   1ce08:	b97b      	cbnz	r3, 1ce2a <__aeabi_ldivmod+0x22>
   1ce0a:	b972      	cbnz	r2, 1ce2a <__aeabi_ldivmod+0x22>
   1ce0c:	2900      	cmp	r1, #0
   1ce0e:	bfbe      	ittt	lt
   1ce10:	2000      	movlt	r0, #0
   1ce12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1ce16:	e006      	blt.n	1ce26 <__aeabi_ldivmod+0x1e>
   1ce18:	bf08      	it	eq
   1ce1a:	2800      	cmpeq	r0, #0
   1ce1c:	bf1c      	itt	ne
   1ce1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1ce22:	f04f 30ff 	movne.w	r0, #4294967295
   1ce26:	f000 b9ed 	b.w	1d204 <__aeabi_idiv0>
   1ce2a:	f1ad 0c08 	sub.w	ip, sp, #8
   1ce2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ce32:	2900      	cmp	r1, #0
   1ce34:	db09      	blt.n	1ce4a <__aeabi_ldivmod+0x42>
   1ce36:	2b00      	cmp	r3, #0
   1ce38:	db1a      	blt.n	1ce70 <__aeabi_ldivmod+0x68>
   1ce3a:	f000 f883 	bl	1cf44 <__udivmoddi4>
   1ce3e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce46:	b004      	add	sp, #16
   1ce48:	4770      	bx	lr
   1ce4a:	4240      	negs	r0, r0
   1ce4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce50:	2b00      	cmp	r3, #0
   1ce52:	db1b      	blt.n	1ce8c <__aeabi_ldivmod+0x84>
   1ce54:	f000 f876 	bl	1cf44 <__udivmoddi4>
   1ce58:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce60:	b004      	add	sp, #16
   1ce62:	4240      	negs	r0, r0
   1ce64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce68:	4252      	negs	r2, r2
   1ce6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce6e:	4770      	bx	lr
   1ce70:	4252      	negs	r2, r2
   1ce72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce76:	f000 f865 	bl	1cf44 <__udivmoddi4>
   1ce7a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce82:	b004      	add	sp, #16
   1ce84:	4240      	negs	r0, r0
   1ce86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce8a:	4770      	bx	lr
   1ce8c:	4252      	negs	r2, r2
   1ce8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce92:	f000 f857 	bl	1cf44 <__udivmoddi4>
   1ce96:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce9e:	b004      	add	sp, #16
   1cea0:	4252      	negs	r2, r2
   1cea2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cea6:	4770      	bx	lr

0001cea8 <__aeabi_uldivmod>:
   1cea8:	b953      	cbnz	r3, 1cec0 <__aeabi_uldivmod+0x18>
   1ceaa:	b94a      	cbnz	r2, 1cec0 <__aeabi_uldivmod+0x18>
   1ceac:	2900      	cmp	r1, #0
   1ceae:	bf08      	it	eq
   1ceb0:	2800      	cmpeq	r0, #0
   1ceb2:	bf1c      	itt	ne
   1ceb4:	f04f 31ff 	movne.w	r1, #4294967295
   1ceb8:	f04f 30ff 	movne.w	r0, #4294967295
   1cebc:	f000 b9a2 	b.w	1d204 <__aeabi_idiv0>
   1cec0:	f1ad 0c08 	sub.w	ip, sp, #8
   1cec4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cec8:	f000 f83c 	bl	1cf44 <__udivmoddi4>
   1cecc:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ced0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ced4:	b004      	add	sp, #16
   1ced6:	4770      	bx	lr

0001ced8 <__aeabi_d2lz>:
   1ced8:	b538      	push	{r3, r4, r5, lr}
   1ceda:	2200      	movs	r2, #0
   1cedc:	2300      	movs	r3, #0
   1cede:	4604      	mov	r4, r0
   1cee0:	460d      	mov	r5, r1
   1cee2:	f7ff fedb 	bl	1cc9c <__aeabi_dcmplt>
   1cee6:	b928      	cbnz	r0, 1cef4 <__aeabi_d2lz+0x1c>
   1cee8:	4620      	mov	r0, r4
   1ceea:	4629      	mov	r1, r5
   1ceec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cef0:	f000 b80a 	b.w	1cf08 <__aeabi_d2ulz>
   1cef4:	4620      	mov	r0, r4
   1cef6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1cefa:	f000 f805 	bl	1cf08 <__aeabi_d2ulz>
   1cefe:	4240      	negs	r0, r0
   1cf00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cf04:	bd38      	pop	{r3, r4, r5, pc}
   1cf06:	bf00      	nop

0001cf08 <__aeabi_d2ulz>:
   1cf08:	b5d0      	push	{r4, r6, r7, lr}
   1cf0a:	2200      	movs	r2, #0
   1cf0c:	4b0b      	ldr	r3, [pc, #44]	; (1cf3c <__aeabi_d2ulz+0x34>)
   1cf0e:	4606      	mov	r6, r0
   1cf10:	460f      	mov	r7, r1
   1cf12:	f7ff fc51 	bl	1c7b8 <__aeabi_dmul>
   1cf16:	f000 f977 	bl	1d208 <__aeabi_d2uiz>
   1cf1a:	4604      	mov	r4, r0
   1cf1c:	f7ff fbd2 	bl	1c6c4 <__aeabi_ui2d>
   1cf20:	2200      	movs	r2, #0
   1cf22:	4b07      	ldr	r3, [pc, #28]	; (1cf40 <__aeabi_d2ulz+0x38>)
   1cf24:	f7ff fc48 	bl	1c7b8 <__aeabi_dmul>
   1cf28:	4602      	mov	r2, r0
   1cf2a:	460b      	mov	r3, r1
   1cf2c:	4630      	mov	r0, r6
   1cf2e:	4639      	mov	r1, r7
   1cf30:	f7ff fa8a 	bl	1c448 <__aeabi_dsub>
   1cf34:	f000 f968 	bl	1d208 <__aeabi_d2uiz>
   1cf38:	4621      	mov	r1, r4
   1cf3a:	bdd0      	pop	{r4, r6, r7, pc}
   1cf3c:	3df00000 	.word	0x3df00000
   1cf40:	41f00000 	.word	0x41f00000

0001cf44 <__udivmoddi4>:
   1cf44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf48:	9d08      	ldr	r5, [sp, #32]
   1cf4a:	4604      	mov	r4, r0
   1cf4c:	4688      	mov	r8, r1
   1cf4e:	2b00      	cmp	r3, #0
   1cf50:	d17d      	bne.n	1d04e <__udivmoddi4+0x10a>
   1cf52:	428a      	cmp	r2, r1
   1cf54:	4617      	mov	r7, r2
   1cf56:	d93f      	bls.n	1cfd8 <__udivmoddi4+0x94>
   1cf58:	fab2 f282 	clz	r2, r2
   1cf5c:	b142      	cbz	r2, 1cf70 <__udivmoddi4+0x2c>
   1cf5e:	f1c2 0020 	rsb	r0, r2, #32
   1cf62:	4091      	lsls	r1, r2
   1cf64:	4097      	lsls	r7, r2
   1cf66:	fa24 f000 	lsr.w	r0, r4, r0
   1cf6a:	4094      	lsls	r4, r2
   1cf6c:	ea40 0801 	orr.w	r8, r0, r1
   1cf70:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1cf74:	0c23      	lsrs	r3, r4, #16
   1cf76:	fa1f fe87 	uxth.w	lr, r7
   1cf7a:	fbb8 f6fc 	udiv	r6, r8, ip
   1cf7e:	fb0c 8116 	mls	r1, ip, r6, r8
   1cf82:	fb06 f00e 	mul.w	r0, r6, lr
   1cf86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1cf8a:	4298      	cmp	r0, r3
   1cf8c:	d905      	bls.n	1cf9a <__udivmoddi4+0x56>
   1cf8e:	18fb      	adds	r3, r7, r3
   1cf90:	d202      	bcs.n	1cf98 <__udivmoddi4+0x54>
   1cf92:	4298      	cmp	r0, r3
   1cf94:	f200 8124 	bhi.w	1d1e0 <__udivmoddi4+0x29c>
   1cf98:	3e01      	subs	r6, #1
   1cf9a:	1a19      	subs	r1, r3, r0
   1cf9c:	b2a3      	uxth	r3, r4
   1cf9e:	fbb1 f0fc 	udiv	r0, r1, ip
   1cfa2:	fb0c 1110 	mls	r1, ip, r0, r1
   1cfa6:	fb00 fe0e 	mul.w	lr, r0, lr
   1cfaa:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cfae:	45a6      	cmp	lr, r4
   1cfb0:	d905      	bls.n	1cfbe <__udivmoddi4+0x7a>
   1cfb2:	193c      	adds	r4, r7, r4
   1cfb4:	d202      	bcs.n	1cfbc <__udivmoddi4+0x78>
   1cfb6:	45a6      	cmp	lr, r4
   1cfb8:	f200 810f 	bhi.w	1d1da <__udivmoddi4+0x296>
   1cfbc:	3801      	subs	r0, #1
   1cfbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1cfc2:	eba4 040e 	sub.w	r4, r4, lr
   1cfc6:	2600      	movs	r6, #0
   1cfc8:	b11d      	cbz	r5, 1cfd2 <__udivmoddi4+0x8e>
   1cfca:	40d4      	lsrs	r4, r2
   1cfcc:	2300      	movs	r3, #0
   1cfce:	e9c5 4300 	strd	r4, r3, [r5]
   1cfd2:	4631      	mov	r1, r6
   1cfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cfd8:	b902      	cbnz	r2, 1cfdc <__udivmoddi4+0x98>
   1cfda:	deff      	udf	#255	; 0xff
   1cfdc:	fab2 f282 	clz	r2, r2
   1cfe0:	2a00      	cmp	r2, #0
   1cfe2:	d150      	bne.n	1d086 <__udivmoddi4+0x142>
   1cfe4:	1bcb      	subs	r3, r1, r7
   1cfe6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1cfea:	fa1f f887 	uxth.w	r8, r7
   1cfee:	2601      	movs	r6, #1
   1cff0:	0c21      	lsrs	r1, r4, #16
   1cff2:	fbb3 fcfe 	udiv	ip, r3, lr
   1cff6:	fb0e 301c 	mls	r0, lr, ip, r3
   1cffa:	460b      	mov	r3, r1
   1cffc:	fb08 f90c 	mul.w	r9, r8, ip
   1d000:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1d004:	4589      	cmp	r9, r1
   1d006:	d90a      	bls.n	1d01e <__udivmoddi4+0xda>
   1d008:	1879      	adds	r1, r7, r1
   1d00a:	bf2c      	ite	cs
   1d00c:	2301      	movcs	r3, #1
   1d00e:	2300      	movcc	r3, #0
   1d010:	4589      	cmp	r9, r1
   1d012:	d902      	bls.n	1d01a <__udivmoddi4+0xd6>
   1d014:	2b00      	cmp	r3, #0
   1d016:	f000 80d9 	beq.w	1d1cc <__udivmoddi4+0x288>
   1d01a:	f10c 3cff 	add.w	ip, ip, #4294967295
   1d01e:	eba1 0109 	sub.w	r1, r1, r9
   1d022:	b2a3      	uxth	r3, r4
   1d024:	fbb1 f0fe 	udiv	r0, r1, lr
   1d028:	fb0e 1110 	mls	r1, lr, r0, r1
   1d02c:	fb08 f800 	mul.w	r8, r8, r0
   1d030:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1d034:	45a0      	cmp	r8, r4
   1d036:	d905      	bls.n	1d044 <__udivmoddi4+0x100>
   1d038:	193c      	adds	r4, r7, r4
   1d03a:	d202      	bcs.n	1d042 <__udivmoddi4+0xfe>
   1d03c:	45a0      	cmp	r8, r4
   1d03e:	f200 80c9 	bhi.w	1d1d4 <__udivmoddi4+0x290>
   1d042:	3801      	subs	r0, #1
   1d044:	eba4 0408 	sub.w	r4, r4, r8
   1d048:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1d04c:	e7bc      	b.n	1cfc8 <__udivmoddi4+0x84>
   1d04e:	428b      	cmp	r3, r1
   1d050:	d909      	bls.n	1d066 <__udivmoddi4+0x122>
   1d052:	2d00      	cmp	r5, #0
   1d054:	f000 80b1 	beq.w	1d1ba <__udivmoddi4+0x276>
   1d058:	2600      	movs	r6, #0
   1d05a:	e9c5 0100 	strd	r0, r1, [r5]
   1d05e:	4630      	mov	r0, r6
   1d060:	4631      	mov	r1, r6
   1d062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d066:	fab3 f683 	clz	r6, r3
   1d06a:	2e00      	cmp	r6, #0
   1d06c:	d146      	bne.n	1d0fc <__udivmoddi4+0x1b8>
   1d06e:	428b      	cmp	r3, r1
   1d070:	f0c0 80a6 	bcc.w	1d1c0 <__udivmoddi4+0x27c>
   1d074:	4282      	cmp	r2, r0
   1d076:	f240 80a3 	bls.w	1d1c0 <__udivmoddi4+0x27c>
   1d07a:	4630      	mov	r0, r6
   1d07c:	2d00      	cmp	r5, #0
   1d07e:	d0a8      	beq.n	1cfd2 <__udivmoddi4+0x8e>
   1d080:	e9c5 4800 	strd	r4, r8, [r5]
   1d084:	e7a5      	b.n	1cfd2 <__udivmoddi4+0x8e>
   1d086:	4097      	lsls	r7, r2
   1d088:	f1c2 0320 	rsb	r3, r2, #32
   1d08c:	fa01 f002 	lsl.w	r0, r1, r2
   1d090:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1d094:	40d9      	lsrs	r1, r3
   1d096:	fa24 f303 	lsr.w	r3, r4, r3
   1d09a:	fa1f f887 	uxth.w	r8, r7
   1d09e:	4094      	lsls	r4, r2
   1d0a0:	4303      	orrs	r3, r0
   1d0a2:	fbb1 f0fe 	udiv	r0, r1, lr
   1d0a6:	0c1e      	lsrs	r6, r3, #16
   1d0a8:	fb0e 1110 	mls	r1, lr, r0, r1
   1d0ac:	fb00 fc08 	mul.w	ip, r0, r8
   1d0b0:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   1d0b4:	458c      	cmp	ip, r1
   1d0b6:	d909      	bls.n	1d0cc <__udivmoddi4+0x188>
   1d0b8:	1879      	adds	r1, r7, r1
   1d0ba:	bf2c      	ite	cs
   1d0bc:	2601      	movcs	r6, #1
   1d0be:	2600      	movcc	r6, #0
   1d0c0:	458c      	cmp	ip, r1
   1d0c2:	d902      	bls.n	1d0ca <__udivmoddi4+0x186>
   1d0c4:	2e00      	cmp	r6, #0
   1d0c6:	f000 8093 	beq.w	1d1f0 <__udivmoddi4+0x2ac>
   1d0ca:	3801      	subs	r0, #1
   1d0cc:	eba1 010c 	sub.w	r1, r1, ip
   1d0d0:	b29b      	uxth	r3, r3
   1d0d2:	fbb1 f6fe 	udiv	r6, r1, lr
   1d0d6:	fb0e 1116 	mls	r1, lr, r6, r1
   1d0da:	fb06 fc08 	mul.w	ip, r6, r8
   1d0de:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1d0e2:	458c      	cmp	ip, r1
   1d0e4:	d905      	bls.n	1d0f2 <__udivmoddi4+0x1ae>
   1d0e6:	1879      	adds	r1, r7, r1
   1d0e8:	d202      	bcs.n	1d0f0 <__udivmoddi4+0x1ac>
   1d0ea:	458c      	cmp	ip, r1
   1d0ec:	f200 8087 	bhi.w	1d1fe <__udivmoddi4+0x2ba>
   1d0f0:	3e01      	subs	r6, #1
   1d0f2:	eba1 030c 	sub.w	r3, r1, ip
   1d0f6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   1d0fa:	e779      	b.n	1cff0 <__udivmoddi4+0xac>
   1d0fc:	f1c6 0720 	rsb	r7, r6, #32
   1d100:	fa03 f406 	lsl.w	r4, r3, r6
   1d104:	fa02 fc06 	lsl.w	ip, r2, r6
   1d108:	fa01 fe06 	lsl.w	lr, r1, r6
   1d10c:	40fa      	lsrs	r2, r7
   1d10e:	fa20 f807 	lsr.w	r8, r0, r7
   1d112:	40f9      	lsrs	r1, r7
   1d114:	fa00 f306 	lsl.w	r3, r0, r6
   1d118:	4322      	orrs	r2, r4
   1d11a:	ea48 040e 	orr.w	r4, r8, lr
   1d11e:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1d122:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   1d126:	fa1f f982 	uxth.w	r9, r2
   1d12a:	fbb1 faf8 	udiv	sl, r1, r8
   1d12e:	fb08 111a 	mls	r1, r8, sl, r1
   1d132:	fb0a f009 	mul.w	r0, sl, r9
   1d136:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   1d13a:	4570      	cmp	r0, lr
   1d13c:	d90a      	bls.n	1d154 <__udivmoddi4+0x210>
   1d13e:	eb12 0e0e 	adds.w	lr, r2, lr
   1d142:	bf2c      	ite	cs
   1d144:	2101      	movcs	r1, #1
   1d146:	2100      	movcc	r1, #0
   1d148:	4570      	cmp	r0, lr
   1d14a:	d901      	bls.n	1d150 <__udivmoddi4+0x20c>
   1d14c:	2900      	cmp	r1, #0
   1d14e:	d052      	beq.n	1d1f6 <__udivmoddi4+0x2b2>
   1d150:	f10a 3aff 	add.w	sl, sl, #4294967295
   1d154:	ebae 0e00 	sub.w	lr, lr, r0
   1d158:	b2a4      	uxth	r4, r4
   1d15a:	fbbe f0f8 	udiv	r0, lr, r8
   1d15e:	fb08 ee10 	mls	lr, r8, r0, lr
   1d162:	fb00 f909 	mul.w	r9, r0, r9
   1d166:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   1d16a:	45f1      	cmp	r9, lr
   1d16c:	d905      	bls.n	1d17a <__udivmoddi4+0x236>
   1d16e:	eb12 0e0e 	adds.w	lr, r2, lr
   1d172:	d201      	bcs.n	1d178 <__udivmoddi4+0x234>
   1d174:	45f1      	cmp	r9, lr
   1d176:	d838      	bhi.n	1d1ea <__udivmoddi4+0x2a6>
   1d178:	3801      	subs	r0, #1
   1d17a:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1d17e:	ebae 0e09 	sub.w	lr, lr, r9
   1d182:	fba0 890c 	umull	r8, r9, r0, ip
   1d186:	45ce      	cmp	lr, r9
   1d188:	4641      	mov	r1, r8
   1d18a:	464c      	mov	r4, r9
   1d18c:	d302      	bcc.n	1d194 <__udivmoddi4+0x250>
   1d18e:	d106      	bne.n	1d19e <__udivmoddi4+0x25a>
   1d190:	4543      	cmp	r3, r8
   1d192:	d204      	bcs.n	1d19e <__udivmoddi4+0x25a>
   1d194:	3801      	subs	r0, #1
   1d196:	ebb8 010c 	subs.w	r1, r8, ip
   1d19a:	eb69 0402 	sbc.w	r4, r9, r2
   1d19e:	b315      	cbz	r5, 1d1e6 <__udivmoddi4+0x2a2>
   1d1a0:	1a5a      	subs	r2, r3, r1
   1d1a2:	eb6e 0e04 	sbc.w	lr, lr, r4
   1d1a6:	40f2      	lsrs	r2, r6
   1d1a8:	fa0e f707 	lsl.w	r7, lr, r7
   1d1ac:	fa2e f306 	lsr.w	r3, lr, r6
   1d1b0:	2600      	movs	r6, #0
   1d1b2:	4317      	orrs	r7, r2
   1d1b4:	e9c5 7300 	strd	r7, r3, [r5]
   1d1b8:	e70b      	b.n	1cfd2 <__udivmoddi4+0x8e>
   1d1ba:	462e      	mov	r6, r5
   1d1bc:	4628      	mov	r0, r5
   1d1be:	e708      	b.n	1cfd2 <__udivmoddi4+0x8e>
   1d1c0:	1a84      	subs	r4, r0, r2
   1d1c2:	eb61 0103 	sbc.w	r1, r1, r3
   1d1c6:	2001      	movs	r0, #1
   1d1c8:	4688      	mov	r8, r1
   1d1ca:	e757      	b.n	1d07c <__udivmoddi4+0x138>
   1d1cc:	f1ac 0c02 	sub.w	ip, ip, #2
   1d1d0:	4439      	add	r1, r7
   1d1d2:	e724      	b.n	1d01e <__udivmoddi4+0xda>
   1d1d4:	3802      	subs	r0, #2
   1d1d6:	443c      	add	r4, r7
   1d1d8:	e734      	b.n	1d044 <__udivmoddi4+0x100>
   1d1da:	3802      	subs	r0, #2
   1d1dc:	443c      	add	r4, r7
   1d1de:	e6ee      	b.n	1cfbe <__udivmoddi4+0x7a>
   1d1e0:	3e02      	subs	r6, #2
   1d1e2:	443b      	add	r3, r7
   1d1e4:	e6d9      	b.n	1cf9a <__udivmoddi4+0x56>
   1d1e6:	462e      	mov	r6, r5
   1d1e8:	e6f3      	b.n	1cfd2 <__udivmoddi4+0x8e>
   1d1ea:	3802      	subs	r0, #2
   1d1ec:	4496      	add	lr, r2
   1d1ee:	e7c4      	b.n	1d17a <__udivmoddi4+0x236>
   1d1f0:	3802      	subs	r0, #2
   1d1f2:	4439      	add	r1, r7
   1d1f4:	e76a      	b.n	1d0cc <__udivmoddi4+0x188>
   1d1f6:	f1aa 0a02 	sub.w	sl, sl, #2
   1d1fa:	4496      	add	lr, r2
   1d1fc:	e7aa      	b.n	1d154 <__udivmoddi4+0x210>
   1d1fe:	3e02      	subs	r6, #2
   1d200:	4439      	add	r1, r7
   1d202:	e776      	b.n	1d0f2 <__udivmoddi4+0x1ae>

0001d204 <__aeabi_idiv0>:
   1d204:	4770      	bx	lr
   1d206:	bf00      	nop

0001d208 <__aeabi_d2uiz>:
   1d208:	004a      	lsls	r2, r1, #1
   1d20a:	d211      	bcs.n	1d230 <__aeabi_d2uiz+0x28>
   1d20c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1d210:	d211      	bcs.n	1d236 <__aeabi_d2uiz+0x2e>
   1d212:	d50d      	bpl.n	1d230 <__aeabi_d2uiz+0x28>
   1d214:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1d218:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1d21c:	d40e      	bmi.n	1d23c <__aeabi_d2uiz+0x34>
   1d21e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1d222:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d226:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1d22a:	fa23 f002 	lsr.w	r0, r3, r2
   1d22e:	4770      	bx	lr
   1d230:	f04f 0000 	mov.w	r0, #0
   1d234:	4770      	bx	lr
   1d236:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1d23a:	d102      	bne.n	1d242 <__aeabi_d2uiz+0x3a>
   1d23c:	f04f 30ff 	mov.w	r0, #4294967295
   1d240:	4770      	bx	lr
   1d242:	f04f 0000 	mov.w	r0, #0
   1d246:	4770      	bx	lr

0001d248 <strcmp>:
   1d248:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d24c:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d250:	2a01      	cmp	r2, #1
   1d252:	bf28      	it	cs
   1d254:	429a      	cmpcs	r2, r3
   1d256:	d0f7      	beq.n	1d248 <strcmp>
   1d258:	1ad0      	subs	r0, r2, r3
   1d25a:	4770      	bx	lr

0001d25c <strlen>:
   1d25c:	4603      	mov	r3, r0
   1d25e:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d262:	2a00      	cmp	r2, #0
   1d264:	d1fb      	bne.n	1d25e <strlen+0x2>
   1d266:	1a18      	subs	r0, r3, r0
   1d268:	3801      	subs	r0, #1
   1d26a:	4770      	bx	lr
   1d26c:	0000      	movs	r0, r0
	...

0001d270 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   1d270:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   1d274:	4604      	mov	r4, r0
   1d276:	b09a      	sub	sp, #104	; 0x68
   1d278:	460f      	mov	r7, r1
   1d27a:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   1d27c:	2100      	movs	r1, #0
   1d27e:	2230      	movs	r2, #48	; 0x30
   1d280:	a802      	add	r0, sp, #8
   1d282:	f020 fe92 	bl	3dfaa <memset>
	int ret = 0;

	if (!ctx || !time) {
   1d286:	2c00      	cmp	r4, #0
   1d288:	f000 8087 	beq.w	1d39a <sntp_query+0x12a>
   1d28c:	2e00      	cmp	r6, #0
   1d28e:	f000 8084 	beq.w	1d39a <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   1d292:	231b      	movs	r3, #27
   1d294:	f88d 3008 	strb.w	r3, [sp, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1d298:	f020 fdb2 	bl	3de00 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1d29c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d2a0:	2500      	movs	r5, #0
   1d2a2:	fba0 bc03 	umull	fp, ip, r0, r3
   1d2a6:	fb03 cc01 	mla	ip, r3, r1, ip
   1d2aa:	ea4f 30db 	mov.w	r0, fp, lsr #15
	return time / MSEC_PER_SEC;
   1d2ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d2b2:	2300      	movs	r3, #0
   1d2b4:	4629      	mov	r1, r5
   1d2b6:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
   1d2ba:	f7ff fdf5 	bl	1cea8 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1d2be:	4a3c      	ldr	r2, [pc, #240]	; (1d3b0 <sntp_query+0x140>)
   1d2c0:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1d2c2:	0a13      	lsrs	r3, r2, #8
   1d2c4:	0211      	lsls	r1, r2, #8
   1d2c6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1d2ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1d2ce:	430b      	orrs	r3, r1
   1d2d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1d2d4:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   1d2d8:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1d2da:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1d2dc:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1d2de:	2230      	movs	r2, #48	; 0x30
   1d2e0:	462b      	mov	r3, r5
   1d2e2:	e9cd 5500 	strd	r5, r5, [sp]
   1d2e6:	a902      	add	r1, sp, #8
   1d2e8:	f01c fdab 	bl	39e42 <z_impl_zsock_sendto>
	if (ret < 0) {
   1d2ec:	2800      	cmp	r0, #0
   1d2ee:	db0f      	blt.n	1d310 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   1d2f0:	4629      	mov	r1, r5
   1d2f2:	2230      	movs	r2, #48	; 0x30
   1d2f4:	a80e      	add	r0, sp, #56	; 0x38
   1d2f6:	f020 fe58 	bl	3dfaa <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   1d2fa:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   1d2fc:	463a      	mov	r2, r7
   1d2fe:	4620      	mov	r0, r4
   1d300:	f004 fa32 	bl	21768 <z_impl_zsock_poll>
	if (status < 0) {
   1d304:	42a8      	cmp	r0, r5
   1d306:	da06      	bge.n	1d316 <sntp_query+0xa6>
		return -errno;
   1d308:	f01d f94d 	bl	3a5a6 <__errno>
   1d30c:	6800      	ldr	r0, [r0, #0]
   1d30e:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   1d310:	b01a      	add	sp, #104	; 0x68
   1d312:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	if (status == 0) {
   1d316:	d037      	beq.n	1d388 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   1d318:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1d31a:	2230      	movs	r2, #48	; 0x30
   1d31c:	462b      	mov	r3, r5
   1d31e:	e9cd 5500 	strd	r5, r5, [sp]
   1d322:	a90e      	add	r1, sp, #56	; 0x38
   1d324:	f01c fde4 	bl	39ef0 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   1d328:	2800      	cmp	r0, #0
   1d32a:	dbed      	blt.n	1d308 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   1d32c:	2830      	cmp	r0, #48	; 0x30
   1d32e:	d12e      	bne.n	1d38e <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   1d330:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1d332:	6922      	ldr	r2, [r4, #16]
   1d334:	ba1b      	rev	r3, r3
   1d336:	429a      	cmp	r2, r3
   1d338:	d002      	beq.n	1d340 <sntp_query+0xd0>
		return -EINVAL;
   1d33a:	f06f 0015 	mvn.w	r0, #21
   1d33e:	e7e7      	b.n	1d310 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   1d340:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d344:	f003 0307 	and.w	r3, r3, #7
   1d348:	2b04      	cmp	r3, #4
   1d34a:	d1f6      	bne.n	1d33a <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   1d34c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d350:	b303      	cbz	r3, 1d394 <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   1d352:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1d354:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1d356:	ba1b      	rev	r3, r3
   1d358:	ba12      	rev	r2, r2
   1d35a:	ea53 0102 	orrs.w	r1, r3, r2
   1d35e:	d0ec      	beq.n	1d33a <sntp_query+0xca>
	if (ts & 0x80000000) {
   1d360:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   1d362:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   1d364:	da0c      	bge.n	1d380 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   1d366:	4a13      	ldr	r2, [pc, #76]	; (1d3b4 <sntp_query+0x144>)
   1d368:	4293      	cmp	r3, r2
   1d36a:	d9e6      	bls.n	1d33a <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   1d36c:	a10c      	add	r1, pc, #48	; (adr r1, 1d3a0 <sntp_query+0x130>)
   1d36e:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1d372:	18c0      	adds	r0, r0, r3
   1d374:	f141 0100 	adc.w	r1, r1, #0
   1d378:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
   1d37c:	2000      	movs	r0, #0
   1d37e:	e7c7      	b.n	1d310 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1d380:	a109      	add	r1, pc, #36	; (adr r1, 1d3a8 <sntp_query+0x138>)
   1d382:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d386:	e7f4      	b.n	1d372 <sntp_query+0x102>
		return -ETIMEDOUT;
   1d388:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1d38c:	e7c0      	b.n	1d310 <sntp_query+0xa0>
		return -EMSGSIZE;
   1d38e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1d392:	e7bd      	b.n	1d310 <sntp_query+0xa0>
		return -EBUSY;
   1d394:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   1d398:	e7ba      	b.n	1d310 <sntp_query+0xa0>
		return -EFAULT;
   1d39a:	f06f 000d 	mvn.w	r0, #13
   1d39e:	e7b7      	b.n	1d310 <sntp_query+0xa0>
   1d3a0:	7c558180 	.word	0x7c558180
   1d3a4:	ffffffff 	.word	0xffffffff
   1d3a8:	7c558180 	.word	0x7c558180
   1d3ac:	00000000 	.word	0x00000000
   1d3b0:	83aa7e80 	.word	0x83aa7e80
   1d3b4:	83aa7e7f 	.word	0x83aa7e7f

0001d3b8 <adxl362_attr_set>:

static int adxl362_attr_set(const struct device *dev,
			    enum sensor_channel chan,
			    enum sensor_attribute attr,
			    const struct sensor_value *val)
{
   1d3b8:	b570      	push	{r4, r5, r6, lr}
   1d3ba:	4606      	mov	r6, r0
	switch (attr) {
   1d3bc:	1e50      	subs	r0, r2, #1
   1d3be:	2801      	cmp	r0, #1
   1d3c0:	d812      	bhi.n	1d3e8 <adxl362_attr_set+0x30>
	if (chan != SENSOR_CHAN_ACCEL_X &&
   1d3c2:	2902      	cmp	r1, #2
	uint16_t threshold = val->val1;
   1d3c4:	8818      	ldrh	r0, [r3, #0]
	if (chan != SENSOR_CHAN_ACCEL_X &&
   1d3c6:	d865      	bhi.n	1d494 <adxl362_attr_set+0xdc>
	if (threshold > 2047) {
   1d3c8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1d3cc:	d262      	bcs.n	1d494 <adxl362_attr_set+0xdc>
		reg = ADXL362_REG_THRESH_INACT_L;
   1d3ce:	2a02      	cmp	r2, #2
	ret = adxl362_set_reg(dev, (threshold & 0x7FF), reg, 2);
   1d3d0:	4601      	mov	r1, r0
   1d3d2:	f04f 0302 	mov.w	r3, #2
   1d3d6:	6930      	ldr	r0, [r6, #16]
   1d3d8:	bf08      	it	eq
   1d3da:	2220      	moveq	r2, #32
		LOG_DBG("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
   1d3dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = adxl362_set_reg(dev, (threshold & 0x7FF), reg, 2);
   1d3e0:	bf18      	it	ne
   1d3e2:	2223      	movne	r2, #35	; 0x23
   1d3e4:	f01e b814 	b.w	3b410 <adxl362_set_reg.isra.0>
	switch (chan) {
   1d3e8:	2903      	cmp	r1, #3
   1d3ea:	d850      	bhi.n	1d48e <adxl362_attr_set+0xd6>
	switch (attr) {
   1d3ec:	b392      	cbz	r2, 1d454 <adxl362_attr_set+0x9c>
   1d3ee:	2a06      	cmp	r2, #6
   1d3f0:	d14d      	bne.n	1d48e <adxl362_attr_set+0xd6>
 *
 * @return The converted value, in Gs.
 */
static inline int32_t sensor_ms2_to_g(const struct sensor_value *ms2)
{
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
   1d3f2:	685c      	ldr	r4, [r3, #4]
   1d3f4:	681a      	ldr	r2, [r3, #0]
   1d3f6:	4b2c      	ldr	r3, [pc, #176]	; (1d4a8 <adxl362_attr_set+0xf0>)
   1d3f8:	17e5      	asrs	r5, r4, #31
   1d3fa:	fbc3 4502 	smlal	r4, r5, r3, r2

	if (micro_ms2 > 0) {
   1d3fe:	2c01      	cmp	r4, #1
   1d400:	f175 0300 	sbcs.w	r3, r5, #0
   1d404:	db1a      	blt.n	1d43c <adxl362_attr_set+0x84>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
   1d406:	a326      	add	r3, pc, #152	; (adr r3, 1d4a0 <adxl362_attr_set+0xe8>)
   1d408:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d40c:	2100      	movs	r1, #0
   1d40e:	4827      	ldr	r0, [pc, #156]	; (1d4ac <adxl362_attr_set+0xf4>)
   1d410:	1820      	adds	r0, r4, r0
   1d412:	eb45 0101 	adc.w	r1, r5, r1
	} else {
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
   1d416:	f7ff fcf7 	bl	1ce08 <__aeabi_ldivmod>
		range_reg = adxl362_range_to_reg_val(sensor_ms2_to_g(val));
   1d41a:	b280      	uxth	r0, r0
		if (range <= adxl362_acc_range_map[i].range) {
   1d41c:	2802      	cmp	r0, #2
   1d41e:	d915      	bls.n	1d44c <adxl362_attr_set+0x94>
   1d420:	2804      	cmp	r0, #4
   1d422:	d915      	bls.n	1d450 <adxl362_attr_set+0x98>
   1d424:	2808      	cmp	r0, #8
   1d426:	d832      	bhi.n	1d48e <adxl362_attr_set+0xd6>
	for (i = 0; i < ARRAY_SIZE(adxl362_acc_range_map); i++) {
   1d428:	2202      	movs	r2, #2
			return adxl362_acc_range_map[i].reg_val;
   1d42a:	4b21      	ldr	r3, [pc, #132]	; (1d4b0 <adxl362_attr_set+0xf8>)
		return adxl362_set_range(dev, range_reg);
   1d42c:	4630      	mov	r0, r6
}
   1d42e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return adxl362_acc_range_map[i].reg_val;
   1d432:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		return adxl362_set_range(dev, range_reg);
   1d436:	7899      	ldrb	r1, [r3, #2]
   1d438:	f01d bfff 	b.w	3b43a <adxl362_set_range>
   1d43c:	481d      	ldr	r0, [pc, #116]	; (1d4b4 <adxl362_attr_set+0xfc>)
   1d43e:	a318      	add	r3, pc, #96	; (adr r3, 1d4a0 <adxl362_attr_set+0xe8>)
   1d440:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d444:	1820      	adds	r0, r4, r0
   1d446:	f145 31ff 	adc.w	r1, r5, #4294967295
   1d44a:	e7e4      	b.n	1d416 <adxl362_attr_set+0x5e>
	for (i = 0; i < ARRAY_SIZE(adxl362_acc_range_map); i++) {
   1d44c:	2200      	movs	r2, #0
   1d44e:	e7ec      	b.n	1d42a <adxl362_attr_set+0x72>
   1d450:	2201      	movs	r2, #1
   1d452:	e7ea      	b.n	1d42a <adxl362_attr_set+0x72>
						   val->val2 / 1000);
   1d454:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		out_rate = adxl362_freq_to_odr_val(val->val1,
   1d458:	8818      	ldrh	r0, [r3, #0]
						   val->val2 / 1000);
   1d45a:	685b      	ldr	r3, [r3, #4]
   1d45c:	fb93 f3f1 	sdiv	r3, r3, r1
		out_rate = adxl362_freq_to_odr_val(val->val1,
   1d460:	b29b      	uxth	r3, r3
	if (freq_int == 0U && freq_milli == 0U) {
   1d462:	ea50 0103 	orrs.w	r1, r0, r3
   1d466:	d012      	beq.n	1d48e <adxl362_attr_set+0xd6>
   1d468:	4913      	ldr	r1, [pc, #76]	; (1d4b8 <adxl362_attr_set+0x100>)
		if (freq_int < adxl362_odr_map[i].freq_int ||
   1d46a:	880c      	ldrh	r4, [r1, #0]
   1d46c:	42a0      	cmp	r0, r4
   1d46e:	d303      	bcc.n	1d478 <adxl362_attr_set+0xc0>
   1d470:	d108      	bne.n	1d484 <adxl362_attr_set+0xcc>
		    (freq_int == adxl362_odr_map[i].freq_int &&
   1d472:	884c      	ldrh	r4, [r1, #2]
   1d474:	429c      	cmp	r4, r3
   1d476:	d305      	bcc.n	1d484 <adxl362_attr_set+0xcc>
		return adxl362_set_output_rate(dev, out_rate);
   1d478:	4630      	mov	r0, r6
}
   1d47a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return adxl362_set_output_rate(dev, out_rate);
   1d47e:	b2d1      	uxtb	r1, r2
   1d480:	f01d bff8 	b.w	3b474 <adxl362_set_output_rate>
	for (i = 0; i < ARRAY_SIZE(adxl362_odr_map); i++) {
   1d484:	3201      	adds	r2, #1
   1d486:	2a06      	cmp	r2, #6
   1d488:	f101 0104 	add.w	r1, r1, #4
   1d48c:	d1ed      	bne.n	1d46a <adxl362_attr_set+0xb2>
		return -ENOTSUP;
   1d48e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d492:	e001      	b.n	1d498 <adxl362_attr_set+0xe0>
		return -EINVAL;
   1d494:	f06f 0015 	mvn.w	r0, #21
}
   1d498:	bd70      	pop	{r4, r5, r6, pc}
   1d49a:	bf00      	nop
   1d49c:	f3af 8000 	nop.w
   1d4a0:	0095a33a 	.word	0x0095a33a
   1d4a4:	00000000 	.word	0x00000000
   1d4a8:	000f4240 	.word	0x000f4240
   1d4ac:	004ad19d 	.word	0x004ad19d
   1d4b0:	000402b2 	.word	0x000402b2
   1d4b4:	ffb52e63 	.word	0xffb52e63
   1d4b8:	000402be 	.word	0x000402be
   1d4bc:	00000000 	.word	0x00000000

0001d4c0 <nrf_cloud_encode_state>:

	return 0;
}

int nrf_cloud_encode_state(uint32_t reported_state, struct nrf_cloud_data *output)
{
   1d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4c4:	4604      	mov	r4, r0
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   1d4c6:	468b      	mov	fp, r1
{
   1d4c8:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(output != NULL);
   1d4ca:	b959      	cbnz	r1, 1d4e4 <nrf_cloud_encode_state+0x24>
   1d4cc:	4970      	ldr	r1, [pc, #448]	; (1d690 <nrf_cloud_encode_state+0x1d0>)
   1d4ce:	4871      	ldr	r0, [pc, #452]	; (1d694 <nrf_cloud_encode_state+0x1d4>)
   1d4d0:	f240 1359 	movw	r3, #345	; 0x159
   1d4d4:	4a70      	ldr	r2, [pc, #448]	; (1d698 <nrf_cloud_encode_state+0x1d8>)
   1d4d6:	f01b fe2c 	bl	39132 <printk>
   1d4da:	f240 1159 	movw	r1, #345	; 0x159
   1d4de:	486e      	ldr	r0, [pc, #440]	; (1d698 <nrf_cloud_encode_state+0x1d8>)
   1d4e0:	f01c f8c6 	bl	39670 <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   1d4e4:	f010 fc48 	bl	2dd78 <cJSON_CreateObject>
   1d4e8:	4680      	mov	r8, r0
	cJSON *state_obj = cJSON_CreateObject();
   1d4ea:	f010 fc45 	bl	2dd78 <cJSON_CreateObject>
   1d4ee:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_CreateObject();
   1d4f0:	f010 fc42 	bl	2dd78 <cJSON_CreateObject>
   1d4f4:	4607      	mov	r7, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   1d4f6:	f010 fc3f 	bl	2dd78 <cJSON_CreateObject>
   1d4fa:	4606      	mov	r6, r0
	cJSON *connection_obj = cJSON_CreateObject();
   1d4fc:	f010 fc3c 	bl	2dd78 <cJSON_CreateObject>
   1d500:	4681      	mov	r9, r0

	if ((root_obj == NULL) || (state_obj == NULL) ||
   1d502:	f1b8 0f00 	cmp.w	r8, #0
   1d506:	d005      	beq.n	1d514 <nrf_cloud_encode_state+0x54>
   1d508:	f1ba 0f00 	cmp.w	sl, #0
   1d50c:	d002      	beq.n	1d514 <nrf_cloud_encode_state+0x54>
   1d50e:	b10f      	cbz	r7, 1d514 <nrf_cloud_encode_state+0x54>
	    (reported_obj == NULL) || (pairing_obj == NULL) ||
   1d510:	b106      	cbz	r6, 1d514 <nrf_cloud_encode_state+0x54>
   1d512:	b988      	cbnz	r0, 1d538 <nrf_cloud_encode_state+0x78>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   1d514:	4640      	mov	r0, r8
	ret += json_add_obj(reported_obj, "connection", connection_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   1d516:	f010 fb6d 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   1d51a:	4650      	mov	r0, sl
   1d51c:	f010 fb6a 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   1d520:	4638      	mov	r0, r7
   1d522:	f010 fb67 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   1d526:	4630      	mov	r0, r6
   1d528:	f010 fb64 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(connection_obj);
   1d52c:	4648      	mov	r0, r9
   1d52e:	f010 fb61 	bl	2dbf4 <cJSON_Delete>

	buffer = cJSON_PrintUnformatted(root_obj);
	cJSON_Delete(root_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   1d532:	f06f 040b 	mvn.w	r4, #11
   1d536:	e014      	b.n	1d562 <nrf_cloud_encode_state+0xa2>
	switch (reported_state) {
   1d538:	2c06      	cmp	r4, #6
   1d53a:	d016      	beq.n	1d56a <nrf_cloud_encode_state+0xaa>
   1d53c:	2c07      	cmp	r4, #7
   1d53e:	d05a      	beq.n	1d5f6 <nrf_cloud_encode_state+0x136>
		cJSON_Delete(root_obj);
   1d540:	4640      	mov	r0, r8
   1d542:	f010 fb57 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   1d546:	4650      	mov	r0, sl
   1d548:	f010 fb54 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   1d54c:	4638      	mov	r0, r7
   1d54e:	f010 fb51 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   1d552:	4630      	mov	r0, r6
   1d554:	f010 fb4e 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(connection_obj);
   1d558:	4648      	mov	r0, r9
   1d55a:	f010 fb4b 	bl	2dbf4 <cJSON_Delete>
		return -ENOTSUP;
   1d55e:	f06f 0485 	mvn.w	r4, #133	; 0x85

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   1d562:	4620      	mov	r0, r4
   1d564:	b009      	add	sp, #36	; 0x24
   1d566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   1d56a:	4a4c      	ldr	r2, [pc, #304]	; (1d69c <nrf_cloud_encode_state+0x1dc>)
   1d56c:	494c      	ldr	r1, [pc, #304]	; (1d6a0 <nrf_cloud_encode_state+0x1e0>)
   1d56e:	4630      	mov	r0, r6
   1d570:	f01e fd42 	bl	3bff8 <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   1d574:	494b      	ldr	r1, [pc, #300]	; (1d6a4 <nrf_cloud_encode_state+0x1e4>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   1d576:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   1d578:	4630      	mov	r0, r6
   1d57a:	f01e fd53 	bl	3c024 <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   1d57e:	494a      	ldr	r1, [pc, #296]	; (1d6a8 <nrf_cloud_encode_state+0x1e8>)
		ret += json_add_null(pairing_obj, "topics");
   1d580:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   1d582:	4630      	mov	r0, r6
   1d584:	f01e fd4e 	bl	3c024 <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   1d588:	4948      	ldr	r1, [pc, #288]	; (1d6ac <nrf_cloud_encode_state+0x1ec>)
		ret += json_add_null(pairing_obj, "config");
   1d58a:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   1d58c:	4638      	mov	r0, r7
   1d58e:	f01e fd49 	bl	3c024 <json_add_null>
		ret += json_add_null(reported_obj,
   1d592:	4947      	ldr	r1, [pc, #284]	; (1d6b0 <nrf_cloud_encode_state+0x1f0>)
		ret += json_add_null(reported_obj, "stage");
   1d594:	1825      	adds	r5, r4, r0
		ret += json_add_null(reported_obj,
   1d596:	4638      	mov	r0, r7
   1d598:	f01e fd44 	bl	3c024 <json_add_null>
		ret += json_add_null(connection_obj, "keepalive");
   1d59c:	4945      	ldr	r1, [pc, #276]	; (1d6b4 <nrf_cloud_encode_state+0x1f4>)
		ret += json_add_null(reported_obj,
   1d59e:	4405      	add	r5, r0
		ret += json_add_null(connection_obj, "keepalive");
   1d5a0:	4648      	mov	r0, r9
   1d5a2:	f01e fd3f 	bl	3c024 <json_add_null>
   1d5a6:	182c      	adds	r4, r5, r0
	cJSON_AddItemToObject(parent, str, item);
   1d5a8:	4632      	mov	r2, r6
   1d5aa:	4943      	ldr	r1, [pc, #268]	; (1d6b8 <nrf_cloud_encode_state+0x1f8>)
   1d5ac:	4638      	mov	r0, r7
   1d5ae:	f01f f818 	bl	3c5e2 <cJSON_AddItemToObject>
   1d5b2:	464a      	mov	r2, r9
   1d5b4:	4941      	ldr	r1, [pc, #260]	; (1d6bc <nrf_cloud_encode_state+0x1fc>)
   1d5b6:	4638      	mov	r0, r7
   1d5b8:	f01f f813 	bl	3c5e2 <cJSON_AddItemToObject>
   1d5bc:	463a      	mov	r2, r7
   1d5be:	4940      	ldr	r1, [pc, #256]	; (1d6c0 <nrf_cloud_encode_state+0x200>)
   1d5c0:	4650      	mov	r0, sl
   1d5c2:	f01f f80e 	bl	3c5e2 <cJSON_AddItemToObject>
   1d5c6:	4652      	mov	r2, sl
   1d5c8:	4640      	mov	r0, r8
   1d5ca:	4935      	ldr	r1, [pc, #212]	; (1d6a0 <nrf_cloud_encode_state+0x1e0>)
   1d5cc:	f01f f809 	bl	3c5e2 <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   1d5d0:	4640      	mov	r0, r8
	if (ret != 0) {
   1d5d2:	2c00      	cmp	r4, #0
   1d5d4:	d19f      	bne.n	1d516 <nrf_cloud_encode_state+0x56>
	buffer = cJSON_PrintUnformatted(root_obj);
   1d5d6:	f01e ffef 	bl	3c5b8 <cJSON_PrintUnformatted>
   1d5da:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   1d5dc:	4640      	mov	r0, r8
   1d5de:	f010 fb09 	bl	2dbf4 <cJSON_Delete>
	if (buffer == NULL) {
   1d5e2:	2d00      	cmp	r5, #0
   1d5e4:	d0a5      	beq.n	1d532 <nrf_cloud_encode_state+0x72>
	output->len = strlen(buffer);
   1d5e6:	4628      	mov	r0, r5
	output->ptr = buffer;
   1d5e8:	f8cb 5004 	str.w	r5, [fp, #4]
	output->len = strlen(buffer);
   1d5ec:	f7ff fe36 	bl	1d25c <strlen>
   1d5f0:	f8cb 0000 	str.w	r0, [fp]
	return 0;
   1d5f4:	e7b5      	b.n	1d562 <nrf_cloud_encode_state+0xa2>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   1d5f6:	aa06      	add	r2, sp, #24
   1d5f8:	a902      	add	r1, sp, #8
   1d5fa:	a804      	add	r0, sp, #16
   1d5fc:	f00c fd78 	bl	2a0f0 <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   1d600:	9a07      	ldr	r2, [sp, #28]
   1d602:	492b      	ldr	r1, [pc, #172]	; (1d6b0 <nrf_cloud_encode_state+0x1f0>)
   1d604:	4638      	mov	r0, r7
   1d606:	f01e fcf7 	bl	3bff8 <json_add_str>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   1d60a:	4a2e      	ldr	r2, [pc, #184]	; (1d6c4 <nrf_cloud_encode_state+0x204>)
   1d60c:	4924      	ldr	r1, [pc, #144]	; (1d6a0 <nrf_cloud_encode_state+0x1e0>)
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   1d60e:	4605      	mov	r5, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   1d610:	4630      	mov	r0, r6
   1d612:	f01e fcf1 	bl	3bff8 <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   1d616:	4924      	ldr	r1, [pc, #144]	; (1d6a8 <nrf_cloud_encode_state+0x1e8>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   1d618:	9001      	str	r0, [sp, #4]
		ret += json_add_null(pairing_obj, "config");
   1d61a:	4630      	mov	r0, r6
   1d61c:	f01e fd02 	bl	3c024 <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   1d620:	4929      	ldr	r1, [pc, #164]	; (1d6c8 <nrf_cloud_encode_state+0x208>)
		ret += json_add_null(pairing_obj, "config");
   1d622:	9000      	str	r0, [sp, #0]
		ret += json_add_null(reported_obj, "pairingStatus");
   1d624:	4638      	mov	r0, r7
   1d626:	f01e fcfd 	bl	3c024 <json_add_null>
		if (cJSON_AddNumberToObject(connection_obj, "keepalive",
   1d62a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 1d688 <nrf_cloud_encode_state+0x1c8>
		ret += json_add_null(reported_obj, "pairingStatus");
   1d62e:	4604      	mov	r4, r0
		if (cJSON_AddNumberToObject(connection_obj, "keepalive",
   1d630:	4920      	ldr	r1, [pc, #128]	; (1d6b4 <nrf_cloud_encode_state+0x1f4>)
   1d632:	4648      	mov	r0, r9
   1d634:	f01e fffe 	bl	3c634 <cJSON_AddNumberToObject>
   1d638:	b310      	cbz	r0, 1d680 <nrf_cloud_encode_state+0x1c0>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   1d63a:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_null(pairing_obj, "config");
   1d63c:	9b00      	ldr	r3, [sp, #0]
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   1d63e:	442a      	add	r2, r5
		ret += json_add_null(pairing_obj, "config");
   1d640:	4413      	add	r3, r2
		ret += json_add_null(reported_obj, "pairingStatus");
   1d642:	441c      	add	r4, r3
		cJSON *topics_obj = cJSON_CreateObject();
   1d644:	f010 fb98 	bl	2dd78 <cJSON_CreateObject>
		if (topics_obj == NULL) {
   1d648:	4605      	mov	r5, r0
   1d64a:	2800      	cmp	r0, #0
   1d64c:	f43f af62 	beq.w	1d514 <nrf_cloud_encode_state+0x54>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   1d650:	9a05      	ldr	r2, [sp, #20]
   1d652:	491e      	ldr	r1, [pc, #120]	; (1d6cc <nrf_cloud_encode_state+0x20c>)
   1d654:	f01e fcd0 	bl	3bff8 <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   1d658:	9a03      	ldr	r2, [sp, #12]
   1d65a:	491d      	ldr	r1, [pc, #116]	; (1d6d0 <nrf_cloud_encode_state+0x210>)
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   1d65c:	9000      	str	r0, [sp, #0]
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   1d65e:	4628      	mov	r0, r5
   1d660:	f01e fcca 	bl	3bff8 <json_add_str>
   1d664:	9b00      	ldr	r3, [sp, #0]
	cJSON_AddItemToObject(parent, str, item);
   1d666:	462a      	mov	r2, r5
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   1d668:	4418      	add	r0, r3
   1d66a:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   1d66c:	490d      	ldr	r1, [pc, #52]	; (1d6a4 <nrf_cloud_encode_state+0x1e4>)
   1d66e:	4630      	mov	r0, r6
   1d670:	f01e ffb7 	bl	3c5e2 <cJSON_AddItemToObject>
		if (ret != 0) {
   1d674:	2c00      	cmp	r4, #0
   1d676:	d097      	beq.n	1d5a8 <nrf_cloud_encode_state+0xe8>
			cJSON_Delete(topics_obj);
   1d678:	4628      	mov	r0, r5
   1d67a:	f010 fabb 	bl	2dbf4 <cJSON_Delete>
		break;
   1d67e:	e793      	b.n	1d5a8 <nrf_cloud_encode_state+0xe8>
			ret = -ENOMEM;
   1d680:	f06f 040b 	mvn.w	r4, #11
   1d684:	e7de      	b.n	1d644 <nrf_cloud_encode_state+0x184>
   1d686:	bf00      	nop
   1d688:	00000000 	.word	0x00000000
   1d68c:	405e0000 	.word	0x405e0000
   1d690:	00042cd9 	.word	0x00042cd9
   1d694:	0004033e 	.word	0x0004033e
   1d698:	00042c4e 	.word	0x00042c4e
   1d69c:	00042e19 	.word	0x00042e19
   1d6a0:	00042c40 	.word	0x00042c40
   1d6a4:	00042e81 	.word	0x00042e81
   1d6a8:	0004506a 	.word	0x0004506a
   1d6ac:	00042e88 	.word	0x00042e88
   1d6b0:	00042d6d 	.word	0x00042d6d
   1d6b4:	00042e8e 	.word	0x00042e8e
   1d6b8:	00042d88 	.word	0x00042d88
   1d6bc:	00044077 	.word	0x00044077
   1d6c0:	00042cef 	.word	0x00042cef
   1d6c4:	00042e98 	.word	0x00042e98
   1d6c8:	00042e9f 	.word	0x00042e9f
   1d6cc:	00042ead 	.word	0x00042ead
   1d6d0:	00042eb1 	.word	0x00042eb1
   1d6d4:	00000000 	.word	0x00000000

0001d6d8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1d6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d6dc:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d6de:	460c      	mov	r4, r1
{
   1d6e0:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d6e2:	b909      	cbnz	r1, 1d6e8 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1d6e4:	2000      	movs	r0, #0
   1d6e6:	e024      	b.n	1d732 <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d6e8:	6808      	ldr	r0, [r1, #0]
   1d6ea:	2800      	cmp	r0, #0
   1d6ec:	d0fa      	beq.n	1d6e4 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1d6ee:	688b      	ldr	r3, [r1, #8]
   1d6f0:	6862      	ldr	r2, [r4, #4]
   1d6f2:	1d19      	adds	r1, r3, #4
   1d6f4:	4291      	cmp	r1, r2
   1d6f6:	d80b      	bhi.n	1d710 <parse_value+0x38>
   1d6f8:	2204      	movs	r2, #4
   1d6fa:	4993      	ldr	r1, [pc, #588]	; (1d948 <parse_value+0x270>)
   1d6fc:	4418      	add	r0, r3
   1d6fe:	f020 fdef 	bl	3e2e0 <strncmp>
   1d702:	b928      	cbnz	r0, 1d710 <parse_value+0x38>
        item->type = cJSON_NULL;
   1d704:	2304      	movs	r3, #4
   1d706:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
   1d708:	68a3      	ldr	r3, [r4, #8]
   1d70a:	3304      	adds	r3, #4
    input_buffer->offset++;
   1d70c:	60a3      	str	r3, [r4, #8]
   1d70e:	e083      	b.n	1d818 <parse_value+0x140>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1d710:	68a3      	ldr	r3, [r4, #8]
   1d712:	6862      	ldr	r2, [r4, #4]
   1d714:	1d59      	adds	r1, r3, #5
   1d716:	4291      	cmp	r1, r2
   1d718:	d80e      	bhi.n	1d738 <parse_value+0x60>
   1d71a:	6820      	ldr	r0, [r4, #0]
   1d71c:	2205      	movs	r2, #5
   1d71e:	498b      	ldr	r1, [pc, #556]	; (1d94c <parse_value+0x274>)
   1d720:	4418      	add	r0, r3
   1d722:	f020 fddd 	bl	3e2e0 <strncmp>
   1d726:	b938      	cbnz	r0, 1d738 <parse_value+0x60>
        item->type = cJSON_False;
   1d728:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1d72a:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_False;
   1d72c:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
   1d72e:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   1d730:	60a2      	str	r2, [r4, #8]
}
   1d732:	b013      	add	sp, #76	; 0x4c
   1d734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1d738:	68a3      	ldr	r3, [r4, #8]
   1d73a:	6862      	ldr	r2, [r4, #4]
   1d73c:	1d19      	adds	r1, r3, #4
   1d73e:	4291      	cmp	r1, r2
   1d740:	d80d      	bhi.n	1d75e <parse_value+0x86>
   1d742:	6820      	ldr	r0, [r4, #0]
   1d744:	2204      	movs	r2, #4
   1d746:	4982      	ldr	r1, [pc, #520]	; (1d950 <parse_value+0x278>)
   1d748:	4418      	add	r0, r3
   1d74a:	f020 fdc9 	bl	3e2e0 <strncmp>
   1d74e:	b930      	cbnz	r0, 1d75e <parse_value+0x86>
        item->type = cJSON_True;
   1d750:	2302      	movs	r3, #2
        item->valueint = 1;
   1d752:	2001      	movs	r0, #1
        input_buffer->offset += 4;
   1d754:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_True;
   1d756:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
   1d758:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
   1d75a:	3204      	adds	r2, #4
   1d75c:	e7e8      	b.n	1d730 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1d75e:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   1d762:	4283      	cmp	r3, r0
   1d764:	d2be      	bcs.n	1d6e4 <parse_value+0xc>
   1d766:	6821      	ldr	r1, [r4, #0]
   1d768:	5cca      	ldrb	r2, [r1, r3]
   1d76a:	18cf      	adds	r7, r1, r3
   1d76c:	2a22      	cmp	r2, #34	; 0x22
   1d76e:	d104      	bne.n	1d77a <parse_value+0xa2>
        return parse_string(item, input_buffer);
   1d770:	4621      	mov	r1, r4
   1d772:	4630      	mov	r0, r6
   1d774:	f00f fd9c 	bl	2d2b0 <parse_string>
   1d778:	e7db      	b.n	1d732 <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1d77a:	2a2d      	cmp	r2, #45	; 0x2d
   1d77c:	d003      	beq.n	1d786 <parse_value+0xae>
   1d77e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
   1d782:	2d09      	cmp	r5, #9
   1d784:	d85d      	bhi.n	1d842 <parse_value+0x16a>
    unsigned char *after_end = NULL;
   1d786:	2200      	movs	r2, #0
   1d788:	9201      	str	r2, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d78a:	2900      	cmp	r1, #0
   1d78c:	d0aa      	beq.n	1d6e4 <parse_value+0xc>
                number_c_string[i] = decimal_point;
   1d78e:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
   1d792:	1ac3      	subs	r3, r0, r3
   1d794:	ad02      	add	r5, sp, #8
        switch (buffer_at_offset(input_buffer)[i])
   1d796:	f817 1b01 	ldrb.w	r1, [r7], #1
   1d79a:	2939      	cmp	r1, #57	; 0x39
   1d79c:	d80f      	bhi.n	1d7be <parse_value+0xe6>
   1d79e:	292a      	cmp	r1, #42	; 0x2a
   1d7a0:	d917      	bls.n	1d7d2 <parse_value+0xfa>
   1d7a2:	f1a1 002b 	sub.w	r0, r1, #43	; 0x2b
   1d7a6:	280e      	cmp	r0, #14
   1d7a8:	d813      	bhi.n	1d7d2 <parse_value+0xfa>
   1d7aa:	e8df f000 	tbb	[pc, r0]
   1d7ae:	120c      	.short	0x120c
   1d7b0:	0c12370c 	.word	0x0c12370c
   1d7b4:	0c0c0c0c 	.word	0x0c0c0c0c
   1d7b8:	0c0c0c0c 	.word	0x0c0c0c0c
   1d7bc:	0c          	.byte	0x0c
   1d7bd:	00          	.byte	0x00
   1d7be:	f001 00df 	and.w	r0, r1, #223	; 0xdf
   1d7c2:	2845      	cmp	r0, #69	; 0x45
   1d7c4:	d105      	bne.n	1d7d2 <parse_value+0xfa>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   1d7c6:	54a9      	strb	r1, [r5, r2]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d7c8:	3201      	adds	r2, #1
   1d7ca:	2a3f      	cmp	r2, #63	; 0x3f
   1d7cc:	d001      	beq.n	1d7d2 <parse_value+0xfa>
   1d7ce:	429a      	cmp	r2, r3
   1d7d0:	d1e1      	bne.n	1d796 <parse_value+0xbe>
    number_c_string[i] = '\0';
   1d7d2:	ab12      	add	r3, sp, #72	; 0x48
   1d7d4:	441a      	add	r2, r3
   1d7d6:	2300      	movs	r3, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d7d8:	4628      	mov	r0, r5
   1d7da:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
   1d7dc:	f802 3c40 	strb.w	r3, [r2, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d7e0:	f01a f99c 	bl	37b1c <strtod>
    if (number_c_string == after_end)
   1d7e4:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d7e6:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   1d7ea:	42af      	cmp	r7, r5
   1d7ec:	f43f af7a 	beq.w	1d6e4 <parse_value+0xc>
    if (number >= INT_MAX)
   1d7f0:	a353      	add	r3, pc, #332	; (adr r3, 1d940 <parse_value+0x268>)
   1d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1d7f6:	ed86 0b06 	vstr	d0, [r6, #24]
    if (number >= INT_MAX)
   1d7fa:	ee10 0a10 	vmov	r0, s0
   1d7fe:	4649      	mov	r1, r9
   1d800:	f7ff fa60 	bl	1ccc4 <__aeabi_dcmpge>
   1d804:	b168      	cbz	r0, 1d822 <parse_value+0x14a>
        item->valueint = INT_MAX;
   1d806:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1d80a:	6173      	str	r3, [r6, #20]
    item->type = cJSON_Number;
   1d80c:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d80e:	1b7d      	subs	r5, r7, r5
   1d810:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1d812:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d814:	443d      	add	r5, r7
   1d816:	60a5      	str	r5, [r4, #8]
    return true;
   1d818:	2001      	movs	r0, #1
   1d81a:	e78a      	b.n	1d732 <parse_value+0x5a>
                number_c_string[i] = decimal_point;
   1d81c:	f805 c002 	strb.w	ip, [r5, r2]
                break;
   1d820:	e7d2      	b.n	1d7c8 <parse_value+0xf0>
    else if (number <= (double)INT_MIN)
   1d822:	2200      	movs	r2, #0
   1d824:	4640      	mov	r0, r8
   1d826:	4649      	mov	r1, r9
   1d828:	4b4a      	ldr	r3, [pc, #296]	; (1d954 <parse_value+0x27c>)
   1d82a:	f7ff fa41 	bl	1ccb0 <__aeabi_dcmple>
   1d82e:	b110      	cbz	r0, 1d836 <parse_value+0x15e>
        item->valueint = INT_MIN;
   1d830:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d834:	e7e9      	b.n	1d80a <parse_value+0x132>
        item->valueint = (int)number;
   1d836:	4640      	mov	r0, r8
   1d838:	4649      	mov	r1, r9
   1d83a:	f7ff fa6d 	bl	1cd18 <__aeabi_d2iz>
   1d83e:	6170      	str	r0, [r6, #20]
   1d840:	e7e4      	b.n	1d80c <parse_value+0x134>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1d842:	2a5b      	cmp	r2, #91	; 0x5b
   1d844:	d153      	bne.n	1d8ee <parse_value+0x216>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d846:	68e2      	ldr	r2, [r4, #12]
   1d848:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1d84c:	f4bf af4a 	bcs.w	1d6e4 <parse_value+0xc>
    input_buffer->depth++;
   1d850:	3201      	adds	r2, #1
   1d852:	60e2      	str	r2, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1d854:	5cca      	ldrb	r2, [r1, r3]
   1d856:	2a5b      	cmp	r2, #91	; 0x5b
   1d858:	f47f af44 	bne.w	1d6e4 <parse_value+0xc>
    input_buffer->offset++;
   1d85c:	3301      	adds	r3, #1
   1d85e:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d860:	4620      	mov	r0, r4
   1d862:	f01e fe05 	bl	3c470 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1d866:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d86a:	4293      	cmp	r3, r2
   1d86c:	d263      	bcs.n	1d936 <parse_value+0x25e>
   1d86e:	6822      	ldr	r2, [r4, #0]
   1d870:	5cd2      	ldrb	r2, [r2, r3]
   1d872:	2a5d      	cmp	r2, #93	; 0x5d
   1d874:	d10c      	bne.n	1d890 <parse_value+0x1b8>
    cJSON *current_item = NULL;
   1d876:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   1d878:	462f      	mov	r7, r5
    input_buffer->depth--;
   1d87a:	68e3      	ldr	r3, [r4, #12]
   1d87c:	3b01      	subs	r3, #1
   1d87e:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1d880:	b107      	cbz	r7, 1d884 <parse_value+0x1ac>
        head->prev = current_item;
   1d882:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Array;
   1d884:	2320      	movs	r3, #32
    item->child = head;
   1d886:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
   1d88a:	68a3      	ldr	r3, [r4, #8]
   1d88c:	3301      	adds	r3, #1
   1d88e:	e73d      	b.n	1d70c <parse_value+0x34>
    cJSON *current_item = NULL;
   1d890:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   1d892:	462f      	mov	r7, r5
    input_buffer->offset--;
   1d894:	3b01      	subs	r3, #1
   1d896:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d898:	6920      	ldr	r0, [r4, #16]
   1d89a:	f01e fe6b 	bl	3c574 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1d89e:	46a8      	mov	r8, r5
   1d8a0:	4605      	mov	r5, r0
   1d8a2:	2800      	cmp	r0, #0
   1d8a4:	f000 809d 	beq.w	1d9e2 <parse_value+0x30a>
        if (head == NULL)
   1d8a8:	b1ff      	cbz	r7, 1d8ea <parse_value+0x212>
            current_item->next = new_item;
   1d8aa:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1d8ae:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1d8b2:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d8b4:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d8b6:	3301      	adds	r3, #1
   1d8b8:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d8ba:	f01e fdd9 	bl	3c470 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d8be:	4621      	mov	r1, r4
   1d8c0:	4628      	mov	r0, r5
   1d8c2:	f7ff ff09 	bl	1d6d8 <parse_value>
   1d8c6:	2800      	cmp	r0, #0
   1d8c8:	f000 808e 	beq.w	1d9e8 <parse_value+0x310>
        buffer_skip_whitespace(input_buffer);
   1d8cc:	4620      	mov	r0, r4
   1d8ce:	f01e fdcf 	bl	3c470 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d8d2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d8d6:	4293      	cmp	r3, r2
   1d8d8:	f080 8086 	bcs.w	1d9e8 <parse_value+0x310>
   1d8dc:	6822      	ldr	r2, [r4, #0]
   1d8de:	5cd3      	ldrb	r3, [r2, r3]
   1d8e0:	2b2c      	cmp	r3, #44	; 0x2c
   1d8e2:	d0d9      	beq.n	1d898 <parse_value+0x1c0>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1d8e4:	2b5d      	cmp	r3, #93	; 0x5d
   1d8e6:	d17f      	bne.n	1d9e8 <parse_value+0x310>
   1d8e8:	e7c7      	b.n	1d87a <parse_value+0x1a2>
   1d8ea:	4607      	mov	r7, r0
   1d8ec:	e7e1      	b.n	1d8b2 <parse_value+0x1da>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1d8ee:	2a7b      	cmp	r2, #123	; 0x7b
   1d8f0:	f47f aef8 	bne.w	1d6e4 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d8f4:	68e2      	ldr	r2, [r4, #12]
   1d8f6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1d8fa:	f4bf aef3 	bcs.w	1d6e4 <parse_value+0xc>
    input_buffer->depth++;
   1d8fe:	3201      	adds	r2, #1
   1d900:	60e2      	str	r2, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1d902:	5cca      	ldrb	r2, [r1, r3]
   1d904:	2a7b      	cmp	r2, #123	; 0x7b
   1d906:	f47f aeed 	bne.w	1d6e4 <parse_value+0xc>
    input_buffer->offset++;
   1d90a:	3301      	adds	r3, #1
   1d90c:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d90e:	4620      	mov	r0, r4
   1d910:	f01e fdae 	bl	3c470 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1d914:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d918:	4293      	cmp	r3, r2
   1d91a:	d20c      	bcs.n	1d936 <parse_value+0x25e>
   1d91c:	6822      	ldr	r2, [r4, #0]
   1d91e:	5cd2      	ldrb	r2, [r2, r3]
   1d920:	2a7d      	cmp	r2, #125	; 0x7d
   1d922:	d119      	bne.n	1d958 <parse_value+0x280>
    cJSON *current_item = NULL;
   1d924:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1d926:	462f      	mov	r7, r5
    input_buffer->depth--;
   1d928:	68e3      	ldr	r3, [r4, #12]
   1d92a:	3b01      	subs	r3, #1
   1d92c:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1d92e:	b107      	cbz	r7, 1d932 <parse_value+0x25a>
        head->prev = current_item;
   1d930:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
   1d932:	2340      	movs	r3, #64	; 0x40
   1d934:	e7a7      	b.n	1d886 <parse_value+0x1ae>
        input_buffer->offset--;
   1d936:	3b01      	subs	r3, #1
   1d938:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1d93a:	e6d3      	b.n	1d6e4 <parse_value+0xc>
   1d93c:	f3af 8000 	nop.w
   1d940:	ffc00000 	.word	0xffc00000
   1d944:	41dfffff 	.word	0x41dfffff
   1d948:	00044f6a 	.word	0x00044f6a
   1d94c:	00044f81 	.word	0x00044f81
   1d950:	00044f87 	.word	0x00044f87
   1d954:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   1d958:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1d95a:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
   1d95c:	46a8      	mov	r8, r5
    input_buffer->offset--;
   1d95e:	3b01      	subs	r3, #1
   1d960:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d962:	6920      	ldr	r0, [r4, #16]
   1d964:	f01e fe06 	bl	3c574 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1d968:	46a9      	mov	r9, r5
   1d96a:	4605      	mov	r5, r0
   1d96c:	2800      	cmp	r0, #0
   1d96e:	d038      	beq.n	1d9e2 <parse_value+0x30a>
        if (head == NULL)
   1d970:	b3af      	cbz	r7, 1d9de <parse_value+0x306>
            current_item->next = new_item;
   1d972:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   1d976:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   1d97a:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d97c:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d97e:	3301      	adds	r3, #1
   1d980:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d982:	f01e fd75 	bl	3c470 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1d986:	4621      	mov	r1, r4
   1d988:	4628      	mov	r0, r5
   1d98a:	f00f fc91 	bl	2d2b0 <parse_string>
   1d98e:	b358      	cbz	r0, 1d9e8 <parse_value+0x310>
        buffer_skip_whitespace(input_buffer);
   1d990:	4620      	mov	r0, r4
   1d992:	f01e fd6d 	bl	3c470 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1d996:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
   1d998:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
   1d99c:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1d99e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d9a2:	4293      	cmp	r3, r2
   1d9a4:	d220      	bcs.n	1d9e8 <parse_value+0x310>
   1d9a6:	6822      	ldr	r2, [r4, #0]
   1d9a8:	5cd2      	ldrb	r2, [r2, r3]
   1d9aa:	2a3a      	cmp	r2, #58	; 0x3a
   1d9ac:	d11c      	bne.n	1d9e8 <parse_value+0x310>
        input_buffer->offset++;
   1d9ae:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
   1d9b0:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d9b2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d9b4:	f01e fd5c 	bl	3c470 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d9b8:	4621      	mov	r1, r4
   1d9ba:	4628      	mov	r0, r5
   1d9bc:	f7ff fe8c 	bl	1d6d8 <parse_value>
   1d9c0:	b190      	cbz	r0, 1d9e8 <parse_value+0x310>
        buffer_skip_whitespace(input_buffer);
   1d9c2:	4620      	mov	r0, r4
   1d9c4:	f01e fd54 	bl	3c470 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d9c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d9cc:	4293      	cmp	r3, r2
   1d9ce:	d20b      	bcs.n	1d9e8 <parse_value+0x310>
   1d9d0:	6822      	ldr	r2, [r4, #0]
   1d9d2:	5cd3      	ldrb	r3, [r2, r3]
   1d9d4:	2b2c      	cmp	r3, #44	; 0x2c
   1d9d6:	d0c4      	beq.n	1d962 <parse_value+0x28a>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1d9d8:	2b7d      	cmp	r3, #125	; 0x7d
   1d9da:	d105      	bne.n	1d9e8 <parse_value+0x310>
   1d9dc:	e7a4      	b.n	1d928 <parse_value+0x250>
   1d9de:	4607      	mov	r7, r0
   1d9e0:	e7cb      	b.n	1d97a <parse_value+0x2a2>
    if (head != NULL)
   1d9e2:	2f00      	cmp	r7, #0
   1d9e4:	f43f ae7e 	beq.w	1d6e4 <parse_value+0xc>
        cJSON_Delete(head);
   1d9e8:	4638      	mov	r0, r7
   1d9ea:	f010 f903 	bl	2dbf4 <cJSON_Delete>
   1d9ee:	e679      	b.n	1d6e4 <parse_value+0xc>

0001d9f0 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d9f0:	4b17      	ldr	r3, [pc, #92]	; (1da50 <cJSON_CreateNumber+0x60>)
{
   1d9f2:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d9f4:	6818      	ldr	r0, [r3, #0]
{
   1d9f6:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d9fa:	f01e fdbb 	bl	3c574 <cJSON_New_Item.isra.0>
    if(item)
   1d9fe:	4604      	mov	r4, r0
   1da00:	b170      	cbz	r0, 1da20 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1da02:	2308      	movs	r3, #8
        item->valuedouble = num;
   1da04:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1da08:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1da0a:	4639      	mov	r1, r7
   1da0c:	a30e      	add	r3, pc, #56	; (adr r3, 1da48 <cJSON_CreateNumber+0x58>)
   1da0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1da12:	4630      	mov	r0, r6
   1da14:	f7ff f956 	bl	1ccc4 <__aeabi_dcmpge>
   1da18:	b120      	cbz	r0, 1da24 <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1da1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1da1e:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1da20:	4620      	mov	r0, r4
   1da22:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1da24:	2200      	movs	r2, #0
   1da26:	4630      	mov	r0, r6
   1da28:	4639      	mov	r1, r7
   1da2a:	4b0a      	ldr	r3, [pc, #40]	; (1da54 <cJSON_CreateNumber+0x64>)
   1da2c:	f7ff f940 	bl	1ccb0 <__aeabi_dcmple>
   1da30:	b110      	cbz	r0, 1da38 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1da32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1da36:	e7f2      	b.n	1da1e <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1da38:	4630      	mov	r0, r6
   1da3a:	4639      	mov	r1, r7
   1da3c:	f7ff f96c 	bl	1cd18 <__aeabi_d2iz>
   1da40:	6160      	str	r0, [r4, #20]
    return item;
   1da42:	e7ed      	b.n	1da20 <cJSON_CreateNumber+0x30>
   1da44:	f3af 8000 	nop.w
   1da48:	ffc00000 	.word	0xffc00000
   1da4c:	41dfffff 	.word	0x41dfffff
   1da50:	20014854 	.word	0x20014854
   1da54:	c1e00000 	.word	0xc1e00000

0001da58 <_strtod_l>:
   1da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da5c:	461f      	mov	r7, r3
   1da5e:	b0a3      	sub	sp, #140	; 0x8c
   1da60:	2300      	movs	r3, #0
   1da62:	4604      	mov	r4, r0
   1da64:	4688      	mov	r8, r1
   1da66:	9219      	str	r2, [sp, #100]	; 0x64
   1da68:	931e      	str	r3, [sp, #120]	; 0x78
   1da6a:	f04f 0a00 	mov.w	sl, #0
   1da6e:	4ba3      	ldr	r3, [pc, #652]	; (1dcfc <_strtod_l+0x2a4>)
   1da70:	f04f 0b00 	mov.w	fp, #0
   1da74:	681b      	ldr	r3, [r3, #0]
   1da76:	4618      	mov	r0, r3
   1da78:	9307      	str	r3, [sp, #28]
   1da7a:	f7ff fbef 	bl	1d25c <strlen>
   1da7e:	4605      	mov	r5, r0
   1da80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1da84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1da86:	781a      	ldrb	r2, [r3, #0]
   1da88:	2a2b      	cmp	r2, #43	; 0x2b
   1da8a:	d04c      	beq.n	1db26 <_strtod_l+0xce>
   1da8c:	d839      	bhi.n	1db02 <_strtod_l+0xaa>
   1da8e:	2a0d      	cmp	r2, #13
   1da90:	d832      	bhi.n	1daf8 <_strtod_l+0xa0>
   1da92:	2a08      	cmp	r2, #8
   1da94:	d832      	bhi.n	1dafc <_strtod_l+0xa4>
   1da96:	2a00      	cmp	r2, #0
   1da98:	d03c      	beq.n	1db14 <_strtod_l+0xbc>
   1da9a:	2300      	movs	r3, #0
   1da9c:	930e      	str	r3, [sp, #56]	; 0x38
   1da9e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   1daa0:	7833      	ldrb	r3, [r6, #0]
   1daa2:	2b30      	cmp	r3, #48	; 0x30
   1daa4:	f040 80b5 	bne.w	1dc12 <_strtod_l+0x1ba>
   1daa8:	7873      	ldrb	r3, [r6, #1]
   1daaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1daae:	2b58      	cmp	r3, #88	; 0x58
   1dab0:	d16c      	bne.n	1db8c <_strtod_l+0x134>
   1dab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1dab4:	a91d      	add	r1, sp, #116	; 0x74
   1dab6:	9702      	str	r7, [sp, #8]
   1dab8:	4620      	mov	r0, r4
   1daba:	9301      	str	r3, [sp, #4]
   1dabc:	ab1e      	add	r3, sp, #120	; 0x78
   1dabe:	4a90      	ldr	r2, [pc, #576]	; (1dd00 <_strtod_l+0x2a8>)
   1dac0:	9300      	str	r3, [sp, #0]
   1dac2:	ab1f      	add	r3, sp, #124	; 0x7c
   1dac4:	f01a fb9e 	bl	38204 <__gethex>
   1dac8:	f010 0707 	ands.w	r7, r0, #7
   1dacc:	4605      	mov	r5, r0
   1dace:	d005      	beq.n	1dadc <_strtod_l+0x84>
   1dad0:	2f06      	cmp	r7, #6
   1dad2:	d12a      	bne.n	1db2a <_strtod_l+0xd2>
   1dad4:	3601      	adds	r6, #1
   1dad6:	2300      	movs	r3, #0
   1dad8:	961d      	str	r6, [sp, #116]	; 0x74
   1dada:	930e      	str	r3, [sp, #56]	; 0x38
   1dadc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1dade:	2b00      	cmp	r3, #0
   1dae0:	f040 859a 	bne.w	1e618 <_strtod_l+0xbc0>
   1dae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1dae6:	b1db      	cbz	r3, 1db20 <_strtod_l+0xc8>
   1dae8:	4652      	mov	r2, sl
   1daea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1daee:	ec43 2b10 	vmov	d0, r2, r3
   1daf2:	b023      	add	sp, #140	; 0x8c
   1daf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daf8:	2a20      	cmp	r2, #32
   1dafa:	d1ce      	bne.n	1da9a <_strtod_l+0x42>
   1dafc:	3301      	adds	r3, #1
   1dafe:	931d      	str	r3, [sp, #116]	; 0x74
   1db00:	e7c0      	b.n	1da84 <_strtod_l+0x2c>
   1db02:	2a2d      	cmp	r2, #45	; 0x2d
   1db04:	d1c9      	bne.n	1da9a <_strtod_l+0x42>
   1db06:	2201      	movs	r2, #1
   1db08:	920e      	str	r2, [sp, #56]	; 0x38
   1db0a:	1c5a      	adds	r2, r3, #1
   1db0c:	921d      	str	r2, [sp, #116]	; 0x74
   1db0e:	785b      	ldrb	r3, [r3, #1]
   1db10:	2b00      	cmp	r3, #0
   1db12:	d1c4      	bne.n	1da9e <_strtod_l+0x46>
   1db14:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1db16:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1db1a:	2b00      	cmp	r3, #0
   1db1c:	f040 857a 	bne.w	1e614 <_strtod_l+0xbbc>
   1db20:	4652      	mov	r2, sl
   1db22:	465b      	mov	r3, fp
   1db24:	e7e3      	b.n	1daee <_strtod_l+0x96>
   1db26:	2200      	movs	r2, #0
   1db28:	e7ee      	b.n	1db08 <_strtod_l+0xb0>
   1db2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1db2c:	b13a      	cbz	r2, 1db3e <_strtod_l+0xe6>
   1db2e:	2135      	movs	r1, #53	; 0x35
   1db30:	a820      	add	r0, sp, #128	; 0x80
   1db32:	f021 f9bb 	bl	3eeac <__copybits>
   1db36:	991e      	ldr	r1, [sp, #120]	; 0x78
   1db38:	4620      	mov	r0, r4
   1db3a:	f020 feb4 	bl	3e8a6 <_Bfree>
   1db3e:	3f01      	subs	r7, #1
   1db40:	2f05      	cmp	r7, #5
   1db42:	d807      	bhi.n	1db54 <_strtod_l+0xfc>
   1db44:	e8df f007 	tbb	[pc, r7]
   1db48:	1d180b0e 	.word	0x1d180b0e
   1db4c:	030e      	.short	0x030e
   1db4e:	f04f 0b00 	mov.w	fp, #0
   1db52:	46da      	mov	sl, fp
   1db54:	0728      	lsls	r0, r5, #28
   1db56:	d5c1      	bpl.n	1dadc <_strtod_l+0x84>
   1db58:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1db5c:	e7be      	b.n	1dadc <_strtod_l+0x84>
   1db5e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   1db62:	e7f7      	b.n	1db54 <_strtod_l+0xfc>
   1db64:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   1db68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1db6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1db6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1db72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1db76:	e7ed      	b.n	1db54 <_strtod_l+0xfc>
   1db78:	f8df b188 	ldr.w	fp, [pc, #392]	; 1dd04 <_strtod_l+0x2ac>
   1db7c:	f04f 0a00 	mov.w	sl, #0
   1db80:	e7e8      	b.n	1db54 <_strtod_l+0xfc>
   1db82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1db86:	f04f 3aff 	mov.w	sl, #4294967295
   1db8a:	e7e3      	b.n	1db54 <_strtod_l+0xfc>
   1db8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1db8e:	1c5a      	adds	r2, r3, #1
   1db90:	921d      	str	r2, [sp, #116]	; 0x74
   1db92:	785b      	ldrb	r3, [r3, #1]
   1db94:	2b30      	cmp	r3, #48	; 0x30
   1db96:	d0f9      	beq.n	1db8c <_strtod_l+0x134>
   1db98:	2b00      	cmp	r3, #0
   1db9a:	d09f      	beq.n	1dadc <_strtod_l+0x84>
   1db9c:	2301      	movs	r3, #1
   1db9e:	f04f 0900 	mov.w	r9, #0
   1dba2:	9304      	str	r3, [sp, #16]
   1dba4:	220a      	movs	r2, #10
   1dba6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dba8:	464f      	mov	r7, r9
   1dbaa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1dbae:	930a      	str	r3, [sp, #40]	; 0x28
   1dbb0:	981d      	ldr	r0, [sp, #116]	; 0x74
   1dbb2:	7806      	ldrb	r6, [r0, #0]
   1dbb4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1dbb8:	b2d9      	uxtb	r1, r3
   1dbba:	2909      	cmp	r1, #9
   1dbbc:	d92b      	bls.n	1dc16 <_strtod_l+0x1be>
   1dbbe:	462a      	mov	r2, r5
   1dbc0:	9907      	ldr	r1, [sp, #28]
   1dbc2:	f020 fb8d 	bl	3e2e0 <strncmp>
   1dbc6:	2800      	cmp	r0, #0
   1dbc8:	d034      	beq.n	1dc34 <_strtod_l+0x1dc>
   1dbca:	2000      	movs	r0, #0
   1dbcc:	4633      	mov	r3, r6
   1dbce:	463d      	mov	r5, r7
   1dbd0:	4602      	mov	r2, r0
   1dbd2:	9007      	str	r0, [sp, #28]
   1dbd4:	2b65      	cmp	r3, #101	; 0x65
   1dbd6:	d001      	beq.n	1dbdc <_strtod_l+0x184>
   1dbd8:	2b45      	cmp	r3, #69	; 0x45
   1dbda:	d118      	bne.n	1dc0e <_strtod_l+0x1b6>
   1dbdc:	b91d      	cbnz	r5, 1dbe6 <_strtod_l+0x18e>
   1dbde:	9b04      	ldr	r3, [sp, #16]
   1dbe0:	4303      	orrs	r3, r0
   1dbe2:	d097      	beq.n	1db14 <_strtod_l+0xbc>
   1dbe4:	2500      	movs	r5, #0
   1dbe6:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   1dbea:	f108 0301 	add.w	r3, r8, #1
   1dbee:	931d      	str	r3, [sp, #116]	; 0x74
   1dbf0:	f898 3001 	ldrb.w	r3, [r8, #1]
   1dbf4:	2b2b      	cmp	r3, #43	; 0x2b
   1dbf6:	d075      	beq.n	1dce4 <_strtod_l+0x28c>
   1dbf8:	2b2d      	cmp	r3, #45	; 0x2d
   1dbfa:	d07b      	beq.n	1dcf4 <_strtod_l+0x29c>
   1dbfc:	f04f 0c00 	mov.w	ip, #0
   1dc00:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1dc04:	2909      	cmp	r1, #9
   1dc06:	f240 8083 	bls.w	1dd10 <_strtod_l+0x2b8>
   1dc0a:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1dc0e:	2600      	movs	r6, #0
   1dc10:	e09e      	b.n	1dd50 <_strtod_l+0x2f8>
   1dc12:	2300      	movs	r3, #0
   1dc14:	e7c3      	b.n	1db9e <_strtod_l+0x146>
   1dc16:	2f08      	cmp	r7, #8
   1dc18:	f100 0001 	add.w	r0, r0, #1
   1dc1c:	f107 0701 	add.w	r7, r7, #1
   1dc20:	bfd4      	ite	le
   1dc22:	9909      	ldrle	r1, [sp, #36]	; 0x24
   1dc24:	fb02 3909 	mlagt	r9, r2, r9, r3
   1dc28:	901d      	str	r0, [sp, #116]	; 0x74
   1dc2a:	bfdc      	itt	le
   1dc2c:	fb02 3301 	mlale	r3, r2, r1, r3
   1dc30:	9309      	strle	r3, [sp, #36]	; 0x24
   1dc32:	e7bd      	b.n	1dbb0 <_strtod_l+0x158>
   1dc34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dc36:	195a      	adds	r2, r3, r5
   1dc38:	921d      	str	r2, [sp, #116]	; 0x74
   1dc3a:	5d5b      	ldrb	r3, [r3, r5]
   1dc3c:	2f00      	cmp	r7, #0
   1dc3e:	d036      	beq.n	1dcae <_strtod_l+0x256>
   1dc40:	463d      	mov	r5, r7
   1dc42:	9007      	str	r0, [sp, #28]
   1dc44:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1dc48:	2a09      	cmp	r2, #9
   1dc4a:	d912      	bls.n	1dc72 <_strtod_l+0x21a>
   1dc4c:	2201      	movs	r2, #1
   1dc4e:	e7c1      	b.n	1dbd4 <_strtod_l+0x17c>
   1dc50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dc52:	3001      	adds	r0, #1
   1dc54:	1c5a      	adds	r2, r3, #1
   1dc56:	921d      	str	r2, [sp, #116]	; 0x74
   1dc58:	785b      	ldrb	r3, [r3, #1]
   1dc5a:	2b30      	cmp	r3, #48	; 0x30
   1dc5c:	d0f8      	beq.n	1dc50 <_strtod_l+0x1f8>
   1dc5e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1dc62:	2a08      	cmp	r2, #8
   1dc64:	f200 84dd 	bhi.w	1e622 <_strtod_l+0xbca>
   1dc68:	9007      	str	r0, [sp, #28]
   1dc6a:	2000      	movs	r0, #0
   1dc6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1dc6e:	4605      	mov	r5, r0
   1dc70:	920a      	str	r2, [sp, #40]	; 0x28
   1dc72:	3b30      	subs	r3, #48	; 0x30
   1dc74:	f100 0201 	add.w	r2, r0, #1
   1dc78:	d013      	beq.n	1dca2 <_strtod_l+0x24a>
   1dc7a:	9907      	ldr	r1, [sp, #28]
   1dc7c:	eb00 0e05 	add.w	lr, r0, r5
   1dc80:	4411      	add	r1, r2
   1dc82:	462a      	mov	r2, r5
   1dc84:	9107      	str	r1, [sp, #28]
   1dc86:	210a      	movs	r1, #10
   1dc88:	4572      	cmp	r2, lr
   1dc8a:	d112      	bne.n	1dcb2 <_strtod_l+0x25a>
   1dc8c:	182a      	adds	r2, r5, r0
   1dc8e:	3501      	adds	r5, #1
   1dc90:	2a08      	cmp	r2, #8
   1dc92:	4405      	add	r5, r0
   1dc94:	dc1c      	bgt.n	1dcd0 <_strtod_l+0x278>
   1dc96:	9909      	ldr	r1, [sp, #36]	; 0x24
   1dc98:	220a      	movs	r2, #10
   1dc9a:	fb02 3301 	mla	r3, r2, r1, r3
   1dc9e:	9309      	str	r3, [sp, #36]	; 0x24
   1dca0:	2200      	movs	r2, #0
   1dca2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dca4:	4610      	mov	r0, r2
   1dca6:	1c59      	adds	r1, r3, #1
   1dca8:	911d      	str	r1, [sp, #116]	; 0x74
   1dcaa:	785b      	ldrb	r3, [r3, #1]
   1dcac:	e7ca      	b.n	1dc44 <_strtod_l+0x1ec>
   1dcae:	4638      	mov	r0, r7
   1dcb0:	e7d3      	b.n	1dc5a <_strtod_l+0x202>
   1dcb2:	2a08      	cmp	r2, #8
   1dcb4:	dc04      	bgt.n	1dcc0 <_strtod_l+0x268>
   1dcb6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1dcb8:	434e      	muls	r6, r1
   1dcba:	9609      	str	r6, [sp, #36]	; 0x24
   1dcbc:	3201      	adds	r2, #1
   1dcbe:	e7e3      	b.n	1dc88 <_strtod_l+0x230>
   1dcc0:	f102 0c01 	add.w	ip, r2, #1
   1dcc4:	f1bc 0f10 	cmp.w	ip, #16
   1dcc8:	bfd8      	it	le
   1dcca:	fb01 f909 	mulle.w	r9, r1, r9
   1dcce:	e7f5      	b.n	1dcbc <_strtod_l+0x264>
   1dcd0:	2d10      	cmp	r5, #16
   1dcd2:	bfdc      	itt	le
   1dcd4:	220a      	movle	r2, #10
   1dcd6:	fb02 3909 	mlale	r9, r2, r9, r3
   1dcda:	e7e1      	b.n	1dca0 <_strtod_l+0x248>
   1dcdc:	2300      	movs	r3, #0
   1dcde:	2201      	movs	r2, #1
   1dce0:	9307      	str	r3, [sp, #28]
   1dce2:	e77c      	b.n	1dbde <_strtod_l+0x186>
   1dce4:	f04f 0c00 	mov.w	ip, #0
   1dce8:	f108 0302 	add.w	r3, r8, #2
   1dcec:	931d      	str	r3, [sp, #116]	; 0x74
   1dcee:	f898 3002 	ldrb.w	r3, [r8, #2]
   1dcf2:	e785      	b.n	1dc00 <_strtod_l+0x1a8>
   1dcf4:	f04f 0c01 	mov.w	ip, #1
   1dcf8:	e7f6      	b.n	1dce8 <_strtod_l+0x290>
   1dcfa:	bf00      	nop
   1dcfc:	00040294 	.word	0x00040294
   1dd00:	0004020c 	.word	0x0004020c
   1dd04:	7ff00000 	.word	0x7ff00000
   1dd08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dd0a:	1c59      	adds	r1, r3, #1
   1dd0c:	911d      	str	r1, [sp, #116]	; 0x74
   1dd0e:	785b      	ldrb	r3, [r3, #1]
   1dd10:	2b30      	cmp	r3, #48	; 0x30
   1dd12:	d0f9      	beq.n	1dd08 <_strtod_l+0x2b0>
   1dd14:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   1dd18:	2908      	cmp	r1, #8
   1dd1a:	f63f af78 	bhi.w	1dc0e <_strtod_l+0x1b6>
   1dd1e:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   1dd22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dd24:	9308      	str	r3, [sp, #32]
   1dd26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dd28:	1c59      	adds	r1, r3, #1
   1dd2a:	911d      	str	r1, [sp, #116]	; 0x74
   1dd2c:	785b      	ldrb	r3, [r3, #1]
   1dd2e:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1dd32:	2e09      	cmp	r6, #9
   1dd34:	d937      	bls.n	1dda6 <_strtod_l+0x34e>
   1dd36:	9e08      	ldr	r6, [sp, #32]
   1dd38:	1b89      	subs	r1, r1, r6
   1dd3a:	f644 661f 	movw	r6, #19999	; 0x4e1f
   1dd3e:	2908      	cmp	r1, #8
   1dd40:	dc02      	bgt.n	1dd48 <_strtod_l+0x2f0>
   1dd42:	4576      	cmp	r6, lr
   1dd44:	bfa8      	it	ge
   1dd46:	4676      	movge	r6, lr
   1dd48:	f1bc 0f00 	cmp.w	ip, #0
   1dd4c:	d000      	beq.n	1dd50 <_strtod_l+0x2f8>
   1dd4e:	4276      	negs	r6, r6
   1dd50:	2d00      	cmp	r5, #0
   1dd52:	d14f      	bne.n	1ddf4 <_strtod_l+0x39c>
   1dd54:	9904      	ldr	r1, [sp, #16]
   1dd56:	4301      	orrs	r1, r0
   1dd58:	f47f aec0 	bne.w	1dadc <_strtod_l+0x84>
   1dd5c:	2a00      	cmp	r2, #0
   1dd5e:	f47f aed9 	bne.w	1db14 <_strtod_l+0xbc>
   1dd62:	2b69      	cmp	r3, #105	; 0x69
   1dd64:	d027      	beq.n	1ddb6 <_strtod_l+0x35e>
   1dd66:	dc24      	bgt.n	1ddb2 <_strtod_l+0x35a>
   1dd68:	2b49      	cmp	r3, #73	; 0x49
   1dd6a:	d024      	beq.n	1ddb6 <_strtod_l+0x35e>
   1dd6c:	2b4e      	cmp	r3, #78	; 0x4e
   1dd6e:	f47f aed1 	bne.w	1db14 <_strtod_l+0xbc>
   1dd72:	499f      	ldr	r1, [pc, #636]	; (1dff0 <_strtod_l+0x598>)
   1dd74:	a81d      	add	r0, sp, #116	; 0x74
   1dd76:	f020 fc5f 	bl	3e638 <__match>
   1dd7a:	2800      	cmp	r0, #0
   1dd7c:	f43f aeca 	beq.w	1db14 <_strtod_l+0xbc>
   1dd80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1dd82:	781b      	ldrb	r3, [r3, #0]
   1dd84:	2b28      	cmp	r3, #40	; 0x28
   1dd86:	d12d      	bne.n	1dde4 <_strtod_l+0x38c>
   1dd88:	aa20      	add	r2, sp, #128	; 0x80
   1dd8a:	499a      	ldr	r1, [pc, #616]	; (1dff4 <_strtod_l+0x59c>)
   1dd8c:	a81d      	add	r0, sp, #116	; 0x74
   1dd8e:	f020 fc67 	bl	3e660 <__hexnan>
   1dd92:	2805      	cmp	r0, #5
   1dd94:	d126      	bne.n	1dde4 <_strtod_l+0x38c>
   1dd96:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1dd98:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   1dd9c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1dda0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1dda4:	e69a      	b.n	1dadc <_strtod_l+0x84>
   1dda6:	210a      	movs	r1, #10
   1dda8:	fb01 3e0e 	mla	lr, r1, lr, r3
   1ddac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   1ddb0:	e7b9      	b.n	1dd26 <_strtod_l+0x2ce>
   1ddb2:	2b6e      	cmp	r3, #110	; 0x6e
   1ddb4:	e7db      	b.n	1dd6e <_strtod_l+0x316>
   1ddb6:	4990      	ldr	r1, [pc, #576]	; (1dff8 <_strtod_l+0x5a0>)
   1ddb8:	a81d      	add	r0, sp, #116	; 0x74
   1ddba:	f020 fc3d 	bl	3e638 <__match>
   1ddbe:	2800      	cmp	r0, #0
   1ddc0:	f43f aea8 	beq.w	1db14 <_strtod_l+0xbc>
   1ddc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ddc6:	a81d      	add	r0, sp, #116	; 0x74
   1ddc8:	498c      	ldr	r1, [pc, #560]	; (1dffc <_strtod_l+0x5a4>)
   1ddca:	3b01      	subs	r3, #1
   1ddcc:	931d      	str	r3, [sp, #116]	; 0x74
   1ddce:	f020 fc33 	bl	3e638 <__match>
   1ddd2:	b910      	cbnz	r0, 1ddda <_strtod_l+0x382>
   1ddd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1ddd6:	3301      	adds	r3, #1
   1ddd8:	931d      	str	r3, [sp, #116]	; 0x74
   1ddda:	f8df b230 	ldr.w	fp, [pc, #560]	; 1e00c <_strtod_l+0x5b4>
   1ddde:	f04f 0a00 	mov.w	sl, #0
   1dde2:	e67b      	b.n	1dadc <_strtod_l+0x84>
   1dde4:	4886      	ldr	r0, [pc, #536]	; (1e000 <_strtod_l+0x5a8>)
   1dde6:	f001 fa23 	bl	1f230 <nan>
   1ddea:	ed8d 0b04 	vstr	d0, [sp, #16]
   1ddee:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   1ddf2:	e673      	b.n	1dadc <_strtod_l+0x84>
   1ddf4:	9b07      	ldr	r3, [sp, #28]
   1ddf6:	2f00      	cmp	r7, #0
   1ddf8:	bf08      	it	eq
   1ddfa:	462f      	moveq	r7, r5
   1ddfc:	2d10      	cmp	r5, #16
   1ddfe:	9809      	ldr	r0, [sp, #36]	; 0x24
   1de00:	eba6 0303 	sub.w	r3, r6, r3
   1de04:	46a8      	mov	r8, r5
   1de06:	bfa8      	it	ge
   1de08:	f04f 0810 	movge.w	r8, #16
   1de0c:	9308      	str	r3, [sp, #32]
   1de0e:	f7fe fc59 	bl	1c6c4 <__aeabi_ui2d>
   1de12:	2d09      	cmp	r5, #9
   1de14:	4682      	mov	sl, r0
   1de16:	468b      	mov	fp, r1
   1de18:	dd13      	ble.n	1de42 <_strtod_l+0x3ea>
   1de1a:	4b7a      	ldr	r3, [pc, #488]	; (1e004 <_strtod_l+0x5ac>)
   1de1c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   1de20:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1de24:	f7fe fcc8 	bl	1c7b8 <__aeabi_dmul>
   1de28:	4682      	mov	sl, r0
   1de2a:	468b      	mov	fp, r1
   1de2c:	4648      	mov	r0, r9
   1de2e:	f7fe fc49 	bl	1c6c4 <__aeabi_ui2d>
   1de32:	4602      	mov	r2, r0
   1de34:	460b      	mov	r3, r1
   1de36:	4650      	mov	r0, sl
   1de38:	4659      	mov	r1, fp
   1de3a:	f7fe fb07 	bl	1c44c <__adddf3>
   1de3e:	4682      	mov	sl, r0
   1de40:	468b      	mov	fp, r1
   1de42:	2d0f      	cmp	r5, #15
   1de44:	dc38      	bgt.n	1deb8 <_strtod_l+0x460>
   1de46:	9b08      	ldr	r3, [sp, #32]
   1de48:	2b00      	cmp	r3, #0
   1de4a:	f43f ae47 	beq.w	1dadc <_strtod_l+0x84>
   1de4e:	dd24      	ble.n	1de9a <_strtod_l+0x442>
   1de50:	2b16      	cmp	r3, #22
   1de52:	dc0b      	bgt.n	1de6c <_strtod_l+0x414>
   1de54:	4d6b      	ldr	r5, [pc, #428]	; (1e004 <_strtod_l+0x5ac>)
   1de56:	4652      	mov	r2, sl
   1de58:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   1de5c:	465b      	mov	r3, fp
   1de5e:	e9d5 0100 	ldrd	r0, r1, [r5]
   1de62:	f7fe fca9 	bl	1c7b8 <__aeabi_dmul>
   1de66:	4682      	mov	sl, r0
   1de68:	468b      	mov	fp, r1
   1de6a:	e637      	b.n	1dadc <_strtod_l+0x84>
   1de6c:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   1de70:	9a08      	ldr	r2, [sp, #32]
   1de72:	4293      	cmp	r3, r2
   1de74:	db20      	blt.n	1deb8 <_strtod_l+0x460>
   1de76:	f1c5 050f 	rsb	r5, r5, #15
   1de7a:	4c62      	ldr	r4, [pc, #392]	; (1e004 <_strtod_l+0x5ac>)
   1de7c:	4652      	mov	r2, sl
   1de7e:	465b      	mov	r3, fp
   1de80:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1de84:	e9d1 0100 	ldrd	r0, r1, [r1]
   1de88:	f7fe fc96 	bl	1c7b8 <__aeabi_dmul>
   1de8c:	9b08      	ldr	r3, [sp, #32]
   1de8e:	1b5d      	subs	r5, r3, r5
   1de90:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1de94:	e9d4 2300 	ldrd	r2, r3, [r4]
   1de98:	e7e3      	b.n	1de62 <_strtod_l+0x40a>
   1de9a:	9b08      	ldr	r3, [sp, #32]
   1de9c:	3316      	adds	r3, #22
   1de9e:	db0b      	blt.n	1deb8 <_strtod_l+0x460>
   1dea0:	9b07      	ldr	r3, [sp, #28]
   1dea2:	4650      	mov	r0, sl
   1dea4:	4a57      	ldr	r2, [pc, #348]	; (1e004 <_strtod_l+0x5ac>)
   1dea6:	4659      	mov	r1, fp
   1dea8:	1b9e      	subs	r6, r3, r6
   1deaa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   1deae:	e9d6 2300 	ldrd	r2, r3, [r6]
   1deb2:	f7fe fdab 	bl	1ca0c <__aeabi_ddiv>
   1deb6:	e7d6      	b.n	1de66 <_strtod_l+0x40e>
   1deb8:	eba5 0808 	sub.w	r8, r5, r8
   1debc:	9b08      	ldr	r3, [sp, #32]
   1debe:	4498      	add	r8, r3
   1dec0:	f1b8 0f00 	cmp.w	r8, #0
   1dec4:	dd71      	ble.n	1dfaa <_strtod_l+0x552>
   1dec6:	f018 030f 	ands.w	r3, r8, #15
   1deca:	d00a      	beq.n	1dee2 <_strtod_l+0x48a>
   1decc:	494d      	ldr	r1, [pc, #308]	; (1e004 <_strtod_l+0x5ac>)
   1dece:	4652      	mov	r2, sl
   1ded0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ded4:	465b      	mov	r3, fp
   1ded6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1deda:	f7fe fc6d 	bl	1c7b8 <__aeabi_dmul>
   1dede:	4682      	mov	sl, r0
   1dee0:	468b      	mov	fp, r1
   1dee2:	f038 080f 	bics.w	r8, r8, #15
   1dee6:	d04d      	beq.n	1df84 <_strtod_l+0x52c>
   1dee8:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   1deec:	dd22      	ble.n	1df34 <_strtod_l+0x4dc>
   1deee:	2500      	movs	r5, #0
   1def0:	462e      	mov	r6, r5
   1def2:	9509      	str	r5, [sp, #36]	; 0x24
   1def4:	9507      	str	r5, [sp, #28]
   1def6:	2322      	movs	r3, #34	; 0x22
   1def8:	f8df b110 	ldr.w	fp, [pc, #272]	; 1e00c <_strtod_l+0x5b4>
   1defc:	f04f 0a00 	mov.w	sl, #0
   1df00:	6023      	str	r3, [r4, #0]
   1df02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1df04:	2b00      	cmp	r3, #0
   1df06:	f43f ade9 	beq.w	1dadc <_strtod_l+0x84>
   1df0a:	991e      	ldr	r1, [sp, #120]	; 0x78
   1df0c:	4620      	mov	r0, r4
   1df0e:	f020 fcca 	bl	3e8a6 <_Bfree>
   1df12:	9907      	ldr	r1, [sp, #28]
   1df14:	4620      	mov	r0, r4
   1df16:	f020 fcc6 	bl	3e8a6 <_Bfree>
   1df1a:	4631      	mov	r1, r6
   1df1c:	4620      	mov	r0, r4
   1df1e:	f020 fcc2 	bl	3e8a6 <_Bfree>
   1df22:	9909      	ldr	r1, [sp, #36]	; 0x24
   1df24:	4620      	mov	r0, r4
   1df26:	f020 fcbe 	bl	3e8a6 <_Bfree>
   1df2a:	4629      	mov	r1, r5
   1df2c:	4620      	mov	r0, r4
   1df2e:	f020 fcba 	bl	3e8a6 <_Bfree>
   1df32:	e5d3      	b.n	1dadc <_strtod_l+0x84>
   1df34:	2300      	movs	r3, #0
   1df36:	ea4f 1828 	mov.w	r8, r8, asr #4
   1df3a:	4650      	mov	r0, sl
   1df3c:	4659      	mov	r1, fp
   1df3e:	4699      	mov	r9, r3
   1df40:	f1b8 0f01 	cmp.w	r8, #1
   1df44:	dc21      	bgt.n	1df8a <_strtod_l+0x532>
   1df46:	b10b      	cbz	r3, 1df4c <_strtod_l+0x4f4>
   1df48:	4682      	mov	sl, r0
   1df4a:	468b      	mov	fp, r1
   1df4c:	4b2e      	ldr	r3, [pc, #184]	; (1e008 <_strtod_l+0x5b0>)
   1df4e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1df52:	4652      	mov	r2, sl
   1df54:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   1df58:	465b      	mov	r3, fp
   1df5a:	e9d9 0100 	ldrd	r0, r1, [r9]
   1df5e:	f7fe fc2b 	bl	1c7b8 <__aeabi_dmul>
   1df62:	4b2a      	ldr	r3, [pc, #168]	; (1e00c <_strtod_l+0x5b4>)
   1df64:	460a      	mov	r2, r1
   1df66:	4682      	mov	sl, r0
   1df68:	400b      	ands	r3, r1
   1df6a:	4929      	ldr	r1, [pc, #164]	; (1e010 <_strtod_l+0x5b8>)
   1df6c:	428b      	cmp	r3, r1
   1df6e:	d8be      	bhi.n	1deee <_strtod_l+0x496>
   1df70:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1df74:	428b      	cmp	r3, r1
   1df76:	bf86      	itte	hi
   1df78:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 1e014 <_strtod_l+0x5bc>
   1df7c:	f04f 3aff 	movhi.w	sl, #4294967295
   1df80:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1df84:	2300      	movs	r3, #0
   1df86:	9304      	str	r3, [sp, #16]
   1df88:	e082      	b.n	1e090 <_strtod_l+0x638>
   1df8a:	f018 0f01 	tst.w	r8, #1
   1df8e:	d007      	beq.n	1dfa0 <_strtod_l+0x548>
   1df90:	4b1d      	ldr	r3, [pc, #116]	; (1e008 <_strtod_l+0x5b0>)
   1df92:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1df96:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df9a:	f7fe fc0d 	bl	1c7b8 <__aeabi_dmul>
   1df9e:	2301      	movs	r3, #1
   1dfa0:	f109 0901 	add.w	r9, r9, #1
   1dfa4:	ea4f 0868 	mov.w	r8, r8, asr #1
   1dfa8:	e7ca      	b.n	1df40 <_strtod_l+0x4e8>
   1dfaa:	d0eb      	beq.n	1df84 <_strtod_l+0x52c>
   1dfac:	f1c8 0800 	rsb	r8, r8, #0
   1dfb0:	f018 020f 	ands.w	r2, r8, #15
   1dfb4:	d00a      	beq.n	1dfcc <_strtod_l+0x574>
   1dfb6:	4b13      	ldr	r3, [pc, #76]	; (1e004 <_strtod_l+0x5ac>)
   1dfb8:	4650      	mov	r0, sl
   1dfba:	4659      	mov	r1, fp
   1dfbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1dfc4:	f7fe fd22 	bl	1ca0c <__aeabi_ddiv>
   1dfc8:	4682      	mov	sl, r0
   1dfca:	468b      	mov	fp, r1
   1dfcc:	ea5f 1828 	movs.w	r8, r8, asr #4
   1dfd0:	d0d8      	beq.n	1df84 <_strtod_l+0x52c>
   1dfd2:	f1b8 0f1f 	cmp.w	r8, #31
   1dfd6:	dd1f      	ble.n	1e018 <_strtod_l+0x5c0>
   1dfd8:	2500      	movs	r5, #0
   1dfda:	462e      	mov	r6, r5
   1dfdc:	9509      	str	r5, [sp, #36]	; 0x24
   1dfde:	9507      	str	r5, [sp, #28]
   1dfe0:	2322      	movs	r3, #34	; 0x22
   1dfe2:	f04f 0a00 	mov.w	sl, #0
   1dfe6:	f04f 0b00 	mov.w	fp, #0
   1dfea:	6023      	str	r3, [r4, #0]
   1dfec:	e789      	b.n	1df02 <_strtod_l+0x4aa>
   1dfee:	bf00      	nop
   1dff0:	000463c5 	.word	0x000463c5
   1dff4:	00040220 	.word	0x00040220
   1dff8:	00040809 	.word	0x00040809
   1dffc:	000463ed 	.word	0x000463ed
   1e000:	000408ea 	.word	0x000408ea
   1e004:	0003f858 	.word	0x0003f858
   1e008:	0003f830 	.word	0x0003f830
   1e00c:	7ff00000 	.word	0x7ff00000
   1e010:	7ca00000 	.word	0x7ca00000
   1e014:	7fefffff 	.word	0x7fefffff
   1e018:	f018 0310 	ands.w	r3, r8, #16
   1e01c:	4650      	mov	r0, sl
   1e01e:	4659      	mov	r1, fp
   1e020:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 1e3d8 <_strtod_l+0x980>
   1e024:	bf18      	it	ne
   1e026:	236a      	movne	r3, #106	; 0x6a
   1e028:	9304      	str	r3, [sp, #16]
   1e02a:	2300      	movs	r3, #0
   1e02c:	f018 0f01 	tst.w	r8, #1
   1e030:	d004      	beq.n	1e03c <_strtod_l+0x5e4>
   1e032:	e9d9 2300 	ldrd	r2, r3, [r9]
   1e036:	f7fe fbbf 	bl	1c7b8 <__aeabi_dmul>
   1e03a:	2301      	movs	r3, #1
   1e03c:	ea5f 0868 	movs.w	r8, r8, asr #1
   1e040:	f109 0908 	add.w	r9, r9, #8
   1e044:	d1f2      	bne.n	1e02c <_strtod_l+0x5d4>
   1e046:	b10b      	cbz	r3, 1e04c <_strtod_l+0x5f4>
   1e048:	4682      	mov	sl, r0
   1e04a:	468b      	mov	fp, r1
   1e04c:	9b04      	ldr	r3, [sp, #16]
   1e04e:	b1bb      	cbz	r3, 1e080 <_strtod_l+0x628>
   1e050:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1e054:	4659      	mov	r1, fp
   1e056:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1e05a:	2b00      	cmp	r3, #0
   1e05c:	dd10      	ble.n	1e080 <_strtod_l+0x628>
   1e05e:	2b1f      	cmp	r3, #31
   1e060:	f340 8127 	ble.w	1e2b2 <_strtod_l+0x85a>
   1e064:	2b34      	cmp	r3, #52	; 0x34
   1e066:	f04f 0a00 	mov.w	sl, #0
   1e06a:	bfdb      	ittet	le
   1e06c:	3b20      	suble	r3, #32
   1e06e:	f04f 32ff 	movle.w	r2, #4294967295
   1e072:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1e076:	fa02 f303 	lslle.w	r3, r2, r3
   1e07a:	bfd8      	it	le
   1e07c:	ea03 0b01 	andle.w	fp, r3, r1
   1e080:	2200      	movs	r2, #0
   1e082:	2300      	movs	r3, #0
   1e084:	4650      	mov	r0, sl
   1e086:	4659      	mov	r1, fp
   1e088:	f7fe fdfe 	bl	1cc88 <__aeabi_dcmpeq>
   1e08c:	2800      	cmp	r0, #0
   1e08e:	d1a3      	bne.n	1dfd8 <_strtod_l+0x580>
   1e090:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e092:	463a      	mov	r2, r7
   1e094:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e096:	4620      	mov	r0, r4
   1e098:	9300      	str	r3, [sp, #0]
   1e09a:	462b      	mov	r3, r5
   1e09c:	f020 fc59 	bl	3e952 <__s2b>
   1e0a0:	9009      	str	r0, [sp, #36]	; 0x24
   1e0a2:	2800      	cmp	r0, #0
   1e0a4:	f43f af23 	beq.w	1deee <_strtod_l+0x496>
   1e0a8:	9b07      	ldr	r3, [sp, #28]
   1e0aa:	2500      	movs	r5, #0
   1e0ac:	1b9e      	subs	r6, r3, r6
   1e0ae:	9b08      	ldr	r3, [sp, #32]
   1e0b0:	2b00      	cmp	r3, #0
   1e0b2:	bfb4      	ite	lt
   1e0b4:	4633      	movlt	r3, r6
   1e0b6:	2300      	movge	r3, #0
   1e0b8:	462e      	mov	r6, r5
   1e0ba:	9310      	str	r3, [sp, #64]	; 0x40
   1e0bc:	9b08      	ldr	r3, [sp, #32]
   1e0be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1e0c2:	9318      	str	r3, [sp, #96]	; 0x60
   1e0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e0c6:	4620      	mov	r0, r4
   1e0c8:	6859      	ldr	r1, [r3, #4]
   1e0ca:	f020 fbb8 	bl	3e83e <_Balloc>
   1e0ce:	9007      	str	r0, [sp, #28]
   1e0d0:	2800      	cmp	r0, #0
   1e0d2:	f43f af10 	beq.w	1def6 <_strtod_l+0x49e>
   1e0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e0d8:	300c      	adds	r0, #12
   1e0da:	691a      	ldr	r2, [r3, #16]
   1e0dc:	f103 010c 	add.w	r1, r3, #12
   1e0e0:	3202      	adds	r2, #2
   1e0e2:	0092      	lsls	r2, r2, #2
   1e0e4:	f01f ff41 	bl	3df6a <memcpy>
   1e0e8:	aa20      	add	r2, sp, #128	; 0x80
   1e0ea:	a91f      	add	r1, sp, #124	; 0x7c
   1e0ec:	4620      	mov	r0, r4
   1e0ee:	ec4b ab10 	vmov	d0, sl, fp
   1e0f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   1e0f6:	f020 fe56 	bl	3eda6 <__d2b>
   1e0fa:	901e      	str	r0, [sp, #120]	; 0x78
   1e0fc:	2800      	cmp	r0, #0
   1e0fe:	f43f aefa 	beq.w	1def6 <_strtod_l+0x49e>
   1e102:	2101      	movs	r1, #1
   1e104:	4620      	mov	r0, r4
   1e106:	f020 fcb2 	bl	3ea6e <__i2b>
   1e10a:	4606      	mov	r6, r0
   1e10c:	2800      	cmp	r0, #0
   1e10e:	f43f aef2 	beq.w	1def6 <_strtod_l+0x49e>
   1e112:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1e114:	9904      	ldr	r1, [sp, #16]
   1e116:	2b00      	cmp	r3, #0
   1e118:	eba3 0801 	sub.w	r8, r3, r1
   1e11c:	bfa9      	itett	ge
   1e11e:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   1e120:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   1e122:	eb03 0902 	addge.w	r9, r3, r2
   1e126:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   1e128:	bfb8      	it	lt
   1e12a:	1ad7      	sublt	r7, r2, r3
   1e12c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1e12e:	4ba5      	ldr	r3, [pc, #660]	; (1e3c4 <_strtod_l+0x96c>)
   1e130:	4490      	add	r8, r2
   1e132:	bfb8      	it	lt
   1e134:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   1e138:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1e13c:	f108 38ff 	add.w	r8, r8, #4294967295
   1e140:	4598      	cmp	r8, r3
   1e142:	f280 80ca 	bge.w	1e2da <_strtod_l+0x882>
   1e146:	eba3 0308 	sub.w	r3, r3, r8
   1e14a:	2101      	movs	r1, #1
   1e14c:	2b1f      	cmp	r3, #31
   1e14e:	eba2 0203 	sub.w	r2, r2, r3
   1e152:	f300 80b5 	bgt.w	1e2c0 <_strtod_l+0x868>
   1e156:	fa01 f303 	lsl.w	r3, r1, r3
   1e15a:	9311      	str	r3, [sp, #68]	; 0x44
   1e15c:	2300      	movs	r3, #0
   1e15e:	930c      	str	r3, [sp, #48]	; 0x30
   1e160:	eb09 0802 	add.w	r8, r9, r2
   1e164:	9b04      	ldr	r3, [sp, #16]
   1e166:	4417      	add	r7, r2
   1e168:	45c1      	cmp	r9, r8
   1e16a:	441f      	add	r7, r3
   1e16c:	464b      	mov	r3, r9
   1e16e:	bfa8      	it	ge
   1e170:	4643      	movge	r3, r8
   1e172:	42bb      	cmp	r3, r7
   1e174:	bfa8      	it	ge
   1e176:	463b      	movge	r3, r7
   1e178:	2b00      	cmp	r3, #0
   1e17a:	bfc2      	ittt	gt
   1e17c:	eba8 0803 	subgt.w	r8, r8, r3
   1e180:	1aff      	subgt	r7, r7, r3
   1e182:	eba9 0903 	subgt.w	r9, r9, r3
   1e186:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e188:	2b00      	cmp	r3, #0
   1e18a:	dd17      	ble.n	1e1bc <_strtod_l+0x764>
   1e18c:	4631      	mov	r1, r6
   1e18e:	461a      	mov	r2, r3
   1e190:	4620      	mov	r0, r4
   1e192:	f01a facd 	bl	38730 <__pow5mult>
   1e196:	4606      	mov	r6, r0
   1e198:	2800      	cmp	r0, #0
   1e19a:	f43f aeac 	beq.w	1def6 <_strtod_l+0x49e>
   1e19e:	4601      	mov	r1, r0
   1e1a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1e1a2:	4620      	mov	r0, r4
   1e1a4:	f020 fc6c 	bl	3ea80 <__multiply>
   1e1a8:	900f      	str	r0, [sp, #60]	; 0x3c
   1e1aa:	2800      	cmp	r0, #0
   1e1ac:	f43f aea3 	beq.w	1def6 <_strtod_l+0x49e>
   1e1b0:	991e      	ldr	r1, [sp, #120]	; 0x78
   1e1b2:	4620      	mov	r0, r4
   1e1b4:	f020 fb77 	bl	3e8a6 <_Bfree>
   1e1b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e1ba:	931e      	str	r3, [sp, #120]	; 0x78
   1e1bc:	f1b8 0f00 	cmp.w	r8, #0
   1e1c0:	f300 8090 	bgt.w	1e2e4 <_strtod_l+0x88c>
   1e1c4:	9b08      	ldr	r3, [sp, #32]
   1e1c6:	2b00      	cmp	r3, #0
   1e1c8:	dd08      	ble.n	1e1dc <_strtod_l+0x784>
   1e1ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1e1cc:	4620      	mov	r0, r4
   1e1ce:	9907      	ldr	r1, [sp, #28]
   1e1d0:	f01a faae 	bl	38730 <__pow5mult>
   1e1d4:	9007      	str	r0, [sp, #28]
   1e1d6:	2800      	cmp	r0, #0
   1e1d8:	f43f ae8d 	beq.w	1def6 <_strtod_l+0x49e>
   1e1dc:	2f00      	cmp	r7, #0
   1e1de:	dd08      	ble.n	1e1f2 <_strtod_l+0x79a>
   1e1e0:	463a      	mov	r2, r7
   1e1e2:	9907      	ldr	r1, [sp, #28]
   1e1e4:	4620      	mov	r0, r4
   1e1e6:	f020 fce6 	bl	3ebb6 <__lshift>
   1e1ea:	9007      	str	r0, [sp, #28]
   1e1ec:	2800      	cmp	r0, #0
   1e1ee:	f43f ae82 	beq.w	1def6 <_strtod_l+0x49e>
   1e1f2:	f1b9 0f00 	cmp.w	r9, #0
   1e1f6:	dd08      	ble.n	1e20a <_strtod_l+0x7b2>
   1e1f8:	4631      	mov	r1, r6
   1e1fa:	464a      	mov	r2, r9
   1e1fc:	4620      	mov	r0, r4
   1e1fe:	f020 fcda 	bl	3ebb6 <__lshift>
   1e202:	4606      	mov	r6, r0
   1e204:	2800      	cmp	r0, #0
   1e206:	f43f ae76 	beq.w	1def6 <_strtod_l+0x49e>
   1e20a:	9a07      	ldr	r2, [sp, #28]
   1e20c:	4620      	mov	r0, r4
   1e20e:	991e      	ldr	r1, [sp, #120]	; 0x78
   1e210:	f020 fd4c 	bl	3ecac <__mdiff>
   1e214:	4605      	mov	r5, r0
   1e216:	2800      	cmp	r0, #0
   1e218:	f43f ae6d 	beq.w	1def6 <_strtod_l+0x49e>
   1e21c:	68c3      	ldr	r3, [r0, #12]
   1e21e:	4631      	mov	r1, r6
   1e220:	930f      	str	r3, [sp, #60]	; 0x3c
   1e222:	2300      	movs	r3, #0
   1e224:	60c3      	str	r3, [r0, #12]
   1e226:	f020 fd25 	bl	3ec74 <__mcmp>
   1e22a:	2800      	cmp	r0, #0
   1e22c:	da64      	bge.n	1e2f8 <_strtod_l+0x8a0>
   1e22e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e230:	ea53 030a 	orrs.w	r3, r3, sl
   1e234:	f040 8086 	bne.w	1e344 <_strtod_l+0x8ec>
   1e238:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1e23c:	2b00      	cmp	r3, #0
   1e23e:	f040 8081 	bne.w	1e344 <_strtod_l+0x8ec>
   1e242:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1e246:	0d1b      	lsrs	r3, r3, #20
   1e248:	051b      	lsls	r3, r3, #20
   1e24a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1e24e:	d979      	bls.n	1e344 <_strtod_l+0x8ec>
   1e250:	696b      	ldr	r3, [r5, #20]
   1e252:	b913      	cbnz	r3, 1e25a <_strtod_l+0x802>
   1e254:	692b      	ldr	r3, [r5, #16]
   1e256:	2b01      	cmp	r3, #1
   1e258:	dd74      	ble.n	1e344 <_strtod_l+0x8ec>
   1e25a:	4629      	mov	r1, r5
   1e25c:	2201      	movs	r2, #1
   1e25e:	4620      	mov	r0, r4
   1e260:	f020 fca9 	bl	3ebb6 <__lshift>
   1e264:	4631      	mov	r1, r6
   1e266:	4605      	mov	r5, r0
   1e268:	f020 fd04 	bl	3ec74 <__mcmp>
   1e26c:	2800      	cmp	r0, #0
   1e26e:	dd69      	ble.n	1e344 <_strtod_l+0x8ec>
   1e270:	9904      	ldr	r1, [sp, #16]
   1e272:	465b      	mov	r3, fp
   1e274:	4a54      	ldr	r2, [pc, #336]	; (1e3c8 <_strtod_l+0x970>)
   1e276:	2900      	cmp	r1, #0
   1e278:	f000 8084 	beq.w	1e384 <_strtod_l+0x92c>
   1e27c:	ea02 010b 	and.w	r1, r2, fp
   1e280:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1e284:	dc7e      	bgt.n	1e384 <_strtod_l+0x92c>
   1e286:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1e28a:	f77f aea9 	ble.w	1dfe0 <_strtod_l+0x588>
   1e28e:	2300      	movs	r3, #0
   1e290:	4a4e      	ldr	r2, [pc, #312]	; (1e3cc <_strtod_l+0x974>)
   1e292:	4650      	mov	r0, sl
   1e294:	4659      	mov	r1, fp
   1e296:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   1e29a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1e29e:	f7fe fa8b 	bl	1c7b8 <__aeabi_dmul>
   1e2a2:	460b      	mov	r3, r1
   1e2a4:	4682      	mov	sl, r0
   1e2a6:	468b      	mov	fp, r1
   1e2a8:	4303      	orrs	r3, r0
   1e2aa:	bf04      	itt	eq
   1e2ac:	2322      	moveq	r3, #34	; 0x22
   1e2ae:	6023      	streq	r3, [r4, #0]
   1e2b0:	e62b      	b.n	1df0a <_strtod_l+0x4b2>
   1e2b2:	f04f 32ff 	mov.w	r2, #4294967295
   1e2b6:	fa02 f303 	lsl.w	r3, r2, r3
   1e2ba:	ea03 0a0a 	and.w	sl, r3, sl
   1e2be:	e6df      	b.n	1e080 <_strtod_l+0x628>
   1e2c0:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   1e2c4:	9111      	str	r1, [sp, #68]	; 0x44
   1e2c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   1e2ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   1e2ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   1e2d2:	fa01 f308 	lsl.w	r3, r1, r8
   1e2d6:	930c      	str	r3, [sp, #48]	; 0x30
   1e2d8:	e742      	b.n	1e160 <_strtod_l+0x708>
   1e2da:	2300      	movs	r3, #0
   1e2dc:	930c      	str	r3, [sp, #48]	; 0x30
   1e2de:	2301      	movs	r3, #1
   1e2e0:	9311      	str	r3, [sp, #68]	; 0x44
   1e2e2:	e73d      	b.n	1e160 <_strtod_l+0x708>
   1e2e4:	4642      	mov	r2, r8
   1e2e6:	991e      	ldr	r1, [sp, #120]	; 0x78
   1e2e8:	4620      	mov	r0, r4
   1e2ea:	f020 fc64 	bl	3ebb6 <__lshift>
   1e2ee:	901e      	str	r0, [sp, #120]	; 0x78
   1e2f0:	2800      	cmp	r0, #0
   1e2f2:	f47f af67 	bne.w	1e1c4 <_strtod_l+0x76c>
   1e2f6:	e5fe      	b.n	1def6 <_strtod_l+0x49e>
   1e2f8:	465f      	mov	r7, fp
   1e2fa:	d16f      	bne.n	1e3dc <_strtod_l+0x984>
   1e2fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e2fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1e302:	b342      	cbz	r2, 1e356 <_strtod_l+0x8fe>
   1e304:	4a32      	ldr	r2, [pc, #200]	; (1e3d0 <_strtod_l+0x978>)
   1e306:	4293      	cmp	r3, r2
   1e308:	d128      	bne.n	1e35c <_strtod_l+0x904>
   1e30a:	9b04      	ldr	r3, [sp, #16]
   1e30c:	4650      	mov	r0, sl
   1e30e:	b1eb      	cbz	r3, 1e34c <_strtod_l+0x8f4>
   1e310:	4a2d      	ldr	r2, [pc, #180]	; (1e3c8 <_strtod_l+0x970>)
   1e312:	f04f 31ff 	mov.w	r1, #4294967295
   1e316:	403a      	ands	r2, r7
   1e318:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   1e31c:	d819      	bhi.n	1e352 <_strtod_l+0x8fa>
   1e31e:	0d12      	lsrs	r2, r2, #20
   1e320:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1e324:	fa01 f303 	lsl.w	r3, r1, r3
   1e328:	4298      	cmp	r0, r3
   1e32a:	d117      	bne.n	1e35c <_strtod_l+0x904>
   1e32c:	4b29      	ldr	r3, [pc, #164]	; (1e3d4 <_strtod_l+0x97c>)
   1e32e:	429f      	cmp	r7, r3
   1e330:	d102      	bne.n	1e338 <_strtod_l+0x8e0>
   1e332:	3001      	adds	r0, #1
   1e334:	f43f addf 	beq.w	1def6 <_strtod_l+0x49e>
   1e338:	4b23      	ldr	r3, [pc, #140]	; (1e3c8 <_strtod_l+0x970>)
   1e33a:	f04f 0a00 	mov.w	sl, #0
   1e33e:	403b      	ands	r3, r7
   1e340:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1e344:	9b04      	ldr	r3, [sp, #16]
   1e346:	2b00      	cmp	r3, #0
   1e348:	d1a1      	bne.n	1e28e <_strtod_l+0x836>
   1e34a:	e5de      	b.n	1df0a <_strtod_l+0x4b2>
   1e34c:	f04f 33ff 	mov.w	r3, #4294967295
   1e350:	e7ea      	b.n	1e328 <_strtod_l+0x8d0>
   1e352:	460b      	mov	r3, r1
   1e354:	e7e8      	b.n	1e328 <_strtod_l+0x8d0>
   1e356:	ea53 030a 	orrs.w	r3, r3, sl
   1e35a:	d089      	beq.n	1e270 <_strtod_l+0x818>
   1e35c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e35e:	b1db      	cbz	r3, 1e398 <_strtod_l+0x940>
   1e360:	423b      	tst	r3, r7
   1e362:	d0ef      	beq.n	1e344 <_strtod_l+0x8ec>
   1e364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e366:	4650      	mov	r0, sl
   1e368:	9a04      	ldr	r2, [sp, #16]
   1e36a:	4659      	mov	r1, fp
   1e36c:	b1c3      	cbz	r3, 1e3a0 <_strtod_l+0x948>
   1e36e:	f020 f800 	bl	3e372 <sulp>
   1e372:	4602      	mov	r2, r0
   1e374:	460b      	mov	r3, r1
   1e376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1e37a:	f7fe f867 	bl	1c44c <__adddf3>
   1e37e:	4682      	mov	sl, r0
   1e380:	468b      	mov	fp, r1
   1e382:	e7df      	b.n	1e344 <_strtod_l+0x8ec>
   1e384:	4013      	ands	r3, r2
   1e386:	f04f 3aff 	mov.w	sl, #4294967295
   1e38a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1e38e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1e392:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1e396:	e7d5      	b.n	1e344 <_strtod_l+0x8ec>
   1e398:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e39a:	ea13 0f0a 	tst.w	r3, sl
   1e39e:	e7e0      	b.n	1e362 <_strtod_l+0x90a>
   1e3a0:	f01f ffe7 	bl	3e372 <sulp>
   1e3a4:	4602      	mov	r2, r0
   1e3a6:	460b      	mov	r3, r1
   1e3a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1e3ac:	f7fe f84c 	bl	1c448 <__aeabi_dsub>
   1e3b0:	2200      	movs	r2, #0
   1e3b2:	2300      	movs	r3, #0
   1e3b4:	4682      	mov	sl, r0
   1e3b6:	468b      	mov	fp, r1
   1e3b8:	f7fe fc66 	bl	1cc88 <__aeabi_dcmpeq>
   1e3bc:	2800      	cmp	r0, #0
   1e3be:	d0c1      	beq.n	1e344 <_strtod_l+0x8ec>
   1e3c0:	e60e      	b.n	1dfe0 <_strtod_l+0x588>
   1e3c2:	bf00      	nop
   1e3c4:	fffffc02 	.word	0xfffffc02
   1e3c8:	7ff00000 	.word	0x7ff00000
   1e3cc:	39500000 	.word	0x39500000
   1e3d0:	000fffff 	.word	0x000fffff
   1e3d4:	7fefffff 	.word	0x7fefffff
   1e3d8:	0003f808 	.word	0x0003f808
   1e3dc:	4631      	mov	r1, r6
   1e3de:	4628      	mov	r0, r5
   1e3e0:	f020 fd31 	bl	3ee46 <__ratio>
   1e3e4:	2200      	movs	r2, #0
   1e3e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e3ea:	ee10 0a10 	vmov	r0, s0
   1e3ee:	ec59 8b10 	vmov	r8, r9, d0
   1e3f2:	4649      	mov	r1, r9
   1e3f4:	f7fe fc5c 	bl	1ccb0 <__aeabi_dcmple>
   1e3f8:	2800      	cmp	r0, #0
   1e3fa:	d07c      	beq.n	1e4f6 <_strtod_l+0xa9e>
   1e3fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e3fe:	2b00      	cmp	r3, #0
   1e400:	d04c      	beq.n	1e49c <_strtod_l+0xa44>
   1e402:	2200      	movs	r2, #0
   1e404:	4b94      	ldr	r3, [pc, #592]	; (1e658 <_strtod_l+0xc00>)
   1e406:	f04f 0800 	mov.w	r8, #0
   1e40a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 1e658 <_strtod_l+0xc00>
   1e40e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1e412:	4b92      	ldr	r3, [pc, #584]	; (1e65c <_strtod_l+0xc04>)
   1e414:	403b      	ands	r3, r7
   1e416:	9311      	str	r3, [sp, #68]	; 0x44
   1e418:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1e41a:	4b91      	ldr	r3, [pc, #580]	; (1e660 <_strtod_l+0xc08>)
   1e41c:	429a      	cmp	r2, r3
   1e41e:	f040 80b2 	bne.w	1e586 <_strtod_l+0xb2e>
   1e422:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   1e426:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1e42a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1e42e:	ec4b ab10 	vmov	d0, sl, fp
   1e432:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   1e436:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1e43a:	f01a f9c7 	bl	387cc <__ulp>
   1e43e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1e442:	ec53 2b10 	vmov	r2, r3, d0
   1e446:	f7fe f9b7 	bl	1c7b8 <__aeabi_dmul>
   1e44a:	4652      	mov	r2, sl
   1e44c:	465b      	mov	r3, fp
   1e44e:	f7fd fffd 	bl	1c44c <__adddf3>
   1e452:	460b      	mov	r3, r1
   1e454:	4981      	ldr	r1, [pc, #516]	; (1e65c <_strtod_l+0xc04>)
   1e456:	4682      	mov	sl, r0
   1e458:	4a82      	ldr	r2, [pc, #520]	; (1e664 <_strtod_l+0xc0c>)
   1e45a:	4019      	ands	r1, r3
   1e45c:	4291      	cmp	r1, r2
   1e45e:	d95e      	bls.n	1e51e <_strtod_l+0xac6>
   1e460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e462:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1e466:	4293      	cmp	r3, r2
   1e468:	d103      	bne.n	1e472 <_strtod_l+0xa1a>
   1e46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e46c:	3301      	adds	r3, #1
   1e46e:	f43f ad42 	beq.w	1def6 <_strtod_l+0x49e>
   1e472:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 1e670 <_strtod_l+0xc18>
   1e476:	f04f 3aff 	mov.w	sl, #4294967295
   1e47a:	991e      	ldr	r1, [sp, #120]	; 0x78
   1e47c:	4620      	mov	r0, r4
   1e47e:	f020 fa12 	bl	3e8a6 <_Bfree>
   1e482:	9907      	ldr	r1, [sp, #28]
   1e484:	4620      	mov	r0, r4
   1e486:	f020 fa0e 	bl	3e8a6 <_Bfree>
   1e48a:	4631      	mov	r1, r6
   1e48c:	4620      	mov	r0, r4
   1e48e:	f020 fa0a 	bl	3e8a6 <_Bfree>
   1e492:	4629      	mov	r1, r5
   1e494:	4620      	mov	r0, r4
   1e496:	f020 fa06 	bl	3e8a6 <_Bfree>
   1e49a:	e613      	b.n	1e0c4 <_strtod_l+0x66c>
   1e49c:	f1ba 0f00 	cmp.w	sl, #0
   1e4a0:	d11b      	bne.n	1e4da <_strtod_l+0xa82>
   1e4a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1e4a6:	b9f3      	cbnz	r3, 1e4e6 <_strtod_l+0xa8e>
   1e4a8:	2200      	movs	r2, #0
   1e4aa:	4b6b      	ldr	r3, [pc, #428]	; (1e658 <_strtod_l+0xc00>)
   1e4ac:	4640      	mov	r0, r8
   1e4ae:	4649      	mov	r1, r9
   1e4b0:	f7fe fbf4 	bl	1cc9c <__aeabi_dcmplt>
   1e4b4:	b9d0      	cbnz	r0, 1e4ec <_strtod_l+0xa94>
   1e4b6:	4640      	mov	r0, r8
   1e4b8:	4649      	mov	r1, r9
   1e4ba:	2200      	movs	r2, #0
   1e4bc:	4b6a      	ldr	r3, [pc, #424]	; (1e668 <_strtod_l+0xc10>)
   1e4be:	f7fe f97b 	bl	1c7b8 <__aeabi_dmul>
   1e4c2:	4680      	mov	r8, r0
   1e4c4:	4689      	mov	r9, r1
   1e4c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1e4ca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   1e4ce:	931b      	str	r3, [sp, #108]	; 0x6c
   1e4d0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   1e4d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1e4d8:	e79b      	b.n	1e412 <_strtod_l+0x9ba>
   1e4da:	f1ba 0f01 	cmp.w	sl, #1
   1e4de:	d102      	bne.n	1e4e6 <_strtod_l+0xa8e>
   1e4e0:	2f00      	cmp	r7, #0
   1e4e2:	f43f ad7d 	beq.w	1dfe0 <_strtod_l+0x588>
   1e4e6:	2200      	movs	r2, #0
   1e4e8:	4b60      	ldr	r3, [pc, #384]	; (1e66c <_strtod_l+0xc14>)
   1e4ea:	e78c      	b.n	1e406 <_strtod_l+0x9ae>
   1e4ec:	f04f 0800 	mov.w	r8, #0
   1e4f0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1e668 <_strtod_l+0xc10>
   1e4f4:	e7e7      	b.n	1e4c6 <_strtod_l+0xa6e>
   1e4f6:	4b5c      	ldr	r3, [pc, #368]	; (1e668 <_strtod_l+0xc10>)
   1e4f8:	4640      	mov	r0, r8
   1e4fa:	4649      	mov	r1, r9
   1e4fc:	2200      	movs	r2, #0
   1e4fe:	f7fe f95b 	bl	1c7b8 <__aeabi_dmul>
   1e502:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e504:	4680      	mov	r8, r0
   1e506:	4689      	mov	r9, r1
   1e508:	b933      	cbnz	r3, 1e518 <_strtod_l+0xac0>
   1e50a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e50e:	9012      	str	r0, [sp, #72]	; 0x48
   1e510:	9313      	str	r3, [sp, #76]	; 0x4c
   1e512:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1e516:	e7dd      	b.n	1e4d4 <_strtod_l+0xa7c>
   1e518:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   1e51c:	e7f9      	b.n	1e512 <_strtod_l+0xaba>
   1e51e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1e522:	9b04      	ldr	r3, [sp, #16]
   1e524:	2b00      	cmp	r3, #0
   1e526:	d1a8      	bne.n	1e47a <_strtod_l+0xa22>
   1e528:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1e52c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1e52e:	0d1b      	lsrs	r3, r3, #20
   1e530:	051b      	lsls	r3, r3, #20
   1e532:	429a      	cmp	r2, r3
   1e534:	d1a1      	bne.n	1e47a <_strtod_l+0xa22>
   1e536:	4640      	mov	r0, r8
   1e538:	4649      	mov	r1, r9
   1e53a:	f7fe fccd 	bl	1ced8 <__aeabi_d2lz>
   1e53e:	f7fe f90d 	bl	1c75c <__aeabi_l2d>
   1e542:	4602      	mov	r2, r0
   1e544:	460b      	mov	r3, r1
   1e546:	4640      	mov	r0, r8
   1e548:	4649      	mov	r1, r9
   1e54a:	f7fd ff7d 	bl	1c448 <__aeabi_dsub>
   1e54e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1e552:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e554:	4680      	mov	r8, r0
   1e556:	ea43 030a 	orr.w	r3, r3, sl
   1e55a:	4689      	mov	r9, r1
   1e55c:	4313      	orrs	r3, r2
   1e55e:	d053      	beq.n	1e608 <_strtod_l+0xbb0>
   1e560:	a335      	add	r3, pc, #212	; (adr r3, 1e638 <_strtod_l+0xbe0>)
   1e562:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e566:	f7fe fb99 	bl	1cc9c <__aeabi_dcmplt>
   1e56a:	2800      	cmp	r0, #0
   1e56c:	f47f accd 	bne.w	1df0a <_strtod_l+0x4b2>
   1e570:	4640      	mov	r0, r8
   1e572:	4649      	mov	r1, r9
   1e574:	a332      	add	r3, pc, #200	; (adr r3, 1e640 <_strtod_l+0xbe8>)
   1e576:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e57a:	f7fe fbad 	bl	1ccd8 <__aeabi_dcmpgt>
   1e57e:	2800      	cmp	r0, #0
   1e580:	f43f af7b 	beq.w	1e47a <_strtod_l+0xa22>
   1e584:	e4c1      	b.n	1df0a <_strtod_l+0x4b2>
   1e586:	9b04      	ldr	r3, [sp, #16]
   1e588:	b333      	cbz	r3, 1e5d8 <_strtod_l+0xb80>
   1e58a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e58c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1e590:	d822      	bhi.n	1e5d8 <_strtod_l+0xb80>
   1e592:	4640      	mov	r0, r8
   1e594:	4649      	mov	r1, r9
   1e596:	a32c      	add	r3, pc, #176	; (adr r3, 1e648 <_strtod_l+0xbf0>)
   1e598:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e59c:	f7fe fb88 	bl	1ccb0 <__aeabi_dcmple>
   1e5a0:	b1a0      	cbz	r0, 1e5cc <_strtod_l+0xb74>
   1e5a2:	4649      	mov	r1, r9
   1e5a4:	4640      	mov	r0, r8
   1e5a6:	f7fe fe2f 	bl	1d208 <__aeabi_d2uiz>
   1e5aa:	2801      	cmp	r0, #1
   1e5ac:	bf38      	it	cc
   1e5ae:	2001      	movcc	r0, #1
   1e5b0:	f7fe f888 	bl	1c6c4 <__aeabi_ui2d>
   1e5b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e5b6:	4680      	mov	r8, r0
   1e5b8:	4689      	mov	r9, r1
   1e5ba:	bb13      	cbnz	r3, 1e602 <_strtod_l+0xbaa>
   1e5bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e5c0:	9014      	str	r0, [sp, #80]	; 0x50
   1e5c2:	9315      	str	r3, [sp, #84]	; 0x54
   1e5c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1e5c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1e5cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e5ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1e5d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   1e5d4:	1a9b      	subs	r3, r3, r2
   1e5d6:	930d      	str	r3, [sp, #52]	; 0x34
   1e5d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1e5dc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1e5e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1e5e4:	f01a f8f2 	bl	387cc <__ulp>
   1e5e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1e5ec:	ec53 2b10 	vmov	r2, r3, d0
   1e5f0:	f7fe f8e2 	bl	1c7b8 <__aeabi_dmul>
   1e5f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1e5f8:	f7fd ff28 	bl	1c44c <__adddf3>
   1e5fc:	4682      	mov	sl, r0
   1e5fe:	468b      	mov	fp, r1
   1e600:	e78f      	b.n	1e522 <_strtod_l+0xaca>
   1e602:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   1e606:	e7dd      	b.n	1e5c4 <_strtod_l+0xb6c>
   1e608:	a311      	add	r3, pc, #68	; (adr r3, 1e650 <_strtod_l+0xbf8>)
   1e60a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e60e:	f7fe fb45 	bl	1cc9c <__aeabi_dcmplt>
   1e612:	e7b4      	b.n	1e57e <_strtod_l+0xb26>
   1e614:	2300      	movs	r3, #0
   1e616:	930e      	str	r3, [sp, #56]	; 0x38
   1e618:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e61a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1e61c:	6013      	str	r3, [r2, #0]
   1e61e:	f7ff ba61 	b.w	1dae4 <_strtod_l+0x8c>
   1e622:	2b65      	cmp	r3, #101	; 0x65
   1e624:	f43f ab5a 	beq.w	1dcdc <_strtod_l+0x284>
   1e628:	2b45      	cmp	r3, #69	; 0x45
   1e62a:	f43f ab57 	beq.w	1dcdc <_strtod_l+0x284>
   1e62e:	2201      	movs	r2, #1
   1e630:	f7ff bb90 	b.w	1dd54 <_strtod_l+0x2fc>
   1e634:	f3af 8000 	nop.w
   1e638:	94a03595 	.word	0x94a03595
   1e63c:	3fdfffff 	.word	0x3fdfffff
   1e640:	35afe535 	.word	0x35afe535
   1e644:	3fe00000 	.word	0x3fe00000
   1e648:	ffc00000 	.word	0xffc00000
   1e64c:	41dfffff 	.word	0x41dfffff
   1e650:	94a03595 	.word	0x94a03595
   1e654:	3fcfffff 	.word	0x3fcfffff
   1e658:	3ff00000 	.word	0x3ff00000
   1e65c:	7ff00000 	.word	0x7ff00000
   1e660:	7fe00000 	.word	0x7fe00000
   1e664:	7c9fffff 	.word	0x7c9fffff
   1e668:	3fe00000 	.word	0x3fe00000
   1e66c:	bff00000 	.word	0xbff00000
   1e670:	7fefffff 	.word	0x7fefffff
   1e674:	00000000 	.word	0x00000000

0001e678 <_dtoa_r>:
   1e678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e67c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1e67e:	4604      	mov	r4, r0
   1e680:	ed2d 8b02 	vpush	{d8}
   1e684:	b095      	sub	sp, #84	; 0x54
   1e686:	ec57 6b10 	vmov	r6, r7, d0
   1e68a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   1e68e:	9105      	str	r1, [sp, #20]
   1e690:	9209      	str	r2, [sp, #36]	; 0x24
   1e692:	930f      	str	r3, [sp, #60]	; 0x3c
   1e694:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1e698:	b93d      	cbnz	r5, 1e6aa <_dtoa_r+0x32>
   1e69a:	2010      	movs	r0, #16
   1e69c:	f018 fc68 	bl	36f70 <malloc>
   1e6a0:	6260      	str	r0, [r4, #36]	; 0x24
   1e6a2:	6005      	str	r5, [r0, #0]
   1e6a4:	60c5      	str	r5, [r0, #12]
   1e6a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1e6aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e6ac:	6819      	ldr	r1, [r3, #0]
   1e6ae:	b151      	cbz	r1, 1e6c6 <_dtoa_r+0x4e>
   1e6b0:	685a      	ldr	r2, [r3, #4]
   1e6b2:	2301      	movs	r3, #1
   1e6b4:	4620      	mov	r0, r4
   1e6b6:	4093      	lsls	r3, r2
   1e6b8:	604a      	str	r2, [r1, #4]
   1e6ba:	608b      	str	r3, [r1, #8]
   1e6bc:	f020 f8f3 	bl	3e8a6 <_Bfree>
   1e6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e6c2:	2200      	movs	r2, #0
   1e6c4:	601a      	str	r2, [r3, #0]
   1e6c6:	1e3b      	subs	r3, r7, #0
   1e6c8:	bfb7      	itett	lt
   1e6ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1e6ce:	2300      	movge	r3, #0
   1e6d0:	2201      	movlt	r2, #1
   1e6d2:	9303      	strlt	r3, [sp, #12]
   1e6d4:	bfa8      	it	ge
   1e6d6:	f8c8 3000 	strge.w	r3, [r8]
   1e6da:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1e6de:	4bb6      	ldr	r3, [pc, #728]	; (1e9b8 <_dtoa_r+0x340>)
   1e6e0:	bfb8      	it	lt
   1e6e2:	f8c8 2000 	strlt.w	r2, [r8]
   1e6e6:	ea33 0309 	bics.w	r3, r3, r9
   1e6ea:	d11b      	bne.n	1e724 <_dtoa_r+0xac>
   1e6ec:	f242 730f 	movw	r3, #9999	; 0x270f
   1e6f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e6f2:	6013      	str	r3, [r2, #0]
   1e6f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1e6f8:	4333      	orrs	r3, r6
   1e6fa:	f000 8572 	beq.w	1f1e2 <_dtoa_r+0xb6a>
   1e6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1e700:	b963      	cbnz	r3, 1e71c <_dtoa_r+0xa4>
   1e702:	4bae      	ldr	r3, [pc, #696]	; (1e9bc <_dtoa_r+0x344>)
   1e704:	e025      	b.n	1e752 <_dtoa_r+0xda>
   1e706:	4bae      	ldr	r3, [pc, #696]	; (1e9c0 <_dtoa_r+0x348>)
   1e708:	9300      	str	r3, [sp, #0]
   1e70a:	3308      	adds	r3, #8
   1e70c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1e70e:	6013      	str	r3, [r2, #0]
   1e710:	9800      	ldr	r0, [sp, #0]
   1e712:	b015      	add	sp, #84	; 0x54
   1e714:	ecbd 8b02 	vpop	{d8}
   1e718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e71c:	4ba7      	ldr	r3, [pc, #668]	; (1e9bc <_dtoa_r+0x344>)
   1e71e:	9300      	str	r3, [sp, #0]
   1e720:	3303      	adds	r3, #3
   1e722:	e7f3      	b.n	1e70c <_dtoa_r+0x94>
   1e724:	ed9d 7b02 	vldr	d7, [sp, #8]
   1e728:	2200      	movs	r2, #0
   1e72a:	2300      	movs	r3, #0
   1e72c:	ec51 0b17 	vmov	r0, r1, d7
   1e730:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1e734:	f7fe faa8 	bl	1cc88 <__aeabi_dcmpeq>
   1e738:	4680      	mov	r8, r0
   1e73a:	b160      	cbz	r0, 1e756 <_dtoa_r+0xde>
   1e73c:	2301      	movs	r3, #1
   1e73e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e740:	6013      	str	r3, [r2, #0]
   1e742:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1e744:	2b00      	cmp	r3, #0
   1e746:	f000 8549 	beq.w	1f1dc <_dtoa_r+0xb64>
   1e74a:	4b9e      	ldr	r3, [pc, #632]	; (1e9c4 <_dtoa_r+0x34c>)
   1e74c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1e74e:	6013      	str	r3, [r2, #0]
   1e750:	3b01      	subs	r3, #1
   1e752:	9300      	str	r3, [sp, #0]
   1e754:	e7dc      	b.n	1e710 <_dtoa_r+0x98>
   1e756:	f3c9 550a 	ubfx	r5, r9, #20, #11
   1e75a:	aa12      	add	r2, sp, #72	; 0x48
   1e75c:	a913      	add	r1, sp, #76	; 0x4c
   1e75e:	4620      	mov	r0, r4
   1e760:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1e764:	f020 fb1f 	bl	3eda6 <__d2b>
   1e768:	4682      	mov	sl, r0
   1e76a:	2d00      	cmp	r5, #0
   1e76c:	d07c      	beq.n	1e868 <_dtoa_r+0x1f0>
   1e76e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e770:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1e774:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   1e778:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1e77c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   1e780:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1e784:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1e788:	2200      	movs	r2, #0
   1e78a:	4b8f      	ldr	r3, [pc, #572]	; (1e9c8 <_dtoa_r+0x350>)
   1e78c:	4630      	mov	r0, r6
   1e78e:	4639      	mov	r1, r7
   1e790:	f7fd fe5a 	bl	1c448 <__aeabi_dsub>
   1e794:	a382      	add	r3, pc, #520	; (adr r3, 1e9a0 <_dtoa_r+0x328>)
   1e796:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e79a:	f7fe f80d 	bl	1c7b8 <__aeabi_dmul>
   1e79e:	a382      	add	r3, pc, #520	; (adr r3, 1e9a8 <_dtoa_r+0x330>)
   1e7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7a4:	f7fd fe52 	bl	1c44c <__adddf3>
   1e7a8:	4606      	mov	r6, r0
   1e7aa:	460f      	mov	r7, r1
   1e7ac:	4628      	mov	r0, r5
   1e7ae:	f7fd ff99 	bl	1c6e4 <__aeabi_i2d>
   1e7b2:	a37f      	add	r3, pc, #508	; (adr r3, 1e9b0 <_dtoa_r+0x338>)
   1e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7b8:	f7fd fffe 	bl	1c7b8 <__aeabi_dmul>
   1e7bc:	4602      	mov	r2, r0
   1e7be:	460b      	mov	r3, r1
   1e7c0:	4630      	mov	r0, r6
   1e7c2:	4639      	mov	r1, r7
   1e7c4:	f7fd fe42 	bl	1c44c <__adddf3>
   1e7c8:	4606      	mov	r6, r0
   1e7ca:	460f      	mov	r7, r1
   1e7cc:	f7fe faa4 	bl	1cd18 <__aeabi_d2iz>
   1e7d0:	2200      	movs	r2, #0
   1e7d2:	4681      	mov	r9, r0
   1e7d4:	2300      	movs	r3, #0
   1e7d6:	4630      	mov	r0, r6
   1e7d8:	4639      	mov	r1, r7
   1e7da:	f7fe fa5f 	bl	1cc9c <__aeabi_dcmplt>
   1e7de:	b148      	cbz	r0, 1e7f4 <_dtoa_r+0x17c>
   1e7e0:	4648      	mov	r0, r9
   1e7e2:	f7fd ff7f 	bl	1c6e4 <__aeabi_i2d>
   1e7e6:	4632      	mov	r2, r6
   1e7e8:	463b      	mov	r3, r7
   1e7ea:	f7fe fa4d 	bl	1cc88 <__aeabi_dcmpeq>
   1e7ee:	b908      	cbnz	r0, 1e7f4 <_dtoa_r+0x17c>
   1e7f0:	f109 39ff 	add.w	r9, r9, #4294967295
   1e7f4:	f1b9 0f16 	cmp.w	r9, #22
   1e7f8:	d855      	bhi.n	1e8a6 <_dtoa_r+0x22e>
   1e7fa:	4b74      	ldr	r3, [pc, #464]	; (1e9cc <_dtoa_r+0x354>)
   1e7fc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1e800:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1e804:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e808:	f7fe fa48 	bl	1cc9c <__aeabi_dcmplt>
   1e80c:	2800      	cmp	r0, #0
   1e80e:	d04c      	beq.n	1e8aa <_dtoa_r+0x232>
   1e810:	f109 39ff 	add.w	r9, r9, #4294967295
   1e814:	2300      	movs	r3, #0
   1e816:	930e      	str	r3, [sp, #56]	; 0x38
   1e818:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1e81a:	1b5d      	subs	r5, r3, r5
   1e81c:	1e6b      	subs	r3, r5, #1
   1e81e:	9304      	str	r3, [sp, #16]
   1e820:	bf45      	ittet	mi
   1e822:	2300      	movmi	r3, #0
   1e824:	f1c5 0801 	rsbmi	r8, r5, #1
   1e828:	f04f 0800 	movpl.w	r8, #0
   1e82c:	9304      	strmi	r3, [sp, #16]
   1e82e:	f1b9 0f00 	cmp.w	r9, #0
   1e832:	db3c      	blt.n	1e8ae <_dtoa_r+0x236>
   1e834:	9b04      	ldr	r3, [sp, #16]
   1e836:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1e83a:	444b      	add	r3, r9
   1e83c:	9304      	str	r3, [sp, #16]
   1e83e:	2300      	movs	r3, #0
   1e840:	9306      	str	r3, [sp, #24]
   1e842:	9b05      	ldr	r3, [sp, #20]
   1e844:	2b09      	cmp	r3, #9
   1e846:	f200 8099 	bhi.w	1e97c <_dtoa_r+0x304>
   1e84a:	2b05      	cmp	r3, #5
   1e84c:	bfc5      	ittet	gt
   1e84e:	3b04      	subgt	r3, #4
   1e850:	2500      	movgt	r5, #0
   1e852:	2501      	movle	r5, #1
   1e854:	9305      	strgt	r3, [sp, #20]
   1e856:	9b05      	ldr	r3, [sp, #20]
   1e858:	3b02      	subs	r3, #2
   1e85a:	2b03      	cmp	r3, #3
   1e85c:	f200 809a 	bhi.w	1e994 <_dtoa_r+0x31c>
   1e860:	e8df f003 	tbb	[pc, r3]
   1e864:	8a7c7e2d 	.word	0x8a7c7e2d
   1e868:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
   1e86c:	441d      	add	r5, r3
   1e86e:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1e872:	2b20      	cmp	r3, #32
   1e874:	bfc6      	itte	gt
   1e876:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1e87a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   1e87e:	f1c3 0320 	rsble	r3, r3, #32
   1e882:	f105 35ff 	add.w	r5, r5, #4294967295
   1e886:	bfc5      	ittet	gt
   1e888:	fa09 f303 	lslgt.w	r3, r9, r3
   1e88c:	fa26 f000 	lsrgt.w	r0, r6, r0
   1e890:	fa06 f003 	lslle.w	r0, r6, r3
   1e894:	4318      	orrgt	r0, r3
   1e896:	f7fd ff15 	bl	1c6c4 <__aeabi_ui2d>
   1e89a:	2301      	movs	r3, #1
   1e89c:	4606      	mov	r6, r0
   1e89e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1e8a2:	9310      	str	r3, [sp, #64]	; 0x40
   1e8a4:	e770      	b.n	1e788 <_dtoa_r+0x110>
   1e8a6:	2301      	movs	r3, #1
   1e8a8:	e7b5      	b.n	1e816 <_dtoa_r+0x19e>
   1e8aa:	900e      	str	r0, [sp, #56]	; 0x38
   1e8ac:	e7b4      	b.n	1e818 <_dtoa_r+0x1a0>
   1e8ae:	f1c9 0300 	rsb	r3, r9, #0
   1e8b2:	eba8 0809 	sub.w	r8, r8, r9
   1e8b6:	9306      	str	r3, [sp, #24]
   1e8b8:	2300      	movs	r3, #0
   1e8ba:	930d      	str	r3, [sp, #52]	; 0x34
   1e8bc:	e7c1      	b.n	1e842 <_dtoa_r+0x1ca>
   1e8be:	2300      	movs	r3, #0
   1e8c0:	9308      	str	r3, [sp, #32]
   1e8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e8c4:	2b00      	cmp	r3, #0
   1e8c6:	f300 8085 	bgt.w	1e9d4 <_dtoa_r+0x35c>
   1e8ca:	f04f 0b01 	mov.w	fp, #1
   1e8ce:	465b      	mov	r3, fp
   1e8d0:	f8cd b004 	str.w	fp, [sp, #4]
   1e8d4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   1e8d8:	2200      	movs	r2, #0
   1e8da:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1e8dc:	6072      	str	r2, [r6, #4]
   1e8de:	2204      	movs	r2, #4
   1e8e0:	f102 0014 	add.w	r0, r2, #20
   1e8e4:	6871      	ldr	r1, [r6, #4]
   1e8e6:	4298      	cmp	r0, r3
   1e8e8:	d97a      	bls.n	1e9e0 <_dtoa_r+0x368>
   1e8ea:	4620      	mov	r0, r4
   1e8ec:	f01f ffa7 	bl	3e83e <_Balloc>
   1e8f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e8f2:	6030      	str	r0, [r6, #0]
   1e8f4:	681b      	ldr	r3, [r3, #0]
   1e8f6:	9300      	str	r3, [sp, #0]
   1e8f8:	9b01      	ldr	r3, [sp, #4]
   1e8fa:	2b0e      	cmp	r3, #14
   1e8fc:	f200 80f5 	bhi.w	1eaea <_dtoa_r+0x472>
   1e900:	2d00      	cmp	r5, #0
   1e902:	f000 80f2 	beq.w	1eaea <_dtoa_r+0x472>
   1e906:	f1b9 0f00 	cmp.w	r9, #0
   1e90a:	dd7d      	ble.n	1ea08 <_dtoa_r+0x390>
   1e90c:	f009 030f 	and.w	r3, r9, #15
   1e910:	4a2e      	ldr	r2, [pc, #184]	; (1e9cc <_dtoa_r+0x354>)
   1e912:	f419 7f80 	tst.w	r9, #256	; 0x100
   1e916:	ea4f 1729 	mov.w	r7, r9, asr #4
   1e91a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1e91e:	ed93 7b00 	vldr	d7, [r3]
   1e922:	eeb0 8a47 	vmov.f32	s16, s14
   1e926:	eef0 8a67 	vmov.f32	s17, s15
   1e92a:	d05d      	beq.n	1e9e8 <_dtoa_r+0x370>
   1e92c:	4b28      	ldr	r3, [pc, #160]	; (1e9d0 <_dtoa_r+0x358>)
   1e92e:	f007 070f 	and.w	r7, r7, #15
   1e932:	2503      	movs	r5, #3
   1e934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1e938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1e93c:	f7fe f866 	bl	1ca0c <__aeabi_ddiv>
   1e940:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e944:	4e22      	ldr	r6, [pc, #136]	; (1e9d0 <_dtoa_r+0x358>)
   1e946:	2f00      	cmp	r7, #0
   1e948:	d150      	bne.n	1e9ec <_dtoa_r+0x374>
   1e94a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e94e:	ec53 2b18 	vmov	r2, r3, d8
   1e952:	f7fe f85b 	bl	1ca0c <__aeabi_ddiv>
   1e956:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e95a:	e06f      	b.n	1ea3c <_dtoa_r+0x3c4>
   1e95c:	2301      	movs	r3, #1
   1e95e:	e7af      	b.n	1e8c0 <_dtoa_r+0x248>
   1e960:	2300      	movs	r3, #0
   1e962:	9308      	str	r3, [sp, #32]
   1e964:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e966:	eb09 0b03 	add.w	fp, r9, r3
   1e96a:	f10b 0301 	add.w	r3, fp, #1
   1e96e:	2b01      	cmp	r3, #1
   1e970:	9301      	str	r3, [sp, #4]
   1e972:	bfb8      	it	lt
   1e974:	2301      	movlt	r3, #1
   1e976:	e7af      	b.n	1e8d8 <_dtoa_r+0x260>
   1e978:	2301      	movs	r3, #1
   1e97a:	e7f2      	b.n	1e962 <_dtoa_r+0x2ea>
   1e97c:	2501      	movs	r5, #1
   1e97e:	2300      	movs	r3, #0
   1e980:	9508      	str	r5, [sp, #32]
   1e982:	9305      	str	r3, [sp, #20]
   1e984:	f04f 3bff 	mov.w	fp, #4294967295
   1e988:	2200      	movs	r2, #0
   1e98a:	2312      	movs	r3, #18
   1e98c:	f8cd b004 	str.w	fp, [sp, #4]
   1e990:	9209      	str	r2, [sp, #36]	; 0x24
   1e992:	e7a1      	b.n	1e8d8 <_dtoa_r+0x260>
   1e994:	2301      	movs	r3, #1
   1e996:	9308      	str	r3, [sp, #32]
   1e998:	e7f4      	b.n	1e984 <_dtoa_r+0x30c>
   1e99a:	bf00      	nop
   1e99c:	f3af 8000 	nop.w
   1e9a0:	636f4361 	.word	0x636f4361
   1e9a4:	3fd287a7 	.word	0x3fd287a7
   1e9a8:	8b60c8b3 	.word	0x8b60c8b3
   1e9ac:	3fc68a28 	.word	0x3fc68a28
   1e9b0:	509f79fb 	.word	0x509f79fb
   1e9b4:	3fd34413 	.word	0x3fd34413
   1e9b8:	7ff00000 	.word	0x7ff00000
   1e9bc:	000463f3 	.word	0x000463f3
   1e9c0:	000463ea 	.word	0x000463ea
   1e9c4:	000451fd 	.word	0x000451fd
   1e9c8:	3ff80000 	.word	0x3ff80000
   1e9cc:	0003f858 	.word	0x0003f858
   1e9d0:	0003f830 	.word	0x0003f830
   1e9d4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   1e9d8:	465b      	mov	r3, fp
   1e9da:	f8cd b004 	str.w	fp, [sp, #4]
   1e9de:	e77b      	b.n	1e8d8 <_dtoa_r+0x260>
   1e9e0:	3101      	adds	r1, #1
   1e9e2:	0052      	lsls	r2, r2, #1
   1e9e4:	6071      	str	r1, [r6, #4]
   1e9e6:	e77b      	b.n	1e8e0 <_dtoa_r+0x268>
   1e9e8:	2502      	movs	r5, #2
   1e9ea:	e7ab      	b.n	1e944 <_dtoa_r+0x2cc>
   1e9ec:	07f9      	lsls	r1, r7, #31
   1e9ee:	d508      	bpl.n	1ea02 <_dtoa_r+0x38a>
   1e9f0:	3501      	adds	r5, #1
   1e9f2:	ec51 0b18 	vmov	r0, r1, d8
   1e9f6:	e9d6 2300 	ldrd	r2, r3, [r6]
   1e9fa:	f7fd fedd 	bl	1c7b8 <__aeabi_dmul>
   1e9fe:	ec41 0b18 	vmov	d8, r0, r1
   1ea02:	107f      	asrs	r7, r7, #1
   1ea04:	3608      	adds	r6, #8
   1ea06:	e79e      	b.n	1e946 <_dtoa_r+0x2ce>
   1ea08:	f000 80ab 	beq.w	1eb62 <_dtoa_r+0x4ea>
   1ea0c:	f1c9 0600 	rsb	r6, r9, #0
   1ea10:	4baa      	ldr	r3, [pc, #680]	; (1ecbc <_dtoa_r+0x644>)
   1ea12:	4fab      	ldr	r7, [pc, #684]	; (1ecc0 <_dtoa_r+0x648>)
   1ea14:	2502      	movs	r5, #2
   1ea16:	f006 020f 	and.w	r2, r6, #15
   1ea1a:	1136      	asrs	r6, r6, #4
   1ea1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ea20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1ea24:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ea28:	f7fd fec6 	bl	1c7b8 <__aeabi_dmul>
   1ea2c:	2300      	movs	r3, #0
   1ea2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ea32:	2e00      	cmp	r6, #0
   1ea34:	f040 808a 	bne.w	1eb4c <_dtoa_r+0x4d4>
   1ea38:	2b00      	cmp	r3, #0
   1ea3a:	d18c      	bne.n	1e956 <_dtoa_r+0x2de>
   1ea3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ea3e:	2b00      	cmp	r3, #0
   1ea40:	f000 8091 	beq.w	1eb66 <_dtoa_r+0x4ee>
   1ea44:	2200      	movs	r2, #0
   1ea46:	4b9f      	ldr	r3, [pc, #636]	; (1ecc4 <_dtoa_r+0x64c>)
   1ea48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ea4c:	4630      	mov	r0, r6
   1ea4e:	4639      	mov	r1, r7
   1ea50:	f7fe f924 	bl	1cc9c <__aeabi_dcmplt>
   1ea54:	2800      	cmp	r0, #0
   1ea56:	f000 8086 	beq.w	1eb66 <_dtoa_r+0x4ee>
   1ea5a:	9b01      	ldr	r3, [sp, #4]
   1ea5c:	2b00      	cmp	r3, #0
   1ea5e:	f000 8082 	beq.w	1eb66 <_dtoa_r+0x4ee>
   1ea62:	f1bb 0f00 	cmp.w	fp, #0
   1ea66:	dd3c      	ble.n	1eae2 <_dtoa_r+0x46a>
   1ea68:	f109 33ff 	add.w	r3, r9, #4294967295
   1ea6c:	3501      	adds	r5, #1
   1ea6e:	2200      	movs	r2, #0
   1ea70:	4630      	mov	r0, r6
   1ea72:	9307      	str	r3, [sp, #28]
   1ea74:	4639      	mov	r1, r7
   1ea76:	4b94      	ldr	r3, [pc, #592]	; (1ecc8 <_dtoa_r+0x650>)
   1ea78:	f7fd fe9e 	bl	1c7b8 <__aeabi_dmul>
   1ea7c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   1ea80:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ea84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ea88:	4628      	mov	r0, r5
   1ea8a:	f7fd fe2b 	bl	1c6e4 <__aeabi_i2d>
   1ea8e:	4632      	mov	r2, r6
   1ea90:	463b      	mov	r3, r7
   1ea92:	f7fd fe91 	bl	1c7b8 <__aeabi_dmul>
   1ea96:	4b8d      	ldr	r3, [pc, #564]	; (1eccc <_dtoa_r+0x654>)
   1ea98:	2200      	movs	r2, #0
   1ea9a:	f7fd fcd7 	bl	1c44c <__adddf3>
   1ea9e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   1eaa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1eaa6:	9303      	str	r3, [sp, #12]
   1eaa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1eaaa:	2b00      	cmp	r3, #0
   1eaac:	d160      	bne.n	1eb70 <_dtoa_r+0x4f8>
   1eaae:	2200      	movs	r2, #0
   1eab0:	4b87      	ldr	r3, [pc, #540]	; (1ecd0 <_dtoa_r+0x658>)
   1eab2:	4630      	mov	r0, r6
   1eab4:	4639      	mov	r1, r7
   1eab6:	f7fd fcc7 	bl	1c448 <__aeabi_dsub>
   1eaba:	4606      	mov	r6, r0
   1eabc:	460f      	mov	r7, r1
   1eabe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1eac2:	f7fe f909 	bl	1ccd8 <__aeabi_dcmpgt>
   1eac6:	2800      	cmp	r0, #0
   1eac8:	f040 8297 	bne.w	1effa <_dtoa_r+0x982>
   1eacc:	4630      	mov	r0, r6
   1eace:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1ead2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1ead6:	4639      	mov	r1, r7
   1ead8:	f7fe f8e0 	bl	1cc9c <__aeabi_dcmplt>
   1eadc:	2800      	cmp	r0, #0
   1eade:	f040 8289 	bne.w	1eff4 <_dtoa_r+0x97c>
   1eae2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1eae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1eaea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1eaec:	2b00      	cmp	r3, #0
   1eaee:	f2c0 815b 	blt.w	1eda8 <_dtoa_r+0x730>
   1eaf2:	f1b9 0f0e 	cmp.w	r9, #14
   1eaf6:	f300 8157 	bgt.w	1eda8 <_dtoa_r+0x730>
   1eafa:	4b70      	ldr	r3, [pc, #448]	; (1ecbc <_dtoa_r+0x644>)
   1eafc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1eb00:	ed93 7b00 	vldr	d7, [r3]
   1eb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1eb06:	2b00      	cmp	r3, #0
   1eb08:	eeb0 8a47 	vmov.f32	s16, s14
   1eb0c:	eef0 8a67 	vmov.f32	s17, s15
   1eb10:	f280 80e2 	bge.w	1ecd8 <_dtoa_r+0x660>
   1eb14:	9b01      	ldr	r3, [sp, #4]
   1eb16:	2b00      	cmp	r3, #0
   1eb18:	f300 80de 	bgt.w	1ecd8 <_dtoa_r+0x660>
   1eb1c:	f040 826a 	bne.w	1eff4 <_dtoa_r+0x97c>
   1eb20:	2200      	movs	r2, #0
   1eb22:	4b6b      	ldr	r3, [pc, #428]	; (1ecd0 <_dtoa_r+0x658>)
   1eb24:	ec51 0b17 	vmov	r0, r1, d7
   1eb28:	f7fd fe46 	bl	1c7b8 <__aeabi_dmul>
   1eb2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1eb30:	f7fe f8c8 	bl	1ccc4 <__aeabi_dcmpge>
   1eb34:	9e01      	ldr	r6, [sp, #4]
   1eb36:	4637      	mov	r7, r6
   1eb38:	2800      	cmp	r0, #0
   1eb3a:	f040 8240 	bne.w	1efbe <_dtoa_r+0x946>
   1eb3e:	9d00      	ldr	r5, [sp, #0]
   1eb40:	2331      	movs	r3, #49	; 0x31
   1eb42:	f109 0901 	add.w	r9, r9, #1
   1eb46:	f805 3b01 	strb.w	r3, [r5], #1
   1eb4a:	e23c      	b.n	1efc6 <_dtoa_r+0x94e>
   1eb4c:	07f2      	lsls	r2, r6, #31
   1eb4e:	d505      	bpl.n	1eb5c <_dtoa_r+0x4e4>
   1eb50:	3501      	adds	r5, #1
   1eb52:	e9d7 2300 	ldrd	r2, r3, [r7]
   1eb56:	f7fd fe2f 	bl	1c7b8 <__aeabi_dmul>
   1eb5a:	2301      	movs	r3, #1
   1eb5c:	1076      	asrs	r6, r6, #1
   1eb5e:	3708      	adds	r7, #8
   1eb60:	e767      	b.n	1ea32 <_dtoa_r+0x3ba>
   1eb62:	2502      	movs	r5, #2
   1eb64:	e76a      	b.n	1ea3c <_dtoa_r+0x3c4>
   1eb66:	9b01      	ldr	r3, [sp, #4]
   1eb68:	f8cd 901c 	str.w	r9, [sp, #28]
   1eb6c:	930c      	str	r3, [sp, #48]	; 0x30
   1eb6e:	e789      	b.n	1ea84 <_dtoa_r+0x40c>
   1eb70:	9900      	ldr	r1, [sp, #0]
   1eb72:	980c      	ldr	r0, [sp, #48]	; 0x30
   1eb74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1eb76:	4401      	add	r1, r0
   1eb78:	4b50      	ldr	r3, [pc, #320]	; (1ecbc <_dtoa_r+0x644>)
   1eb7a:	ed9d 7b02 	vldr	d7, [sp, #8]
   1eb7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1eb82:	9102      	str	r1, [sp, #8]
   1eb84:	9908      	ldr	r1, [sp, #32]
   1eb86:	eeb0 8a47 	vmov.f32	s16, s14
   1eb8a:	eef0 8a67 	vmov.f32	s17, s15
   1eb8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1eb92:	2900      	cmp	r1, #0
   1eb94:	d045      	beq.n	1ec22 <_dtoa_r+0x5aa>
   1eb96:	2000      	movs	r0, #0
   1eb98:	494e      	ldr	r1, [pc, #312]	; (1ecd4 <_dtoa_r+0x65c>)
   1eb9a:	f7fd ff37 	bl	1ca0c <__aeabi_ddiv>
   1eb9e:	ec53 2b18 	vmov	r2, r3, d8
   1eba2:	f7fd fc51 	bl	1c448 <__aeabi_dsub>
   1eba6:	9d00      	ldr	r5, [sp, #0]
   1eba8:	ec41 0b18 	vmov	d8, r0, r1
   1ebac:	4639      	mov	r1, r7
   1ebae:	4630      	mov	r0, r6
   1ebb0:	f7fe f8b2 	bl	1cd18 <__aeabi_d2iz>
   1ebb4:	900c      	str	r0, [sp, #48]	; 0x30
   1ebb6:	f7fd fd95 	bl	1c6e4 <__aeabi_i2d>
   1ebba:	4602      	mov	r2, r0
   1ebbc:	460b      	mov	r3, r1
   1ebbe:	4630      	mov	r0, r6
   1ebc0:	4639      	mov	r1, r7
   1ebc2:	f7fd fc41 	bl	1c448 <__aeabi_dsub>
   1ebc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ebc8:	4606      	mov	r6, r0
   1ebca:	460f      	mov	r7, r1
   1ebcc:	3330      	adds	r3, #48	; 0x30
   1ebce:	f805 3b01 	strb.w	r3, [r5], #1
   1ebd2:	ec53 2b18 	vmov	r2, r3, d8
   1ebd6:	f7fe f861 	bl	1cc9c <__aeabi_dcmplt>
   1ebda:	2800      	cmp	r0, #0
   1ebdc:	d164      	bne.n	1eca8 <_dtoa_r+0x630>
   1ebde:	4632      	mov	r2, r6
   1ebe0:	463b      	mov	r3, r7
   1ebe2:	2000      	movs	r0, #0
   1ebe4:	4937      	ldr	r1, [pc, #220]	; (1ecc4 <_dtoa_r+0x64c>)
   1ebe6:	f7fd fc2f 	bl	1c448 <__aeabi_dsub>
   1ebea:	ec53 2b18 	vmov	r2, r3, d8
   1ebee:	f7fe f855 	bl	1cc9c <__aeabi_dcmplt>
   1ebf2:	2800      	cmp	r0, #0
   1ebf4:	f040 80b8 	bne.w	1ed68 <_dtoa_r+0x6f0>
   1ebf8:	9b02      	ldr	r3, [sp, #8]
   1ebfa:	429d      	cmp	r5, r3
   1ebfc:	f43f af71 	beq.w	1eae2 <_dtoa_r+0x46a>
   1ec00:	2200      	movs	r2, #0
   1ec02:	4b31      	ldr	r3, [pc, #196]	; (1ecc8 <_dtoa_r+0x650>)
   1ec04:	ec51 0b18 	vmov	r0, r1, d8
   1ec08:	f7fd fdd6 	bl	1c7b8 <__aeabi_dmul>
   1ec0c:	2200      	movs	r2, #0
   1ec0e:	4b2e      	ldr	r3, [pc, #184]	; (1ecc8 <_dtoa_r+0x650>)
   1ec10:	ec41 0b18 	vmov	d8, r0, r1
   1ec14:	4630      	mov	r0, r6
   1ec16:	4639      	mov	r1, r7
   1ec18:	f7fd fdce 	bl	1c7b8 <__aeabi_dmul>
   1ec1c:	4606      	mov	r6, r0
   1ec1e:	460f      	mov	r7, r1
   1ec20:	e7c4      	b.n	1ebac <_dtoa_r+0x534>
   1ec22:	ec51 0b17 	vmov	r0, r1, d7
   1ec26:	f7fd fdc7 	bl	1c7b8 <__aeabi_dmul>
   1ec2a:	9b02      	ldr	r3, [sp, #8]
   1ec2c:	9d00      	ldr	r5, [sp, #0]
   1ec2e:	930c      	str	r3, [sp, #48]	; 0x30
   1ec30:	ec41 0b18 	vmov	d8, r0, r1
   1ec34:	4639      	mov	r1, r7
   1ec36:	4630      	mov	r0, r6
   1ec38:	f7fe f86e 	bl	1cd18 <__aeabi_d2iz>
   1ec3c:	9011      	str	r0, [sp, #68]	; 0x44
   1ec3e:	f7fd fd51 	bl	1c6e4 <__aeabi_i2d>
   1ec42:	4602      	mov	r2, r0
   1ec44:	460b      	mov	r3, r1
   1ec46:	4630      	mov	r0, r6
   1ec48:	4639      	mov	r1, r7
   1ec4a:	f7fd fbfd 	bl	1c448 <__aeabi_dsub>
   1ec4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ec50:	4606      	mov	r6, r0
   1ec52:	460f      	mov	r7, r1
   1ec54:	3330      	adds	r3, #48	; 0x30
   1ec56:	2200      	movs	r2, #0
   1ec58:	f805 3b01 	strb.w	r3, [r5], #1
   1ec5c:	9b02      	ldr	r3, [sp, #8]
   1ec5e:	429d      	cmp	r5, r3
   1ec60:	d125      	bne.n	1ecae <_dtoa_r+0x636>
   1ec62:	4b1c      	ldr	r3, [pc, #112]	; (1ecd4 <_dtoa_r+0x65c>)
   1ec64:	ec51 0b18 	vmov	r0, r1, d8
   1ec68:	f7fd fbf0 	bl	1c44c <__adddf3>
   1ec6c:	4602      	mov	r2, r0
   1ec6e:	460b      	mov	r3, r1
   1ec70:	4630      	mov	r0, r6
   1ec72:	4639      	mov	r1, r7
   1ec74:	f7fe f830 	bl	1ccd8 <__aeabi_dcmpgt>
   1ec78:	2800      	cmp	r0, #0
   1ec7a:	d175      	bne.n	1ed68 <_dtoa_r+0x6f0>
   1ec7c:	2000      	movs	r0, #0
   1ec7e:	4915      	ldr	r1, [pc, #84]	; (1ecd4 <_dtoa_r+0x65c>)
   1ec80:	ec53 2b18 	vmov	r2, r3, d8
   1ec84:	f7fd fbe0 	bl	1c448 <__aeabi_dsub>
   1ec88:	4602      	mov	r2, r0
   1ec8a:	460b      	mov	r3, r1
   1ec8c:	4630      	mov	r0, r6
   1ec8e:	4639      	mov	r1, r7
   1ec90:	f7fe f804 	bl	1cc9c <__aeabi_dcmplt>
   1ec94:	2800      	cmp	r0, #0
   1ec96:	f43f af24 	beq.w	1eae2 <_dtoa_r+0x46a>
   1ec9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1ec9c:	1e6b      	subs	r3, r5, #1
   1ec9e:	930c      	str	r3, [sp, #48]	; 0x30
   1eca0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1eca4:	2b30      	cmp	r3, #48	; 0x30
   1eca6:	d0f8      	beq.n	1ec9a <_dtoa_r+0x622>
   1eca8:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1ecac:	e04a      	b.n	1ed44 <_dtoa_r+0x6cc>
   1ecae:	4b06      	ldr	r3, [pc, #24]	; (1ecc8 <_dtoa_r+0x650>)
   1ecb0:	f7fd fd82 	bl	1c7b8 <__aeabi_dmul>
   1ecb4:	4606      	mov	r6, r0
   1ecb6:	460f      	mov	r7, r1
   1ecb8:	e7bc      	b.n	1ec34 <_dtoa_r+0x5bc>
   1ecba:	bf00      	nop
   1ecbc:	0003f858 	.word	0x0003f858
   1ecc0:	0003f830 	.word	0x0003f830
   1ecc4:	3ff00000 	.word	0x3ff00000
   1ecc8:	40240000 	.word	0x40240000
   1eccc:	401c0000 	.word	0x401c0000
   1ecd0:	40140000 	.word	0x40140000
   1ecd4:	3fe00000 	.word	0x3fe00000
   1ecd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1ecdc:	9d00      	ldr	r5, [sp, #0]
   1ecde:	4630      	mov	r0, r6
   1ece0:	4639      	mov	r1, r7
   1ece2:	ec53 2b18 	vmov	r2, r3, d8
   1ece6:	f7fd fe91 	bl	1ca0c <__aeabi_ddiv>
   1ecea:	f7fe f815 	bl	1cd18 <__aeabi_d2iz>
   1ecee:	4680      	mov	r8, r0
   1ecf0:	f7fd fcf8 	bl	1c6e4 <__aeabi_i2d>
   1ecf4:	ec53 2b18 	vmov	r2, r3, d8
   1ecf8:	f7fd fd5e 	bl	1c7b8 <__aeabi_dmul>
   1ecfc:	4602      	mov	r2, r0
   1ecfe:	4630      	mov	r0, r6
   1ed00:	f108 0630 	add.w	r6, r8, #48	; 0x30
   1ed04:	460b      	mov	r3, r1
   1ed06:	4639      	mov	r1, r7
   1ed08:	f7fd fb9e 	bl	1c448 <__aeabi_dsub>
   1ed0c:	f805 6b01 	strb.w	r6, [r5], #1
   1ed10:	9e00      	ldr	r6, [sp, #0]
   1ed12:	4602      	mov	r2, r0
   1ed14:	9f01      	ldr	r7, [sp, #4]
   1ed16:	460b      	mov	r3, r1
   1ed18:	1bae      	subs	r6, r5, r6
   1ed1a:	42b7      	cmp	r7, r6
   1ed1c:	d137      	bne.n	1ed8e <_dtoa_r+0x716>
   1ed1e:	f7fd fb95 	bl	1c44c <__adddf3>
   1ed22:	4606      	mov	r6, r0
   1ed24:	460f      	mov	r7, r1
   1ed26:	ec53 2b18 	vmov	r2, r3, d8
   1ed2a:	f7fd ffd5 	bl	1ccd8 <__aeabi_dcmpgt>
   1ed2e:	b9c8      	cbnz	r0, 1ed64 <_dtoa_r+0x6ec>
   1ed30:	4630      	mov	r0, r6
   1ed32:	4639      	mov	r1, r7
   1ed34:	ec53 2b18 	vmov	r2, r3, d8
   1ed38:	f7fd ffa6 	bl	1cc88 <__aeabi_dcmpeq>
   1ed3c:	b110      	cbz	r0, 1ed44 <_dtoa_r+0x6cc>
   1ed3e:	f018 0f01 	tst.w	r8, #1
   1ed42:	d10f      	bne.n	1ed64 <_dtoa_r+0x6ec>
   1ed44:	4620      	mov	r0, r4
   1ed46:	4651      	mov	r1, sl
   1ed48:	f01f fdad 	bl	3e8a6 <_Bfree>
   1ed4c:	2300      	movs	r3, #0
   1ed4e:	f109 0001 	add.w	r0, r9, #1
   1ed52:	702b      	strb	r3, [r5, #0]
   1ed54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ed56:	6018      	str	r0, [r3, #0]
   1ed58:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1ed5a:	2b00      	cmp	r3, #0
   1ed5c:	f43f acd8 	beq.w	1e710 <_dtoa_r+0x98>
   1ed60:	601d      	str	r5, [r3, #0]
   1ed62:	e4d5      	b.n	1e710 <_dtoa_r+0x98>
   1ed64:	f8cd 901c 	str.w	r9, [sp, #28]
   1ed68:	462b      	mov	r3, r5
   1ed6a:	461d      	mov	r5, r3
   1ed6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1ed70:	2a39      	cmp	r2, #57	; 0x39
   1ed72:	d108      	bne.n	1ed86 <_dtoa_r+0x70e>
   1ed74:	9a00      	ldr	r2, [sp, #0]
   1ed76:	429a      	cmp	r2, r3
   1ed78:	d1f7      	bne.n	1ed6a <_dtoa_r+0x6f2>
   1ed7a:	9a07      	ldr	r2, [sp, #28]
   1ed7c:	9900      	ldr	r1, [sp, #0]
   1ed7e:	3201      	adds	r2, #1
   1ed80:	9207      	str	r2, [sp, #28]
   1ed82:	2230      	movs	r2, #48	; 0x30
   1ed84:	700a      	strb	r2, [r1, #0]
   1ed86:	781a      	ldrb	r2, [r3, #0]
   1ed88:	3201      	adds	r2, #1
   1ed8a:	701a      	strb	r2, [r3, #0]
   1ed8c:	e78c      	b.n	1eca8 <_dtoa_r+0x630>
   1ed8e:	2200      	movs	r2, #0
   1ed90:	4b9c      	ldr	r3, [pc, #624]	; (1f004 <_dtoa_r+0x98c>)
   1ed92:	f7fd fd11 	bl	1c7b8 <__aeabi_dmul>
   1ed96:	2200      	movs	r2, #0
   1ed98:	2300      	movs	r3, #0
   1ed9a:	4606      	mov	r6, r0
   1ed9c:	460f      	mov	r7, r1
   1ed9e:	f7fd ff73 	bl	1cc88 <__aeabi_dcmpeq>
   1eda2:	2800      	cmp	r0, #0
   1eda4:	d09b      	beq.n	1ecde <_dtoa_r+0x666>
   1eda6:	e7cd      	b.n	1ed44 <_dtoa_r+0x6cc>
   1eda8:	9a08      	ldr	r2, [sp, #32]
   1edaa:	2a00      	cmp	r2, #0
   1edac:	f000 80c4 	beq.w	1ef38 <_dtoa_r+0x8c0>
   1edb0:	9a05      	ldr	r2, [sp, #20]
   1edb2:	2a01      	cmp	r2, #1
   1edb4:	f300 80a9 	bgt.w	1ef0a <_dtoa_r+0x892>
   1edb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1edba:	2a00      	cmp	r2, #0
   1edbc:	f000 80a1 	beq.w	1ef02 <_dtoa_r+0x88a>
   1edc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1edc4:	9e06      	ldr	r6, [sp, #24]
   1edc6:	4645      	mov	r5, r8
   1edc8:	9a04      	ldr	r2, [sp, #16]
   1edca:	2101      	movs	r1, #1
   1edcc:	4620      	mov	r0, r4
   1edce:	4498      	add	r8, r3
   1edd0:	441a      	add	r2, r3
   1edd2:	9204      	str	r2, [sp, #16]
   1edd4:	f01f fe4b 	bl	3ea6e <__i2b>
   1edd8:	4607      	mov	r7, r0
   1edda:	2d00      	cmp	r5, #0
   1eddc:	dd0b      	ble.n	1edf6 <_dtoa_r+0x77e>
   1edde:	9b04      	ldr	r3, [sp, #16]
   1ede0:	2b00      	cmp	r3, #0
   1ede2:	dd08      	ble.n	1edf6 <_dtoa_r+0x77e>
   1ede4:	42ab      	cmp	r3, r5
   1ede6:	9a04      	ldr	r2, [sp, #16]
   1ede8:	bfa8      	it	ge
   1edea:	462b      	movge	r3, r5
   1edec:	eba8 0803 	sub.w	r8, r8, r3
   1edf0:	1aed      	subs	r5, r5, r3
   1edf2:	1ad3      	subs	r3, r2, r3
   1edf4:	9304      	str	r3, [sp, #16]
   1edf6:	9b06      	ldr	r3, [sp, #24]
   1edf8:	b1fb      	cbz	r3, 1ee3a <_dtoa_r+0x7c2>
   1edfa:	9b08      	ldr	r3, [sp, #32]
   1edfc:	2b00      	cmp	r3, #0
   1edfe:	f000 809f 	beq.w	1ef40 <_dtoa_r+0x8c8>
   1ee02:	2e00      	cmp	r6, #0
   1ee04:	dd11      	ble.n	1ee2a <_dtoa_r+0x7b2>
   1ee06:	4639      	mov	r1, r7
   1ee08:	4632      	mov	r2, r6
   1ee0a:	4620      	mov	r0, r4
   1ee0c:	f019 fc90 	bl	38730 <__pow5mult>
   1ee10:	4652      	mov	r2, sl
   1ee12:	4601      	mov	r1, r0
   1ee14:	4607      	mov	r7, r0
   1ee16:	4620      	mov	r0, r4
   1ee18:	f01f fe32 	bl	3ea80 <__multiply>
   1ee1c:	4651      	mov	r1, sl
   1ee1e:	9007      	str	r0, [sp, #28]
   1ee20:	4620      	mov	r0, r4
   1ee22:	f01f fd40 	bl	3e8a6 <_Bfree>
   1ee26:	9b07      	ldr	r3, [sp, #28]
   1ee28:	469a      	mov	sl, r3
   1ee2a:	9b06      	ldr	r3, [sp, #24]
   1ee2c:	1b9a      	subs	r2, r3, r6
   1ee2e:	d004      	beq.n	1ee3a <_dtoa_r+0x7c2>
   1ee30:	4651      	mov	r1, sl
   1ee32:	4620      	mov	r0, r4
   1ee34:	f019 fc7c 	bl	38730 <__pow5mult>
   1ee38:	4682      	mov	sl, r0
   1ee3a:	2101      	movs	r1, #1
   1ee3c:	4620      	mov	r0, r4
   1ee3e:	f01f fe16 	bl	3ea6e <__i2b>
   1ee42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ee44:	4606      	mov	r6, r0
   1ee46:	2b00      	cmp	r3, #0
   1ee48:	dd7c      	ble.n	1ef44 <_dtoa_r+0x8cc>
   1ee4a:	461a      	mov	r2, r3
   1ee4c:	4601      	mov	r1, r0
   1ee4e:	4620      	mov	r0, r4
   1ee50:	f019 fc6e 	bl	38730 <__pow5mult>
   1ee54:	9b05      	ldr	r3, [sp, #20]
   1ee56:	4606      	mov	r6, r0
   1ee58:	2b01      	cmp	r3, #1
   1ee5a:	dd76      	ble.n	1ef4a <_dtoa_r+0x8d2>
   1ee5c:	2300      	movs	r3, #0
   1ee5e:	9306      	str	r3, [sp, #24]
   1ee60:	6933      	ldr	r3, [r6, #16]
   1ee62:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1ee66:	6918      	ldr	r0, [r3, #16]
   1ee68:	f01f fdb1 	bl	3e9ce <__hi0bits>
   1ee6c:	f1c0 0020 	rsb	r0, r0, #32
   1ee70:	9b04      	ldr	r3, [sp, #16]
   1ee72:	4418      	add	r0, r3
   1ee74:	f010 001f 	ands.w	r0, r0, #31
   1ee78:	f000 8086 	beq.w	1ef88 <_dtoa_r+0x910>
   1ee7c:	f1c0 0320 	rsb	r3, r0, #32
   1ee80:	2b04      	cmp	r3, #4
   1ee82:	dd7f      	ble.n	1ef84 <_dtoa_r+0x90c>
   1ee84:	f1c0 001c 	rsb	r0, r0, #28
   1ee88:	9b04      	ldr	r3, [sp, #16]
   1ee8a:	4480      	add	r8, r0
   1ee8c:	4405      	add	r5, r0
   1ee8e:	4403      	add	r3, r0
   1ee90:	9304      	str	r3, [sp, #16]
   1ee92:	f1b8 0f00 	cmp.w	r8, #0
   1ee96:	dd05      	ble.n	1eea4 <_dtoa_r+0x82c>
   1ee98:	4651      	mov	r1, sl
   1ee9a:	4642      	mov	r2, r8
   1ee9c:	4620      	mov	r0, r4
   1ee9e:	f01f fe8a 	bl	3ebb6 <__lshift>
   1eea2:	4682      	mov	sl, r0
   1eea4:	9b04      	ldr	r3, [sp, #16]
   1eea6:	2b00      	cmp	r3, #0
   1eea8:	dd05      	ble.n	1eeb6 <_dtoa_r+0x83e>
   1eeaa:	4631      	mov	r1, r6
   1eeac:	461a      	mov	r2, r3
   1eeae:	4620      	mov	r0, r4
   1eeb0:	f01f fe81 	bl	3ebb6 <__lshift>
   1eeb4:	4606      	mov	r6, r0
   1eeb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1eeb8:	2b00      	cmp	r3, #0
   1eeba:	d067      	beq.n	1ef8c <_dtoa_r+0x914>
   1eebc:	4631      	mov	r1, r6
   1eebe:	4650      	mov	r0, sl
   1eec0:	f01f fed8 	bl	3ec74 <__mcmp>
   1eec4:	2800      	cmp	r0, #0
   1eec6:	da61      	bge.n	1ef8c <_dtoa_r+0x914>
   1eec8:	2300      	movs	r3, #0
   1eeca:	4651      	mov	r1, sl
   1eecc:	220a      	movs	r2, #10
   1eece:	4620      	mov	r0, r4
   1eed0:	f01f fd00 	bl	3e8d4 <__multadd>
   1eed4:	9b08      	ldr	r3, [sp, #32]
   1eed6:	f109 39ff 	add.w	r9, r9, #4294967295
   1eeda:	4682      	mov	sl, r0
   1eedc:	2b00      	cmp	r3, #0
   1eede:	f000 8187 	beq.w	1f1f0 <_dtoa_r+0xb78>
   1eee2:	4639      	mov	r1, r7
   1eee4:	2300      	movs	r3, #0
   1eee6:	220a      	movs	r2, #10
   1eee8:	4620      	mov	r0, r4
   1eeea:	f01f fcf3 	bl	3e8d4 <__multadd>
   1eeee:	f1bb 0f00 	cmp.w	fp, #0
   1eef2:	4607      	mov	r7, r0
   1eef4:	f300 808e 	bgt.w	1f014 <_dtoa_r+0x99c>
   1eef8:	9b05      	ldr	r3, [sp, #20]
   1eefa:	2b02      	cmp	r3, #2
   1eefc:	f340 808a 	ble.w	1f014 <_dtoa_r+0x99c>
   1ef00:	e04c      	b.n	1ef9c <_dtoa_r+0x924>
   1ef02:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ef04:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1ef08:	e75c      	b.n	1edc4 <_dtoa_r+0x74c>
   1ef0a:	9b01      	ldr	r3, [sp, #4]
   1ef0c:	1e5e      	subs	r6, r3, #1
   1ef0e:	9b06      	ldr	r3, [sp, #24]
   1ef10:	42b3      	cmp	r3, r6
   1ef12:	bfb7      	itett	lt
   1ef14:	9b06      	ldrlt	r3, [sp, #24]
   1ef16:	1b9e      	subge	r6, r3, r6
   1ef18:	9606      	strlt	r6, [sp, #24]
   1ef1a:	1af2      	sublt	r2, r6, r3
   1ef1c:	bfbf      	itttt	lt
   1ef1e:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
   1ef20:	2600      	movlt	r6, #0
   1ef22:	189b      	addlt	r3, r3, r2
   1ef24:	930d      	strlt	r3, [sp, #52]	; 0x34
   1ef26:	9b01      	ldr	r3, [sp, #4]
   1ef28:	2b00      	cmp	r3, #0
   1ef2a:	bfb5      	itete	lt
   1ef2c:	eba8 0503 	sublt.w	r5, r8, r3
   1ef30:	4645      	movge	r5, r8
   1ef32:	2300      	movlt	r3, #0
   1ef34:	9b01      	ldrge	r3, [sp, #4]
   1ef36:	e747      	b.n	1edc8 <_dtoa_r+0x750>
   1ef38:	9e06      	ldr	r6, [sp, #24]
   1ef3a:	4645      	mov	r5, r8
   1ef3c:	9f08      	ldr	r7, [sp, #32]
   1ef3e:	e74c      	b.n	1edda <_dtoa_r+0x762>
   1ef40:	9a06      	ldr	r2, [sp, #24]
   1ef42:	e775      	b.n	1ee30 <_dtoa_r+0x7b8>
   1ef44:	9b05      	ldr	r3, [sp, #20]
   1ef46:	2b01      	cmp	r3, #1
   1ef48:	dc18      	bgt.n	1ef7c <_dtoa_r+0x904>
   1ef4a:	9b02      	ldr	r3, [sp, #8]
   1ef4c:	b9b3      	cbnz	r3, 1ef7c <_dtoa_r+0x904>
   1ef4e:	9b03      	ldr	r3, [sp, #12]
   1ef50:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1ef54:	b9a3      	cbnz	r3, 1ef80 <_dtoa_r+0x908>
   1ef56:	9b03      	ldr	r3, [sp, #12]
   1ef58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1ef5c:	0d1b      	lsrs	r3, r3, #20
   1ef5e:	051b      	lsls	r3, r3, #20
   1ef60:	b12b      	cbz	r3, 1ef6e <_dtoa_r+0x8f6>
   1ef62:	9b04      	ldr	r3, [sp, #16]
   1ef64:	f108 0801 	add.w	r8, r8, #1
   1ef68:	3301      	adds	r3, #1
   1ef6a:	9304      	str	r3, [sp, #16]
   1ef6c:	2301      	movs	r3, #1
   1ef6e:	9306      	str	r3, [sp, #24]
   1ef70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ef72:	2b00      	cmp	r3, #0
   1ef74:	f47f af74 	bne.w	1ee60 <_dtoa_r+0x7e8>
   1ef78:	2001      	movs	r0, #1
   1ef7a:	e779      	b.n	1ee70 <_dtoa_r+0x7f8>
   1ef7c:	2300      	movs	r3, #0
   1ef7e:	e7f6      	b.n	1ef6e <_dtoa_r+0x8f6>
   1ef80:	9b02      	ldr	r3, [sp, #8]
   1ef82:	e7f4      	b.n	1ef6e <_dtoa_r+0x8f6>
   1ef84:	d085      	beq.n	1ee92 <_dtoa_r+0x81a>
   1ef86:	4618      	mov	r0, r3
   1ef88:	301c      	adds	r0, #28
   1ef8a:	e77d      	b.n	1ee88 <_dtoa_r+0x810>
   1ef8c:	9b01      	ldr	r3, [sp, #4]
   1ef8e:	2b00      	cmp	r3, #0
   1ef90:	dc3a      	bgt.n	1f008 <_dtoa_r+0x990>
   1ef92:	9b05      	ldr	r3, [sp, #20]
   1ef94:	2b02      	cmp	r3, #2
   1ef96:	dd37      	ble.n	1f008 <_dtoa_r+0x990>
   1ef98:	f8dd b004 	ldr.w	fp, [sp, #4]
   1ef9c:	f1bb 0f00 	cmp.w	fp, #0
   1efa0:	d10d      	bne.n	1efbe <_dtoa_r+0x946>
   1efa2:	4631      	mov	r1, r6
   1efa4:	465b      	mov	r3, fp
   1efa6:	2205      	movs	r2, #5
   1efa8:	4620      	mov	r0, r4
   1efaa:	f01f fc93 	bl	3e8d4 <__multadd>
   1efae:	4601      	mov	r1, r0
   1efb0:	4606      	mov	r6, r0
   1efb2:	4650      	mov	r0, sl
   1efb4:	f01f fe5e 	bl	3ec74 <__mcmp>
   1efb8:	2800      	cmp	r0, #0
   1efba:	f73f adc0 	bgt.w	1eb3e <_dtoa_r+0x4c6>
   1efbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1efc0:	9d00      	ldr	r5, [sp, #0]
   1efc2:	ea6f 0903 	mvn.w	r9, r3
   1efc6:	f04f 0800 	mov.w	r8, #0
   1efca:	4631      	mov	r1, r6
   1efcc:	4620      	mov	r0, r4
   1efce:	f01f fc6a 	bl	3e8a6 <_Bfree>
   1efd2:	2f00      	cmp	r7, #0
   1efd4:	f43f aeb6 	beq.w	1ed44 <_dtoa_r+0x6cc>
   1efd8:	f1b8 0f00 	cmp.w	r8, #0
   1efdc:	d005      	beq.n	1efea <_dtoa_r+0x972>
   1efde:	45b8      	cmp	r8, r7
   1efe0:	d003      	beq.n	1efea <_dtoa_r+0x972>
   1efe2:	4641      	mov	r1, r8
   1efe4:	4620      	mov	r0, r4
   1efe6:	f01f fc5e 	bl	3e8a6 <_Bfree>
   1efea:	4639      	mov	r1, r7
   1efec:	4620      	mov	r0, r4
   1efee:	f01f fc5a 	bl	3e8a6 <_Bfree>
   1eff2:	e6a7      	b.n	1ed44 <_dtoa_r+0x6cc>
   1eff4:	2600      	movs	r6, #0
   1eff6:	4637      	mov	r7, r6
   1eff8:	e7e1      	b.n	1efbe <_dtoa_r+0x946>
   1effa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1effc:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1f000:	4637      	mov	r7, r6
   1f002:	e59c      	b.n	1eb3e <_dtoa_r+0x4c6>
   1f004:	40240000 	.word	0x40240000
   1f008:	9b08      	ldr	r3, [sp, #32]
   1f00a:	f8dd b004 	ldr.w	fp, [sp, #4]
   1f00e:	2b00      	cmp	r3, #0
   1f010:	f000 80f5 	beq.w	1f1fe <_dtoa_r+0xb86>
   1f014:	2d00      	cmp	r5, #0
   1f016:	dd05      	ble.n	1f024 <_dtoa_r+0x9ac>
   1f018:	4639      	mov	r1, r7
   1f01a:	462a      	mov	r2, r5
   1f01c:	4620      	mov	r0, r4
   1f01e:	f01f fdca 	bl	3ebb6 <__lshift>
   1f022:	4607      	mov	r7, r0
   1f024:	9b06      	ldr	r3, [sp, #24]
   1f026:	2b00      	cmp	r3, #0
   1f028:	d055      	beq.n	1f0d6 <_dtoa_r+0xa5e>
   1f02a:	6879      	ldr	r1, [r7, #4]
   1f02c:	4620      	mov	r0, r4
   1f02e:	f01f fc06 	bl	3e83e <_Balloc>
   1f032:	693a      	ldr	r2, [r7, #16]
   1f034:	4605      	mov	r5, r0
   1f036:	f107 010c 	add.w	r1, r7, #12
   1f03a:	3202      	adds	r2, #2
   1f03c:	300c      	adds	r0, #12
   1f03e:	0092      	lsls	r2, r2, #2
   1f040:	f01e ff93 	bl	3df6a <memcpy>
   1f044:	2201      	movs	r2, #1
   1f046:	4629      	mov	r1, r5
   1f048:	4620      	mov	r0, r4
   1f04a:	f01f fdb4 	bl	3ebb6 <__lshift>
   1f04e:	9b00      	ldr	r3, [sp, #0]
   1f050:	46b8      	mov	r8, r7
   1f052:	4607      	mov	r7, r0
   1f054:	3301      	adds	r3, #1
   1f056:	9301      	str	r3, [sp, #4]
   1f058:	9b00      	ldr	r3, [sp, #0]
   1f05a:	445b      	add	r3, fp
   1f05c:	9307      	str	r3, [sp, #28]
   1f05e:	9b02      	ldr	r3, [sp, #8]
   1f060:	f003 0301 	and.w	r3, r3, #1
   1f064:	9306      	str	r3, [sp, #24]
   1f066:	9b01      	ldr	r3, [sp, #4]
   1f068:	4631      	mov	r1, r6
   1f06a:	4650      	mov	r0, sl
   1f06c:	f103 3bff 	add.w	fp, r3, #4294967295
   1f070:	f01f f9a6 	bl	3e3c0 <quorem>
   1f074:	4603      	mov	r3, r0
   1f076:	4641      	mov	r1, r8
   1f078:	9002      	str	r0, [sp, #8]
   1f07a:	4650      	mov	r0, sl
   1f07c:	3330      	adds	r3, #48	; 0x30
   1f07e:	9308      	str	r3, [sp, #32]
   1f080:	f01f fdf8 	bl	3ec74 <__mcmp>
   1f084:	463a      	mov	r2, r7
   1f086:	9004      	str	r0, [sp, #16]
   1f088:	4631      	mov	r1, r6
   1f08a:	4620      	mov	r0, r4
   1f08c:	f01f fe0e 	bl	3ecac <__mdiff>
   1f090:	68c2      	ldr	r2, [r0, #12]
   1f092:	4605      	mov	r5, r0
   1f094:	9b08      	ldr	r3, [sp, #32]
   1f096:	bb02      	cbnz	r2, 1f0da <_dtoa_r+0xa62>
   1f098:	4601      	mov	r1, r0
   1f09a:	4650      	mov	r0, sl
   1f09c:	f01f fdea 	bl	3ec74 <__mcmp>
   1f0a0:	9b08      	ldr	r3, [sp, #32]
   1f0a2:	4602      	mov	r2, r0
   1f0a4:	4629      	mov	r1, r5
   1f0a6:	4620      	mov	r0, r4
   1f0a8:	e9cd 3208 	strd	r3, r2, [sp, #32]
   1f0ac:	f01f fbfb 	bl	3e8a6 <_Bfree>
   1f0b0:	9b05      	ldr	r3, [sp, #20]
   1f0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f0b4:	9d01      	ldr	r5, [sp, #4]
   1f0b6:	ea43 0102 	orr.w	r1, r3, r2
   1f0ba:	9b06      	ldr	r3, [sp, #24]
   1f0bc:	430b      	orrs	r3, r1
   1f0be:	9b08      	ldr	r3, [sp, #32]
   1f0c0:	d10d      	bne.n	1f0de <_dtoa_r+0xa66>
   1f0c2:	2b39      	cmp	r3, #57	; 0x39
   1f0c4:	d027      	beq.n	1f116 <_dtoa_r+0xa9e>
   1f0c6:	9a04      	ldr	r2, [sp, #16]
   1f0c8:	2a00      	cmp	r2, #0
   1f0ca:	dd01      	ble.n	1f0d0 <_dtoa_r+0xa58>
   1f0cc:	9b02      	ldr	r3, [sp, #8]
   1f0ce:	3331      	adds	r3, #49	; 0x31
   1f0d0:	f88b 3000 	strb.w	r3, [fp]
   1f0d4:	e779      	b.n	1efca <_dtoa_r+0x952>
   1f0d6:	4638      	mov	r0, r7
   1f0d8:	e7b9      	b.n	1f04e <_dtoa_r+0x9d6>
   1f0da:	2201      	movs	r2, #1
   1f0dc:	e7e2      	b.n	1f0a4 <_dtoa_r+0xa2c>
   1f0de:	9904      	ldr	r1, [sp, #16]
   1f0e0:	2900      	cmp	r1, #0
   1f0e2:	db04      	blt.n	1f0ee <_dtoa_r+0xa76>
   1f0e4:	9805      	ldr	r0, [sp, #20]
   1f0e6:	4301      	orrs	r1, r0
   1f0e8:	9806      	ldr	r0, [sp, #24]
   1f0ea:	4301      	orrs	r1, r0
   1f0ec:	d120      	bne.n	1f130 <_dtoa_r+0xab8>
   1f0ee:	2a00      	cmp	r2, #0
   1f0f0:	ddee      	ble.n	1f0d0 <_dtoa_r+0xa58>
   1f0f2:	4651      	mov	r1, sl
   1f0f4:	2201      	movs	r2, #1
   1f0f6:	4620      	mov	r0, r4
   1f0f8:	9301      	str	r3, [sp, #4]
   1f0fa:	f01f fd5c 	bl	3ebb6 <__lshift>
   1f0fe:	4631      	mov	r1, r6
   1f100:	4682      	mov	sl, r0
   1f102:	f01f fdb7 	bl	3ec74 <__mcmp>
   1f106:	2800      	cmp	r0, #0
   1f108:	9b01      	ldr	r3, [sp, #4]
   1f10a:	dc02      	bgt.n	1f112 <_dtoa_r+0xa9a>
   1f10c:	d1e0      	bne.n	1f0d0 <_dtoa_r+0xa58>
   1f10e:	07da      	lsls	r2, r3, #31
   1f110:	d5de      	bpl.n	1f0d0 <_dtoa_r+0xa58>
   1f112:	2b39      	cmp	r3, #57	; 0x39
   1f114:	d1da      	bne.n	1f0cc <_dtoa_r+0xa54>
   1f116:	2339      	movs	r3, #57	; 0x39
   1f118:	f88b 3000 	strb.w	r3, [fp]
   1f11c:	462b      	mov	r3, r5
   1f11e:	461d      	mov	r5, r3
   1f120:	3b01      	subs	r3, #1
   1f122:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1f126:	2a39      	cmp	r2, #57	; 0x39
   1f128:	d050      	beq.n	1f1cc <_dtoa_r+0xb54>
   1f12a:	3201      	adds	r2, #1
   1f12c:	701a      	strb	r2, [r3, #0]
   1f12e:	e74c      	b.n	1efca <_dtoa_r+0x952>
   1f130:	2a00      	cmp	r2, #0
   1f132:	dd03      	ble.n	1f13c <_dtoa_r+0xac4>
   1f134:	2b39      	cmp	r3, #57	; 0x39
   1f136:	d0ee      	beq.n	1f116 <_dtoa_r+0xa9e>
   1f138:	3301      	adds	r3, #1
   1f13a:	e7c9      	b.n	1f0d0 <_dtoa_r+0xa58>
   1f13c:	9a01      	ldr	r2, [sp, #4]
   1f13e:	9907      	ldr	r1, [sp, #28]
   1f140:	f802 3c01 	strb.w	r3, [r2, #-1]
   1f144:	428a      	cmp	r2, r1
   1f146:	d02a      	beq.n	1f19e <_dtoa_r+0xb26>
   1f148:	4651      	mov	r1, sl
   1f14a:	2300      	movs	r3, #0
   1f14c:	220a      	movs	r2, #10
   1f14e:	4620      	mov	r0, r4
   1f150:	f01f fbc0 	bl	3e8d4 <__multadd>
   1f154:	45b8      	cmp	r8, r7
   1f156:	4682      	mov	sl, r0
   1f158:	f04f 0300 	mov.w	r3, #0
   1f15c:	f04f 020a 	mov.w	r2, #10
   1f160:	4641      	mov	r1, r8
   1f162:	4620      	mov	r0, r4
   1f164:	d107      	bne.n	1f176 <_dtoa_r+0xafe>
   1f166:	f01f fbb5 	bl	3e8d4 <__multadd>
   1f16a:	4680      	mov	r8, r0
   1f16c:	4607      	mov	r7, r0
   1f16e:	9b01      	ldr	r3, [sp, #4]
   1f170:	3301      	adds	r3, #1
   1f172:	9301      	str	r3, [sp, #4]
   1f174:	e777      	b.n	1f066 <_dtoa_r+0x9ee>
   1f176:	f01f fbad 	bl	3e8d4 <__multadd>
   1f17a:	4639      	mov	r1, r7
   1f17c:	4680      	mov	r8, r0
   1f17e:	2300      	movs	r3, #0
   1f180:	220a      	movs	r2, #10
   1f182:	4620      	mov	r0, r4
   1f184:	f01f fba6 	bl	3e8d4 <__multadd>
   1f188:	4607      	mov	r7, r0
   1f18a:	e7f0      	b.n	1f16e <_dtoa_r+0xaf6>
   1f18c:	f1bb 0f00 	cmp.w	fp, #0
   1f190:	9a00      	ldr	r2, [sp, #0]
   1f192:	f04f 0800 	mov.w	r8, #0
   1f196:	bfcc      	ite	gt
   1f198:	465d      	movgt	r5, fp
   1f19a:	2501      	movle	r5, #1
   1f19c:	4415      	add	r5, r2
   1f19e:	4651      	mov	r1, sl
   1f1a0:	2201      	movs	r2, #1
   1f1a2:	4620      	mov	r0, r4
   1f1a4:	9301      	str	r3, [sp, #4]
   1f1a6:	f01f fd06 	bl	3ebb6 <__lshift>
   1f1aa:	4631      	mov	r1, r6
   1f1ac:	4682      	mov	sl, r0
   1f1ae:	f01f fd61 	bl	3ec74 <__mcmp>
   1f1b2:	2800      	cmp	r0, #0
   1f1b4:	dcb2      	bgt.n	1f11c <_dtoa_r+0xaa4>
   1f1b6:	d102      	bne.n	1f1be <_dtoa_r+0xb46>
   1f1b8:	9b01      	ldr	r3, [sp, #4]
   1f1ba:	07db      	lsls	r3, r3, #31
   1f1bc:	d4ae      	bmi.n	1f11c <_dtoa_r+0xaa4>
   1f1be:	462b      	mov	r3, r5
   1f1c0:	461d      	mov	r5, r3
   1f1c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1f1c6:	2a30      	cmp	r2, #48	; 0x30
   1f1c8:	d0fa      	beq.n	1f1c0 <_dtoa_r+0xb48>
   1f1ca:	e6fe      	b.n	1efca <_dtoa_r+0x952>
   1f1cc:	9a00      	ldr	r2, [sp, #0]
   1f1ce:	429a      	cmp	r2, r3
   1f1d0:	d1a5      	bne.n	1f11e <_dtoa_r+0xaa6>
   1f1d2:	2331      	movs	r3, #49	; 0x31
   1f1d4:	f109 0901 	add.w	r9, r9, #1
   1f1d8:	7013      	strb	r3, [r2, #0]
   1f1da:	e6f6      	b.n	1efca <_dtoa_r+0x952>
   1f1dc:	4b12      	ldr	r3, [pc, #72]	; (1f228 <_dtoa_r+0xbb0>)
   1f1de:	f7ff bab8 	b.w	1e752 <_dtoa_r+0xda>
   1f1e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f1e4:	2b00      	cmp	r3, #0
   1f1e6:	f47f aa8e 	bne.w	1e706 <_dtoa_r+0x8e>
   1f1ea:	4b10      	ldr	r3, [pc, #64]	; (1f22c <_dtoa_r+0xbb4>)
   1f1ec:	f7ff bab1 	b.w	1e752 <_dtoa_r+0xda>
   1f1f0:	f1bb 0f00 	cmp.w	fp, #0
   1f1f4:	dc03      	bgt.n	1f1fe <_dtoa_r+0xb86>
   1f1f6:	9b05      	ldr	r3, [sp, #20]
   1f1f8:	2b02      	cmp	r3, #2
   1f1fa:	f73f aecf 	bgt.w	1ef9c <_dtoa_r+0x924>
   1f1fe:	9d00      	ldr	r5, [sp, #0]
   1f200:	4631      	mov	r1, r6
   1f202:	4650      	mov	r0, sl
   1f204:	f01f f8dc 	bl	3e3c0 <quorem>
   1f208:	9a00      	ldr	r2, [sp, #0]
   1f20a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1f20e:	f805 3b01 	strb.w	r3, [r5], #1
   1f212:	1aaa      	subs	r2, r5, r2
   1f214:	4593      	cmp	fp, r2
   1f216:	ddb9      	ble.n	1f18c <_dtoa_r+0xb14>
   1f218:	4651      	mov	r1, sl
   1f21a:	2300      	movs	r3, #0
   1f21c:	220a      	movs	r2, #10
   1f21e:	4620      	mov	r0, r4
   1f220:	f01f fb58 	bl	3e8d4 <__multadd>
   1f224:	4682      	mov	sl, r0
   1f226:	e7eb      	b.n	1f200 <_dtoa_r+0xb88>
   1f228:	000451fc 	.word	0x000451fc
   1f22c:	000463ea 	.word	0x000463ea

0001f230 <nan>:
   1f230:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1f238 <nan+0x8>
   1f234:	4770      	bx	lr
   1f236:	bf00      	nop
   1f238:	00000000 	.word	0x00000000
   1f23c:	7ff80000 	.word	0x7ff80000

0001f240 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   1f240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f244:	2501      	movs	r5, #1
   1f246:	6843      	ldr	r3, [r0, #4]
   1f248:	408d      	lsls	r5, r1
   1f24a:	681b      	ldr	r3, [r3, #0]
{
   1f24c:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f24e:	421d      	tst	r5, r3
{
   1f250:	4616      	mov	r6, r2
	const struct gpio_driver_data *const data =
   1f252:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f254:	d10e      	bne.n	1f274 <gpio_pin_set+0x34>
   1f256:	4919      	ldr	r1, [pc, #100]	; (1f2bc <gpio_pin_set+0x7c>)
   1f258:	f240 439f 	movw	r3, #1183	; 0x49f
   1f25c:	4a18      	ldr	r2, [pc, #96]	; (1f2c0 <gpio_pin_set+0x80>)
   1f25e:	4819      	ldr	r0, [pc, #100]	; (1f2c4 <gpio_pin_set+0x84>)
   1f260:	f019 ff67 	bl	39132 <printk>
   1f264:	4818      	ldr	r0, [pc, #96]	; (1f2c8 <gpio_pin_set+0x88>)
   1f266:	f019 ff64 	bl	39132 <printk>
   1f26a:	f240 419f 	movw	r1, #1183	; 0x49f
   1f26e:	4814      	ldr	r0, [pc, #80]	; (1f2c0 <gpio_pin_set+0x80>)
   1f270:	f01a f9fe 	bl	39670 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1f274:	683b      	ldr	r3, [r7, #0]
   1f276:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f278:	6863      	ldr	r3, [r4, #4]
   1f27a:	bf18      	it	ne
   1f27c:	f086 0601 	eorne.w	r6, r6, #1
   1f280:	681b      	ldr	r3, [r3, #0]
   1f282:	421d      	tst	r5, r3
   1f284:	d10e      	bne.n	1f2a4 <gpio_pin_set+0x64>
   1f286:	490d      	ldr	r1, [pc, #52]	; (1f2bc <gpio_pin_set+0x7c>)
   1f288:	f240 4375 	movw	r3, #1141	; 0x475
   1f28c:	4a0c      	ldr	r2, [pc, #48]	; (1f2c0 <gpio_pin_set+0x80>)
   1f28e:	480d      	ldr	r0, [pc, #52]	; (1f2c4 <gpio_pin_set+0x84>)
   1f290:	f019 ff4f 	bl	39132 <printk>
   1f294:	480c      	ldr	r0, [pc, #48]	; (1f2c8 <gpio_pin_set+0x88>)
   1f296:	f019 ff4c 	bl	39132 <printk>
   1f29a:	f240 4175 	movw	r1, #1141	; 0x475
   1f29e:	4808      	ldr	r0, [pc, #32]	; (1f2c0 <gpio_pin_set+0x80>)
   1f2a0:	f01a f9e6 	bl	39670 <assert_post_action>
	if (value != 0)	{
   1f2a4:	b136      	cbz	r6, 1f2b4 <gpio_pin_set+0x74>
	return api->port_set_bits_raw(port, pins);
   1f2a6:	68a3      	ldr	r3, [r4, #8]
   1f2a8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1f2aa:	4629      	mov	r1, r5
   1f2ac:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   1f2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   1f2b2:	4718      	bx	r3
   1f2b4:	68a3      	ldr	r3, [r4, #8]
   1f2b6:	691b      	ldr	r3, [r3, #16]
   1f2b8:	e7f7      	b.n	1f2aa <gpio_pin_set+0x6a>
   1f2ba:	bf00      	nop
   1f2bc:	00040300 	.word	0x00040300
   1f2c0:	000402d6 	.word	0x000402d6
   1f2c4:	0004033e 	.word	0x0004033e
   1f2c8:	0004035b 	.word	0x0004035b

0001f2cc <z_impl_gpio_pin_configure.constprop.0>:
static inline int z_impl_gpio_pin_configure(const struct device *port,
   1f2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f2d0:	2601      	movs	r6, #1
   1f2d2:	6843      	ldr	r3, [r0, #4]
   1f2d4:	408e      	lsls	r6, r1
   1f2d6:	681b      	ldr	r3, [r3, #0]
static inline int z_impl_gpio_pin_configure(const struct device *port,
   1f2d8:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f2da:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_configure(const struct device *port,
   1f2dc:	460d      	mov	r5, r1
	const struct gpio_driver_api *api =
   1f2de:	f8d0 8008 	ldr.w	r8, [r0, #8]
	struct gpio_driver_data *data =
   1f2e2:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1f2e4:	d10e      	bne.n	1f304 <z_impl_gpio_pin_configure.constprop.0+0x38>
   1f2e6:	490e      	ldr	r1, [pc, #56]	; (1f320 <z_impl_gpio_pin_configure.constprop.0+0x54>)
   1f2e8:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   1f2ec:	4a0d      	ldr	r2, [pc, #52]	; (1f324 <z_impl_gpio_pin_configure.constprop.0+0x58>)
   1f2ee:	480e      	ldr	r0, [pc, #56]	; (1f328 <z_impl_gpio_pin_configure.constprop.0+0x5c>)
   1f2f0:	f019 ff1f 	bl	39132 <printk>
   1f2f4:	480d      	ldr	r0, [pc, #52]	; (1f32c <z_impl_gpio_pin_configure.constprop.0+0x60>)
   1f2f6:	f019 ff1c 	bl	39132 <printk>
   1f2fa:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   1f2fe:	4809      	ldr	r0, [pc, #36]	; (1f324 <z_impl_gpio_pin_configure.constprop.0+0x58>)
   1f300:	f01a f9b6 	bl	39670 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1f304:	683b      	ldr	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
   1f306:	4629      	mov	r1, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1f308:	ea23 0606 	bic.w	r6, r3, r6
	return api->pin_configure(port, pin, flags);
   1f30c:	4620      	mov	r0, r4
   1f30e:	f8d8 3000 	ldr.w	r3, [r8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1f312:	603e      	str	r6, [r7, #0]
	return api->pin_configure(port, pin, flags);
   1f314:	f44f 6220 	mov.w	r2, #2560	; 0xa00
}
   1f318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   1f31c:	4718      	bx	r3
   1f31e:	bf00      	nop
   1f320:	00040300 	.word	0x00040300
   1f324:	000402d6 	.word	0x000402d6
   1f328:	0004033e 	.word	0x0004033e
   1f32c:	0004035b 	.word	0x0004035b

0001f330 <pwm_pin_set_usec.constprop.0>:
 * @param flags Flags for pin configuration (polarity).
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(const struct device *dev, uint32_t pwm,
   1f330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f334:	4606      	mov	r6, r0
   1f336:	460d      	mov	r5, r1
   1f338:	4617      	mov	r7, r2
   1f33a:	b087      	sub	sp, #28
	return api->get_cycles_per_sec(dev, pwm, cycles);
   1f33c:	6883      	ldr	r3, [r0, #8]
   1f33e:	211c      	movs	r1, #28
   1f340:	685b      	ldr	r3, [r3, #4]
   1f342:	aa04      	add	r2, sp, #16
   1f344:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
   1f346:	9003      	str	r0, [sp, #12]
   1f348:	bb80      	cbnz	r0, 1f3ac <pwm_pin_set_usec.constprop.0+0x7c>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   1f34a:	e9dd 4b04 	ldrd	r4, fp, [sp, #16]
   1f34e:	fba5 8904 	umull	r8, r9, r5, r4
   1f352:	fb05 990b 	mla	r9, r5, fp, r9
   1f356:	2300      	movs	r3, #0
   1f358:	4a17      	ldr	r2, [pc, #92]	; (1f3b8 <pwm_pin_set_usec.constprop.0+0x88>)
   1f35a:	4640      	mov	r0, r8
   1f35c:	4649      	mov	r1, r9
   1f35e:	f7fd fda3 	bl	1cea8 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
   1f362:	f04f 32ff 	mov.w	r2, #4294967295
   1f366:	4b15      	ldr	r3, [pc, #84]	; (1f3bc <pwm_pin_set_usec.constprop.0+0x8c>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   1f368:	4682      	mov	sl, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
   1f36a:	454b      	cmp	r3, r9
   1f36c:	bf08      	it	eq
   1f36e:	4542      	cmpeq	r2, r8
   1f370:	d31f      	bcc.n	1f3b2 <pwm_pin_set_usec.constprop.0+0x82>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   1f372:	fba7 4504 	umull	r4, r5, r7, r4
   1f376:	fb07 550b 	mla	r5, r7, fp, r5
   1f37a:	2300      	movs	r3, #0
   1f37c:	4a0e      	ldr	r2, [pc, #56]	; (1f3b8 <pwm_pin_set_usec.constprop.0+0x88>)
   1f37e:	4620      	mov	r0, r4
   1f380:	4629      	mov	r1, r5
   1f382:	f7fd fd91 	bl	1cea8 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
   1f386:	f04f 31ff 	mov.w	r1, #4294967295
   1f38a:	4a0c      	ldr	r2, [pc, #48]	; (1f3bc <pwm_pin_set_usec.constprop.0+0x8c>)
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   1f38c:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
   1f38e:	42aa      	cmp	r2, r5
   1f390:	bf08      	it	eq
   1f392:	42a1      	cmpeq	r1, r4
   1f394:	d30d      	bcc.n	1f3b2 <pwm_pin_set_usec.constprop.0+0x82>
	return api->pin_set(dev, pwm, period, pulse, flags);
   1f396:	9903      	ldr	r1, [sp, #12]
   1f398:	68b2      	ldr	r2, [r6, #8]
   1f39a:	9100      	str	r1, [sp, #0]
   1f39c:	6814      	ldr	r4, [r2, #0]
   1f39e:	211c      	movs	r1, #28
   1f3a0:	4652      	mov	r2, sl
   1f3a2:	4630      	mov	r0, r6
   1f3a4:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
				  (uint32_t)pulse_cycles, flags);
}
   1f3a6:	b007      	add	sp, #28
   1f3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
   1f3ac:	f06f 0004 	mvn.w	r0, #4
   1f3b0:	e7f9      	b.n	1f3a6 <pwm_pin_set_usec.constprop.0+0x76>
		return -ENOTSUP;
   1f3b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1f3b6:	e7f6      	b.n	1f3a6 <pwm_pin_set_usec.constprop.0+0x76>
   1f3b8:	000f4240 	.word	0x000f4240
   1f3bc:	000f423f 	.word	0x000f423f

0001f3c0 <light>:
		note = 0;
	}
  }
}

void light() {
   1f3c0:	b570      	push	{r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1f3c2:	482c      	ldr	r0, [pc, #176]	; (1f474 <light+0xb4>)
   1f3c4:	f014 f86e 	bl	334a4 <z_impl_device_get_binding>
	int ret1;
	int ret2;
	int count = 0;

	dev = device_get_binding(LED0);
	if (dev == NULL)
   1f3c8:	4604      	mov	r4, r0
   1f3ca:	2800      	cmp	r0, #0
   1f3cc:	d051      	beq.n	1f472 <light+0xb2>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1f3ce:	211d      	movs	r1, #29
   1f3d0:	f7ff ff7c 	bl	1f2cc <z_impl_gpio_pin_configure.constprop.0>
   1f3d4:	4606      	mov	r6, r0
   1f3d6:	211e      	movs	r1, #30
   1f3d8:	4620      	mov	r0, r4
   1f3da:	f7ff ff77 	bl	1f2cc <z_impl_gpio_pin_configure.constprop.0>
   1f3de:	4605      	mov	r5, r0
   1f3e0:	211f      	movs	r1, #31
   1f3e2:	4620      	mov	r0, r4
   1f3e4:	f7ff ff72 	bl	1f2cc <z_impl_gpio_pin_configure.constprop.0>
	ret1 = gpio_pin_configure(dev, PIN1, GPIO_OUTPUT_ACTIVE | FLAGS);
	ret2 = gpio_pin_configure(dev, PIN2, GPIO_OUTPUT_ACTIVE | FLAGS);
	// ret29 = gpio_pin_configure(dev, PIN29, GPIO_OUTPUT_ACTIVE | FLAGS);
	// ret30 = gpio_pin_configure(dev, PIN30, GPIO_OUTPUT_ACTIVE | FLAGS);
	// ret31 = gpio_pin_configure(dev, PIN31, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0 || ret1 <0 || ret2 < 0)
   1f3e8:	2e00      	cmp	r6, #0
   1f3ea:	db42      	blt.n	1f472 <light+0xb2>
   1f3ec:	2d00      	cmp	r5, #0
   1f3ee:	db40      	blt.n	1f472 <light+0xb2>
   1f3f0:	2800      	cmp	r0, #0
   1f3f2:	db3e      	blt.n	1f472 <light+0xb2>
	int count = 0;
   1f3f4:	2500      	movs	r5, #0
			count++;
		} else {
			gpio_pin_set(dev, PIN0, 0);
			gpio_pin_set(dev, PIN1, 0);
			gpio_pin_set(dev, PIN2, 1);
			printk("DISCO \n");
   1f3f6:	4e20      	ldr	r6, [pc, #128]	; (1f478 <light+0xb8>)
		if (count == 0) {
   1f3f8:	b9ad      	cbnz	r5, 1f426 <light+0x66>
			gpio_pin_set(dev, PIN0, 1);
   1f3fa:	2201      	movs	r2, #1
   1f3fc:	211d      	movs	r1, #29
   1f3fe:	4620      	mov	r0, r4
   1f400:	f7ff ff1e 	bl	1f240 <gpio_pin_set>
			gpio_pin_set(dev, PIN1, 0);
   1f404:	462a      	mov	r2, r5
   1f406:	211e      	movs	r1, #30
   1f408:	4620      	mov	r0, r4
   1f40a:	f7ff ff19 	bl	1f240 <gpio_pin_set>
			gpio_pin_set(dev, PIN2, 0);
   1f40e:	462a      	mov	r2, r5
   1f410:	211f      	movs	r1, #31
   1f412:	4620      	mov	r0, r4
   1f414:	f7ff ff14 	bl	1f240 <gpio_pin_set>
			count++;
   1f418:	2501      	movs	r5, #1
	return z_impl_k_sleep(timeout);
   1f41a:	2100      	movs	r1, #0
   1f41c:	f640 40cd 	movw	r0, #3277	; 0xccd
   1f420:	f016 fc5a 	bl	35cd8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   1f424:	e7e8      	b.n	1f3f8 <light+0x38>
		} else if (count == 1) {
   1f426:	2d01      	cmp	r5, #1
			gpio_pin_set(dev, PIN0, 0);
   1f428:	f04f 0200 	mov.w	r2, #0
   1f42c:	f04f 011d 	mov.w	r1, #29
   1f430:	4620      	mov	r0, r4
		} else if (count == 1) {
   1f432:	d10d      	bne.n	1f450 <light+0x90>
			gpio_pin_set(dev, PIN0, 0);
   1f434:	f7ff ff04 	bl	1f240 <gpio_pin_set>
			gpio_pin_set(dev, PIN1, 1);
   1f438:	462a      	mov	r2, r5
   1f43a:	211e      	movs	r1, #30
   1f43c:	4620      	mov	r0, r4
   1f43e:	f7ff feff 	bl	1f240 <gpio_pin_set>
			gpio_pin_set(dev, PIN2, 0);
   1f442:	2200      	movs	r2, #0
   1f444:	211f      	movs	r1, #31
   1f446:	4620      	mov	r0, r4
   1f448:	f7ff fefa 	bl	1f240 <gpio_pin_set>
			count++;
   1f44c:	2502      	movs	r5, #2
   1f44e:	e7e4      	b.n	1f41a <light+0x5a>
			gpio_pin_set(dev, PIN0, 0);
   1f450:	f7ff fef6 	bl	1f240 <gpio_pin_set>
			gpio_pin_set(dev, PIN1, 0);
   1f454:	2200      	movs	r2, #0
   1f456:	211e      	movs	r1, #30
   1f458:	4620      	mov	r0, r4
   1f45a:	f7ff fef1 	bl	1f240 <gpio_pin_set>
			gpio_pin_set(dev, PIN2, 1);
   1f45e:	2201      	movs	r2, #1
   1f460:	211f      	movs	r1, #31
   1f462:	4620      	mov	r0, r4
   1f464:	f7ff feec 	bl	1f240 <gpio_pin_set>
			printk("DISCO \n");
   1f468:	4630      	mov	r0, r6
   1f46a:	f019 fe62 	bl	39132 <printk>
			count = 0;
   1f46e:	2500      	movs	r5, #0
   1f470:	e7d3      	b.n	1f41a <light+0x5a>
		}
		k_msleep(SLEEP_TIME_MS);
	}
}
   1f472:	bd70      	pop	{r4, r5, r6, pc}
   1f474:	0004036d 	.word	0x0004036d
   1f478:	00040374 	.word	0x00040374

0001f47c <ui_buzzer_init>:
{
   1f47c:	b508      	push	{r3, lr}
   1f47e:	480a      	ldr	r0, [pc, #40]	; (1f4a8 <ui_buzzer_init+0x2c>)
   1f480:	f014 f810 	bl	334a4 <z_impl_device_get_binding>
	pwm_dev = device_get_binding(dev_name);
   1f484:	4b09      	ldr	r3, [pc, #36]	; (1f4ac <ui_buzzer_init+0x30>)
	if (!pwm_dev) {
   1f486:	2800      	cmp	r0, #0
	pwm_dev = device_get_binding(dev_name);
   1f488:	6018      	str	r0, [r3, #0]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f48a:	f04f 0201 	mov.w	r2, #1
		err = -ENODEV;
   1f48e:	bf14      	ite	ne
   1f490:	2000      	movne	r0, #0
   1f492:	f06f 0012 	mvneq.w	r0, #18
   1f496:	4b06      	ldr	r3, [pc, #24]	; (1f4b0 <ui_buzzer_init+0x34>)
   1f498:	e8d3 1fef 	ldaex	r1, [r3]
   1f49c:	e8c3 2fec 	stlex	ip, r2, [r3]
   1f4a0:	f1bc 0f00 	cmp.w	ip, #0
   1f4a4:	d1f8      	bne.n	1f498 <ui_buzzer_init+0x1c>
}
   1f4a6:	bd08      	pop	{r3, pc}
   1f4a8:	0004037c 	.word	0x0004037c
   1f4ac:	20016f10 	.word	0x20016f10
   1f4b0:	20016f08 	.word	0x20016f08

0001f4b4 <music>:
void music() {
   1f4b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ui_buzzer_init();
   1f4b8:	f7ff ffe0 	bl	1f47c <ui_buzzer_init>
  int note = 0;
   1f4bc:	2400      	movs	r4, #0
   1f4be:	f240 3ae7 	movw	sl, #999	; 0x3e7
   1f4c2:	f04f 0b00 	mov.w	fp, #0
    int duration = 1000/ durations[note];
   1f4c6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	printf("%d", note);
   1f4ca:	4621      	mov	r1, r4
   1f4cc:	482a      	ldr	r0, [pc, #168]	; (1f578 <music+0xc4>)
   1f4ce:	f018 fa95 	bl	379fc <iprintf>
    int duration = 1000/ durations[note];
   1f4d2:	4b2a      	ldr	r3, [pc, #168]	; (1f57c <music+0xc8>)
   1f4d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1f4d8:	fb96 f6f3 	sdiv	r6, r6, r3
	pwm_out(melody[note],10);
   1f4dc:	4b28      	ldr	r3, [pc, #160]	; (1f580 <music+0xcc>)
   1f4de:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	uint32_t period = (frequency > 0) ? USEC_PER_SEC / frequency : 0;
   1f4e2:	b115      	cbz	r5, 1f4ea <music+0x36>
   1f4e4:	4b27      	ldr	r3, [pc, #156]	; (1f584 <music+0xd0>)
   1f4e6:	fbb3 f5f5 	udiv	r5, r3, r5
	uint32_t duty_cycle = (intensity == 0) ? 0 :
   1f4ea:	275b      	movs	r7, #91	; 0x5b
	if (prev_period) {
   1f4ec:	4b26      	ldr	r3, [pc, #152]	; (1f588 <music+0xd4>)
	uint32_t duty_cycle = (intensity == 0) ? 0 :
   1f4ee:	fbb5 f7f7 	udiv	r7, r5, r7
	if (prev_period) {
   1f4f2:	6819      	ldr	r1, [r3, #0]
   1f4f4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1f590 <music+0xdc>
   1f4f8:	b1e9      	cbz	r1, 1f536 <music+0x82>
		pwm_pin_set_usec(pwm_dev, CONFIG_UI_BUZZER_PIN,
   1f4fa:	2200      	movs	r2, #0
   1f4fc:	f8d9 0000 	ldr.w	r0, [r9]
   1f500:	f7ff ff16 	bl	1f330 <pwm_pin_set_usec.constprop.0>
		k_sleep(K_MSEC(MAX((prev_period / USEC_PER_MSEC), 1)));
   1f504:	4b20      	ldr	r3, [pc, #128]	; (1f588 <music+0xd4>)
   1f506:	681b      	ldr	r3, [r3, #0]
   1f508:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1f50c:	bf2a      	itet	cs
   1f50e:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
   1f512:	2301      	movcc	r3, #1
   1f514:	fbb3 f3f2 	udivcs	r3, r3, r2
   1f518:	03d8      	lsls	r0, r3, #15
   1f51a:	eb10 000a 	adds.w	r0, r0, sl
   1f51e:	ea4f 4153 	mov.w	r1, r3, lsr #17
   1f522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f526:	f04f 0300 	mov.w	r3, #0
   1f52a:	eb41 010b 	adc.w	r1, r1, fp
   1f52e:	f7fd fcbb 	bl	1cea8 <__aeabi_uldivmod>
   1f532:	f016 fbd1 	bl	35cd8 <z_impl_k_sleep>
	prev_period = period;
   1f536:	4b14      	ldr	r3, [pc, #80]	; (1f588 <music+0xd4>)
	return pwm_pin_set_usec(pwm_dev, CONFIG_UI_BUZZER_PIN,
   1f538:	463a      	mov	r2, r7
   1f53a:	4629      	mov	r1, r5
   1f53c:	f8d9 0000 	ldr.w	r0, [r9]
	prev_period = period;
   1f540:	601d      	str	r5, [r3, #0]
   1f542:	4657      	mov	r7, sl
	return pwm_pin_set_usec(pwm_dev, CONFIG_UI_BUZZER_PIN,
   1f544:	f7ff fef4 	bl	1f330 <pwm_pin_set_usec.constprop.0>
   1f548:	46d8      	mov	r8, fp
   1f54a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    k_sleep(K_MSEC(duration));
   1f54e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1f552:	fbc1 7806 	smlal	r7, r8, r1, r6
   1f556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f55a:	2300      	movs	r3, #0
   1f55c:	4638      	mov	r0, r7
   1f55e:	4641      	mov	r1, r8
   1f560:	f7fd fca2 	bl	1cea8 <__aeabi_uldivmod>
   1f564:	f016 fbb8 	bl	35cd8 <z_impl_k_sleep>
	if (note>songLength) {
   1f568:	4b08      	ldr	r3, [pc, #32]	; (1f58c <music+0xd8>)
	note ++;
   1f56a:	3401      	adds	r4, #1
	if (note>songLength) {
   1f56c:	681b      	ldr	r3, [r3, #0]
		note = 0;
   1f56e:	42a3      	cmp	r3, r4
   1f570:	bfb8      	it	lt
   1f572:	2400      	movlt	r4, #0
  while(1){
   1f574:	e7a7      	b.n	1f4c6 <music+0x12>
   1f576:	bf00      	nop
   1f578:	00043263 	.word	0x00043263
   1f57c:	20014500 	.word	0x20014500
   1f580:	20014560 	.word	0x20014560
   1f584:	000f4240 	.word	0x000f4240
   1f588:	20016f0c 	.word	0x20016f0c
   1f58c:	200145c0 	.word	0x200145c0
   1f590:	20016f10 	.word	0x20016f10

0001f594 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   1f594:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1f596:	4c0a      	ldr	r4, [pc, #40]	; (1f5c0 <crc8_ccitt+0x2c>)
   1f598:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   1f59a:	4291      	cmp	r1, r2
   1f59c:	d100      	bne.n	1f5a0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   1f59e:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   1f5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f5a4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1f5a6:	0903      	lsrs	r3, r0, #4
   1f5a8:	5ce3      	ldrb	r3, [r4, r3]
   1f5aa:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   1f5ae:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1f5b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1f5b4:	5ce0      	ldrb	r0, [r4, r3]
   1f5b6:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   1f5ba:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   1f5bc:	e7ed      	b.n	1f59a <crc8_ccitt+0x6>
   1f5be:	bf00      	nop
   1f5c0:	0004039c 	.word	0x0004039c

0001f5c4 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1f5c4:	2803      	cmp	r0, #3
{
   1f5c6:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   1f5c8:	d906      	bls.n	1f5d8 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   1f5ca:	f01a ffec 	bl	3a5a6 <__errno>
   1f5ce:	2309      	movs	r3, #9
   1f5d0:	6003      	str	r3, [r0, #0]
   1f5d2:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   1f5d6:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f5d8:	4b04      	ldr	r3, [pc, #16]	; (1f5ec <_check_fd+0x28>)
   1f5da:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1f5de:	3008      	adds	r0, #8
   1f5e0:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   1f5e4:	2b00      	cmp	r3, #0
   1f5e6:	d0f0      	beq.n	1f5ca <_check_fd+0x6>
	return 0;
   1f5e8:	2000      	movs	r0, #0
   1f5ea:	e7f4      	b.n	1f5d6 <_check_fd+0x12>
   1f5ec:	20016f14 	.word	0x20016f14

0001f5f0 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   1f5f0:	b570      	push	{r4, r5, r6, lr}
   1f5f2:	4604      	mov	r4, r0
   1f5f4:	460d      	mov	r5, r1
   1f5f6:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   1f5f8:	f7ff ffe4 	bl	1f5c4 <_check_fd>
   1f5fc:	2800      	cmp	r0, #0
   1f5fe:	db09      	blt.n	1f614 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   1f600:	4b06      	ldr	r3, [pc, #24]	; (1f61c <z_get_fd_obj+0x2c>)
   1f602:	0160      	lsls	r0, r4, #5
   1f604:	b145      	cbz	r5, 1f618 <z_get_fd_obj+0x28>
   1f606:	181a      	adds	r2, r3, r0
   1f608:	6852      	ldr	r2, [r2, #4]
   1f60a:	42aa      	cmp	r2, r5
   1f60c:	d004      	beq.n	1f618 <z_get_fd_obj+0x28>
		errno = err;
   1f60e:	f01a ffca 	bl	3a5a6 <__errno>
   1f612:	6006      	str	r6, [r0, #0]
		return NULL;
   1f614:	2000      	movs	r0, #0
   1f616:	e000      	b.n	1f61a <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   1f618:	5818      	ldr	r0, [r3, r0]
}
   1f61a:	bd70      	pop	{r4, r5, r6, pc}
   1f61c:	20016f14 	.word	0x20016f14

0001f620 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   1f620:	b570      	push	{r4, r5, r6, lr}
   1f622:	4604      	mov	r4, r0
   1f624:	460e      	mov	r6, r1
   1f626:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   1f628:	f7ff ffcc 	bl	1f5c4 <_check_fd>
   1f62c:	2800      	cmp	r0, #0
   1f62e:	db0c      	blt.n	1f64a <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   1f630:	4b07      	ldr	r3, [pc, #28]	; (1f650 <z_get_fd_obj_and_vtable+0x30>)
   1f632:	0161      	lsls	r1, r4, #5
   1f634:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   1f638:	6862      	ldr	r2, [r4, #4]
   1f63a:	6032      	str	r2, [r6, #0]

	if (lock) {
   1f63c:	b11d      	cbz	r5, 1f646 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   1f63e:	f101 020c 	add.w	r2, r1, #12
   1f642:	441a      	add	r2, r3
   1f644:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   1f646:	5858      	ldr	r0, [r3, r1]
}
   1f648:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1f64a:	2000      	movs	r0, #0
   1f64c:	e7fc      	b.n	1f648 <z_get_fd_obj_and_vtable+0x28>
   1f64e:	bf00      	nop
   1f650:	20016f14 	.word	0x20016f14

0001f654 <z_reserve_fd>:

int z_reserve_fd(void)
{
   1f654:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1f656:	2400      	movs	r4, #0
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   1f658:	f04f 32ff 	mov.w	r2, #4294967295
   1f65c:	f04f 33ff 	mov.w	r3, #4294967295
   1f660:	4814      	ldr	r0, [pc, #80]	; (1f6b4 <z_reserve_fd+0x60>)
   1f662:	f014 fcc7 	bl	33ff4 <z_impl_k_mutex_lock>
   1f666:	4a14      	ldr	r2, [pc, #80]	; (1f6b8 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   1f668:	0163      	lsls	r3, r4, #5
   1f66a:	e8d2 1faf 	lda	r1, [r2]
   1f66e:	b179      	cbz	r1, 1f690 <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1f670:	3401      	adds	r4, #1
   1f672:	2c04      	cmp	r4, #4
   1f674:	f102 0220 	add.w	r2, r2, #32
   1f678:	d1f6      	bne.n	1f668 <z_reserve_fd+0x14>
	errno = ENFILE;
   1f67a:	f01a ff94 	bl	3a5a6 <__errno>
   1f67e:	2317      	movs	r3, #23
	return -1;
   1f680:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   1f684:	6003      	str	r3, [r0, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   1f686:	480b      	ldr	r0, [pc, #44]	; (1f6b4 <z_reserve_fd+0x60>)
   1f688:	f014 fdae 	bl	341e8 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   1f68c:	4620      	mov	r0, r4
   1f68e:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1f690:	e8d2 0fef 	ldaex	r0, [r2]
   1f694:	3001      	adds	r0, #1
   1f696:	e8c2 0fec 	stlex	ip, r0, [r2]
   1f69a:	f1bc 0f00 	cmp.w	ip, #0
   1f69e:	d1f7      	bne.n	1f690 <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   1f6a0:	4806      	ldr	r0, [pc, #24]	; (1f6bc <z_reserve_fd+0x68>)
   1f6a2:	18c2      	adds	r2, r0, r3
   1f6a4:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   1f6a6:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   1f6a8:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   1f6aa:	4418      	add	r0, r3
   1f6ac:	f01e fb4d 	bl	3dd4a <z_impl_k_mutex_init>
   1f6b0:	e7e9      	b.n	1f686 <z_reserve_fd+0x32>
   1f6b2:	bf00      	nop
   1f6b4:	20014d50 	.word	0x20014d50
   1f6b8:	20016f1c 	.word	0x20016f1c
   1f6bc:	20016f14 	.word	0x20016f14

0001f6c0 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   1f6c0:	b410      	push	{r4}
   1f6c2:	4604      	mov	r4, r0
   1f6c4:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   1f6c6:	4b0a      	ldr	r3, [pc, #40]	; (1f6f0 <z_finalize_fd+0x30>)
   1f6c8:	0162      	lsls	r2, r4, #5
   1f6ca:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   1f6ce:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   1f6d0:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   1f6d2:	b148      	cbz	r0, 1f6e8 <z_finalize_fd+0x28>
   1f6d4:	68c4      	ldr	r4, [r0, #12]
   1f6d6:	b13c      	cbz	r4, 1f6e8 <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1f6d8:	320c      	adds	r2, #12
   1f6da:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   1f6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   1f6e0:	f240 1205 	movw	r2, #261	; 0x105
   1f6e4:	f019 bd00 	b.w	390e8 <z_fdtable_call_ioctl.constprop.0>
}
   1f6e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f6ec:	4770      	bx	lr
   1f6ee:	bf00      	nop
   1f6f0:	20016f14 	.word	0x20016f14

0001f6f4 <z_free_fd>:

void z_free_fd(int fd)
{
   1f6f4:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   1f6f6:	4b0d      	ldr	r3, [pc, #52]	; (1f72c <z_free_fd+0x38>)
   1f6f8:	0140      	lsls	r0, r0, #5
   1f6fa:	f100 0208 	add.w	r2, r0, #8
   1f6fe:	441a      	add	r2, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f700:	e8d2 1faf 	lda	r1, [r2]
		if (!old_rc) {
   1f704:	b181      	cbz	r1, 1f728 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   1f706:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f708:	e8d2 5fef 	ldaex	r5, [r2]
   1f70c:	428d      	cmp	r5, r1
   1f70e:	d104      	bne.n	1f71a <z_free_fd+0x26>
   1f710:	e8c2 4fec 	stlex	ip, r4, [r2]
   1f714:	f1bc 0f00 	cmp.w	ip, #0
   1f718:	d1f6      	bne.n	1f708 <z_free_fd+0x14>
   1f71a:	d1f1      	bne.n	1f700 <z_free_fd+0xc>
	if (old_rc != 1) {
   1f71c:	2901      	cmp	r1, #1
	fdtable[fd].obj = NULL;
   1f71e:	bf01      	itttt	eq
   1f720:	2200      	moveq	r2, #0
   1f722:	1819      	addeq	r1, r3, r0
   1f724:	501a      	streq	r2, [r3, r0]
	fdtable[fd].vtable = NULL;
   1f726:	604a      	streq	r2, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   1f728:	bd30      	pop	{r4, r5, pc}
   1f72a:	bf00      	nop
   1f72c:	20016f14 	.word	0x20016f14

0001f730 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f730:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1f732:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   1f734:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f738:	2b02      	cmp	r3, #2
{
   1f73a:	4604      	mov	r4, r0
   1f73c:	460e      	mov	r6, r1
	notify->result = res;
   1f73e:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f740:	d010      	beq.n	1f764 <sys_notify_finalize+0x34>
   1f742:	2b03      	cmp	r3, #3
   1f744:	d004      	beq.n	1f750 <sys_notify_finalize+0x20>
   1f746:	2b01      	cmp	r3, #1
   1f748:	d10f      	bne.n	1f76a <sys_notify_finalize+0x3a>
   1f74a:	2500      	movs	r5, #0
   1f74c:	4628      	mov	r0, r5
   1f74e:	e001      	b.n	1f754 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f750:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f752:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f754:	2300      	movs	r3, #0
   1f756:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f758:	b110      	cbz	r0, 1f760 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1f75a:	4631      	mov	r1, r6
   1f75c:	f017 fadc 	bl	36d18 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f760:	4628      	mov	r0, r5
   1f762:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = NULL;
   1f764:	2500      	movs	r5, #0
		sig = notify->method.signal;
   1f766:	6800      	ldr	r0, [r0, #0]
		break;
   1f768:	e7f4      	b.n	1f754 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   1f76a:	2345      	movs	r3, #69	; 0x45
   1f76c:	4a05      	ldr	r2, [pc, #20]	; (1f784 <sys_notify_finalize+0x54>)
   1f76e:	4906      	ldr	r1, [pc, #24]	; (1f788 <sys_notify_finalize+0x58>)
   1f770:	4806      	ldr	r0, [pc, #24]	; (1f78c <sys_notify_finalize+0x5c>)
   1f772:	f019 fcde 	bl	39132 <printk>
   1f776:	2145      	movs	r1, #69	; 0x45
   1f778:	4802      	ldr	r0, [pc, #8]	; (1f784 <sys_notify_finalize+0x54>)
   1f77a:	f019 ff79 	bl	39670 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   1f77e:	2500      	movs	r5, #0
   1f780:	e7e7      	b.n	1f752 <sys_notify_finalize+0x22>
   1f782:	bf00      	nop
   1f784:	000403ac 	.word	0x000403ac
   1f788:	000451fc 	.word	0x000451fc
   1f78c:	0004033e 	.word	0x0004033e

0001f790 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1f790:	680b      	ldr	r3, [r1, #0]
   1f792:	3301      	adds	r3, #1
   1f794:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1f796:	4b01      	ldr	r3, [pc, #4]	; (1f79c <char_out+0xc>)
   1f798:	681b      	ldr	r3, [r3, #0]
   1f79a:	4718      	bx	r3
   1f79c:	200145c4 	.word	0x200145c4

0001f7a0 <__printk_hook_install>:
	_char_out = fn;
   1f7a0:	4b01      	ldr	r3, [pc, #4]	; (1f7a8 <__printk_hook_install+0x8>)
   1f7a2:	6018      	str	r0, [r3, #0]
}
   1f7a4:	4770      	bx	lr
   1f7a6:	bf00      	nop
   1f7a8:	200145c4 	.word	0x200145c4

0001f7ac <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1f7ac:	b507      	push	{r0, r1, r2, lr}
   1f7ae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   1f7b0:	2100      	movs	r1, #0
{
   1f7b2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1f7b4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   1f7b6:	4803      	ldr	r0, [pc, #12]	; (1f7c4 <vprintk+0x18>)
   1f7b8:	a901      	add	r1, sp, #4
   1f7ba:	f000 fd3d 	bl	20238 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1f7be:	b003      	add	sp, #12
   1f7c0:	f85d fb04 	ldr.w	pc, [sp], #4
   1f7c4:	0001f791 	.word	0x0001f791

0001f7c8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7cc:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f7d0:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   1f7d4:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1f7d6:	f019 0f08 	tst.w	r9, #8
{
   1f7da:	4604      	mov	r4, r0
   1f7dc:	9201      	str	r2, [sp, #4]
	if (processing) {
   1f7de:	d024      	beq.n	1f82a <process_event+0x62>
		if (evt == EVT_COMPLETE) {
   1f7e0:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1f7e2:	bf0c      	ite	eq
   1f7e4:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1f7e8:	f049 0920 	orrne.w	r9, r9, #32
   1f7ec:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   1f7f0:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f7f2:	4620      	mov	r0, r4
   1f7f4:	f014 fa7a 	bl	33cec <z_spin_unlock_valid>
   1f7f8:	b968      	cbnz	r0, 1f816 <process_event+0x4e>
   1f7fa:	23ac      	movs	r3, #172	; 0xac
   1f7fc:	4aa2      	ldr	r2, [pc, #648]	; (1fa88 <process_event+0x2c0>)
   1f7fe:	49a3      	ldr	r1, [pc, #652]	; (1fa8c <process_event+0x2c4>)
   1f800:	48a3      	ldr	r0, [pc, #652]	; (1fa90 <process_event+0x2c8>)
   1f802:	f019 fc96 	bl	39132 <printk>
   1f806:	4621      	mov	r1, r4
   1f808:	48a2      	ldr	r0, [pc, #648]	; (1fa94 <process_event+0x2cc>)
   1f80a:	f019 fc92 	bl	39132 <printk>
   1f80e:	21ac      	movs	r1, #172	; 0xac
   1f810:	489d      	ldr	r0, [pc, #628]	; (1fa88 <process_event+0x2c0>)
   1f812:	f019 ff2d 	bl	39670 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1f816:	9b01      	ldr	r3, [sp, #4]
   1f818:	f383 8811 	msr	BASEPRI, r3
   1f81c:	f3bf 8f6f 	isb	sy
}
   1f820:	b003      	add	sp, #12
   1f822:	ecbd 8b02 	vpop	{d8}
   1f826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   1f82a:	4f9b      	ldr	r7, [pc, #620]	; (1fa98 <process_event+0x2d0>)
   1f82c:	f8df 8260 	ldr.w	r8, [pc, #608]	; 1fa90 <process_event+0x2c8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f830:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1f834:	2902      	cmp	r1, #2
   1f836:	d106      	bne.n	1f846 <process_event+0x7e>
			evt = process_recheck(mgr);
   1f838:	4620      	mov	r0, r4
   1f83a:	f019 fc87 	bl	3914c <process_recheck>
		if (evt == EVT_NOP) {
   1f83e:	2800      	cmp	r0, #0
   1f840:	d0d6      	beq.n	1f7f0 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   1f842:	2801      	cmp	r0, #1
   1f844:	d16a      	bne.n	1f91c <process_event+0x154>
			res = mgr->last_res;
   1f846:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f84a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   1f84c:	f1bb 0f00 	cmp.w	fp, #0
   1f850:	da1c      	bge.n	1f88c <process_event+0xc4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1f852:	2600      	movs	r6, #0
		*clients = mgr->clients;
   1f854:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f856:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1f85a:	e9c4 6600 	strd	r6, r6, [r4]
   1f85e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f862:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   1f864:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1f866:	8ba3      	ldrh	r3, [r4, #28]
   1f868:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1f86c:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1f86e:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   1f872:	d003      	beq.n	1f87c <process_event+0xb4>
		if (do_monitors
   1f874:	68a2      	ldr	r2, [r4, #8]
   1f876:	2a00      	cmp	r2, #0
   1f878:	f040 811e 	bne.w	1fab8 <process_event+0x2f0>
		    || !sys_slist_is_empty(&clients)
   1f87c:	b91d      	cbnz	r5, 1f886 <process_event+0xbe>
		    || (transit != NULL)) {
   1f87e:	9a00      	ldr	r2, [sp, #0]
   1f880:	2a00      	cmp	r2, #0
   1f882:	f000 8164 	beq.w	1fb4e <process_event+0x386>
   1f886:	f04f 0900 	mov.w	r9, #0
   1f88a:	e117      	b.n	1fabc <process_event+0x2f4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f88c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1f890:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1f892:	2901      	cmp	r1, #1
   1f894:	d823      	bhi.n	1f8de <process_event+0x116>
	list->head = NULL;
   1f896:	2100      	movs	r1, #0
   1f898:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   1f89c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1f89e:	6825      	ldr	r5, [r4, #0]
   1f8a0:	b29b      	uxth	r3, r3
	list->tail = NULL;
   1f8a2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1f8a6:	d10c      	bne.n	1f8c2 <process_event+0xfa>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1f8a8:	428d      	cmp	r5, r1
   1f8aa:	462a      	mov	r2, r5
   1f8ac:	bf38      	it	cc
   1f8ae:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1f8b0:	b12a      	cbz	r2, 1f8be <process_event+0xf6>
				mgr->refs += 1U;
   1f8b2:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f8b4:	6812      	ldr	r2, [r2, #0]
   1f8b6:	3101      	adds	r1, #1
   1f8b8:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1f8ba:	2a00      	cmp	r2, #0
   1f8bc:	d1f8      	bne.n	1f8b0 <process_event+0xe8>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f8be:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   1f8c2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f8c4:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1f8c6:	f019 fc41 	bl	3914c <process_recheck>
   1f8ca:	2800      	cmp	r0, #0
   1f8cc:	f000 80d7 	beq.w	1fa7e <process_event+0x2b6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1f8d0:	8ba3      	ldrh	r3, [r4, #28]
   1f8d2:	f043 0320 	orr.w	r3, r3, #32
   1f8d6:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   1f8d8:	2300      	movs	r3, #0
   1f8da:	9300      	str	r3, [sp, #0]
   1f8dc:	e7c3      	b.n	1f866 <process_event+0x9e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1f8de:	2a04      	cmp	r2, #4
   1f8e0:	d10f      	bne.n	1f902 <process_event+0x13a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f8e2:	f023 0307 	bic.w	r3, r3, #7
   1f8e6:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   1f8e8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f8ea:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1f8ec:	f019 fc2e 	bl	3914c <process_recheck>
   1f8f0:	2800      	cmp	r0, #0
   1f8f2:	f000 80c6 	beq.w	1fa82 <process_event+0x2ba>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1f8f6:	f042 0220 	orr.w	r2, r2, #32
   1f8fa:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   1f8fc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1f8fe:	9500      	str	r5, [sp, #0]
   1f900:	e7b1      	b.n	1f866 <process_event+0x9e>
		__ASSERT_NO_MSG(false);
   1f902:	4640      	mov	r0, r8
   1f904:	f240 131b 	movw	r3, #283	; 0x11b
   1f908:	463a      	mov	r2, r7
   1f90a:	4964      	ldr	r1, [pc, #400]	; (1fa9c <process_event+0x2d4>)
   1f90c:	f019 fc11 	bl	39132 <printk>
   1f910:	f240 111b 	movw	r1, #283	; 0x11b
   1f914:	4638      	mov	r0, r7
   1f916:	f019 feab 	bl	39670 <assert_post_action>
   1f91a:	e7ef      	b.n	1f8fc <process_event+0x134>
		} else if (evt == EVT_START) {
   1f91c:	2803      	cmp	r0, #3
   1f91e:	d135      	bne.n	1f98c <process_event+0x1c4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1f920:	f1b9 0f00 	cmp.w	r9, #0
   1f924:	d00b      	beq.n	1f93e <process_event+0x176>
   1f926:	4640      	mov	r0, r8
   1f928:	495d      	ldr	r1, [pc, #372]	; (1faa0 <process_event+0x2d8>)
   1f92a:	f44f 73ab 	mov.w	r3, #342	; 0x156
   1f92e:	463a      	mov	r2, r7
   1f930:	f019 fbff 	bl	39132 <printk>
   1f934:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1f938:	4638      	mov	r0, r7
   1f93a:	f019 fe99 	bl	39670 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1f93e:	6823      	ldr	r3, [r4, #0]
   1f940:	b95b      	cbnz	r3, 1f95a <process_event+0x192>
   1f942:	4640      	mov	r0, r8
   1f944:	4957      	ldr	r1, [pc, #348]	; (1faa4 <process_event+0x2dc>)
   1f946:	f240 1357 	movw	r3, #343	; 0x157
   1f94a:	463a      	mov	r2, r7
   1f94c:	f019 fbf1 	bl	39132 <printk>
   1f950:	f240 1157 	movw	r1, #343	; 0x157
   1f954:	4638      	mov	r0, r7
   1f956:	f019 fe8b 	bl	39670 <assert_post_action>
			transit = mgr->transitions->start;
   1f95a:	6923      	ldr	r3, [r4, #16]
   1f95c:	681b      	ldr	r3, [r3, #0]
   1f95e:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1f960:	b95b      	cbnz	r3, 1f97a <process_event+0x1b2>
   1f962:	4640      	mov	r0, r8
   1f964:	4950      	ldr	r1, [pc, #320]	; (1faa8 <process_event+0x2e0>)
   1f966:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   1f96a:	463a      	mov	r2, r7
   1f96c:	f019 fbe1 	bl	39132 <printk>
   1f970:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   1f974:	4638      	mov	r0, r7
   1f976:	f019 fe7b 	bl	39670 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f97a:	8ba3      	ldrh	r3, [r4, #28]
   1f97c:	f023 0307 	bic.w	r3, r3, #7
   1f980:	f043 0306 	orr.w	r3, r3, #6
}
   1f984:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   1f986:	83a3      	strh	r3, [r4, #28]
		res = 0;
   1f988:	46ab      	mov	fp, r5
}
   1f98a:	e76c      	b.n	1f866 <process_event+0x9e>
		} else if (evt == EVT_STOP) {
   1f98c:	2804      	cmp	r0, #4
   1f98e:	d132      	bne.n	1f9f6 <process_event+0x22e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   1f990:	f1b9 0f02 	cmp.w	r9, #2
   1f994:	d00b      	beq.n	1f9ae <process_event+0x1e6>
   1f996:	4640      	mov	r0, r8
   1f998:	4944      	ldr	r1, [pc, #272]	; (1faac <process_event+0x2e4>)
   1f99a:	f240 135d 	movw	r3, #349	; 0x15d
   1f99e:	463a      	mov	r2, r7
   1f9a0:	f019 fbc7 	bl	39132 <printk>
   1f9a4:	f240 115d 	movw	r1, #349	; 0x15d
   1f9a8:	4638      	mov	r0, r7
   1f9aa:	f019 fe61 	bl	39670 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1f9ae:	8be3      	ldrh	r3, [r4, #30]
   1f9b0:	b15b      	cbz	r3, 1f9ca <process_event+0x202>
   1f9b2:	4640      	mov	r0, r8
   1f9b4:	493e      	ldr	r1, [pc, #248]	; (1fab0 <process_event+0x2e8>)
   1f9b6:	f44f 73af 	mov.w	r3, #350	; 0x15e
   1f9ba:	463a      	mov	r2, r7
   1f9bc:	f019 fbb9 	bl	39132 <printk>
   1f9c0:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1f9c4:	4638      	mov	r0, r7
   1f9c6:	f019 fe53 	bl	39670 <assert_post_action>
			transit = mgr->transitions->stop;
   1f9ca:	6923      	ldr	r3, [r4, #16]
   1f9cc:	685b      	ldr	r3, [r3, #4]
   1f9ce:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1f9d0:	b95b      	cbnz	r3, 1f9ea <process_event+0x222>
   1f9d2:	4640      	mov	r0, r8
   1f9d4:	4934      	ldr	r1, [pc, #208]	; (1faa8 <process_event+0x2e0>)
   1f9d6:	f240 1361 	movw	r3, #353	; 0x161
   1f9da:	463a      	mov	r2, r7
   1f9dc:	f019 fba9 	bl	39132 <printk>
   1f9e0:	f240 1161 	movw	r1, #353	; 0x161
   1f9e4:	4638      	mov	r0, r7
   1f9e6:	f019 fe43 	bl	39670 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1f9ea:	8ba3      	ldrh	r3, [r4, #28]
   1f9ec:	f023 0307 	bic.w	r3, r3, #7
   1f9f0:	f043 0304 	orr.w	r3, r3, #4
   1f9f4:	e7c6      	b.n	1f984 <process_event+0x1bc>
		} else if (evt == EVT_RESET) {
   1f9f6:	2805      	cmp	r0, #5
   1f9f8:	d132      	bne.n	1fa60 <process_event+0x298>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1f9fa:	f1b9 0f01 	cmp.w	r9, #1
   1f9fe:	d00b      	beq.n	1fa18 <process_event+0x250>
   1fa00:	4640      	mov	r0, r8
   1fa02:	492c      	ldr	r1, [pc, #176]	; (1fab4 <process_event+0x2ec>)
   1fa04:	f44f 73b2 	mov.w	r3, #356	; 0x164
   1fa08:	463a      	mov	r2, r7
   1fa0a:	f019 fb92 	bl	39132 <printk>
   1fa0e:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1fa12:	4638      	mov	r0, r7
   1fa14:	f019 fe2c 	bl	39670 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1fa18:	6823      	ldr	r3, [r4, #0]
   1fa1a:	b95b      	cbnz	r3, 1fa34 <process_event+0x26c>
   1fa1c:	4640      	mov	r0, r8
   1fa1e:	4921      	ldr	r1, [pc, #132]	; (1faa4 <process_event+0x2dc>)
   1fa20:	f240 1365 	movw	r3, #357	; 0x165
   1fa24:	463a      	mov	r2, r7
   1fa26:	f019 fb84 	bl	39132 <printk>
   1fa2a:	f240 1165 	movw	r1, #357	; 0x165
   1fa2e:	4638      	mov	r0, r7
   1fa30:	f019 fe1e 	bl	39670 <assert_post_action>
			transit = mgr->transitions->reset;
   1fa34:	6923      	ldr	r3, [r4, #16]
   1fa36:	689b      	ldr	r3, [r3, #8]
   1fa38:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   1fa3a:	b95b      	cbnz	r3, 1fa54 <process_event+0x28c>
   1fa3c:	4640      	mov	r0, r8
   1fa3e:	491a      	ldr	r1, [pc, #104]	; (1faa8 <process_event+0x2e0>)
   1fa40:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1fa44:	463a      	mov	r2, r7
   1fa46:	f019 fb74 	bl	39132 <printk>
   1fa4a:	f44f 71b4 	mov.w	r1, #360	; 0x168
   1fa4e:	4638      	mov	r0, r7
   1fa50:	f019 fe0e 	bl	39670 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1fa54:	8ba3      	ldrh	r3, [r4, #28]
   1fa56:	f023 0307 	bic.w	r3, r3, #7
   1fa5a:	f043 0305 	orr.w	r3, r3, #5
   1fa5e:	e791      	b.n	1f984 <process_event+0x1bc>
			__ASSERT_NO_MSG(false);
   1fa60:	2500      	movs	r5, #0
   1fa62:	f240 136b 	movw	r3, #363	; 0x16b
   1fa66:	463a      	mov	r2, r7
   1fa68:	4640      	mov	r0, r8
   1fa6a:	490c      	ldr	r1, [pc, #48]	; (1fa9c <process_event+0x2d4>)
   1fa6c:	f019 fb61 	bl	39132 <printk>
   1fa70:	f240 116b 	movw	r1, #363	; 0x16b
   1fa74:	4638      	mov	r0, r7
   1fa76:	f019 fdfb 	bl	39670 <assert_post_action>
		onoff_transition_fn transit = NULL;
   1fa7a:	9500      	str	r5, [sp, #0]
   1fa7c:	e784      	b.n	1f988 <process_event+0x1c0>
   1fa7e:	9000      	str	r0, [sp, #0]
   1fa80:	e6f1      	b.n	1f866 <process_event+0x9e>
   1fa82:	4605      	mov	r5, r0
   1fa84:	e73b      	b.n	1f8fe <process_event+0x136>
   1fa86:	bf00      	nop
   1fa88:	00040472 	.word	0x00040472
   1fa8c:	00040498 	.word	0x00040498
   1fa90:	0004033e 	.word	0x0004033e
   1fa94:	000404af 	.word	0x000404af
   1fa98:	000403cf 	.word	0x000403cf
   1fa9c:	000451fc 	.word	0x000451fc
   1faa0:	000403f1 	.word	0x000403f1
   1faa4:	000403fd 	.word	0x000403fd
   1faa8:	00040420 	.word	0x00040420
   1faac:	00040437 	.word	0x00040437
   1fab0:	0004044d 	.word	0x0004044d
   1fab4:	0004045c 	.word	0x0004045c
				   && !sys_slist_is_empty(&mgr->monitors);
   1fab8:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1fabc:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   1fac0:	f104 0a14 	add.w	sl, r4, #20
   1fac4:	4650      	mov	r0, sl
			mgr->flags = flags;
   1fac6:	83a3      	strh	r3, [r4, #28]
   1fac8:	f014 f910 	bl	33cec <z_spin_unlock_valid>
   1facc:	b968      	cbnz	r0, 1faea <process_event+0x322>
   1face:	23ac      	movs	r3, #172	; 0xac
   1fad0:	4640      	mov	r0, r8
   1fad2:	4a3a      	ldr	r2, [pc, #232]	; (1fbbc <process_event+0x3f4>)
   1fad4:	493a      	ldr	r1, [pc, #232]	; (1fbc0 <process_event+0x3f8>)
   1fad6:	f019 fb2c 	bl	39132 <printk>
   1fada:	4651      	mov	r1, sl
   1fadc:	4839      	ldr	r0, [pc, #228]	; (1fbc4 <process_event+0x3fc>)
   1fade:	f019 fb28 	bl	39132 <printk>
   1fae2:	21ac      	movs	r1, #172	; 0xac
   1fae4:	4835      	ldr	r0, [pc, #212]	; (1fbbc <process_event+0x3f4>)
   1fae6:	f019 fdc3 	bl	39670 <assert_post_action>
   1faea:	9b01      	ldr	r3, [sp, #4]
   1faec:	f383 8811 	msr	BASEPRI, r3
   1faf0:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1faf4:	f1b9 0f00 	cmp.w	r9, #0
   1faf8:	d138      	bne.n	1fb6c <process_event+0x3a4>
	while (!sys_slist_is_empty(list)) {
   1fafa:	2d00      	cmp	r5, #0
   1fafc:	d14c      	bne.n	1fb98 <process_event+0x3d0>
			if (transit != NULL) {
   1fafe:	9b00      	ldr	r3, [sp, #0]
   1fb00:	b113      	cbz	r3, 1fb08 <process_event+0x340>
				transit(mgr, transition_complete);
   1fb02:	4620      	mov	r0, r4
   1fb04:	4930      	ldr	r1, [pc, #192]	; (1fbc8 <process_event+0x400>)
   1fb06:	4798      	blx	r3
	__asm__ volatile(
   1fb08:	f04f 0320 	mov.w	r3, #32
   1fb0c:	f3ef 8b11 	mrs	fp, BASEPRI
   1fb10:	f383 8811 	msr	BASEPRI, r3
   1fb14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fb18:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   1fb1a:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fb1e:	f014 f8d7 	bl	33cd0 <z_spin_lock_valid>
   1fb22:	b968      	cbnz	r0, 1fb40 <process_event+0x378>
   1fb24:	2381      	movs	r3, #129	; 0x81
   1fb26:	4640      	mov	r0, r8
   1fb28:	4a24      	ldr	r2, [pc, #144]	; (1fbbc <process_event+0x3f4>)
   1fb2a:	4928      	ldr	r1, [pc, #160]	; (1fbcc <process_event+0x404>)
   1fb2c:	f019 fb01 	bl	39132 <printk>
   1fb30:	4651      	mov	r1, sl
   1fb32:	4827      	ldr	r0, [pc, #156]	; (1fbd0 <process_event+0x408>)
   1fb34:	f019 fafd 	bl	39132 <printk>
   1fb38:	2181      	movs	r1, #129	; 0x81
   1fb3a:	4820      	ldr	r0, [pc, #128]	; (1fbbc <process_event+0x3f4>)
   1fb3c:	f019 fd98 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fb40:	4650      	mov	r0, sl
   1fb42:	f014 f8e3 	bl	33d0c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1fb46:	8ba3      	ldrh	r3, [r4, #28]
   1fb48:	f023 0308 	bic.w	r3, r3, #8
   1fb4c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1fb4e:	8ba3      	ldrh	r3, [r4, #28]
   1fb50:	06da      	lsls	r2, r3, #27
   1fb52:	d52a      	bpl.n	1fbaa <process_event+0x3e2>
			evt = EVT_COMPLETE;
   1fb54:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1fb56:	f023 0310 	bic.w	r3, r3, #16
   1fb5a:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1fb5c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   1fb60:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1fb64:	2900      	cmp	r1, #0
   1fb66:	f47f ae65 	bne.w	1f834 <process_event+0x6c>
out:
   1fb6a:	e641      	b.n	1f7f0 <process_event+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1fb6c:	68a1      	ldr	r1, [r4, #8]
   1fb6e:	2900      	cmp	r1, #0
   1fb70:	d0c3      	beq.n	1fafa <process_event+0x332>
	return node->next;
   1fb72:	680b      	ldr	r3, [r1, #0]
   1fb74:	2b00      	cmp	r3, #0
   1fb76:	bf38      	it	cc
   1fb78:	2300      	movcc	r3, #0
   1fb7a:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   1fb7c:	684b      	ldr	r3, [r1, #4]
   1fb7e:	ee18 2a10 	vmov	r2, s16
   1fb82:	461e      	mov	r6, r3
   1fb84:	4620      	mov	r0, r4
   1fb86:	465b      	mov	r3, fp
   1fb88:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1fb8a:	f1b9 0f00 	cmp.w	r9, #0
   1fb8e:	d0b4      	beq.n	1fafa <process_event+0x332>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fb90:	4649      	mov	r1, r9
   1fb92:	f8d9 3000 	ldr.w	r3, [r9]
   1fb96:	e7ed      	b.n	1fb74 <process_event+0x3ac>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fb98:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1fb9a:	465b      	mov	r3, fp
   1fb9c:	ee18 2a10 	vmov	r2, s16
   1fba0:	4620      	mov	r0, r4
   1fba2:	682d      	ldr	r5, [r5, #0]
   1fba4:	f019 faee 	bl	39184 <notify_one>
   1fba8:	e7a7      	b.n	1fafa <process_event+0x332>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1fbaa:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1fbae:	bf1e      	ittt	ne
   1fbb0:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   1fbb4:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1fbb6:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   1fbb8:	e7d0      	b.n	1fb5c <process_event+0x394>
   1fbba:	bf00      	nop
   1fbbc:	00040472 	.word	0x00040472
   1fbc0:	00040498 	.word	0x00040498
   1fbc4:	000404af 	.word	0x000404af
   1fbc8:	0001fbd5 	.word	0x0001fbd5
   1fbcc:	000404c4 	.word	0x000404c4
   1fbd0:	000404d9 	.word	0x000404d9

0001fbd4 <transition_complete>:
{
   1fbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fbd6:	4604      	mov	r4, r0
   1fbd8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1fbda:	f100 0614 	add.w	r6, r0, #20
   1fbde:	f04f 0320 	mov.w	r3, #32
   1fbe2:	f3ef 8711 	mrs	r7, BASEPRI
   1fbe6:	f383 8811 	msr	BASEPRI, r3
   1fbea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fbee:	4630      	mov	r0, r6
   1fbf0:	f014 f86e 	bl	33cd0 <z_spin_lock_valid>
   1fbf4:	b968      	cbnz	r0, 1fc12 <transition_complete+0x3e>
   1fbf6:	2381      	movs	r3, #129	; 0x81
   1fbf8:	4a0b      	ldr	r2, [pc, #44]	; (1fc28 <transition_complete+0x54>)
   1fbfa:	490c      	ldr	r1, [pc, #48]	; (1fc2c <transition_complete+0x58>)
   1fbfc:	480c      	ldr	r0, [pc, #48]	; (1fc30 <transition_complete+0x5c>)
   1fbfe:	f019 fa98 	bl	39132 <printk>
   1fc02:	4631      	mov	r1, r6
   1fc04:	480b      	ldr	r0, [pc, #44]	; (1fc34 <transition_complete+0x60>)
   1fc06:	f019 fa94 	bl	39132 <printk>
   1fc0a:	2181      	movs	r1, #129	; 0x81
   1fc0c:	4806      	ldr	r0, [pc, #24]	; (1fc28 <transition_complete+0x54>)
   1fc0e:	f019 fd2f 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fc12:	4630      	mov	r0, r6
   1fc14:	f014 f87a 	bl	33d0c <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   1fc18:	463a      	mov	r2, r7
   1fc1a:	4620      	mov	r0, r4
	mgr->last_res = res;
   1fc1c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1fc1e:	2101      	movs	r1, #1
}
   1fc20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1fc24:	f7ff bdd0 	b.w	1f7c8 <process_event>
   1fc28:	00040472 	.word	0x00040472
   1fc2c:	000404c4 	.word	0x000404c4
   1fc30:	0004033e 	.word	0x0004033e
   1fc34:	000404d9 	.word	0x000404d9

0001fc38 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1fc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fc3c:	4604      	mov	r4, r0
   1fc3e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1fc40:	f019 fab6 	bl	391b0 <validate_args>

	if (rv < 0) {
   1fc44:	1e05      	subs	r5, r0, #0
   1fc46:	db5e      	blt.n	1fd06 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1fc48:	f104 0914 	add.w	r9, r4, #20
   1fc4c:	f04f 0320 	mov.w	r3, #32
   1fc50:	f3ef 8a11 	mrs	sl, BASEPRI
   1fc54:	f383 8811 	msr	BASEPRI, r3
   1fc58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fc5c:	4648      	mov	r0, r9
   1fc5e:	f014 f837 	bl	33cd0 <z_spin_lock_valid>
   1fc62:	b968      	cbnz	r0, 1fc80 <onoff_request+0x48>
   1fc64:	2381      	movs	r3, #129	; 0x81
   1fc66:	4a38      	ldr	r2, [pc, #224]	; (1fd48 <onoff_request+0x110>)
   1fc68:	4938      	ldr	r1, [pc, #224]	; (1fd4c <onoff_request+0x114>)
   1fc6a:	4839      	ldr	r0, [pc, #228]	; (1fd50 <onoff_request+0x118>)
   1fc6c:	f019 fa61 	bl	39132 <printk>
   1fc70:	4649      	mov	r1, r9
   1fc72:	4838      	ldr	r0, [pc, #224]	; (1fd54 <onoff_request+0x11c>)
   1fc74:	f019 fa5d 	bl	39132 <printk>
   1fc78:	2181      	movs	r1, #129	; 0x81
   1fc7a:	4833      	ldr	r0, [pc, #204]	; (1fd48 <onoff_request+0x110>)
   1fc7c:	f019 fcf8 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fc80:	4648      	mov	r0, r9
   1fc82:	f014 f843 	bl	33d0c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1fc86:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1fc8a:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fc8c:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1fc8e:	428b      	cmp	r3, r1
   1fc90:	f002 0607 	and.w	r6, r2, #7
   1fc94:	d050      	beq.n	1fd38 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1fc96:	2e02      	cmp	r6, #2
   1fc98:	d124      	bne.n	1fce4 <onoff_request+0xac>
	rv = state;
   1fc9a:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   1fc9c:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   1fca0:	3301      	adds	r3, #1
   1fca2:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fca4:	4648      	mov	r0, r9
   1fca6:	f014 f821 	bl	33cec <z_spin_unlock_valid>
   1fcaa:	b968      	cbnz	r0, 1fcc8 <onoff_request+0x90>
   1fcac:	23ac      	movs	r3, #172	; 0xac
   1fcae:	4a26      	ldr	r2, [pc, #152]	; (1fd48 <onoff_request+0x110>)
   1fcb0:	4929      	ldr	r1, [pc, #164]	; (1fd58 <onoff_request+0x120>)
   1fcb2:	4827      	ldr	r0, [pc, #156]	; (1fd50 <onoff_request+0x118>)
   1fcb4:	f019 fa3d 	bl	39132 <printk>
   1fcb8:	4649      	mov	r1, r9
   1fcba:	4828      	ldr	r0, [pc, #160]	; (1fd5c <onoff_request+0x124>)
   1fcbc:	f019 fa39 	bl	39132 <printk>
   1fcc0:	21ac      	movs	r1, #172	; 0xac
   1fcc2:	4821      	ldr	r0, [pc, #132]	; (1fd48 <onoff_request+0x110>)
   1fcc4:	f019 fcd4 	bl	39670 <assert_post_action>
	__asm__ volatile(
   1fcc8:	f38a 8811 	msr	BASEPRI, sl
   1fccc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1fcd0:	f1b8 0f00 	cmp.w	r8, #0
   1fcd4:	d017      	beq.n	1fd06 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   1fcd6:	2300      	movs	r3, #0
   1fcd8:	4632      	mov	r2, r6
   1fcda:	4639      	mov	r1, r7
   1fcdc:	4620      	mov	r0, r4
   1fcde:	f019 fa51 	bl	39184 <notify_one>
   1fce2:	e010      	b.n	1fd06 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   1fce4:	0793      	lsls	r3, r2, #30
   1fce6:	d001      	beq.n	1fcec <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   1fce8:	2e06      	cmp	r6, #6
   1fcea:	d10f      	bne.n	1fd0c <onoff_request+0xd4>
	parent->next = child;
   1fcec:	2300      	movs	r3, #0
   1fcee:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   1fcf0:	6863      	ldr	r3, [r4, #4]
   1fcf2:	b9f3      	cbnz	r3, 1fd32 <onoff_request+0xfa>
	list->head = node;
   1fcf4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   1fcf8:	4635      	mov	r5, r6
   1fcfa:	b9fe      	cbnz	r6, 1fd3c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   1fcfc:	4652      	mov	r2, sl
   1fcfe:	2102      	movs	r1, #2
   1fd00:	4620      	mov	r0, r4
   1fd02:	f7ff fd61 	bl	1f7c8 <process_event>
		}
	}

	return rv;
}
   1fd06:	4628      	mov	r0, r5
   1fd08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   1fd0c:	2e05      	cmp	r6, #5
   1fd0e:	d018      	beq.n	1fd42 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1fd10:	2e01      	cmp	r6, #1
   1fd12:	d00b      	beq.n	1fd2c <onoff_request+0xf4>
   1fd14:	4912      	ldr	r1, [pc, #72]	; (1fd60 <onoff_request+0x128>)
   1fd16:	480e      	ldr	r0, [pc, #56]	; (1fd50 <onoff_request+0x118>)
   1fd18:	f240 13c9 	movw	r3, #457	; 0x1c9
   1fd1c:	4a11      	ldr	r2, [pc, #68]	; (1fd64 <onoff_request+0x12c>)
   1fd1e:	f019 fa08 	bl	39132 <printk>
   1fd22:	f240 11c9 	movw	r1, #457	; 0x1c9
   1fd26:	480f      	ldr	r0, [pc, #60]	; (1fd64 <onoff_request+0x12c>)
   1fd28:	f019 fca2 	bl	39670 <assert_post_action>
		rv = -EIO;
   1fd2c:	f06f 0504 	mvn.w	r5, #4
   1fd30:	e004      	b.n	1fd3c <onoff_request+0x104>
	parent->next = child;
   1fd32:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1fd34:	6067      	str	r7, [r4, #4]
}
   1fd36:	e7df      	b.n	1fcf8 <onoff_request+0xc0>
		rv = -EAGAIN;
   1fd38:	f06f 050a 	mvn.w	r5, #10
   1fd3c:	f04f 0800 	mov.w	r8, #0
   1fd40:	e7b0      	b.n	1fca4 <onoff_request+0x6c>
		rv = -ENOTSUP;
   1fd42:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1fd46:	e7f9      	b.n	1fd3c <onoff_request+0x104>
   1fd48:	00040472 	.word	0x00040472
   1fd4c:	000404c4 	.word	0x000404c4
   1fd50:	0004033e 	.word	0x0004033e
   1fd54:	000404d9 	.word	0x000404d9
   1fd58:	00040498 	.word	0x00040498
   1fd5c:	000404af 	.word	0x000404af
   1fd60:	0004045c 	.word	0x0004045c
   1fd64:	000403cf 	.word	0x000403cf

0001fd68 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   1fd68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1fd6c:	f240 746c 	movw	r4, #1900	; 0x76c
   1fd70:	2500      	movs	r5, #0
	unsigned int m = tm->tm_mon + 1;
   1fd72:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   1fd74:	68c2      	ldr	r2, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   1fd76:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   1fd7a:	1e53      	subs	r3, r2, #1
   1fd7c:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1fd7e:	6943      	ldr	r3, [r0, #20]
{
   1fd80:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1fd82:	18e4      	adds	r4, r4, r3
   1fd84:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   1fd88:	f1b9 0f02 	cmp.w	r9, #2
   1fd8c:	bf8c      	ite	hi
   1fd8e:	2300      	movhi	r3, #0
   1fd90:	2301      	movls	r3, #1
   1fd92:	1ae4      	subs	r4, r4, r3
   1fd94:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1fd98:	2c00      	cmp	r4, #0
   1fd9a:	f175 0300 	sbcs.w	r3, r5, #0
   1fd9e:	da54      	bge.n	1fe4a <timeutil_timegm64+0xe2>
   1fda0:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   1fda4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1fda8:	2300      	movs	r3, #0
   1fdaa:	1820      	adds	r0, r4, r0
   1fdac:	f145 31ff 	adc.w	r1, r5, #4294967295
   1fdb0:	f7fd f82a 	bl	1ce08 <__aeabi_ldivmod>
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1fdb4:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   1fdb8:	4a27      	ldr	r2, [pc, #156]	; (1fe58 <timeutil_timegm64+0xf0>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1fdba:	4603      	mov	r3, r0
	unsigned int yoe = y - era * 400;
   1fdbc:	fb02 4200 	mla	r2, r2, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1fdc0:	e9d8 0400 	ldrd	r0, r4, [r8]
   1fdc4:	f8d8 8008 	ldr.w	r8, [r8, #8]
   1fdc8:	17e5      	asrs	r5, r4, #31
   1fdca:	fbcc 4508 	smlal	r4, r5, ip, r8
   1fdce:	fba4 ab0c 	umull	sl, fp, r4, ip
   1fdd2:	fb0c bb05 	mla	fp, ip, r5, fp
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1fdd6:	f1b9 0f02 	cmp.w	r9, #2
   1fdda:	bf8c      	ite	hi
   1fddc:	f06f 0e02 	mvnhi.w	lr, #2
   1fde0:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1fde4:	eb1a 0a00 	adds.w	sl, sl, r0
   1fde8:	eb4b 7be0 	adc.w	fp, fp, r0, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1fdec:	f240 106d 	movw	r0, #365	; 0x16d
   1fdf0:	0894      	lsrs	r4, r2, #2
   1fdf2:	fb00 4002 	mla	r0, r0, r2, r4
   1fdf6:	9c01      	ldr	r4, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1fdf8:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1fdfa:	4420      	add	r0, r4
   1fdfc:	2464      	movs	r4, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1fdfe:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1fe02:	fbb2 f4f4 	udiv	r4, r2, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1fe06:	2205      	movs	r2, #5
   1fe08:	fb0e fe09 	mul.w	lr, lr, r9
   1fe0c:	f10e 0e02 	add.w	lr, lr, #2
   1fe10:	fbbe fef2 	udiv	lr, lr, r2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1fe14:	1b04      	subs	r4, r0, r4
	return era * 146097 + (time_t)doe - 719468;
   1fe16:	4811      	ldr	r0, [pc, #68]	; (1fe5c <timeutil_timegm64+0xf4>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1fe18:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   1fe1a:	fba3 2300 	umull	r2, r3, r3, r0
   1fe1e:	fb00 3301 	mla	r3, r0, r1, r3
   1fe22:	490f      	ldr	r1, [pc, #60]	; (1fe60 <timeutil_timegm64+0xf8>)
   1fe24:	1856      	adds	r6, r2, r1
	time += 86400LL * ndays;
   1fe26:	490f      	ldr	r1, [pc, #60]	; (1fe64 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   1fe28:	f143 37ff 	adc.w	r7, r3, #4294967295
   1fe2c:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   1fe30:	fba6 2301 	umull	r2, r3, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   1fe34:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   1fe38:	fb01 3307 	mla	r3, r1, r7, r3

	return time;
}
   1fe3c:	eb12 000a 	adds.w	r0, r2, sl
   1fe40:	eb43 010b 	adc.w	r1, r3, fp
   1fe44:	b003      	add	sp, #12
   1fe46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1fe4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1fe4e:	2300      	movs	r3, #0
   1fe50:	4620      	mov	r0, r4
   1fe52:	4629      	mov	r1, r5
   1fe54:	e7ac      	b.n	1fdb0 <timeutil_timegm64+0x48>
   1fe56:	bf00      	nop
   1fe58:	fffffe70 	.word	0xfffffe70
   1fe5c:	00023ab1 	.word	0x00023ab1
   1fe60:	fff50594 	.word	0xfff50594
   1fe64:	00015180 	.word	0x00015180

0001fe68 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   1fe68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   1fe6a:	460e      	mov	r6, r1
   1fe6c:	2900      	cmp	r1, #0
   1fe6e:	d043      	beq.n	1fef8 <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1fe70:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fe72:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1fe74:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fe76:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   1fe78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1fe7c:	bf2c      	ite	cs
   1fe7e:	2408      	movcs	r4, #8
   1fe80:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fe82:	1b0c      	subs	r4, r1, r4
   1fe84:	1b64      	subs	r4, r4, r5
   1fe86:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fe88:	4621      	mov	r1, r4
   1fe8a:	f019 f9d1 	bl	39230 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   1fe8e:	07c3      	lsls	r3, r0, #31
   1fe90:	d40d      	bmi.n	1feae <sys_heap_free+0x46>
   1fe92:	239a      	movs	r3, #154	; 0x9a
   1fe94:	4a19      	ldr	r2, [pc, #100]	; (1fefc <sys_heap_free+0x94>)
   1fe96:	491a      	ldr	r1, [pc, #104]	; (1ff00 <sys_heap_free+0x98>)
   1fe98:	481a      	ldr	r0, [pc, #104]	; (1ff04 <sys_heap_free+0x9c>)
   1fe9a:	f019 f94a 	bl	39132 <printk>
   1fe9e:	4631      	mov	r1, r6
   1fea0:	4819      	ldr	r0, [pc, #100]	; (1ff08 <sys_heap_free+0xa0>)
   1fea2:	f019 f946 	bl	39132 <printk>
   1fea6:	219a      	movs	r1, #154	; 0x9a
   1fea8:	4814      	ldr	r0, [pc, #80]	; (1fefc <sys_heap_free+0x94>)
   1feaa:	f019 fbe1 	bl	39670 <assert_post_action>
	return c + chunk_size(h, c);
   1feae:	4621      	mov	r1, r4
   1feb0:	4628      	mov	r0, r5
   1feb2:	f019 f9d3 	bl	3925c <chunk_size>
   1feb6:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   1feb8:	2200      	movs	r2, #0
   1feba:	4639      	mov	r1, r7
   1febc:	4628      	mov	r0, r5
   1febe:	f019 f9b7 	bl	39230 <chunk_field>
   1fec2:	1a38      	subs	r0, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   1fec4:	4284      	cmp	r4, r0
   1fec6:	d00d      	beq.n	1fee4 <sys_heap_free+0x7c>
   1fec8:	23a2      	movs	r3, #162	; 0xa2
   1feca:	4a0c      	ldr	r2, [pc, #48]	; (1fefc <sys_heap_free+0x94>)
   1fecc:	490f      	ldr	r1, [pc, #60]	; (1ff0c <sys_heap_free+0xa4>)
   1fece:	480d      	ldr	r0, [pc, #52]	; (1ff04 <sys_heap_free+0x9c>)
   1fed0:	f019 f92f 	bl	39132 <printk>
   1fed4:	4631      	mov	r1, r6
   1fed6:	480e      	ldr	r0, [pc, #56]	; (1ff10 <sys_heap_free+0xa8>)
   1fed8:	f019 f92b 	bl	39132 <printk>
   1fedc:	21a2      	movs	r1, #162	; 0xa2
   1fede:	4807      	ldr	r0, [pc, #28]	; (1fefc <sys_heap_free+0x94>)
   1fee0:	f019 fbc6 	bl	39670 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   1fee4:	4621      	mov	r1, r4
   1fee6:	4628      	mov	r0, r5
   1fee8:	2200      	movs	r2, #0
   1feea:	f019 f9bd 	bl	39268 <set_chunk_used>
	free_chunk(h, c);
   1feee:	4621      	mov	r1, r4
}
   1fef0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   1fef4:	f019 baf6 	b.w	394e4 <free_chunk>
}
   1fef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fefa:	bf00      	nop
   1fefc:	000404f1 	.word	0x000404f1
   1ff00:	00040512 	.word	0x00040512
   1ff04:	0004033e 	.word	0x0004033e
   1ff08:	00040523 	.word	0x00040523
   1ff0c:	0004055b 	.word	0x0004055b
   1ff10:	00040581 	.word	0x00040581

0001ff14 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1ff14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;
   1ff18:	6806      	ldr	r6, [r0, #0]
{
   1ff1a:	4614      	mov	r4, r2
   1ff1c:	68b3      	ldr	r3, [r6, #8]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1ff1e:	424a      	negs	r2, r1
	return big_heap(h) ? 8 : 4;
   1ff20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ff24:	bf2c      	ite	cs
   1ff26:	2508      	movcs	r5, #8
   1ff28:	2504      	movcc	r5, #4
   1ff2a:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1ff2e:	ea31 0202 	bics.w	r2, r1, r2
   1ff32:	d01e      	beq.n	1ff72 <sys_heap_aligned_alloc+0x5e>
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1ff34:	42bd      	cmp	r5, r7
   1ff36:	bf28      	it	cs
   1ff38:	463d      	movcs	r5, r7
   1ff3a:	46b9      	mov	r9, r7
		align -= rew;
   1ff3c:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   1ff3e:	f107 3aff 	add.w	sl, r7, #4294967295
   1ff42:	ea1a 0f07 	tst.w	sl, r7
   1ff46:	d00e      	beq.n	1ff66 <sys_heap_aligned_alloc+0x52>
   1ff48:	4935      	ldr	r1, [pc, #212]	; (20020 <sys_heap_aligned_alloc+0x10c>)
   1ff4a:	f240 130d 	movw	r3, #269	; 0x10d
   1ff4e:	4a35      	ldr	r2, [pc, #212]	; (20024 <sys_heap_aligned_alloc+0x110>)
   1ff50:	4835      	ldr	r0, [pc, #212]	; (20028 <sys_heap_aligned_alloc+0x114>)
   1ff52:	f019 f8ee 	bl	39132 <printk>
   1ff56:	4835      	ldr	r0, [pc, #212]	; (2002c <sys_heap_aligned_alloc+0x118>)
   1ff58:	f019 f8eb 	bl	39132 <printk>
   1ff5c:	f240 110d 	movw	r1, #269	; 0x10d
   1ff60:	4830      	ldr	r0, [pc, #192]	; (20024 <sys_heap_aligned_alloc+0x110>)
   1ff62:	f019 fb85 	bl	39670 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   1ff66:	b974      	cbnz	r4, 1ff86 <sys_heap_aligned_alloc+0x72>
		return NULL;
   1ff68:	f04f 0900 	mov.w	r9, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1ff6c:	4648      	mov	r0, r9
   1ff6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   1ff72:	42a9      	cmp	r1, r5
   1ff74:	d804      	bhi.n	1ff80 <sys_heap_aligned_alloc+0x6c>
			return sys_heap_alloc(heap, bytes);
   1ff76:	4621      	mov	r1, r4
}
   1ff78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   1ff7c:	f019 baf6 	b.w	3956c <sys_heap_alloc>
		rew = 0;
   1ff80:	f04f 0900 	mov.w	r9, #0
   1ff84:	e7db      	b.n	1ff3e <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1ff86:	68b3      	ldr	r3, [r6, #8]
   1ff88:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1ff8c:	d9ec      	bls.n	1ff68 <sys_heap_aligned_alloc+0x54>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1ff8e:	1939      	adds	r1, r7, r4
   1ff90:	1b49      	subs	r1, r1, r5
   1ff92:	4630      	mov	r0, r6
   1ff94:	f019 f984 	bl	392a0 <bytes_to_chunksz>
   1ff98:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1ff9a:	4630      	mov	r0, r6
   1ff9c:	f019 fa0b 	bl	393b6 <alloc_chunk>
	if (c0 == 0) {
   1ffa0:	4680      	mov	r8, r0
   1ffa2:	2800      	cmp	r0, #0
   1ffa4:	d0e0      	beq.n	1ff68 <sys_heap_aligned_alloc+0x54>
	return big_heap(h) ? 8 : 4;
   1ffa6:	68b3      	ldr	r3, [r6, #8]
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1ffa8:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1ffac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ffb0:	bf2c      	ite	cs
   1ffb2:	2308      	movcs	r3, #8
   1ffb4:	2304      	movcc	r3, #4
   1ffb6:	441d      	add	r5, r3
   1ffb8:	4435      	add	r5, r6
   1ffba:	4455      	add	r5, sl
   1ffbc:	427f      	negs	r7, r7
   1ffbe:	402f      	ands	r7, r5
   1ffc0:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ffc4:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ffc6:	eba9 0303 	sub.w	r3, r9, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ffca:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ffcc:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ffce:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1ffd2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1ffd4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ffd8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1ffdc:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1ffe0:	d208      	bcs.n	1fff4 <sys_heap_aligned_alloc+0xe0>
		split_chunks(h, c0, c);
   1ffe2:	4601      	mov	r1, r0
   1ffe4:	463a      	mov	r2, r7
   1ffe6:	4630      	mov	r0, r6
   1ffe8:	f019 f98f 	bl	3930a <split_chunks>
		free_list_add(h, c0);
   1ffec:	4641      	mov	r1, r8
   1ffee:	4630      	mov	r0, r6
   1fff0:	f019 fa1c 	bl	3942c <free_list_add>
	return c + chunk_size(h, c);
   1fff4:	4639      	mov	r1, r7
   1fff6:	4630      	mov	r0, r6
   1fff8:	f019 f930 	bl	3925c <chunk_size>
   1fffc:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1fffe:	4284      	cmp	r4, r0
   20000:	d208      	bcs.n	20014 <sys_heap_aligned_alloc+0x100>
		split_chunks(h, c, c_end);
   20002:	4639      	mov	r1, r7
   20004:	4630      	mov	r0, r6
   20006:	4622      	mov	r2, r4
   20008:	f019 f97f 	bl	3930a <split_chunks>
		free_list_add(h, c_end);
   2000c:	4621      	mov	r1, r4
   2000e:	4630      	mov	r0, r6
   20010:	f019 fa0c 	bl	3942c <free_list_add>
	set_chunk_used(h, c, true);
   20014:	2201      	movs	r2, #1
   20016:	4639      	mov	r1, r7
   20018:	4630      	mov	r0, r6
   2001a:	f019 f925 	bl	39268 <set_chunk_used>
	return mem;
   2001e:	e7a5      	b.n	1ff6c <sys_heap_aligned_alloc+0x58>
   20020:	000405bd 	.word	0x000405bd
   20024:	000404f1 	.word	0x000404f1
   20028:	0004033e 	.word	0x0004033e
   2002c:	000405d8 	.word	0x000405d8

00020030 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   20030:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   20034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20036:	4607      	mov	r7, r0
   20038:	460d      	mov	r5, r1
   2003a:	4616      	mov	r6, r2
   2003c:	d212      	bcs.n	20064 <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   2003e:	2a04      	cmp	r2, #4
   20040:	d80e      	bhi.n	20060 <sys_heap_init+0x30>
   20042:	4944      	ldr	r1, [pc, #272]	; (20154 <sys_heap_init+0x124>)
   20044:	f44f 73c1 	mov.w	r3, #386	; 0x182
   20048:	4a43      	ldr	r2, [pc, #268]	; (20158 <sys_heap_init+0x128>)
   2004a:	4844      	ldr	r0, [pc, #272]	; (2015c <sys_heap_init+0x12c>)
   2004c:	f019 f871 	bl	39132 <printk>
   20050:	4843      	ldr	r0, [pc, #268]	; (20160 <sys_heap_init+0x130>)
   20052:	f019 f86e 	bl	39132 <printk>
   20056:	f44f 71c1 	mov.w	r1, #386	; 0x182
   2005a:	483f      	ldr	r0, [pc, #252]	; (20158 <sys_heap_init+0x128>)
   2005c:	f019 fb08 	bl	39670 <assert_post_action>
   20060:	2204      	movs	r2, #4
   20062:	e000      	b.n	20066 <sys_heap_init+0x36>
   20064:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   20066:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   20068:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2006a:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2006c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   20070:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   20074:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   20076:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   20078:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   2007c:	d80e      	bhi.n	2009c <sys_heap_init+0x6c>
   2007e:	4939      	ldr	r1, [pc, #228]	; (20164 <sys_heap_init+0x134>)
   20080:	f240 138b 	movw	r3, #395	; 0x18b
   20084:	4a34      	ldr	r2, [pc, #208]	; (20158 <sys_heap_init+0x128>)
   20086:	4835      	ldr	r0, [pc, #212]	; (2015c <sys_heap_init+0x12c>)
   20088:	f019 f853 	bl	39132 <printk>
   2008c:	4834      	ldr	r0, [pc, #208]	; (20160 <sys_heap_init+0x130>)
   2008e:	f019 f850 	bl	39132 <printk>
   20092:	f240 118b 	movw	r1, #395	; 0x18b
   20096:	4830      	ldr	r0, [pc, #192]	; (20158 <sys_heap_init+0x128>)
   20098:	f019 faea 	bl	39670 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2009c:	2300      	movs	r3, #0
	heap->heap = h;
   2009e:	603c      	str	r4, [r7, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   200a0:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   200a2:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   200a4:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
   200a6:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   200a8:	f019 f904 	bl	392b4 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   200ac:	2101      	movs	r1, #1
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   200ae:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   200b0:	1c47      	adds	r7, r0, #1
   200b2:	4620      	mov	r0, r4
   200b4:	f019 f8f4 	bl	392a0 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   200b8:	351b      	adds	r5, #27
   200ba:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");
   200bc:	4428      	add	r0, r5
   200be:	42b0      	cmp	r0, r6
   200c0:	d30e      	bcc.n	200e0 <sys_heap_init+0xb0>
   200c2:	4929      	ldr	r1, [pc, #164]	; (20168 <sys_heap_init+0x138>)
   200c4:	f44f 73cb 	mov.w	r3, #406	; 0x196
   200c8:	4a23      	ldr	r2, [pc, #140]	; (20158 <sys_heap_init+0x128>)
   200ca:	4824      	ldr	r0, [pc, #144]	; (2015c <sys_heap_init+0x12c>)
   200cc:	f019 f831 	bl	39132 <printk>
   200d0:	4823      	ldr	r0, [pc, #140]	; (20160 <sys_heap_init+0x130>)
   200d2:	f019 f82e 	bl	39132 <printk>
   200d6:	f44f 71cb 	mov.w	r1, #406	; 0x196
   200da:	481f      	ldr	r0, [pc, #124]	; (20158 <sys_heap_init+0x128>)
   200dc:	f019 fac8 	bl	39670 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   200e0:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   200e2:	4619      	mov	r1, r3
   200e4:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   200e8:	42bb      	cmp	r3, r7
   200ea:	db2f      	blt.n	2014c <sys_heap_init+0x11c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   200ec:	462a      	mov	r2, r5
   200ee:	4620      	mov	r0, r4
   200f0:	2100      	movs	r1, #0
   200f2:	f019 f8d1 	bl	39298 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   200f6:	2300      	movs	r3, #0
   200f8:	4620      	mov	r0, r4
   200fa:	461a      	mov	r2, r3
   200fc:	4619      	mov	r1, r3
   200fe:	f019 f8a2 	bl	39246 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   20102:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   20104:	4620      	mov	r0, r4
   20106:	2201      	movs	r2, #1
   20108:	2100      	movs	r1, #0
   2010a:	f019 f8ad 	bl	39268 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2010e:	463a      	mov	r2, r7
   20110:	4629      	mov	r1, r5
   20112:	f019 f8c1 	bl	39298 <set_chunk_size>
   20116:	462b      	mov	r3, r5
   20118:	4629      	mov	r1, r5
   2011a:	4620      	mov	r0, r4
   2011c:	2200      	movs	r2, #0
   2011e:	f019 f892 	bl	39246 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   20122:	4631      	mov	r1, r6
   20124:	4620      	mov	r0, r4
   20126:	2200      	movs	r2, #0
   20128:	f019 f8b6 	bl	39298 <set_chunk_size>
   2012c:	463b      	mov	r3, r7
   2012e:	4631      	mov	r1, r6
   20130:	4620      	mov	r0, r4
   20132:	2200      	movs	r2, #0
   20134:	f019 f887 	bl	39246 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   20138:	4631      	mov	r1, r6
   2013a:	4620      	mov	r0, r4
   2013c:	2201      	movs	r2, #1
   2013e:	f019 f893 	bl	39268 <set_chunk_used>

	free_list_add(h, chunk0_size);
   20142:	4629      	mov	r1, r5
}
   20144:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   20148:	f019 b970 	b.w	3942c <free_list_add>
		h->buckets[i].next = 0;
   2014c:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   20150:	3301      	adds	r3, #1
   20152:	e7c9      	b.n	200e8 <sys_heap_init+0xb8>
   20154:	000405f5 	.word	0x000405f5
   20158:	000404f1 	.word	0x000404f1
   2015c:	0004033e 	.word	0x0004033e
   20160:	00040616 	.word	0x00040616
   20164:	0004062f 	.word	0x0004062f
   20168:	00040658 	.word	0x00040658

0002016c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   2016c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2016e:	4602      	mov	r2, r0
   20170:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   20172:	270a      	movs	r7, #10
	size_t val = 0;
   20174:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   20176:	4e07      	ldr	r6, [pc, #28]	; (20194 <extract_decimal+0x28>)
   20178:	460c      	mov	r4, r1
   2017a:	7823      	ldrb	r3, [r4, #0]
   2017c:	3101      	adds	r1, #1
   2017e:	5d9d      	ldrb	r5, [r3, r6]
   20180:	076d      	lsls	r5, r5, #29
   20182:	d401      	bmi.n	20188 <extract_decimal+0x1c>
	}
	*str = sp;
   20184:	6014      	str	r4, [r2, #0]
	return val;
}
   20186:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   20188:	fb07 3300 	mla	r3, r7, r0, r3
   2018c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   20190:	e7f2      	b.n	20178 <extract_decimal+0xc>
   20192:	bf00      	nop
   20194:	000462ab 	.word	0x000462ab

00020198 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   20198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2019c:	4614      	mov	r4, r2
   2019e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   201a0:	78d3      	ldrb	r3, [r2, #3]
   201a2:	4a24      	ldr	r2, [pc, #144]	; (20234 <encode_uint+0x9c>)
	switch (specifier) {
   201a4:	2b6f      	cmp	r3, #111	; 0x6f
   201a6:	f813 a002 	ldrb.w	sl, [r3, r2]
{
   201aa:	4606      	mov	r6, r0
   201ac:	f00a 0203 	and.w	r2, sl, #3
   201b0:	460f      	mov	r7, r1
   201b2:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   201b4:	d02d      	beq.n	20212 <encode_uint+0x7a>
   201b6:	d828      	bhi.n	2020a <encode_uint+0x72>
		return 16;
   201b8:	2b58      	cmp	r3, #88	; 0x58
   201ba:	bf14      	ite	ne
   201bc:	250a      	movne	r5, #10
   201be:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   201c0:	46aa      	mov	sl, r5
   201c2:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   201c6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   201ca:	4652      	mov	r2, sl
   201cc:	465b      	mov	r3, fp
   201ce:	4630      	mov	r0, r6
   201d0:	4639      	mov	r1, r7
   201d2:	f7fc fe69 	bl	1cea8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   201d6:	2a09      	cmp	r2, #9
   201d8:	b2d3      	uxtb	r3, r2
   201da:	d81f      	bhi.n	2021c <encode_uint+0x84>
   201dc:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   201de:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   201e0:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   201e2:	bf08      	it	eq
   201e4:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   201e6:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   201ea:	d301      	bcc.n	201f0 <encode_uint+0x58>
   201ec:	45c8      	cmp	r8, r9
   201ee:	d812      	bhi.n	20216 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   201f0:	7823      	ldrb	r3, [r4, #0]
   201f2:	069b      	lsls	r3, r3, #26
   201f4:	d505      	bpl.n	20202 <encode_uint+0x6a>
		if (radix == 8) {
   201f6:	2d08      	cmp	r5, #8
   201f8:	d116      	bne.n	20228 <encode_uint+0x90>
			conv->altform_0 = true;
   201fa:	78a3      	ldrb	r3, [r4, #2]
   201fc:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   20200:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   20202:	4640      	mov	r0, r8
   20204:	b003      	add	sp, #12
   20206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2020a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   2020e:	2b70      	cmp	r3, #112	; 0x70
   20210:	e7d3      	b.n	201ba <encode_uint+0x22>
	switch (specifier) {
   20212:	2508      	movs	r5, #8
   20214:	e7d4      	b.n	201c0 <encode_uint+0x28>
		value /= radix;
   20216:	4606      	mov	r6, r0
   20218:	460f      	mov	r7, r1
   2021a:	e7d6      	b.n	201ca <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2021c:	9a01      	ldr	r2, [sp, #4]
   2021e:	2a01      	cmp	r2, #1
   20220:	bf0c      	ite	eq
   20222:	3337      	addeq	r3, #55	; 0x37
   20224:	3357      	addne	r3, #87	; 0x57
   20226:	e7da      	b.n	201de <encode_uint+0x46>
		} else if (radix == 16) {
   20228:	2d10      	cmp	r5, #16
   2022a:	d1ea      	bne.n	20202 <encode_uint+0x6a>
			conv->altform_0c = true;
   2022c:	78a3      	ldrb	r3, [r4, #2]
   2022e:	f043 0310 	orr.w	r3, r3, #16
   20232:	e7e5      	b.n	20200 <encode_uint+0x68>
   20234:	000462ab 	.word	0x000462ab

00020238 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   20238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2023c:	4688      	mov	r8, r1
   2023e:	4691      	mov	r9, r2
   20240:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   20242:	2500      	movs	r5, #0
{
   20244:	b0a3      	sub	sp, #140	; 0x8c
   20246:	9006      	str	r0, [sp, #24]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   20248:	f899 0000 	ldrb.w	r0, [r9]
   2024c:	b910      	cbnz	r0, 20254 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
   2024e:	4628      	mov	r0, r5
   20250:	f000 bdae 	b.w	20db0 <cbvprintf+0xb78>
		if (*fp != '%') {
   20254:	f109 0301 	add.w	r3, r9, #1
   20258:	2825      	cmp	r0, #37	; 0x25
   2025a:	9307      	str	r3, [sp, #28]
   2025c:	d007      	beq.n	2026e <cbvprintf+0x36>
			OUTC(*fp++);
   2025e:	4641      	mov	r1, r8
			OUTC('%');
   20260:	9b06      	ldr	r3, [sp, #24]
   20262:	4798      	blx	r3
   20264:	2800      	cmp	r0, #0
   20266:	f2c0 85a3 	blt.w	20db0 <cbvprintf+0xb78>
   2026a:	3501      	adds	r5, #1
		if (bps == NULL) {
   2026c:	e224      	b.n	206b8 <cbvprintf+0x480>
		} state = {
   2026e:	2218      	movs	r2, #24
   20270:	2100      	movs	r1, #0
   20272:	a814      	add	r0, sp, #80	; 0x50
   20274:	f01d fe99 	bl	3dfaa <memset>
	if (*sp == '%') {
   20278:	f899 3001 	ldrb.w	r3, [r9, #1]
   2027c:	2b25      	cmp	r3, #37	; 0x25
   2027e:	d059      	beq.n	20334 <cbvprintf+0xfc>
   20280:	9a07      	ldr	r2, [sp, #28]
   20282:	4616      	mov	r6, r2
		switch (*sp) {
   20284:	f812 3b01 	ldrb.w	r3, [r2], #1
   20288:	2b2b      	cmp	r3, #43	; 0x2b
   2028a:	f000 808b 	beq.w	203a4 <cbvprintf+0x16c>
   2028e:	d879      	bhi.n	20384 <cbvprintf+0x14c>
   20290:	2b20      	cmp	r3, #32
   20292:	f000 808c 	beq.w	203ae <cbvprintf+0x176>
   20296:	2b23      	cmp	r3, #35	; 0x23
   20298:	f000 808e 	beq.w	203b8 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
   2029c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   202a0:	f003 0244 	and.w	r2, r3, #68	; 0x44
   202a4:	2a44      	cmp	r2, #68	; 0x44
   202a6:	d103      	bne.n	202b0 <cbvprintf+0x78>
		conv->flag_zero = false;
   202a8:	f36f 1386 	bfc	r3, #6, #1
   202ac:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	conv->width_present = true;
   202b0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   202b4:	9612      	str	r6, [sp, #72]	; 0x48
   202b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   202ba:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	if (*sp == '*') {
   202be:	7833      	ldrb	r3, [r6, #0]
   202c0:	2b2a      	cmp	r3, #42	; 0x2a
   202c2:	d17e      	bne.n	203c2 <cbvprintf+0x18a>
		conv->width_star = true;
   202c4:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   202c8:	f043 0301 	orr.w	r3, r3, #1
   202cc:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		return ++sp;
   202d0:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   202d2:	9312      	str	r3, [sp, #72]	; 0x48
	conv->prec_present = (*sp == '.');
   202d4:	781a      	ldrb	r2, [r3, #0]
   202d6:	2a2e      	cmp	r2, #46	; 0x2e
   202d8:	bf0c      	ite	eq
   202da:	2101      	moveq	r1, #1
   202dc:	2100      	movne	r1, #0
   202de:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
   202e2:	f361 0241 	bfi	r2, r1, #1, #1
   202e6:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	if (!conv->prec_present) {
   202ea:	d10b      	bne.n	20304 <cbvprintf+0xcc>
	++sp;
   202ec:	1c5a      	adds	r2, r3, #1
   202ee:	9212      	str	r2, [sp, #72]	; 0x48
	if (*sp == '*') {
   202f0:	785a      	ldrb	r2, [r3, #1]
   202f2:	2a2a      	cmp	r2, #42	; 0x2a
   202f4:	d17b      	bne.n	203ee <cbvprintf+0x1b6>
		conv->prec_star = true;
   202f6:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
		return ++sp;
   202fa:	3302      	adds	r3, #2
		conv->prec_star = true;
   202fc:	f042 0204 	orr.w	r2, r2, #4
   20300:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	switch (*sp) {
   20304:	461a      	mov	r2, r3
   20306:	f812 0b01 	ldrb.w	r0, [r2], #1
   2030a:	286c      	cmp	r0, #108	; 0x6c
   2030c:	f000 80cf 	beq.w	204ae <cbvprintf+0x276>
   20310:	d87d      	bhi.n	2040e <cbvprintf+0x1d6>
   20312:	2868      	cmp	r0, #104	; 0x68
   20314:	f000 8084 	beq.w	20420 <cbvprintf+0x1e8>
   20318:	286a      	cmp	r0, #106	; 0x6a
   2031a:	f000 80d2 	beq.w	204c2 <cbvprintf+0x28a>
   2031e:	284c      	cmp	r0, #76	; 0x4c
   20320:	f000 80d6 	beq.w	204d0 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
   20324:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
   20328:	f36f 02c6 	bfc	r2, #3, #4
   2032c:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		break;
   20330:	461a      	mov	r2, r3
   20332:	e080      	b.n	20436 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
   20334:	f109 0202 	add.w	r2, r9, #2
   20338:	9207      	str	r2, [sp, #28]
   2033a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
		if (conv->width_star) {
   2033e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   20342:	07de      	lsls	r6, r3, #31
   20344:	f140 816d 	bpl.w	20622 <cbvprintf+0x3ea>
			width = va_arg(ap, int);
   20348:	f854 ab04 	ldr.w	sl, [r4], #4
			if (width < 0) {
   2034c:	f1ba 0f00 	cmp.w	sl, #0
   20350:	da07      	bge.n	20362 <cbvprintf+0x12a>
				conv->flag_dash = true;
   20352:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
				width = -width;
   20356:	f1ca 0a00 	rsb	sl, sl, #0
				conv->flag_dash = true;
   2035a:	f042 0204 	orr.w	r2, r2, #4
   2035e:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		if (conv->prec_star) {
   20362:	0758      	lsls	r0, r3, #29
   20364:	f140 8166 	bpl.w	20634 <cbvprintf+0x3fc>
			int arg = va_arg(ap, int);
   20368:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   2036c:	2f00      	cmp	r7, #0
   2036e:	f280 8165 	bge.w	2063c <cbvprintf+0x404>
				conv->prec_present = false;
   20372:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   20376:	f36f 0341 	bfc	r3, #1, #1
   2037a:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
   2037e:	f04f 37ff 	mov.w	r7, #4294967295
   20382:	e15b      	b.n	2063c <cbvprintf+0x404>
		switch (*sp) {
   20384:	2b2d      	cmp	r3, #45	; 0x2d
   20386:	d006      	beq.n	20396 <cbvprintf+0x15e>
   20388:	2b30      	cmp	r3, #48	; 0x30
   2038a:	d187      	bne.n	2029c <cbvprintf+0x64>
			conv->flag_zero = true;
   2038c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   20390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20394:	e003      	b.n	2039e <cbvprintf+0x166>
			conv->flag_dash = true;
   20396:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   2039a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   2039e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
			break;
   203a2:	e76e      	b.n	20282 <cbvprintf+0x4a>
			conv->flag_plus = true;
   203a4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   203a8:	f043 0308 	orr.w	r3, r3, #8
   203ac:	e7f7      	b.n	2039e <cbvprintf+0x166>
			conv->flag_space = true;
   203ae:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   203b2:	f043 0310 	orr.w	r3, r3, #16
   203b6:	e7f2      	b.n	2039e <cbvprintf+0x166>
			conv->flag_hash = true;
   203b8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   203bc:	f043 0320 	orr.w	r3, r3, #32
   203c0:	e7ed      	b.n	2039e <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
   203c2:	a812      	add	r0, sp, #72	; 0x48
   203c4:	f7ff fed2 	bl	2016c <extract_decimal>
	if (sp != wp) {
   203c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   203ca:	42b3      	cmp	r3, r6
   203cc:	d081      	beq.n	202d2 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
   203ce:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
		conv->width_value = width;
   203d2:	9017      	str	r0, [sp, #92]	; 0x5c
		conv->unsupported |= ((conv->width_value < 0)
   203d4:	f3c6 0140 	ubfx	r1, r6, #1, #1
   203d8:	ea41 70d0 	orr.w	r0, r1, r0, lsr #31
   203dc:	0042      	lsls	r2, r0, #1
   203de:	f062 027f 	orn	r2, r2, #127	; 0x7f
   203e2:	f006 067d 	and.w	r6, r6, #125	; 0x7d
   203e6:	4332      	orrs	r2, r6
   203e8:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
   203ec:	e771      	b.n	202d2 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
   203ee:	a812      	add	r0, sp, #72	; 0x48
   203f0:	f7ff febc 	bl	2016c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   203f4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
	conv->prec_value = prec;
   203f8:	9018      	str	r0, [sp, #96]	; 0x60
	conv->unsupported |= ((conv->prec_value < 0)
   203fa:	f3c3 0240 	ubfx	r2, r3, #1, #1
   203fe:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   20402:	f360 0341 	bfi	r3, r0, #1, #1
   20406:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	return sp;
   2040a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2040c:	e77a      	b.n	20304 <cbvprintf+0xcc>
	switch (*sp) {
   2040e:	2874      	cmp	r0, #116	; 0x74
   20410:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   20414:	d059      	beq.n	204ca <cbvprintf+0x292>
   20416:	287a      	cmp	r0, #122	; 0x7a
   20418:	d184      	bne.n	20324 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
   2041a:	460b      	mov	r3, r1
   2041c:	2106      	movs	r1, #6
   2041e:	e041      	b.n	204a4 <cbvprintf+0x26c>
		if (*++sp == 'h') {
   20420:	7859      	ldrb	r1, [r3, #1]
   20422:	2968      	cmp	r1, #104	; 0x68
   20424:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   20428:	d13a      	bne.n	204a0 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
   2042a:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
   2042c:	f362 01c6 	bfi	r1, r2, #3, #4
   20430:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
			++sp;
   20434:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
   20436:	4613      	mov	r3, r2
   20438:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   2043c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   2043e:	9307      	str	r3, [sp, #28]
   20440:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
	switch (conv->specifier) {
   20444:	f200 80c5 	bhi.w	205d2 <cbvprintf+0x39a>
   20448:	2a57      	cmp	r2, #87	; 0x57
   2044a:	d84e      	bhi.n	204ea <cbvprintf+0x2b2>
   2044c:	2a41      	cmp	r2, #65	; 0x41
   2044e:	d004      	beq.n	2045a <cbvprintf+0x222>
   20450:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   20454:	2b02      	cmp	r3, #2
   20456:	f200 80bc 	bhi.w	205d2 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   2045a:	2104      	movs	r1, #4
   2045c:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
   20460:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   20464:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   20468:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   2046c:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
   20470:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
			|| (conv->specifier == 'A');
   20474:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
   20478:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   2047c:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
   2047e:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		conv->specifier_a = (conv->specifier == 'a')
   20482:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
		if (conv->specifier_a
   20486:	b2cb      	uxtb	r3, r1
   20488:	f100 80c9 	bmi.w	2061e <cbvprintf+0x3e6>
		if (conv->length_mod == LENGTH_L) {
   2048c:	f003 0278 	and.w	r2, r3, #120	; 0x78
   20490:	2a18      	cmp	r2, #24
   20492:	f040 809b 	bne.w	205cc <cbvprintf+0x394>
			conv->length_mod = LENGTH_NONE;
   20496:	f36f 03c6 	bfc	r3, #3, #4
   2049a:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
   2049e:	e082      	b.n	205a6 <cbvprintf+0x36e>
			conv->length_mod = LENGTH_H;
   204a0:	460b      	mov	r3, r1
   204a2:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
   204a4:	f361 03c6 	bfi	r3, r1, #3, #4
   204a8:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
   204ac:	e7c3      	b.n	20436 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
   204ae:	7859      	ldrb	r1, [r3, #1]
   204b0:	296c      	cmp	r1, #108	; 0x6c
   204b2:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   204b6:	d101      	bne.n	204bc <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
   204b8:	2204      	movs	r2, #4
   204ba:	e7b7      	b.n	2042c <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
   204bc:	460b      	mov	r3, r1
   204be:	2103      	movs	r1, #3
   204c0:	e7f0      	b.n	204a4 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
   204c2:	2105      	movs	r1, #5
   204c4:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   204c8:	e7ec      	b.n	204a4 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
   204ca:	460b      	mov	r3, r1
   204cc:	2107      	movs	r1, #7
   204ce:	e7e9      	b.n	204a4 <cbvprintf+0x26c>
		conv->unsupported = true;
   204d0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   204d4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   204d8:	f023 0302 	bic.w	r3, r3, #2
   204dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   204e0:	f043 0302 	orr.w	r3, r3, #2
   204e4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
		break;
   204e8:	e7a5      	b.n	20436 <cbvprintf+0x1fe>
   204ea:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   204ee:	2b20      	cmp	r3, #32
   204f0:	d86f      	bhi.n	205d2 <cbvprintf+0x39a>
   204f2:	a101      	add	r1, pc, #4	; (adr r1, 204f8 <cbvprintf+0x2c0>)
   204f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   204f8:	000205ab 	.word	0x000205ab
   204fc:	000205d3 	.word	0x000205d3
   20500:	000205d3 	.word	0x000205d3
   20504:	000205d3 	.word	0x000205d3
   20508:	000205d3 	.word	0x000205d3
   2050c:	000205d3 	.word	0x000205d3
   20510:	000205d3 	.word	0x000205d3
   20514:	000205d3 	.word	0x000205d3
   20518:	000205d3 	.word	0x000205d3
   2051c:	0002045b 	.word	0x0002045b
   20520:	000205d3 	.word	0x000205d3
   20524:	000205ab 	.word	0x000205ab
   20528:	0002057d 	.word	0x0002057d
   2052c:	0002045b 	.word	0x0002045b
   20530:	0002045b 	.word	0x0002045b
   20534:	0002045b 	.word	0x0002045b
   20538:	000205d3 	.word	0x000205d3
   2053c:	0002057d 	.word	0x0002057d
   20540:	000205d3 	.word	0x000205d3
   20544:	000205d3 	.word	0x000205d3
   20548:	000205d3 	.word	0x000205d3
   2054c:	000205d3 	.word	0x000205d3
   20550:	000205e1 	.word	0x000205e1
   20554:	000205ab 	.word	0x000205ab
   20558:	00020601 	.word	0x00020601
   2055c:	000205d3 	.word	0x000205d3
   20560:	000205d3 	.word	0x000205d3
   20564:	00020601 	.word	0x00020601
   20568:	000205d3 	.word	0x000205d3
   2056c:	000205ab 	.word	0x000205ab
   20570:	000205d3 	.word	0x000205d3
   20574:	000205d3 	.word	0x000205d3
   20578:	000205ab 	.word	0x000205ab
		conv->specifier_cat = SPECIFIER_SINT;
   2057c:	2101      	movs	r1, #1
   2057e:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		conv->specifier_cat = SPECIFIER_UINT;
   20582:	f361 0302 	bfi	r3, r1, #0, #3
   20586:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
   2058a:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   2058e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   20592:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   20594:	bf02      	ittt	eq
   20596:	f89d 1058 	ldrbeq.w	r1, [sp, #88]	; 0x58
   2059a:	f041 0101 	orreq.w	r1, r1, #1
   2059e:	f88d 1058 	strbeq.w	r1, [sp, #88]	; 0x58
		if (conv->specifier == 'c') {
   205a2:	2a63      	cmp	r2, #99	; 0x63
   205a4:	d005      	beq.n	205b2 <cbvprintf+0x37a>
	bool unsupported = false;
   205a6:	2300      	movs	r3, #0
   205a8:	e006      	b.n	205b8 <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_UINT;
   205aa:	2102      	movs	r1, #2
   205ac:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   205b0:	e7e7      	b.n	20582 <cbvprintf+0x34a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   205b2:	3b00      	subs	r3, #0
   205b4:	bf18      	it	ne
   205b6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   205b8:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   205bc:	f3c2 0140 	ubfx	r1, r2, #1, #1
   205c0:	430b      	orrs	r3, r1
   205c2:	f363 0241 	bfi	r2, r3, #1, #1
   205c6:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	return sp;
   205ca:	e6b8      	b.n	2033e <cbvprintf+0x106>
		} else if ((conv->length_mod != LENGTH_NONE)
   205cc:	f013 0f38 	tst.w	r3, #56	; 0x38
   205d0:	d0e9      	beq.n	205a6 <cbvprintf+0x36e>
			conv->invalid = true;
   205d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   205d6:	f043 0301 	orr.w	r3, r3, #1
   205da:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   205de:	e7e2      	b.n	205a6 <cbvprintf+0x36e>
		conv->specifier_cat = SPECIFIER_PTR;
   205e0:	2203      	movs	r2, #3
   205e2:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   205e6:	f362 0302 	bfi	r3, r2, #0, #3
   205ea:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
   205ee:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   205f2:	f003 0378 	and.w	r3, r3, #120	; 0x78
   205f6:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
   205fa:	427b      	negs	r3, r7
   205fc:	417b      	adcs	r3, r7
   205fe:	e7db      	b.n	205b8 <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_PTR;
   20600:	2203      	movs	r2, #3
   20602:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   20606:	f362 0302 	bfi	r3, r2, #0, #3
   2060a:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod != LENGTH_NONE) {
   2060e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   20612:	f013 0f78 	tst.w	r3, #120	; 0x78
   20616:	bf14      	ite	ne
   20618:	2301      	movne	r3, #1
   2061a:	2300      	moveq	r3, #0
   2061c:	e7cc      	b.n	205b8 <cbvprintf+0x380>
			unsupported = true;
   2061e:	2301      	movs	r3, #1
   20620:	e7ca      	b.n	205b8 <cbvprintf+0x380>
		} else if (conv->width_present) {
   20622:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   20626:	2a00      	cmp	r2, #0
		int width = -1;
   20628:	bfac      	ite	ge
   2062a:	f04f 3aff 	movge.w	sl, #4294967295
			width = conv->width_value;
   2062e:	f8dd a05c 	ldrlt.w	sl, [sp, #92]	; 0x5c
   20632:	e696      	b.n	20362 <cbvprintf+0x12a>
		} else if (conv->prec_present) {
   20634:	0799      	lsls	r1, r3, #30
   20636:	f57f aea2 	bpl.w	2037e <cbvprintf+0x146>
			precision = conv->prec_value;
   2063a:	9f18      	ldr	r7, [sp, #96]	; 0x60
		conv->pad0_value = 0;
   2063c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   2063e:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv->specifier_cat == SPECIFIER_FP)
   20642:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   20646:	f003 0307 	and.w	r3, r3, #7
   2064a:	2b04      	cmp	r3, #4
   2064c:	d109      	bne.n	20662 <cbvprintf+0x42a>
		    && !conv->prec_present) {
   2064e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   20652:	079a      	lsls	r2, r3, #30
   20654:	d405      	bmi.n	20662 <cbvprintf+0x42a>
			if (conv->specifier_a) {
   20656:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
   2065a:	2b00      	cmp	r3, #0
   2065c:	bfb4      	ite	lt
   2065e:	270d      	movlt	r7, #13
   20660:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
   20662:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			= (enum length_mod_enum)conv->length_mod;
   20666:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		enum specifier_cat_enum specifier_cat
   2066a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   2066e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   20670:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   20674:	d136      	bne.n	206e4 <cbvprintf+0x4ac>
			switch (length_mod) {
   20676:	1ecb      	subs	r3, r1, #3
   20678:	2b04      	cmp	r3, #4
   2067a:	d820      	bhi.n	206be <cbvprintf+0x486>
   2067c:	e8df f003 	tbb	[pc, r3]
   20680:	1f070703 	.word	0x1f070703
   20684:	1f          	.byte	0x1f
   20685:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   20686:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   2068a:	17d3      	asrs	r3, r2, #31
   2068c:	e004      	b.n	20698 <cbvprintf+0x460>
					(sint_value_type)va_arg(ap, intmax_t);
   2068e:	3407      	adds	r4, #7
   20690:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   20694:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   20698:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		if (conv->invalid || conv->unsupported) {
   2069c:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
   206a0:	07b3      	lsls	r3, r6, #30
   206a2:	d055      	beq.n	20750 <cbvprintf+0x518>
			OUTS(sp, fp);
   206a4:	464a      	mov	r2, r9
   206a6:	4641      	mov	r1, r8
   206a8:	9b07      	ldr	r3, [sp, #28]
   206aa:	9806      	ldr	r0, [sp, #24]
   206ac:	f018 ffc7 	bl	3963e <outs>
   206b0:	2800      	cmp	r0, #0
   206b2:	f2c0 837d 	blt.w	20db0 <cbvprintf+0xb78>
   206b6:	4405      	add	r5, r0
			while (pad_len-- > 0) {
   206b8:	f8dd 901c 	ldr.w	r9, [sp, #28]
   206bc:	e5c4      	b.n	20248 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   206be:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   206c2:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   206c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
   206c8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
   206cc:	d105      	bne.n	206da <cbvprintf+0x4a2>
				value->uint = (unsigned char)value->uint;
   206ce:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
				value->uint = (unsigned short)value->uint;
   206d2:	9314      	str	r3, [sp, #80]	; 0x50
   206d4:	2300      	movs	r3, #0
   206d6:	9315      	str	r3, [sp, #84]	; 0x54
   206d8:	e7e0      	b.n	2069c <cbvprintf+0x464>
			} else if (length_mod == LENGTH_H) {
   206da:	2902      	cmp	r1, #2
   206dc:	d1de      	bne.n	2069c <cbvprintf+0x464>
				value->sint = (short)value->sint;
   206de:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
   206e2:	e7d2      	b.n	2068a <cbvprintf+0x452>
		} else if (specifier_cat == SPECIFIER_UINT) {
   206e4:	2b02      	cmp	r3, #2
   206e6:	d123      	bne.n	20730 <cbvprintf+0x4f8>
			switch (length_mod) {
   206e8:	1ecb      	subs	r3, r1, #3
   206ea:	2b04      	cmp	r3, #4
   206ec:	d813      	bhi.n	20716 <cbvprintf+0x4de>
   206ee:	e8df f003 	tbb	[pc, r3]
   206f2:	0a03      	.short	0x0a03
   206f4:	120a      	.short	0x120a
   206f6:	12          	.byte	0x12
   206f7:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   206f8:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   206fa:	6822      	ldr	r2, [r4, #0]
   206fc:	1d20      	adds	r0, r4, #4
   206fe:	9214      	str	r2, [sp, #80]	; 0x50
   20700:	9315      	str	r3, [sp, #84]	; 0x54
					(uint_value_type)va_arg(ap, size_t);
   20702:	4604      	mov	r4, r0
   20704:	e7ca      	b.n	2069c <cbvprintf+0x464>
					(uint_value_type)va_arg(ap,
   20706:	3407      	adds	r4, #7
   20708:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   2070c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   20710:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				break;
   20714:	e7f5      	b.n	20702 <cbvprintf+0x4ca>
					(uint_value_type)va_arg(ap, size_t);
   20716:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   2071a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   2071c:	9314      	str	r3, [sp, #80]	; 0x50
   2071e:	f04f 0300 	mov.w	r3, #0
   20722:	9315      	str	r3, [sp, #84]	; 0x54
			if (length_mod == LENGTH_HH) {
   20724:	d0d3      	beq.n	206ce <cbvprintf+0x496>
			} else if (length_mod == LENGTH_H) {
   20726:	2902      	cmp	r1, #2
   20728:	d1b8      	bne.n	2069c <cbvprintf+0x464>
				value->uint = (unsigned short)value->uint;
   2072a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   2072e:	e7d0      	b.n	206d2 <cbvprintf+0x49a>
		} else if (specifier_cat == SPECIFIER_FP) {
   20730:	2b04      	cmp	r3, #4
   20732:	d107      	bne.n	20744 <cbvprintf+0x50c>
			if (length_mod == LENGTH_UPPER_L) {
   20734:	3407      	adds	r4, #7
   20736:	f024 0407 	bic.w	r4, r4, #7
   2073a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   2073e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   20742:	e7ab      	b.n	2069c <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_PTR) {
   20744:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   20746:	bf04      	itt	eq
   20748:	f854 3b04 	ldreq.w	r3, [r4], #4
   2074c:	9314      	streq	r3, [sp, #80]	; 0x50
   2074e:	e7a5      	b.n	2069c <cbvprintf+0x464>
		switch (conv->specifier) {
   20750:	f89d 905b 	ldrb.w	r9, [sp, #91]	; 0x5b
   20754:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
   20758:	d8ae      	bhi.n	206b8 <cbvprintf+0x480>
   2075a:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
   2075e:	f200 80a7 	bhi.w	208b0 <cbvprintf+0x678>
   20762:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
   20766:	f000 80ed 	beq.w	20944 <cbvprintf+0x70c>
   2076a:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
   2076e:	d9a3      	bls.n	206b8 <cbvprintf+0x480>
   20770:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
   20774:	d003      	beq.n	2077e <cbvprintf+0x546>
   20776:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
   2077a:	2b02      	cmp	r3, #2
   2077c:	d89c      	bhi.n	206b8 <cbvprintf+0x480>
	} u = {
   2077e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	if ((u.u64 & SIGN_MASK) != 0U) {
   20782:	2a00      	cmp	r2, #0
   20784:	f173 0100 	sbcs.w	r1, r3, #0
   20788:	f2c0 8186 	blt.w	20a98 <cbvprintf+0x860>
	} else if (conv->flag_plus) {
   2078c:	0731      	lsls	r1, r6, #28
   2078e:	f100 8185 	bmi.w	20a9c <cbvprintf+0x864>
		*sign = ' ';
   20792:	f016 0610 	ands.w	r6, r6, #16
   20796:	bf18      	it	ne
   20798:	2620      	movne	r6, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   2079a:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   2079e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   207a2:	9204      	str	r2, [sp, #16]
   207a4:	9305      	str	r3, [sp, #20]
   207a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   207aa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	bool is_subnormal = (expo == 0) && (fract != 0);
   207ae:	f1bb 0f00 	cmp.w	fp, #0
   207b2:	f040 8175 	bne.w	20aa0 <cbvprintf+0x868>
   207b6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   207ba:	4313      	orrs	r3, r2
   207bc:	bf14      	ite	ne
   207be:	f04f 0c01 	movne.w	ip, #1
   207c2:	f04f 0c00 	moveq.w	ip, #0
	if ((expo | fract) != 0) {
   207c6:	4658      	mov	r0, fp
	fract <<= EXPONENT_BITS;
   207c8:	9905      	ldr	r1, [sp, #20]
		c = 'f';
   207ca:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
	fract <<= EXPONENT_BITS;
   207ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   207d2:	9904      	ldr	r1, [sp, #16]
		c = 'f';
   207d4:	bf08      	it	eq
   207d6:	f04f 0966 	moveq.w	r9, #102	; 0x66
	fract <<= EXPONENT_BITS;
   207da:	02ca      	lsls	r2, r1, #11
   207dc:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((expo | fract) != 0) {
   207e0:	ea4b 0102 	orr.w	r1, fp, r2
   207e4:	910a      	str	r1, [sp, #40]	; 0x28
   207e6:	17c1      	asrs	r1, r0, #31
   207e8:	4319      	orrs	r1, r3
   207ea:	910b      	str	r1, [sp, #44]	; 0x2c
   207ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   207f0:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   207f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((expo | fract) != 0) {
   207f6:	f000 81c7 	beq.w	20b88 <cbvprintf+0x950>
		if (is_subnormal) {
   207fa:	f1bc 0f00 	cmp.w	ip, #0
   207fe:	f040 8187 	bne.w	20b10 <cbvprintf+0x8d8>
		fract |= BIT_63;
   20802:	9b10      	ldr	r3, [sp, #64]	; 0x40
		fract *= 5U;
   20804:	2105      	movs	r1, #5
		fract |= BIT_63;
   20806:	9302      	str	r3, [sp, #8]
   20808:	9b11      	ldr	r3, [sp, #68]	; 0x44
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   2080a:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
   2080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   20812:	9303      	str	r3, [sp, #12]
   20814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20818:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   2081c:	2300      	movs	r3, #0
   2081e:	461a      	mov	r2, r3
	while (expo < -2) {
   20820:	f11b 0f02 	cmn.w	fp, #2
   20824:	f2c0 817d 	blt.w	20b22 <cbvprintf+0x8ea>
   20828:	b11b      	cbz	r3, 20832 <cbvprintf+0x5fa>
   2082a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2082e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	while (expo > 0) {
   20832:	e9dd 3110 	ldrd	r3, r1, [sp, #64]	; 0x40
   20836:	f1bb 0f00 	cmp.w	fp, #0
   2083a:	f300 818d 	bgt.w	20b58 <cbvprintf+0x920>
	fract >>= (4 - expo);
   2083e:	9911      	ldr	r1, [sp, #68]	; 0x44
   20840:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20842:	f1cb 0004 	rsb	r0, fp, #4
   20846:	f10b 0b1c 	add.w	fp, fp, #28
   2084a:	fa01 fb0b 	lsl.w	fp, r1, fp
   2084e:	f1a0 0c20 	sub.w	ip, r0, #32
   20852:	40c3      	lsrs	r3, r0
   20854:	fa21 fc0c 	lsr.w	ip, r1, ip
   20858:	ea43 030b 	orr.w	r3, r3, fp
   2085c:	ea43 030c 	orr.w	r3, r3, ip
   20860:	40c1      	lsrs	r1, r0
   20862:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	if ((c == 'g') || (c == 'G')) {
   20866:	f009 03df 	and.w	r3, r9, #223	; 0xdf
   2086a:	2b47      	cmp	r3, #71	; 0x47
   2086c:	f040 8193 	bne.w	20b96 <cbvprintf+0x95e>
		if (decexp < (-4 + 1) || decexp > precision) {
   20870:	1cd0      	adds	r0, r2, #3
   20872:	db02      	blt.n	2087a <cbvprintf+0x642>
   20874:	4297      	cmp	r7, r2
   20876:	f280 818a 	bge.w	20b8e <cbvprintf+0x956>
			c += 'e' - 'g';  /* e or E */
   2087a:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
   2087e:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   20880:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
   20884:	dd00      	ble.n	20888 <cbvprintf+0x650>
				precision--;
   20886:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
   20888:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   2088c:	0699      	lsls	r1, r3, #26
   2088e:	f100 8182 	bmi.w	20b96 <cbvprintf+0x95e>
   20892:	2f00      	cmp	r7, #0
   20894:	bfd4      	ite	le
   20896:	2300      	movle	r3, #0
   20898:	2301      	movgt	r3, #1
	if (c == 'f') {
   2089a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
   2089e:	930c      	str	r3, [sp, #48]	; 0x30
	if (c == 'f') {
   208a0:	f040 817b 	bne.w	20b9a <cbvprintf+0x962>
		if (decimals < 0) {
   208a4:	19d3      	adds	r3, r2, r7
   208a6:	f140 8179 	bpl.w	20b9c <cbvprintf+0x964>
			decimals = 0;
   208aa:	f04f 0b00 	mov.w	fp, #0
   208ae:	e179      	b.n	20ba4 <cbvprintf+0x96c>
   208b0:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
   208b4:	2b20      	cmp	r3, #32
   208b6:	f63f aeff 	bhi.w	206b8 <cbvprintf+0x480>
   208ba:	a201      	add	r2, pc, #4	; (adr r2, 208c0 <cbvprintf+0x688>)
   208bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   208c0:	00020a39 	.word	0x00020a39
   208c4:	000206b9 	.word	0x000206b9
   208c8:	000206b9 	.word	0x000206b9
   208cc:	000206b9 	.word	0x000206b9
   208d0:	000206b9 	.word	0x000206b9
   208d4:	000206b9 	.word	0x000206b9
   208d8:	000206b9 	.word	0x000206b9
   208dc:	000206b9 	.word	0x000206b9
   208e0:	000206b9 	.word	0x000206b9
   208e4:	0002077f 	.word	0x0002077f
   208e8:	000206b9 	.word	0x000206b9
   208ec:	00020971 	.word	0x00020971
   208f0:	000209d9 	.word	0x000209d9
   208f4:	0002077f 	.word	0x0002077f
   208f8:	0002077f 	.word	0x0002077f
   208fc:	0002077f 	.word	0x0002077f
   20900:	000206b9 	.word	0x000206b9
   20904:	000209d9 	.word	0x000209d9
   20908:	000206b9 	.word	0x000206b9
   2090c:	000206b9 	.word	0x000206b9
   20910:	000206b9 	.word	0x000206b9
   20914:	000206b9 	.word	0x000206b9
   20918:	00020a6f 	.word	0x00020a6f
   2091c:	00020a39 	.word	0x00020a39
   20920:	00020a3d 	.word	0x00020a3d
   20924:	000206b9 	.word	0x000206b9
   20928:	000206b9 	.word	0x000206b9
   2092c:	0002094b 	.word	0x0002094b
   20930:	000206b9 	.word	0x000206b9
   20934:	00020a39 	.word	0x00020a39
   20938:	000206b9 	.word	0x000206b9
   2093c:	000206b9 	.word	0x000206b9
   20940:	00020a39 	.word	0x00020a39
			OUTC('%');
   20944:	4641      	mov	r1, r8
   20946:	4648      	mov	r0, r9
   20948:	e48a      	b.n	20260 <cbvprintf+0x28>
			if (precision >= 0) {
   2094a:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   2094c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
			if (precision >= 0) {
   20950:	db0a      	blt.n	20968 <cbvprintf+0x730>
				len = strnlen(bps, precision);
   20952:	4639      	mov	r1, r7
   20954:	4648      	mov	r0, r9
   20956:	f01d fce8 	bl	3e32a <strnlen>
		char sign = 0;
   2095a:	2600      	movs	r6, #0
			bpe = bps + len;
   2095c:	eb09 0b00 	add.w	fp, r9, r0
		if (bps == NULL) {
   20960:	f1b9 0f00 	cmp.w	r9, #0
   20964:	d10c      	bne.n	20980 <cbvprintf+0x748>
   20966:	e6a7      	b.n	206b8 <cbvprintf+0x480>
				len = strlen(bps);
   20968:	4648      	mov	r0, r9
   2096a:	f7fc fc77 	bl	1d25c <strlen>
   2096e:	e7f4      	b.n	2095a <cbvprintf+0x722>
		char sign = 0;
   20970:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   20972:	9b14      	ldr	r3, [sp, #80]	; 0x50
			bpe = buf + 1;
   20974:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   20978:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				bps = encode_float(value->dbl, conv, precision,
   2097c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
		size_t nj_len = (bpe - bps);
   20980:	ebab 0209 	sub.w	r2, fp, r9
		if (sign != 0) {
   20984:	b106      	cbz	r6, 20988 <cbvprintf+0x750>
			nj_len += 1U;
   20986:	3201      	adds	r2, #1
		if (conv->altform_0c) {
   20988:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
   2098c:	06c3      	lsls	r3, r0, #27
   2098e:	f140 81ff 	bpl.w	20d90 <cbvprintf+0xb58>
			nj_len += 2U;
   20992:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
   20994:	9917      	ldr	r1, [sp, #92]	; 0x5c
		if (conv->pad_fp) {
   20996:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   20998:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
   2099a:	bf44      	itt	mi
   2099c:	9918      	ldrmi	r1, [sp, #96]	; 0x60
   2099e:	1852      	addmi	r2, r2, r1
		if (width > 0) {
   209a0:	f1ba 0f00 	cmp.w	sl, #0
   209a4:	f340 8211 	ble.w	20dca <cbvprintf+0xb92>
			width -= (int)nj_len;
   209a8:	ebaa 0a02 	sub.w	sl, sl, r2
			if (!conv->flag_dash) {
   209ac:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   209b0:	0751      	lsls	r1, r2, #29
   209b2:	f3c2 0780 	ubfx	r7, r2, #2, #1
   209b6:	f100 8208 	bmi.w	20dca <cbvprintf+0xb92>
				if (conv->flag_zero) {
   209ba:	0653      	lsls	r3, r2, #25
   209bc:	f140 81fb 	bpl.w	20db6 <cbvprintf+0xb7e>
					if (sign != 0) {
   209c0:	b146      	cbz	r6, 209d4 <cbvprintf+0x79c>
						OUTC(sign);
   209c2:	4641      	mov	r1, r8
   209c4:	4630      	mov	r0, r6
   209c6:	9b06      	ldr	r3, [sp, #24]
   209c8:	4798      	blx	r3
   209ca:	2800      	cmp	r0, #0
   209cc:	f2c0 81f0 	blt.w	20db0 <cbvprintf+0xb78>
						sign = 0;
   209d0:	463e      	mov	r6, r7
						OUTC(sign);
   209d2:	3501      	adds	r5, #1
					pad = '0';
   209d4:	2730      	movs	r7, #48	; 0x30
   209d6:	e1ef      	b.n	20db8 <cbvprintf+0xb80>
			if (conv->flag_plus) {
   209d8:	0730      	lsls	r0, r6, #28
   209da:	d42b      	bmi.n	20a34 <cbvprintf+0x7fc>
				sign = ' ';
   209dc:	f016 0610 	ands.w	r6, r6, #16
   209e0:	bf18      	it	ne
   209e2:	2620      	movne	r6, #32
			sint = value->sint;
   209e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
			if (sint < 0) {
   209e8:	2a00      	cmp	r2, #0
   209ea:	f173 0100 	sbcs.w	r1, r3, #0
   209ee:	da05      	bge.n	209fc <cbvprintf+0x7c4>
				sign = '-';
   209f0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   209f2:	4252      	negs	r2, r2
   209f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   209f8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			bps = encode_uint(value->uint, conv, buf, bpe);
   209fc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   20a00:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   20a04:	9300      	str	r3, [sp, #0]
   20a06:	aa16      	add	r2, sp, #88	; 0x58
   20a08:	ab1b      	add	r3, sp, #108	; 0x6c
   20a0a:	f7ff fbc5 	bl	20198 <encode_uint>
   20a0e:	4681      	mov	r9, r0
			if (precision >= 0) {
   20a10:	2f00      	cmp	r7, #0
   20a12:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   20a16:	db0b      	blt.n	20a30 <cbvprintf+0x7f8>
				conv->flag_zero = false;
   20a18:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
   20a1c:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
   20a20:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   20a24:	4297      	cmp	r7, r2
				conv->flag_zero = false;
   20a26:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
   20a2a:	d901      	bls.n	20a30 <cbvprintf+0x7f8>
					conv->pad0_value = precision - (int)len;
   20a2c:	1abf      	subs	r7, r7, r2
   20a2e:	9717      	str	r7, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
   20a30:	469b      	mov	fp, r3
   20a32:	e795      	b.n	20960 <cbvprintf+0x728>
				sign = '+';
   20a34:	262b      	movs	r6, #43	; 0x2b
   20a36:	e7d5      	b.n	209e4 <cbvprintf+0x7ac>
		switch (conv->specifier) {
   20a38:	2600      	movs	r6, #0
   20a3a:	e7df      	b.n	209fc <cbvprintf+0x7c4>
			if (value->ptr != NULL) {
   20a3c:	9814      	ldr	r0, [sp, #80]	; 0x50
   20a3e:	2800      	cmp	r0, #0
   20a40:	f000 81a0 	beq.w	20d84 <cbvprintf+0xb4c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   20a44:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   20a48:	9300      	str	r3, [sp, #0]
   20a4a:	2100      	movs	r1, #0
   20a4c:	ab1b      	add	r3, sp, #108	; 0x6c
   20a4e:	aa16      	add	r2, sp, #88	; 0x58
   20a50:	f7ff fba2 	bl	20198 <encode_uint>
				conv->altform_0c = true;
   20a54:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   20a58:	4681      	mov	r9, r0
				conv->altform_0c = true;
   20a5a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   20a5e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   20a62:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   20a66:	2600      	movs	r6, #0
				conv->altform_0c = true;
   20a68:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
				goto prec_int_pad0;
   20a6c:	e7d0      	b.n	20a10 <cbvprintf+0x7d8>
				store_count(conv, value->ptr, count);
   20a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
	switch ((enum length_mod_enum)conv->length_mod) {
   20a70:	2907      	cmp	r1, #7
   20a72:	f63f ae21 	bhi.w	206b8 <cbvprintf+0x480>
   20a76:	e8df f001 	tbb	[pc, r1]
   20a7a:	040d      	.short	0x040d
   20a7c:	08080d06 	.word	0x08080d06
   20a80:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   20a82:	701d      	strb	r5, [r3, #0]
		break;
   20a84:	e618      	b.n	206b8 <cbvprintf+0x480>
		*(short *)dp = (short)count;
   20a86:	801d      	strh	r5, [r3, #0]
		break;
   20a88:	e616      	b.n	206b8 <cbvprintf+0x480>
		*(intmax_t *)dp = (intmax_t)count;
   20a8a:	4628      	mov	r0, r5
   20a8c:	17e9      	asrs	r1, r5, #31
   20a8e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   20a92:	e611      	b.n	206b8 <cbvprintf+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   20a94:	601d      	str	r5, [r3, #0]
		break;
   20a96:	e60f      	b.n	206b8 <cbvprintf+0x480>
		*sign = '-';
   20a98:	262d      	movs	r6, #45	; 0x2d
   20a9a:	e67e      	b.n	2079a <cbvprintf+0x562>
		*sign = '+';
   20a9c:	262b      	movs	r6, #43	; 0x2b
   20a9e:	e67c      	b.n	2079a <cbvprintf+0x562>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   20aa0:	f240 73ff 	movw	r3, #2047	; 0x7ff
   20aa4:	459b      	cmp	fp, r3
   20aa6:	d12e      	bne.n	20b06 <cbvprintf+0x8ce>
		if (fract == 0) {
   20aa8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   20aac:	4bba      	ldr	r3, [pc, #744]	; (20d98 <cbvprintf+0xb60>)
   20aae:	430a      	orrs	r2, r1
   20ab0:	f819 3003 	ldrb.w	r3, [r9, r3]
   20ab4:	f003 0303 	and.w	r3, r3, #3
   20ab8:	d117      	bne.n	20aea <cbvprintf+0x8b2>
			if (isupper((int)c)) {
   20aba:	2b01      	cmp	r3, #1
				*buf++ = 'I';
   20abc:	bf0b      	itete	eq
   20abe:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
   20ac2:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
   20ac6:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'i';
   20aca:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'F';
   20ace:	bf0c      	ite	eq
   20ad0:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
   20ad2:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
   20ad4:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
		conv->flag_zero = false;
   20ad8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
   20adc:	f10d 0b6f 	add.w	fp, sp, #111	; 0x6f
		conv->flag_zero = false;
   20ae0:	f36f 1386 	bfc	r3, #6, #1
   20ae4:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		return bps;
   20ae8:	e748      	b.n	2097c <cbvprintf+0x744>
			if (isupper((int)c)) {
   20aea:	2b01      	cmp	r3, #1
				*buf++ = 'N';
   20aec:	bf0b      	itete	eq
   20aee:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
   20af2:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
   20af6:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'n';
   20afa:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'N';
   20afe:	bf0c      	ite	eq
   20b00:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
   20b02:	236e      	movne	r3, #110	; 0x6e
   20b04:	e7e6      	b.n	20ad4 <cbvprintf+0x89c>
	bool is_subnormal = (expo == 0) && (fract != 0);
   20b06:	f04f 0c00 	mov.w	ip, #0
   20b0a:	e65c      	b.n	207c6 <cbvprintf+0x58e>
				expo--;
   20b0c:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
   20b10:	1892      	adds	r2, r2, r2
   20b12:	415b      	adcs	r3, r3
   20b14:	2a00      	cmp	r2, #0
   20b16:	f173 0100 	sbcs.w	r1, r3, #0
   20b1a:	daf7      	bge.n	20b0c <cbvprintf+0x8d4>
   20b1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   20b20:	e66f      	b.n	20802 <cbvprintf+0x5ca>
			fract >>= 1;
   20b22:	9b02      	ldr	r3, [sp, #8]
   20b24:	9803      	ldr	r0, [sp, #12]
   20b26:	085b      	lsrs	r3, r3, #1
   20b28:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
   20b2c:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   20b2e:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
   20b32:	46de      	mov	lr, fp
			fract >>= 1;
   20b34:	e9cd 3002 	strd	r3, r0, [sp, #8]
			expo++;
   20b38:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   20b3c:	d2f1      	bcs.n	20b22 <cbvprintf+0x8ea>
		fract *= 5U;
   20b3e:	fba3 bc01 	umull	fp, ip, r3, r1
   20b42:	4348      	muls	r0, r1
   20b44:	e9cd bc02 	strd	fp, ip, [sp, #8]
   20b48:	9b03      	ldr	r3, [sp, #12]
		expo++;
   20b4a:	f10e 0b02 	add.w	fp, lr, #2
		fract *= 5U;
   20b4e:	18c3      	adds	r3, r0, r3
   20b50:	9303      	str	r3, [sp, #12]
		decexp--;
   20b52:	3a01      	subs	r2, #1
   20b54:	2301      	movs	r3, #1
   20b56:	e663      	b.n	20820 <cbvprintf+0x5e8>
		fract += 2;
   20b58:	3302      	adds	r3, #2
   20b5a:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   20b5e:	a810      	add	r0, sp, #64	; 0x40
		fract += 2;
   20b60:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   20b64:	920c      	str	r2, [sp, #48]	; 0x30
		_ldiv5(&fract);
   20b66:	f018 fd34 	bl	395d2 <_ldiv5>
		expo--;
   20b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		decexp++;
   20b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		expo--;
   20b70:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
   20b74:	3201      	adds	r2, #1
			fract <<= 1;
   20b76:	1800      	adds	r0, r0, r0
   20b78:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   20b7a:	2800      	cmp	r0, #0
   20b7c:	f171 0300 	sbcs.w	r3, r1, #0
			expo--;
   20b80:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
   20b84:	daf7      	bge.n	20b76 <cbvprintf+0x93e>
   20b86:	e652      	b.n	2082e <cbvprintf+0x5f6>
   20b88:	2200      	movs	r2, #0
   20b8a:	4693      	mov	fp, r2
   20b8c:	e657      	b.n	2083e <cbvprintf+0x606>
			c = 'f';
   20b8e:	f04f 0966 	mov.w	r9, #102	; 0x66
			precision -= decexp;
   20b92:	1abf      	subs	r7, r7, r2
   20b94:	e678      	b.n	20888 <cbvprintf+0x650>
	bool prune_zero = false;
   20b96:	2300      	movs	r3, #0
   20b98:	e67f      	b.n	2089a <cbvprintf+0x662>
		decimals = precision + 1;
   20b9a:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
   20b9c:	2b10      	cmp	r3, #16
   20b9e:	bfa8      	it	ge
   20ba0:	2310      	movge	r3, #16
   20ba2:	469b      	mov	fp, r3
   20ba4:	2110      	movs	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
   20ba6:	2000      	movs	r0, #0
   20ba8:	910f      	str	r1, [sp, #60]	; 0x3c
   20baa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   20bae:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (decimals--) {
   20bb2:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
   20bb6:	f10b 3bff 	add.w	fp, fp, #4294967295
   20bba:	f1bb 3fff 	cmp.w	fp, #4294967295
   20bbe:	d11f      	bne.n	20c00 <cbvprintf+0x9c8>
	fract += round;
   20bc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20bc2:	18cb      	adds	r3, r1, r3
   20bc4:	9308      	str	r3, [sp, #32]
   20bc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
	if (fract >= BIT64(60)) {
   20bc8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
	fract += round;
   20bcc:	eb40 0303 	adc.w	r3, r0, r3
	if (fract >= BIT64(60)) {
   20bd0:	f04f 30ff 	mov.w	r0, #4294967295
	fract += round;
   20bd4:	9309      	str	r3, [sp, #36]	; 0x24
	if (fract >= BIT64(60)) {
   20bd6:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
   20bda:	4561      	cmp	r1, ip
   20bdc:	bf08      	it	eq
   20bde:	4558      	cmpeq	r0, fp
   20be0:	d31a      	bcc.n	20c18 <cbvprintf+0x9e0>
	fract += round;
   20be2:	4658      	mov	r0, fp
   20be4:	4661      	mov	r1, ip
   20be6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	if (c == 'f') {
   20bea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   20bee:	d153      	bne.n	20c98 <cbvprintf+0xa60>
		if (decexp > 0) {
   20bf0:	2a00      	cmp	r2, #0
   20bf2:	dc20      	bgt.n	20c36 <cbvprintf+0x9fe>
			*buf++ = '0';
   20bf4:	2330      	movs	r3, #48	; 0x30
   20bf6:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
   20bfa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   20bfe:	e02b      	b.n	20c58 <cbvprintf+0xa20>
	*v >>= 1;
   20c00:	0849      	lsrs	r1, r1, #1
   20c02:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   20c06:	0840      	lsrs	r0, r0, #1
   20c08:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
	_ldiv5(v);
   20c0c:	a812      	add	r0, sp, #72	; 0x48
   20c0e:	920d      	str	r2, [sp, #52]	; 0x34
   20c10:	f018 fcdf 	bl	395d2 <_ldiv5>
   20c14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
}
   20c16:	e7cc      	b.n	20bb2 <cbvprintf+0x97a>
	*v >>= 1;
   20c18:	9b08      	ldr	r3, [sp, #32]
   20c1a:	920d      	str	r2, [sp, #52]	; 0x34
   20c1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20c1e:	085b      	lsrs	r3, r3, #1
   20c20:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   20c24:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
   20c26:	a810      	add	r0, sp, #64	; 0x40
	*v >>= 1;
   20c28:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	_ldiv5(v);
   20c2c:	f018 fcd1 	bl	395d2 <_ldiv5>
		decexp++;
   20c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   20c32:	3201      	adds	r2, #1
   20c34:	e7d9      	b.n	20bea <cbvprintf+0x9b2>
	char *buf = bps;
   20c36:	f10d 0b6c 	add.w	fp, sp, #108	; 0x6c
			while (decexp > 0 && digit_count > 0) {
   20c3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   20c3c:	2900      	cmp	r1, #0
   20c3e:	dd09      	ble.n	20c54 <cbvprintf+0xa1c>
				*buf++ = _get_digit(&fract, &digit_count);
   20c40:	a90f      	add	r1, sp, #60	; 0x3c
   20c42:	a810      	add	r0, sp, #64	; 0x40
   20c44:	920d      	str	r2, [sp, #52]	; 0x34
   20c46:	f018 fce3 	bl	39610 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   20c4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
				*buf++ = _get_digit(&fract, &digit_count);
   20c4c:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
   20c50:	3a01      	subs	r2, #1
   20c52:	d1f2      	bne.n	20c3a <cbvprintf+0xa02>
			conv->pad0_value = decexp;
   20c54:	9217      	str	r2, [sp, #92]	; 0x5c
			decexp = 0;
   20c56:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
   20c58:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
   20c5c:	0688      	lsls	r0, r1, #26
   20c5e:	d401      	bmi.n	20c64 <cbvprintf+0xa2c>
   20c60:	2f00      	cmp	r7, #0
   20c62:	dd3f      	ble.n	20ce4 <cbvprintf+0xaac>
			*buf++ = '.';
   20c64:	465b      	mov	r3, fp
   20c66:	212e      	movs	r1, #46	; 0x2e
   20c68:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
   20c6c:	b192      	cbz	r2, 20c94 <cbvprintf+0xa5c>
   20c6e:	2f00      	cmp	r7, #0
   20c70:	dd76      	ble.n	20d60 <cbvprintf+0xb28>
			conv->pad0_value = -decexp;
   20c72:	4251      	negs	r1, r2
   20c74:	42b9      	cmp	r1, r7
   20c76:	bfa8      	it	ge
   20c78:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   20c7a:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
   20c7c:	9117      	str	r1, [sp, #92]	; 0x5c
			precision -= conv->pad0_value;
   20c7e:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   20c82:	bfd4      	ite	le
   20c84:	2100      	movle	r1, #0
   20c86:	2101      	movgt	r1, #1
   20c88:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
   20c8c:	f361 1045 	bfi	r0, r1, #5, #1
   20c90:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
			*buf++ = '.';
   20c94:	469b      	mov	fp, r3
   20c96:	e020      	b.n	20cda <cbvprintf+0xaa2>
		*buf = _get_digit(&fract, &digit_count);
   20c98:	a90f      	add	r1, sp, #60	; 0x3c
   20c9a:	a810      	add	r0, sp, #64	; 0x40
   20c9c:	920d      	str	r2, [sp, #52]	; 0x34
   20c9e:	f018 fcb7 	bl	39610 <_get_digit>
		if (*buf++ != '0') {
   20ca2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		if (conv->flag_hash || (precision > 0)) {
   20ca4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		if (*buf++ != '0') {
   20ca8:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   20caa:	bf18      	it	ne
   20cac:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   20cb0:	0699      	lsls	r1, r3, #26
		*buf = _get_digit(&fract, &digit_count);
   20cb2:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
		if (conv->flag_hash || (precision > 0)) {
   20cb6:	d401      	bmi.n	20cbc <cbvprintf+0xa84>
   20cb8:	2f00      	cmp	r7, #0
   20cba:	dd53      	ble.n	20d64 <cbvprintf+0xb2c>
			*buf++ = '.';
   20cbc:	232e      	movs	r3, #46	; 0x2e
   20cbe:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
   20cc2:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
   20cc6:	e7e5      	b.n	20c94 <cbvprintf+0xa5c>
		*buf++ = _get_digit(&fract, &digit_count);
   20cc8:	a90f      	add	r1, sp, #60	; 0x3c
   20cca:	a810      	add	r0, sp, #64	; 0x40
   20ccc:	920d      	str	r2, [sp, #52]	; 0x34
   20cce:	f018 fc9f 	bl	39610 <_get_digit>
   20cd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   20cd4:	f80b 0b01 	strb.w	r0, [fp], #1
		precision--;
   20cd8:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
   20cda:	2f00      	cmp	r7, #0
   20cdc:	dd02      	ble.n	20ce4 <cbvprintf+0xaac>
   20cde:	990f      	ldr	r1, [sp, #60]	; 0x3c
   20ce0:	2900      	cmp	r1, #0
   20ce2:	dcf1      	bgt.n	20cc8 <cbvprintf+0xa90>
	if (prune_zero) {
   20ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20ce6:	2b00      	cmp	r3, #0
   20ce8:	d13f      	bne.n	20d6a <cbvprintf+0xb32>
	conv->pad0_pre_exp = precision;
   20cea:	9718      	str	r7, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
   20cec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   20cf0:	2945      	cmp	r1, #69	; 0x45
   20cf2:	d123      	bne.n	20d3c <cbvprintf+0xb04>
		if (decexp < 0) {
   20cf4:	2a00      	cmp	r2, #0
			*buf++ = '-';
   20cf6:	bfb4      	ite	lt
   20cf8:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
   20cfa:	212b      	movge	r1, #43	; 0x2b
		*buf++ = c;
   20cfc:	4658      	mov	r0, fp
			decexp = -decexp;
   20cfe:	bfb8      	it	lt
   20d00:	4252      	neglt	r2, r2
		if (decexp >= 100) {
   20d02:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
   20d04:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
   20d08:	f88b 1001 	strb.w	r1, [fp, #1]
		if (decexp >= 100) {
   20d0c:	dd0a      	ble.n	20d24 <cbvprintf+0xaec>
			*buf++ = (decexp / 100) + '0';
   20d0e:	2764      	movs	r7, #100	; 0x64
   20d10:	fb92 f1f7 	sdiv	r1, r2, r7
			decexp %= 100;
   20d14:	fb07 2211 	mls	r2, r7, r1, r2
			*buf++ = (decexp / 100) + '0';
   20d18:	f101 0c30 	add.w	ip, r1, #48	; 0x30
   20d1c:	f10b 0003 	add.w	r0, fp, #3
   20d20:	f88b c002 	strb.w	ip, [fp, #2]
		*buf++ = (decexp / 10) + '0';
   20d24:	270a      	movs	r7, #10
   20d26:	fb92 f1f7 	sdiv	r1, r2, r7
   20d2a:	4683      	mov	fp, r0
		*buf++ = (decexp % 10) + '0';
   20d2c:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
   20d30:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   20d34:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   20d36:	f80b cb02 	strb.w	ip, [fp], #2
		*buf++ = (decexp % 10) + '0';
   20d3a:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
   20d3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   20d3e:	2a00      	cmp	r2, #0
   20d40:	dc1e      	bgt.n	20d80 <cbvprintf+0xb48>
   20d42:	9a18      	ldr	r2, [sp, #96]	; 0x60
   20d44:	2a00      	cmp	r2, #0
   20d46:	bfd4      	ite	le
   20d48:	2200      	movle	r2, #0
   20d4a:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   20d4c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   20d50:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   20d54:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   20d56:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
   20d5a:	f88b 2000 	strb.w	r2, [fp]
	return bps;
   20d5e:	e60d      	b.n	2097c <cbvprintf+0x744>
			*buf++ = '.';
   20d60:	469b      	mov	fp, r3
   20d62:	e7bf      	b.n	20ce4 <cbvprintf+0xaac>
		if (*buf++ != '0') {
   20d64:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
   20d68:	e7bc      	b.n	20ce4 <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
   20d6a:	2100      	movs	r1, #0
   20d6c:	9118      	str	r1, [sp, #96]	; 0x60
		while (*--buf == '0') {
   20d6e:	4658      	mov	r0, fp
   20d70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
   20d74:	2930      	cmp	r1, #48	; 0x30
   20d76:	d0fa      	beq.n	20d6e <cbvprintf+0xb36>
		if (*buf != '.') {
   20d78:	292e      	cmp	r1, #46	; 0x2e
   20d7a:	bf18      	it	ne
   20d7c:	4683      	movne	fp, r0
   20d7e:	e7b5      	b.n	20cec <cbvprintf+0xab4>
		|| (conv->pad0_pre_exp > 0);
   20d80:	2201      	movs	r2, #1
   20d82:	e7e3      	b.n	20d4c <cbvprintf+0xb14>
			bpe = bps + 5;
   20d84:	f8df b014 	ldr.w	fp, [pc, #20]	; 20d9c <cbvprintf+0xb64>
		char sign = 0;
   20d88:	4606      	mov	r6, r0
			bps = "(nil)";
   20d8a:	f1ab 0905 	sub.w	r9, fp, #5
   20d8e:	e5f7      	b.n	20980 <cbvprintf+0x748>
		} else if (conv->altform_0) {
   20d90:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
   20d92:	bf48      	it	mi
   20d94:	3201      	addmi	r2, #1
   20d96:	e5fd      	b.n	20994 <cbvprintf+0x75c>
   20d98:	000462ab 	.word	0x000462ab
   20d9c:	00040687 	.word	0x00040687
   20da0:	930c      	str	r3, [sp, #48]	; 0x30
					OUTC(pad);
   20da2:	4641      	mov	r1, r8
   20da4:	9b06      	ldr	r3, [sp, #24]
   20da6:	4638      	mov	r0, r7
   20da8:	4798      	blx	r3
   20daa:	2800      	cmp	r0, #0
   20dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20dae:	da05      	bge.n	20dbc <cbvprintf+0xb84>
#undef OUTS
#undef OUTC
}
   20db0:	b023      	add	sp, #140	; 0x8c
   20db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   20db6:	2720      	movs	r7, #32
   20db8:	eb0a 0305 	add.w	r3, sl, r5
   20dbc:	4652      	mov	r2, sl
				while (width-- > 0) {
   20dbe:	2a00      	cmp	r2, #0
   20dc0:	eba3 050a 	sub.w	r5, r3, sl
   20dc4:	f10a 3aff 	add.w	sl, sl, #4294967295
   20dc8:	dcea      	bgt.n	20da0 <cbvprintf+0xb68>
		if (sign != 0) {
   20dca:	b136      	cbz	r6, 20dda <cbvprintf+0xba2>
			OUTC(sign);
   20dcc:	4641      	mov	r1, r8
   20dce:	4630      	mov	r0, r6
   20dd0:	9b06      	ldr	r3, [sp, #24]
   20dd2:	4798      	blx	r3
   20dd4:	2800      	cmp	r0, #0
   20dd6:	dbeb      	blt.n	20db0 <cbvprintf+0xb78>
   20dd8:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   20dda:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   20dde:	0650      	lsls	r0, r2, #25
   20de0:	d57c      	bpl.n	20edc <cbvprintf+0xca4>
			if (conv->specifier_a) {
   20de2:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
   20de6:	2a00      	cmp	r2, #0
   20de8:	db2b      	blt.n	20e42 <cbvprintf+0xc0a>
   20dea:	eba5 0509 	sub.w	r5, r5, r9
   20dee:	464e      	mov	r6, r9
				while (isdigit((int)*cp)) {
   20df0:	f899 0000 	ldrb.w	r0, [r9]
   20df4:	4b59      	ldr	r3, [pc, #356]	; (20f5c <cbvprintf+0xd24>)
   20df6:	19af      	adds	r7, r5, r6
   20df8:	5cc2      	ldrb	r2, [r0, r3]
   20dfa:	f109 0901 	add.w	r9, r9, #1
   20dfe:	0751      	lsls	r1, r2, #29
   20e00:	d43f      	bmi.n	20e82 <cbvprintf+0xc4a>
				if (!conv->pad_postdp) {
   20e02:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv->pad0_value;
   20e06:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
				if (!conv->pad_postdp) {
   20e0a:	0692      	lsls	r2, r2, #26
   20e0c:	d408      	bmi.n	20e20 <cbvprintf+0xbe8>
   20e0e:	eb09 0507 	add.w	r5, r9, r7
   20e12:	464a      	mov	r2, r9
					while (pad_len-- > 0) {
   20e14:	2a00      	cmp	r2, #0
   20e16:	eba5 0709 	sub.w	r7, r5, r9
   20e1a:	f109 39ff 	add.w	r9, r9, #4294967295
   20e1e:	dc36      	bgt.n	20e8e <cbvprintf+0xc56>
				if (*cp == '.') {
   20e20:	7830      	ldrb	r0, [r6, #0]
   20e22:	282e      	cmp	r0, #46	; 0x2e
   20e24:	d10a      	bne.n	20e3c <cbvprintf+0xc04>
					OUTC(*cp++);
   20e26:	4641      	mov	r1, r8
   20e28:	9b06      	ldr	r3, [sp, #24]
   20e2a:	4798      	blx	r3
						OUTC('0');
   20e2c:	2800      	cmp	r0, #0
   20e2e:	dbbf      	blt.n	20db0 <cbvprintf+0xb78>
					while (pad_len-- > 0) {
   20e30:	f1b9 0f00 	cmp.w	r9, #0
						OUTC('0');
   20e34:	f107 0701 	add.w	r7, r7, #1
					while (pad_len-- > 0) {
   20e38:	dc30      	bgt.n	20e9c <cbvprintf+0xc64>
					OUTC(*cp++);
   20e3a:	3601      	adds	r6, #1
   20e3c:	46b1      	mov	r9, r6
   20e3e:	1bbf      	subs	r7, r7, r6
   20e40:	e039      	b.n	20eb6 <cbvprintf+0xc7e>
   20e42:	eba5 0709 	sub.w	r7, r5, r9
   20e46:	464d      	mov	r5, r9
   20e48:	eb07 0609 	add.w	r6, r7, r9
				while (*cp != 'p') {
   20e4c:	f819 0b01 	ldrb.w	r0, [r9], #1
   20e50:	2870      	cmp	r0, #112	; 0x70
   20e52:	d110      	bne.n	20e76 <cbvprintf+0xc3e>
			while (pad_len-- > 0) {
   20e54:	9f18      	ldr	r7, [sp, #96]	; 0x60
   20e56:	4437      	add	r7, r6
   20e58:	1bba      	subs	r2, r7, r6
   20e5a:	2a00      	cmp	r2, #0
   20e5c:	dc35      	bgt.n	20eca <cbvprintf+0xc92>
			OUTS(cp, bpe);
   20e5e:	465b      	mov	r3, fp
   20e60:	462a      	mov	r2, r5
   20e62:	4641      	mov	r1, r8
   20e64:	9806      	ldr	r0, [sp, #24]
   20e66:	f018 fbea 	bl	3963e <outs>
   20e6a:	2800      	cmp	r0, #0
   20e6c:	dba0      	blt.n	20db0 <cbvprintf+0xb78>
   20e6e:	4430      	add	r0, r6
			while (pad_len-- > 0) {
   20e70:	4605      	mov	r5, r0
   20e72:	4482      	add	sl, r0
   20e74:	e06c      	b.n	20f50 <cbvprintf+0xd18>
					OUTC(*cp++);
   20e76:	4641      	mov	r1, r8
   20e78:	9b06      	ldr	r3, [sp, #24]
   20e7a:	4798      	blx	r3
   20e7c:	2800      	cmp	r0, #0
   20e7e:	dae2      	bge.n	20e46 <cbvprintf+0xc0e>
   20e80:	e796      	b.n	20db0 <cbvprintf+0xb78>
					OUTC(*cp++);
   20e82:	4641      	mov	r1, r8
   20e84:	9b06      	ldr	r3, [sp, #24]
   20e86:	4798      	blx	r3
   20e88:	2800      	cmp	r0, #0
   20e8a:	dab0      	bge.n	20dee <cbvprintf+0xbb6>
   20e8c:	e790      	b.n	20db0 <cbvprintf+0xb78>
						OUTC('0');
   20e8e:	4641      	mov	r1, r8
   20e90:	2030      	movs	r0, #48	; 0x30
   20e92:	9b06      	ldr	r3, [sp, #24]
   20e94:	4798      	blx	r3
   20e96:	2800      	cmp	r0, #0
   20e98:	dabb      	bge.n	20e12 <cbvprintf+0xbda>
   20e9a:	e789      	b.n	20db0 <cbvprintf+0xb78>
						OUTC('0');
   20e9c:	4641      	mov	r1, r8
   20e9e:	2030      	movs	r0, #48	; 0x30
   20ea0:	9b06      	ldr	r3, [sp, #24]
   20ea2:	4798      	blx	r3
   20ea4:	f109 39ff 	add.w	r9, r9, #4294967295
   20ea8:	e7c0      	b.n	20e2c <cbvprintf+0xbf4>
					OUTC(*cp++);
   20eaa:	4641      	mov	r1, r8
   20eac:	9b06      	ldr	r3, [sp, #24]
   20eae:	4798      	blx	r3
   20eb0:	2800      	cmp	r0, #0
   20eb2:	f6ff af7d 	blt.w	20db0 <cbvprintf+0xb78>
				while (isdigit((int)*cp)) {
   20eb6:	4b29      	ldr	r3, [pc, #164]	; (20f5c <cbvprintf+0xd24>)
   20eb8:	464d      	mov	r5, r9
   20eba:	eb07 0609 	add.w	r6, r7, r9
   20ebe:	f819 0b01 	ldrb.w	r0, [r9], #1
   20ec2:	5cc2      	ldrb	r2, [r0, r3]
   20ec4:	0753      	lsls	r3, r2, #29
   20ec6:	d4f0      	bmi.n	20eaa <cbvprintf+0xc72>
   20ec8:	e7c4      	b.n	20e54 <cbvprintf+0xc1c>
				OUTC('0');
   20eca:	4641      	mov	r1, r8
   20ecc:	2030      	movs	r0, #48	; 0x30
   20ece:	9b06      	ldr	r3, [sp, #24]
   20ed0:	4798      	blx	r3
   20ed2:	2800      	cmp	r0, #0
   20ed4:	f6ff af6c 	blt.w	20db0 <cbvprintf+0xb78>
   20ed8:	3601      	adds	r6, #1
   20eda:	e7bd      	b.n	20e58 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
   20edc:	06d1      	lsls	r1, r2, #27
   20ede:	d401      	bmi.n	20ee4 <cbvprintf+0xcac>
   20ee0:	0712      	lsls	r2, r2, #28
   20ee2:	d507      	bpl.n	20ef4 <cbvprintf+0xcbc>
				OUTC('0');
   20ee4:	4641      	mov	r1, r8
   20ee6:	2030      	movs	r0, #48	; 0x30
   20ee8:	9b06      	ldr	r3, [sp, #24]
   20eea:	4798      	blx	r3
   20eec:	2800      	cmp	r0, #0
   20eee:	f6ff af5f 	blt.w	20db0 <cbvprintf+0xb78>
   20ef2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   20ef4:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   20ef8:	06d3      	lsls	r3, r2, #27
   20efa:	d508      	bpl.n	20f0e <cbvprintf+0xcd6>
				OUTC(conv->specifier);
   20efc:	4641      	mov	r1, r8
   20efe:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   20f02:	9b06      	ldr	r3, [sp, #24]
   20f04:	4798      	blx	r3
   20f06:	2800      	cmp	r0, #0
   20f08:	f6ff af52 	blt.w	20db0 <cbvprintf+0xb78>
   20f0c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   20f0e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   20f10:	442f      	add	r7, r5
   20f12:	1b7a      	subs	r2, r7, r5
   20f14:	2a00      	cmp	r2, #0
   20f16:	dc0a      	bgt.n	20f2e <cbvprintf+0xcf6>
			OUTS(bps, bpe);
   20f18:	465b      	mov	r3, fp
   20f1a:	464a      	mov	r2, r9
   20f1c:	4641      	mov	r1, r8
   20f1e:	9806      	ldr	r0, [sp, #24]
   20f20:	f018 fb8d 	bl	3963e <outs>
   20f24:	2800      	cmp	r0, #0
   20f26:	f6ff af43 	blt.w	20db0 <cbvprintf+0xb78>
   20f2a:	4428      	add	r0, r5
   20f2c:	e7a0      	b.n	20e70 <cbvprintf+0xc38>
				OUTC('0');
   20f2e:	4641      	mov	r1, r8
   20f30:	2030      	movs	r0, #48	; 0x30
   20f32:	9b06      	ldr	r3, [sp, #24]
   20f34:	4798      	blx	r3
   20f36:	2800      	cmp	r0, #0
   20f38:	f6ff af3a 	blt.w	20db0 <cbvprintf+0xb78>
   20f3c:	3501      	adds	r5, #1
   20f3e:	e7e8      	b.n	20f12 <cbvprintf+0xcda>
			OUTC(' ');
   20f40:	4641      	mov	r1, r8
   20f42:	2020      	movs	r0, #32
   20f44:	9b06      	ldr	r3, [sp, #24]
   20f46:	4798      	blx	r3
   20f48:	2800      	cmp	r0, #0
   20f4a:	f6ff af31 	blt.w	20db0 <cbvprintf+0xb78>
   20f4e:	3501      	adds	r5, #1
		while (width > 0) {
   20f50:	ebaa 0305 	sub.w	r3, sl, r5
   20f54:	2b00      	cmp	r3, #0
   20f56:	dcf3      	bgt.n	20f40 <cbvprintf+0xd08>
   20f58:	f7ff bbae 	b.w	206b8 <cbvprintf+0x480>
   20f5c:	000462ab 	.word	0x000462ab

00020f60 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   20f60:	b507      	push	{r0, r1, r2, lr}
   20f62:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   20f64:	f04f 0220 	mov.w	r2, #32
   20f68:	f3ef 8311 	mrs	r3, BASEPRI
   20f6c:	f382 8811 	msr	BASEPRI, r2
   20f70:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   20f74:	f019 fa90 	bl	3a498 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   20f78:	9801      	ldr	r0, [sp, #4]
   20f7a:	f002 fd6b 	bl	23a54 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   20f7e:	4803      	ldr	r0, [pc, #12]	; (20f8c <sys_reboot+0x2c>)
   20f80:	f018 f8d7 	bl	39132 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   20f84:	f002 f9c6 	bl	23314 <arch_cpu_idle>
   20f88:	e7fc      	b.n	20f84 <sys_reboot+0x24>
   20f8a:	bf00      	nop
   20f8c:	00040688 	.word	0x00040688

00020f90 <nordicsemi_nrf91_init>:
   20f90:	f04f 0220 	mov.w	r2, #32
   20f94:	f3ef 8311 	mrs	r3, BASEPRI
   20f98:	f382 8811 	msr	BASEPRI, r2
   20f9c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   20fa0:	2101      	movs	r1, #1
   20fa2:	4a04      	ldr	r2, [pc, #16]	; (20fb4 <nordicsemi_nrf91_init+0x24>)
   20fa4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   20fa8:	f383 8811 	msr	BASEPRI, r3
   20fac:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   20fb0:	2000      	movs	r0, #0
   20fb2:	4770      	bx	lr
   20fb4:	40039000 	.word	0x40039000

00020fb8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   20fb8:	b120      	cbz	r0, 20fc4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   20fba:	4b03      	ldr	r3, [pc, #12]	; (20fc8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   20fbc:	0180      	lsls	r0, r0, #6
   20fbe:	f043 0301 	orr.w	r3, r3, #1
   20fc2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   20fc4:	4770      	bx	lr
   20fc6:	bf00      	nop
   20fc8:	0003f800 	.word	0x0003f800

00020fcc <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
   20fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (k_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
   20fd0:	4b12      	ldr	r3, [pc, #72]	; (2101c <log_generic+0x50>)
{
   20fd2:	b085      	sub	sp, #20
		uint32_t timestamp = timestamp_func();
   20fd4:	681b      	ldr	r3, [r3, #0]
{
   20fd6:	4680      	mov	r8, r0
   20fd8:	4689      	mov	r9, r1
   20fda:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
   20fdc:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   20fde:	2600      	movs	r6, #0
		uint32_t timestamp = timestamp_func();
   20fe0:	4682      	mov	sl, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   20fe2:	4c0f      	ldr	r4, [pc, #60]	; (21020 <log_generic+0x54>)
   20fe4:	4d0f      	ldr	r5, [pc, #60]	; (21024 <log_generic+0x58>)
   20fe6:	1b2d      	subs	r5, r5, r4
   20fe8:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   20fea:	42b5      	cmp	r5, r6
   20fec:	dc02      	bgt.n	20ff4 <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
   20fee:	b005      	add	sp, #20
   20ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend) && runtime_ok) {
   20ff4:	4620      	mov	r0, r4
   20ff6:	f018 fb63 	bl	396c0 <log_backend_is_active>
   20ffa:	b160      	cbz	r0, 21016 <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   20ffc:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
   20ffe:	9703      	str	r7, [sp, #12]
   21000:	f8d3 b008 	ldr.w	fp, [r3, #8]
   21004:	f1bb 0f00 	cmp.w	fp, #0
   21008:	d005      	beq.n	21016 <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   2100a:	464b      	mov	r3, r9
   2100c:	4652      	mov	r2, sl
   2100e:	4641      	mov	r1, r8
   21010:	4620      	mov	r0, r4
   21012:	9700      	str	r7, [sp, #0]
   21014:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   21016:	3601      	adds	r6, #1
   21018:	3410      	adds	r4, #16
   2101a:	e7e6      	b.n	20fea <log_generic+0x1e>
   2101c:	200145c8 	.word	0x200145c8
   21020:	0003f6f4 	.word	0x0003f6f4
   21024:	0003f704 	.word	0x0003f704

00021028 <log_core_init>:

void log_core_init(void)
{
	uint32_t freq;

	panic_mode = false;
   21028:	2200      	movs	r2, #0
   2102a:	4b04      	ldr	r3, [pc, #16]	; (2103c <log_core_init+0x14>)
	} else {
		timestamp_func = default_get_timestamp;
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   2102c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
   21030:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   21032:	4b03      	ldr	r3, [pc, #12]	; (21040 <log_core_init+0x18>)
   21034:	4a03      	ldr	r2, [pc, #12]	; (21044 <log_core_init+0x1c>)
   21036:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   21038:	f000 ba3c 	b.w	214b4 <log_output_timestamp_freq_set>
   2103c:	2001ca53 	.word	0x2001ca53
   21040:	200145c8 	.word	0x200145c8
   21044:	000396c7 	.word	0x000396c7

00021048 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   21048:	4a04      	ldr	r2, [pc, #16]	; (2105c <log_source_name_get+0x14>)
   2104a:	4b05      	ldr	r3, [pc, #20]	; (21060 <log_source_name_get+0x18>)
   2104c:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   2104e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   21052:	bf34      	ite	cc
   21054:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   21058:	2000      	movcs	r0, #0
}
   2105a:	4770      	bx	lr
   2105c:	0003f5a4 	.word	0x0003f5a4
   21060:	0003f6f4 	.word	0x0003f6f4

00021064 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   21064:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   21066:	4c0d      	ldr	r4, [pc, #52]	; (2109c <log_backend_enable+0x38>)
{
   21068:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   2106a:	1b04      	subs	r4, r0, r4
   2106c:	1124      	asrs	r4, r4, #4
   2106e:	3401      	adds	r4, #1
{
   21070:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   21072:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   21074:	b948      	cbnz	r0, 2108a <log_backend_enable+0x26>
   21076:	490a      	ldr	r1, [pc, #40]	; (210a0 <log_backend_enable+0x3c>)
   21078:	480a      	ldr	r0, [pc, #40]	; (210a4 <log_backend_enable+0x40>)
   2107a:	23d1      	movs	r3, #209	; 0xd1
   2107c:	4a0a      	ldr	r2, [pc, #40]	; (210a8 <log_backend_enable+0x44>)
   2107e:	f018 f858 	bl	39132 <printk>
   21082:	21d1      	movs	r1, #209	; 0xd1
   21084:	4808      	ldr	r0, [pc, #32]	; (210a8 <log_backend_enable+0x44>)
   21086:	f018 faf3 	bl	39670 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   2108a:	2201      	movs	r2, #1
	backend->cb->id = id;
   2108c:	686b      	ldr	r3, [r5, #4]
	backend->cb->ctx = ctx;
   2108e:	601e      	str	r6, [r3, #0]
	backend->cb->id = id;
   21090:	711c      	strb	r4, [r3, #4]
	backend->cb->active = true;
   21092:	715a      	strb	r2, [r3, #5]
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   21094:	4b05      	ldr	r3, [pc, #20]	; (210ac <log_backend_enable+0x48>)
   21096:	701a      	strb	r2, [r3, #0]
}
   21098:	bd70      	pop	{r4, r5, r6, pc}
   2109a:	bf00      	nop
   2109c:	0003f6f4 	.word	0x0003f6f4
   210a0:	0004072b 	.word	0x0004072b
   210a4:	0004033e 	.word	0x0004033e
   210a8:	000406fa 	.word	0x000406fa
   210ac:	2001ca52 	.word	0x2001ca52

000210b0 <log_init>:
	return __log_backends_end - __log_backends_start;
   210b0:	4b18      	ldr	r3, [pc, #96]	; (21114 <log_init+0x64>)
   210b2:	4a19      	ldr	r2, [pc, #100]	; (21118 <log_init+0x68>)
{
   210b4:	b570      	push	{r4, r5, r6, lr}
   210b6:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   210b8:	2b9f      	cmp	r3, #159	; 0x9f
   210ba:	ea4f 1623 	mov.w	r6, r3, asr #4
   210be:	d90b      	bls.n	210d8 <log_init+0x28>
   210c0:	4916      	ldr	r1, [pc, #88]	; (2111c <log_init+0x6c>)
   210c2:	4817      	ldr	r0, [pc, #92]	; (21120 <log_init+0x70>)
   210c4:	f240 234d 	movw	r3, #589	; 0x24d
   210c8:	4a16      	ldr	r2, [pc, #88]	; (21124 <log_init+0x74>)
   210ca:	f018 f832 	bl	39132 <printk>
   210ce:	f240 214d 	movw	r1, #589	; 0x24d
   210d2:	4814      	ldr	r0, [pc, #80]	; (21124 <log_init+0x74>)
   210d4:	f018 facc 	bl	39670 <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   210d8:	4b13      	ldr	r3, [pc, #76]	; (21128 <log_init+0x78>)
   210da:	e8d3 5fef 	ldaex	r5, [r3]
   210de:	1c6a      	adds	r2, r5, #1
   210e0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   210e4:	2900      	cmp	r1, #0
   210e6:	d1f8      	bne.n	210da <log_init+0x2a>
	if (atomic_inc(&initialized) != 0) {
   210e8:	b915      	cbnz	r5, 210f0 <log_init+0x40>
   210ea:	4c0b      	ldr	r4, [pc, #44]	; (21118 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
   210ec:	42b5      	cmp	r5, r6
   210ee:	db00      	blt.n	210f2 <log_init+0x42>
}
   210f0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   210f2:	7b23      	ldrb	r3, [r4, #12]
   210f4:	b153      	cbz	r3, 2110c <log_init+0x5c>
			if (backend->api->init != NULL) {
   210f6:	6823      	ldr	r3, [r4, #0]
   210f8:	699b      	ldr	r3, [r3, #24]
   210fa:	b10b      	cbz	r3, 21100 <log_init+0x50>
				backend->api->init(backend);
   210fc:	4620      	mov	r0, r4
   210fe:	4798      	blx	r3
			log_backend_enable(backend,
   21100:	6863      	ldr	r3, [r4, #4]
   21102:	2204      	movs	r2, #4
   21104:	4620      	mov	r0, r4
   21106:	6819      	ldr	r1, [r3, #0]
   21108:	f7ff ffac 	bl	21064 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   2110c:	3501      	adds	r5, #1
   2110e:	3410      	adds	r4, #16
   21110:	e7ec      	b.n	210ec <log_init+0x3c>
   21112:	bf00      	nop
   21114:	0003f704 	.word	0x0003f704
   21118:	0003f6f4 	.word	0x0003f6f4
   2111c:	00040742 	.word	0x00040742
   21120:	0004033e 	.word	0x0004033e
   21124:	000406b5 	.word	0x000406b5
   21128:	20016f94 	.word	0x20016f94

0002112c <z_impl_log_panic>:
{
   2112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   2112e:	4f0c      	ldr	r7, [pc, #48]	; (21160 <z_impl_log_panic+0x34>)
   21130:	783d      	ldrb	r5, [r7, #0]
   21132:	b94d      	cbnz	r5, 21148 <z_impl_log_panic+0x1c>
	log_init();
   21134:	f7ff ffbc 	bl	210b0 <log_init>
   21138:	4c0a      	ldr	r4, [pc, #40]	; (21164 <z_impl_log_panic+0x38>)
   2113a:	4e0b      	ldr	r6, [pc, #44]	; (21168 <z_impl_log_panic+0x3c>)
   2113c:	1b36      	subs	r6, r6, r4
   2113e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   21140:	42b5      	cmp	r5, r6
   21142:	db02      	blt.n	2114a <z_impl_log_panic+0x1e>
	panic_mode = true;
   21144:	2301      	movs	r3, #1
   21146:	703b      	strb	r3, [r7, #0]
}
   21148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   2114a:	4620      	mov	r0, r4
   2114c:	f018 fab8 	bl	396c0 <log_backend_is_active>
   21150:	b118      	cbz	r0, 2115a <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   21152:	6823      	ldr	r3, [r4, #0]
   21154:	4620      	mov	r0, r4
   21156:	695b      	ldr	r3, [r3, #20]
   21158:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   2115a:	3501      	adds	r5, #1
   2115c:	3410      	adds	r4, #16
   2115e:	e7ef      	b.n	21140 <z_impl_log_panic+0x14>
   21160:	2001ca53 	.word	0x2001ca53
   21164:	0003f6f4 	.word	0x0003f6f4
   21168:	0003f704 	.word	0x0003f704

0002116c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   2116c:	b40e      	push	{r1, r2, r3}
   2116e:	b503      	push	{r0, r1, lr}
   21170:	ab03      	add	r3, sp, #12
   21172:	f853 2b04 	ldr.w	r2, [r3], #4
   21176:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   21178:	4804      	ldr	r0, [pc, #16]	; (2118c <print_formatted+0x20>)
	va_start(args, fmt);
   2117a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   2117c:	f7ff f85c 	bl	20238 <cbvprintf>
	va_end(args);

	return length;
}
   21180:	b002      	add	sp, #8
   21182:	f85d eb04 	ldr.w	lr, [sp], #4
   21186:	b003      	add	sp, #12
   21188:	4770      	bx	lr
   2118a:	bf00      	nop
   2118c:	000396f7 	.word	0x000396f7

00021190 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   21190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   21194:	f011 0602 	ands.w	r6, r1, #2
{
   21198:	b087      	sub	sp, #28
   2119a:	4607      	mov	r7, r0
   2119c:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   211a0:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
   211a4:	9205      	str	r2, [sp, #20]
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   211a6:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   211aa:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   211ae:	d007      	beq.n	211c0 <prefix_print+0x30>
	if (!format) {
   211b0:	f011 0f44 	tst.w	r1, #68	; 0x44
   211b4:	d139      	bne.n	2122a <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
   211b6:	461a      	mov	r2, r3
   211b8:	4932      	ldr	r1, [pc, #200]	; (21284 <prefix_print+0xf4>)
   211ba:	f7ff ffd7 	bl	2116c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   211be:	4606      	mov	r6, r0
	if (color) {
   211c0:	f1ba 0f00 	cmp.w	sl, #0
   211c4:	d00a      	beq.n	211dc <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
   211c6:	4b30      	ldr	r3, [pc, #192]	; (21288 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
   211c8:	4638      	mov	r0, r7
		const char *log_color = start && (colors[level] != NULL) ?
   211ca:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
   211ce:	4b2f      	ldr	r3, [pc, #188]	; (2128c <prefix_print+0xfc>)
   211d0:	492f      	ldr	r1, [pc, #188]	; (21290 <prefix_print+0x100>)
   211d2:	2a00      	cmp	r2, #0
   211d4:	bf08      	it	eq
   211d6:	461a      	moveq	r2, r3
   211d8:	f7ff ffc8 	bl	2116c <print_formatted>
	if (level_on) {
   211dc:	b13d      	cbz	r5, 211ee <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
   211de:	4b2d      	ldr	r3, [pc, #180]	; (21294 <prefix_print+0x104>)
   211e0:	4638      	mov	r0, r7
   211e2:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
   211e6:	492c      	ldr	r1, [pc, #176]	; (21298 <prefix_print+0x108>)
   211e8:	f7ff ffc0 	bl	2116c <print_formatted>
   211ec:	4605      	mov	r5, r0
	if (source_id >= 0) {
   211ee:	f1b9 0f00 	cmp.w	r9, #0
   211f2:	db16      	blt.n	21222 <prefix_print+0x92>
		total += print_formatted(output,
   211f4:	9b05      	ldr	r3, [sp, #20]
   211f6:	2b00      	cmp	r3, #0
   211f8:	d041      	beq.n	2127e <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   211fa:	2301      	movs	r3, #1
   211fc:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
   21200:	4b26      	ldr	r3, [pc, #152]	; (2129c <prefix_print+0x10c>)
   21202:	f018 0f10 	tst.w	r8, #16
   21206:	4c26      	ldr	r4, [pc, #152]	; (212a0 <prefix_print+0x110>)
   21208:	bf18      	it	ne
   2120a:	461c      	movne	r4, r3
   2120c:	4649      	mov	r1, r9
   2120e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   21212:	f7ff ff19 	bl	21048 <log_source_name_get>
   21216:	4621      	mov	r1, r4
   21218:	4602      	mov	r2, r0
   2121a:	4638      	mov	r0, r7
   2121c:	f7ff ffa6 	bl	2116c <print_formatted>
   21220:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   21222:	19a8      	adds	r0, r5, r6
   21224:	b007      	add	sp, #28
   21226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   2122a:	4a1e      	ldr	r2, [pc, #120]	; (212a4 <prefix_print+0x114>)
   2122c:	6811      	ldr	r1, [r2, #0]
   2122e:	b321      	cbz	r1, 2127a <prefix_print+0xea>
		timestamp /= timestamp_div;
   21230:	4a1d      	ldr	r2, [pc, #116]	; (212a8 <prefix_print+0x118>)
   21232:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   21236:	6812      	ldr	r2, [r2, #0]
		ms = (remainder * 1000U) / freq;
   21238:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		timestamp /= timestamp_div;
   2123c:	fbb3 f3f2 	udiv	r3, r3, r2
		total_seconds = timestamp / freq;
   21240:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   21244:	fbb4 f2fc 	udiv	r2, r4, ip
   21248:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
   2124c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   21250:	4374      	muls	r4, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   21252:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   21256:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2125a:	fb01 441b 	mls	r4, r1, fp, r4
   2125e:	4374      	muls	r4, r6
		mins = seconds / 60U;
   21260:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   21264:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
   21268:	e9cd b101 	strd	fp, r1, [sp, #4]
   2126c:	fb0e c113 	mls	r1, lr, r3, ip
   21270:	9100      	str	r1, [sp, #0]
   21272:	490e      	ldr	r1, [pc, #56]	; (212ac <prefix_print+0x11c>)
   21274:	f7ff ff7a 	bl	2116c <print_formatted>
   21278:	e7a1      	b.n	211be <prefix_print+0x2e>
		length = 0;
   2127a:	4608      	mov	r0, r1
   2127c:	e79f      	b.n	211be <prefix_print+0x2e>
		total += print_formatted(output,
   2127e:	4c08      	ldr	r4, [pc, #32]	; (212a0 <prefix_print+0x110>)
   21280:	e7c4      	b.n	2120c <prefix_print+0x7c>
   21282:	bf00      	nop
   21284:	00040778 	.word	0x00040778
   21288:	0003f920 	.word	0x0003f920
   2128c:	0004076a 	.word	0x0004076a
   21290:	00043968 	.word	0x00043968
   21294:	0003f934 	.word	0x0003f934
   21298:	0004079d 	.word	0x0004079d
   2129c:	00040774 	.word	0x00040774
   212a0:	0004076f 	.word	0x0004076f
   212a4:	20016f98 	.word	0x20016f98
   212a8:	20016f9c 	.word	0x20016f9c
   212ac:	00040781 	.word	0x00040781

000212b0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   212b0:	b538      	push	{r3, r4, r5, lr}
   212b2:	460c      	mov	r4, r1
	if (color) {
   212b4:	07e1      	lsls	r1, r4, #31
{
   212b6:	4605      	mov	r5, r0
	if (color) {
   212b8:	d503      	bpl.n	212c2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   212ba:	4a08      	ldr	r2, [pc, #32]	; (212dc <postfix_print+0x2c>)
   212bc:	4908      	ldr	r1, [pc, #32]	; (212e0 <postfix_print+0x30>)
   212be:	f7ff ff55 	bl	2116c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   212c2:	06e2      	lsls	r2, r4, #27
   212c4:	d408      	bmi.n	212d8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   212c6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   212c8:	4628      	mov	r0, r5
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   212ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   212ce:	bf4c      	ite	mi
   212d0:	4904      	ldrmi	r1, [pc, #16]	; (212e4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   212d2:	4905      	ldrpl	r1, [pc, #20]	; (212e8 <postfix_print+0x38>)
   212d4:	f7ff bf4a 	b.w	2116c <print_formatted>
}
   212d8:	bd38      	pop	{r3, r4, r5, pc}
   212da:	bf00      	nop
   212dc:	0004076a 	.word	0x0004076a
   212e0:	00043968 	.word	0x00043968
   212e4:	000408e9 	.word	0x000408e9
   212e8:	00044465 	.word	0x00044465

000212ec <hexdump_line_print>:
{
   212ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   212f0:	461d      	mov	r5, r3
   212f2:	9b08      	ldr	r3, [sp, #32]
   212f4:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   212f6:	06da      	lsls	r2, r3, #27
{
   212f8:	4604      	mov	r4, r0
   212fa:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   212fc:	d405      	bmi.n	2130a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   212fe:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   21300:	bf4c      	ite	mi
   21302:	492b      	ldrmi	r1, [pc, #172]	; (213b0 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   21304:	492b      	ldrpl	r1, [pc, #172]	; (213b4 <hexdump_line_print+0xc8>)
   21306:	f7ff ff31 	bl	2116c <print_formatted>
{
   2130a:	f04f 0800 	mov.w	r8, #0
		print_formatted(output, " ");
   2130e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 213bc <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   21312:	45a8      	cmp	r8, r5
   21314:	db2d      	blt.n	21372 <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21316:	2500      	movs	r5, #0
			print_formatted(output, "   ");
   21318:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 213c0 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
   2131c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 213c4 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
   21320:	f8df a098 	ldr.w	sl, [pc, #152]	; 213bc <hexdump_line_print+0xd0>
		if (i < length) {
   21324:	42bd      	cmp	r5, r7
   21326:	d232      	bcs.n	2138e <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
   21328:	4649      	mov	r1, r9
   2132a:	4620      	mov	r0, r4
   2132c:	5d72      	ldrb	r2, [r6, r5]
   2132e:	f7ff ff1d 	bl	2116c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21332:	3501      	adds	r5, #1
   21334:	2d10      	cmp	r5, #16
   21336:	d123      	bne.n	21380 <hexdump_line_print+0x94>
	print_formatted(output, "|");
   21338:	4620      	mov	r0, r4
   2133a:	491f      	ldr	r1, [pc, #124]	; (213b8 <hexdump_line_print+0xcc>)
   2133c:	f7ff ff16 	bl	2116c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21340:	2500      	movs	r5, #0
			print_formatted(output, " ");
   21342:	f8df 8078 	ldr.w	r8, [pc, #120]	; 213bc <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   21346:	f8df 9080 	ldr.w	r9, [pc, #128]	; 213c8 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
   2134a:	f8df a080 	ldr.w	sl, [pc, #128]	; 213cc <hexdump_line_print+0xe0>
		if (i < length) {
   2134e:	42af      	cmp	r7, r5
   21350:	d929      	bls.n	213a6 <hexdump_line_print+0xba>
			char c = (char)data[i];
   21352:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   21354:	4651      	mov	r1, sl
   21356:	f812 3009 	ldrb.w	r3, [r2, r9]
   2135a:	4620      	mov	r0, r4
   2135c:	f013 0f97 	tst.w	r3, #151	; 0x97
   21360:	bf08      	it	eq
   21362:	222e      	moveq	r2, #46	; 0x2e
   21364:	f7ff ff02 	bl	2116c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21368:	3501      	adds	r5, #1
   2136a:	2d10      	cmp	r5, #16
   2136c:	d114      	bne.n	21398 <hexdump_line_print+0xac>
}
   2136e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   21372:	4649      	mov	r1, r9
   21374:	4620      	mov	r0, r4
   21376:	f7ff fef9 	bl	2116c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   2137a:	f108 0801 	add.w	r8, r8, #1
   2137e:	e7c8      	b.n	21312 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   21380:	076a      	lsls	r2, r5, #29
   21382:	d1cf      	bne.n	21324 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   21384:	4651      	mov	r1, sl
   21386:	4620      	mov	r0, r4
   21388:	f7ff fef0 	bl	2116c <print_formatted>
   2138c:	e7ca      	b.n	21324 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   2138e:	4641      	mov	r1, r8
   21390:	4620      	mov	r0, r4
   21392:	f7ff feeb 	bl	2116c <print_formatted>
   21396:	e7cc      	b.n	21332 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   21398:	076b      	lsls	r3, r5, #29
   2139a:	d1d8      	bne.n	2134e <hexdump_line_print+0x62>
			print_formatted(output, " ");
   2139c:	4641      	mov	r1, r8
   2139e:	4620      	mov	r0, r4
   213a0:	f7ff fee4 	bl	2116c <print_formatted>
   213a4:	e7d3      	b.n	2134e <hexdump_line_print+0x62>
			print_formatted(output, " ");
   213a6:	4641      	mov	r1, r8
   213a8:	4620      	mov	r0, r4
   213aa:	f7ff fedf 	bl	2116c <print_formatted>
   213ae:	e7db      	b.n	21368 <hexdump_line_print+0x7c>
   213b0:	000408e9 	.word	0x000408e9
   213b4:	00044465 	.word	0x00044465
   213b8:	000407ad 	.word	0x000407ad
   213bc:	000407ab 	.word	0x000407ab
   213c0:	000407a9 	.word	0x000407a9
   213c4:	000407a3 	.word	0x000407a3
   213c8:	000462ab 	.word	0x000462ab
   213cc:	000407af 	.word	0x000407af

000213d0 <log_output_string>:
}

void log_output_string(const struct log_output *output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
   213d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   213d4:	f011 0607 	ands.w	r6, r1, #7
{
   213d8:	4605      	mov	r5, r0
   213da:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   213de:	461c      	mov	r4, r3
	if (!raw_string) {
   213e0:	d00b      	beq.n	213fa <log_output_string+0x2a>
		prefix_print(output, flags, true, timestamp,
   213e2:	f3c1 1389 	ubfx	r3, r1, #6, #10
   213e6:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   213ea:	e9cd 6100 	strd	r6, r1, [sp]
   213ee:	9302      	str	r3, [sp, #8]
   213f0:	4639      	mov	r1, r7
   213f2:	4613      	mov	r3, r2
   213f4:	2201      	movs	r2, #1
   213f6:	f7ff fecb 	bl	21190 <prefix_print>
				level, domain_id, source_id);
	}

	length = cbvprintf(out_func, (void *)output, fmt, ap);
   213fa:	4643      	mov	r3, r8
   213fc:	4622      	mov	r2, r4
   213fe:	4629      	mov	r1, r5
   21400:	480d      	ldr	r0, [pc, #52]	; (21438 <log_output_string+0x68>)
   21402:	f7fe ff19 	bl	20238 <cbvprintf>

	(void)length;

	if (raw_string) {
   21406:	b98e      	cbnz	r6, 2142c <log_output_string+0x5c>
   21408:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
   2140a:	4633      	mov	r3, r6
   2140c:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   21410:	2e00      	cmp	r6, #0
   21412:	d1fa      	bne.n	2140a <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   21414:	2b0a      	cmp	r3, #10
   21416:	d103      	bne.n	21420 <log_output_string+0x50>
			print_formatted(output, "\r");
   21418:	4628      	mov	r0, r5
   2141a:	4908      	ldr	r1, [pc, #32]	; (2143c <log_output_string+0x6c>)
   2141c:	f7ff fea6 	bl	2116c <print_formatted>
		}
	} else {
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   21420:	4628      	mov	r0, r5
}
   21422:	b004      	add	sp, #16
   21424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(output);
   21428:	f018 b97e 	b.w	39728 <log_output_flush>
		postfix_print(output, flags, level);
   2142c:	4632      	mov	r2, r6
   2142e:	4639      	mov	r1, r7
   21430:	4628      	mov	r0, r5
   21432:	f7ff ff3d 	bl	212b0 <postfix_print>
   21436:	e7f3      	b.n	21420 <log_output_string+0x50>
   21438:	000396f7 	.word	0x000396f7
   2143c:	000407ee 	.word	0x000407ee

00021440 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
   21440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   21444:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   21446:	4698      	mov	r8, r3
   21448:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(output, flags, true, timestamp,
   2144c:	f3c1 1389 	ubfx	r3, r1, #6, #10
	uint8_t level = (uint8_t)src_level.level;
   21450:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(output, flags, true, timestamp,
   21454:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   21458:	e9cd 9100 	strd	r9, r1, [sp]
   2145c:	9302      	str	r3, [sp, #8]
   2145e:	4631      	mov	r1, r6
   21460:	4613      	mov	r3, r2
   21462:	2201      	movs	r2, #1
{
   21464:	4604      	mov	r4, r0
	prefix_offset = prefix_print(output, flags, true, timestamp,
   21466:	f7ff fe93 	bl	21190 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(output, "%s", metadata);
   2146a:	4642      	mov	r2, r8
	prefix_offset = prefix_print(output, flags, true, timestamp,
   2146c:	4682      	mov	sl, r0
	print_formatted(output, "%s", metadata);
   2146e:	4910      	ldr	r1, [pc, #64]	; (214b0 <log_output_hexdump+0x70>)
   21470:	4620      	mov	r0, r4
   21472:	f7ff fe7b 	bl	2116c <print_formatted>

	while (length != 0U) {
   21476:	b955      	cbnz	r5, 2148e <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	}

	postfix_print(output, flags, level);
   21478:	4620      	mov	r0, r4
   2147a:	464a      	mov	r2, r9
   2147c:	4631      	mov	r1, r6
   2147e:	f7ff ff17 	bl	212b0 <postfix_print>
	log_output_flush(output);
   21482:	4620      	mov	r0, r4
}
   21484:	b004      	add	sp, #16
   21486:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
   2148a:	f018 b94d 	b.w	39728 <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   2148e:	2d10      	cmp	r5, #16
   21490:	46a8      	mov	r8, r5
   21492:	bf28      	it	cs
   21494:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(output, data, part_len,
   21498:	4639      	mov	r1, r7
   2149a:	4653      	mov	r3, sl
   2149c:	4642      	mov	r2, r8
   2149e:	4620      	mov	r0, r4
   214a0:	9600      	str	r6, [sp, #0]
   214a2:	f7ff ff23 	bl	212ec <hexdump_line_print>
		data += part_len;
   214a6:	4447      	add	r7, r8
		length -= part_len;
   214a8:	eba5 0508 	sub.w	r5, r5, r8
   214ac:	e7e3      	b.n	21476 <log_output_hexdump+0x36>
   214ae:	bf00      	nop
   214b0:	00043968 	.word	0x00043968

000214b4 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   214b4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   214b6:	2100      	movs	r1, #0
	timestamp_div = 1U;
   214b8:	4a07      	ldr	r2, [pc, #28]	; (214d8 <log_output_timestamp_freq_set+0x24>)
{
   214ba:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   214bc:	4c07      	ldr	r4, [pc, #28]	; (214dc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   214be:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   214c0:	42a0      	cmp	r0, r4
   214c2:	d804      	bhi.n	214ce <log_output_timestamp_freq_set+0x1a>
   214c4:	b101      	cbz	r1, 214c8 <log_output_timestamp_freq_set+0x14>
   214c6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   214c8:	4b05      	ldr	r3, [pc, #20]	; (214e0 <log_output_timestamp_freq_set+0x2c>)
   214ca:	6018      	str	r0, [r3, #0]
}
   214cc:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   214ce:	2101      	movs	r1, #1
		frequency /= 2U;
   214d0:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   214d2:	005b      	lsls	r3, r3, #1
   214d4:	e7f4      	b.n	214c0 <log_output_timestamp_freq_set+0xc>
   214d6:	bf00      	nop
   214d8:	20016f9c 	.word	0x20016f9c
   214dc:	000f4240 	.word	0x000f4240
   214e0:	20016f98 	.word	0x20016f98

000214e4 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   214e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   214e6:	460d      	mov	r5, r1
   214e8:	4604      	mov	r4, r0
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
   214ea:	4f06      	ldr	r7, [pc, #24]	; (21504 <char_out+0x20>)
   214ec:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   214ee:	42b4      	cmp	r4, r6
   214f0:	d101      	bne.n	214f6 <char_out+0x12>
#endif
	}

	return length;
}
   214f2:	4628      	mov	r0, r5
   214f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   214f6:	6838      	ldr	r0, [r7, #0]
   214f8:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   214fc:	6883      	ldr	r3, [r0, #8]
   214fe:	685b      	ldr	r3, [r3, #4]
   21500:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   21502:	e7f4      	b.n	214ee <char_out+0xa>
   21504:	20016fb4 	.word	0x20016fb4

00021508 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   21508:	4801      	ldr	r0, [pc, #4]	; (21510 <panic+0x8>)
   2150a:	f018 b90d 	b.w	39728 <log_output_flush>
   2150e:	bf00      	nop
   21510:	0003f964 	.word	0x0003f964

00021514 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
   21514:	b508      	push	{r3, lr}
   21516:	4809      	ldr	r0, [pc, #36]	; (2153c <log_backend_uart_init+0x28>)
   21518:	f011 ffc4 	bl	334a4 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   2151c:	4b08      	ldr	r3, [pc, #32]	; (21540 <log_backend_uart_init+0x2c>)
   2151e:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
   21520:	b958      	cbnz	r0, 2153a <log_backend_uart_init+0x26>
   21522:	234f      	movs	r3, #79	; 0x4f
   21524:	4907      	ldr	r1, [pc, #28]	; (21544 <log_backend_uart_init+0x30>)
   21526:	4808      	ldr	r0, [pc, #32]	; (21548 <log_backend_uart_init+0x34>)
   21528:	4a08      	ldr	r2, [pc, #32]	; (2154c <log_backend_uart_init+0x38>)
   2152a:	f017 fe02 	bl	39132 <printk>
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
   2152e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG((void *)uart_dev);
   21532:	214f      	movs	r1, #79	; 0x4f
   21534:	4805      	ldr	r0, [pc, #20]	; (2154c <log_backend_uart_init+0x38>)
   21536:	f018 b89b 	b.w	39670 <assert_post_action>
}
   2153a:	bd08      	pop	{r3, pc}
   2153c:	00040810 	.word	0x00040810
   21540:	20016fb4 	.word	0x20016fb4
   21544:	0004084c 	.word	0x0004084c
   21548:	0004033e 	.word	0x0004033e
   2154c:	00040817 	.word	0x00040817

00021550 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
   21550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(output, src_level, timestamp,
   21552:	200f      	movs	r0, #15
   21554:	9002      	str	r0, [sp, #8]
   21556:	9807      	ldr	r0, [sp, #28]
   21558:	9001      	str	r0, [sp, #4]
   2155a:	9806      	ldr	r0, [sp, #24]
   2155c:	9000      	str	r0, [sp, #0]
   2155e:	4803      	ldr	r0, [pc, #12]	; (2156c <sync_hexdump+0x1c>)
   21560:	f7ff ff6e 	bl	21440 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
   21564:	b005      	add	sp, #20
   21566:	f85d fb04 	ldr.w	pc, [sp], #4
   2156a:	bf00      	nop
   2156c:	0003f964 	.word	0x0003f964

00021570 <sync_string>:
{
   21570:	b507      	push	{r0, r1, r2, lr}
	log_output_string(output, src_level, timestamp, fmt, ap, flags);
   21572:	200f      	movs	r0, #15
   21574:	9001      	str	r0, [sp, #4]
   21576:	9804      	ldr	r0, [sp, #16]
   21578:	9000      	str	r0, [sp, #0]
   2157a:	4803      	ldr	r0, [pc, #12]	; (21588 <sync_string+0x18>)
   2157c:	f7ff ff28 	bl	213d0 <log_output_string>
}
   21580:	b003      	add	sp, #12
   21582:	f85d fb04 	ldr.w	pc, [sp], #4
   21586:	bf00      	nop
   21588:	0003f964 	.word	0x0003f964

0002158c <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   2158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21590:	b085      	sub	sp, #20
   21592:	460d      	mov	r5, r1
   21594:	4690      	mov	r8, r2
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(fcb, tmp_str, len);
   21596:	460a      	mov	r2, r1
   21598:	a902      	add	r1, sp, #8
{
   2159a:	4604      	mov	r4, r0
	cnt = fcb_put_len(fcb, tmp_str, len);
   2159c:	f018 f96a 	bl	39874 <fcb_put_len>
	if (cnt < 0) {
   215a0:	1e06      	subs	r6, r0, #0
   215a2:	db76      	blt.n	21692 <fcb_append+0x106>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   215a4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len);
int fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   215a8:	b2b7      	uxth	r7, r6
   215aa:	2b01      	cmp	r3, #1
   215ac:	d906      	bls.n	215bc <fcb_append+0x30>
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   215ae:	1e5a      	subs	r2, r3, #1
   215b0:	3d01      	subs	r5, #1
   215b2:	4259      	negs	r1, r3
   215b4:	4417      	add	r7, r2
   215b6:	441d      	add	r5, r3
   215b8:	400f      	ands	r7, r1
   215ba:	400d      	ands	r5, r1
	if (fcb->f_align <= 1U) {
   215bc:	2b01      	cmp	r3, #1
		return len;
   215be:	bf92      	itee	ls
   215c0:	2301      	movls	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   215c2:	425a      	neghi	r2, r3
   215c4:	4013      	andhi	r3, r2
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   215c6:	b22d      	sxth	r5, r5
   215c8:	441d      	add	r5, r3

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   215ca:	2f08      	cmp	r7, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   215cc:	b2ad      	uxth	r5, r5
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   215ce:	dd09      	ble.n	215e4 <fcb_append+0x58>
   215d0:	4937      	ldr	r1, [pc, #220]	; (216b0 <fcb_append+0x124>)
   215d2:	4838      	ldr	r0, [pc, #224]	; (216b4 <fcb_append+0x128>)
   215d4:	234b      	movs	r3, #75	; 0x4b
   215d6:	4a38      	ldr	r2, [pc, #224]	; (216b8 <fcb_append+0x12c>)
   215d8:	f017 fdab 	bl	39132 <printk>
   215dc:	214b      	movs	r1, #75	; 0x4b
   215de:	4836      	ldr	r0, [pc, #216]	; (216b8 <fcb_append+0x12c>)
   215e0:	f018 f846 	bl	39670 <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   215e4:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   215e8:	f04f 32ff 	mov.w	r2, #4294967295
   215ec:	f04f 33ff 	mov.w	r3, #4294967295
   215f0:	4650      	mov	r0, sl
   215f2:	f012 fcff 	bl	33ff4 <z_impl_k_mutex_lock>
	if (rc) {
   215f6:	4606      	mov	r6, r0
   215f8:	2800      	cmp	r0, #0
   215fa:	d156      	bne.n	216aa <fcb_append+0x11e>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   215fc:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   21600:	684a      	ldr	r2, [r1, #4]
   21602:	443b      	add	r3, r7
   21604:	442b      	add	r3, r5
   21606:	4293      	cmp	r3, r2
   21608:	d92b      	bls.n	21662 <fcb_append+0xd6>
	prev = NULL;
   2160a:	4681      	mov	r9, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   2160c:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   21610:	4620      	mov	r0, r4
   21612:	f018 fae2 	bl	39bda <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   21616:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   21618:	f1b9 0f00 	cmp.w	r9, #0
   2161c:	bf08      	it	eq
   2161e:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
   21620:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   21622:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   21624:	d03b      	beq.n	2169e <fcb_append+0x112>
	} while (i++ < cnt);
   21626:	45b3      	cmp	fp, r6
   21628:	f106 0301 	add.w	r3, r6, #1
   2162c:	dc35      	bgt.n	2169a <fcb_append+0x10e>
		if (!sector || (sector->fs_size <
   2162e:	f1b9 0f00 	cmp.w	r9, #0
   21632:	d034      	beq.n	2169e <fcb_append+0x112>
   21634:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   21638:	f107 0308 	add.w	r3, r7, #8
   2163c:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
   2163e:	429a      	cmp	r2, r3
   21640:	d32d      	bcc.n	2169e <fcb_append+0x112>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   21642:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   21644:	4649      	mov	r1, r9
   21646:	3201      	adds	r2, #1
   21648:	4620      	mov	r0, r4
   2164a:	b292      	uxth	r2, r2
   2164c:	f018 f954 	bl	398f8 <fcb_sector_hdr_init>
		if (rc) {
   21650:	4606      	mov	r6, r0
   21652:	b9d8      	cbnz	r0, 2168c <fcb_append+0x100>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   21654:	2308      	movs	r3, #8
   21656:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   21658:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   2165a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
   2165e:	3301      	adds	r3, #1
   21660:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   21662:	4620      	mov	r0, r4
   21664:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   21668:	9700      	str	r7, [sp, #0]
   2166a:	ab02      	add	r3, sp, #8
   2166c:	f018 f8d0 	bl	39810 <fcb_flash_write>
	if (rc) {
   21670:	4606      	mov	r6, r0
   21672:	b9b8      	cbnz	r0, 216a4 <fcb_append+0x118>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   21674:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21676:	f8c8 3000 	str.w	r3, [r8]
	append_loc->fe_elem_off = active->fe_elem_off;
   2167a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2167c:	f8c8 3004 	str.w	r3, [r8, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   21680:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21682:	441f      	add	r7, r3
   21684:	f8c8 7008 	str.w	r7, [r8, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   21688:	442f      	add	r7, r5
   2168a:	62a7      	str	r7, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   2168c:	4650      	mov	r0, sl
   2168e:	f012 fdab 	bl	341e8 <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   21692:	4630      	mov	r0, r6
   21694:	b005      	add	sp, #20
   21696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   2169a:	461e      	mov	r6, r3
   2169c:	e7b8      	b.n	21610 <fcb_append+0x84>
			rc = -ENOSPC;
   2169e:	f06f 061b 	mvn.w	r6, #27
   216a2:	e7f3      	b.n	2168c <fcb_append+0x100>
		rc = -EIO;
   216a4:	f06f 0604 	mvn.w	r6, #4
   216a8:	e7f0      	b.n	2168c <fcb_append+0x100>
		return -EINVAL;
   216aa:	f06f 0615 	mvn.w	r6, #21
   216ae:	e7f0      	b.n	21692 <fcb_append+0x106>
   216b0:	0004089c 	.word	0x0004089c
   216b4:	0004033e 	.word	0x0004033e
   216b8:	0004086e 	.word	0x0004086e

000216bc <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   216bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   216c0:	f8df 909c 	ldr.w	r9, [pc, #156]	; 21760 <z_impl_zsock_socket+0xa4>
{
   216c4:	4605      	mov	r5, r0
   216c6:	460e      	mov	r6, r1
   216c8:	4617      	mov	r7, r2
   216ca:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   216cc:	4c1e      	ldr	r4, [pc, #120]	; (21748 <z_impl_zsock_socket+0x8c>)
   216ce:	f8df 8094 	ldr.w	r8, [pc, #148]	; 21764 <z_impl_zsock_socket+0xa8>
   216d2:	454c      	cmp	r4, r9
   216d4:	d90c      	bls.n	216f0 <z_impl_zsock_socket+0x34>
   216d6:	491d      	ldr	r1, [pc, #116]	; (2174c <z_impl_zsock_socket+0x90>)
   216d8:	23d4      	movs	r3, #212	; 0xd4
   216da:	4642      	mov	r2, r8
   216dc:	481c      	ldr	r0, [pc, #112]	; (21750 <z_impl_zsock_socket+0x94>)
   216de:	f017 fd28 	bl	39132 <printk>
   216e2:	481c      	ldr	r0, [pc, #112]	; (21754 <z_impl_zsock_socket+0x98>)
   216e4:	f017 fd25 	bl	39132 <printk>
   216e8:	21d4      	movs	r1, #212	; 0xd4
   216ea:	4640      	mov	r0, r8
   216ec:	f017 ffc0 	bl	39670 <assert_post_action>
   216f0:	4554      	cmp	r4, sl
   216f2:	d307      	bcc.n	21704 <z_impl_zsock_socket+0x48>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   216f4:	f018 ff57 	bl	3a5a6 <__errno>
   216f8:	236a      	movs	r3, #106	; 0x6a
   216fa:	6003      	str	r3, [r0, #0]
	return -1;
}
   216fc:	f04f 30ff 	mov.w	r0, #4294967295
   21700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   21704:	6823      	ldr	r3, [r4, #0]
   21706:	42ab      	cmp	r3, r5
   21708:	d000      	beq.n	2170c <z_impl_zsock_socket+0x50>
   2170a:	b9db      	cbnz	r3, 21744 <z_impl_zsock_socket+0x88>
		NET_ASSERT(sock_family->is_supported);
   2170c:	6863      	ldr	r3, [r4, #4]
   2170e:	b963      	cbnz	r3, 2172a <z_impl_zsock_socket+0x6e>
   21710:	4911      	ldr	r1, [pc, #68]	; (21758 <z_impl_zsock_socket+0x9c>)
   21712:	23da      	movs	r3, #218	; 0xda
   21714:	4642      	mov	r2, r8
   21716:	480e      	ldr	r0, [pc, #56]	; (21750 <z_impl_zsock_socket+0x94>)
   21718:	f017 fd0b 	bl	39132 <printk>
   2171c:	480f      	ldr	r0, [pc, #60]	; (2175c <z_impl_zsock_socket+0xa0>)
   2171e:	f017 fd08 	bl	39132 <printk>
   21722:	21da      	movs	r1, #218	; 0xda
   21724:	4640      	mov	r0, r8
   21726:	f017 ffa3 	bl	39670 <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   2172a:	463a      	mov	r2, r7
   2172c:	4631      	mov	r1, r6
   2172e:	4628      	mov	r0, r5
   21730:	6863      	ldr	r3, [r4, #4]
   21732:	4798      	blx	r3
   21734:	b130      	cbz	r0, 21744 <z_impl_zsock_socket+0x88>
		return sock_family->handler(family, type, proto);
   21736:	463a      	mov	r2, r7
   21738:	4631      	mov	r1, r6
   2173a:	4628      	mov	r0, r5
   2173c:	68a3      	ldr	r3, [r4, #8]
}
   2173e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   21742:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   21744:	340c      	adds	r4, #12
   21746:	e7c4      	b.n	216d2 <z_impl_zsock_socket+0x16>
   21748:	0003f570 	.word	0x0003f570
   2174c:	00040939 	.word	0x00040939
   21750:	0004033e 	.word	0x0004033e
   21754:	00040966 	.word	0x00040966
   21758:	0004091f 	.word	0x0004091f
   2175c:	000408e8 	.word	0x000408e8
   21760:	0003f57c 	.word	0x0003f57c
   21764:	000408eb 	.word	0x000408eb

00021768 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   21768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   2176c:	1e14      	subs	r4, r2, #0
{
   2176e:	b09b      	sub	sp, #108	; 0x6c
   21770:	4605      	mov	r5, r0
   21772:	9104      	str	r1, [sp, #16]
	if (poll_timeout < 0) {
   21774:	db2f      	blt.n	217d6 <z_impl_zsock_poll+0x6e>
   21776:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2177a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2177e:	2100      	movs	r1, #0
   21780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21784:	2300      	movs	r3, #0
   21786:	fbc6 0104 	smlal	r0, r1, r6, r4
   2178a:	f7fb fb8d 	bl	1cea8 <__aeabi_uldivmod>
   2178e:	4682      	mov	sl, r0
   21790:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   21792:	2600      	movs	r6, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = sys_clock_timeout_end_calc(timeout);
   21794:	4650      	mov	r0, sl
   21796:	4659      	mov	r1, fp
   21798:	f01c fb38 	bl	3de0c <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   2179c:	462f      	mov	r7, r5
	const struct fd_op_vtable *offl_vtable = NULL;
   2179e:	46b0      	mov	r8, r6
	pev = poll_events;
   217a0:	ab0b      	add	r3, sp, #44	; 0x2c
   217a2:	9308      	str	r3, [sp, #32]
	end = sys_clock_timeout_end_calc(timeout);
   217a4:	e9cd 0105 	strd	r0, r1, [sp, #20]
	for (pfd = fds, i = nfds; i--; pfd++) {
   217a8:	9b04      	ldr	r3, [sp, #16]
	bool offload = false;
   217aa:	9602      	str	r6, [sp, #8]
	for (pfd = fds, i = nfds; i--; pfd++) {
   217ac:	9303      	str	r3, [sp, #12]
   217ae:	9b03      	ldr	r3, [sp, #12]
   217b0:	b9c3      	cbnz	r3, 217e4 <z_impl_zsock_poll+0x7c>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   217b2:	9b02      	ldr	r3, [sp, #8]
   217b4:	2b00      	cmp	r3, #0
   217b6:	d05b      	beq.n	21870 <z_impl_zsock_poll+0x108>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   217b8:	9b04      	ldr	r3, [sp, #16]
   217ba:	9401      	str	r4, [sp, #4]
   217bc:	9300      	str	r3, [sp, #0]
   217be:	f44f 7282 	mov.w	r2, #260	; 0x104
   217c2:	462b      	mov	r3, r5
   217c4:	4631      	mov	r1, r6
   217c6:	4640      	mov	r0, r8
   217c8:	f018 fadf 	bl	39d8a <z_fdtable_call_ioctl>
   217cc:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   217ce:	4620      	mov	r0, r4
   217d0:	b01b      	add	sp, #108	; 0x6c
   217d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   217d6:	f04f 3aff 	mov.w	sl, #4294967295
   217da:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   217de:	f04f 34ff 	mov.w	r4, #4294967295
   217e2:	e7d6      	b.n	21792 <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   217e4:	6838      	ldr	r0, [r7, #0]
   217e6:	2800      	cmp	r0, #0
   217e8:	db3d      	blt.n	21866 <z_impl_zsock_poll+0xfe>
	ctx = z_get_fd_obj_and_vtable(sock,
   217ea:	aa0a      	add	r2, sp, #40	; 0x28
   217ec:	a909      	add	r1, sp, #36	; 0x24
   217ee:	f7fd ff17 	bl	1f620 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   217f2:	9007      	str	r0, [sp, #28]
   217f4:	2800      	cmp	r0, #0
   217f6:	d036      	beq.n	21866 <z_impl_zsock_poll+0xfe>
		(void)k_mutex_lock(lock, K_FOREVER);
   217f8:	f04f 32ff 	mov.w	r2, #4294967295
   217fc:	f04f 33ff 	mov.w	r3, #4294967295
   21800:	980a      	ldr	r0, [sp, #40]	; 0x28
   21802:	f018 fad1 	bl	39da8 <k_mutex_lock.constprop.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   21806:	ab1a      	add	r3, sp, #104	; 0x68
   21808:	9301      	str	r3, [sp, #4]
   2180a:	ab08      	add	r3, sp, #32
   2180c:	9300      	str	r3, [sp, #0]
   2180e:	f44f 7281 	mov.w	r2, #258	; 0x102
   21812:	463b      	mov	r3, r7
   21814:	9907      	ldr	r1, [sp, #28]
   21816:	9809      	ldr	r0, [sp, #36]	; 0x24
   21818:	f018 fab7 	bl	39d8a <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   2181c:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   21820:	4681      	mov	r9, r0
		if (result == -EALREADY) {
   21822:	d00e      	beq.n	21842 <z_impl_zsock_poll+0xda>
		} else if (result == -EXDEV) {
   21824:	f110 0f12 	cmn.w	r0, #18
   21828:	9907      	ldr	r1, [sp, #28]
   2182a:	d110      	bne.n	2184e <z_impl_zsock_poll+0xe6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   2182c:	f1b8 0f00 	cmp.w	r8, #0
   21830:	d102      	bne.n	21838 <z_impl_zsock_poll+0xd0>
				offl_vtable = vtable;
   21832:	460e      	mov	r6, r1
   21834:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
			offload = true;
   21838:	2301      	movs	r3, #1
			result = 0;
   2183a:	f04f 0900 	mov.w	r9, #0
			offload = true;
   2183e:	9302      	str	r3, [sp, #8]
   21840:	e005      	b.n	2184e <z_impl_zsock_poll+0xe6>
			timeout = K_NO_WAIT;
   21842:	f04f 0a00 	mov.w	sl, #0
   21846:	f04f 0b00 	mov.w	fp, #0
			result = 0;
   2184a:	f04f 0900 	mov.w	r9, #0
		k_mutex_unlock(lock);
   2184e:	980a      	ldr	r0, [sp, #40]	; 0x28
   21850:	f018 fa99 	bl	39d86 <k_mutex_unlock>
		if (result < 0) {
   21854:	f1b9 0f00 	cmp.w	r9, #0
   21858:	da05      	bge.n	21866 <z_impl_zsock_poll+0xfe>
				errno = -result;
   2185a:	f018 fea4 	bl	3a5a6 <__errno>
   2185e:	f1c9 0300 	rsb	r3, r9, #0
   21862:	6003      	str	r3, [r0, #0]
				return -1;
   21864:	e039      	b.n	218da <z_impl_zsock_poll+0x172>
	for (pfd = fds, i = nfds; i--; pfd++) {
   21866:	9b03      	ldr	r3, [sp, #12]
   21868:	3708      	adds	r7, #8
   2186a:	3b01      	subs	r3, #1
   2186c:	9303      	str	r3, [sp, #12]
   2186e:	e79e      	b.n	217ae <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   21870:	ea5a 030b 	orrs.w	r3, sl, fp
   21874:	d016      	beq.n	218a4 <z_impl_zsock_poll+0x13c>
   21876:	f1bb 3fff 	cmp.w	fp, #4294967295
   2187a:	bf08      	it	eq
   2187c:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   21880:	d010      	beq.n	218a4 <z_impl_zsock_poll+0x13c>
		int64_t remaining = end - sys_clock_tick_get();
   21882:	f014 fe83 	bl	3658c <sys_clock_tick_get>
   21886:	9b05      	ldr	r3, [sp, #20]
   21888:	ebb3 0a00 	subs.w	sl, r3, r0
   2188c:	9b06      	ldr	r3, [sp, #24]
   2188e:	eb63 0b01 	sbc.w	fp, r3, r1
   21892:	f1ba 0f00 	cmp.w	sl, #0
   21896:	f17b 0300 	sbcs.w	r3, fp, #0
   2189a:	bfbc      	itt	lt
   2189c:	f04f 0a00 	movlt.w	sl, #0
   218a0:	f04f 0b00 	movlt.w	fp, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   218a4:	9908      	ldr	r1, [sp, #32]
   218a6:	ac0b      	add	r4, sp, #44	; 0x2c
   218a8:	4b3b      	ldr	r3, [pc, #236]	; (21998 <z_impl_zsock_poll+0x230>)
   218aa:	1b09      	subs	r1, r1, r4
   218ac:	1089      	asrs	r1, r1, #2
   218ae:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   218b0:	465b      	mov	r3, fp
   218b2:	4652      	mov	r2, sl
   218b4:	4620      	mov	r0, r4
   218b6:	f015 f921 	bl	36afc <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   218ba:	f100 030b 	add.w	r3, r0, #11
   218be:	2b0b      	cmp	r3, #11
   218c0:	4607      	mov	r7, r0
   218c2:	d806      	bhi.n	218d2 <z_impl_zsock_poll+0x16a>
   218c4:	f640 0681 	movw	r6, #2177	; 0x881
   218c8:	40de      	lsrs	r6, r3
   218ca:	43f6      	mvns	r6, r6
   218cc:	f016 0601 	ands.w	r6, r6, #1
   218d0:	d006      	beq.n	218e0 <z_impl_zsock_poll+0x178>
			errno = -ret;
   218d2:	f018 fe68 	bl	3a5a6 <__errno>
   218d6:	427f      	negs	r7, r7
   218d8:	6007      	str	r7, [r0, #0]
			return -1;
   218da:	f04f 34ff 	mov.w	r4, #4294967295
   218de:	e776      	b.n	217ce <z_impl_zsock_poll+0x66>
		pev = poll_events;
   218e0:	9408      	str	r4, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   218e2:	462f      	mov	r7, r5
		ret = 0;
   218e4:	4634      	mov	r4, r6
		for (pfd = fds, i = nfds; i--; pfd++) {
   218e6:	f8dd 8010 	ldr.w	r8, [sp, #16]
   218ea:	f1b8 0f00 	cmp.w	r8, #0
   218ee:	d11d      	bne.n	2192c <z_impl_zsock_poll+0x1c4>
		if (retry) {
   218f0:	2e00      	cmp	r6, #0
   218f2:	f43f af6c 	beq.w	217ce <z_impl_zsock_poll+0x66>
			if (ret > 0) {
   218f6:	2c00      	cmp	r4, #0
   218f8:	f73f af69 	bgt.w	217ce <z_impl_zsock_poll+0x66>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   218fc:	ea5a 030b 	orrs.w	r3, sl, fp
   21900:	f43f af65 	beq.w	217ce <z_impl_zsock_poll+0x66>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21904:	f1bb 3fff 	cmp.w	fp, #4294967295
   21908:	bf08      	it	eq
   2190a:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   2190e:	d0c9      	beq.n	218a4 <z_impl_zsock_poll+0x13c>
				int64_t remaining = end - sys_clock_tick_get();
   21910:	f014 fe3c 	bl	3658c <sys_clock_tick_get>
   21914:	9b05      	ldr	r3, [sp, #20]
   21916:	ebb3 0a00 	subs.w	sl, r3, r0
   2191a:	9b06      	ldr	r3, [sp, #24]
   2191c:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   21920:	f1ba 0f01 	cmp.w	sl, #1
   21924:	f17b 0300 	sbcs.w	r3, fp, #0
   21928:	dabc      	bge.n	218a4 <z_impl_zsock_poll+0x13c>
   2192a:	e750      	b.n	217ce <z_impl_zsock_poll+0x66>
			pfd->revents = 0;
   2192c:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   21930:	6838      	ldr	r0, [r7, #0]
			pfd->revents = 0;
   21932:	80fb      	strh	r3, [r7, #6]
			if (pfd->fd < 0) {
   21934:	2800      	cmp	r0, #0
   21936:	db28      	blt.n	2198a <z_impl_zsock_poll+0x222>
	ctx = z_get_fd_obj_and_vtable(sock,
   21938:	aa0a      	add	r2, sp, #40	; 0x28
   2193a:	a909      	add	r1, sp, #36	; 0x24
   2193c:	f7fd fe70 	bl	1f620 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   21940:	4681      	mov	r9, r0
   21942:	b918      	cbnz	r0, 2194c <z_impl_zsock_poll+0x1e4>
				pfd->revents = ZSOCK_POLLNVAL;
   21944:	2320      	movs	r3, #32
   21946:	80fb      	strh	r3, [r7, #6]
				ret++;
   21948:	3401      	adds	r4, #1
   2194a:	e01e      	b.n	2198a <z_impl_zsock_poll+0x222>
			(void)k_mutex_lock(lock, K_FOREVER);
   2194c:	f04f 32ff 	mov.w	r2, #4294967295
   21950:	f04f 33ff 	mov.w	r3, #4294967295
   21954:	980a      	ldr	r0, [sp, #40]	; 0x28
   21956:	f018 fa27 	bl	39da8 <k_mutex_lock.constprop.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   2195a:	ab08      	add	r3, sp, #32
   2195c:	4649      	mov	r1, r9
   2195e:	f240 1203 	movw	r2, #259	; 0x103
   21962:	9300      	str	r3, [sp, #0]
   21964:	9809      	ldr	r0, [sp, #36]	; 0x24
   21966:	463b      	mov	r3, r7
   21968:	f018 fa0f 	bl	39d8a <z_fdtable_call_ioctl>
   2196c:	4681      	mov	r9, r0
			k_mutex_unlock(lock);
   2196e:	980a      	ldr	r0, [sp, #40]	; 0x28
   21970:	f018 fa09 	bl	39d86 <k_mutex_unlock>
			if (result == -EAGAIN) {
   21974:	f119 0f0b 	cmn.w	r9, #11
   21978:	d00b      	beq.n	21992 <z_impl_zsock_poll+0x22a>
			} else if (result != 0) {
   2197a:	f1b9 0f00 	cmp.w	r9, #0
   2197e:	f47f af6c 	bne.w	2185a <z_impl_zsock_poll+0xf2>
			if (pfd->revents != 0) {
   21982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   21986:	2b00      	cmp	r3, #0
   21988:	d1de      	bne.n	21948 <z_impl_zsock_poll+0x1e0>
		for (pfd = fds, i = nfds; i--; pfd++) {
   2198a:	3708      	adds	r7, #8
   2198c:	f108 38ff 	add.w	r8, r8, #4294967295
   21990:	e7ab      	b.n	218ea <z_impl_zsock_poll+0x182>
				retry = true;
   21992:	2601      	movs	r6, #1
   21994:	e7f9      	b.n	2198a <z_impl_zsock_poll+0x222>
   21996:	bf00      	nop
   21998:	cccccccd 	.word	0xcccccccd

0002199c <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   2199c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   2199e:	4605      	mov	r5, r0
   219a0:	b948      	cbnz	r0, 219b6 <socket_offload_dns_register+0x1a>
   219a2:	490c      	ldr	r1, [pc, #48]	; (219d4 <socket_offload_dns_register+0x38>)
   219a4:	480c      	ldr	r0, [pc, #48]	; (219d8 <socket_offload_dns_register+0x3c>)
   219a6:	2313      	movs	r3, #19
   219a8:	4a0c      	ldr	r2, [pc, #48]	; (219dc <socket_offload_dns_register+0x40>)
   219aa:	f017 fbc2 	bl	39132 <printk>
   219ae:	2113      	movs	r1, #19
   219b0:	480a      	ldr	r0, [pc, #40]	; (219dc <socket_offload_dns_register+0x40>)
   219b2:	f017 fe5d 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   219b6:	4c0a      	ldr	r4, [pc, #40]	; (219e0 <socket_offload_dns_register+0x44>)
   219b8:	6822      	ldr	r2, [r4, #0]
   219ba:	b14a      	cbz	r2, 219d0 <socket_offload_dns_register+0x34>
   219bc:	4909      	ldr	r1, [pc, #36]	; (219e4 <socket_offload_dns_register+0x48>)
   219be:	4806      	ldr	r0, [pc, #24]	; (219d8 <socket_offload_dns_register+0x3c>)
   219c0:	2314      	movs	r3, #20
   219c2:	4a06      	ldr	r2, [pc, #24]	; (219dc <socket_offload_dns_register+0x40>)
   219c4:	f017 fbb5 	bl	39132 <printk>
   219c8:	2114      	movs	r1, #20
   219ca:	4804      	ldr	r0, [pc, #16]	; (219dc <socket_offload_dns_register+0x40>)
   219cc:	f017 fe50 	bl	39670 <assert_post_action>

	dns_offload = ops;
   219d0:	6025      	str	r5, [r4, #0]
}
   219d2:	bd38      	pop	{r3, r4, r5, pc}
   219d4:	00045a5e 	.word	0x00045a5e
   219d8:	0004033e 	.word	0x0004033e
   219dc:	00040985 	.word	0x00040985
   219e0:	20016fb8 	.word	0x20016fb8
   219e4:	000409c0 	.word	0x000409c0

000219e8 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   219e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   219ec:	4c13      	ldr	r4, [pc, #76]	; (21a3c <socket_offload_getaddrinfo+0x54>)
{
   219ee:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   219f0:	6823      	ldr	r3, [r4, #0]
{
   219f2:	4605      	mov	r5, r0
   219f4:	460e      	mov	r6, r1
   219f6:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   219f8:	b94b      	cbnz	r3, 21a0e <socket_offload_getaddrinfo+0x26>
   219fa:	4911      	ldr	r1, [pc, #68]	; (21a40 <socket_offload_getaddrinfo+0x58>)
   219fc:	4811      	ldr	r0, [pc, #68]	; (21a44 <socket_offload_getaddrinfo+0x5c>)
   219fe:	231d      	movs	r3, #29
   21a00:	4a11      	ldr	r2, [pc, #68]	; (21a48 <socket_offload_getaddrinfo+0x60>)
   21a02:	f017 fb96 	bl	39132 <printk>
   21a06:	211d      	movs	r1, #29
   21a08:	480f      	ldr	r0, [pc, #60]	; (21a48 <socket_offload_getaddrinfo+0x60>)
   21a0a:	f017 fe31 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   21a0e:	6823      	ldr	r3, [r4, #0]
   21a10:	681b      	ldr	r3, [r3, #0]
   21a12:	b94b      	cbnz	r3, 21a28 <socket_offload_getaddrinfo+0x40>
   21a14:	490d      	ldr	r1, [pc, #52]	; (21a4c <socket_offload_getaddrinfo+0x64>)
   21a16:	480b      	ldr	r0, [pc, #44]	; (21a44 <socket_offload_getaddrinfo+0x5c>)
   21a18:	231e      	movs	r3, #30
   21a1a:	4a0b      	ldr	r2, [pc, #44]	; (21a48 <socket_offload_getaddrinfo+0x60>)
   21a1c:	f017 fb89 	bl	39132 <printk>
   21a20:	211e      	movs	r1, #30
   21a22:	4809      	ldr	r0, [pc, #36]	; (21a48 <socket_offload_getaddrinfo+0x60>)
   21a24:	f017 fe24 	bl	39670 <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   21a28:	6823      	ldr	r3, [r4, #0]
   21a2a:	463a      	mov	r2, r7
   21a2c:	681c      	ldr	r4, [r3, #0]
   21a2e:	4631      	mov	r1, r6
   21a30:	4643      	mov	r3, r8
   21a32:	4628      	mov	r0, r5
   21a34:	46a4      	mov	ip, r4
}
   21a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   21a3a:	4760      	bx	ip
   21a3c:	20016fb8 	.word	0x20016fb8
   21a40:	000409db 	.word	0x000409db
   21a44:	0004033e 	.word	0x0004033e
   21a48:	00040985 	.word	0x00040985
   21a4c:	000409e7 	.word	0x000409e7

00021a50 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   21a50:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   21a52:	4c10      	ldr	r4, [pc, #64]	; (21a94 <socket_offload_freeaddrinfo+0x44>)
{
   21a54:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   21a56:	6823      	ldr	r3, [r4, #0]
   21a58:	b94b      	cbnz	r3, 21a6e <socket_offload_freeaddrinfo+0x1e>
   21a5a:	490f      	ldr	r1, [pc, #60]	; (21a98 <socket_offload_freeaddrinfo+0x48>)
   21a5c:	480f      	ldr	r0, [pc, #60]	; (21a9c <socket_offload_freeaddrinfo+0x4c>)
   21a5e:	2325      	movs	r3, #37	; 0x25
   21a60:	4a0f      	ldr	r2, [pc, #60]	; (21aa0 <socket_offload_freeaddrinfo+0x50>)
   21a62:	f017 fb66 	bl	39132 <printk>
   21a66:	2125      	movs	r1, #37	; 0x25
   21a68:	480d      	ldr	r0, [pc, #52]	; (21aa0 <socket_offload_freeaddrinfo+0x50>)
   21a6a:	f017 fe01 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   21a6e:	6823      	ldr	r3, [r4, #0]
   21a70:	685b      	ldr	r3, [r3, #4]
   21a72:	b94b      	cbnz	r3, 21a88 <socket_offload_freeaddrinfo+0x38>
   21a74:	490b      	ldr	r1, [pc, #44]	; (21aa4 <socket_offload_freeaddrinfo+0x54>)
   21a76:	4809      	ldr	r0, [pc, #36]	; (21a9c <socket_offload_freeaddrinfo+0x4c>)
   21a78:	2326      	movs	r3, #38	; 0x26
   21a7a:	4a09      	ldr	r2, [pc, #36]	; (21aa0 <socket_offload_freeaddrinfo+0x50>)
   21a7c:	f017 fb59 	bl	39132 <printk>
   21a80:	2126      	movs	r1, #38	; 0x26
   21a82:	4807      	ldr	r0, [pc, #28]	; (21aa0 <socket_offload_freeaddrinfo+0x50>)
   21a84:	f017 fdf4 	bl	39670 <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   21a88:	6823      	ldr	r3, [r4, #0]
   21a8a:	4628      	mov	r0, r5
}
   21a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   21a90:	685b      	ldr	r3, [r3, #4]
   21a92:	4718      	bx	r3
   21a94:	20016fb8 	.word	0x20016fb8
   21a98:	000409db 	.word	0x000409db
   21a9c:	0004033e 	.word	0x0004033e
   21aa0:	00040985 	.word	0x00040985
   21aa4:	00040a00 	.word	0x00040a00

00021aa8 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   21aa8:	4b09      	ldr	r3, [pc, #36]	; (21ad0 <get_flash_area_from_id+0x28>)
{
   21aaa:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   21aac:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   21aae:	4b09      	ldr	r3, [pc, #36]	; (21ad4 <get_flash_area_from_id+0x2c>)
   21ab0:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   21ab2:	2300      	movs	r3, #0
   21ab4:	429d      	cmp	r5, r3
   21ab6:	dc02      	bgt.n	21abe <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   21ab8:	2100      	movs	r1, #0
}
   21aba:	4608      	mov	r0, r1
   21abc:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   21abe:	011a      	lsls	r2, r3, #4
   21ac0:	5ca2      	ldrb	r2, [r4, r2]
   21ac2:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   21ac6:	4282      	cmp	r2, r0
   21ac8:	d0f7      	beq.n	21aba <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   21aca:	3301      	adds	r3, #1
   21acc:	e7f2      	b.n	21ab4 <get_flash_area_from_id+0xc>
   21ace:	bf00      	nop
   21ad0:	0003fa70 	.word	0x0003fa70
   21ad4:	2001461c 	.word	0x2001461c

00021ad8 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   21ad8:	4b08      	ldr	r3, [pc, #32]	; (21afc <flash_area_open+0x24>)
{
   21ada:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   21adc:	681b      	ldr	r3, [r3, #0]
{
   21ade:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   21ae0:	b12b      	cbz	r3, 21aee <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   21ae2:	f7ff ffe1 	bl	21aa8 <get_flash_area_from_id>
	if (area == NULL) {
   21ae6:	b128      	cbz	r0, 21af4 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   21ae8:	6020      	str	r0, [r4, #0]
	return 0;
   21aea:	2000      	movs	r0, #0
}
   21aec:	bd10      	pop	{r4, pc}
		return -EACCES;
   21aee:	f06f 000c 	mvn.w	r0, #12
   21af2:	e7fb      	b.n	21aec <flash_area_open+0x14>
		return -ENOENT;
   21af4:	f06f 0001 	mvn.w	r0, #1
   21af8:	e7f8      	b.n	21aec <flash_area_open+0x14>
   21afa:	bf00      	nop
   21afc:	2001461c 	.word	0x2001461c

00021b00 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   21b00:	b530      	push	{r4, r5, lr}
   21b02:	b089      	sub	sp, #36	; 0x24
   21b04:	460c      	mov	r4, r1
   21b06:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   21b08:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   21b0a:	f7ff ffcd 	bl	21aa8 <get_flash_area_from_id>
	if (fa == NULL) {
   21b0e:	b1b8      	cbz	r0, 21b40 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   21b10:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
   21b12:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
   21b14:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   21b16:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   21b18:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   21b1a:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   21b1e:	2300      	movs	r3, #0
	cb_data->status = 0;
   21b20:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   21b24:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
   21b26:	f018 fa6f 	bl	3a008 <device_get_binding>
	if (flash_dev == NULL) {
   21b2a:	b160      	cbz	r0, 21b46 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   21b2c:	4907      	ldr	r1, [pc, #28]	; (21b4c <flash_area_get_sectors+0x4c>)
   21b2e:	aa01      	add	r2, sp, #4
   21b30:	f019 fde9 	bl	3b706 <flash_page_foreach>
	if (cb_data->status == 0) {
   21b34:	9807      	ldr	r0, [sp, #28]
   21b36:	b908      	cbnz	r0, 21b3c <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   21b38:	9b05      	ldr	r3, [sp, #20]
   21b3a:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   21b3c:	b009      	add	sp, #36	; 0x24
   21b3e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   21b40:	f06f 0015 	mvn.w	r0, #21
   21b44:	e7fa      	b.n	21b3c <flash_area_get_sectors+0x3c>
		return -ENODEV;
   21b46:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   21b4a:	e7f7      	b.n	21b3c <flash_area_get_sectors+0x3c>
   21b4c:	0003a00d 	.word	0x0003a00d

00021b50 <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   21b50:	6842      	ldr	r2, [r0, #4]
   21b52:	680b      	ldr	r3, [r1, #0]
{
   21b54:	b510      	push	{r4, lr}
	if (ctx->buf_len > info->size) {
   21b56:	4293      	cmp	r3, r2
{
   21b58:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   21b5a:	d90c      	bls.n	21b76 <find_flash_total_size+0x26>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   21b5c:	4b08      	ldr	r3, [pc, #32]	; (21b80 <find_flash_total_size+0x30>)
   21b5e:	4809      	ldr	r0, [pc, #36]	; (21b84 <find_flash_total_size+0x34>)
		LOG_ERR("Buffer size is bigger than page");
   21b60:	4909      	ldr	r1, [pc, #36]	; (21b88 <find_flash_total_size+0x38>)
   21b62:	1ac0      	subs	r0, r0, r3
   21b64:	08c0      	lsrs	r0, r0, #3
   21b66:	0180      	lsls	r0, r0, #6
   21b68:	f040 0001 	orr.w	r0, r0, #1
   21b6c:	f017 fdaf 	bl	396ce <log_string_sync>
		ctx->total_size = 0;
   21b70:	2000      	movs	r0, #0
   21b72:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   21b74:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   21b76:	684b      	ldr	r3, [r1, #4]
	return true;
   21b78:	2001      	movs	r0, #1
	ctx->total_size += info->size;
   21b7a:	4413      	add	r3, r2
   21b7c:	604b      	str	r3, [r1, #4]
	return true;
   21b7e:	e7f9      	b.n	21b74 <find_flash_total_size+0x24>
   21b80:	0003f5a4 	.word	0x0003f5a4
   21b84:	0003f5b4 	.word	0x0003f5b4
   21b88:	00040a1a 	.word	0x00040a1a

00021b8c <stream_flash_erase_page>:
{
   21b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b90:	4605      	mov	r5, r0
   21b92:	b086      	sub	sp, #24
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   21b94:	68c0      	ldr	r0, [r0, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   21b96:	aa03      	add	r2, sp, #12
   21b98:	f019 fdb1 	bl	3b6fe <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   21b9c:	4604      	mov	r4, r0
   21b9e:	b170      	cbz	r0, 21bbe <stream_flash_erase_page+0x32>
		LOG_ERR("Error %d while getting page info", rc);
   21ba0:	4622      	mov	r2, r4
   21ba2:	481b      	ldr	r0, [pc, #108]	; (21c10 <stream_flash_erase_page+0x84>)
   21ba4:	4b1b      	ldr	r3, [pc, #108]	; (21c14 <stream_flash_erase_page+0x88>)
   21ba6:	491c      	ldr	r1, [pc, #112]	; (21c18 <stream_flash_erase_page+0x8c>)
   21ba8:	1ac0      	subs	r0, r0, r3
   21baa:	08c0      	lsrs	r0, r0, #3
   21bac:	0180      	lsls	r0, r0, #6
		LOG_ERR("Error %d while erasing page", rc);
   21bae:	f040 0001 	orr.w	r0, r0, #1
   21bb2:	f017 fd8c 	bl	396ce <log_string_sync>
}
   21bb6:	4620      	mov	r0, r4
   21bb8:	b006      	add	sp, #24
   21bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   21bbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
   21bc2:	6a2b      	ldr	r3, [r5, #32]
   21bc4:	4543      	cmp	r3, r8
   21bc6:	d0f6      	beq.n	21bb6 <stream_flash_erase_page+0x2a>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   21bc8:	68ee      	ldr	r6, [r5, #12]
   21bca:	9a04      	ldr	r2, [sp, #16]
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   21bcc:	68b7      	ldr	r7, [r6, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   21bce:	68fb      	ldr	r3, [r7, #12]
   21bd0:	b953      	cbnz	r3, 21be8 <stream_flash_erase_page+0x5c>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
   21bd2:	68bb      	ldr	r3, [r7, #8]
   21bd4:	4641      	mov	r1, r8
   21bd6:	4630      	mov	r0, r6
   21bd8:	4798      	blx	r3

	if (api->write_protection != NULL) {
   21bda:	68fb      	ldr	r3, [r7, #12]
	rc = api->erase(dev, offset, size);
   21bdc:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   21bde:	b99b      	cbnz	r3, 21c08 <stream_flash_erase_page+0x7c>
	if (rc != 0) {
   21be0:	b954      	cbnz	r4, 21bf8 <stream_flash_erase_page+0x6c>
		ctx->last_erased_page_start_offset = page.start_offset;
   21be2:	9b03      	ldr	r3, [sp, #12]
   21be4:	622b      	str	r3, [r5, #32]
   21be6:	e7e6      	b.n	21bb6 <stream_flash_erase_page+0x2a>
		rc = api->write_protection(dev, false);
   21be8:	4601      	mov	r1, r0
   21bea:	4630      	mov	r0, r6
   21bec:	9201      	str	r2, [sp, #4]
   21bee:	4798      	blx	r3
		if (rc) {
   21bf0:	9a01      	ldr	r2, [sp, #4]
   21bf2:	4604      	mov	r4, r0
   21bf4:	2800      	cmp	r0, #0
   21bf6:	d0ec      	beq.n	21bd2 <stream_flash_erase_page+0x46>
   21bf8:	4805      	ldr	r0, [pc, #20]	; (21c10 <stream_flash_erase_page+0x84>)
   21bfa:	4b06      	ldr	r3, [pc, #24]	; (21c14 <stream_flash_erase_page+0x88>)
		LOG_ERR("Error %d while erasing page", rc);
   21bfc:	4622      	mov	r2, r4
   21bfe:	1ac0      	subs	r0, r0, r3
   21c00:	08c0      	lsrs	r0, r0, #3
   21c02:	4906      	ldr	r1, [pc, #24]	; (21c1c <stream_flash_erase_page+0x90>)
   21c04:	0180      	lsls	r0, r0, #6
   21c06:	e7d2      	b.n	21bae <stream_flash_erase_page+0x22>
		(void) api->write_protection(dev, true);
   21c08:	2101      	movs	r1, #1
   21c0a:	4630      	mov	r0, r6
   21c0c:	4798      	blx	r3
   21c0e:	e7e7      	b.n	21be0 <stream_flash_erase_page+0x54>
   21c10:	0003f5b4 	.word	0x0003f5b4
   21c14:	0003f5a4 	.word	0x0003f5a4
   21c18:	00040a3a 	.word	0x00040a3a
   21c1c:	00040a5b 	.word	0x00040a5b

00021c20 <flash_sync>:
{
   21c20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (ctx->buf_bytes == 0) {
   21c24:	6884      	ldr	r4, [r0, #8]
{
   21c26:	4605      	mov	r5, r0
	if (ctx->buf_bytes == 0) {
   21c28:	b1a4      	cbz	r4, 21c54 <flash_sync+0x34>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21c2a:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   21c2e:	3c01      	subs	r4, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21c30:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   21c32:	19a1      	adds	r1, r4, r6
   21c34:	f7ff ffaa 	bl	21b8c <stream_flash_erase_page>
		if (rc < 0) {
   21c38:	1e04      	subs	r4, r0, #0
   21c3a:	da0f      	bge.n	21c5c <flash_sync+0x3c>
   21c3c:	4b45      	ldr	r3, [pc, #276]	; (21d54 <flash_sync+0x134>)
   21c3e:	4846      	ldr	r0, [pc, #280]	; (21d58 <flash_sync+0x138>)
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   21c40:	4622      	mov	r2, r4
   21c42:	1ac0      	subs	r0, r0, r3
   21c44:	4633      	mov	r3, r6
   21c46:	08c0      	lsrs	r0, r0, #3
   21c48:	4944      	ldr	r1, [pc, #272]	; (21d5c <flash_sync+0x13c>)
   21c4a:	0180      	lsls	r0, r0, #6
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21c4c:	f040 0001 	orr.w	r0, r0, #1
   21c50:	f017 fd3d 	bl	396ce <log_string_sync>
}
   21c54:	4620      	mov	r0, r4
   21c56:	b002      	add	sp, #8
   21c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fill_length = flash_get_write_block_size(ctx->fdev);
   21c5c:	68e8      	ldr	r0, [r5, #12]
   21c5e:	f018 fa85 	bl	3a16c <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   21c62:	68aa      	ldr	r2, [r5, #8]
   21c64:	fbb2 f4f0 	udiv	r4, r2, r0
   21c68:	fb00 2414 	mls	r4, r0, r4, r2
   21c6c:	b15c      	cbz	r4, 21c86 <flash_sync+0x66>
		fill_length -= ctx->buf_bytes % fill_length;
   21c6e:	1b04      	subs	r4, r0, r4
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   21c70:	68e8      	ldr	r0, [r5, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   21c72:	6883      	ldr	r3, [r0, #8]
   21c74:	691b      	ldr	r3, [r3, #16]
   21c76:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   21c78:	682f      	ldr	r7, [r5, #0]
   21c7a:	68ab      	ldr	r3, [r5, #8]

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   21c7c:	7901      	ldrb	r1, [r0, #4]
   21c7e:	4622      	mov	r2, r4
   21c80:	18f8      	adds	r0, r7, r3
   21c82:	f01c f992 	bl	3dfaa <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   21c86:	68ab      	ldr	r3, [r5, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   21c88:	68ef      	ldr	r7, [r5, #12]
   21c8a:	682a      	ldr	r2, [r5, #0]
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   21c8c:	4423      	add	r3, r4
	const struct flash_driver_api *api =
   21c8e:	f8d7 8008 	ldr.w	r8, [r7, #8]
	if (api->write_protection != NULL) {
   21c92:	f8d8 400c 	ldr.w	r4, [r8, #12]
   21c96:	b99c      	cbnz	r4, 21cc0 <flash_sync+0xa0>
	rc = api->write(dev, offset, data, len);
   21c98:	f8d8 4004 	ldr.w	r4, [r8, #4]
   21c9c:	4631      	mov	r1, r6
   21c9e:	4638      	mov	r0, r7
   21ca0:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   21ca2:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
   21ca6:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   21ca8:	b9eb      	cbnz	r3, 21ce6 <flash_sync+0xc6>
	if (rc != 0) {
   21caa:	b99c      	cbnz	r4, 21cd4 <flash_sync+0xb4>
	if (ctx->callback) {
   21cac:	69eb      	ldr	r3, [r5, #28]
   21cae:	2b00      	cmp	r3, #0
   21cb0:	d139      	bne.n	21d26 <flash_sync+0x106>
	ctx->bytes_written += ctx->buf_bytes;
   21cb2:	692b      	ldr	r3, [r5, #16]
   21cb4:	68aa      	ldr	r2, [r5, #8]
   21cb6:	4413      	add	r3, r2
   21cb8:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
   21cba:	2300      	movs	r3, #0
   21cbc:	60ab      	str	r3, [r5, #8]
	return rc;
   21cbe:	e7c9      	b.n	21c54 <flash_sync+0x34>
		rc = api->write_protection(dev, false);
   21cc0:	2100      	movs	r1, #0
   21cc2:	4638      	mov	r0, r7
   21cc4:	e9cd 2300 	strd	r2, r3, [sp]
   21cc8:	47a0      	blx	r4
		if (rc) {
   21cca:	e9dd 2300 	ldrd	r2, r3, [sp]
   21cce:	4604      	mov	r4, r0
   21cd0:	2800      	cmp	r0, #0
   21cd2:	d0e1      	beq.n	21c98 <flash_sync+0x78>
   21cd4:	4b1f      	ldr	r3, [pc, #124]	; (21d54 <flash_sync+0x134>)
   21cd6:	4820      	ldr	r0, [pc, #128]	; (21d58 <flash_sync+0x138>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21cd8:	4622      	mov	r2, r4
   21cda:	1ac0      	subs	r0, r0, r3
   21cdc:	08c0      	lsrs	r0, r0, #3
   21cde:	4633      	mov	r3, r6
   21ce0:	491f      	ldr	r1, [pc, #124]	; (21d60 <flash_sync+0x140>)
   21ce2:	0180      	lsls	r0, r0, #6
   21ce4:	e7b2      	b.n	21c4c <flash_sync+0x2c>
		(void) api->write_protection(dev, true);
   21ce6:	2101      	movs	r1, #1
   21ce8:	4638      	mov	r0, r7
   21cea:	4798      	blx	r3
   21cec:	e7dd      	b.n	21caa <flash_sync+0x8a>
			ctx->buf[i] = ~ctx->buf[i];
   21cee:	5c53      	ldrb	r3, [r2, r1]
   21cf0:	43db      	mvns	r3, r3
   21cf2:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21cf4:	3101      	adds	r1, #1
   21cf6:	68ab      	ldr	r3, [r5, #8]
   21cf8:	682a      	ldr	r2, [r5, #0]
   21cfa:	428b      	cmp	r3, r1
   21cfc:	d8f7      	bhi.n	21cee <flash_sync+0xce>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   21cfe:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
   21d00:	6881      	ldr	r1, [r0, #8]
   21d02:	680f      	ldr	r7, [r1, #0]
   21d04:	4631      	mov	r1, r6
   21d06:	47b8      	blx	r7
		if (rc != 0) {
   21d08:	4607      	mov	r7, r0
   21d0a:	b170      	cbz	r0, 21d2a <flash_sync+0x10a>
   21d0c:	4811      	ldr	r0, [pc, #68]	; (21d54 <flash_sync+0x134>)
   21d0e:	4b12      	ldr	r3, [pc, #72]	; (21d58 <flash_sync+0x138>)
			LOG_ERR("flash read failed: %d", rc);
   21d10:	463a      	mov	r2, r7
   21d12:	1a1b      	subs	r3, r3, r0
   21d14:	08db      	lsrs	r3, r3, #3
   21d16:	019b      	lsls	r3, r3, #6
   21d18:	4912      	ldr	r1, [pc, #72]	; (21d64 <flash_sync+0x144>)
   21d1a:	f043 0001 	orr.w	r0, r3, #1
   21d1e:	f017 fcd6 	bl	396ce <log_string_sync>
			return rc;
   21d22:	463c      	mov	r4, r7
   21d24:	e796      	b.n	21c54 <flash_sync+0x34>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21d26:	4621      	mov	r1, r4
   21d28:	e7e5      	b.n	21cf6 <flash_sync+0xd6>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   21d2a:	4632      	mov	r2, r6
   21d2c:	69eb      	ldr	r3, [r5, #28]
   21d2e:	68a9      	ldr	r1, [r5, #8]
   21d30:	6828      	ldr	r0, [r5, #0]
   21d32:	4798      	blx	r3
		if (rc != 0) {
   21d34:	4606      	mov	r6, r0
   21d36:	2800      	cmp	r0, #0
   21d38:	d0bb      	beq.n	21cb2 <flash_sync+0x92>
   21d3a:	4806      	ldr	r0, [pc, #24]	; (21d54 <flash_sync+0x134>)
   21d3c:	4b06      	ldr	r3, [pc, #24]	; (21d58 <flash_sync+0x138>)
			LOG_ERR("callback failed: %d", rc);
   21d3e:	4632      	mov	r2, r6
   21d40:	1a1b      	subs	r3, r3, r0
   21d42:	08db      	lsrs	r3, r3, #3
   21d44:	019b      	lsls	r3, r3, #6
   21d46:	4908      	ldr	r1, [pc, #32]	; (21d68 <flash_sync+0x148>)
   21d48:	f043 0001 	orr.w	r0, r3, #1
   21d4c:	f017 fcbf 	bl	396ce <log_string_sync>
			return rc;
   21d50:	4634      	mov	r4, r6
   21d52:	e77f      	b.n	21c54 <flash_sync+0x34>
   21d54:	0003f5a4 	.word	0x0003f5a4
   21d58:	0003f5b4 	.word	0x0003f5b4
   21d5c:	00040a77 	.word	0x00040a77
   21d60:	00040aa5 	.word	0x00040aa5
   21d64:	00040ac9 	.word	0x00040ac9
   21d68:	00040adf 	.word	0x00040adf

00021d6c <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   21d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21d70:	460d      	mov	r5, r1
   21d72:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   21d76:	4691      	mov	r9, r2
   21d78:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   21d7a:	4604      	mov	r4, r0
   21d7c:	b920      	cbnz	r0, 21d88 <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   21d7e:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   21d82:	b003      	add	sp, #12
   21d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   21d88:	2900      	cmp	r1, #0
   21d8a:	d0f8      	beq.n	21d7e <stream_flash_init+0x12>
   21d8c:	2a00      	cmp	r2, #0
   21d8e:	d0f6      	beq.n	21d7e <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   21d90:	9300      	str	r3, [sp, #0]
   21d92:	2300      	movs	r3, #0
	if (buf_len % flash_get_write_block_size(fdev)) {
   21d94:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   21d96:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   21d98:	f018 f9e8 	bl	3a16c <flash_get_write_block_size>
   21d9c:	fbb7 f3f0 	udiv	r3, r7, r0
   21da0:	fb03 7010 	mls	r0, r3, r0, r7
   21da4:	b150      	cbz	r0, 21dbc <stream_flash_init+0x50>
   21da6:	481d      	ldr	r0, [pc, #116]	; (21e1c <stream_flash_init+0xb0>)
   21da8:	4b1d      	ldr	r3, [pc, #116]	; (21e20 <stream_flash_init+0xb4>)
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   21daa:	491e      	ldr	r1, [pc, #120]	; (21e24 <stream_flash_init+0xb8>)
   21dac:	1ac0      	subs	r0, r0, r3
   21dae:	08c0      	lsrs	r0, r0, #3
   21db0:	0180      	lsls	r0, r0, #6
		LOG_ERR("Incorrect parameter");
   21db2:	f040 0001 	orr.w	r0, r0, #1
   21db6:	f017 fc8a 	bl	396ce <log_string_sync>
   21dba:	e7e0      	b.n	21d7e <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   21dbc:	466a      	mov	r2, sp
   21dbe:	4628      	mov	r0, r5
   21dc0:	4919      	ldr	r1, [pc, #100]	; (21e28 <stream_flash_init+0xbc>)
   21dc2:	f019 fca0 	bl	3b706 <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   21dc6:	9b01      	ldr	r3, [sp, #4]
   21dc8:	2b00      	cmp	r3, #0
   21dca:	d0d8      	beq.n	21d7e <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   21dcc:	eb08 0206 	add.w	r2, r8, r6
   21dd0:	4293      	cmp	r3, r2
   21dd2:	d206      	bcs.n	21de2 <stream_flash_init+0x76>
   21dd4:	4811      	ldr	r0, [pc, #68]	; (21e1c <stream_flash_init+0xb0>)
   21dd6:	4b12      	ldr	r3, [pc, #72]	; (21e20 <stream_flash_init+0xb4>)
		LOG_ERR("Incorrect parameter");
   21dd8:	4914      	ldr	r1, [pc, #80]	; (21e2c <stream_flash_init+0xc0>)
   21dda:	1ac0      	subs	r0, r0, r3
   21ddc:	08c0      	lsrs	r0, r0, #3
   21dde:	0180      	lsls	r0, r0, #6
   21de0:	e7e7      	b.n	21db2 <stream_flash_init+0x46>
	    offset % flash_get_write_block_size(fdev)) {
   21de2:	4628      	mov	r0, r5
   21de4:	f018 f9c2 	bl	3a16c <flash_get_write_block_size>
   21de8:	fbb8 f3f0 	udiv	r3, r8, r0
   21dec:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   21df0:	2800      	cmp	r0, #0
   21df2:	d1ef      	bne.n	21dd4 <stream_flash_init+0x68>
	ctx->buf_len = buf_len;
   21df4:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   21df8:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   21dfa:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   21dfc:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   21dfe:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   21e02:	b916      	cbnz	r6, 21e0a <stream_flash_init+0x9e>
   21e04:	9e01      	ldr	r6, [sp, #4]
   21e06:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   21e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   21e0c:	2000      	movs	r0, #0
	ctx->callback = cb;
   21e0e:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   21e10:	f04f 33ff 	mov.w	r3, #4294967295
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   21e14:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   21e16:	6223      	str	r3, [r4, #32]
	return 0;
   21e18:	e7b3      	b.n	21d82 <stream_flash_init+0x16>
   21e1a:	bf00      	nop
   21e1c:	0003f5b4 	.word	0x0003f5b4
   21e20:	0003f5a4 	.word	0x0003f5a4
   21e24:	00040af3 	.word	0x00040af3
   21e28:	00021b51 	.word	0x00021b51
   21e2c:	00040b2a 	.word	0x00040b2a

00021e30 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   21e30:	4b10      	ldr	r3, [pc, #64]	; (21e74 <settings_save_one+0x44>)
{
   21e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   21e36:	681c      	ldr	r4, [r3, #0]
{
   21e38:	4605      	mov	r5, r0
   21e3a:	460e      	mov	r6, r1
   21e3c:	4617      	mov	r7, r2
	if (!cs) {
   21e3e:	b1ac      	cbz	r4, 21e6c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   21e40:	f04f 32ff 	mov.w	r2, #4294967295
   21e44:	f04f 33ff 	mov.w	r3, #4294967295
   21e48:	480b      	ldr	r0, [pc, #44]	; (21e78 <settings_save_one+0x48>)
   21e4a:	f012 f8d3 	bl	33ff4 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   21e4e:	6863      	ldr	r3, [r4, #4]
   21e50:	4632      	mov	r2, r6
   21e52:	f8d3 8008 	ldr.w	r8, [r3, #8]
   21e56:	4629      	mov	r1, r5
   21e58:	463b      	mov	r3, r7
   21e5a:	4620      	mov	r0, r4
   21e5c:	47c0      	blx	r8
   21e5e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   21e60:	4805      	ldr	r0, [pc, #20]	; (21e78 <settings_save_one+0x48>)
   21e62:	f012 f9c1 	bl	341e8 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   21e66:	4620      	mov	r0, r4
   21e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   21e6c:	f06f 0401 	mvn.w	r4, #1
   21e70:	e7f9      	b.n	21e66 <settings_save_one+0x36>
   21e72:	bf00      	nop
   21e74:	20016fc4 	.word	0x20016fc4
   21e78:	20014dc8 	.word	0x20014dc8

00021e7c <settings_src_register>:
	parent->next = child;
   21e7c:	2300      	movs	r3, #0
   21e7e:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   21e80:	4b04      	ldr	r3, [pc, #16]	; (21e94 <settings_src_register+0x18>)
   21e82:	685a      	ldr	r2, [r3, #4]
   21e84:	b912      	cbnz	r2, 21e8c <settings_src_register+0x10>
	list->head = node;
   21e86:	e9c3 0000 	strd	r0, r0, [r3]
}
   21e8a:	4770      	bx	lr
	parent->next = child;
   21e8c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   21e8e:	6058      	str	r0, [r3, #4]
}
   21e90:	4770      	bx	lr
   21e92:	bf00      	nop
   21e94:	20016fbc 	.word	0x20016fbc

00021e98 <settings_dst_register>:
	settings_save_dst = cs;
   21e98:	4b01      	ldr	r3, [pc, #4]	; (21ea0 <settings_dst_register+0x8>)
   21e9a:	6018      	str	r0, [r3, #0]
}
   21e9c:	4770      	bx	lr
   21e9e:	bf00      	nop
   21ea0:	20016fc4 	.word	0x20016fc4

00021ea4 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   21ea4:	2300      	movs	r3, #0
{
   21ea6:	b530      	push	{r4, r5, lr}
   21ea8:	b085      	sub	sp, #20
   21eaa:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   21eac:	e9cd 3302 	strd	r3, r3, [sp, #8]
   21eb0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   21eb2:	f04f 33ff 	mov.w	r3, #4294967295
   21eb6:	f04f 32ff 	mov.w	r2, #4294967295
   21eba:	480d      	ldr	r0, [pc, #52]	; (21ef0 <settings_load_subtree+0x4c>)
   21ebc:	f012 f89a 	bl	33ff4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   21ec0:	4b0c      	ldr	r3, [pc, #48]	; (21ef4 <settings_load_subtree+0x50>)
   21ec2:	681c      	ldr	r4, [r3, #0]
   21ec4:	2c00      	cmp	r4, #0
   21ec6:	bf38      	it	cc
   21ec8:	2400      	movcc	r4, #0
   21eca:	b13c      	cbz	r4, 21edc <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   21ecc:	6863      	ldr	r3, [r4, #4]
   21ece:	4620      	mov	r0, r4
   21ed0:	681b      	ldr	r3, [r3, #0]
   21ed2:	a901      	add	r1, sp, #4
   21ed4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21ed6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   21ed8:	2c00      	cmp	r4, #0
   21eda:	d1f6      	bne.n	21eca <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   21edc:	4628      	mov	r0, r5
   21ede:	f000 f8c7 	bl	22070 <settings_commit_subtree>
   21ee2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   21ee4:	4802      	ldr	r0, [pc, #8]	; (21ef0 <settings_load_subtree+0x4c>)
   21ee6:	f012 f97f 	bl	341e8 <z_impl_k_mutex_unlock>
}
   21eea:	4620      	mov	r0, r4
   21eec:	b005      	add	sp, #20
   21eee:	bd30      	pop	{r4, r5, pc}
   21ef0:	20014dc8 	.word	0x20014dc8
   21ef4:	20016fbc 	.word	0x20016fbc

00021ef8 <settings_store_init>:
	list->head = NULL;
   21ef8:	2200      	movs	r2, #0
   21efa:	4b02      	ldr	r3, [pc, #8]	; (21f04 <settings_store_init+0xc>)
	list->tail = NULL;
   21efc:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   21f00:	4770      	bx	lr
   21f02:	bf00      	nop
   21f04:	20016fbc 	.word	0x20016fbc

00021f08 <settings_init>:
	list->head = NULL;
   21f08:	2200      	movs	r2, #0
   21f0a:	4b02      	ldr	r3, [pc, #8]	; (21f14 <settings_init+0xc>)
	list->tail = NULL;
   21f0c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   21f10:	f7ff bff2 	b.w	21ef8 <settings_store_init>
   21f14:	20016fc8 	.word	0x20016fc8

00021f18 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   21f18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21f1c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   21f1e:	460e      	mov	r6, r1
   21f20:	b109      	cbz	r1, 21f26 <settings_parse_and_lookup+0xe>
		*next = NULL;
   21f22:	2300      	movs	r3, #0
   21f24:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   21f26:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 21fd8 <settings_parse_and_lookup+0xc0>
   21f2a:	2500      	movs	r5, #0
   21f2c:	46c2      	mov	sl, r8
   21f2e:	4c25      	ldr	r4, [pc, #148]	; (21fc4 <settings_parse_and_lookup+0xac>)
   21f30:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 21fdc <settings_parse_and_lookup+0xc4>
   21f34:	4544      	cmp	r4, r8
   21f36:	d90c      	bls.n	21f52 <settings_parse_and_lookup+0x3a>
   21f38:	4923      	ldr	r1, [pc, #140]	; (21fc8 <settings_parse_and_lookup+0xb0>)
   21f3a:	2394      	movs	r3, #148	; 0x94
   21f3c:	464a      	mov	r2, r9
   21f3e:	4823      	ldr	r0, [pc, #140]	; (21fcc <settings_parse_and_lookup+0xb4>)
   21f40:	f017 f8f7 	bl	39132 <printk>
   21f44:	4822      	ldr	r0, [pc, #136]	; (21fd0 <settings_parse_and_lookup+0xb8>)
   21f46:	f017 f8f4 	bl	39132 <printk>
   21f4a:	2194      	movs	r1, #148	; 0x94
   21f4c:	4648      	mov	r0, r9
   21f4e:	f017 fb8f 	bl	39670 <assert_post_action>
   21f52:	4554      	cmp	r4, sl
   21f54:	d308      	bcc.n	21f68 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   21f56:	4b1f      	ldr	r3, [pc, #124]	; (21fd4 <settings_parse_and_lookup+0xbc>)
   21f58:	681c      	ldr	r4, [r3, #0]
   21f5a:	b10c      	cbz	r4, 21f60 <settings_parse_and_lookup+0x48>
   21f5c:	3c14      	subs	r4, #20
   21f5e:	b9c4      	cbnz	r4, 21f92 <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   21f60:	4628      	mov	r0, r5
   21f62:	b002      	add	sp, #8
   21f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   21f68:	4638      	mov	r0, r7
   21f6a:	6821      	ldr	r1, [r4, #0]
   21f6c:	aa01      	add	r2, sp, #4
   21f6e:	f018 f949 	bl	3a204 <settings_name_steq>
   21f72:	b160      	cbz	r0, 21f8e <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
   21f74:	b925      	cbnz	r5, 21f80 <settings_parse_and_lookup+0x68>
			if (next) {
   21f76:	b10e      	cbz	r6, 21f7c <settings_parse_and_lookup+0x64>
				*next = tmpnext;
   21f78:	9b01      	ldr	r3, [sp, #4]
   21f7a:	6033      	str	r3, [r6, #0]
   21f7c:	4625      	mov	r5, r4
   21f7e:	e006      	b.n	21f8e <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   21f80:	2200      	movs	r2, #0
   21f82:	6829      	ldr	r1, [r5, #0]
   21f84:	6820      	ldr	r0, [r4, #0]
   21f86:	f018 f93d 	bl	3a204 <settings_name_steq>
   21f8a:	2800      	cmp	r0, #0
   21f8c:	d1f3      	bne.n	21f76 <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   21f8e:	3414      	adds	r4, #20
   21f90:	e7d0      	b.n	21f34 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   21f92:	4638      	mov	r0, r7
   21f94:	6821      	ldr	r1, [r4, #0]
   21f96:	aa01      	add	r2, sp, #4
   21f98:	f018 f934 	bl	3a204 <settings_name_steq>
   21f9c:	b160      	cbz	r0, 21fb8 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
   21f9e:	b925      	cbnz	r5, 21faa <settings_parse_and_lookup+0x92>
			if (next) {
   21fa0:	b10e      	cbz	r6, 21fa6 <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
   21fa2:	9b01      	ldr	r3, [sp, #4]
   21fa4:	6033      	str	r3, [r6, #0]
   21fa6:	4625      	mov	r5, r4
   21fa8:	e006      	b.n	21fb8 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   21faa:	2200      	movs	r2, #0
   21fac:	6829      	ldr	r1, [r5, #0]
   21fae:	6820      	ldr	r0, [r4, #0]
   21fb0:	f018 f928 	bl	3a204 <settings_name_steq>
   21fb4:	2800      	cmp	r0, #0
   21fb6:	d1f3      	bne.n	21fa0 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21fb8:	f114 0f14 	cmn.w	r4, #20
   21fbc:	d0d0      	beq.n	21f60 <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21fbe:	6964      	ldr	r4, [r4, #20]
   21fc0:	e7cb      	b.n	21f5a <settings_parse_and_lookup+0x42>
   21fc2:	bf00      	nop
   21fc4:	0003f57c 	.word	0x0003f57c
   21fc8:	00040b7d 	.word	0x00040b7d
   21fcc:	0004033e 	.word	0x0004033e
   21fd0:	00040966 	.word	0x00040966
   21fd4:	20016fc8 	.word	0x20016fc8
   21fd8:	0003f5a4 	.word	0x0003f5a4
   21fdc:	00040b4b 	.word	0x00040b4b

00021fe0 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   21fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21fe4:	b086      	sub	sp, #24
   21fe6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   21fe8:	4605      	mov	r5, r0
   21fea:	460c      	mov	r4, r1
   21fec:	4616      	mov	r6, r2
	int rc;
	const char *name_key = name;
   21fee:	9005      	str	r0, [sp, #20]

	if (load_arg && load_arg->subtree &&
   21ff0:	b1bf      	cbz	r7, 22022 <settings_call_set_handler+0x42>
   21ff2:	6839      	ldr	r1, [r7, #0]
   21ff4:	b181      	cbz	r1, 22018 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   21ff6:	aa05      	add	r2, sp, #20
   21ff8:	9303      	str	r3, [sp, #12]
   21ffa:	f018 f903 	bl	3a204 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   21ffe:	9b03      	ldr	r3, [sp, #12]
   22000:	b950      	cbnz	r0, 22018 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   22002:	2000      	movs	r0, #0
   22004:	e005      	b.n	22012 <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   22006:	68ba      	ldr	r2, [r7, #8]
   22008:	4621      	mov	r1, r4
   2200a:	9200      	str	r2, [sp, #0]
   2200c:	9805      	ldr	r0, [sp, #20]
   2200e:	4632      	mov	r2, r6
   22010:	47c0      	blx	r8
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   22012:	b006      	add	sp, #24
   22014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (load_arg && load_arg->cb) {
   22018:	f8d7 8004 	ldr.w	r8, [r7, #4]
   2201c:	f1b8 0f00 	cmp.w	r8, #0
   22020:	d1f1      	bne.n	22006 <settings_call_set_handler+0x26>
		ch = settings_parse_and_lookup(name, &name_key);
   22022:	4628      	mov	r0, r5
   22024:	a905      	add	r1, sp, #20
   22026:	9303      	str	r3, [sp, #12]
   22028:	f7ff ff76 	bl	21f18 <settings_parse_and_lookup>
		if (!ch) {
   2202c:	2800      	cmp	r0, #0
   2202e:	d0e8      	beq.n	22002 <settings_call_set_handler+0x22>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   22030:	4632      	mov	r2, r6
   22032:	6887      	ldr	r7, [r0, #8]
   22034:	4621      	mov	r1, r4
   22036:	9b03      	ldr	r3, [sp, #12]
   22038:	9805      	ldr	r0, [sp, #20]
   2203a:	47b8      	blx	r7
		if (rc != 0) {
   2203c:	4606      	mov	r6, r0
   2203e:	2800      	cmp	r0, #0
   22040:	d0df      	beq.n	22002 <settings_call_set_handler+0x22>
   22042:	4b08      	ldr	r3, [pc, #32]	; (22064 <settings_call_set_handler+0x84>)
   22044:	4c08      	ldr	r4, [pc, #32]	; (22068 <settings_call_set_handler+0x88>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   22046:	4628      	mov	r0, r5
   22048:	1ae4      	subs	r4, r4, r3
   2204a:	f017 fb53 	bl	396f4 <z_log_strdup>
   2204e:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("set-value failure. key: %s error(%d)",
   22050:	01a4      	lsls	r4, r4, #6
   22052:	f044 0401 	orr.w	r4, r4, #1
   22056:	4602      	mov	r2, r0
   22058:	4633      	mov	r3, r6
   2205a:	4620      	mov	r0, r4
   2205c:	4903      	ldr	r1, [pc, #12]	; (2206c <settings_call_set_handler+0x8c>)
   2205e:	f017 fb36 	bl	396ce <log_string_sync>
   22062:	e7ce      	b.n	22002 <settings_call_set_handler+0x22>
   22064:	0003f5a4 	.word	0x0003f5a4
   22068:	0003f6cc 	.word	0x0003f6cc
   2206c:	00040ba5 	.word	0x00040ba5

00022070 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   22070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22074:	4f23      	ldr	r7, [pc, #140]	; (22104 <settings_commit_subtree+0x94>)
{
   22076:	4606      	mov	r6, r0
	rc = 0;
   22078:	2500      	movs	r5, #0
   2207a:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2207c:	4c22      	ldr	r4, [pc, #136]	; (22108 <settings_commit_subtree+0x98>)
   2207e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2211c <settings_commit_subtree+0xac>
   22082:	42bc      	cmp	r4, r7
   22084:	d90c      	bls.n	220a0 <settings_commit_subtree+0x30>
   22086:	4921      	ldr	r1, [pc, #132]	; (2210c <settings_commit_subtree+0x9c>)
   22088:	23f4      	movs	r3, #244	; 0xf4
   2208a:	4642      	mov	r2, r8
   2208c:	4820      	ldr	r0, [pc, #128]	; (22110 <settings_commit_subtree+0xa0>)
   2208e:	f017 f850 	bl	39132 <printk>
   22092:	4820      	ldr	r0, [pc, #128]	; (22114 <settings_commit_subtree+0xa4>)
   22094:	f017 f84d 	bl	39132 <printk>
   22098:	21f4      	movs	r1, #244	; 0xf4
   2209a:	4640      	mov	r0, r8
   2209c:	f017 fae8 	bl	39670 <assert_post_action>
   220a0:	454c      	cmp	r4, r9
   220a2:	d307      	bcc.n	220b4 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   220a4:	4b1c      	ldr	r3, [pc, #112]	; (22118 <settings_commit_subtree+0xa8>)
   220a6:	681c      	ldr	r4, [r3, #0]
   220a8:	b10c      	cbz	r4, 220ae <settings_commit_subtree+0x3e>
   220aa:	3c14      	subs	r4, #20
   220ac:	b9a4      	cbnz	r4, 220d8 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   220ae:	4628      	mov	r0, r5
   220b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   220b4:	b91e      	cbnz	r6, 220be <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   220b6:	68e3      	ldr	r3, [r4, #12]
   220b8:	b94b      	cbnz	r3, 220ce <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   220ba:	3414      	adds	r4, #20
   220bc:	e7e1      	b.n	22082 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   220be:	2200      	movs	r2, #0
   220c0:	4631      	mov	r1, r6
   220c2:	6820      	ldr	r0, [r4, #0]
   220c4:	f018 f89e 	bl	3a204 <settings_name_steq>
   220c8:	2800      	cmp	r0, #0
   220ca:	d1f4      	bne.n	220b6 <settings_commit_subtree+0x46>
   220cc:	e7f5      	b.n	220ba <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   220ce:	4798      	blx	r3
				rc = rc2;
   220d0:	2d00      	cmp	r5, #0
   220d2:	bf08      	it	eq
   220d4:	4605      	moveq	r5, r0
   220d6:	e7f0      	b.n	220ba <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   220d8:	b936      	cbnz	r6, 220e8 <settings_commit_subtree+0x78>
		if (ch->h_commit) {
   220da:	68e3      	ldr	r3, [r4, #12]
   220dc:	b963      	cbnz	r3, 220f8 <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   220de:	f114 0f14 	cmn.w	r4, #20
   220e2:	d0e4      	beq.n	220ae <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   220e4:	6964      	ldr	r4, [r4, #20]
   220e6:	e7df      	b.n	220a8 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   220e8:	2200      	movs	r2, #0
   220ea:	4631      	mov	r1, r6
   220ec:	6820      	ldr	r0, [r4, #0]
   220ee:	f018 f889 	bl	3a204 <settings_name_steq>
   220f2:	2800      	cmp	r0, #0
   220f4:	d1f1      	bne.n	220da <settings_commit_subtree+0x6a>
   220f6:	e7f2      	b.n	220de <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   220f8:	4798      	blx	r3
				rc = rc2;
   220fa:	2d00      	cmp	r5, #0
   220fc:	bf08      	it	eq
   220fe:	4605      	moveq	r5, r0
   22100:	e7ed      	b.n	220de <settings_commit_subtree+0x6e>
   22102:	bf00      	nop
   22104:	0003f5a4 	.word	0x0003f5a4
   22108:	0003f57c 	.word	0x0003f57c
   2210c:	00040b7d 	.word	0x00040b7d
   22110:	0004033e 	.word	0x0004033e
   22114:	00040966 	.word	0x00040966
   22118:	20016fc8 	.word	0x20016fc8
   2211c:	00040b4b 	.word	0x00040b4b

00022120 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   22120:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   22122:	4c06      	ldr	r4, [pc, #24]	; (2213c <settings_subsys_init+0x1c>)
   22124:	7823      	ldrb	r3, [r4, #0]
   22126:	b93b      	cbnz	r3, 22138 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   22128:	f7ff feee 	bl	21f08 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   2212c:	f000 faa8 	bl	22680 <settings_backend_init>

	if (!err) {
   22130:	b908      	cbnz	r0, 22136 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   22132:	2301      	movs	r3, #1
   22134:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   22136:	bd10      	pop	{r4, pc}
		return 0;
   22138:	2000      	movs	r0, #0
   2213a:	e7fc      	b.n	22136 <settings_subsys_init+0x16>
   2213c:	2001ca55 	.word	0x2001ca55

00022140 <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   22140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22144:	b08b      	sub	sp, #44	; 0x2c
   22146:	9301      	str	r3, [sp, #4]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   22148:	4b2a      	ldr	r3, [pc, #168]	; (221f4 <settings_line_raw_read_until+0xb4>)
{
   2214a:	4606      	mov	r6, r0
   2214c:	4688      	mov	r8, r1
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   2214e:	4615      	mov	r5, r2
	uint8_t rbs = settings_io_cb.rwbs;
   22150:	f893 a00c 	ldrb.w	sl, [r3, #12]
	if (len_req == 0) {
   22154:	2a00      	cmp	r2, #0
   22156:	d046      	beq.n	221e6 <settings_line_raw_read_until+0xa6>
   22158:	4617      	mov	r7, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   2215a:	9302      	str	r3, [sp, #8]
		off = seek / rbs * rbs;
   2215c:	fb96 fbfa 	sdiv	fp, r6, sl
		read_size = sizeof(temp_buf);
   22160:	2310      	movs	r3, #16
		off = seek / rbs * rbs;
   22162:	fb0a fb0b 	mul.w	fp, sl, fp
		read_size = sizeof(temp_buf);
   22166:	9305      	str	r3, [sp, #20]
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   22168:	9b02      	ldr	r3, [sp, #8]
   2216a:	4659      	mov	r1, fp
   2216c:	681c      	ldr	r4, [r3, #0]
   2216e:	9815      	ldr	r0, [sp, #84]	; 0x54
   22170:	ab05      	add	r3, sp, #20
   22172:	aa06      	add	r2, sp, #24
   22174:	47a0      	blx	r4
		if (rc) {
   22176:	4604      	mov	r4, r0
   22178:	2800      	cmp	r0, #0
   2217a:	d137      	bne.n	221ec <settings_line_raw_read_until+0xac>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   2217c:	9a05      	ldr	r2, [sp, #20]
   2217e:	eba6 0b0b 	sub.w	fp, r6, fp
   22182:	eba2 020b 	sub.w	r2, r2, fp
		len = MIN(rem_size, len);
   22186:	42ba      	cmp	r2, r7
   22188:	bf28      	it	cs
   2218a:	463a      	movcs	r2, r7
   2218c:	ab06      	add	r3, sp, #24
   2218e:	449b      	add	fp, r3

		if (until_char != NULL) {
   22190:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   22192:	4691      	mov	r9, r2
		if (until_char != NULL) {
   22194:	b31b      	cbz	r3, 221de <settings_line_raw_read_until+0x9e>
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   22196:	4658      	mov	r0, fp
   22198:	7819      	ldrb	r1, [r3, #0]
   2219a:	f01b feca 	bl	3df32 <memchr>
			if (pend != NULL) {
   2219e:	b300      	cbz	r0, 221e2 <settings_line_raw_read_until+0xa2>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   221a0:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   221a2:	eba0 090b 	sub.w	r9, r0, fp
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   221a6:	4659      	mov	r1, fp
   221a8:	464a      	mov	r2, r9
   221aa:	4640      	mov	r0, r8
   221ac:	9303      	str	r3, [sp, #12]
   221ae:	f01b fedc 	bl	3df6a <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   221b2:	9905      	ldr	r1, [sp, #20]
   221b4:	9b03      	ldr	r3, [sp, #12]
   221b6:	290f      	cmp	r1, #15
		rem_size -= len;
   221b8:	eba7 0709 	sub.w	r7, r7, r9
		if (exp_size > read_size || rc) {
   221bc:	d904      	bls.n	221c8 <settings_line_raw_read_until+0x88>
   221be:	b91b      	cbnz	r3, 221c8 <settings_line_raw_read_until+0x88>
			break;
		}

		out += len;
   221c0:	44c8      	add	r8, r9
		seek += len;
   221c2:	444e      	add	r6, r9
	while (rem_size) {
   221c4:	2f00      	cmp	r7, #0
   221c6:	d1c9      	bne.n	2215c <settings_line_raw_read_until+0x1c>
	}

	*len_read = len_req - rem_size;
   221c8:	9a01      	ldr	r2, [sp, #4]
   221ca:	1bed      	subs	r5, r5, r7
   221cc:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   221ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
   221d0:	b10a      	cbz	r2, 221d6 <settings_line_raw_read_until+0x96>
		return (rc) ? 0 : 1;
   221d2:	f083 0401 	eor.w	r4, r3, #1
	}

	return 0;
}
   221d6:	4620      	mov	r0, r4
   221d8:	b00b      	add	sp, #44	; 0x2c
   221da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   221de:	9b14      	ldr	r3, [sp, #80]	; 0x50
   221e0:	e7e1      	b.n	221a6 <settings_line_raw_read_until+0x66>
   221e2:	4623      	mov	r3, r4
   221e4:	e7df      	b.n	221a6 <settings_line_raw_read_until+0x66>
		return -EINVAL;
   221e6:	f06f 0415 	mvn.w	r4, #21
   221ea:	e7f4      	b.n	221d6 <settings_line_raw_read_until+0x96>
			return -EIO;
   221ec:	f06f 0404 	mvn.w	r4, #4
   221f0:	e7f1      	b.n	221d6 <settings_line_raw_read_until+0x96>
   221f2:	bf00      	nop
   221f4:	20016fd0 	.word	0x20016fd0

000221f8 <settings_line_write>:
{
   221f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   221fc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 222bc <settings_line_write+0xc4>
{
   22200:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   22202:	f89a 800c 	ldrb.w	r8, [sl, #12]
{
   22206:	4681      	mov	r9, r0
   22208:	468b      	mov	fp, r1
   2220a:	4617      	mov	r7, r2
   2220c:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   2220e:	f7fb f825 	bl	1d25c <strlen>
	w_size = rem - rem % wbs;
   22212:	fbb0 f4f8 	udiv	r4, r0, r8
   22216:	fb08 0414 	mls	r4, r8, r4, r0
   2221a:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   2221c:	462b      	mov	r3, r5
   2221e:	f8da 6004 	ldr.w	r6, [sl, #4]
   22222:	464a      	mov	r2, r9
   22224:	9901      	ldr	r1, [sp, #4]
   22226:	9810      	ldr	r0, [sp, #64]	; 0x40
   22228:	47b0      	blx	r6
	w_loc += w_size;
   2222a:	9b01      	ldr	r3, [sp, #4]
   2222c:	442b      	add	r3, r5
   2222e:	461e      	mov	r6, r3
	if (rem) {
   22230:	b134      	cbz	r4, 22240 <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   22232:	2310      	movs	r3, #16
   22234:	4622      	mov	r2, r4
   22236:	eb09 0105 	add.w	r1, r9, r5
   2223a:	a802      	add	r0, sp, #8
   2223c:	f01b fea2 	bl	3df84 <__memcpy_chk>
	w_buf[rem] = '=';
   22240:	223d      	movs	r2, #61	; 0x3d
   22242:	ab06      	add	r3, sp, #24
   22244:	4423      	add	r3, r4
   22246:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   2224a:	f104 0901 	add.w	r9, r4, #1
		while (w_size < sizeof(w_buf)) {
   2224e:	f1b9 0f0f 	cmp.w	r9, #15
   22252:	d90b      	bls.n	2226c <settings_line_write+0x74>
   22254:	2400      	movs	r4, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   22256:	464b      	mov	r3, r9
   22258:	4631      	mov	r1, r6
   2225a:	f8da 5004 	ldr.w	r5, [sl, #4]
   2225e:	9810      	ldr	r0, [sp, #64]	; 0x40
   22260:	aa02      	add	r2, sp, #8
   22262:	47a8      	blx	r5
		if (rc) {
   22264:	bb20      	cbnz	r0, 222b0 <settings_line_write+0xb8>
		if (done) {
   22266:	bb2c      	cbnz	r4, 222b4 <settings_line_write+0xbc>
		w_loc += w_size;
   22268:	444e      	add	r6, r9
		w_size = 0;
   2226a:	46a1      	mov	r9, r4
			if (rem) {
   2226c:	b17f      	cbz	r7, 2228e <settings_line_write+0x96>
				add = MIN(rem, sizeof(w_buf) - w_size);
   2226e:	f1c9 0410 	rsb	r4, r9, #16
   22272:	42bc      	cmp	r4, r7
   22274:	bf28      	it	cs
   22276:	463c      	movcs	r4, r7
   22278:	ab02      	add	r3, sp, #8
   2227a:	4659      	mov	r1, fp
   2227c:	eb03 0009 	add.w	r0, r3, r9
   22280:	4622      	mov	r2, r4
   22282:	f01b fe72 	bl	3df6a <memcpy>
				value += add;
   22286:	44a3      	add	fp, r4
				rem -= add;
   22288:	1b3f      	subs	r7, r7, r4
				w_size += add;
   2228a:	44a1      	add	r9, r4
   2228c:	e7df      	b.n	2224e <settings_line_write+0x56>
				add = (w_size) % wbs;
   2228e:	fbb9 f4f8 	udiv	r4, r9, r8
   22292:	fb08 9414 	mls	r4, r8, r4, r9
				if (add) {
   22296:	b14c      	cbz	r4, 222ac <settings_line_write+0xb4>
					add = wbs - add;
   22298:	eba8 0404 	sub.w	r4, r8, r4
__ssp_bos_icheck3(memset, void *, int)
   2229c:	ab02      	add	r3, sp, #8
   2229e:	eb03 0009 	add.w	r0, r3, r9
   222a2:	4622      	mov	r2, r4
   222a4:	4639      	mov	r1, r7
   222a6:	f01b fe80 	bl	3dfaa <memset>
					w_size += add;
   222aa:	44a1      	add	r9, r4
				done = true;
   222ac:	2401      	movs	r4, #1
   222ae:	e7d2      	b.n	22256 <settings_line_write+0x5e>
			return -EIO;
   222b0:	f06f 0004 	mvn.w	r0, #4
}
   222b4:	b007      	add	sp, #28
   222b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222ba:	bf00      	nop
   222bc:	20016fd0 	.word	0x20016fd0

000222c0 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   222c0:	4b03      	ldr	r3, [pc, #12]	; (222d0 <settings_line_val_get_len+0x10>)
{
   222c2:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   222c4:	689b      	ldr	r3, [r3, #8]
{
   222c6:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   222c8:	4608      	mov	r0, r1
   222ca:	4798      	blx	r3

	return len - val_off;
}
   222cc:	1b00      	subs	r0, r0, r4
   222ce:	bd10      	pop	{r4, pc}
   222d0:	20016fd0 	.word	0x20016fd0

000222d4 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   222d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   222d8:	4680      	mov	r8, r0
   222da:	468a      	mov	sl, r1
   222dc:	4691      	mov	r9, r2
   222de:	461d      	mov	r5, r3
	int rc = -EINVAL;
   222e0:	f06f 0015 	mvn.w	r0, #21
{
   222e4:	b086      	sub	sp, #24
   222e6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   222e8:	4f13      	ldr	r7, [pc, #76]	; (22338 <settings_line_entry_copy+0x64>)
	while (len) {
   222ea:	b916      	cbnz	r6, 222f2 <settings_line_entry_copy+0x1e>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   222ec:	b006      	add	sp, #24
   222ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   222f2:	2e10      	cmp	r6, #16
   222f4:	4633      	mov	r3, r6
   222f6:	bf28      	it	cs
   222f8:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   222fa:	4629      	mov	r1, r5
		chunk_size = MIN(len, sizeof(buf));
   222fc:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   222fe:	4648      	mov	r0, r9
   22300:	683c      	ldr	r4, [r7, #0]
   22302:	ab01      	add	r3, sp, #4
   22304:	aa02      	add	r2, sp, #8
   22306:	47a0      	blx	r4
		if (rc) {
   22308:	2800      	cmp	r0, #0
   2230a:	d1ef      	bne.n	222ec <settings_line_entry_copy+0x18>
		size_t write_size = chunk_size;
   2230c:	9b01      	ldr	r3, [sp, #4]
		if (chunk_size % settings_io_cb.rwbs) {
   2230e:	7b39      	ldrb	r1, [r7, #12]
   22310:	fbb3 f2f1 	udiv	r2, r3, r1
   22314:	fb01 3212 	mls	r2, r1, r2, r3
   22318:	b10a      	cbz	r2, 2231e <settings_line_entry_copy+0x4a>
			write_size += settings_io_cb.rwbs -
   2231a:	440b      	add	r3, r1
   2231c:	1a9b      	subs	r3, r3, r2
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, write_size);
   2231e:	4651      	mov	r1, sl
   22320:	4640      	mov	r0, r8
   22322:	687c      	ldr	r4, [r7, #4]
   22324:	aa02      	add	r2, sp, #8
   22326:	47a0      	blx	r4
		if (rc) {
   22328:	2800      	cmp	r0, #0
   2232a:	d1df      	bne.n	222ec <settings_line_entry_copy+0x18>
		src_off += chunk_size;
   2232c:	9b01      	ldr	r3, [sp, #4]
   2232e:	441d      	add	r5, r3
		dst_off += chunk_size;
   22330:	449a      	add	sl, r3
		len -= chunk_size;
   22332:	1af6      	subs	r6, r6, r3
   22334:	e7d9      	b.n	222ea <settings_line_entry_copy+0x16>
   22336:	bf00      	nop
   22338:	20016fd0 	.word	0x20016fd0

0002233c <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   2233c:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   2233e:	4c03      	ldr	r4, [pc, #12]	; (2234c <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   22340:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   22344:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   22346:	7323      	strb	r3, [r4, #12]
}
   22348:	bd10      	pop	{r4, pc}
   2234a:	bf00      	nop
   2234c:	20016fd0 	.word	0x20016fd0

00022350 <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   22350:	b530      	push	{r4, r5, lr}
   22352:	4604      	mov	r4, r0
   22354:	b085      	sub	sp, #20
   22356:	4610      	mov	r0, r2
   22358:	461d      	mov	r5, r3
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
   2235a:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   2235e:	f7ff ffaf 	bl	222c0 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   22362:	4a04      	ldr	r2, [pc, #16]	; (22374 <settings_line_load_cb+0x24>)
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   22364:	4601      	mov	r1, r0
	return settings_call_set_handler(name, len, settings_line_read_cb,
   22366:	9500      	str	r5, [sp, #0]
   22368:	4620      	mov	r0, r4
   2236a:	ab02      	add	r3, sp, #8
   2236c:	f7ff fe38 	bl	21fe0 <settings_call_set_handler>
					 &value_ctx, arg);
}
   22370:	b005      	add	sp, #20
   22372:	bd30      	pop	{r4, r5, pc}
   22374:	0003a265 	.word	0x0003a265

00022378 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   22378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2237c:	4607      	mov	r7, r0
   2237e:	b0b3      	sub	sp, #204	; 0xcc
   22380:	4688      	mov	r8, r1
   22382:	4691      	mov	r9, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   22384:	2100      	movs	r1, #0
   22386:	2210      	movs	r2, #16
   22388:	a802      	add	r0, sp, #8
{
   2238a:	469a      	mov	sl, r3
	struct fcb_entry_ctx entry_ctx = {
   2238c:	f01b fe0d 	bl	3dfaa <memset>
   22390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   22392:	4c2c      	ldr	r4, [pc, #176]	; (22444 <settings_fcb_load_priv+0xcc>)
   22394:	9306      	str	r3, [sp, #24]
   22396:	4b2c      	ldr	r3, [pc, #176]	; (22448 <settings_fcb_load_priv+0xd0>)
   22398:	1ae4      	subs	r4, r4, r3
   2239a:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("failed to load line");
   2239c:	01a4      	lsls	r4, r4, #6
   2239e:	f044 0401 	orr.w	r4, r4, #1
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   223a2:	f107 0b08 	add.w	fp, r7, #8
   223a6:	4658      	mov	r0, fp
   223a8:	a902      	add	r1, sp, #8
   223aa:	f017 fc60 	bl	39c6e <fcb_getnext>
   223ae:	b118      	cbz	r0, 223b8 <settings_fcb_load_priv+0x40>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   223b0:	2000      	movs	r0, #0
   223b2:	b033      	add	sp, #204	; 0xcc
   223b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   223b8:	466a      	mov	r2, sp
   223ba:	214a      	movs	r1, #74	; 0x4a
   223bc:	ab02      	add	r3, sp, #8
   223be:	a80c      	add	r0, sp, #48	; 0x30
   223c0:	f017 ff5f 	bl	3a282 <settings_line_name_read>
		if (rc) {
   223c4:	b128      	cbz	r0, 223d2 <settings_fcb_load_priv+0x5a>
			LOG_ERR("Failed to load line name: %d", rc);
   223c6:	4602      	mov	r2, r0
   223c8:	4920      	ldr	r1, [pc, #128]	; (2244c <settings_fcb_load_priv+0xd4>)
   223ca:	4620      	mov	r0, r4
   223cc:	f017 f97f 	bl	396ce <log_string_sync>
			continue;
   223d0:	e7e7      	b.n	223a2 <settings_fcb_load_priv+0x2a>
		name[name_len] = '\0';
   223d2:	9b00      	ldr	r3, [sp, #0]
   223d4:	aa32      	add	r2, sp, #200	; 0xc8
   223d6:	441a      	add	r2, r3
   223d8:	f802 0c98 	strb.w	r0, [r2, #-152]
		if (filter_duplicates &&
   223dc:	f1ba 0f00 	cmp.w	sl, #0
   223e0:	d010      	beq.n	22404 <settings_fcb_load_priv+0x8c>
	if (off >= entry_ctx->loc.fe_data_len) {
   223e2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   223e6:	3301      	adds	r3, #1
   223e8:	429a      	cmp	r2, r3
   223ea:	ddda      	ble.n	223a2 <settings_fcb_load_priv+0x2a>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   223ec:	ad07      	add	r5, sp, #28
   223ee:	ae02      	add	r6, sp, #8
   223f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   223f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   223f4:	6833      	ldr	r3, [r6, #0]
   223f6:	602b      	str	r3, [r5, #0]
			LOG_ERR("failed to load line");
   223f8:	4d15      	ldr	r5, [pc, #84]	; (22450 <settings_fcb_load_priv+0xd8>)
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   223fa:	4658      	mov	r0, fp
   223fc:	a907      	add	r1, sp, #28
   223fe:	f017 fc36 	bl	39c6e <fcb_getnext>
   22402:	b130      	cbz	r0, 22412 <settings_fcb_load_priv+0x9a>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   22404:	9a00      	ldr	r2, [sp, #0]
   22406:	464b      	mov	r3, r9
   22408:	3201      	adds	r2, #1
   2240a:	a902      	add	r1, sp, #8
   2240c:	a80c      	add	r0, sp, #48	; 0x30
   2240e:	47c0      	blx	r8
   22410:	e7c7      	b.n	223a2 <settings_fcb_load_priv+0x2a>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   22412:	214a      	movs	r1, #74	; 0x4a
   22414:	ab07      	add	r3, sp, #28
   22416:	aa01      	add	r2, sp, #4
   22418:	a81f      	add	r0, sp, #124	; 0x7c
   2241a:	f017 ff32 	bl	3a282 <settings_line_name_read>
   2241e:	b120      	cbz	r0, 2242a <settings_fcb_load_priv+0xb2>
			LOG_ERR("failed to load line");
   22420:	4629      	mov	r1, r5
   22422:	4620      	mov	r0, r4
   22424:	f017 f953 	bl	396ce <log_string_sync>
			continue;
   22428:	e7e7      	b.n	223fa <settings_fcb_load_priv+0x82>
		name2[name2_len] = '\0';
   2242a:	9b01      	ldr	r3, [sp, #4]
   2242c:	aa32      	add	r2, sp, #200	; 0xc8
   2242e:	4413      	add	r3, r2
   22430:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   22434:	a91f      	add	r1, sp, #124	; 0x7c
   22436:	a80c      	add	r0, sp, #48	; 0x30
   22438:	f7fa ff06 	bl	1d248 <strcmp>
   2243c:	2800      	cmp	r0, #0
   2243e:	d1dc      	bne.n	223fa <settings_fcb_load_priv+0x82>
   22440:	e7af      	b.n	223a2 <settings_fcb_load_priv+0x2a>
   22442:	bf00      	nop
   22444:	0003f6cc 	.word	0x0003f6cc
   22448:	0003f5a4 	.word	0x0003f5a4
   2244c:	00040bd3 	.word	0x00040bd3
   22450:	00040bf0 	.word	0x00040bf0

00022454 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   22454:	460a      	mov	r2, r1
	return settings_fcb_load_priv(
   22456:	2301      	movs	r3, #1
   22458:	4901      	ldr	r1, [pc, #4]	; (22460 <settings_fcb_load+0xc>)
   2245a:	f7ff bf8d 	b.w	22378 <settings_fcb_load_priv>
   2245e:	bf00      	nop
   22460:	00022351 	.word	0x00022351

00022464 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   22464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22468:	4605      	mov	r5, r0
   2246a:	4688      	mov	r8, r1
   2246c:	4692      	mov	sl, r2
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   2246e:	4699      	mov	r9, r3
{
   22470:	b0c1      	sub	sp, #260	; 0x104
	if (val_len > 0 && value == NULL) {
   22472:	b103      	cbz	r3, 22476 <settings_fcb_save+0x12>
   22474:	b18a      	cbz	r2, 2249a <settings_fcb_save+0x36>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   22476:	2400      	movs	r4, #0
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   22478:	4628      	mov	r0, r5
   2247a:	4623      	mov	r3, r4
   2247c:	495f      	ldr	r1, [pc, #380]	; (225fc <settings_fcb_save+0x198>)
   2247e:	aa07      	add	r2, sp, #28
	cdca.val = (char *)value;
   22480:	e9cd 8a07 	strd	r8, sl, [sp, #28]
	cdca.val_len = val_len;
   22484:	e9cd 9409 	strd	r9, r4, [sp, #36]	; 0x24
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   22488:	f7ff ff76 	bl	22378 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   2248c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2248e:	2b01      	cmp	r3, #1
   22490:	f000 80b0 	beq.w	225f4 <settings_fcb_save+0x190>
	if (!name) {
   22494:	f1b8 0f00 	cmp.w	r8, #0
   22498:	d102      	bne.n	224a0 <settings_fcb_save+0x3c>
		return -EINVAL;
   2249a:	f06f 0415 	mvn.w	r4, #21
   2249e:	e0a9      	b.n	225f4 <settings_fcb_save+0x190>
	len = settings_line_len_calc(name, val_len);
   224a0:	4649      	mov	r1, r9
   224a2:	4640      	mov	r0, r8
   224a4:	f017 fece 	bl	3a244 <settings_line_len_calc>
   224a8:	4e55      	ldr	r6, [pc, #340]	; (22600 <settings_fcb_save+0x19c>)
   224aa:	4b56      	ldr	r3, [pc, #344]	; (22604 <settings_fcb_save+0x1a0>)
   224ac:	9003      	str	r0, [sp, #12]
   224ae:	1af6      	subs	r6, r6, r3
   224b0:	08f6      	lsrs	r6, r6, #3
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   224b2:	01b6      	lsls	r6, r6, #6
   224b4:	f046 0601 	orr.w	r6, r6, #1
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   224b8:	7b6b      	ldrb	r3, [r5, #13]
   224ba:	429c      	cmp	r4, r3
   224bc:	daed      	bge.n	2249a <settings_fcb_save+0x36>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   224be:	f105 0708 	add.w	r7, r5, #8
   224c2:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   224c6:	465a      	mov	r2, fp
   224c8:	4638      	mov	r0, r7
   224ca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   224ce:	f7ff f85d 	bl	2158c <fcb_append>
		if (rc != -ENOSPC) {
   224d2:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   224d6:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   224d8:	d176      	bne.n	225c8 <settings_fcb_save+0x164>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   224da:	7b6b      	ldrb	r3, [r5, #13]
   224dc:	3b01      	subs	r3, #1
   224de:	42a3      	cmp	r3, r4
   224e0:	dd1b      	ble.n	2251a <settings_fcb_save+0xb6>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   224e2:	4638      	mov	r0, r7
   224e4:	f017 f92d 	bl	39742 <fcb_append_to_scratch>
	if (rc) {
   224e8:	4683      	mov	fp, r0
   224ea:	b9b0      	cbnz	r0, 2251a <settings_fcb_save+0xb6>
	rbs = flash_area_align(cf->cf_fcb.fap);
   224ec:	6c28      	ldr	r0, [r5, #64]	; 0x40
   224ee:	f017 fe2b 	bl	3a148 <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   224f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   224f4:	e9cd bb10 	strd	fp, fp, [sp, #64]	; 0x40
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   224f8:	f8df b110 	ldr.w	fp, [pc, #272]	; 2260c <settings_fcb_save+0x1a8>
	loc1.fap = cf->cf_fcb.fap;
   224fc:	9314      	str	r3, [sp, #80]	; 0x50
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   224fe:	4638      	mov	r0, r7
   22500:	a910      	add	r1, sp, #64	; 0x40
   22502:	f017 fbb4 	bl	39c6e <fcb_getnext>
   22506:	b150      	cbz	r0, 2251e <settings_fcb_save+0xba>
	rc = fcb_rotate(&cf->cf_fcb);
   22508:	4638      	mov	r0, r7
   2250a:	f017 fbcb 	bl	39ca4 <fcb_rotate>
	if (rc != 0) {
   2250e:	4602      	mov	r2, r0
   22510:	b118      	cbz	r0, 2251a <settings_fcb_save+0xb6>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   22512:	4630      	mov	r0, r6
   22514:	493c      	ldr	r1, [pc, #240]	; (22608 <settings_fcb_save+0x1a4>)
   22516:	f017 f8da 	bl	396ce <log_string_sync>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   2251a:	3401      	adds	r4, #1
   2251c:	e7cc      	b.n	224b8 <settings_fcb_save+0x54>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   2251e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22520:	9a10      	ldr	r2, [sp, #64]	; 0x40
   22522:	429a      	cmp	r2, r3
   22524:	d1f0      	bne.n	22508 <settings_fcb_save+0xa4>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   22526:	2149      	movs	r1, #73	; 0x49
   22528:	ab10      	add	r3, sp, #64	; 0x40
   2252a:	aa05      	add	r2, sp, #20
   2252c:	a81a      	add	r0, sp, #104	; 0x68
   2252e:	f017 fea8 	bl	3a282 <settings_line_name_read>
		if (rc) {
   22532:	2800      	cmp	r0, #0
   22534:	d1e3      	bne.n	224fe <settings_fcb_save+0x9a>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   22536:	9b05      	ldr	r3, [sp, #20]
   22538:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   2253c:	3301      	adds	r3, #1
   2253e:	4293      	cmp	r3, r2
   22540:	d0dd      	beq.n	224fe <settings_fcb_save+0x9a>
		loc2 = loc1;
   22542:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
   22546:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
   2254a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2254e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22552:	f8de 3000 	ldr.w	r3, [lr]
   22556:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   2255a:	4638      	mov	r0, r7
   2255c:	a915      	add	r1, sp, #84	; 0x54
   2255e:	f017 fb86 	bl	39c6e <fcb_getnext>
   22562:	b1f0      	cbz	r0, 225a2 <settings_fcb_save+0x13e>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   22564:	4638      	mov	r0, r7
   22566:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
   2256a:	aa15      	add	r2, sp, #84	; 0x54
   2256c:	f7ff f80e 	bl	2158c <fcb_append>
		if (rc) {
   22570:	2800      	cmp	r0, #0
   22572:	d1c4      	bne.n	224fe <settings_fcb_save+0x9a>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   22574:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
   22578:	4601      	mov	r1, r0
   2257a:	9300      	str	r3, [sp, #0]
   2257c:	aa10      	add	r2, sp, #64	; 0x40
   2257e:	4603      	mov	r3, r0
   22580:	a815      	add	r0, sp, #84	; 0x54
   22582:	f7ff fea7 	bl	222d4 <settings_line_entry_copy>
		if (rc) {
   22586:	2800      	cmp	r0, #0
   22588:	d1b9      	bne.n	224fe <settings_fcb_save+0x9a>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   2258a:	4638      	mov	r0, r7
   2258c:	a915      	add	r1, sp, #84	; 0x54
   2258e:	f017 f8f4 	bl	3977a <fcb_append_finish>
		if (rc != 0) {
   22592:	4602      	mov	r2, r0
   22594:	2800      	cmp	r0, #0
   22596:	d0b2      	beq.n	224fe <settings_fcb_save+0x9a>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   22598:	4659      	mov	r1, fp
   2259a:	4630      	mov	r0, r6
   2259c:	f017 f897 	bl	396ce <log_string_sync>
   225a0:	e7ad      	b.n	224fe <settings_fcb_save+0x9a>
			rc = settings_line_name_read(name2, sizeof(name2),
   225a2:	2149      	movs	r1, #73	; 0x49
   225a4:	ab15      	add	r3, sp, #84	; 0x54
   225a6:	aa06      	add	r2, sp, #24
   225a8:	a82d      	add	r0, sp, #180	; 0xb4
   225aa:	f017 fe6a 	bl	3a282 <settings_line_name_read>
			if (rc) {
   225ae:	2800      	cmp	r0, #0
   225b0:	d1d3      	bne.n	2255a <settings_fcb_save+0xf6>
			if ((val1_off == val2_off) &&
   225b2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   225b6:	429a      	cmp	r2, r3
   225b8:	d1cf      	bne.n	2255a <settings_fcb_save+0xf6>
			    !memcmp(name1, name2, val1_off)) {
   225ba:	a92d      	add	r1, sp, #180	; 0xb4
   225bc:	a81a      	add	r0, sp, #104	; 0x68
   225be:	f01b fcc6 	bl	3df4e <memcmp>
			if ((val1_off == val2_off) &&
   225c2:	2800      	cmp	r0, #0
   225c4:	d1c9      	bne.n	2255a <settings_fcb_save+0xf6>
   225c6:	e79a      	b.n	224fe <settings_fcb_save+0x9a>
	if (rc) {
   225c8:	2800      	cmp	r0, #0
   225ca:	f47f af66 	bne.w	2249a <settings_fcb_save+0x36>
	loc.fap = cf->cf_fcb.fap;
   225ce:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   225d0:	4651      	mov	r1, sl
	loc.fap = cf->cf_fcb.fap;
   225d2:	920f      	str	r2, [sp, #60]	; 0x3c
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   225d4:	4640      	mov	r0, r8
   225d6:	464a      	mov	r2, r9
   225d8:	f8cd b000 	str.w	fp, [sp]
   225dc:	f7ff fe0c 	bl	221f8 <settings_line_write>
	if (rc != -EIO) {
   225e0:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   225e2:	4604      	mov	r4, r0
	if (rc != -EIO) {
   225e4:	d006      	beq.n	225f4 <settings_fcb_save+0x190>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   225e6:	4659      	mov	r1, fp
   225e8:	4638      	mov	r0, r7
   225ea:	f017 f8c6 	bl	3977a <fcb_append_finish>
			rc = i;
   225ee:	2c00      	cmp	r4, #0
   225f0:	bf08      	it	eq
   225f2:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   225f4:	4620      	mov	r0, r4
   225f6:	b041      	add	sp, #260	; 0x104
   225f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225fc:	0003a2a3 	.word	0x0003a2a3
   22600:	0003f6cc 	.word	0x0003f6cc
   22604:	0003f5a4 	.word	0x0003f5a4
   22608:	00040c25 	.word	0x00040c25
   2260c:	00040c04 	.word	0x00040c04

00022610 <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   22610:	2301      	movs	r3, #1
{
   22612:	b570      	push	{r4, r5, r6, lr}
   22614:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   22616:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   22618:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(FLASH_AREA_ID(storage), &cf->cf_fcb);
   2261a:	f100 0608 	add.w	r6, r0, #8
   2261e:	4631      	mov	r1, r6
   22620:	2008      	movs	r0, #8
   22622:	f017 f9af 	bl	39984 <fcb_init>
		if (rc) {
   22626:	4605      	mov	r5, r0
   22628:	b9b0      	cbnz	r0, 22658 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   2262a:	4630      	mov	r0, r6
   2262c:	f017 f910 	bl	39850 <fcb_free_sector_cnt>
   22630:	2800      	cmp	r0, #0
   22632:	dc0a      	bgt.n	2264a <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   22634:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   22636:	6c20      	ldr	r0, [r4, #64]	; 0x40
   22638:	e9d3 1200 	ldrd	r1, r2, [r3]
   2263c:	f017 fd54 	bl	3a0e8 <flash_area_erase>
			if (rc) {
   22640:	2800      	cmp	r0, #0
   22642:	d0ec      	beq.n	2261e <settings_fcb_src+0xe>
				return -EIO;
   22644:	f06f 0504 	mvn.w	r5, #4
   22648:	e004      	b.n	22654 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2264a:	4b05      	ldr	r3, [pc, #20]	; (22660 <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   2264c:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2264e:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   22650:	f7ff fc14 	bl	21e7c <settings_src_register>
}
   22654:	4628      	mov	r0, r5
   22656:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   22658:	f06f 0515 	mvn.w	r5, #21
   2265c:	e7fa      	b.n	22654 <settings_fcb_src+0x44>
   2265e:	bf00      	nop
   22660:	0003f974 	.word	0x0003f974

00022664 <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   22664:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   22668:	4a02      	ldr	r2, [pc, #8]	; (22674 <settings_mount_fcb_backend+0x10>)
   2266a:	4903      	ldr	r1, [pc, #12]	; (22678 <settings_mount_fcb_backend+0x14>)
   2266c:	4803      	ldr	r0, [pc, #12]	; (2267c <settings_mount_fcb_backend+0x18>)
   2266e:	f7ff be65 	b.w	2233c <settings_line_io_init>
   22672:	bf00      	nop
   22674:	0003a321 	.word	0x0003a321
   22678:	0003a325 	.word	0x0003a325
   2267c:	0003a339 	.word	0x0003a339

00022680 <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   22680:	2309      	movs	r3, #9
{
   22682:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   22684:	2008      	movs	r0, #8
   22686:	4669      	mov	r1, sp
   22688:	4a21      	ldr	r2, [pc, #132]	; (22710 <settings_backend_init+0x90>)
	uint32_t cnt = sizeof(settings_fcb_area) /
   2268a:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   2268c:	f7ff fa38 	bl	21b00 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   22690:	f110 0f13 	cmn.w	r0, #19
   22694:	d03a      	beq.n	2270c <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   22696:	b138      	cbz	r0, 226a8 <settings_backend_init+0x28>
   22698:	300c      	adds	r0, #12
   2269a:	d005      	beq.n	226a8 <settings_backend_init+0x28>
		k_panic();
   2269c:	4040      	eors	r0, r0
   2269e:	f380 8811 	msr	BASEPRI, r0
   226a2:	f04f 0004 	mov.w	r0, #4
   226a6:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   226a8:	4d1a      	ldr	r5, [pc, #104]	; (22714 <settings_backend_init+0x94>)
   226aa:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   226ac:	4628      	mov	r0, r5
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   226ae:	736b      	strb	r3, [r5, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   226b0:	f7ff ffae 	bl	22610 <settings_fcb_src>

	if (rc != 0) {
   226b4:	b308      	cbz	r0, 226fa <settings_backend_init+0x7a>
		rc = flash_area_open(FLASH_AREA_ID(storage), &fap);
   226b6:	a901      	add	r1, sp, #4
   226b8:	2008      	movs	r0, #8
   226ba:	f7ff fa0d 	bl	21ad8 <flash_area_open>

		if (rc == 0) {
   226be:	4601      	mov	r1, r0
   226c0:	b160      	cbz	r0, 226dc <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   226c2:	4040      	eors	r0, r0
   226c4:	f380 8811 	msr	BASEPRI, r0
   226c8:	f04f 0004 	mov.w	r0, #4
   226cc:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   226ce:	4040      	eors	r0, r0
   226d0:	f380 8811 	msr	BASEPRI, r0
   226d4:	f04f 0004 	mov.w	r0, #4
   226d8:	df02      	svc	2
   226da:	e00e      	b.n	226fa <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   226dc:	9801      	ldr	r0, [sp, #4]
   226de:	6882      	ldr	r2, [r0, #8]
   226e0:	f017 fd02 	bl	3a0e8 <flash_area_erase>
   226e4:	4604      	mov	r4, r0
			flash_area_close(fap);
   226e6:	9801      	ldr	r0, [sp, #4]
   226e8:	f017 fcae 	bl	3a048 <flash_area_close>
		if (rc != 0) {
   226ec:	2c00      	cmp	r4, #0
   226ee:	d1e8      	bne.n	226c2 <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   226f0:	4628      	mov	r0, r5
   226f2:	f7ff ff8d 	bl	22610 <settings_fcb_src>
	if (rc != 0) {
   226f6:	2800      	cmp	r0, #0
   226f8:	d1e9      	bne.n	226ce <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   226fa:	4b07      	ldr	r3, [pc, #28]	; (22718 <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   226fc:	4805      	ldr	r0, [pc, #20]	; (22714 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   226fe:	606b      	str	r3, [r5, #4]
	settings_dst_register(&cf->cf_store);
   22700:	f7ff fbca 	bl	21e98 <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   22704:	4803      	ldr	r0, [pc, #12]	; (22714 <settings_backend_init+0x94>)
   22706:	f7ff ffad 	bl	22664 <settings_mount_fcb_backend>

	return rc;
   2270a:	2000      	movs	r0, #0
}
   2270c:	b003      	add	sp, #12
   2270e:	bd30      	pop	{r4, r5, pc}
   22710:	20016fe0 	.word	0x20016fe0
   22714:	200145cc 	.word	0x200145cc
   22718:	0003f974 	.word	0x0003f974

0002271c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   2271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2271e:	4605      	mov	r5, r0
	__asm__ volatile(
   22720:	f04f 0320 	mov.w	r3, #32
   22724:	f3ef 8611 	mrs	r6, BASEPRI
   22728:	f383 8811 	msr	BASEPRI, r3
   2272c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22730:	481e      	ldr	r0, [pc, #120]	; (227ac <pm_state_notify+0x90>)
   22732:	f011 facd 	bl	33cd0 <z_spin_lock_valid>
   22736:	b968      	cbnz	r0, 22754 <pm_state_notify+0x38>
   22738:	2381      	movs	r3, #129	; 0x81
   2273a:	4a1d      	ldr	r2, [pc, #116]	; (227b0 <pm_state_notify+0x94>)
   2273c:	491d      	ldr	r1, [pc, #116]	; (227b4 <pm_state_notify+0x98>)
   2273e:	481e      	ldr	r0, [pc, #120]	; (227b8 <pm_state_notify+0x9c>)
   22740:	f016 fcf7 	bl	39132 <printk>
   22744:	4919      	ldr	r1, [pc, #100]	; (227ac <pm_state_notify+0x90>)
   22746:	481d      	ldr	r0, [pc, #116]	; (227bc <pm_state_notify+0xa0>)
   22748:	f016 fcf3 	bl	39132 <printk>
   2274c:	2181      	movs	r1, #129	; 0x81
   2274e:	4818      	ldr	r0, [pc, #96]	; (227b0 <pm_state_notify+0x94>)
   22750:	f016 ff8e 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   22754:	4815      	ldr	r0, [pc, #84]	; (227ac <pm_state_notify+0x90>)
   22756:	f011 fad9 	bl	33d0c <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2275a:	4b19      	ldr	r3, [pc, #100]	; (227c0 <pm_state_notify+0xa4>)
   2275c:	681c      	ldr	r4, [r3, #0]
   2275e:	2c00      	cmp	r4, #0
   22760:	bf38      	it	cc
   22762:	2400      	movcc	r4, #0
   22764:	b15c      	cbz	r4, 2277e <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   22766:	4f17      	ldr	r7, [pc, #92]	; (227c4 <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
   22768:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   2276c:	2d00      	cmp	r5, #0
   2276e:	bf08      	it	eq
   22770:	4613      	moveq	r3, r2
		if (callback) {
   22772:	b10b      	cbz	r3, 22778 <pm_state_notify+0x5c>
			callback(z_power_state.state);
   22774:	7838      	ldrb	r0, [r7, #0]
   22776:	4798      	blx	r3
   22778:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2277a:	2c00      	cmp	r4, #0
   2277c:	d1f4      	bne.n	22768 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2277e:	480b      	ldr	r0, [pc, #44]	; (227ac <pm_state_notify+0x90>)
   22780:	f011 fab4 	bl	33cec <z_spin_unlock_valid>
   22784:	b968      	cbnz	r0, 227a2 <pm_state_notify+0x86>
   22786:	23ac      	movs	r3, #172	; 0xac
   22788:	4a09      	ldr	r2, [pc, #36]	; (227b0 <pm_state_notify+0x94>)
   2278a:	490f      	ldr	r1, [pc, #60]	; (227c8 <pm_state_notify+0xac>)
   2278c:	480a      	ldr	r0, [pc, #40]	; (227b8 <pm_state_notify+0x9c>)
   2278e:	f016 fcd0 	bl	39132 <printk>
   22792:	4906      	ldr	r1, [pc, #24]	; (227ac <pm_state_notify+0x90>)
   22794:	480d      	ldr	r0, [pc, #52]	; (227cc <pm_state_notify+0xb0>)
   22796:	f016 fccc 	bl	39132 <printk>
   2279a:	21ac      	movs	r1, #172	; 0xac
   2279c:	4804      	ldr	r0, [pc, #16]	; (227b0 <pm_state_notify+0x94>)
   2279e:	f016 ff67 	bl	39670 <assert_post_action>
	__asm__ volatile(
   227a2:	f386 8811 	msr	BASEPRI, r6
   227a6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   227aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   227ac:	20017028 	.word	0x20017028
   227b0:	00040472 	.word	0x00040472
   227b4:	000404c4 	.word	0x000404c4
   227b8:	0004033e 	.word	0x0004033e
   227bc:	000404d9 	.word	0x000404d9
   227c0:	2001702c 	.word	0x2001702c
   227c4:	20017034 	.word	0x20017034
   227c8:	00040498 	.word	0x00040498
   227cc:	000404af 	.word	0x000404af

000227d0 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   227d0:	4b08      	ldr	r3, [pc, #32]	; (227f4 <pm_system_resume+0x24>)
{
   227d2:	b510      	push	{r4, lr}
	if (!post_ops_done) {
   227d4:	681c      	ldr	r4, [r3, #0]
   227d6:	b95c      	cbnz	r4, 227f0 <pm_system_resume+0x20>
		post_ops_done = 1;
   227d8:	2201      	movs	r2, #1
   227da:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   227dc:	4b06      	ldr	r3, [pc, #24]	; (227f8 <pm_system_resume+0x28>)
   227de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   227e2:	f016 ff62 	bl	396aa <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   227e6:	4620      	mov	r0, r4
	}
}
   227e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
   227ec:	f7ff bf96 	b.w	2271c <pm_state_notify>
}
   227f0:	bd10      	pop	{r4, pc}
   227f2:	bf00      	nop
   227f4:	20014614 	.word	0x20014614
   227f8:	20017034 	.word	0x20017034

000227fc <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   227fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   227fe:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
   22800:	466e      	mov	r6, sp
   22802:	4c1f      	ldr	r4, [pc, #124]	; (22880 <pm_system_suspend+0x84>)
   22804:	4601      	mov	r1, r0
{
   22806:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   22808:	4630      	mov	r0, r6
   2280a:	f017 fdad 	bl	3a368 <pm_policy_next_state>
   2280e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   22812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   22816:	7820      	ldrb	r0, [r4, #0]
   22818:	b380      	cbz	r0, 2287c <pm_system_suspend+0x80>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
   2281a:	2000      	movs	r0, #0
   2281c:	4b19      	ldr	r3, [pc, #100]	; (22884 <pm_system_suspend+0x88>)
   2281e:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   22820:	1c6b      	adds	r3, r5, #1
   22822:	d01d      	beq.n	22860 <pm_system_suspend+0x64>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   22824:	4291      	cmp	r1, r2
   22826:	d20c      	bcs.n	22842 <pm_system_suspend+0x46>
   22828:	4917      	ldr	r1, [pc, #92]	; (22888 <pm_system_suspend+0x8c>)
   2282a:	23bd      	movs	r3, #189	; 0xbd
   2282c:	4a17      	ldr	r2, [pc, #92]	; (2288c <pm_system_suspend+0x90>)
   2282e:	4818      	ldr	r0, [pc, #96]	; (22890 <pm_system_suspend+0x94>)
   22830:	f016 fc7f 	bl	39132 <printk>
   22834:	4817      	ldr	r0, [pc, #92]	; (22894 <pm_system_suspend+0x98>)
   22836:	f016 fc7c 	bl	39132 <printk>
   2283a:	21bd      	movs	r1, #189	; 0xbd
   2283c:	4813      	ldr	r0, [pc, #76]	; (2288c <pm_system_suspend+0x90>)
   2283e:	f016 ff17 	bl	39670 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   22842:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22846:	2100      	movs	r1, #0
   22848:	68a7      	ldr	r7, [r4, #8]
   2284a:	4813      	ldr	r0, [pc, #76]	; (22898 <pm_system_suspend+0x9c>)
   2284c:	2300      	movs	r3, #0
   2284e:	fbe6 0107 	umlal	r0, r1, r6, r7
   22852:	4a12      	ldr	r2, [pc, #72]	; (2289c <pm_system_suspend+0xa0>)
   22854:	f7fa fb28 	bl	1cea8 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   22858:	2101      	movs	r1, #1
   2285a:	1a28      	subs	r0, r5, r0
   2285c:	f013 fd7c 	bl	36358 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   22860:	f012 fa70 	bl	34d44 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   22864:	2001      	movs	r0, #1
   22866:	f7ff ff59 	bl	2271c <pm_state_notify>
	pm_power_state_set(z_power_state);
   2286a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   2286e:	f016 ff09 	bl	39684 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   22872:	f7ff ffad 	bl	227d0 <pm_system_resume>
	k_sched_unlock();
   22876:	f012 fcf9 	bl	3526c <k_sched_unlock>

	return z_power_state.state;
   2287a:	7820      	ldrb	r0, [r4, #0]
}
   2287c:	b005      	add	sp, #20
   2287e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22880:	20017034 	.word	0x20017034
   22884:	20014614 	.word	0x20014614
   22888:	00040cb5 	.word	0x00040cb5
   2288c:	00040c3f 	.word	0x00040c3f
   22890:	0004033e 	.word	0x0004033e
   22894:	00040cf5 	.word	0x00040cf5
   22898:	000f423f 	.word	0x000f423f
   2289c:	000f4240 	.word	0x000f4240

000228a0 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   228a0:	4b0a      	ldr	r3, [pc, #40]	; (228cc <console_out+0x2c>)
{
   228a2:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   228a4:	b2c6      	uxtb	r6, r0
{
   228a6:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   228a8:	681b      	ldr	r3, [r3, #0]
   228aa:	4630      	mov	r0, r6
   228ac:	4798      	blx	r3

	if (handled_by_debug_server) {
   228ae:	2801      	cmp	r0, #1
   228b0:	d00a      	beq.n	228c8 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   228b2:	2c0a      	cmp	r4, #10
   228b4:	4d06      	ldr	r5, [pc, #24]	; (228d0 <console_out+0x30>)
   228b6:	d103      	bne.n	228c0 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
   228b8:	210d      	movs	r1, #13
   228ba:	6828      	ldr	r0, [r5, #0]
   228bc:	f017 fd59 	bl	3a372 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   228c0:	4631      	mov	r1, r6
   228c2:	6828      	ldr	r0, [r5, #0]
   228c4:	f017 fd55 	bl	3a372 <uart_poll_out>

	return c;
}
   228c8:	4620      	mov	r0, r4
   228ca:	bd70      	pop	{r4, r5, r6, pc}
   228cc:	20014618 	.word	0x20014618
   228d0:	20017040 	.word	0x20017040

000228d4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   228d4:	b508      	push	{r3, lr}
   228d6:	4806      	ldr	r0, [pc, #24]	; (228f0 <uart_console_init+0x1c>)
   228d8:	f010 fde4 	bl	334a4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   228dc:	4b05      	ldr	r3, [pc, #20]	; (228f4 <uart_console_init+0x20>)
   228de:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   228e0:	4805      	ldr	r0, [pc, #20]	; (228f8 <uart_console_init+0x24>)
   228e2:	f001 fb27 	bl	23f34 <__stdout_hook_install>
	__printk_hook_install(console_out);
   228e6:	4804      	ldr	r0, [pc, #16]	; (228f8 <uart_console_init+0x24>)
   228e8:	f7fc ff5a 	bl	1f7a0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   228ec:	2000      	movs	r0, #0
   228ee:	bd08      	pop	{r3, pc}
   228f0:	00040810 	.word	0x00040810
   228f4:	20017040 	.word	0x20017040
   228f8:	000228a1 	.word	0x000228a1

000228fc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   228fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   22900:	4c0e      	ldr	r4, [pc, #56]	; (2293c <onoff_start+0x40>)
{
   22902:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   22904:	1b05      	subs	r5, r0, r4
   22906:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   2290a:	250c      	movs	r5, #12
   2290c:	435d      	muls	r5, r3
   2290e:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   22912:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   22914:	4420      	add	r0, r4
   22916:	2140      	movs	r1, #64	; 0x40
   22918:	f017 fd30 	bl	3a37c <set_starting_state>
	if (err < 0) {
   2291c:	1e01      	subs	r1, r0, #0
   2291e:	db08      	blt.n	22932 <onoff_start+0x36>
	subdata->cb = cb;
   22920:	4b07      	ldr	r3, [pc, #28]	; (22940 <onoff_start+0x44>)
   22922:	442c      	add	r4, r5
	subdata->user_data = user_data;
   22924:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   22928:	4b06      	ldr	r3, [pc, #24]	; (22944 <onoff_start+0x48>)
   2292a:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   2292c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   22930:	4718      	bx	r3
		notify(mgr, err);
   22932:	4638      	mov	r0, r7
   22934:	4633      	mov	r3, r6
}
   22936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   2293a:	4718      	bx	r3
   2293c:	20017058 	.word	0x20017058
   22940:	0003a3df 	.word	0x0003a3df
   22944:	0003f998 	.word	0x0003f998

00022948 <get_status>:
{
   22948:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2294a:	b2cc      	uxtb	r4, r1
   2294c:	2c01      	cmp	r4, #1
{
   2294e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   22950:	d909      	bls.n	22966 <get_status+0x1e>
   22952:	4909      	ldr	r1, [pc, #36]	; (22978 <get_status+0x30>)
   22954:	4809      	ldr	r0, [pc, #36]	; (2297c <get_status+0x34>)
   22956:	237e      	movs	r3, #126	; 0x7e
   22958:	4a09      	ldr	r2, [pc, #36]	; (22980 <get_status+0x38>)
   2295a:	f016 fbea 	bl	39132 <printk>
   2295e:	217e      	movs	r1, #126	; 0x7e
   22960:	4807      	ldr	r0, [pc, #28]	; (22980 <get_status+0x38>)
   22962:	f016 fe85 	bl	39670 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   22966:	210c      	movs	r1, #12
   22968:	692b      	ldr	r3, [r5, #16]
   2296a:	fb04 3401 	mla	r4, r4, r1, r3
   2296e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   22970:	f000 0007 	and.w	r0, r0, #7
   22974:	bd38      	pop	{r3, r4, r5, pc}
   22976:	bf00      	nop
   22978:	00040d5d 	.word	0x00040d5d
   2297c:	0004033e 	.word	0x0004033e
   22980:	00040d20 	.word	0x00040d20

00022984 <stop>:
{
   22984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22986:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   22988:	2c01      	cmp	r4, #1
{
   2298a:	4605      	mov	r5, r0
   2298c:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2298e:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   22990:	d90b      	bls.n	229aa <stop+0x26>
   22992:	4919      	ldr	r1, [pc, #100]	; (229f8 <stop+0x74>)
   22994:	4819      	ldr	r0, [pc, #100]	; (229fc <stop+0x78>)
   22996:	f240 1353 	movw	r3, #339	; 0x153
   2299a:	4a19      	ldr	r2, [pc, #100]	; (22a00 <stop+0x7c>)
   2299c:	f016 fbc9 	bl	39132 <printk>
   229a0:	f240 1153 	movw	r1, #339	; 0x153
   229a4:	4816      	ldr	r0, [pc, #88]	; (22a00 <stop+0x7c>)
   229a6:	f016 fe63 	bl	39670 <assert_post_action>
	__asm__ volatile(
   229aa:	f04f 0320 	mov.w	r3, #32
   229ae:	f3ef 8211 	mrs	r2, BASEPRI
   229b2:	f383 8811 	msr	BASEPRI, r3
   229b6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   229ba:	230c      	movs	r3, #12
   229bc:	fb03 7104 	mla	r1, r3, r4, r7
   229c0:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   229c2:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   229c6:	d001      	beq.n	229cc <stop+0x48>
   229c8:	428e      	cmp	r6, r1
   229ca:	d111      	bne.n	229f0 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   229cc:	2101      	movs	r1, #1
	int err = 0;
   229ce:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   229d0:	fb03 7304 	mla	r3, r3, r4, r7
   229d4:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   229d6:	f382 8811 	msr	BASEPRI, r2
   229da:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   229de:	b930      	cbnz	r0, 229ee <stop+0x6a>
	get_sub_config(dev, type)->stop();
   229e0:	230c      	movs	r3, #12
   229e2:	6869      	ldr	r1, [r5, #4]
   229e4:	fb03 1404 	mla	r4, r3, r4, r1
   229e8:	6863      	ldr	r3, [r4, #4]
   229ea:	4798      	blx	r3
	return 0;
   229ec:	2000      	movs	r0, #0
}
   229ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   229f0:	f04f 30ff 	mov.w	r0, #4294967295
   229f4:	e7ef      	b.n	229d6 <stop+0x52>
   229f6:	bf00      	nop
   229f8:	00040d5d 	.word	0x00040d5d
   229fc:	0004033e 	.word	0x0004033e
   22a00:	00040d20 	.word	0x00040d20

00022a04 <onoff_stop>:
{
   22a04:	b570      	push	{r4, r5, r6, lr}
   22a06:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   22a08:	4906      	ldr	r1, [pc, #24]	; (22a24 <onoff_stop+0x20>)
{
   22a0a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   22a0c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   22a0e:	1149      	asrs	r1, r1, #5
   22a10:	2240      	movs	r2, #64	; 0x40
   22a12:	4805      	ldr	r0, [pc, #20]	; (22a28 <onoff_stop+0x24>)
   22a14:	f7ff ffb6 	bl	22984 <stop>
	notify(mgr, res);
   22a18:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   22a1a:	4601      	mov	r1, r0
	notify(mgr, res);
   22a1c:	4620      	mov	r0, r4
}
   22a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   22a22:	4718      	bx	r3
   22a24:	20017058 	.word	0x20017058
   22a28:	20014a74 	.word	0x20014a74

00022a2c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   22a2c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   22a2e:	2200      	movs	r2, #0
   22a30:	2101      	movs	r1, #1
{
   22a32:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   22a34:	2005      	movs	r0, #5
   22a36:	f000 fbe7 	bl	23208 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   22a3a:	2005      	movs	r0, #5
   22a3c:	f000 fbc6 	bl	231cc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   22a40:	480f      	ldr	r0, [pc, #60]	; (22a80 <clk_init+0x54>)
   22a42:	f00b f9f9 	bl	2de38 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   22a46:	4b0f      	ldr	r3, [pc, #60]	; (22a84 <clk_init+0x58>)
   22a48:	4298      	cmp	r0, r3
   22a4a:	d115      	bne.n	22a78 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   22a4c:	f00b fa18 	bl	2de80 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   22a50:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   22a52:	490d      	ldr	r1, [pc, #52]	; (22a88 <clk_init+0x5c>)
   22a54:	4630      	mov	r0, r6
   22a56:	f016 fbba 	bl	391ce <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   22a5a:	2800      	cmp	r0, #0
   22a5c:	db0b      	blt.n	22a76 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   22a5e:	2501      	movs	r5, #1
   22a60:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   22a62:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   22a64:	4908      	ldr	r1, [pc, #32]	; (22a88 <clk_init+0x5c>)
   22a66:	f104 0020 	add.w	r0, r4, #32
   22a6a:	f016 fbb0 	bl	391ce <onoff_manager_init>
		if (err < 0) {
   22a6e:	2800      	cmp	r0, #0
   22a70:	db01      	blt.n	22a76 <clk_init+0x4a>
	}

	return 0;
   22a72:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   22a74:	6565      	str	r5, [r4, #84]	; 0x54
}
   22a76:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   22a78:	f06f 0004 	mvn.w	r0, #4
   22a7c:	e7fb      	b.n	22a76 <clk_init+0x4a>
   22a7e:	bf00      	nop
   22a80:	00022ac9 	.word	0x00022ac9
   22a84:	0bad0000 	.word	0x0bad0000
   22a88:	0003f9b0 	.word	0x0003f9b0

00022a8c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   22a8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   22a8e:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   22a90:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   22a92:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   22a94:	434b      	muls	r3, r1
   22a96:	480a      	ldr	r0, [pc, #40]	; (22ac0 <clkstarted_handle.constprop.0+0x34>)
   22a98:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   22a9a:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   22a9c:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   22aa0:	4418      	add	r0, r3
	sub_data->cb = NULL;
   22aa2:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   22aa4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   22aa6:	f017 fc87 	bl	3a3b8 <set_on_state>
	if (callback) {
   22aaa:	b135      	cbz	r5, 22aba <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   22aac:	462b      	mov	r3, r5
   22aae:	9a01      	ldr	r2, [sp, #4]
   22ab0:	4804      	ldr	r0, [pc, #16]	; (22ac4 <clkstarted_handle.constprop.0+0x38>)
}
   22ab2:	b002      	add	sp, #8
   22ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   22ab8:	4718      	bx	r3
}
   22aba:	b002      	add	sp, #8
   22abc:	bd70      	pop	{r4, r5, r6, pc}
   22abe:	bf00      	nop
   22ac0:	20017058 	.word	0x20017058
   22ac4:	20014a74 	.word	0x20014a74

00022ac8 <clock_event_handler>:
	switch (event) {
   22ac8:	2801      	cmp	r0, #1
{
   22aca:	b508      	push	{r3, lr}
	switch (event) {
   22acc:	d006      	beq.n	22adc <clock_event_handler+0x14>
   22ace:	2803      	cmp	r0, #3
   22ad0:	d008      	beq.n	22ae4 <clock_event_handler+0x1c>
   22ad2:	b9a8      	cbnz	r0, 22b00 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   22ad4:	4b10      	ldr	r3, [pc, #64]	; (22b18 <clock_event_handler+0x50>)
   22ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   22ad8:	075b      	lsls	r3, r3, #29
   22ada:	d11b      	bne.n	22b14 <clock_event_handler+0x4c>
}
   22adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   22ae0:	f7ff bfd4 	b.w	22a8c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   22ae4:	490d      	ldr	r1, [pc, #52]	; (22b1c <clock_event_handler+0x54>)
   22ae6:	f240 2366 	movw	r3, #614	; 0x266
   22aea:	4a0d      	ldr	r2, [pc, #52]	; (22b20 <clock_event_handler+0x58>)
   22aec:	480d      	ldr	r0, [pc, #52]	; (22b24 <clock_event_handler+0x5c>)
   22aee:	f016 fb20 	bl	39132 <printk>
   22af2:	f240 2166 	movw	r1, #614	; 0x266
}
   22af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   22afa:	4809      	ldr	r0, [pc, #36]	; (22b20 <clock_event_handler+0x58>)
   22afc:	f016 bdb8 	b.w	39670 <assert_post_action>
   22b00:	4906      	ldr	r1, [pc, #24]	; (22b1c <clock_event_handler+0x54>)
   22b02:	f240 236a 	movw	r3, #618	; 0x26a
   22b06:	4a06      	ldr	r2, [pc, #24]	; (22b20 <clock_event_handler+0x58>)
   22b08:	4806      	ldr	r0, [pc, #24]	; (22b24 <clock_event_handler+0x5c>)
   22b0a:	f016 fb12 	bl	39132 <printk>
   22b0e:	f240 216a 	movw	r1, #618	; 0x26a
   22b12:	e7f0      	b.n	22af6 <clock_event_handler+0x2e>
}
   22b14:	bd08      	pop	{r3, pc}
   22b16:	bf00      	nop
   22b18:	20017058 	.word	0x20017058
   22b1c:	000451fc 	.word	0x000451fc
   22b20:	00040d20 	.word	0x00040d20
   22b24:	0004033e 	.word	0x0004033e

00022b28 <generic_hfclk_start>:
{
   22b28:	b508      	push	{r3, lr}
	__asm__ volatile(
   22b2a:	f04f 0320 	mov.w	r3, #32
   22b2e:	f3ef 8111 	mrs	r1, BASEPRI
   22b32:	f383 8811 	msr	BASEPRI, r3
   22b36:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   22b3a:	4a11      	ldr	r2, [pc, #68]	; (22b80 <generic_hfclk_start+0x58>)
   22b3c:	6813      	ldr	r3, [r2, #0]
   22b3e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   22b42:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   22b46:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   22b48:	d00b      	beq.n	22b62 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   22b4a:	4a0e      	ldr	r2, [pc, #56]	; (22b84 <generic_hfclk_start+0x5c>)
   22b4c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   22b50:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   22b54:	f013 0301 	ands.w	r3, r3, #1
   22b58:	d003      	beq.n	22b62 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   22b5a:	480b      	ldr	r0, [pc, #44]	; (22b88 <generic_hfclk_start+0x60>)
   22b5c:	f017 fc2c 	bl	3a3b8 <set_on_state>
			already_started = true;
   22b60:	2301      	movs	r3, #1
	__asm__ volatile(
   22b62:	f381 8811 	msr	BASEPRI, r1
   22b66:	f3bf 8f6f 	isb	sy
	if (already_started) {
   22b6a:	b123      	cbz	r3, 22b76 <generic_hfclk_start+0x4e>
}
   22b6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   22b70:	2000      	movs	r0, #0
   22b72:	f7ff bf8b 	b.w	22a8c <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   22b76:	2001      	movs	r0, #1
}
   22b78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22b7c:	f00b b9a0 	b.w	2dec0 <nrfx_clock_start>
   22b80:	200170b0 	.word	0x200170b0
   22b84:	40005000 	.word	0x40005000
   22b88:	200170a0 	.word	0x200170a0

00022b8c <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22b8c:	4b07      	ldr	r3, [pc, #28]	; (22bac <generic_hfclk_stop+0x20>)
   22b8e:	e8d3 2fef 	ldaex	r2, [r3]
   22b92:	f022 0102 	bic.w	r1, r2, #2
   22b96:	e8c3 1fe0 	stlex	r0, r1, [r3]
   22b9a:	2800      	cmp	r0, #0
   22b9c:	d1f7      	bne.n	22b8e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   22b9e:	07d3      	lsls	r3, r2, #31
   22ba0:	d402      	bmi.n	22ba8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   22ba2:	2001      	movs	r0, #1
   22ba4:	f00b b9e2 	b.w	2df6c <nrfx_clock_stop>
}
   22ba8:	4770      	bx	lr
   22baa:	bf00      	nop
   22bac:	200170b0 	.word	0x200170b0

00022bb0 <api_blocking_start>:
{
   22bb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   22bb2:	2200      	movs	r2, #0
   22bb4:	2301      	movs	r3, #1
   22bb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   22bba:	ab04      	add	r3, sp, #16
   22bbc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   22bc0:	4a09      	ldr	r2, [pc, #36]	; (22be8 <api_blocking_start+0x38>)
   22bc2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   22bc4:	f8cd d000 	str.w	sp, [sp]
   22bc8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   22bcc:	f017 fc19 	bl	3a402 <api_start>
	if (err < 0) {
   22bd0:	2800      	cmp	r0, #0
   22bd2:	db05      	blt.n	22be0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   22bd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   22bd8:	2300      	movs	r3, #0
   22bda:	4668      	mov	r0, sp
   22bdc:	f011 fc10 	bl	34400 <z_impl_k_sem_take>
}
   22be0:	b007      	add	sp, #28
   22be2:	f85d fb04 	ldr.w	pc, [sp], #4
   22be6:	bf00      	nop
   22be8:	0003a3fd 	.word	0x0003a3fd

00022bec <z_nrf_clock_control_lf_on>:
{
   22bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22bf0:	2201      	movs	r2, #1
   22bf2:	4606      	mov	r6, r0
   22bf4:	4945      	ldr	r1, [pc, #276]	; (22d0c <z_nrf_clock_control_lf_on+0x120>)
   22bf6:	e8d1 3fef 	ldaex	r3, [r1]
   22bfa:	e8c1 2fe0 	stlex	r0, r2, [r1]
   22bfe:	2800      	cmp	r0, #0
   22c00:	d1f9      	bne.n	22bf6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   22c02:	b9a3      	cbnz	r3, 22c2e <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   22c04:	4942      	ldr	r1, [pc, #264]	; (22d10 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   22c06:	4843      	ldr	r0, [pc, #268]	; (22d14 <z_nrf_clock_control_lf_on+0x128>)
   22c08:	604b      	str	r3, [r1, #4]
   22c0a:	60cb      	str	r3, [r1, #12]
   22c0c:	608a      	str	r2, [r1, #8]
   22c0e:	f7fd f813 	bl	1fc38 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   22c12:	2800      	cmp	r0, #0
   22c14:	da0b      	bge.n	22c2e <z_nrf_clock_control_lf_on+0x42>
   22c16:	4940      	ldr	r1, [pc, #256]	; (22d18 <z_nrf_clock_control_lf_on+0x12c>)
   22c18:	4840      	ldr	r0, [pc, #256]	; (22d1c <z_nrf_clock_control_lf_on+0x130>)
   22c1a:	f240 2326 	movw	r3, #550	; 0x226
   22c1e:	4a40      	ldr	r2, [pc, #256]	; (22d20 <z_nrf_clock_control_lf_on+0x134>)
   22c20:	f016 fa87 	bl	39132 <printk>
   22c24:	f240 2126 	movw	r1, #550	; 0x226
   22c28:	483d      	ldr	r0, [pc, #244]	; (22d20 <z_nrf_clock_control_lf_on+0x134>)
   22c2a:	f016 fd21 	bl	39670 <assert_post_action>
	switch (start_mode) {
   22c2e:	b38e      	cbz	r6, 22c94 <z_nrf_clock_control_lf_on+0xa8>
   22c30:	1e73      	subs	r3, r6, #1
   22c32:	2b01      	cmp	r3, #1
   22c34:	d855      	bhi.n	22ce2 <z_nrf_clock_control_lf_on+0xf6>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   22c36:	2e01      	cmp	r6, #1
   22c38:	d106      	bne.n	22c48 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   22c3a:	4b3a      	ldr	r3, [pc, #232]	; (22d24 <z_nrf_clock_control_lf_on+0x138>)
   22c3c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   22c40:	f003 0303 	and.w	r3, r3, #3
   22c44:	2b02      	cmp	r3, #2
   22c46:	d025      	beq.n	22c94 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   22c48:	f01b f86b 	bl	3dd22 <k_is_in_isr>
   22c4c:	4604      	mov	r4, r0
   22c4e:	b918      	cbnz	r0, 22c58 <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
   22c50:	4b35      	ldr	r3, [pc, #212]	; (22d28 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   22c52:	781b      	ldrb	r3, [r3, #0]
   22c54:	2b00      	cmp	r3, #0
   22c56:	d152      	bne.n	22cfe <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   22c58:	f04f 0320 	mov.w	r3, #32
   22c5c:	f3ef 8711 	mrs	r7, BASEPRI
   22c60:	f383 8811 	msr	BASEPRI, r3
   22c64:	f3bf 8f6f 	isb	sy
   22c68:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   22c6a:	4d2e      	ldr	r5, [pc, #184]	; (22d24 <z_nrf_clock_control_lf_on+0x138>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22c6c:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 22d38 <z_nrf_clock_control_lf_on+0x14c>
   22c70:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   22c72:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   22c76:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   22c7a:	03d2      	lsls	r2, r2, #15
   22c7c:	d50c      	bpl.n	22c98 <z_nrf_clock_control_lf_on+0xac>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   22c7e:	f003 0303 	and.w	r3, r3, #3
   22c82:	2b02      	cmp	r3, #2
   22c84:	d001      	beq.n	22c8a <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   22c86:	2e01      	cmp	r6, #1
   22c88:	d106      	bne.n	22c98 <z_nrf_clock_control_lf_on+0xac>
	if (isr_mode) {
   22c8a:	b334      	cbz	r4, 22cda <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
   22c8c:	f387 8811 	msr	BASEPRI, r7
   22c90:	f3bf 8f6f 	isb	sy
}
   22c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   22c98:	b1d4      	cbz	r4, 22cd0 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   22c9a:	4638      	mov	r0, r7
   22c9c:	f000 fb48 	bl	23330 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   22ca0:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   22ca4:	b2db      	uxtb	r3, r3
   22ca6:	2b01      	cmp	r3, #1
   22ca8:	d1e3      	bne.n	22c72 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22caa:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   22cae:	2a00      	cmp	r2, #0
   22cb0:	d0df      	beq.n	22c72 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22cb2:	2200      	movs	r2, #0
   22cb4:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   22cb8:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   22cbc:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22cbe:	2120      	movs	r1, #32
   22cc0:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   22cc4:	4a19      	ldr	r2, [pc, #100]	; (22d2c <z_nrf_clock_control_lf_on+0x140>)
   22cc6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22cca:	4a19      	ldr	r2, [pc, #100]	; (22d30 <z_nrf_clock_control_lf_on+0x144>)
   22ccc:	6013      	str	r3, [r2, #0]
}
   22cce:	e7d0      	b.n	22c72 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   22cd0:	2100      	movs	r1, #0
   22cd2:	2021      	movs	r0, #33	; 0x21
   22cd4:	f013 f800 	bl	35cd8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   22cd8:	e7e2      	b.n	22ca0 <z_nrf_clock_control_lf_on+0xb4>
    p_reg->INTENSET = mask;
   22cda:	2302      	movs	r3, #2
   22cdc:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   22ce0:	e7d8      	b.n	22c94 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   22ce2:	f44f 730e 	mov.w	r3, #568	; 0x238
   22ce6:	4913      	ldr	r1, [pc, #76]	; (22d34 <z_nrf_clock_control_lf_on+0x148>)
   22ce8:	480c      	ldr	r0, [pc, #48]	; (22d1c <z_nrf_clock_control_lf_on+0x130>)
   22cea:	4a0d      	ldr	r2, [pc, #52]	; (22d20 <z_nrf_clock_control_lf_on+0x134>)
   22cec:	f016 fa21 	bl	39132 <printk>
}
   22cf0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   22cf4:	f44f 710e 	mov.w	r1, #568	; 0x238
   22cf8:	4809      	ldr	r0, [pc, #36]	; (22d20 <z_nrf_clock_control_lf_on+0x134>)
   22cfa:	f016 bcb9 	b.w	39670 <assert_post_action>
    p_reg->INTENCLR = mask;
   22cfe:	2202      	movs	r2, #2
   22d00:	4b08      	ldr	r3, [pc, #32]	; (22d24 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   22d02:	4607      	mov	r7, r0
   22d04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   22d08:	e7af      	b.n	22c6a <z_nrf_clock_control_lf_on+0x7e>
   22d0a:	bf00      	nop
   22d0c:	200170b4 	.word	0x200170b4
   22d10:	20017048 	.word	0x20017048
   22d14:	20017078 	.word	0x20017078
   22d18:	00040d81 	.word	0x00040d81
   22d1c:	0004033e 	.word	0x0004033e
   22d20:	00040d20 	.word	0x00040d20
   22d24:	40005000 	.word	0x40005000
   22d28:	2001d8e7 	.word	0x2001d8e7
   22d2c:	e000e100 	.word	0xe000e100
   22d30:	40005008 	.word	0x40005008
   22d34:	000451fc 	.word	0x000451fc
   22d38:	40005104 	.word	0x40005104

00022d3c <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(const struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   22d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   22d3e:	7b0b      	ldrb	r3, [r1, #12]
{
   22d40:	4604      	mov	r4, r0
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   22d42:	2b02      	cmp	r3, #2
{
   22d44:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   22d46:	d128      	bne.n	22d9a <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   22d48:	680b      	ldr	r3, [r1, #0]
   22d4a:	bb1b      	cbnz	r3, 22d94 <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   22d4c:	6902      	ldr	r2, [r0, #16]
	return dev->data;
   22d4e:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   22d50:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   22d54:	b9d9      	cbnz	r1, 22d8e <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   22d56:	4914      	ldr	r1, [pc, #80]	; (22da8 <wdt_nrf_install_timeout+0x6c>)
   22d58:	1e58      	subs	r0, r3, #1
   22d5a:	4288      	cmp	r0, r1
   22d5c:	d81a      	bhi.n	22d94 <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   22d5e:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   22d60:	6860      	ldr	r0, [r4, #4]
   22d62:	f10d 0107 	add.w	r1, sp, #7
   22d66:	f00c fc67 	bl	2f638 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   22d6a:	4b10      	ldr	r3, [pc, #64]	; (22dac <wdt_nrf_install_timeout+0x70>)
   22d6c:	4298      	cmp	r0, r3
   22d6e:	d017      	beq.n	22da0 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   22d70:	68ab      	ldr	r3, [r5, #8]
   22d72:	f89d 0007 	ldrb.w	r0, [sp, #7]
   22d76:	b113      	cbz	r3, 22d7e <wdt_nrf_install_timeout+0x42>
   22d78:	6922      	ldr	r2, [r4, #16]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   22d7a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   22d7e:	6922      	ldr	r2, [r4, #16]
   22d80:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   22d84:	3301      	adds	r3, #1
   22d86:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   22d8a:	b003      	add	sp, #12
   22d8c:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   22d8e:	6a12      	ldr	r2, [r2, #32]
   22d90:	429a      	cmp	r2, r3
   22d92:	d0e5      	beq.n	22d60 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   22d94:	f06f 0015 	mvn.w	r0, #21
   22d98:	e7f7      	b.n	22d8a <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   22d9a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22d9e:	e7f4      	b.n	22d8a <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   22da0:	f06f 000b 	mvn.w	r0, #11
   22da4:	e7f1      	b.n	22d8a <wdt_nrf_install_timeout+0x4e>
   22da6:	bf00      	nop
   22da8:	07cffffe 	.word	0x07cffffe
   22dac:	0bad0002 	.word	0x0bad0002

00022db0 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   22db0:	b510      	push	{r4, lr}
   22db2:	4604      	mov	r4, r0
   22db4:	2200      	movs	r2, #0
   22db6:	2101      	movs	r1, #1
   22db8:	2018      	movs	r0, #24
   22dba:	f000 fa25 	bl	23208 <z_arm_irq_priority_set>
   22dbe:	6860      	ldr	r0, [r4, #4]
   22dc0:	4a05      	ldr	r2, [pc, #20]	; (22dd8 <wdt_0_init+0x28>)
   22dc2:	f100 0108 	add.w	r1, r0, #8
   22dc6:	f00c fbab 	bl	2f520 <nrfx_wdt_init>
   22dca:	4b04      	ldr	r3, [pc, #16]	; (22ddc <wdt_0_init+0x2c>)
   22dcc:	4298      	cmp	r0, r3
   22dce:	bf14      	ite	ne
   22dd0:	f06f 000f 	mvnne.w	r0, #15
   22dd4:	2000      	moveq	r0, #0
   22dd6:	bd10      	pop	{r4, pc}
   22dd8:	00022de1 	.word	0x00022de1
   22ddc:	0bad0000 	.word	0x0bad0000

00022de0 <wdt_0_event_handler>:
   22de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   22de2:	2400      	movs	r4, #0
   22de4:	4d0a      	ldr	r5, [pc, #40]	; (22e10 <wdt_0_event_handler+0x30>)
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   22de6:	4e0b      	ldr	r6, [pc, #44]	; (22e14 <wdt_0_event_handler+0x34>)
				get_dev_data(dev)->m_callbacks[i](dev, i);
   22de8:	4f0b      	ldr	r7, [pc, #44]	; (22e18 <wdt_0_event_handler+0x38>)
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   22dea:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   22dee:	429c      	cmp	r4, r3
   22df0:	db00      	blt.n	22df4 <wdt_0_event_handler+0x14>
WDT_NRFX_WDT_DEVICE(0);
   22df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22df4:	f8d6 3404 	ldr.w	r3, [r6, #1028]	; 0x404
   22df8:	40e3      	lsrs	r3, r4
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   22dfa:	07db      	lsls	r3, r3, #31
   22dfc:	d505      	bpl.n	22e0a <wdt_0_event_handler+0x2a>
			if (get_dev_data(dev)->m_callbacks[i]) {
   22dfe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   22e02:	b113      	cbz	r3, 22e0a <wdt_0_event_handler+0x2a>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   22e04:	4621      	mov	r1, r4
   22e06:	4638      	mov	r0, r7
   22e08:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   22e0a:	3401      	adds	r4, #1
   22e0c:	e7ed      	b.n	22dea <wdt_0_event_handler+0xa>
   22e0e:	bf00      	nop
   22e10:	200170bc 	.word	0x200170bc
   22e14:	40018000 	.word	0x40018000
   22e18:	20014a8c 	.word	0x20014a8c

00022e1c <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   22e1c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   22e1e:	4c06      	ldr	r4, [pc, #24]	; (22e38 <sys_clock_isr+0x1c>)
   22e20:	4906      	ldr	r1, [pc, #24]	; (22e3c <sys_clock_isr+0x20>)
   22e22:	4622      	mov	r2, r4
   22e24:	4806      	ldr	r0, [pc, #24]	; (22e40 <sys_clock_isr+0x24>)
   22e26:	2317      	movs	r3, #23
   22e28:	f016 f983 	bl	39132 <printk>
   22e2c:	4620      	mov	r0, r4
}
   22e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   22e32:	2117      	movs	r1, #23
   22e34:	f016 bc1c 	b.w	39670 <assert_post_action>
   22e38:	00040db7 	.word	0x00040db7
   22e3c:	000451fc 	.word	0x000451fc
   22e40:	0004033e 	.word	0x0004033e

00022e44 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   22e44:	4a04      	ldr	r2, [pc, #16]	; (22e58 <sys_clock_timeout_handler+0x14>)
   22e46:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   22e48:	1ac9      	subs	r1, r1, r3
   22e4a:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   22e4e:	4403      	add	r3, r0
   22e50:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   22e52:	f013 bad1 	b.w	363f8 <sys_clock_announce>
   22e56:	bf00      	nop
   22e58:	200170f4 	.word	0x200170f4

00022e5c <set_absolute_alarm>:
{
   22e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22e60:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22e64:	f04f 0900 	mov.w	r9, #0
   22e68:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   22e6a:	f100 0450 	add.w	r4, r0, #80	; 0x50
   22e6e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   22e72:	00a4      	lsls	r4, r4, #2
   22e74:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
   22e78:	b2a4      	uxth	r4, r4
   22e7a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   22e7e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   22e82:	f8df 806c 	ldr.w	r8, [pc, #108]	; 22ef0 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   22e86:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22e8a:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22e8e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   22e90:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   22e94:	eba3 030a 	sub.w	r3, r3, sl
   22e98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22e9c:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   22ea0:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   22ea2:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   22ea6:	d102      	bne.n	22eae <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   22ea8:	2013      	movs	r0, #19
   22eaa:	f01a ffab 	bl	3de04 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   22eae:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   22eb2:	1aab      	subs	r3, r5, r2
   22eb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   22eb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   22ebc:	bf88      	it	hi
   22ebe:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22ec0:	f8c4 9000 	str.w	r9, [r4]
   22ec4:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22ec6:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   22eca:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   22ece:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   22ed2:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   22ed6:	459a      	cmp	sl, r3
   22ed8:	d006      	beq.n	22ee8 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   22eda:	1aeb      	subs	r3, r5, r3
   22edc:	3b02      	subs	r3, #2
   22ede:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   22ee2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   22ee6:	d801      	bhi.n	22eec <set_absolute_alarm+0x90>
}
   22ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   22eec:	462b      	mov	r3, r5
   22eee:	e7cf      	b.n	22e90 <set_absolute_alarm+0x34>
   22ef0:	40015000 	.word	0x40015000

00022ef4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   22ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22ef6:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22ef8:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22efa:	4e0f      	ldr	r6, [pc, #60]	; (22f38 <rtc_nrf_isr+0x44>)
   22efc:	4b0f      	ldr	r3, [pc, #60]	; (22f3c <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
   22efe:	4a10      	ldr	r2, [pc, #64]	; (22f40 <rtc_nrf_isr+0x4c>)
   22f00:	4618      	mov	r0, r3
   22f02:	681d      	ldr	r5, [r3, #0]
   22f04:	b104      	cbz	r4, 22f08 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   22f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22f08:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   22f0c:	03c9      	lsls	r1, r1, #15
   22f0e:	d5fa      	bpl.n	22f06 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22f10:	6831      	ldr	r1, [r6, #0]
   22f12:	2900      	cmp	r1, #0
   22f14:	d0f7      	beq.n	22f06 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22f16:	6034      	str	r4, [r6, #0]
   22f18:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   22f1a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   22f1e:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22f22:	2401      	movs	r4, #1
    return p_reg->CC[ch];
   22f24:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
   22f28:	b125      	cbz	r5, 22f34 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
   22f2a:	2000      	movs	r0, #0
   22f2c:	685a      	ldr	r2, [r3, #4]
   22f2e:	601f      	str	r7, [r3, #0]
   22f30:	47a8      	blx	r5
   22f32:	e7e3      	b.n	22efc <rtc_nrf_isr+0x8>
   22f34:	6005      	str	r5, [r0, #0]
}
   22f36:	e7e6      	b.n	22f06 <rtc_nrf_isr+0x12>
   22f38:	40015140 	.word	0x40015140
   22f3c:	200170e8 	.word	0x200170e8
   22f40:	40015000 	.word	0x40015000

00022f44 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   22f44:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   22f46:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   22f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22f4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   22f50:	4d0d      	ldr	r5, [pc, #52]	; (22f88 <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   22f52:	2101      	movs	r1, #1
   22f54:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   22f58:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   22f5c:	4b0b      	ldr	r3, [pc, #44]	; (22f8c <sys_clock_driver_init+0x48>)
   22f5e:	2015      	movs	r0, #21
   22f60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22f64:	4622      	mov	r2, r4
   22f66:	f000 f94f 	bl	23208 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   22f6a:	2015      	movs	r0, #21
   22f6c:	f000 f92e 	bl	231cc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   22f70:	2301      	movs	r3, #1
   22f72:	4a07      	ldr	r2, [pc, #28]	; (22f90 <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   22f74:	2002      	movs	r0, #2
   22f76:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   22f78:	4a06      	ldr	r2, [pc, #24]	; (22f94 <sys_clock_driver_init+0x50>)
   22f7a:	602b      	str	r3, [r5, #0]
   22f7c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   22f7e:	f7ff fe35 	bl	22bec <z_nrf_clock_control_lf_on>

	return 0;
}
   22f82:	4620      	mov	r0, r4
   22f84:	bd38      	pop	{r3, r4, r5, pc}
   22f86:	bf00      	nop
   22f88:	40015000 	.word	0x40015000
   22f8c:	e000e100 	.word	0xe000e100
   22f90:	40015008 	.word	0x40015008
   22f94:	200170f0 	.word	0x200170f0

00022f98 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22f98:	4b13      	ldr	r3, [pc, #76]	; (22fe8 <sys_clock_set_timeout+0x50>)
   22f9a:	f1b0 3fff 	cmp.w	r0, #4294967295
   22f9e:	bf08      	it	eq
   22fa0:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22fa2:	3801      	subs	r0, #1
   22fa4:	2800      	cmp	r0, #0
   22fa6:	dd1c      	ble.n	22fe2 <sys_clock_set_timeout+0x4a>
   22fa8:	4298      	cmp	r0, r3
   22faa:	bfa8      	it	ge
   22fac:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   22fae:	4b0f      	ldr	r3, [pc, #60]	; (22fec <sys_clock_set_timeout+0x54>)
   22fb0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   22fb4:	4b0e      	ldr	r3, [pc, #56]	; (22ff0 <sys_clock_set_timeout+0x58>)
   22fb6:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   22fb8:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   22fba:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   22fbe:	bf18      	it	ne
   22fc0:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   22fc2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   22fc6:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
   22fc8:	4a0a      	ldr	r2, [pc, #40]	; (22ff4 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   22fca:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   22fcc:	480a      	ldr	r0, [pc, #40]	; (22ff8 <sys_clock_set_timeout+0x60>)
   22fce:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   22fd0:	2000      	movs	r0, #0
   22fd2:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   22fd4:	4a04      	ldr	r2, [pc, #16]	; (22fe8 <sys_clock_set_timeout+0x50>)
   22fd6:	4293      	cmp	r3, r2
   22fd8:	bf94      	ite	ls
   22fda:	18c9      	addls	r1, r1, r3
   22fdc:	1889      	addhi	r1, r1, r2
   22fde:	f7ff bf3d 	b.w	22e5c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22fe2:	2000      	movs	r0, #0
   22fe4:	e7e3      	b.n	22fae <sys_clock_set_timeout+0x16>
   22fe6:	bf00      	nop
   22fe8:	007fffff 	.word	0x007fffff
   22fec:	40015000 	.word	0x40015000
   22ff0:	200170f4 	.word	0x200170f4
   22ff4:	200170e8 	.word	0x200170e8
   22ff8:	00022e45 	.word	0x00022e45

00022ffc <sys_clock_elapsed>:
   22ffc:	4b04      	ldr	r3, [pc, #16]	; (23010 <sys_clock_elapsed+0x14>)
   22ffe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   23002:	4b04      	ldr	r3, [pc, #16]	; (23014 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   23004:	681b      	ldr	r3, [r3, #0]
   23006:	1ac0      	subs	r0, r0, r3
}
   23008:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2300c:	4770      	bx	lr
   2300e:	bf00      	nop
   23010:	40015000 	.word	0x40015000
   23014:	200170f4 	.word	0x200170f4

00023018 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   23018:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2301a:	f04f 0320 	mov.w	r3, #32
   2301e:	f3ef 8511 	mrs	r5, BASEPRI
   23022:	f383 8811 	msr	BASEPRI, r3
   23026:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2302a:	481b      	ldr	r0, [pc, #108]	; (23098 <sys_clock_cycle_get_32+0x80>)
   2302c:	f010 fe50 	bl	33cd0 <z_spin_lock_valid>
   23030:	b968      	cbnz	r0, 2304e <sys_clock_cycle_get_32+0x36>
   23032:	2381      	movs	r3, #129	; 0x81
   23034:	4a19      	ldr	r2, [pc, #100]	; (2309c <sys_clock_cycle_get_32+0x84>)
   23036:	491a      	ldr	r1, [pc, #104]	; (230a0 <sys_clock_cycle_get_32+0x88>)
   23038:	481a      	ldr	r0, [pc, #104]	; (230a4 <sys_clock_cycle_get_32+0x8c>)
   2303a:	f016 f87a 	bl	39132 <printk>
   2303e:	4916      	ldr	r1, [pc, #88]	; (23098 <sys_clock_cycle_get_32+0x80>)
   23040:	4819      	ldr	r0, [pc, #100]	; (230a8 <sys_clock_cycle_get_32+0x90>)
   23042:	f016 f876 	bl	39132 <printk>
   23046:	2181      	movs	r1, #129	; 0x81
   23048:	4814      	ldr	r0, [pc, #80]	; (2309c <sys_clock_cycle_get_32+0x84>)
   2304a:	f016 fb11 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   2304e:	4812      	ldr	r0, [pc, #72]	; (23098 <sys_clock_cycle_get_32+0x80>)
   23050:	f010 fe5c 	bl	33d0c <z_spin_lock_set_owner>
   23054:	4b15      	ldr	r3, [pc, #84]	; (230ac <sys_clock_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23056:	4810      	ldr	r0, [pc, #64]	; (23098 <sys_clock_cycle_get_32+0x80>)
   23058:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   2305c:	4b14      	ldr	r3, [pc, #80]	; (230b0 <sys_clock_cycle_get_32+0x98>)
   2305e:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   23060:	1ae4      	subs	r4, r4, r3
   23062:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   23066:	441c      	add	r4, r3
   23068:	f010 fe40 	bl	33cec <z_spin_unlock_valid>
   2306c:	b968      	cbnz	r0, 2308a <sys_clock_cycle_get_32+0x72>
   2306e:	23ac      	movs	r3, #172	; 0xac
   23070:	4a0a      	ldr	r2, [pc, #40]	; (2309c <sys_clock_cycle_get_32+0x84>)
   23072:	4910      	ldr	r1, [pc, #64]	; (230b4 <sys_clock_cycle_get_32+0x9c>)
   23074:	480b      	ldr	r0, [pc, #44]	; (230a4 <sys_clock_cycle_get_32+0x8c>)
   23076:	f016 f85c 	bl	39132 <printk>
   2307a:	4907      	ldr	r1, [pc, #28]	; (23098 <sys_clock_cycle_get_32+0x80>)
   2307c:	480e      	ldr	r0, [pc, #56]	; (230b8 <sys_clock_cycle_get_32+0xa0>)
   2307e:	f016 f858 	bl	39132 <printk>
   23082:	21ac      	movs	r1, #172	; 0xac
   23084:	4805      	ldr	r0, [pc, #20]	; (2309c <sys_clock_cycle_get_32+0x84>)
   23086:	f016 faf3 	bl	39670 <assert_post_action>
	__asm__ volatile(
   2308a:	f385 8811 	msr	BASEPRI, r5
   2308e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   23092:	4620      	mov	r0, r4
   23094:	bd38      	pop	{r3, r4, r5, pc}
   23096:	bf00      	nop
   23098:	200170f8 	.word	0x200170f8
   2309c:	00040472 	.word	0x00040472
   230a0:	000404c4 	.word	0x000404c4
   230a4:	0004033e 	.word	0x0004033e
   230a8:	000404d9 	.word	0x000404d9
   230ac:	40015000 	.word	0x40015000
   230b0:	200170f4 	.word	0x200170f4
   230b4:	00040498 	.word	0x00040498
   230b8:	000404af 	.word	0x000404af

000230bc <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   230bc:	b508      	push	{r3, lr}
	k_sched_lock();
   230be:	f011 fe41 	bl	34d44 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   230c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   230c6:	4801      	ldr	r0, [pc, #4]	; (230cc <before_nse+0x10>)
   230c8:	f000 bc9a 	b.w	23a00 <z_arm_save_fp_context>
   230cc:	200170fc 	.word	0x200170fc

000230d0 <after_nse>:

void after_nse(void)
{
   230d0:	b508      	push	{r3, lr}
	k_sched_unlock();
   230d2:	f012 f8cb 	bl	3526c <k_sched_unlock>
	z_arm_restore_fp_context(&context_buffer);
}
   230d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   230da:	4801      	ldr	r0, [pc, #4]	; (230e0 <after_nse+0x10>)
   230dc:	f017 ba08 	b.w	3a4f0 <z_arm_restore_fp_context>
   230e0:	200170fc 	.word	0x200170fc

000230e4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   230e4:	4a09      	ldr	r2, [pc, #36]	; (2310c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   230e6:	490a      	ldr	r1, [pc, #40]	; (23110 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   230e8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   230ea:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   230ec:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   230ee:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   230f0:	4908      	ldr	r1, [pc, #32]	; (23114 <arch_swap+0x30>)
   230f2:	684b      	ldr	r3, [r1, #4]
   230f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   230f8:	604b      	str	r3, [r1, #4]
   230fa:	2300      	movs	r3, #0
   230fc:	f383 8811 	msr	BASEPRI, r3
   23100:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   23104:	6893      	ldr	r3, [r2, #8]
}
   23106:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   23108:	4770      	bx	lr
   2310a:	bf00      	nop
   2310c:	200189dc 	.word	0x200189dc
   23110:	000401f0 	.word	0x000401f0
   23114:	e000ed00 	.word	0xe000ed00

00023118 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   23118:	4922      	ldr	r1, [pc, #136]	; (231a4 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2311a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   2311c:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   23120:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   23124:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   23126:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2312a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #0x10    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   2312e:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   23132:	d103      	bne.n	2313c <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   23134:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   23138:	ec80 8a10 	vstmia	r0, {s16-s31}

0002313c <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2313c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2313e:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   23142:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   23146:	4f18      	ldr	r7, [pc, #96]	; (231a8 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   23148:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2314c:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   2314e:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   23150:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   23152:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   23156:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   23158:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2315a:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2315c:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   23160:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   23164:	d003      	beq.n	2316e <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   23166:	2300      	movs	r3, #0
    vmsr fpscr, r3
   23168:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   2316c:	e003      	b.n	23176 <in_fp_endif>

0002316e <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   2316e:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   23172:	ec90 8a10 	vldmia	r0, {s16-s31}

00023176 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   23176:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   2317a:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   2317e:	f383 8814 	msr	CONTROL, r3
    isb
   23182:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   23186:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2318a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2318e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   23192:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   23196:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   23198:	f017 f99b 	bl	3a4d2 <configure_builtin_stack_guard>
    pop {r2, lr}
   2319c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   231a0:	4770      	bx	lr
   231a2:	0000      	.short	0x0000
    ldr r1, =_kernel
   231a4:	200189dc 	.word	0x200189dc
    ldr v4, =_SCS_ICSR
   231a8:	e000ed04 	.word	0xe000ed04

000231ac <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   231ac:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   231b0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   231b2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   231b6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   231ba:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   231bc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   231c0:	2902      	cmp	r1, #2
    beq _oops
   231c2:	d0ff      	beq.n	231c4 <_oops>

000231c4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   231c4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   231c6:	f017 f988 	bl	3a4da <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   231ca:	bd01      	pop	{r0, pc}

000231cc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   231cc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   231ce:	2b00      	cmp	r3, #0
   231d0:	db08      	blt.n	231e4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   231d2:	2201      	movs	r2, #1
   231d4:	f000 001f 	and.w	r0, r0, #31
   231d8:	fa02 f000 	lsl.w	r0, r2, r0
   231dc:	4a02      	ldr	r2, [pc, #8]	; (231e8 <arch_irq_enable+0x1c>)
   231de:	095b      	lsrs	r3, r3, #5
   231e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   231e4:	4770      	bx	lr
   231e6:	bf00      	nop
   231e8:	e000e100 	.word	0xe000e100

000231ec <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   231ec:	4b05      	ldr	r3, [pc, #20]	; (23204 <arch_irq_is_enabled+0x18>)
   231ee:	0942      	lsrs	r2, r0, #5
   231f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   231f4:	2301      	movs	r3, #1
   231f6:	f000 001f 	and.w	r0, r0, #31
   231fa:	fa03 f000 	lsl.w	r0, r3, r0
}
   231fe:	4010      	ands	r0, r2
   23200:	4770      	bx	lr
   23202:	bf00      	nop
   23204:	e000e100 	.word	0xe000e100

00023208 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   23208:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   2320a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   2320c:	2c07      	cmp	r4, #7
{
   2320e:	4605      	mov	r5, r0
   23210:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   23212:	d90f      	bls.n	23234 <z_arm_irq_priority_set+0x2c>
   23214:	2358      	movs	r3, #88	; 0x58
   23216:	4a10      	ldr	r2, [pc, #64]	; (23258 <z_arm_irq_priority_set+0x50>)
   23218:	4910      	ldr	r1, [pc, #64]	; (2325c <z_arm_irq_priority_set+0x54>)
   2321a:	4811      	ldr	r0, [pc, #68]	; (23260 <z_arm_irq_priority_set+0x58>)
   2321c:	f015 ff89 	bl	39132 <printk>
   23220:	4631      	mov	r1, r6
   23222:	4810      	ldr	r0, [pc, #64]	; (23264 <z_arm_irq_priority_set+0x5c>)
   23224:	2307      	movs	r3, #7
   23226:	462a      	mov	r2, r5
   23228:	f015 ff83 	bl	39132 <printk>
   2322c:	2158      	movs	r1, #88	; 0x58
   2322e:	480a      	ldr	r0, [pc, #40]	; (23258 <z_arm_irq_priority_set+0x50>)
   23230:	f016 fa1e 	bl	39670 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   23234:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   23236:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23238:	bfac      	ite	ge
   2323a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2323e:	4b0a      	ldrlt	r3, [pc, #40]	; (23268 <z_arm_irq_priority_set+0x60>)
   23240:	ea4f 1444 	mov.w	r4, r4, lsl #5
   23244:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23246:	bfab      	itete	ge
   23248:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2324c:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23250:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23254:	555c      	strblt	r4, [r3, r5]
}
   23256:	bd70      	pop	{r4, r5, r6, pc}
   23258:	00040e46 	.word	0x00040e46
   2325c:	00040e7c 	.word	0x00040e7c
   23260:	0004033e 	.word	0x0004033e
   23264:	00040e97 	.word	0x00040e97
   23268:	e000ed14 	.word	0xe000ed14

0002326c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2326c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2326e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   23270:	4b04      	ldr	r3, [pc, #16]	; (23284 <_arch_isr_direct_pm+0x18>)
   23272:	6a18      	ldr	r0, [r3, #32]
   23274:	b118      	cbz	r0, 2327e <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   23276:	2200      	movs	r2, #0
   23278:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   2327a:	f01a fd5f 	bl	3dd3c <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2327e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   23280:	bd08      	pop	{r3, pc}
   23282:	bf00      	nop
   23284:	200189dc 	.word	0x200189dc

00023288 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   23288:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2328c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   2328e:	490d      	ldr	r1, [pc, #52]	; (232c4 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   23290:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   23294:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   23296:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   2329a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2329e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   232a0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   232a4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   232a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   232ac:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   232b0:	2300      	movs	r3, #0
   232b2:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   232b4:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   232b8:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   232ba:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   232bc:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   232c0:	4770      	bx	lr
   232c2:	bf00      	nop
   232c4:	0003921d 	.word	0x0003921d

000232c8 <arch_switch_to_main_thread>:
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   232c8:	2300      	movs	r3, #0
   232ca:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   232ce:	f3ef 8314 	mrs	r3, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   232d2:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   232d6:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   232da:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   232de:	4b09      	ldr	r3, [pc, #36]	; (23304 <arch_switch_to_main_thread+0x3c>)
   232e0:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   232e2:	6e83      	ldr	r3, [r0, #104]	; 0x68
   232e4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   232e8:	4610      	mov	r0, r2
   232ea:	f381 8809 	msr	PSP, r1
   232ee:	2100      	movs	r1, #0
   232f0:	b663      	cpsie	if
   232f2:	f381 8811 	msr	BASEPRI, r1
   232f6:	f3bf 8f6f 	isb	sy
   232fa:	2200      	movs	r2, #0
   232fc:	2300      	movs	r3, #0
   232fe:	f015 ff8d 	bl	3921c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   23302:	bf00      	nop
   23304:	200189dc 	.word	0x200189dc

00023308 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   23308:	4901      	ldr	r1, [pc, #4]	; (23310 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2330a:	2210      	movs	r2, #16
	str	r2, [r1]
   2330c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2330e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   23310:	e000ed10 	.word	0xe000ed10

00023314 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   23314:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   23316:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   23318:	f380 8811 	msr	BASEPRI, r0
	isb
   2331c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   23320:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   23324:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   23326:	b662      	cpsie	i
	isb
   23328:	f3bf 8f6f 	isb	sy

	bx	lr
   2332c:	4770      	bx	lr
   2332e:	bf00      	nop

00023330 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   23330:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   23332:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   23334:	f381 8811 	msr	BASEPRI, r1

	wfe
   23338:	bf20      	wfe

	msr	BASEPRI, r0
   2333a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2333e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   23340:	4770      	bx	lr
   23342:	bf00      	nop

00023344 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   23344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23348:	4606      	mov	r6, r0

	if (esf != NULL) {
   2334a:	460d      	mov	r5, r1
{
   2334c:	b087      	sub	sp, #28
	if (esf != NULL) {
   2334e:	2900      	cmp	r1, #0
   23350:	d051      	beq.n	233f6 <z_arm_fatal_error+0xb2>
   23352:	4b2c      	ldr	r3, [pc, #176]	; (23404 <z_arm_fatal_error+0xc0>)
   23354:	4c2c      	ldr	r4, [pc, #176]	; (23408 <z_arm_fatal_error+0xc4>)
   23356:	46a8      	mov	r8, r5
   23358:	1ae4      	subs	r4, r4, r3
   2335a:	08e4      	lsrs	r4, r4, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   2335c:	688b      	ldr	r3, [r1, #8]
   2335e:	01a4      	lsls	r4, r4, #6
   23360:	f044 0401 	orr.w	r4, r4, #1
   23364:	9300      	str	r3, [sp, #0]
   23366:	e9d1 2300 	ldrd	r2, r3, [r1]
   2336a:	4620      	mov	r0, r4
   2336c:	4927      	ldr	r1, [pc, #156]	; (2340c <z_arm_fatal_error+0xc8>)
   2336e:	f016 f9ae 	bl	396ce <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   23372:	696b      	ldr	r3, [r5, #20]
   23374:	4620      	mov	r0, r4
   23376:	9300      	str	r3, [sp, #0]
   23378:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   2337c:	4924      	ldr	r1, [pc, #144]	; (23410 <z_arm_fatal_error+0xcc>)
   2337e:	f016 f9a6 	bl	396ce <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   23382:	4620      	mov	r0, r4
   23384:	69ea      	ldr	r2, [r5, #28]
   23386:	4923      	ldr	r1, [pc, #140]	; (23414 <z_arm_fatal_error+0xd0>)
   23388:	f016 f9a1 	bl	396ce <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   2338c:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   2338e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 23420 <z_arm_fatal_error+0xdc>
   23392:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   23396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   2339a:	ed98 7a08 	vldr	s14, [r8, #32]
   2339e:	edcd 7a05 	vstr	s15, [sp, #20]
   233a2:	1cfb      	adds	r3, r7, #3
   233a4:	9304      	str	r3, [sp, #16]
   233a6:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   233aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   233ae:	edcd 7a03 	vstr	s15, [sp, #12]
   233b2:	1cbb      	adds	r3, r7, #2
   233b4:	9302      	str	r3, [sp, #8]
   233b6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   233ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   233be:	edcd 7a01 	vstr	s15, [sp, #4]
   233c2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   233c6:	1c7b      	adds	r3, r7, #1
   233c8:	463a      	mov	r2, r7
   233ca:	9300      	str	r3, [sp, #0]
   233cc:	4649      	mov	r1, r9
   233ce:	ee17 3a90 	vmov	r3, s15
   233d2:	4620      	mov	r0, r4
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   233d4:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   233d6:	f016 f97a 	bl	396ce <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   233da:	2f10      	cmp	r7, #16
   233dc:	f108 0810 	add.w	r8, r8, #16
   233e0:	d1d7      	bne.n	23392 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   233e2:	4620      	mov	r0, r4
   233e4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   233e6:	490c      	ldr	r1, [pc, #48]	; (23418 <z_arm_fatal_error+0xd4>)
   233e8:	f016 f971 	bl	396ce <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   233ec:	4620      	mov	r0, r4
   233ee:	69aa      	ldr	r2, [r5, #24]
   233f0:	490a      	ldr	r1, [pc, #40]	; (2341c <z_arm_fatal_error+0xd8>)
   233f2:	f016 f96c 	bl	396ce <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   233f6:	4629      	mov	r1, r5
   233f8:	4630      	mov	r0, r6
}
   233fa:	b007      	add	sp, #28
   233fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_fatal_error(reason, esf);
   23400:	f010 b89a 	b.w	33538 <z_fatal_error>
   23404:	0003f5a4 	.word	0x0003f5a4
   23408:	0003f6b4 	.word	0x0003f6b4
   2340c:	00040ed7 	.word	0x00040ed7
   23410:	00040f06 	.word	0x00040f06
   23414:	00040f35 	.word	0x00040f35
   23418:	00040f87 	.word	0x00040f87
   2341c:	00040f96 	.word	0x00040f96
   23420:	00040f44 	.word	0x00040f44

00023424 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   23424:	bf30      	wfi
    b z_SysNmiOnReset
   23426:	f7ff bffd 	b.w	23424 <z_SysNmiOnReset>
   2342a:	bf00      	nop

0002342c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2342c:	4a14      	ldr	r2, [pc, #80]	; (23480 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   2342e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   23430:	4b14      	ldr	r3, [pc, #80]	; (23484 <z_arm_prep_c+0x58>)
   23432:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   23436:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   23438:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2343c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   23440:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   23444:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   23448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   2344c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   23450:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   23454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   23458:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   2345c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   23460:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   23464:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   23468:	2300      	movs	r3, #0
   2346a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2346e:	f010 f8db 	bl	33628 <z_bss_zero>
	z_data_copy();
   23472:	f012 fd9d 	bl	35fb0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   23476:	f000 fb35 	bl	23ae4 <z_arm_interrupt_init>
	z_cstart();
   2347a:	f010 f8f9 	bl	33670 <z_cstart>
   2347e:	bf00      	nop
   23480:	0001c200 	.word	0x0001c200
   23484:	e000ed00 	.word	0xe000ed00

00023488 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   23488:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2348a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2348c:	4a0b      	ldr	r2, [pc, #44]	; (234bc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2348e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   23490:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   23492:	bf1e      	ittt	ne
	movne	r1, #0
   23494:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   23496:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   23498:	f01a fc50 	blne	3dd3c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2349c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2349e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   234a2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   234a6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   234aa:	4905      	ldr	r1, [pc, #20]	; (234c0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   234ac:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   234ae:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   234b0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   234b2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   234b6:	4903      	ldr	r1, [pc, #12]	; (234c4 <_isr_wrapper+0x3c>)
	bx r1
   234b8:	4708      	bx	r1
   234ba:	0000      	.short	0x0000
	ldr r2, =_kernel
   234bc:	200189dc 	.word	0x200189dc
	ldr r1, =_sw_isr_table
   234c0:	0003f368 	.word	0x0003f368
	ldr r1, =z_arm_int_exit
   234c4:	000239e5 	.word	0x000239e5

000234c8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   234c8:	2000      	movs	r0, #0
    msr CONTROL, r0
   234ca:	f380 8814 	msr	CONTROL, r0
    isb
   234ce:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   234d2:	2000      	movs	r0, #0
    msr MSPLIM, r0
   234d4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   234d8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   234dc:	f016 f8d0 	bl	39680 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   234e0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   234e2:	490e      	ldr	r1, [pc, #56]	; (2351c <__start+0x54>)
    str r0, [r1]
   234e4:	6008      	str	r0, [r1, #0]
    dsb
   234e6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   234ea:	480d      	ldr	r0, [pc, #52]	; (23520 <__start+0x58>)
    msr msp, r0
   234ec:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   234f0:	f000 fad2 	bl	23a98 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   234f4:	2020      	movs	r0, #32
    msr BASEPRI, r0
   234f6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   234fa:	480a      	ldr	r0, [pc, #40]	; (23524 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   234fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   23500:	1840      	adds	r0, r0, r1
    msr PSP, r0
   23502:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   23506:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2350a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2350c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2350e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   23512:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   23516:	f7ff ff89 	bl	2342c <z_arm_prep_c>
   2351a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   2351c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   23520:	200212a8 	.word	0x200212a8
    ldr r0, =z_interrupt_stacks
   23524:	200213e8 	.word	0x200213e8

00023528 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   23528:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2352c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   23530:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   23532:	4672      	mov	r2, lr
	bl z_arm_fault
   23534:	f000 f95c 	bl	237f0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   23538:	bd01      	pop	{r0, pc}
   2353a:	bf00      	nop

0002353c <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   2353c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23540:	4b33      	ldr	r3, [pc, #204]	; (23610 <mem_manage_fault.isra.0+0xd4>)
   23542:	4c34      	ldr	r4, [pc, #208]	; (23614 <mem_manage_fault.isra.0+0xd8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   23544:	4d34      	ldr	r5, [pc, #208]	; (23618 <mem_manage_fault.isra.0+0xdc>)
   23546:	1ae4      	subs	r4, r4, r3
   23548:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   2354a:	01a4      	lsls	r4, r4, #6
   2354c:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   23550:	4607      	mov	r7, r0
   23552:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   23554:	4640      	mov	r0, r8
   23556:	4931      	ldr	r1, [pc, #196]	; (2361c <mem_manage_fault.isra.0+0xe0>)
   23558:	f016 f8b9 	bl	396ce <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2355c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2355e:	06d0      	lsls	r0, r2, #27
   23560:	d503      	bpl.n	2356a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   23562:	4640      	mov	r0, r8
   23564:	492e      	ldr	r1, [pc, #184]	; (23620 <mem_manage_fault.isra.0+0xe4>)
   23566:	f016 f8b2 	bl	396ce <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2356a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2356c:	0719      	lsls	r1, r3, #28
   2356e:	d504      	bpl.n	2357a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   23570:	492c      	ldr	r1, [pc, #176]	; (23624 <mem_manage_fault.isra.0+0xe8>)
   23572:	f044 0001 	orr.w	r0, r4, #1
   23576:	f016 f8aa 	bl	396ce <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2357a:	4d27      	ldr	r5, [pc, #156]	; (23618 <mem_manage_fault.isra.0+0xdc>)
   2357c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2357e:	079a      	lsls	r2, r3, #30
   23580:	d512      	bpl.n	235a8 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   23582:	f044 0801 	orr.w	r8, r4, #1
   23586:	4640      	mov	r0, r8
   23588:	4927      	ldr	r1, [pc, #156]	; (23628 <mem_manage_fault.isra.0+0xec>)
   2358a:	f016 f8a0 	bl	396ce <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   2358e:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   23590:	6aab      	ldr	r3, [r5, #40]	; 0x28
   23592:	061b      	lsls	r3, r3, #24
   23594:	d508      	bpl.n	235a8 <mem_manage_fault.isra.0+0x6c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   23596:	4640      	mov	r0, r8
   23598:	4924      	ldr	r1, [pc, #144]	; (2362c <mem_manage_fault.isra.0+0xf0>)
   2359a:	f016 f898 	bl	396ce <log_string_sync>
			if (from_hard_fault != 0) {
   2359e:	b11f      	cbz	r7, 235a8 <mem_manage_fault.isra.0+0x6c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   235a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   235a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   235a6:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   235a8:	4d1b      	ldr	r5, [pc, #108]	; (23618 <mem_manage_fault.isra.0+0xdc>)
   235aa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   235ac:	07d7      	lsls	r7, r2, #31
   235ae:	d504      	bpl.n	235ba <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   235b0:	491f      	ldr	r1, [pc, #124]	; (23630 <mem_manage_fault.isra.0+0xf4>)
   235b2:	f044 0001 	orr.w	r0, r4, #1
   235b6:	f016 f88a 	bl	396ce <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   235ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
   235bc:	0698      	lsls	r0, r3, #26
   235be:	d504      	bpl.n	235ca <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   235c0:	491c      	ldr	r1, [pc, #112]	; (23634 <mem_manage_fault.isra.0+0xf8>)
   235c2:	f044 0001 	orr.w	r0, r4, #1
   235c6:	f016 f882 	bl	396ce <log_string_sync>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   235ca:	4b13      	ldr	r3, [pc, #76]	; (23618 <mem_manage_fault.isra.0+0xdc>)
   235cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   235ce:	06d1      	lsls	r1, r2, #27
   235d0:	d402      	bmi.n	235d8 <mem_manage_fault.isra.0+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   235d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   235d4:	0792      	lsls	r2, r2, #30
   235d6:	d511      	bpl.n	235fc <mem_manage_fault.isra.0+0xc0>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   235d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   235da:	06db      	lsls	r3, r3, #27
   235dc:	d50e      	bpl.n	235fc <mem_manage_fault.isra.0+0xc0>
   235de:	4916      	ldr	r1, [pc, #88]	; (23638 <mem_manage_fault.isra.0+0xfc>)
   235e0:	f240 134f 	movw	r3, #335	; 0x14f
   235e4:	4a15      	ldr	r2, [pc, #84]	; (2363c <mem_manage_fault.isra.0+0x100>)
   235e6:	4816      	ldr	r0, [pc, #88]	; (23640 <mem_manage_fault.isra.0+0x104>)
   235e8:	f015 fda3 	bl	39132 <printk>
   235ec:	4815      	ldr	r0, [pc, #84]	; (23644 <mem_manage_fault.isra.0+0x108>)
   235ee:	f015 fda0 	bl	39132 <printk>
   235f2:	f240 114f 	movw	r1, #335	; 0x14f
   235f6:	4811      	ldr	r0, [pc, #68]	; (2363c <mem_manage_fault.isra.0+0x100>)
   235f8:	f016 f83a 	bl	39670 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   235fc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   235fe:	4a06      	ldr	r2, [pc, #24]	; (23618 <mem_manage_fault.isra.0+0xdc>)
   23600:	6a93      	ldr	r3, [r2, #40]	; 0x28
   23602:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   23606:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   23608:	7030      	strb	r0, [r6, #0]

	return reason;
}
   2360a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2360e:	bf00      	nop
   23610:	0003f5a4 	.word	0x0003f5a4
   23614:	0003f6b4 	.word	0x0003f6b4
   23618:	e000ed00 	.word	0xe000ed00
   2361c:	00040fc4 	.word	0x00040fc4
   23620:	00040fda 	.word	0x00040fda
   23624:	0004100d 	.word	0x0004100d
   23628:	00041020 	.word	0x00041020
   2362c:	00041038 	.word	0x00041038
   23630:	0004104e 	.word	0x0004104e
   23634:	0004106d 	.word	0x0004106d
   23638:	000410d6 	.word	0x000410d6
   2363c:	0004109c 	.word	0x0004109c
   23640:	0004033e 	.word	0x0004033e
   23644:	00041120 	.word	0x00041120

00023648 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   23648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2364c:	4b29      	ldr	r3, [pc, #164]	; (236f4 <bus_fault.isra.0+0xac>)
   2364e:	4c2a      	ldr	r4, [pc, #168]	; (236f8 <bus_fault.isra.0+0xb0>)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   23650:	4d2a      	ldr	r5, [pc, #168]	; (236fc <bus_fault.isra.0+0xb4>)
   23652:	1ae4      	subs	r4, r4, r3
   23654:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   23656:	01a4      	lsls	r4, r4, #6
   23658:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2365c:	4607      	mov	r7, r0
   2365e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   23660:	4640      	mov	r0, r8
   23662:	4927      	ldr	r1, [pc, #156]	; (23700 <bus_fault.isra.0+0xb8>)
   23664:	f016 f833 	bl	396ce <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   23668:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2366a:	04d1      	lsls	r1, r2, #19
   2366c:	d503      	bpl.n	23676 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   2366e:	4640      	mov	r0, r8
   23670:	4924      	ldr	r1, [pc, #144]	; (23704 <bus_fault.isra.0+0xbc>)
   23672:	f016 f82c 	bl	396ce <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   23676:	6aab      	ldr	r3, [r5, #40]	; 0x28
   23678:	051a      	lsls	r2, r3, #20
   2367a:	d504      	bpl.n	23686 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   2367c:	4922      	ldr	r1, [pc, #136]	; (23708 <bus_fault.isra.0+0xc0>)
   2367e:	f044 0001 	orr.w	r0, r4, #1
   23682:	f016 f824 	bl	396ce <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   23686:	4d1d      	ldr	r5, [pc, #116]	; (236fc <bus_fault.isra.0+0xb4>)
   23688:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2368a:	059b      	lsls	r3, r3, #22
   2368c:	d512      	bpl.n	236b4 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   2368e:	f044 0801 	orr.w	r8, r4, #1
   23692:	4640      	mov	r0, r8
   23694:	491d      	ldr	r1, [pc, #116]	; (2370c <bus_fault.isra.0+0xc4>)
   23696:	f016 f81a 	bl	396ce <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2369a:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2369c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2369e:	0418      	lsls	r0, r3, #16
   236a0:	d508      	bpl.n	236b4 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   236a2:	4640      	mov	r0, r8
   236a4:	491a      	ldr	r1, [pc, #104]	; (23710 <bus_fault.isra.0+0xc8>)
   236a6:	f016 f812 	bl	396ce <log_string_sync>
			if (from_hard_fault != 0) {
   236aa:	b11f      	cbz	r7, 236b4 <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   236ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
   236ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   236b2:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   236b4:	4d11      	ldr	r5, [pc, #68]	; (236fc <bus_fault.isra.0+0xb4>)
   236b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   236b8:	0559      	lsls	r1, r3, #21
   236ba:	d504      	bpl.n	236c6 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   236bc:	4915      	ldr	r1, [pc, #84]	; (23714 <bus_fault.isra.0+0xcc>)
   236be:	f044 0001 	orr.w	r0, r4, #1
   236c2:	f016 f804 	bl	396ce <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   236c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   236c8:	05da      	lsls	r2, r3, #23
   236ca:	d50d      	bpl.n	236e8 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   236cc:	4912      	ldr	r1, [pc, #72]	; (23718 <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   236ce:	f044 0001 	orr.w	r0, r4, #1
   236d2:	f015 fffc 	bl	396ce <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   236d6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   236d8:	4a08      	ldr	r2, [pc, #32]	; (236fc <bus_fault.isra.0+0xb4>)
   236da:	6a93      	ldr	r3, [r2, #40]	; 0x28
   236dc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   236e0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   236e2:	7030      	strb	r0, [r6, #0]

	return reason;
}
   236e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   236e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   236ea:	049b      	lsls	r3, r3, #18
   236ec:	d5f3      	bpl.n	236d6 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   236ee:	490b      	ldr	r1, [pc, #44]	; (2371c <bus_fault.isra.0+0xd4>)
   236f0:	e7ed      	b.n	236ce <bus_fault.isra.0+0x86>
   236f2:	bf00      	nop
   236f4:	0003f5a4 	.word	0x0003f5a4
   236f8:	0003f6b4 	.word	0x0003f6b4
   236fc:	e000ed00 	.word	0xe000ed00
   23700:	00041184 	.word	0x00041184
   23704:	0004119a 	.word	0x0004119a
   23708:	0004100d 	.word	0x0004100d
   2370c:	000411ab 	.word	0x000411ab
   23710:	000411c4 	.word	0x000411c4
   23714:	000411d9 	.word	0x000411d9
   23718:	000411f4 	.word	0x000411f4
   2371c:	0004106d 	.word	0x0004106d

00023720 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   23720:	b570      	push	{r4, r5, r6, lr}
   23722:	4b28      	ldr	r3, [pc, #160]	; (237c4 <usage_fault.isra.0+0xa4>)
   23724:	4c28      	ldr	r4, [pc, #160]	; (237c8 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   23726:	4d29      	ldr	r5, [pc, #164]	; (237cc <usage_fault.isra.0+0xac>)
   23728:	1ae4      	subs	r4, r4, r3
   2372a:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   2372c:	01a4      	lsls	r4, r4, #6
   2372e:	f044 0601 	orr.w	r6, r4, #1
   23732:	4630      	mov	r0, r6
   23734:	4926      	ldr	r1, [pc, #152]	; (237d0 <usage_fault.isra.0+0xb0>)
   23736:	f015 ffca 	bl	396ce <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2373a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2373c:	0193      	lsls	r3, r2, #6
   2373e:	d503      	bpl.n	23748 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   23740:	4630      	mov	r0, r6
   23742:	4924      	ldr	r1, [pc, #144]	; (237d4 <usage_fault.isra.0+0xb4>)
   23744:	f015 ffc3 	bl	396ce <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   23748:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2374a:	01dd      	lsls	r5, r3, #7
   2374c:	d504      	bpl.n	23758 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   2374e:	4922      	ldr	r1, [pc, #136]	; (237d8 <usage_fault.isra.0+0xb8>)
   23750:	f044 0001 	orr.w	r0, r4, #1
   23754:	f015 ffbb 	bl	396ce <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   23758:	4d1c      	ldr	r5, [pc, #112]	; (237cc <usage_fault.isra.0+0xac>)
   2375a:	6aae      	ldr	r6, [r5, #40]	; 0x28
   2375c:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   23760:	d005      	beq.n	2376e <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   23762:	491e      	ldr	r1, [pc, #120]	; (237dc <usage_fault.isra.0+0xbc>)
   23764:	f044 0001 	orr.w	r0, r4, #1
   23768:	f015 ffb1 	bl	396ce <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   2376c:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2376e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   23770:	0318      	lsls	r0, r3, #12
   23772:	d504      	bpl.n	2377e <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   23774:	491a      	ldr	r1, [pc, #104]	; (237e0 <usage_fault.isra.0+0xc0>)
   23776:	f044 0001 	orr.w	r0, r4, #1
   2377a:	f015 ffa8 	bl	396ce <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2377e:	4d13      	ldr	r5, [pc, #76]	; (237cc <usage_fault.isra.0+0xac>)
   23780:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   23782:	0351      	lsls	r1, r2, #13
   23784:	d504      	bpl.n	23790 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   23786:	4917      	ldr	r1, [pc, #92]	; (237e4 <usage_fault.isra.0+0xc4>)
   23788:	f044 0001 	orr.w	r0, r4, #1
   2378c:	f015 ff9f 	bl	396ce <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   23790:	6aab      	ldr	r3, [r5, #40]	; 0x28
   23792:	039a      	lsls	r2, r3, #14
   23794:	d504      	bpl.n	237a0 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   23796:	4914      	ldr	r1, [pc, #80]	; (237e8 <usage_fault.isra.0+0xc8>)
   23798:	f044 0001 	orr.w	r0, r4, #1
   2379c:	f015 ff97 	bl	396ce <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   237a0:	4d0a      	ldr	r5, [pc, #40]	; (237cc <usage_fault.isra.0+0xac>)
   237a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   237a4:	03db      	lsls	r3, r3, #15
   237a6:	d504      	bpl.n	237b2 <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   237a8:	4910      	ldr	r1, [pc, #64]	; (237ec <usage_fault.isra.0+0xcc>)
   237aa:	f044 0001 	orr.w	r0, r4, #1
   237ae:	f015 ff8e 	bl	396ce <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   237b2:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   237b4:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   237b6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   237ba:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   237be:	62ab      	str	r3, [r5, #40]	; 0x28
}
   237c0:	bd70      	pop	{r4, r5, r6, pc}
   237c2:	bf00      	nop
   237c4:	0003f5a4 	.word	0x0003f5a4
   237c8:	0003f6b4 	.word	0x0003f6b4
   237cc:	e000ed00 	.word	0xe000ed00
   237d0:	0004120c 	.word	0x0004120c
   237d4:	00041224 	.word	0x00041224
   237d8:	00041237 	.word	0x00041237
   237dc:	00041251 	.word	0x00041251
   237e0:	0004127b 	.word	0x0004127b
   237e4:	00041299 	.word	0x00041299
   237e8:	000412be 	.word	0x000412be
   237ec:	000412d8 	.word	0x000412d8

000237f0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   237f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   237f4:	4b63      	ldr	r3, [pc, #396]	; (23984 <z_arm_fault+0x194>)
{
   237f6:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   237f8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   237fc:	460e      	mov	r6, r1
   237fe:	4614      	mov	r4, r2
   23800:	2700      	movs	r7, #0
   23802:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   23804:	f3c8 0508 	ubfx	r5, r8, #0, #9
   23808:	f387 8811 	msr	BASEPRI, r7
   2380c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   23810:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   23814:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   23818:	d117      	bne.n	2384a <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   2381a:	07d0      	lsls	r0, r2, #31
   2381c:	d415      	bmi.n	2384a <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   2381e:	0651      	lsls	r1, r2, #25
   23820:	d404      	bmi.n	2382c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   23822:	0722      	lsls	r2, r4, #28
   23824:	d40f      	bmi.n	23846 <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)msp;
   23826:	464e      	mov	r6, r9
			*nested_exc = true;
   23828:	2701      	movs	r7, #1
   2382a:	e00d      	b.n	23848 <z_arm_fault+0x58>
   2382c:	4856      	ldr	r0, [pc, #344]	; (23988 <z_arm_fault+0x198>)
   2382e:	4b57      	ldr	r3, [pc, #348]	; (2398c <z_arm_fault+0x19c>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   23830:	4957      	ldr	r1, [pc, #348]	; (23990 <z_arm_fault+0x1a0>)
   23832:	1a1b      	subs	r3, r3, r0
   23834:	08db      	lsrs	r3, r3, #3
   23836:	019b      	lsls	r3, r3, #6
   23838:	f043 0001 	orr.w	r0, r3, #1
   2383c:	f015 ff47 	bl	396ce <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   23840:	f014 0704 	ands.w	r7, r4, #4
   23844:	d01e      	beq.n	23884 <z_arm_fault+0x94>
	*nested_exc = false;
   23846:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   23848:	b97e      	cbnz	r6, 2386a <z_arm_fault+0x7a>
   2384a:	f240 33e1 	movw	r3, #993	; 0x3e1
   2384e:	4a51      	ldr	r2, [pc, #324]	; (23994 <z_arm_fault+0x1a4>)
   23850:	4951      	ldr	r1, [pc, #324]	; (23998 <z_arm_fault+0x1a8>)
   23852:	4852      	ldr	r0, [pc, #328]	; (2399c <z_arm_fault+0x1ac>)
   23854:	f015 fc6d 	bl	39132 <printk>
   23858:	4851      	ldr	r0, [pc, #324]	; (239a0 <z_arm_fault+0x1b0>)
   2385a:	f015 fc6a 	bl	39132 <printk>
   2385e:	f240 31e1 	movw	r1, #993	; 0x3e1
   23862:	484c      	ldr	r0, [pc, #304]	; (23994 <z_arm_fault+0x1a4>)
   23864:	f015 ff04 	bl	39670 <assert_post_action>
   23868:	2600      	movs	r6, #0
	*recoverable = false;
   2386a:	2300      	movs	r3, #0
   2386c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   23870:	1eeb      	subs	r3, r5, #3
   23872:	2b09      	cmp	r3, #9
   23874:	d86c      	bhi.n	23950 <z_arm_fault+0x160>
   23876:	e8df f003 	tbb	[pc, r3]
   2387a:	5a07      	.short	0x5a07
   2387c:	6b6b3e5e 	.word	0x6b6b3e5e
   23880:	626b6b6b 	.word	0x626b6b6b
			ptr_esf = (z_arch_esf_t *)msp;
   23884:	464e      	mov	r6, r9
	if (!alternative_state_exc) {
   23886:	e7df      	b.n	23848 <z_arm_fault+0x58>
	*recoverable = false;
   23888:	f04f 0800 	mov.w	r8, #0
   2388c:	4b3e      	ldr	r3, [pc, #248]	; (23988 <z_arm_fault+0x198>)
   2388e:	4d3f      	ldr	r5, [pc, #252]	; (2398c <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   23890:	4944      	ldr	r1, [pc, #272]	; (239a4 <z_arm_fault+0x1b4>)
   23892:	1aed      	subs	r5, r5, r3
   23894:	08ed      	lsrs	r5, r5, #3
   23896:	01ad      	lsls	r5, r5, #6
   23898:	f045 0501 	orr.w	r5, r5, #1
   2389c:	4628      	mov	r0, r5
   2389e:	f015 ff16 	bl	396ce <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   238a2:	4b38      	ldr	r3, [pc, #224]	; (23984 <z_arm_fault+0x194>)
	*recoverable = false;
   238a4:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   238a8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   238aa:	f014 0402 	ands.w	r4, r4, #2
   238ae:	d005      	beq.n	238bc <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   238b0:	4628      	mov	r0, r5
   238b2:	493d      	ldr	r1, [pc, #244]	; (239a8 <z_arm_fault+0x1b8>)
	PR_FAULT_INFO(
   238b4:	f015 ff0b 	bl	396ce <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   238b8:	2400      	movs	r4, #0
}
   238ba:	e01f      	b.n	238fc <z_arm_fault+0x10c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   238bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   238be:	005b      	lsls	r3, r3, #1
   238c0:	d51c      	bpl.n	238fc <z_arm_fault+0x10c>
		PR_EXC("  Fault escalation (see below)");
   238c2:	4628      	mov	r0, r5
   238c4:	4939      	ldr	r1, [pc, #228]	; (239ac <z_arm_fault+0x1bc>)
   238c6:	f015 ff02 	bl	396ce <log_string_sync>
		if (SCB_MMFSR != 0) {
   238ca:	4b39      	ldr	r3, [pc, #228]	; (239b0 <z_arm_fault+0x1c0>)
   238cc:	781b      	ldrb	r3, [r3, #0]
   238ce:	b12b      	cbz	r3, 238dc <z_arm_fault+0xec>
			reason = mem_manage_fault(esf, 1, recoverable);
   238d0:	2001      	movs	r0, #1
   238d2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   238d6:	f7ff fe31 	bl	2353c <mem_manage_fault.isra.0>
   238da:	e00e      	b.n	238fa <z_arm_fault+0x10a>
		} else if (SCB_BFSR != 0) {
   238dc:	4b35      	ldr	r3, [pc, #212]	; (239b4 <z_arm_fault+0x1c4>)
   238de:	781b      	ldrb	r3, [r3, #0]
   238e0:	b12b      	cbz	r3, 238ee <z_arm_fault+0xfe>
			reason = bus_fault(esf, 1, recoverable);
   238e2:	2001      	movs	r0, #1
   238e4:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   238e8:	f7ff feae 	bl	23648 <bus_fault.isra.0>
   238ec:	e005      	b.n	238fa <z_arm_fault+0x10a>
		} else if (SCB_UFSR != 0) {
   238ee:	4b32      	ldr	r3, [pc, #200]	; (239b8 <z_arm_fault+0x1c8>)
   238f0:	881b      	ldrh	r3, [r3, #0]
   238f2:	b29b      	uxth	r3, r3
   238f4:	b113      	cbz	r3, 238fc <z_arm_fault+0x10c>
			reason = usage_fault(esf);
   238f6:	f7ff ff13 	bl	23720 <usage_fault.isra.0>
   238fa:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   238fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23900:	b993      	cbnz	r3, 23928 <z_arm_fault+0x138>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   23902:	2268      	movs	r2, #104	; 0x68
   23904:	4631      	mov	r1, r6
   23906:	a802      	add	r0, sp, #8
   23908:	f01a fb2f 	bl	3df6a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2390c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2390e:	b39f      	cbz	r7, 23978 <z_arm_fault+0x188>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   23910:	f3c3 0208 	ubfx	r2, r3, #0, #9
   23914:	b922      	cbnz	r2, 23920 <z_arm_fault+0x130>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   23916:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2391a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2391e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   23920:	4620      	mov	r0, r4
   23922:	a902      	add	r1, sp, #8
   23924:	f7ff fd0e 	bl	23344 <z_arm_fatal_error>
}
   23928:	b01d      	add	sp, #116	; 0x74
   2392a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2392e:	2000      	movs	r0, #0
   23930:	f10d 0107 	add.w	r1, sp, #7
   23934:	e7cf      	b.n	238d6 <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
   23936:	2000      	movs	r0, #0
   23938:	f10d 0107 	add.w	r1, sp, #7
   2393c:	e7d4      	b.n	238e8 <z_arm_fault+0xf8>
   2393e:	4813      	ldr	r0, [pc, #76]	; (2398c <z_arm_fault+0x19c>)
   23940:	4b11      	ldr	r3, [pc, #68]	; (23988 <z_arm_fault+0x198>)
	PR_FAULT_INFO(
   23942:	491e      	ldr	r1, [pc, #120]	; (239bc <z_arm_fault+0x1cc>)
   23944:	1ac0      	subs	r0, r0, r3
   23946:	08c0      	lsrs	r0, r0, #3
   23948:	0180      	lsls	r0, r0, #6
   2394a:	f040 0001 	orr.w	r0, r0, #1
   2394e:	e7b1      	b.n	238b4 <z_arm_fault+0xc4>
   23950:	4b0d      	ldr	r3, [pc, #52]	; (23988 <z_arm_fault+0x198>)
   23952:	480e      	ldr	r0, [pc, #56]	; (2398c <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** %s %d) *****",
   23954:	491a      	ldr	r1, [pc, #104]	; (239c0 <z_arm_fault+0x1d0>)
   23956:	1ac0      	subs	r0, r0, r3
   23958:	08c0      	lsrs	r0, r0, #3
   2395a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   2395e:	ea4f 1080 	mov.w	r0, r0, lsl #6
   23962:	4a18      	ldr	r2, [pc, #96]	; (239c4 <z_arm_fault+0x1d4>)
   23964:	f1a5 0310 	sub.w	r3, r5, #16
   23968:	bf08      	it	eq
   2396a:	460a      	moveq	r2, r1
   2396c:	f040 0001 	orr.w	r0, r0, #1
   23970:	4915      	ldr	r1, [pc, #84]	; (239c8 <z_arm_fault+0x1d8>)
   23972:	f015 feac 	bl	396ce <log_string_sync>
   23976:	e79f      	b.n	238b8 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   23978:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2397c:	f023 0301 	bic.w	r3, r3, #1
   23980:	e7cd      	b.n	2391e <z_arm_fault+0x12e>
   23982:	bf00      	nop
   23984:	e000ed00 	.word	0xe000ed00
   23988:	0003f5a4 	.word	0x0003f5a4
   2398c:	0003f6b4 	.word	0x0003f6b4
   23990:	00041331 	.word	0x00041331
   23994:	0004109c 	.word	0x0004109c
   23998:	00041354 	.word	0x00041354
   2399c:	0004033e 	.word	0x0004033e
   239a0:	00041367 	.word	0x00041367
   239a4:	000413a5 	.word	0x000413a5
   239a8:	000413bc 	.word	0x000413bc
   239ac:	000413dd 	.word	0x000413dd
   239b0:	e000ed28 	.word	0xe000ed28
   239b4:	e000ed29 	.word	0xe000ed29
   239b8:	e000ed2a 	.word	0xe000ed2a
   239bc:	000413fc 	.word	0x000413fc
   239c0:	00041303 	.word	0x00041303
   239c4:	00041318 	.word	0x00041318
   239c8:	00041420 	.word	0x00041420

000239cc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   239cc:	4b04      	ldr	r3, [pc, #16]	; (239e0 <z_arm_fault_init+0x14>)
   239ce:	695a      	ldr	r2, [r3, #20]
   239d0:	f042 0210 	orr.w	r2, r2, #16
   239d4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   239d6:	695a      	ldr	r2, [r3, #20]
   239d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   239dc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   239de:	4770      	bx	lr
   239e0:	e000ed00 	.word	0xe000ed00

000239e4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   239e4:	4b04      	ldr	r3, [pc, #16]	; (239f8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   239e6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   239e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   239ea:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   239ec:	d003      	beq.n	239f6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   239ee:	4903      	ldr	r1, [pc, #12]	; (239fc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   239f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   239f4:	600a      	str	r2, [r1, #0]

000239f6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   239f6:	4770      	bx	lr
	ldr r3, =_kernel
   239f8:	200189dc 	.word	0x200189dc
	ldr r1, =_SCS_ICSR
   239fc:	e000ed04 	.word	0xe000ed04

00023a00 <z_arm_save_fp_context>:
 * @file @brief Helper functions for saving and restoring the FP context.
 *
 */

void z_arm_save_fp_context(struct fpu_ctx_full *buffer)
{
   23a00:	b510      	push	{r4, lr}
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);
   23a02:	4604      	mov	r4, r0
   23a04:	b948      	cbnz	r0, 23a1a <z_arm_save_fp_context+0x1a>
   23a06:	4910      	ldr	r1, [pc, #64]	; (23a48 <z_arm_save_fp_context+0x48>)
   23a08:	4810      	ldr	r0, [pc, #64]	; (23a4c <z_arm_save_fp_context+0x4c>)
   23a0a:	2314      	movs	r3, #20
   23a0c:	4a10      	ldr	r2, [pc, #64]	; (23a50 <z_arm_save_fp_context+0x50>)
   23a0e:	f015 fb90 	bl	39132 <printk>
   23a12:	2114      	movs	r1, #20
   23a14:	480e      	ldr	r0, [pc, #56]	; (23a50 <z_arm_save_fp_context+0x50>)
   23a16:	f015 fe2b 	bl	39670 <assert_post_action>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   23a1a:	f3ef 8314 	mrs	r3, CONTROL

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   23a1e:	075a      	lsls	r2, r3, #29
   23a20:	d510      	bpl.n	23a44 <z_arm_save_fp_context+0x44>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   23a22:	f104 0240 	add.w	r2, r4, #64	; 0x40
   23a26:	ec84 0a10 	vstmia	r4, {s0-s15}
   23a2a:	ec82 8a10 	vstmia	r2, {s16-s31}
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
   23a2e:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   23a32:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		buffer->ctx_saved = true;
   23a36:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   23a38:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   23a3c:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   23a40:	f383 8814 	msr	CONTROL, r3
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   23a44:	bd10      	pop	{r4, pc}
   23a46:	bf00      	nop
   23a48:	0004146b 	.word	0x0004146b
   23a4c:	0004033e 	.word	0x0004033e
   23a50:	00041433 	.word	0x00041433

00023a54 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   23a54:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23a58:	4905      	ldr	r1, [pc, #20]	; (23a70 <sys_arch_reboot+0x1c>)
   23a5a:	4b06      	ldr	r3, [pc, #24]	; (23a74 <sys_arch_reboot+0x20>)
   23a5c:	68ca      	ldr	r2, [r1, #12]
   23a5e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   23a62:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   23a64:	60cb      	str	r3, [r1, #12]
   23a66:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   23a6a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   23a6c:	e7fd      	b.n	23a6a <sys_arch_reboot+0x16>
   23a6e:	bf00      	nop
   23a70:	e000ed00 	.word	0xe000ed00
   23a74:	05fa0004 	.word	0x05fa0004

00023a78 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   23a78:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   23a7a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   23a7c:	4a05      	ldr	r2, [pc, #20]	; (23a94 <z_arm_clear_arm_mpu_config+0x1c>)
   23a7e:	6811      	ldr	r1, [r2, #0]
	int num_regions =
   23a80:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
   23a84:	428b      	cmp	r3, r1
   23a86:	d100      	bne.n	23a8a <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   23a88:	4770      	bx	lr
  mpu->RNR = rnr;
   23a8a:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   23a8c:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   23a8e:	3301      	adds	r3, #1
   23a90:	e7f8      	b.n	23a84 <z_arm_clear_arm_mpu_config+0xc>
   23a92:	bf00      	nop
   23a94:	e000ed90 	.word	0xe000ed90

00023a98 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   23a98:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   23a9a:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   23a9c:	2400      	movs	r4, #0
   23a9e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   23aa2:	f7ff ffe9 	bl	23a78 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   23aa6:	4a0e      	ldr	r2, [pc, #56]	; (23ae0 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
   23aa8:	4623      	mov	r3, r4
   23aaa:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
   23aac:	f04f 34ff 	mov.w	r4, #4294967295
   23ab0:	f103 0020 	add.w	r0, r3, #32
   23ab4:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   23ab6:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   23ab8:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   23abc:	d1f8      	bne.n	23ab0 <z_arm_init_arch_hw_at_boot+0x18>
   23abe:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   23ac0:	f04f 30ff 	mov.w	r0, #4294967295
   23ac4:	f103 0260 	add.w	r2, r3, #96	; 0x60
   23ac8:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   23aca:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   23acc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   23ad0:	d1f8      	bne.n	23ac4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   23ad2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   23ad4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   23ad8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   23adc:	bd10      	pop	{r4, pc}
   23ade:	bf00      	nop
   23ae0:	e000e100 	.word	0xe000e100

00023ae4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   23ae4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23ae6:	2120      	movs	r1, #32
   23ae8:	4803      	ldr	r0, [pc, #12]	; (23af8 <z_arm_interrupt_init+0x14>)
   23aea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   23aec:	3301      	adds	r3, #1
   23aee:	2b41      	cmp	r3, #65	; 0x41
   23af0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   23af4:	d1f9      	bne.n	23aea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   23af6:	4770      	bx	lr
   23af8:	e000e100 	.word	0xe000e100

00023afc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   23afc:	4b06      	ldr	r3, [pc, #24]	; (23b18 <z_impl_k_thread_abort+0x1c>)
   23afe:	689b      	ldr	r3, [r3, #8]
   23b00:	4283      	cmp	r3, r0
   23b02:	d107      	bne.n	23b14 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23b04:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   23b08:	b123      	cbz	r3, 23b14 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   23b0a:	4a04      	ldr	r2, [pc, #16]	; (23b1c <z_impl_k_thread_abort+0x20>)
   23b0c:	6853      	ldr	r3, [r2, #4]
   23b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   23b12:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   23b14:	f012 b92e 	b.w	35d74 <z_thread_abort>
   23b18:	200189dc 	.word	0x200189dc
   23b1c:	e000ed00 	.word	0xe000ed00

00023b20 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   23b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   23b22:	4c09      	ldr	r4, [pc, #36]	; (23b48 <z_arm_configure_static_mpu_regions+0x28>)
   23b24:	4a09      	ldr	r2, [pc, #36]	; (23b4c <z_arm_configure_static_mpu_regions+0x2c>)
   23b26:	4623      	mov	r3, r4
   23b28:	2101      	movs	r1, #1
   23b2a:	4809      	ldr	r0, [pc, #36]	; (23b50 <z_arm_configure_static_mpu_regions+0x30>)
   23b2c:	f000 f916 	bl	23d5c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   23b30:	2300      	movs	r3, #0
   23b32:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   23b34:	4b07      	ldr	r3, [pc, #28]	; (23b54 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   23b36:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   23b38:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   23b3a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   23b3c:	9301      	str	r3, [sp, #4]
   23b3e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   23b40:	f000 f932 	bl	23da8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   23b44:	b004      	add	sp, #16
   23b46:	bd10      	pop	{r4, pc}
   23b48:	20040000 	.word	0x20040000
   23b4c:	20014500 	.word	0x20014500
   23b50:	0003fa74 	.word	0x0003fa74
   23b54:	20014ec0 	.word	0x20014ec0

00023b58 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   23b58:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   23b5a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   23b5c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   23b5e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   23b62:	f004 031f 	and.w	r3, r4, #31
   23b66:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   23b68:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   23b6a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   23b6c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   23b70:	4904      	ldr	r1, [pc, #16]	; (23b84 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   23b72:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   23b76:	f043 0301 	orr.w	r3, r3, #1
   23b7a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   23b7c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   23b7e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   23b80:	bd10      	pop	{r4, pc}
   23b82:	bf00      	nop
   23b84:	e000ed90 	.word	0xe000ed90

00023b88 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   23b88:	4602      	mov	r2, r0
   23b8a:	b508      	push	{r3, lr}
   23b8c:	4806      	ldr	r0, [pc, #24]	; (23ba8 <region_allocate_and_init.part.0+0x20>)
   23b8e:	4b07      	ldr	r3, [pc, #28]	; (23bac <region_allocate_and_init.part.0+0x24>)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   23b90:	4907      	ldr	r1, [pc, #28]	; (23bb0 <region_allocate_and_init.part.0+0x28>)
   23b92:	1a1b      	subs	r3, r3, r0
   23b94:	08db      	lsrs	r3, r3, #3
   23b96:	019b      	lsls	r3, r3, #6
   23b98:	f043 0001 	orr.w	r0, r3, #1
   23b9c:	f015 fd97 	bl	396ce <log_string_sync>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   23ba0:	f06f 0015 	mvn.w	r0, #21
   23ba4:	bd08      	pop	{r3, pc}
   23ba6:	bf00      	nop
   23ba8:	0003f5a4 	.word	0x0003f5a4
   23bac:	0003f674 	.word	0x0003f674
   23bb0:	00041485 	.word	0x00041485

00023bb4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   23bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23bb8:	4688      	mov	r8, r1
   23bba:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   23bbc:	4606      	mov	r6, r0
   23bbe:	2700      	movs	r7, #0
	MPU->RNR = index;
   23bc0:	4d58      	ldr	r5, [pc, #352]	; (23d24 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   23bc2:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   23bc4:	4547      	cmp	r7, r8
   23bc6:	da31      	bge.n	23c2c <mpu_configure_regions_and_partition.constprop.0+0x78>
		if (regions[i].size == 0U) {
   23bc8:	f8d6 9004 	ldr.w	r9, [r6, #4]
   23bcc:	f1b9 0f00 	cmp.w	r9, #0
   23bd0:	d04e      	beq.n	23c70 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   23bd2:	f1b9 0f1f 	cmp.w	r9, #31
   23bd6:	d91c      	bls.n	23c12 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		&&
   23bd8:	f019 0f1f 	tst.w	r9, #31
   23bdc:	d119      	bne.n	23c12 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		((part->start &
   23bde:	f8d6 a000 	ldr.w	sl, [r6]
		&&
   23be2:	f01a 0f1f 	tst.w	sl, #31
   23be6:	d114      	bne.n	23c12 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   23be8:	4650      	mov	r0, sl
   23bea:	f016 fc95 	bl	3a518 <arm_cmse_mpu_region_get>
   23bee:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23bf0:	eb09 000a 	add.w	r0, r9, sl
   23bf4:	3801      	subs	r0, #1
   23bf6:	f016 fc8f 	bl	3a518 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   23bfa:	4583      	cmp	fp, r0
   23bfc:	d01a      	beq.n	23c34 <mpu_configure_regions_and_partition.constprop.0+0x80>
	return -EINVAL;
   23bfe:	f06f 0b15 	mvn.w	fp, #21
   23c02:	4849      	ldr	r0, [pc, #292]	; (23d28 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   23c04:	4b49      	ldr	r3, [pc, #292]	; (23d2c <mpu_configure_regions_and_partition.constprop.0+0x178>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   23c06:	465a      	mov	r2, fp
   23c08:	1ac0      	subs	r0, r0, r3
   23c0a:	08c0      	lsrs	r0, r0, #3
   23c0c:	4948      	ldr	r1, [pc, #288]	; (23d30 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   23c0e:	0180      	lsls	r0, r0, #6
   23c10:	e006      	b.n	23c20 <mpu_configure_regions_and_partition.constprop.0+0x6c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   23c12:	463a      	mov	r2, r7
   23c14:	4844      	ldr	r0, [pc, #272]	; (23d28 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   23c16:	4b45      	ldr	r3, [pc, #276]	; (23d2c <mpu_configure_regions_and_partition.constprop.0+0x178>)
   23c18:	4946      	ldr	r1, [pc, #280]	; (23d34 <mpu_configure_regions_and_partition.constprop.0+0x180>)
   23c1a:	1ac0      	subs	r0, r0, r3
   23c1c:	08c0      	lsrs	r0, r0, #3
   23c1e:	0180      	lsls	r0, r0, #6
			LOG_ERR("Invalid underlying region index %u",
   23c20:	f040 0001 	orr.w	r0, r0, #1
   23c24:	f015 fd53 	bl	396ce <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   23c28:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   23c2c:	4620      	mov	r0, r4
   23c2e:	b005      	add	sp, #20
   23c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   23c34:	f11b 0f16 	cmn.w	fp, #22
   23c38:	d0e3      	beq.n	23c02 <mpu_configure_regions_and_partition.constprop.0+0x4e>
			(u_reg_index > (reg_index - 1))) {
   23c3a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   23c3c:	455b      	cmp	r3, fp
   23c3e:	dbe0      	blt.n	23c02 <mpu_configure_regions_and_partition.constprop.0+0x4e>
	MPU->RNR = index;
   23c40:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   23c44:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   23c46:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23c4a:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   23c4c:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23c50:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   23c54:	e9d6 3200 	ldrd	r3, r2, [r6]
   23c58:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   23c5a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   23c5c:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   23c60:	d11b      	bne.n	23c9a <mpu_configure_regions_and_partition.constprop.0+0xe6>
   23c62:	45ca      	cmp	sl, r9
   23c64:	d107      	bne.n	23c76 <mpu_configure_regions_and_partition.constprop.0+0xc2>
			mpu_configure_region(u_reg_index, &regions[i]);
   23c66:	4631      	mov	r1, r6
   23c68:	fa5f f08b 	uxtb.w	r0, fp
   23c6c:	f016 fc5e 	bl	3a52c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   23c70:	3701      	adds	r7, #1
   23c72:	360c      	adds	r6, #12
   23c74:	e7a6      	b.n	23bc4 <mpu_configure_regions_and_partition.constprop.0+0x10>
				mpu_configure_region(reg_index, &regions[i]);
   23c76:	4631      	mov	r1, r6
	MPU->RNR = index;
   23c78:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   23c7c:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   23c7e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   23c82:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   23c86:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   23c88:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   23c8a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   23c8c:	f016 fc4e 	bl	3a52c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   23c90:	f110 0f16 	cmn.w	r0, #22
   23c94:	d0c8      	beq.n	23c28 <mpu_configure_regions_and_partition.constprop.0+0x74>
			reg_index++;
   23c96:	1c44      	adds	r4, r0, #1
   23c98:	e7ea      	b.n	23c70 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
   23c9a:	3b01      	subs	r3, #1
   23c9c:	45ca      	cmp	sl, r9
   23c9e:	b2e0      	uxtb	r0, r4
   23ca0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   23ca4:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
   23ca8:	d106      	bne.n	23cb8 <mpu_configure_regions_and_partition.constprop.0+0x104>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23caa:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   23cac:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23cae:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   23cb2:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23cb4:	612b      	str	r3, [r5, #16]
			reg_index =
   23cb6:	e7e9      	b.n	23c8c <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23cb8:	6929      	ldr	r1, [r5, #16]
   23cba:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   23cbe:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23cc0:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   23cc2:	4631      	mov	r1, r6
   23cc4:	f016 fc32 	bl	3a52c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   23cc8:	f110 0f16 	cmn.w	r0, #22
   23ccc:	d0ac      	beq.n	23c28 <mpu_configure_regions_and_partition.constprop.0+0x74>
	MPU->RNR = index;
   23cce:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   23cd2:	68ea      	ldr	r2, [r5, #12]
   23cd4:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   23cd8:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   23cdc:	f362 0304 	bfi	r3, r2, #0, #5
   23ce0:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23ce4:	692b      	ldr	r3, [r5, #16]
   23ce6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   23cea:	085b      	lsrs	r3, r3, #1
   23cec:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   23cf0:	e9d6 1300 	ldrd	r1, r3, [r6]
   23cf4:	440b      	add	r3, r1
   23cf6:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   23cf8:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   23cfc:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   23cfe:	4453      	add	r3, sl
   23d00:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   23d04:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   23d06:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   23d0a:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23d0c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   23d10:	9303      	str	r3, [sp, #12]
   23d12:	d902      	bls.n	23d1a <mpu_configure_regions_and_partition.constprop.0+0x166>
   23d14:	f7ff ff38 	bl	23b88 <region_allocate_and_init.part.0>
   23d18:	e7ba      	b.n	23c90 <mpu_configure_regions_and_partition.constprop.0+0xdc>
	region_init(index, region_conf);
   23d1a:	4669      	mov	r1, sp
   23d1c:	f7ff ff1c 	bl	23b58 <region_init>
			if (reg_index == -EINVAL) {
   23d20:	e7b9      	b.n	23c96 <mpu_configure_regions_and_partition.constprop.0+0xe2>
   23d22:	bf00      	nop
   23d24:	e000ed90 	.word	0xe000ed90
   23d28:	0003f674 	.word	0x0003f674
   23d2c:	0003f5a4 	.word	0x0003f5a4
   23d30:	000414ce 	.word	0x000414ce
   23d34:	000414ab 	.word	0x000414ab

00023d38 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   23d38:	2205      	movs	r2, #5
   23d3a:	4b03      	ldr	r3, [pc, #12]	; (23d48 <arm_core_mpu_enable+0x10>)
   23d3c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   23d3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   23d42:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   23d46:	4770      	bx	lr
   23d48:	e000ed90 	.word	0xe000ed90

00023d4c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   23d4c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   23d50:	2200      	movs	r2, #0
   23d52:	4b01      	ldr	r3, [pc, #4]	; (23d58 <arm_core_mpu_disable+0xc>)
   23d54:	605a      	str	r2, [r3, #4]
}
   23d56:	4770      	bx	lr
   23d58:	e000ed90 	.word	0xe000ed90

00023d5c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   23d5c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   23d5e:	4d0d      	ldr	r5, [pc, #52]	; (23d94 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   23d60:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   23d62:	782a      	ldrb	r2, [r5, #0]
   23d64:	f7ff ff26 	bl	23bb4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   23d68:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   23d6a:	3016      	adds	r0, #22
   23d6c:	d111      	bne.n	23d92 <arm_core_mpu_configure_static_mpu_regions+0x36>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   23d6e:	f240 1305 	movw	r3, #261	; 0x105
   23d72:	4a09      	ldr	r2, [pc, #36]	; (23d98 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   23d74:	4909      	ldr	r1, [pc, #36]	; (23d9c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   23d76:	480a      	ldr	r0, [pc, #40]	; (23da0 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   23d78:	f015 f9db 	bl	39132 <printk>
   23d7c:	4621      	mov	r1, r4
   23d7e:	4809      	ldr	r0, [pc, #36]	; (23da4 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   23d80:	f015 f9d7 	bl	39132 <printk>
			regions_num);
	}
}
   23d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   23d88:	f240 1105 	movw	r1, #261	; 0x105
   23d8c:	4802      	ldr	r0, [pc, #8]	; (23d98 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   23d8e:	f015 bc6f 	b.w	39670 <assert_post_action>
}
   23d92:	bd38      	pop	{r3, r4, r5, pc}
   23d94:	2001ca56 	.word	0x2001ca56
   23d98:	000414f1 	.word	0x000414f1
   23d9c:	000451fc 	.word	0x000451fc
   23da0:	0004033e 	.word	0x0004033e
   23da4:	00041528 	.word	0x00041528

00023da8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   23da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23dac:	4e2f      	ldr	r6, [pc, #188]	; (23e6c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   23dae:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23db0:	4605      	mov	r5, r0
   23db2:	f04f 0800 	mov.w	r8, #0
   23db6:	46b3      	mov	fp, r6
	MPU->RNR = index;
   23db8:	4f2d      	ldr	r7, [pc, #180]	; (23e70 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23dba:	45c8      	cmp	r8, r9
   23dbc:	db02      	blt.n	23dc4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   23dbe:	b003      	add	sp, #12
   23dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   23dc4:	f8d5 a004 	ldr.w	sl, [r5, #4]
   23dc8:	f1ba 0f00 	cmp.w	sl, #0
   23dcc:	d049      	beq.n	23e62 <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   23dce:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   23dd0:	4608      	mov	r0, r1
   23dd2:	9101      	str	r1, [sp, #4]
   23dd4:	f016 fba0 	bl	3a518 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23dd8:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   23dda:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23ddc:	eb0a 0001 	add.w	r0, sl, r1
   23de0:	3801      	subs	r0, #1
   23de2:	f016 fb99 	bl	3a518 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   23de6:	4284      	cmp	r4, r0
   23de8:	f04f 0214 	mov.w	r2, #20
   23dec:	4b21      	ldr	r3, [pc, #132]	; (23e74 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   23dee:	d018      	beq.n	23e22 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   23df0:	f06f 0315 	mvn.w	r3, #21
   23df4:	fb02 f808 	mul.w	r8, r2, r8
   23df8:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   23dfc:	f240 1315 	movw	r3, #277	; 0x115
   23e00:	4a1d      	ldr	r2, [pc, #116]	; (23e78 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   23e02:	491e      	ldr	r1, [pc, #120]	; (23e7c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   23e04:	481e      	ldr	r0, [pc, #120]	; (23e80 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   23e06:	f015 f994 	bl	39132 <printk>
   23e0a:	4649      	mov	r1, r9
   23e0c:	481d      	ldr	r0, [pc, #116]	; (23e84 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   23e0e:	f015 f990 	bl	39132 <printk>
   23e12:	f240 1115 	movw	r1, #277	; 0x115
   23e16:	4818      	ldr	r0, [pc, #96]	; (23e78 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   23e18:	b003      	add	sp, #12
   23e1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   23e1e:	f015 bc27 	b.w	39670 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   23e22:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   23e26:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   23e28:	d0e8      	beq.n	23dfc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   23e2a:	7819      	ldrb	r1, [r3, #0]
   23e2c:	42a1      	cmp	r1, r4
   23e2e:	dde5      	ble.n	23dfc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   23e30:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   23e34:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   23e36:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   23e38:	68fc      	ldr	r4, [r7, #12]
   23e3a:	f100 0108 	add.w	r1, r0, #8
   23e3e:	7b00      	ldrb	r0, [r0, #12]
   23e40:	f364 0004 	bfi	r0, r4, #0, #5
   23e44:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23e46:	6938      	ldr	r0, [r7, #16]
   23e48:	790c      	ldrb	r4, [r1, #4]
   23e4a:	0840      	lsrs	r0, r0, #1
   23e4c:	f360 1447 	bfi	r4, r0, #5, #3
   23e50:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   23e52:	68f9      	ldr	r1, [r7, #12]
   23e54:	f021 011f 	bic.w	r1, r1, #31
   23e58:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   23e5a:	6939      	ldr	r1, [r7, #16]
   23e5c:	f021 011f 	bic.w	r1, r1, #31
   23e60:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23e62:	f108 0801 	add.w	r8, r8, #1
   23e66:	3614      	adds	r6, #20
   23e68:	350c      	adds	r5, #12
   23e6a:	e7a6      	b.n	23dba <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   23e6c:	20017184 	.word	0x20017184
   23e70:	e000ed90 	.word	0xe000ed90
   23e74:	2001ca56 	.word	0x2001ca56
   23e78:	000414f1 	.word	0x000414f1
   23e7c:	000451fc 	.word	0x000451fc
   23e80:	0004033e 	.word	0x0004033e
   23e84:	00041554 	.word	0x00041554

00023e88 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   23e88:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   23e8a:	4e20      	ldr	r6, [pc, #128]	; (23f0c <z_arm_mpu_init+0x84>)
   23e8c:	6835      	ldr	r5, [r6, #0]
   23e8e:	2d10      	cmp	r5, #16
   23e90:	d913      	bls.n	23eba <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   23e92:	f44f 739e 	mov.w	r3, #316	; 0x13c
   23e96:	4a1e      	ldr	r2, [pc, #120]	; (23f10 <z_arm_mpu_init+0x88>)
   23e98:	491e      	ldr	r1, [pc, #120]	; (23f14 <z_arm_mpu_init+0x8c>)
   23e9a:	481f      	ldr	r0, [pc, #124]	; (23f18 <z_arm_mpu_init+0x90>)
   23e9c:	f015 f949 	bl	39132 <printk>
   23ea0:	2210      	movs	r2, #16
   23ea2:	4629      	mov	r1, r5
   23ea4:	481d      	ldr	r0, [pc, #116]	; (23f1c <z_arm_mpu_init+0x94>)
   23ea6:	f015 f944 	bl	39132 <printk>
   23eaa:	4819      	ldr	r0, [pc, #100]	; (23f10 <z_arm_mpu_init+0x88>)
   23eac:	f44f 719e 	mov.w	r1, #316	; 0x13c
   23eb0:	f015 fbde 	bl	39670 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   23eb4:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   23eb8:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   23eba:	f7ff ff47 	bl	23d4c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   23ebe:	2000      	movs	r0, #0
	MPU->MAIR0 =
   23ec0:	4c17      	ldr	r4, [pc, #92]	; (23f20 <z_arm_mpu_init+0x98>)
   23ec2:	4a18      	ldr	r2, [pc, #96]	; (23f24 <z_arm_mpu_init+0x9c>)
   23ec4:	6322      	str	r2, [r4, #48]	; 0x30
   23ec6:	4285      	cmp	r5, r0
   23ec8:	d119      	bne.n	23efe <z_arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   23eca:	4b17      	ldr	r3, [pc, #92]	; (23f28 <z_arm_mpu_init+0xa0>)
   23ecc:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   23ece:	f7ff ff33 	bl	23d38 <arm_core_mpu_enable>
	__ASSERT(
   23ed2:	6823      	ldr	r3, [r4, #0]
   23ed4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   23ed8:	2b10      	cmp	r3, #16
   23eda:	d00e      	beq.n	23efa <z_arm_mpu_init+0x72>
   23edc:	4913      	ldr	r1, [pc, #76]	; (23f2c <z_arm_mpu_init+0xa4>)
   23ede:	f44f 73cf 	mov.w	r3, #414	; 0x19e
   23ee2:	4a0b      	ldr	r2, [pc, #44]	; (23f10 <z_arm_mpu_init+0x88>)
   23ee4:	480c      	ldr	r0, [pc, #48]	; (23f18 <z_arm_mpu_init+0x90>)
   23ee6:	f015 f924 	bl	39132 <printk>
   23eea:	4811      	ldr	r0, [pc, #68]	; (23f30 <z_arm_mpu_init+0xa8>)
   23eec:	f015 f921 	bl	39132 <printk>
   23ef0:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   23ef4:	4806      	ldr	r0, [pc, #24]	; (23f10 <z_arm_mpu_init+0x88>)
   23ef6:	f015 fbbb 	bl	39670 <assert_post_action>
	return 0;
   23efa:	2000      	movs	r0, #0
   23efc:	e7dc      	b.n	23eb8 <z_arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   23efe:	6871      	ldr	r1, [r6, #4]
   23f00:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   23f04:	f7ff fe28 	bl	23b58 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   23f08:	3001      	adds	r0, #1
   23f0a:	e7dc      	b.n	23ec6 <z_arm_mpu_init+0x3e>
   23f0c:	0003fa80 	.word	0x0003fa80
   23f10:	000414f1 	.word	0x000414f1
   23f14:	000451fc 	.word	0x000451fc
   23f18:	0004033e 	.word	0x0004033e
   23f1c:	00041583 	.word	0x00041583
   23f20:	e000ed90 	.word	0xe000ed90
   23f24:	0044ffaa 	.word	0x0044ffaa
   23f28:	2001ca56 	.word	0x2001ca56
   23f2c:	000415b7 	.word	0x000415b7
   23f30:	00041608 	.word	0x00041608

00023f34 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   23f34:	4b01      	ldr	r3, [pc, #4]	; (23f3c <__stdout_hook_install+0x8>)
   23f36:	6018      	str	r0, [r3, #0]
}
   23f38:	4770      	bx	lr
   23f3a:	bf00      	nop
   23f3c:	20014624 	.word	0x20014624

00023f40 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   23f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f42:	4606      	mov	r6, r0
   23f44:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   23f46:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   23f48:	4f06      	ldr	r7, [pc, #24]	; (23f64 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   23f4a:	42ac      	cmp	r4, r5
   23f4c:	da08      	bge.n	23f60 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   23f4e:	683b      	ldr	r3, [r7, #0]
   23f50:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   23f52:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   23f54:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   23f56:	f104 0401 	add.w	r4, r4, #1
   23f5a:	d001      	beq.n	23f60 <z_impl_zephyr_read_stdin+0x20>
   23f5c:	280d      	cmp	r0, #13
   23f5e:	d1f4      	bne.n	23f4a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   23f60:	4620      	mov	r0, r4
   23f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23f64:	20014620 	.word	0x20014620

00023f68 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   23f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f6a:	460d      	mov	r5, r1
   23f6c:	4f09      	ldr	r7, [pc, #36]	; (23f94 <z_impl_zephyr_write_stdout+0x2c>)
   23f6e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   23f70:	f1c0 0401 	rsb	r4, r0, #1
   23f74:	19a3      	adds	r3, r4, r6
   23f76:	429d      	cmp	r5, r3
   23f78:	dc01      	bgt.n	23f7e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   23f7a:	4628      	mov	r0, r5
   23f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   23f7e:	7873      	ldrb	r3, [r6, #1]
   23f80:	2b0a      	cmp	r3, #10
   23f82:	d102      	bne.n	23f8a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   23f84:	200d      	movs	r0, #13
   23f86:	683b      	ldr	r3, [r7, #0]
   23f88:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   23f8a:	683b      	ldr	r3, [r7, #0]
   23f8c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   23f90:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   23f92:	e7ef      	b.n	23f74 <z_impl_zephyr_write_stdout+0xc>
   23f94:	20014624 	.word	0x20014624

00023f98 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   23f98:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   23f9a:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   23f9c:	4801      	ldr	r0, [pc, #4]	; (23fa4 <_exit+0xc>)
   23f9e:	f7ff ffe3 	bl	23f68 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   23fa2:	e7fe      	b.n	23fa2 <_exit+0xa>
   23fa4:	00041629 	.word	0x00041629

00023fa8 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(intptr_t count)
{
   23fa8:	b510      	push	{r4, lr}
   23faa:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   23fac:	f04f 32ff 	mov.w	r2, #4294967295
   23fb0:	f04f 33ff 	mov.w	r3, #4294967295
   23fb4:	480a      	ldr	r0, [pc, #40]	; (23fe0 <_sbrk+0x38>)
   23fb6:	f015 f922 	bl	391fe <sys_sem_take>
	ptr = ((char *)HEAP_BASE) + heap_sz;
   23fba:	490a      	ldr	r1, [pc, #40]	; (23fe4 <_sbrk+0x3c>)
   23fbc:	680b      	ldr	r3, [r1, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   23fbe:	18e0      	adds	r0, r4, r3
   23fc0:	4c09      	ldr	r4, [pc, #36]	; (23fe8 <_sbrk+0x40>)
   23fc2:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   23fc6:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   23fca:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   23fcc:	bf2e      	itee	cs
   23fce:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   23fd2:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   23fd4:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   23fd6:	4802      	ldr	r0, [pc, #8]	; (23fe0 <_sbrk+0x38>)
   23fd8:	f015 f90c 	bl	391f4 <sys_sem_give>

	return ret;
}
   23fdc:	4620      	mov	r0, r4
   23fde:	bd10      	pop	{r4, pc}
   23fe0:	20014e70 	.word	0x20014e70
   23fe4:	20017198 	.word	0x20017198
   23fe8:	20022530 	.word	0x20022530

00023fec <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   23fec:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   23fee:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   23ff0:	4804      	ldr	r0, [pc, #16]	; (24004 <__chk_fail+0x18>)
   23ff2:	f7ff ffb9 	bl	23f68 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   23ff6:	4040      	eors	r0, r0
   23ff8:	f380 8811 	msr	BASEPRI, r0
   23ffc:	f04f 0003 	mov.w	r0, #3
   24000:	df02      	svc	2
	CODE_UNREACHABLE;
   24002:	bf00      	nop
   24004:	0004162f 	.word	0x0004162f

00024008 <thingy91_board_init>:
#endif
	return 0;
}

static int thingy91_board_init(const struct device *dev)
{
   24008:	b530      	push	{r4, r5, lr}
   2400a:	b0a3      	sub	sp, #140	; 0x8c
	return z_impl_zsock_socket(family, type, proto);
   2400c:	f240 2201 	movw	r2, #513	; 0x201
   24010:	2102      	movs	r1, #2
   24012:	2066      	movs	r0, #102	; 0x66
   24014:	f7fd fb52 	bl	216bc <z_impl_zsock_socket>
	if (at_socket_fd == -1) {
   24018:	1c43      	adds	r3, r0, #1
   2401a:	4604      	mov	r4, r0
   2401c:	d117      	bne.n	2404e <thingy91_board_init+0x46>
   2401e:	4b52      	ldr	r3, [pc, #328]	; (24168 <thingy91_board_init+0x160>)
   24020:	4852      	ldr	r0, [pc, #328]	; (2416c <thingy91_board_init+0x164>)
		LOG_ERR("AT socket could not be opened");
   24022:	4953      	ldr	r1, [pc, #332]	; (24170 <thingy91_board_init+0x168>)
   24024:	1ac0      	subs	r0, r0, r3
   24026:	08c0      	lsrs	r0, r0, #3
   24028:	0180      	lsls	r0, r0, #6
   2402a:	f040 0001 	orr.w	r0, r0, #1
   2402e:	f015 fb4e 	bl	396ce <log_string_sync>
		return -EFAULT;
   24032:	f06f 050d 	mvn.w	r5, #13
   24036:	4b4c      	ldr	r3, [pc, #304]	; (24168 <thingy91_board_init+0x160>)
   24038:	484c      	ldr	r0, [pc, #304]	; (2416c <thingy91_board_init+0x164>)
	int err;

	err = thingy91_magpio_configure();
	if (err) {
		LOG_ERR("thingy91_magpio_configure failed with error: %d", err);
   2403a:	462a      	mov	r2, r5
   2403c:	1ac0      	subs	r0, r0, r3
   2403e:	08c0      	lsrs	r0, r0, #3
   24040:	0180      	lsls	r0, r0, #6
   24042:	494c      	ldr	r1, [pc, #304]	; (24174 <thingy91_board_init+0x16c>)
   24044:	f040 0001 	orr.w	r0, r0, #1
   24048:	f015 fb41 	bl	396ce <log_string_sync>
		return err;
   2404c:	e088      	b.n	24160 <thingy91_board_init+0x158>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2404e:	2500      	movs	r5, #0
   24050:	2210      	movs	r2, #16
   24052:	462b      	mov	r3, r5
   24054:	e9cd 5500 	strd	r5, r5, [sp]
   24058:	4947      	ldr	r1, [pc, #284]	; (24178 <thingy91_board_init+0x170>)
   2405a:	f015 fef2 	bl	39e42 <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_TRACE)) {
   2405e:	2810      	cmp	r0, #16
   24060:	d019      	beq.n	24096 <thingy91_board_init+0x8e>
   24062:	4b41      	ldr	r3, [pc, #260]	; (24168 <thingy91_board_init+0x160>)
   24064:	4841      	ldr	r0, [pc, #260]	; (2416c <thingy91_board_init+0x164>)
		LOG_ERR("XMODEMTRACE command failed");
   24066:	4945      	ldr	r1, [pc, #276]	; (2417c <thingy91_board_init+0x174>)
   24068:	1ac0      	subs	r0, r0, r3
   2406a:	08c0      	lsrs	r0, r0, #3
   2406c:	0180      	lsls	r0, r0, #6
   2406e:	f040 0001 	orr.w	r0, r0, #1
   24072:	f015 fb2c 	bl	396ce <log_string_sync>
		close(at_socket_fd);
   24076:	4620      	mov	r0, r4
   24078:	f016 fa97 	bl	3a5aa <close>
		__ASSERT_NO_MSG(false);
   2407c:	4940      	ldr	r1, [pc, #256]	; (24180 <thingy91_board_init+0x178>)
   2407e:	2335      	movs	r3, #53	; 0x35
   24080:	4a40      	ldr	r2, [pc, #256]	; (24184 <thingy91_board_init+0x17c>)
   24082:	4841      	ldr	r0, [pc, #260]	; (24188 <thingy91_board_init+0x180>)
   24084:	f015 f855 	bl	39132 <printk>
   24088:	2135      	movs	r1, #53	; 0x35
		__ASSERT_NO_MSG(false);
   2408a:	483e      	ldr	r0, [pc, #248]	; (24184 <thingy91_board_init+0x17c>)
   2408c:	f015 faf0 	bl	39670 <assert_post_action>
		return -EIO;
   24090:	f06f 0504 	mvn.w	r5, #4
   24094:	e7cf      	b.n	24036 <thingy91_board_init+0x2e>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   24096:	2280      	movs	r2, #128	; 0x80
   24098:	462b      	mov	r3, r5
   2409a:	4620      	mov	r0, r4
   2409c:	e9cd 5500 	strd	r5, r5, [sp]
   240a0:	a902      	add	r1, sp, #8
   240a2:	f015 ff25 	bl	39ef0 <z_impl_zsock_recvfrom>
	if ((buffer < 2) ||
   240a6:	2801      	cmp	r0, #1
   240a8:	dc14      	bgt.n	240d4 <thingy91_board_init+0xcc>
   240aa:	4b2f      	ldr	r3, [pc, #188]	; (24168 <thingy91_board_init+0x160>)
   240ac:	482f      	ldr	r0, [pc, #188]	; (2416c <thingy91_board_init+0x164>)
		LOG_ERR("XMODEMTRACE received unexpected response");
   240ae:	4937      	ldr	r1, [pc, #220]	; (2418c <thingy91_board_init+0x184>)
   240b0:	1ac0      	subs	r0, r0, r3
   240b2:	08c0      	lsrs	r0, r0, #3
   240b4:	0180      	lsls	r0, r0, #6
   240b6:	f040 0001 	orr.w	r0, r0, #1
   240ba:	f015 fb08 	bl	396ce <log_string_sync>
		close(at_socket_fd);
   240be:	4620      	mov	r0, r4
   240c0:	f016 fa73 	bl	3a5aa <close>
		__ASSERT_NO_MSG(false);
   240c4:	492e      	ldr	r1, [pc, #184]	; (24180 <thingy91_board_init+0x178>)
   240c6:	233f      	movs	r3, #63	; 0x3f
   240c8:	4a2e      	ldr	r2, [pc, #184]	; (24184 <thingy91_board_init+0x17c>)
   240ca:	482f      	ldr	r0, [pc, #188]	; (24188 <thingy91_board_init+0x180>)
   240cc:	f015 f831 	bl	39132 <printk>
   240d0:	213f      	movs	r1, #63	; 0x3f
   240d2:	e7da      	b.n	2408a <thingy91_board_init+0x82>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   240d4:	2201      	movs	r2, #1
   240d6:	482e      	ldr	r0, [pc, #184]	; (24190 <thingy91_board_init+0x188>)
   240d8:	a902      	add	r1, sp, #8
   240da:	f019 ff38 	bl	3df4e <memcmp>
	if ((buffer < 2) ||
   240de:	4605      	mov	r5, r0
   240e0:	2800      	cmp	r0, #0
   240e2:	d1e2      	bne.n	240aa <thingy91_board_init+0xa2>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   240e4:	225c      	movs	r2, #92	; 0x5c
   240e6:	4603      	mov	r3, r0
   240e8:	e9cd 0000 	strd	r0, r0, [sp]
   240ec:	4929      	ldr	r1, [pc, #164]	; (24194 <thingy91_board_init+0x18c>)
   240ee:	4620      	mov	r0, r4
   240f0:	f015 fea7 	bl	39e42 <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_MAGPIO)) {
   240f4:	285c      	cmp	r0, #92	; 0x5c
   240f6:	d006      	beq.n	24106 <thingy91_board_init+0xfe>
   240f8:	481c      	ldr	r0, [pc, #112]	; (2416c <thingy91_board_init+0x164>)
   240fa:	4b1b      	ldr	r3, [pc, #108]	; (24168 <thingy91_board_init+0x160>)
		LOG_ERR("MAGPIO command failed");
   240fc:	4926      	ldr	r1, [pc, #152]	; (24198 <thingy91_board_init+0x190>)
   240fe:	1ac0      	subs	r0, r0, r3
   24100:	08c0      	lsrs	r0, r0, #3
   24102:	0180      	lsls	r0, r0, #6
   24104:	e00f      	b.n	24126 <thingy91_board_init+0x11e>
   24106:	2217      	movs	r2, #23
   24108:	462b      	mov	r3, r5
   2410a:	4620      	mov	r0, r4
   2410c:	e9cd 5500 	strd	r5, r5, [sp]
   24110:	4922      	ldr	r1, [pc, #136]	; (2419c <thingy91_board_init+0x194>)
   24112:	f015 fe96 	bl	39e42 <z_impl_zsock_sendto>
	if (buffer != AT_CMD_LEN(AT_CMD_COEX0)) {
   24116:	2817      	cmp	r0, #23
   24118:	d00d      	beq.n	24136 <thingy91_board_init+0x12e>
   2411a:	4814      	ldr	r0, [pc, #80]	; (2416c <thingy91_board_init+0x164>)
   2411c:	4b12      	ldr	r3, [pc, #72]	; (24168 <thingy91_board_init+0x160>)
		LOG_ERR("COEX0 command failed");
   2411e:	4920      	ldr	r1, [pc, #128]	; (241a0 <thingy91_board_init+0x198>)
   24120:	1ac0      	subs	r0, r0, r3
   24122:	08c0      	lsrs	r0, r0, #3
   24124:	0180      	lsls	r0, r0, #6
   24126:	f040 0001 	orr.w	r0, r0, #1
   2412a:	f015 fad0 	bl	396ce <log_string_sync>
		close(at_socket_fd);
   2412e:	4620      	mov	r0, r4
   24130:	f016 fa3b 	bl	3a5aa <close>
   24134:	e7ac      	b.n	24090 <thingy91_board_init+0x88>
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   24136:	2280      	movs	r2, #128	; 0x80
   24138:	462b      	mov	r3, r5
   2413a:	4620      	mov	r0, r4
   2413c:	e9cd 5500 	strd	r5, r5, [sp]
   24140:	a902      	add	r1, sp, #8
   24142:	f015 fed5 	bl	39ef0 <z_impl_zsock_recvfrom>
	if ((buffer < 2) ||
   24146:	2801      	cmp	r0, #1
   24148:	ddd6      	ble.n	240f8 <thingy91_board_init+0xf0>
	    (memcmp("OK", read_buffer, 2 != 0))) {
   2414a:	2201      	movs	r2, #1
   2414c:	4810      	ldr	r0, [pc, #64]	; (24190 <thingy91_board_init+0x188>)
   2414e:	a902      	add	r1, sp, #8
   24150:	f019 fefd 	bl	3df4e <memcmp>
	if ((buffer < 2) ||
   24154:	4605      	mov	r5, r0
   24156:	2800      	cmp	r0, #0
   24158:	d1ce      	bne.n	240f8 <thingy91_board_init+0xf0>
	close(at_socket_fd);
   2415a:	4620      	mov	r0, r4
   2415c:	f016 fa25 	bl	3a5aa <close>
	}

	return 0;
}
   24160:	4628      	mov	r0, r5
   24162:	b023      	add	sp, #140	; 0x8c
   24164:	bd30      	pop	{r4, r5, pc}
   24166:	bf00      	nop
   24168:	0003f5a4 	.word	0x0003f5a4
   2416c:	0003f5d4 	.word	0x0003f5d4
   24170:	0004165c 	.word	0x0004165c
   24174:	000417b0 	.word	0x000417b0
   24178:	0004167a 	.word	0x0004167a
   2417c:	0004168b 	.word	0x0004168b
   24180:	000451fc 	.word	0x000451fc
   24184:	000416a6 	.word	0x000416a6
   24188:	0004033e 	.word	0x0004033e
   2418c:	000416e4 	.word	0x000416e4
   24190:	0004170d 	.word	0x0004170d
   24194:	00041710 	.word	0x00041710
   24198:	0004176d 	.word	0x0004176d
   2419c:	00041783 	.word	0x00041783
   241a0:	0004179b 	.word	0x0004179b

000241a4 <net_if_flag_set.constprop.0>:
 * @brief Set a value in network interface flags
 *
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
   241a4:	b510      	push	{r4, lr}
				   enum net_if_flag value)
{
	NET_ASSERT(iface);
   241a6:	4604      	mov	r4, r0
   241a8:	b970      	cbnz	r0, 241c8 <net_if_flag_set.constprop.0+0x24>
   241aa:	490d      	ldr	r1, [pc, #52]	; (241e0 <net_if_flag_set.constprop.0+0x3c>)
   241ac:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   241b0:	4a0c      	ldr	r2, [pc, #48]	; (241e4 <net_if_flag_set.constprop.0+0x40>)
   241b2:	480d      	ldr	r0, [pc, #52]	; (241e8 <net_if_flag_set.constprop.0+0x44>)
   241b4:	f014 ffbd 	bl	39132 <printk>
   241b8:	480c      	ldr	r0, [pc, #48]	; (241ec <net_if_flag_set.constprop.0+0x48>)
   241ba:	f014 ffba 	bl	39132 <printk>
   241be:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   241c2:	4808      	ldr	r0, [pc, #32]	; (241e4 <net_if_flag_set.constprop.0+0x40>)
   241c4:	f015 fa54 	bl	39670 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   241c8:	6823      	ldr	r3, [r4, #0]
   241ca:	330c      	adds	r3, #12
   241cc:	e8d3 2fef 	ldaex	r2, [r3]
   241d0:	f042 0201 	orr.w	r2, r2, #1
   241d4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   241d8:	2900      	cmp	r1, #0
   241da:	d1f7      	bne.n	241cc <net_if_flag_set.constprop.0+0x28>

	atomic_set_bit(iface->if_dev->flags, value);
}
   241dc:	bd10      	pop	{r4, pc}
   241de:	bf00      	nop
   241e0:	00041820 	.word	0x00041820
   241e4:	000417f8 	.word	0x000417f8
   241e8:	0004033e 	.word	0x0004033e
   241ec:	000408e8 	.word	0x000408e8

000241f0 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   241f0:	4801      	ldr	r0, [pc, #4]	; (241f8 <k_mutex_unlock.constprop.0+0x8>)
   241f2:	f00f bff9 	b.w	341e8 <z_impl_k_mutex_unlock>
   241f6:	bf00      	nop
   241f8:	20014d8c 	.word	0x20014d8c

000241fc <k_mutex_lock.constprop.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   241fc:	4602      	mov	r2, r0
   241fe:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   24200:	4801      	ldr	r0, [pc, #4]	; (24208 <k_mutex_lock.constprop.0+0xc>)
   24202:	f00f bef7 	b.w	33ff4 <z_impl_k_mutex_lock>
   24206:	bf00      	nop
   24208:	20014d8c 	.word	0x20014d8c

0002420c <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   2420c:	b538      	push	{r3, r4, r5, lr}
   2420e:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
   24210:	f04f 31ff 	mov.w	r1, #4294967295
   24214:	f04f 30ff 	mov.w	r0, #4294967295
   24218:	f7ff fff0 	bl	241fc <k_mutex_lock.constprop.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   2421c:	2100      	movs	r1, #0
   2421e:	4628      	mov	r0, r5
   24220:	f016 fa05 	bl	3a62e <net_if_flag_is_set>
   24224:	4604      	mov	r4, r0
   24226:	bb68      	cbnz	r0, 24284 <net_if_up+0x78>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   24228:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   2422a:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   2422c:	7e9b      	ldrb	r3, [r3, #26]
   2422e:	b12b      	cbz	r3, 2423c <net_if_up+0x30>
		net_if_flag_set(iface, NET_IF_UP);
   24230:	f7ff ffb8 	bl	241a4 <net_if_flag_set.constprop.0>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
   24234:	f7ff ffdc 	bl	241f0 <k_mutex_unlock.constprop.0>

	return status;
}
   24238:	4620      	mov	r0, r4
   2423a:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   2423c:	f016 f9e5 	bl	3a60a <net_if_l2>
   24240:	4604      	mov	r4, r0
   24242:	b130      	cbz	r0, 24252 <net_if_up+0x46>
   24244:	6884      	ldr	r4, [r0, #8]
   24246:	b124      	cbz	r4, 24252 <net_if_up+0x46>
	status = net_if_l2(iface)->enable(iface, true);
   24248:	2101      	movs	r1, #1
   2424a:	4628      	mov	r0, r5
   2424c:	47a0      	blx	r4
	if (status < 0) {
   2424e:	1e04      	subs	r4, r0, #0
   24250:	dbf0      	blt.n	24234 <net_if_up+0x28>
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   24252:	682b      	ldr	r3, [r5, #0]
   24254:	691b      	ldr	r3, [r3, #16]
   24256:	b973      	cbnz	r3, 24276 <net_if_up+0x6a>
   24258:	490c      	ldr	r1, [pc, #48]	; (2428c <net_if_up+0x80>)
   2425a:	f640 7399 	movw	r3, #3993	; 0xf99
   2425e:	4a0c      	ldr	r2, [pc, #48]	; (24290 <net_if_up+0x84>)
   24260:	480c      	ldr	r0, [pc, #48]	; (24294 <net_if_up+0x88>)
   24262:	f014 ff66 	bl	39132 <printk>
   24266:	480c      	ldr	r0, [pc, #48]	; (24298 <net_if_up+0x8c>)
   24268:	f014 ff63 	bl	39132 <printk>
   2426c:	f640 7199 	movw	r1, #3993	; 0xf99
   24270:	4807      	ldr	r0, [pc, #28]	; (24290 <net_if_up+0x84>)
   24272:	f015 f9fd 	bl	39670 <assert_post_action>
	net_if_flag_set(iface, NET_IF_UP);
   24276:	4628      	mov	r0, r5
   24278:	f7ff ff94 	bl	241a4 <net_if_flag_set.constprop.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   2427c:	4628      	mov	r0, r5
   2427e:	f016 f9c9 	bl	3a614 <l2_flags_get>
notify:
   24282:	e7d7      	b.n	24234 <net_if_up+0x28>
		status = -EALREADY;
   24284:	f06f 0477 	mvn.w	r4, #119	; 0x77
   24288:	e7d4      	b.n	24234 <net_if_up+0x28>
   2428a:	bf00      	nop
   2428c:	0004186a 	.word	0x0004186a
   24290:	00041826 	.word	0x00041826
   24294:	0004033e 	.word	0x0004033e
   24298:	000408e8 	.word	0x000408e8

0002429c <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   2429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   242a0:	4e16      	ldr	r6, [pc, #88]	; (242fc <net_if_init+0x60>)
	k_mutex_lock(&lock, K_FOREVER);
   242a2:	f04f 30ff 	mov.w	r0, #4294967295
   242a6:	f04f 31ff 	mov.w	r1, #4294967295
   242aa:	f7ff ffa7 	bl	241fc <k_mutex_lock.constprop.0>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   242ae:	46b0      	mov	r8, r6
   242b0:	4c13      	ldr	r4, [pc, #76]	; (24300 <net_if_init+0x64>)
   242b2:	4f14      	ldr	r7, [pc, #80]	; (24304 <net_if_init+0x68>)
   242b4:	42b4      	cmp	r4, r6
   242b6:	4625      	mov	r5, r4
   242b8:	d90e      	bls.n	242d8 <net_if_init+0x3c>
   242ba:	4913      	ldr	r1, [pc, #76]	; (24308 <net_if_init+0x6c>)
   242bc:	f241 03b2 	movw	r3, #4274	; 0x10b2
   242c0:	463a      	mov	r2, r7
   242c2:	4812      	ldr	r0, [pc, #72]	; (2430c <net_if_init+0x70>)
   242c4:	f014 ff35 	bl	39132 <printk>
   242c8:	4811      	ldr	r0, [pc, #68]	; (24310 <net_if_init+0x74>)
   242ca:	f014 ff32 	bl	39132 <printk>
   242ce:	f241 01b2 	movw	r1, #4274	; 0x10b2
   242d2:	4638      	mov	r0, r7
   242d4:	f015 f9cc 	bl	39670 <assert_post_action>
   242d8:	4544      	cmp	r4, r8
   242da:	d303      	bcc.n	242e4 <net_if_init+0x48>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   242dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&lock);
   242e0:	f7ff bf86 	b.w	241f0 <k_mutex_unlock.constprop.0>
	return iface->if_dev->dev;
   242e4:	682b      	ldr	r3, [r5, #0]
   242e6:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   242e8:	681b      	ldr	r3, [r3, #0]
   242ea:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   242ec:	2b00      	cmp	r3, #0
   242ee:	d0e1      	beq.n	242b4 <net_if_init+0x18>
   242f0:	681b      	ldr	r3, [r3, #0]
   242f2:	2b00      	cmp	r3, #0
   242f4:	d0de      	beq.n	242b4 <net_if_init+0x18>
	api->init(iface);
   242f6:	4628      	mov	r0, r5
   242f8:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   242fa:	e7db      	b.n	242b4 <net_if_init+0x18>
   242fc:	20014ea4 	.word	0x20014ea4
   24300:	20014ea0 	.word	0x20014ea0
   24304:	00041826 	.word	0x00041826
   24308:	00041850 	.word	0x00041850
   2430c:	0004033e 	.word	0x0004033e
   24310:	00040966 	.word	0x00040966

00024314 <net_if_post_init>:

void net_if_post_init(void)
{
   24314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   24316:	4d11      	ldr	r5, [pc, #68]	; (2435c <net_if_post_init+0x48>)
   24318:	4c11      	ldr	r4, [pc, #68]	; (24360 <net_if_post_init+0x4c>)
   2431a:	462f      	mov	r7, r5
   2431c:	4e11      	ldr	r6, [pc, #68]	; (24364 <net_if_post_init+0x50>)
   2431e:	42ac      	cmp	r4, r5
   24320:	d90e      	bls.n	24340 <net_if_post_init+0x2c>
   24322:	4911      	ldr	r1, [pc, #68]	; (24368 <net_if_post_init+0x54>)
   24324:	f241 03e4 	movw	r3, #4324	; 0x10e4
   24328:	4632      	mov	r2, r6
   2432a:	4810      	ldr	r0, [pc, #64]	; (2436c <net_if_post_init+0x58>)
   2432c:	f014 ff01 	bl	39132 <printk>
   24330:	480f      	ldr	r0, [pc, #60]	; (24370 <net_if_post_init+0x5c>)
   24332:	f014 fefe 	bl	39132 <printk>
   24336:	f241 01e4 	movw	r1, #4324	; 0x10e4
   2433a:	4630      	mov	r0, r6
   2433c:	f015 f998 	bl	39670 <assert_post_action>
   24340:	42bc      	cmp	r4, r7
   24342:	d300      	bcc.n	24346 <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   24344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   24346:	2103      	movs	r1, #3
   24348:	4620      	mov	r0, r4
   2434a:	f016 f970 	bl	3a62e <net_if_flag_is_set>
   2434e:	b910      	cbnz	r0, 24356 <net_if_post_init+0x42>
			net_if_up(iface);
   24350:	4620      	mov	r0, r4
   24352:	f7ff ff5b 	bl	2420c <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   24356:	3404      	adds	r4, #4
   24358:	e7e1      	b.n	2431e <net_if_post_init+0xa>
   2435a:	bf00      	nop
   2435c:	20014ea4 	.word	0x20014ea4
   24360:	20014ea0 	.word	0x20014ea0
   24364:	00041826 	.word	0x00041826
   24368:	00041850 	.word	0x00041850
   2436c:	0004033e 	.word	0x0004033e
   24370:	00040966 	.word	0x00040966

00024374 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   24374:	2300      	movs	r3, #0
{
   24376:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   2437a:	2802      	cmp	r0, #2
{
   2437c:	b089      	sub	sp, #36	; 0x24
   2437e:	4607      	mov	r7, r0
   24380:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   24382:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   24386:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   24388:	d13e      	bne.n	24408 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   2438a:	a806      	add	r0, sp, #24
   2438c:	9105      	str	r1, [sp, #20]
   2438e:	4601      	mov	r1, r0
{
   24390:	461a      	mov	r2, r3
   24392:	e006      	b.n	243a2 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   24394:	780c      	ldrb	r4, [r1, #0]
   24396:	3201      	adds	r2, #1
   24398:	3401      	adds	r4, #1
   2439a:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   2439c:	b2d4      	uxtb	r4, r2
   2439e:	2c07      	cmp	r4, #7
   243a0:	d804      	bhi.n	243ac <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   243a2:	9c04      	ldr	r4, [sp, #16]
   243a4:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   243a8:	2c00      	cmp	r4, #0
   243aa:	d0f3      	beq.n	24394 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   243ac:	3301      	adds	r3, #1
   243ae:	2b08      	cmp	r3, #8
   243b0:	f101 0101 	add.w	r1, r1, #1
   243b4:	d1ec      	bne.n	24390 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   243b6:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   243ba:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   243be:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   243c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   243c4:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   243c6:	bf88      	it	hi
   243c8:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   243cc:	f103 0301 	add.w	r3, r3, #1
   243d0:	b2db      	uxtb	r3, r3
				pos = i;
   243d2:	bf88      	it	hi
   243d4:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   243d6:	2b08      	cmp	r3, #8
   243d8:	d1f2      	bne.n	243c0 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   243da:	469b      	mov	fp, r3
   243dc:	f1b9 0f01 	cmp.w	r9, #1
   243e0:	f04f 033a 	mov.w	r3, #58	; 0x3a
   243e4:	bf08      	it	eq
   243e6:	f04f 38ff 	moveq.w	r8, #4294967295
   243ea:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   243ec:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   243ee:	4634      	mov	r4, r6
   243f0:	460d      	mov	r5, r1
   243f2:	455d      	cmp	r5, fp
   243f4:	db17      	blt.n	24426 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   243f6:	42b4      	cmp	r4, r6
   243f8:	d008      	beq.n	2440c <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   243fa:	2300      	movs	r3, #0
   243fc:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   243fe:	bf0c      	ite	eq
   24400:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   24404:	7023      	strbne	r3, [r4, #0]
   24406:	e002      	b.n	2440e <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   24408:	2801      	cmp	r0, #1
   2440a:	d004      	beq.n	24416 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   2440c:	2600      	movs	r6, #0
	}

	return dst;
}
   2440e:	4630      	mov	r0, r6
   24410:	b009      	add	sp, #36	; 0x24
   24412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   24416:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   24418:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   2441c:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   24420:	4681      	mov	r9, r0
		delim = '.';
   24422:	9303      	str	r3, [sp, #12]
   24424:	e7e2      	b.n	243ec <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   24426:	f1bb 0f04 	cmp.w	fp, #4
   2442a:	d13b      	bne.n	244a4 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   2442c:	9b04      	ldr	r3, [sp, #16]
   2442e:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   24430:	b94a      	cbnz	r2, 24446 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   24432:	2330      	movs	r3, #48	; 0x30
   24434:	4620      	mov	r0, r4
   24436:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   2443a:	9b03      	ldr	r3, [sp, #12]
   2443c:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   2443e:	3501      	adds	r5, #1
   24440:	4604      	mov	r4, r0
   24442:	b2ed      	uxtb	r5, r5
   24444:	e7d5      	b.n	243f2 <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   24446:	f04f 0e09 	mov.w	lr, #9
   2444a:	f04f 0a00 	mov.w	sl, #0
   2444e:	e9cd 2401 	strd	r2, r4, [sp, #4]
   24452:	483a      	ldr	r0, [pc, #232]	; (2453c <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   24454:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   24458:	45f2      	cmp	sl, lr
		value = value % divisor;
   2445a:	fbbc f2f0 	udiv	r2, ip, r0
   2445e:	fb00 c212 	mls	r2, r0, r2, ip
   24462:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   24464:	dc01      	bgt.n	2446a <z_impl_net_addr_ntop+0xf6>
   24466:	4584      	cmp	ip, r0
   24468:	d308      	bcc.n	2447c <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   2446a:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   2446e:	46f2      	mov	sl, lr
   24470:	9b02      	ldr	r3, [sp, #8]
   24472:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   24476:	f803 cb01 	strb.w	ip, [r3], #1
   2447a:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   2447c:	220a      	movs	r2, #10
   2447e:	f10e 3eff 	add.w	lr, lr, #4294967295
   24482:	f1be 3fff 	cmp.w	lr, #4294967295
   24486:	fbb0 f0f2 	udiv	r0, r0, r2
   2448a:	d1e3      	bne.n	24454 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   2448c:	f04f 0200 	mov.w	r2, #0
   24490:	9b02      	ldr	r3, [sp, #8]
   24492:	701a      	strb	r2, [r3, #0]
	return buf - start;
   24494:	1b1b      	subs	r3, r3, r4
			ptr += l;
   24496:	b2da      	uxtb	r2, r3
   24498:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   2449c:	1c58      	adds	r0, r3, #1
   2449e:	9b03      	ldr	r3, [sp, #12]
   244a0:	54a3      	strb	r3, [r4, r2]
			continue;
   244a2:	e7cc      	b.n	2443e <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   244a4:	45a8      	cmp	r8, r5
   244a6:	d110      	bne.n	244ca <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   244a8:	b911      	cbnz	r1, 244b0 <z_impl_net_addr_ntop+0x13c>
   244aa:	f1b8 0f00 	cmp.w	r8, #0
   244ae:	d102      	bne.n	244b6 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   244b0:	233a      	movs	r3, #58	; 0x3a
   244b2:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   244b6:	233a      	movs	r3, #58	; 0x3a
   244b8:	4620      	mov	r0, r4
   244ba:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   244be:	f109 33ff 	add.w	r3, r9, #4294967295
   244c2:	441d      	add	r5, r3
			needcolon = false;
   244c4:	2100      	movs	r1, #0
			i += longest - 1U;
   244c6:	b2ed      	uxtb	r5, r5
			continue;
   244c8:	e7b9      	b.n	2443e <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   244ca:	b111      	cbz	r1, 244d2 <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   244cc:	233a      	movs	r3, #58	; 0x3a
   244ce:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   244d2:	9b05      	ldr	r3, [sp, #20]
   244d4:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   244d8:	0219      	lsls	r1, r3, #8
   244da:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   244de:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   244e2:	b20a      	sxth	r2, r1
		bh = value >> 8;
   244e4:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   244e8:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   244ec:	d016      	beq.n	2451c <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   244ee:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   244f0:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   244f2:	d90b      	bls.n	2450c <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   244f4:	2300      	movs	r3, #0
   244f6:	2261      	movs	r2, #97	; 0x61
   244f8:	4620      	mov	r0, r4
   244fa:	f016 f8a2 	bl	3a642 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   244fe:	2301      	movs	r3, #1
   24500:	2261      	movs	r2, #97	; 0x61
   24502:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   24504:	f016 f89d 	bl	3a642 <net_byte_to_hex>
		needcolon = true;
   24508:	2101      	movs	r1, #1
   2450a:	e798      	b.n	2443e <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   2450c:	b25b      	sxtb	r3, r3
   2450e:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   24510:	bf94      	ite	ls
   24512:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   24514:	3357      	addhi	r3, #87	; 0x57
   24516:	1c60      	adds	r0, r4, #1
   24518:	7023      	strb	r3, [r4, #0]
   2451a:	e7f0      	b.n	244fe <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   2451c:	f1ba 0f0f 	cmp.w	sl, #15
   24520:	d903      	bls.n	2452a <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   24522:	2261      	movs	r2, #97	; 0x61
   24524:	4651      	mov	r1, sl
   24526:	4620      	mov	r0, r4
   24528:	e7ec      	b.n	24504 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   2452a:	b253      	sxtb	r3, r2
   2452c:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   24530:	bf94      	ite	ls
   24532:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   24534:	3357      	addhi	r3, #87	; 0x57
   24536:	1c60      	adds	r0, r4, #1
   24538:	7023      	strb	r3, [r4, #0]
   2453a:	e7e5      	b.n	24508 <z_impl_net_addr_ntop+0x194>
   2453c:	3b9aca00 	.word	0x3b9aca00

00024540 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   24540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   24544:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   24546:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_HEXDUMP_TRC(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   2454a:	4b3b      	ldr	r3, [pc, #236]	; (24638 <connect_request_encode+0xf8>)
   2454c:	4a3b      	ldr	r2, [pc, #236]	; (2463c <connect_request_encode+0xfc>)
{
   2454e:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   24550:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   24554:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   24556:	2804      	cmp	r0, #4
   24558:	bf0c      	ite	eq
   2455a:	4610      	moveq	r0, r2
   2455c:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   2455e:	600d      	str	r5, [r1, #0]
{
   24560:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   24562:	f016 f955 	bl	3a810 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   24566:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   2456a:	4603      	mov	r3, r0
   2456c:	b938      	cbnz	r0, 2457e <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2456e:	e9d8 2000 	ldrd	r2, r0, [r8]
   24572:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   24574:	f897 107a 	ldrb.w	r1, [r7, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   24578:	d104      	bne.n	24584 <connect_request_encode+0x44>
		return -ENOMEM;
   2457a:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   2457e:	4618      	mov	r0, r3
   24580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   24584:	1c50      	adds	r0, r2, #1
   24586:	f8c8 0000 	str.w	r0, [r8]
   2458a:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   2458c:	e9d8 6200 	ldrd	r6, r2, [r8]
   24590:	4296      	cmp	r6, r2
   24592:	d0f2      	beq.n	2457a <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   24594:	1c72      	adds	r2, r6, #1
   24596:	f8c8 2000 	str.w	r2, [r8]
   2459a:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   2459c:	4641      	mov	r1, r8
   2459e:	f8b7 0078 	ldrh.w	r0, [r7, #120]	; 0x78
   245a2:	f016 f923 	bl	3a7ec <pack_uint16>
	if (err_code != 0) {
   245a6:	4603      	mov	r3, r0
   245a8:	2800      	cmp	r0, #0
   245aa:	d1e8      	bne.n	2457e <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   245ac:	f107 0048 	add.w	r0, r7, #72	; 0x48
   245b0:	f016 f92e 	bl	3a810 <pack_utf8_str>
	if (err_code != 0) {
   245b4:	4603      	mov	r3, r0
   245b6:	2800      	cmp	r0, #0
   245b8:	d1e1      	bne.n	2457e <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   245ba:	6df8      	ldr	r0, [r7, #92]	; 0x5c
	uint8_t connect_flags = client->clean_session << 1;
   245bc:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   245be:	b1d8      	cbz	r0, 245f8 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   245c0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   245c4:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   245c8:	f003 0301 	and.w	r3, r3, #1
   245cc:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   245d0:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   245d2:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   245d4:	00db      	lsls	r3, r3, #3
   245d6:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   245da:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   245dc:	f016 f918 	bl	3a810 <pack_utf8_str>
		if (err_code != 0) {
   245e0:	4603      	mov	r3, r0
   245e2:	2800      	cmp	r0, #0
   245e4:	d1cb      	bne.n	2457e <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   245e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   245e8:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   245ea:	b30b      	cbz	r3, 24630 <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   245ec:	4618      	mov	r0, r3
   245ee:	f016 f90f 	bl	3a810 <pack_utf8_str>
			if (err_code != 0) {
   245f2:	4603      	mov	r3, r0
   245f4:	2800      	cmp	r0, #0
   245f6:	d1c2      	bne.n	2457e <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   245f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
   245fa:	b138      	cbz	r0, 2460c <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   245fc:	4641      	mov	r1, r8
   245fe:	f016 f907 	bl	3a810 <pack_utf8_str>
		if (err_code != 0) {
   24602:	4603      	mov	r3, r0
   24604:	2800      	cmp	r0, #0
   24606:	d1ba      	bne.n	2457e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   24608:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   2460c:	6db8      	ldr	r0, [r7, #88]	; 0x58
   2460e:	b138      	cbz	r0, 24620 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   24610:	4641      	mov	r1, r8
   24612:	f016 f8fd 	bl	3a810 <pack_utf8_str>
		if (err_code != 0) {
   24616:	4603      	mov	r3, r0
   24618:	2800      	cmp	r0, #0
   2461a:	d1b0      	bne.n	2457e <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   2461c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   24620:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   24622:	4642      	mov	r2, r8
   24624:	4629      	mov	r1, r5
}
   24626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   2462a:	2010      	movs	r0, #16
   2462c:	f016 b90b 	b.w	3a846 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   24630:	f016 f8dc 	bl	3a7ec <pack_uint16>
   24634:	e7dd      	b.n	245f2 <connect_request_encode+0xb2>
   24636:	bf00      	nop
   24638:	0003faa8 	.word	0x0003faa8
   2463c:	0003fab0 	.word	0x0003fab0

00024640 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   24640:	e9d0 2300 	ldrd	r2, r3, [r0]
   24644:	1a9b      	subs	r3, r3, r2
   24646:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24648:	bf81      	itttt	hi
   2464a:	4b05      	ldrhi	r3, [pc, #20]	; (24660 <disconnect_encode+0x20>)
   2464c:	881b      	ldrhhi	r3, [r3, #0]
   2464e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   24650:	6803      	ldrhi	r3, [r0, #0]
   24652:	bf83      	ittte	hi
   24654:	3302      	addhi	r3, #2
   24656:	6043      	strhi	r3, [r0, #4]

	return 0;
   24658:	2000      	movhi	r0, #0
		return -ENOMEM;
   2465a:	f06f 000b 	mvnls.w	r0, #11
}
   2465e:	4770      	bx	lr
   24660:	0004189b 	.word	0x0004189b

00024664 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   24664:	e9d0 2300 	ldrd	r2, r3, [r0]
   24668:	1a9b      	subs	r3, r3, r2
   2466a:	2b01      	cmp	r3, #1
   2466c:	bf81      	itttt	hi
   2466e:	4b05      	ldrhi	r3, [pc, #20]	; (24684 <ping_request_encode+0x20>)
   24670:	881b      	ldrhhi	r3, [r3, #0]
   24672:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   24674:	6803      	ldrhi	r3, [r0, #0]
   24676:	bf83      	ittte	hi
   24678:	3302      	addhi	r3, #2
   2467a:	6043      	strhi	r3, [r0, #4]

	return 0;
   2467c:	2000      	movhi	r0, #0
		return -ENOMEM;
   2467e:	f06f 000b 	mvnls.w	r0, #11
}
   24682:	4770      	bx	lr
   24684:	0004189d 	.word	0x0004189d

00024688 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   24688:	2314      	movs	r3, #20
   2468a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   2468e:	4353      	muls	r3, r2
   24690:	4a01      	ldr	r2, [pc, #4]	; (24698 <mqtt_transport_connect+0x10>)
   24692:	58d3      	ldr	r3, [r2, r3]
   24694:	4718      	bx	r3
   24696:	bf00      	nop
   24698:	0003fab8 	.word	0x0003fab8

0002469c <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   2469c:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   2469e:	2514      	movs	r5, #20
   246a0:	4c03      	ldr	r4, [pc, #12]	; (246b0 <mqtt_transport_write+0x14>)
   246a2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   246a6:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   246aa:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   246ac:	685b      	ldr	r3, [r3, #4]
   246ae:	4718      	bx	r3
   246b0:	0003fab8 	.word	0x0003fab8

000246b4 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   246b4:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   246b6:	2414      	movs	r4, #20
   246b8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   246bc:	4a03      	ldr	r2, [pc, #12]	; (246cc <mqtt_transport_write_msg+0x18>)
   246be:	fb04 2303 	mla	r3, r4, r3, r2
}
   246c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   246c6:	689b      	ldr	r3, [r3, #8]
   246c8:	4718      	bx	r3
   246ca:	bf00      	nop
   246cc:	0003fab8 	.word	0x0003fab8

000246d0 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   246d0:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   246d2:	2614      	movs	r6, #20
   246d4:	4d04      	ldr	r5, [pc, #16]	; (246e8 <mqtt_transport_read+0x18>)
   246d6:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   246da:	fb06 5404 	mla	r4, r6, r4, r5
   246de:	68e4      	ldr	r4, [r4, #12]
   246e0:	46a4      	mov	ip, r4
							 shall_block);
}
   246e2:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   246e4:	4760      	bx	ip
   246e6:	bf00      	nop
   246e8:	0003fab8 	.word	0x0003fab8

000246ec <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   246ec:	2114      	movs	r1, #20
   246ee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   246f2:	4a02      	ldr	r2, [pc, #8]	; (246fc <mqtt_transport_disconnect+0x10>)
   246f4:	fb01 2303 	mla	r3, r1, r3, r2
   246f8:	691b      	ldr	r3, [r3, #16]
   246fa:	4718      	bx	r3
   246fc:	0003fab8 	.word	0x0003fab8

00024700 <mqtt_mutex_unlock>:
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   24700:	b510      	push	{r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   24702:	f00f fd71 	bl	341e8 <z_impl_k_mutex_unlock>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   24706:	4604      	mov	r4, r0
   24708:	b178      	cbz	r0, 2472a <mqtt_mutex_unlock+0x2a>
   2470a:	234f      	movs	r3, #79	; 0x4f
   2470c:	4a07      	ldr	r2, [pc, #28]	; (2472c <mqtt_mutex_unlock+0x2c>)
   2470e:	4908      	ldr	r1, [pc, #32]	; (24730 <mqtt_mutex_unlock+0x30>)
   24710:	4808      	ldr	r0, [pc, #32]	; (24734 <mqtt_mutex_unlock+0x34>)
   24712:	f014 fd0e 	bl	39132 <printk>
   24716:	4621      	mov	r1, r4
   24718:	4807      	ldr	r0, [pc, #28]	; (24738 <mqtt_mutex_unlock+0x38>)
   2471a:	f014 fd0a 	bl	39132 <printk>
	(void)ret;
}
   2471e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   24722:	214f      	movs	r1, #79	; 0x4f
   24724:	4801      	ldr	r0, [pc, #4]	; (2472c <mqtt_mutex_unlock+0x2c>)
   24726:	f014 bfa3 	b.w	39670 <assert_post_action>
}
   2472a:	bd10      	pop	{r4, pc}
   2472c:	000418ab 	.word	0x000418ab
   24730:	000418dc 	.word	0x000418dc
   24734:	0004033e 	.word	0x0004033e
   24738:	000418e5 	.word	0x000418e5

0002473c <mqtt_mutex_lock>:
{
   2473c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2473e:	f04f 32ff 	mov.w	r2, #4294967295
   24742:	f04f 33ff 	mov.w	r3, #4294967295
   24746:	f00f fc55 	bl	33ff4 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   2474a:	4604      	mov	r4, r0
   2474c:	b178      	cbz	r0, 2476e <mqtt_mutex_lock+0x32>
   2474e:	2345      	movs	r3, #69	; 0x45
   24750:	4a07      	ldr	r2, [pc, #28]	; (24770 <mqtt_mutex_lock+0x34>)
   24752:	4908      	ldr	r1, [pc, #32]	; (24774 <mqtt_mutex_lock+0x38>)
   24754:	4808      	ldr	r0, [pc, #32]	; (24778 <mqtt_mutex_lock+0x3c>)
   24756:	f014 fcec 	bl	39132 <printk>
   2475a:	4621      	mov	r1, r4
   2475c:	4807      	ldr	r0, [pc, #28]	; (2477c <mqtt_mutex_lock+0x40>)
   2475e:	f014 fce8 	bl	39132 <printk>
}
   24762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   24766:	2145      	movs	r1, #69	; 0x45
   24768:	4801      	ldr	r0, [pc, #4]	; (24770 <mqtt_mutex_lock+0x34>)
   2476a:	f014 bf81 	b.w	39670 <assert_post_action>
}
   2476e:	bd10      	pop	{r4, pc}
   24770:	000418ab 	.word	0x000418ab
   24774:	000418dc 	.word	0x000418dc
   24778:	0004033e 	.word	0x0004033e
   2477c:	00041907 	.word	0x00041907

00024780 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   24780:	b570      	push	{r4, r5, r6, lr}
   24782:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   24784:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24786:	6905      	ldr	r5, [r0, #16]
   24788:	b961      	cbnz	r1, 247a4 <gpio_nrfx_manage_callback+0x24>
   2478a:	4922      	ldr	r1, [pc, #136]	; (24814 <gpio_nrfx_manage_callback+0x94>)
   2478c:	2324      	movs	r3, #36	; 0x24
   2478e:	4a22      	ldr	r2, [pc, #136]	; (24818 <gpio_nrfx_manage_callback+0x98>)
   24790:	4822      	ldr	r0, [pc, #136]	; (2481c <gpio_nrfx_manage_callback+0x9c>)
   24792:	f014 fcce 	bl	39132 <printk>
   24796:	4822      	ldr	r0, [pc, #136]	; (24820 <gpio_nrfx_manage_callback+0xa0>)
   24798:	f014 fccb 	bl	39132 <printk>
   2479c:	2124      	movs	r1, #36	; 0x24
   2479e:	481e      	ldr	r0, [pc, #120]	; (24818 <gpio_nrfx_manage_callback+0x98>)
   247a0:	f014 ff66 	bl	39670 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   247a4:	6863      	ldr	r3, [r4, #4]
   247a6:	b963      	cbnz	r3, 247c2 <gpio_nrfx_manage_callback+0x42>
   247a8:	491e      	ldr	r1, [pc, #120]	; (24824 <gpio_nrfx_manage_callback+0xa4>)
   247aa:	2325      	movs	r3, #37	; 0x25
   247ac:	4a1a      	ldr	r2, [pc, #104]	; (24818 <gpio_nrfx_manage_callback+0x98>)
   247ae:	481b      	ldr	r0, [pc, #108]	; (2481c <gpio_nrfx_manage_callback+0x9c>)
   247b0:	f014 fcbf 	bl	39132 <printk>
   247b4:	481c      	ldr	r0, [pc, #112]	; (24828 <gpio_nrfx_manage_callback+0xa8>)
   247b6:	f014 fcbc 	bl	39132 <printk>
   247ba:	2125      	movs	r1, #37	; 0x25
   247bc:	4816      	ldr	r0, [pc, #88]	; (24818 <gpio_nrfx_manage_callback+0x98>)
   247be:	f014 ff57 	bl	39670 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   247c2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   247c4:	b15b      	cbz	r3, 247de <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   247c6:	2200      	movs	r2, #0
   247c8:	429c      	cmp	r4, r3
   247ca:	d113      	bne.n	247f4 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   247cc:	6823      	ldr	r3, [r4, #0]
   247ce:	b95a      	cbnz	r2, 247e8 <gpio_nrfx_manage_callback+0x68>
   247d0:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   247d2:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   247d4:	4294      	cmp	r4, r2
   247d6:	d100      	bne.n	247da <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   247d8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   247da:	2300      	movs	r3, #0
   247dc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   247de:	b976      	cbnz	r6, 247fe <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   247e0:	2000      	movs	r0, #0
				     callback, set);
}
   247e2:	bd70      	pop	{r4, r5, r6, pc}
   247e4:	460b      	mov	r3, r1
   247e6:	e7ef      	b.n	247c8 <gpio_nrfx_manage_callback+0x48>
   247e8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   247ea:	68ab      	ldr	r3, [r5, #8]
   247ec:	429c      	cmp	r4, r3
	list->tail = node;
   247ee:	bf08      	it	eq
   247f0:	60aa      	streq	r2, [r5, #8]
}
   247f2:	e7f2      	b.n	247da <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   247f4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   247f6:	461a      	mov	r2, r3
   247f8:	2900      	cmp	r1, #0
   247fa:	d1f3      	bne.n	247e4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   247fc:	b13e      	cbz	r6, 2480e <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   247fe:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   24800:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   24802:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   24804:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   24806:	2800      	cmp	r0, #0
   24808:	d1ea      	bne.n	247e0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   2480a:	60ac      	str	r4, [r5, #8]
}
   2480c:	e7e9      	b.n	247e2 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   2480e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24812:	e7e6      	b.n	247e2 <gpio_nrfx_manage_callback+0x62>
   24814:	00041954 	.word	0x00041954
   24818:	00041927 	.word	0x00041927
   2481c:	0004033e 	.word	0x0004033e
   24820:	0004195d 	.word	0x0004195d
   24824:	0004196c 	.word	0x0004196c
   24828:	0004197e 	.word	0x0004197e

0002482c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2482c:	6803      	ldr	r3, [r0, #0]
{
   2482e:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   24830:	095a      	lsrs	r2, r3, #5
   24832:	bf0c      	ite	eq
   24834:	f04f 32ff 	moveq.w	r2, #4294967295
   24838:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   2483a:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   2483e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24842:	07db      	lsls	r3, r3, #31
{
   24844:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24846:	d40b      	bmi.n	24860 <nrf_gpio_pin_port_decode+0x34>
   24848:	490f      	ldr	r1, [pc, #60]	; (24888 <nrf_gpio_pin_port_decode+0x5c>)
   2484a:	4810      	ldr	r0, [pc, #64]	; (2488c <nrf_gpio_pin_port_decode+0x60>)
   2484c:	f44f 7305 	mov.w	r3, #532	; 0x214
   24850:	4a0f      	ldr	r2, [pc, #60]	; (24890 <nrf_gpio_pin_port_decode+0x64>)
   24852:	f014 fc6e 	bl	39132 <printk>
   24856:	f44f 7105 	mov.w	r1, #532	; 0x214
   2485a:	480d      	ldr	r0, [pc, #52]	; (24890 <nrf_gpio_pin_port_decode+0x64>)
   2485c:	f014 ff08 	bl	39670 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   24860:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   24862:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24866:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   24868:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2486a:	d00b      	beq.n	24884 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   2486c:	4909      	ldr	r1, [pc, #36]	; (24894 <nrf_gpio_pin_port_decode+0x68>)
   2486e:	4807      	ldr	r0, [pc, #28]	; (2488c <nrf_gpio_pin_port_decode+0x60>)
   24870:	f240 2319 	movw	r3, #537	; 0x219
   24874:	4a06      	ldr	r2, [pc, #24]	; (24890 <nrf_gpio_pin_port_decode+0x64>)
   24876:	f014 fc5c 	bl	39132 <printk>
   2487a:	f240 2119 	movw	r1, #537	; 0x219
   2487e:	4804      	ldr	r0, [pc, #16]	; (24890 <nrf_gpio_pin_port_decode+0x64>)
   24880:	f014 fef6 	bl	39670 <assert_post_action>
}
   24884:	4804      	ldr	r0, [pc, #16]	; (24898 <nrf_gpio_pin_port_decode+0x6c>)
   24886:	bd10      	pop	{r4, pc}
   24888:	000419c8 	.word	0x000419c8
   2488c:	0004033e 	.word	0x0004033e
   24890:	00041995 	.word	0x00041995
   24894:	000451fc 	.word	0x000451fc
   24898:	40842500 	.word	0x40842500

0002489c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2489c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   2489e:	4b09      	ldr	r3, [pc, #36]	; (248c4 <gpio_nrfx_init+0x28>)
   248a0:	781a      	ldrb	r2, [r3, #0]
   248a2:	b96a      	cbnz	r2, 248c0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   248a4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   248a6:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   248a8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   248aa:	2105      	movs	r1, #5
   248ac:	f7fe fcac 	bl	23208 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   248b0:	2031      	movs	r0, #49	; 0x31
   248b2:	f7fe fc8b 	bl	231cc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   248b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   248ba:	4b03      	ldr	r3, [pc, #12]	; (248c8 <gpio_nrfx_init+0x2c>)
   248bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   248c0:	2000      	movs	r0, #0
   248c2:	bd08      	pop	{r3, pc}
   248c4:	2001ca57 	.word	0x2001ca57
   248c8:	40031000 	.word	0x40031000

000248cc <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   248cc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   248d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   248d4:	4605      	mov	r5, r0
   248d6:	460e      	mov	r6, r1
   248d8:	4690      	mov	r8, r2
   248da:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   248dc:	6904      	ldr	r4, [r0, #16]
	return port->config;
   248de:	f001 071f 	and.w	r7, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   248e2:	f040 80a7 	bne.w	24a34 <gpio_nrfx_pin_interrupt_configure+0x168>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   248e6:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   248e8:	a801      	add	r0, sp, #4
   248ea:	7a1b      	ldrb	r3, [r3, #8]
   248ec:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
   248f0:	9301      	str	r3, [sp, #4]
   248f2:	f7ff ff9b 	bl	2482c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   248f6:	9b01      	ldr	r3, [sp, #4]
   248f8:	3380      	adds	r3, #128	; 0x80
   248fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   248fe:	07d9      	lsls	r1, r3, #31
   24900:	f100 80b7 	bmi.w	24a72 <gpio_nrfx_pin_interrupt_configure+0x1a6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   24904:	2101      	movs	r1, #1
   24906:	68e3      	ldr	r3, [r4, #12]
   24908:	40b1      	lsls	r1, r6
   2490a:	4319      	orrs	r1, r3
   2490c:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   2490e:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   24910:	2000      	movs	r0, #0
   24912:	6963      	ldr	r3, [r4, #20]
   24914:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   24916:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   2491a:	bf0c      	ite	eq
   2491c:	430b      	orreq	r3, r1
   2491e:	438b      	bicne	r3, r1
   24920:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   24922:	69a3      	ldr	r3, [r4, #24]
   24924:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   24928:	bf0c      	ite	eq
   2492a:	430b      	orreq	r3, r1
   2492c:	438b      	bicne	r3, r1
   2492e:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   24930:	6923      	ldr	r3, [r4, #16]
   24932:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   24936:	bf0c      	ite	eq
   24938:	4319      	orreq	r1, r3
   2493a:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2493e:	686b      	ldr	r3, [r5, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   24940:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24942:	7a1b      	ldrb	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   24944:	f8d5 8010 	ldr.w	r8, [r5, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   24948:	4d4b      	ldr	r5, [pc, #300]	; (24a78 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2494a:	ea47 1743 	orr.w	r7, r7, r3, lsl #5
   2494e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   24952:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   24954:	f500 72a2 	add.w	r2, r0, #324	; 0x144
   24958:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2495c:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   24960:	4297      	cmp	r7, r2
   24962:	d172      	bne.n	24a4a <gpio_nrfx_pin_interrupt_configure+0x17e>
		    && (intenset & BIT(i))) {
   24964:	fa23 f200 	lsr.w	r2, r3, r0
   24968:	07d2      	lsls	r2, r2, #31
   2496a:	d56e      	bpl.n	24a4a <gpio_nrfx_pin_interrupt_configure+0x17e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   2496c:	0083      	lsls	r3, r0, #2
   2496e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24972:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   24976:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2497a:	f022 0201 	bic.w	r2, r2, #1
   2497e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   24982:	2301      	movs	r3, #1
   24984:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   24986:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   2498a:	b2c0      	uxtb	r0, r0
   2498c:	f009 fbb8 	bl	2e100 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   24990:	4638      	mov	r0, r7
   24992:	2100      	movs	r1, #0
   24994:	f016 fcef 	bl	3b376 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   24998:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2499c:	40f0      	lsrs	r0, r6
   2499e:	f010 0001 	ands.w	r0, r0, #1
   249a2:	d044      	beq.n	24a2e <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   249a4:	f8d8 0014 	ldr.w	r0, [r8, #20]
   249a8:	40f0      	lsrs	r0, r6
   249aa:	f010 0401 	ands.w	r4, r0, #1
   249ae:	d053      	beq.n	24a58 <gpio_nrfx_pin_interrupt_configure+0x18c>
				if (data->double_edge & BIT(pin)) {
   249b0:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   249b4:	a801      	add	r0, sp, #4
				if (data->double_edge & BIT(pin)) {
   249b6:	40f3      	lsrs	r3, r6
   249b8:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   249ba:	bf57      	itett	pl
   249bc:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   249c0:	2603      	movmi	r6, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   249c2:	fa21 f606 	lsrpl.w	r6, r1, r6
   249c6:	f006 0601 	andpl.w	r6, r6, #1
   249ca:	bf5c      	itt	pl
   249cc:	f1c6 0602 	rsbpl	r6, r6, #2
   249d0:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   249d2:	f009 fbb7 	bl	2e144 <nrfx_gpiote_channel_alloc>
   249d6:	4b29      	ldr	r3, [pc, #164]	; (24a7c <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   249d8:	4298      	cmp	r0, r3
   249da:	d13a      	bne.n	24a52 <gpio_nrfx_pin_interrupt_configure+0x186>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   249dc:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   249e0:	023f      	lsls	r7, r7, #8
   249e2:	008b      	lsls	r3, r1, #2
   249e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   249e8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   249ec:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   249f0:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   249f4:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   249f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   249fc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24a00:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   24a04:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24a06:	4317      	orrs	r7, r2
    return ((uint32_t)p_reg + event);
   24a08:	4a1d      	ldr	r2, [pc, #116]	; (24a80 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24a0a:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    return ((uint32_t)p_reg + event);
   24a0e:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24a10:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24a12:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24a16:	6010      	str	r0, [r2, #0]
   24a18:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   24a1a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   24a1e:	f042 0201 	orr.w	r2, r2, #1
   24a22:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   24a26:	2301      	movs	r3, #1
   24a28:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   24a2a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   24a2e:	b003      	add	sp, #12
   24a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   24a34:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   24a38:	f47f af64 	bne.w	24904 <gpio_nrfx_pin_interrupt_configure+0x38>
   24a3c:	2101      	movs	r1, #1
   24a3e:	fa01 f306 	lsl.w	r3, r1, r6
   24a42:	68e1      	ldr	r1, [r4, #12]
   24a44:	ea21 0103 	bic.w	r1, r1, r3
   24a48:	e760      	b.n	2490c <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   24a4a:	3001      	adds	r0, #1
   24a4c:	2808      	cmp	r0, #8
   24a4e:	d181      	bne.n	24954 <gpio_nrfx_pin_interrupt_configure+0x88>
   24a50:	e79e      	b.n	24990 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   24a52:	f06f 0012 	mvn.w	r0, #18
   24a56:	e7ea      	b.n	24a2e <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24a58:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24a5c:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24a5e:	40f1      	lsrs	r1, r6
   24a60:	f001 0101 	and.w	r1, r1, #1
   24a64:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24a68:	b2c9      	uxtb	r1, r1
   24a6a:	f016 fc84 	bl	3b376 <nrf_gpio_cfg_sense_set>
	int res = 0;
   24a6e:	4620      	mov	r0, r4
   24a70:	e7dd      	b.n	24a2e <gpio_nrfx_pin_interrupt_configure+0x162>
		return -ENOTSUP;
   24a72:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24a76:	e7da      	b.n	24a2e <gpio_nrfx_pin_interrupt_configure+0x162>
   24a78:	40031000 	.word	0x40031000
   24a7c:	0bad0000 	.word	0x0bad0000
   24a80:	40031100 	.word	0x40031100

00024a84 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   24a84:	4b2e      	ldr	r3, [pc, #184]	; (24b40 <gpio_nrfx_config+0xbc>)
{
   24a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   24a88:	4c2e      	ldr	r4, [pc, #184]	; (24b44 <gpio_nrfx_config+0xc0>)
   24a8a:	4013      	ands	r3, r2
   24a8c:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24a8e:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   24a90:	d044      	beq.n	24b1c <gpio_nrfx_config+0x98>
   24a92:	d80e      	bhi.n	24ab2 <gpio_nrfx_config+0x2e>
   24a94:	2b06      	cmp	r3, #6
   24a96:	d043      	beq.n	24b20 <gpio_nrfx_config+0x9c>
   24a98:	d806      	bhi.n	24aa8 <gpio_nrfx_config+0x24>
   24a9a:	2b00      	cmp	r3, #0
   24a9c:	d040      	beq.n	24b20 <gpio_nrfx_config+0x9c>
   24a9e:	2b02      	cmp	r3, #2
   24aa0:	d040      	beq.n	24b24 <gpio_nrfx_config+0xa0>
   24aa2:	f06f 0015 	mvn.w	r0, #21
   24aa6:	e037      	b.n	24b18 <gpio_nrfx_config+0x94>
   24aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   24aac:	d1f9      	bne.n	24aa2 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   24aae:	2401      	movs	r4, #1
   24ab0:	e009      	b.n	24ac6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   24ab2:	4c25      	ldr	r4, [pc, #148]	; (24b48 <gpio_nrfx_config+0xc4>)
   24ab4:	42a3      	cmp	r3, r4
   24ab6:	d037      	beq.n	24b28 <gpio_nrfx_config+0xa4>
   24ab8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   24abc:	d036      	beq.n	24b2c <gpio_nrfx_config+0xa8>
   24abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   24ac2:	d1ee      	bne.n	24aa2 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   24ac4:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   24ac6:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   24ac8:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   24acc:	bf4c      	ite	mi
   24ace:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   24ad0:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   24ad4:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   24ad8:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   24ada:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   24ade:	d507      	bpl.n	24af0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   24ae0:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24ae2:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   24ae6:	d523      	bpl.n	24b30 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   24ae8:	2301      	movs	r3, #1
   24aea:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   24aec:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   24af0:	7a03      	ldrb	r3, [r0, #8]
   24af2:	f001 011f 	and.w	r1, r1, #31
   24af6:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24afa:	a801      	add	r0, sp, #4
   24afc:	9101      	str	r1, [sp, #4]
   24afe:	f7ff fe95 	bl	2482c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   24b02:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   24b04:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   24b08:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   24b0c:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   24b10:	3280      	adds	r2, #128	; 0x80
   24b12:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   24b16:	2000      	movs	r0, #0
}
   24b18:	b003      	add	sp, #12
   24b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   24b1c:	2407      	movs	r4, #7
   24b1e:	e7d2      	b.n	24ac6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   24b20:	461c      	mov	r4, r3
   24b22:	e7d0      	b.n	24ac6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   24b24:	2404      	movs	r4, #4
   24b26:	e7ce      	b.n	24ac6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   24b28:	2405      	movs	r4, #5
   24b2a:	e7cc      	b.n	24ac6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   24b2c:	2403      	movs	r4, #3
   24b2e:	e7ca      	b.n	24ac6 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   24b30:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   24b32:	bf42      	ittt	mi
   24b34:	2301      	movmi	r3, #1
   24b36:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   24b38:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   24b3c:	e7d8      	b.n	24af0 <gpio_nrfx_config+0x6c>
   24b3e:	bf00      	nop
   24b40:	00f00006 	.word	0x00f00006
   24b44:	00100006 	.word	0x00100006
   24b48:	00400002 	.word	0x00400002

00024b4c <gpiote_event_handler>:
{
   24b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24b50:	4d53      	ldr	r5, [pc, #332]	; (24ca0 <gpiote_event_handler+0x154>)
   24b52:	682f      	ldr	r7, [r5, #0]
	if (port_event) {
   24b54:	2f00      	cmp	r7, #0
   24b56:	d05f      	beq.n	24c18 <gpiote_event_handler+0xcc>
	uint32_t out = data->pin_int_en;
   24b58:	4b52      	ldr	r3, [pc, #328]	; (24ca4 <gpiote_event_handler+0x158>)
	uint32_t bit = 1U << pin;
   24b5a:	f04f 0801 	mov.w	r8, #1
	out &= ~data->trig_edge & ~data->double_edge;
   24b5e:	e9d3 2005 	ldrd	r2, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   24b62:	68d9      	ldr	r1, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   24b64:	4302      	orrs	r2, r0
   24b66:	ea21 0902 	bic.w	r9, r1, r2
	uint32_t check_pins = level_pins;
   24b6a:	464e      	mov	r6, r9
	uint32_t pin = 0U;
   24b6c:	f04f 0a00 	mov.w	sl, #0
    return p_reg->IN;
   24b70:	4a4d      	ldr	r2, [pc, #308]	; (24ca8 <gpiote_event_handler+0x15c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   24b72:	691b      	ldr	r3, [r3, #16]
   24b74:	6914      	ldr	r4, [r2, #16]
   24b76:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   24b78:	ea29 0404 	bic.w	r4, r9, r4
	while (check_pins) {
   24b7c:	bb86      	cbnz	r6, 24be0 <gpiote_event_handler+0x94>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24b7e:	602e      	str	r6, [r5, #0]
   24b80:	682b      	ldr	r3, [r5, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   24b82:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   24b84:	2501      	movs	r5, #1
   24b86:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   24b88:	4848      	ldr	r0, [pc, #288]	; (24cac <gpiote_event_handler+0x160>)
   24b8a:	4949      	ldr	r1, [pc, #292]	; (24cb0 <gpiote_event_handler+0x164>)
   24b8c:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   24b90:	fa05 fc03 	lsl.w	ip, r5, r3
   24b94:	ea1c 0f02 	tst.w	ip, r2
   24b98:	d00f      	beq.n	24bba <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24b9a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   24b9e:	b162      	cbz	r2, 24bba <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   24ba0:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   24ba4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24ba8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   24bac:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   24bb0:	fa05 f202 	lsl.w	r2, r5, r2
   24bb4:	4314      	orrs	r4, r2
   24bb6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   24bba:	3301      	adds	r3, #1
   24bbc:	2b08      	cmp	r3, #8
   24bbe:	d1e5      	bne.n	24b8c <gpiote_event_handler+0x40>
	if (fired_triggers[0]) {
   24bc0:	bb64      	cbnz	r4, 24c1c <gpiote_event_handler+0xd0>
	if (port_event) {
   24bc2:	b157      	cbz	r7, 24bda <gpiote_event_handler+0x8e>
	uint32_t bit = 1U << pin;
   24bc4:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   24bc6:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   24bc8:	4d36      	ldr	r5, [pc, #216]	; (24ca4 <gpiote_event_handler+0x158>)
   24bca:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   24bcc:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   24bd0:	430a      	orrs	r2, r1
   24bd2:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   24bd6:	2c00      	cmp	r4, #0
   24bd8:	d14f      	bne.n	24c7a <gpiote_event_handler+0x12e>
}
   24bda:	b003      	add	sp, #12
   24bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   24be0:	ea18 0f06 	tst.w	r8, r6
   24be4:	d013      	beq.n	24c0e <gpiote_event_handler+0xc2>
			if (!(level_pins & bit)) {
   24be6:	ea18 0f09 	tst.w	r8, r9
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24bea:	f00a 0b1f 	and.w	fp, sl, #31
			if (!(level_pins & bit)) {
   24bee:	d108      	bne.n	24c02 <gpiote_event_handler+0xb6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24bf0:	a801      	add	r0, sp, #4
   24bf2:	f8cd b004 	str.w	fp, [sp, #4]
   24bf6:	f7ff fe19 	bl	2482c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24bfa:	9b01      	ldr	r3, [sp, #4]
   24bfc:	3380      	adds	r3, #128	; 0x80
   24bfe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   24c02:	2100      	movs	r1, #0
   24c04:	4658      	mov	r0, fp
   24c06:	f016 fbb6 	bl	3b376 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   24c0a:	ea26 0608 	bic.w	r6, r6, r8
		++pin;
   24c0e:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
   24c12:	ea4f 0848 	mov.w	r8, r8, lsl #1
   24c16:	e7b1      	b.n	24b7c <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   24c18:	463c      	mov	r4, r7
   24c1a:	e7b2      	b.n	24b82 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24c1c:	4b21      	ldr	r3, [pc, #132]	; (24ca4 <gpiote_event_handler+0x158>)
   24c1e:	685d      	ldr	r5, [r3, #4]
   24c20:	2d00      	cmp	r5, #0
   24c22:	d0ce      	beq.n	24bc2 <gpiote_event_handler+0x76>
	return node->next;
   24c24:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   24c26:	f8df 9094 	ldr.w	r9, [pc, #148]	; 24cbc <gpiote_event_handler+0x170>
   24c2a:	2e00      	cmp	r6, #0
   24c2c:	bf38      	it	cc
   24c2e:	2600      	movcc	r6, #0
			__ASSERT(cb->handler, "No callback handler!");
   24c30:	f8df 808c 	ldr.w	r8, [pc, #140]	; 24cc0 <gpiote_event_handler+0x174>
   24c34:	f8df a08c 	ldr.w	sl, [pc, #140]	; 24cc4 <gpiote_event_handler+0x178>
		if (cb->pin_mask & pins) {
   24c38:	68ab      	ldr	r3, [r5, #8]
   24c3a:	421c      	tst	r4, r3
   24c3c:	d014      	beq.n	24c68 <gpiote_event_handler+0x11c>
			__ASSERT(cb->handler, "No callback handler!");
   24c3e:	686b      	ldr	r3, [r5, #4]
   24c40:	b963      	cbnz	r3, 24c5c <gpiote_event_handler+0x110>
   24c42:	4651      	mov	r1, sl
   24c44:	2345      	movs	r3, #69	; 0x45
   24c46:	4642      	mov	r2, r8
   24c48:	481a      	ldr	r0, [pc, #104]	; (24cb4 <gpiote_event_handler+0x168>)
   24c4a:	f014 fa72 	bl	39132 <printk>
   24c4e:	481a      	ldr	r0, [pc, #104]	; (24cb8 <gpiote_event_handler+0x16c>)
   24c50:	f014 fa6f 	bl	39132 <printk>
   24c54:	2145      	movs	r1, #69	; 0x45
   24c56:	4640      	mov	r0, r8
   24c58:	f014 fd0a 	bl	39670 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   24c5c:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   24c60:	4629      	mov	r1, r5
   24c62:	4648      	mov	r0, r9
   24c64:	4022      	ands	r2, r4
   24c66:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24c68:	2e00      	cmp	r6, #0
   24c6a:	d0aa      	beq.n	24bc2 <gpiote_event_handler+0x76>
   24c6c:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24c6e:	4635      	mov	r5, r6
   24c70:	2b00      	cmp	r3, #0
   24c72:	bf38      	it	cc
   24c74:	2300      	movcc	r3, #0
   24c76:	461e      	mov	r6, r3
   24c78:	e7de      	b.n	24c38 <gpiote_event_handler+0xec>
		if (level_pins & bit) {
   24c7a:	4226      	tst	r6, r4
   24c7c:	d00c      	beq.n	24c98 <gpiote_event_handler+0x14c>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24c7e:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24c80:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24c84:	40f9      	lsrs	r1, r7
   24c86:	f001 0101 	and.w	r1, r1, #1
   24c8a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24c8e:	b2c9      	uxtb	r1, r1
   24c90:	f016 fb71 	bl	3b376 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   24c94:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   24c98:	3701      	adds	r7, #1
		bit <<= 1;
   24c9a:	0076      	lsls	r6, r6, #1
   24c9c:	e79b      	b.n	24bd6 <gpiote_event_handler+0x8a>
   24c9e:	bf00      	nop
   24ca0:	4003117c 	.word	0x4003117c
   24ca4:	200171a0 	.word	0x200171a0
   24ca8:	40842500 	.word	0x40842500
   24cac:	40031000 	.word	0x40031000
   24cb0:	40031100 	.word	0x40031100
   24cb4:	0004033e 	.word	0x0004033e
   24cb8:	0004197e 	.word	0x0004197e
   24cbc:	20014b1c 	.word	0x20014b1c
   24cc0:	00041927 	.word	0x00041927
   24cc4:	00045509 	.word	0x00045509

00024cc8 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   24cc8:	b510      	push	{r4, lr}
   24cca:	4604      	mov	r4, r0
   24ccc:	2200      	movs	r2, #0
   24cce:	2101      	movs	r1, #1
   24cd0:	200a      	movs	r0, #10
   24cd2:	f7fe fa99 	bl	23208 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   24cd6:	6860      	ldr	r0, [r4, #4]
   24cd8:	6923      	ldr	r3, [r4, #16]
   24cda:	4a0c      	ldr	r2, [pc, #48]	; (24d0c <twim_2_init+0x44>)
   24cdc:	f100 0108 	add.w	r1, r0, #8
   24ce0:	f00a f86e 	bl	2edc0 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   24ce4:	4b0a      	ldr	r3, [pc, #40]	; (24d10 <twim_2_init+0x48>)
   24ce6:	4298      	cmp	r0, r3
   24ce8:	d00d      	beq.n	24d06 <twim_2_init+0x3e>
   24cea:	480a      	ldr	r0, [pc, #40]	; (24d14 <twim_2_init+0x4c>)
   24cec:	4b0a      	ldr	r3, [pc, #40]	; (24d18 <twim_2_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   24cee:	6822      	ldr	r2, [r4, #0]
   24cf0:	1a1b      	subs	r3, r3, r0
   24cf2:	08db      	lsrs	r3, r3, #3
   24cf4:	019b      	lsls	r3, r3, #6
   24cf6:	f043 0001 	orr.w	r0, r3, #1
   24cfa:	4908      	ldr	r1, [pc, #32]	; (24d1c <twim_2_init+0x54>)
   24cfc:	f014 fce7 	bl	396ce <log_string_sync>
		return -EBUSY;
   24d00:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(2);
   24d04:	bd10      	pop	{r4, pc}
	return 0;
   24d06:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(2);
   24d08:	e7fc      	b.n	24d04 <twim_2_init+0x3c>
   24d0a:	bf00      	nop
   24d0c:	00024d75 	.word	0x00024d75
   24d10:	0bad0000 	.word	0x0bad0000
   24d14:	0003f5a4 	.word	0x0003f5a4
   24d18:	0003f634 	.word	0x0003f634
   24d1c:	000419ef 	.word	0x000419ef

00024d20 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   24d20:	07ca      	lsls	r2, r1, #31
{
   24d22:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   24d24:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   24d26:	d40f      	bmi.n	24d48 <i2c_nrfx_twim_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   24d28:	f3c1 0242 	ubfx	r2, r1, #1, #3
   24d2c:	2a01      	cmp	r2, #1
   24d2e:	d00e      	beq.n	24d4e <i2c_nrfx_twim_configure+0x2e>
   24d30:	2a02      	cmp	r2, #2
   24d32:	d015      	beq.n	24d60 <i2c_nrfx_twim_configure+0x40>
   24d34:	480c      	ldr	r0, [pc, #48]	; (24d68 <i2c_nrfx_twim_configure+0x48>)
   24d36:	4b0d      	ldr	r3, [pc, #52]	; (24d6c <i2c_nrfx_twim_configure+0x4c>)
		LOG_ERR("unsupported speed");
   24d38:	490d      	ldr	r1, [pc, #52]	; (24d70 <i2c_nrfx_twim_configure+0x50>)
   24d3a:	1ac0      	subs	r0, r0, r3
   24d3c:	08c0      	lsrs	r0, r0, #3
   24d3e:	0180      	lsls	r0, r0, #6
   24d40:	f040 0001 	orr.w	r0, r0, #1
   24d44:	f014 fcc3 	bl	396ce <log_string_sync>
		return -EINVAL;
   24d48:	f06f 0015 	mvn.w	r0, #21
   24d4c:	e007      	b.n	24d5e <i2c_nrfx_twim_configure+0x3e>
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   24d4e:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   24d52:	681b      	ldr	r3, [r3, #0]
   24d54:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   24d58:	6903      	ldr	r3, [r0, #16]
	return 0;
   24d5a:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   24d5c:	6359      	str	r1, [r3, #52]	; 0x34
}
   24d5e:	bd08      	pop	{r3, pc}
   24d60:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   24d64:	681b      	ldr	r3, [r3, #0]
   24d66:	e7f5      	b.n	24d54 <i2c_nrfx_twim_configure+0x34>
   24d68:	0003f634 	.word	0x0003f634
   24d6c:	0003f5a4 	.word	0x0003f5a4
   24d70:	00041a0f 	.word	0x00041a0f

00024d74 <event_handler>:
	switch (p_event->type) {
   24d74:	7803      	ldrb	r3, [r0, #0]
   24d76:	2b01      	cmp	r3, #1
   24d78:	d008      	beq.n	24d8c <event_handler+0x18>
   24d7a:	2b02      	cmp	r3, #2
   24d7c:	d008      	beq.n	24d90 <event_handler+0x1c>
   24d7e:	b94b      	cbnz	r3, 24d94 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   24d80:	4b05      	ldr	r3, [pc, #20]	; (24d98 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   24d82:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   24d84:	f101 0018 	add.w	r0, r1, #24
   24d88:	f00f baf6 	b.w	34378 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   24d8c:	4b03      	ldr	r3, [pc, #12]	; (24d9c <event_handler+0x28>)
   24d8e:	e7f8      	b.n	24d82 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   24d90:	4b03      	ldr	r3, [pc, #12]	; (24da0 <event_handler+0x2c>)
   24d92:	e7f6      	b.n	24d82 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   24d94:	4b03      	ldr	r3, [pc, #12]	; (24da4 <event_handler+0x30>)
   24d96:	e7f4      	b.n	24d82 <event_handler+0xe>
   24d98:	0bad0000 	.word	0x0bad0000
   24d9c:	0bae0001 	.word	0x0bae0001
   24da0:	0bae0002 	.word	0x0bae0002
   24da4:	0bad0001 	.word	0x0bad0001

00024da8 <i2c_nrfx_twim_transfer>:
{
   24da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24dac:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   24dae:	2214      	movs	r2, #20
{
   24db0:	461e      	mov	r6, r3
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   24db2:	6904      	ldr	r4, [r0, #16]
{
   24db4:	b08b      	sub	sp, #44	; 0x2c
   24db6:	4605      	mov	r5, r0
   24db8:	4689      	mov	r9, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   24dba:	eb0d 0002 	add.w	r0, sp, r2
   24dbe:	2100      	movs	r1, #0
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   24dc0:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   24dc4:	f8b4 a038 	ldrh.w	sl, [r4, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
   24dc8:	f019 f8ef 	bl	3dfaa <memset>
   24dcc:	f88d 6015 	strb.w	r6, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
   24dd0:	f04f 32ff 	mov.w	r2, #4294967295
   24dd4:	f04f 33ff 	mov.w	r3, #4294967295
   24dd8:	4620      	mov	r0, r4
   24dda:	f00f fb11 	bl	34400 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   24dde:	6928      	ldr	r0, [r5, #16]
   24de0:	3018      	adds	r0, #24
	for (size_t i = 0; i < num_msgs; i++) {
   24de2:	2700      	movs	r7, #0
   24de4:	2200      	movs	r2, #0
   24de6:	2300      	movs	r3, #0
   24de8:	f00f fb0a 	bl	34400 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   24dec:	6868      	ldr	r0, [r5, #4]
   24dee:	f00a f861 	bl	2eeb4 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   24df2:	464e      	mov	r6, r9
	uint32_t concat_len = 0;
   24df4:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
   24df6:	455f      	cmp	r7, fp
   24df8:	d301      	bcc.n	24dfe <i2c_nrfx_twim_transfer+0x56>
   24dfa:	2400      	movs	r4, #0
   24dfc:	e049      	b.n	24e92 <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   24dfe:	7a32      	ldrb	r2, [r6, #8]
   24e00:	0710      	lsls	r0, r2, #28
   24e02:	f100 80ae 	bmi.w	24f62 <i2c_nrfx_twim_transfer+0x1ba>
			&& ((msgs[i].flags & I2C_MSG_READ)
   24e06:	f1ba 0f00 	cmp.w	sl, #0
   24e0a:	d00d      	beq.n	24e28 <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
   24e0c:	1c7b      	adds	r3, r7, #1
   24e0e:	459b      	cmp	fp, r3
   24e10:	d90a      	bls.n	24e28 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
   24e12:	0791      	lsls	r1, r2, #30
   24e14:	d408      	bmi.n	24e28 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   24e16:	7d33      	ldrb	r3, [r6, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
   24e18:	ea82 0103 	eor.w	r1, r2, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
   24e1c:	f001 0101 	and.w	r1, r1, #1
   24e20:	f003 0304 	and.w	r3, r3, #4
   24e24:	430b      	orrs	r3, r1
   24e26:	d01f      	beq.n	24e68 <i2c_nrfx_twim_transfer+0xc0>
		if (concat_next || (concat_len != 0)) {
   24e28:	2c00      	cmp	r4, #0
   24e2a:	d13c      	bne.n	24ea6 <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
   24e2c:	2400      	movs	r4, #0
   24e2e:	6833      	ldr	r3, [r6, #0]
   24e30:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
   24e32:	6873      	ldr	r3, [r6, #4]
   24e34:	9306      	str	r3, [sp, #24]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   24e36:	7a33      	ldrb	r3, [r6, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   24e38:	6868      	ldr	r0, [r5, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   24e3a:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   24e3e:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   24e42:	f88d 2014 	strb.w	r2, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   24e46:	a905      	add	r1, sp, #20
   24e48:	bf0c      	ite	eq
   24e4a:	2220      	moveq	r2, #32
   24e4c:	2200      	movne	r2, #0
   24e4e:	f00a f893 	bl	2ef78 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   24e52:	4b45      	ldr	r3, [pc, #276]	; (24f68 <i2c_nrfx_twim_transfer+0x1c0>)
   24e54:	4298      	cmp	r0, r3
   24e56:	d03b      	beq.n	24ed0 <i2c_nrfx_twim_transfer+0x128>
			if (res == NRFX_ERROR_BUSY) {
   24e58:	330b      	adds	r3, #11
				ret = -EIO;
   24e5a:	4298      	cmp	r0, r3
   24e5c:	bf0c      	ite	eq
   24e5e:	f06f 040f 	mvneq.w	r4, #15
   24e62:	f06f 0404 	mvnne.w	r4, #4
   24e66:	e014      	b.n	24e92 <i2c_nrfx_twim_transfer+0xea>
			&& ((msgs[i].flags & I2C_MSG_READ)
   24e68:	2301      	movs	r3, #1
   24e6a:	9303      	str	r3, [sp, #12]
			if ((concat_len + msgs[i].len) > concat_buf_size) {
   24e6c:	6873      	ldr	r3, [r6, #4]
   24e6e:	1919      	adds	r1, r3, r4
   24e70:	4551      	cmp	r1, sl
   24e72:	d91a      	bls.n	24eaa <i2c_nrfx_twim_transfer+0x102>
   24e74:	4a3d      	ldr	r2, [pc, #244]	; (24f6c <i2c_nrfx_twim_transfer+0x1c4>)
   24e76:	483e      	ldr	r0, [pc, #248]	; (24f70 <i2c_nrfx_twim_transfer+0x1c8>)
				LOG_ERR("concat-buf overflow: %u + %u > %u",
   24e78:	493e      	ldr	r1, [pc, #248]	; (24f74 <i2c_nrfx_twim_transfer+0x1cc>)
   24e7a:	1a80      	subs	r0, r0, r2
   24e7c:	08c0      	lsrs	r0, r0, #3
   24e7e:	0180      	lsls	r0, r0, #6
   24e80:	4622      	mov	r2, r4
   24e82:	f8cd a000 	str.w	sl, [sp]
   24e86:	f040 0001 	orr.w	r0, r0, #1
   24e8a:	f014 fc20 	bl	396ce <log_string_sync>
				ret = -ENOSPC;
   24e8e:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   24e92:	6868      	ldr	r0, [r5, #4]
   24e94:	f00a f838 	bl	2ef08 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   24e98:	6928      	ldr	r0, [r5, #16]
	z_impl_k_sem_give(sem);
   24e9a:	f00f fa6d 	bl	34378 <z_impl_k_sem_give>
}
   24e9e:	4620      	mov	r0, r4
   24ea0:	b00b      	add	sp, #44	; 0x2c
   24ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
   24ea6:	2300      	movs	r3, #0
   24ea8:	e7df      	b.n	24e6a <i2c_nrfx_twim_transfer+0xc2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   24eaa:	07d2      	lsls	r2, r2, #31
   24eac:	d405      	bmi.n	24eba <i2c_nrfx_twim_transfer+0x112>
   24eae:	461a      	mov	r2, r3
   24eb0:	6831      	ldr	r1, [r6, #0]
   24eb2:	eb08 0004 	add.w	r0, r8, r4
   24eb6:	f019 f858 	bl	3df6a <memcpy>
			concat_len += msgs[i].len;
   24eba:	6873      	ldr	r3, [r6, #4]
   24ebc:	441c      	add	r4, r3
		if (concat_next) {
   24ebe:	9b03      	ldr	r3, [sp, #12]
   24ec0:	2b00      	cmp	r3, #0
   24ec2:	d138      	bne.n	24f36 <i2c_nrfx_twim_transfer+0x18e>
		if (concat_len == 0) {
   24ec4:	2c00      	cmp	r4, #0
   24ec6:	d0b1      	beq.n	24e2c <i2c_nrfx_twim_transfer+0x84>
			cur_xfer.p_primary_buf = concat_buf;
   24ec8:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = concat_len;
   24ecc:	9406      	str	r4, [sp, #24]
   24ece:	e7b2      	b.n	24e36 <i2c_nrfx_twim_transfer+0x8e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   24ed0:	6928      	ldr	r0, [r5, #16]
   24ed2:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   24ed4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   24ed8:	2300      	movs	r3, #0
   24eda:	f00f fa91 	bl	34400 <z_impl_k_sem_take>
		if (ret != 0) {
   24ede:	b1a8      	cbz	r0, 24f0c <i2c_nrfx_twim_transfer+0x164>
   24ee0:	4b22      	ldr	r3, [pc, #136]	; (24f6c <i2c_nrfx_twim_transfer+0x1c4>)
   24ee2:	4823      	ldr	r0, [pc, #140]	; (24f70 <i2c_nrfx_twim_transfer+0x1c8>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   24ee4:	4924      	ldr	r1, [pc, #144]	; (24f78 <i2c_nrfx_twim_transfer+0x1d0>)
   24ee6:	1ac0      	subs	r0, r0, r3
   24ee8:	08c0      	lsrs	r0, r0, #3
   24eea:	0180      	lsls	r0, r0, #6
   24eec:	463a      	mov	r2, r7
   24eee:	f040 0001 	orr.w	r0, r0, #1
   24ef2:	f014 fbec 	bl	396ce <log_string_sync>
			nrfx_twim_disable(&get_dev_config(dev)->twim);
   24ef6:	6868      	ldr	r0, [r5, #4]
   24ef8:	f00a f806 	bl	2ef08 <nrfx_twim_disable>
			nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
   24efc:	686b      	ldr	r3, [r5, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   24efe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   24f02:	f00a fc51 	bl	2f7a8 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   24f06:	f06f 0404 	mvn.w	r4, #4
			break;
   24f0a:	e7c2      	b.n	24e92 <i2c_nrfx_twim_transfer+0xea>
		res = get_dev_data(dev)->res;
   24f0c:	692b      	ldr	r3, [r5, #16]
   24f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   24f10:	4b15      	ldr	r3, [pc, #84]	; (24f68 <i2c_nrfx_twim_transfer+0x1c0>)
   24f12:	429a      	cmp	r2, r3
   24f14:	d00b      	beq.n	24f2e <i2c_nrfx_twim_transfer+0x186>
   24f16:	4b15      	ldr	r3, [pc, #84]	; (24f6c <i2c_nrfx_twim_transfer+0x1c4>)
   24f18:	4815      	ldr	r0, [pc, #84]	; (24f70 <i2c_nrfx_twim_transfer+0x1c8>)
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   24f1a:	4918      	ldr	r1, [pc, #96]	; (24f7c <i2c_nrfx_twim_transfer+0x1d4>)
   24f1c:	1ac0      	subs	r0, r0, r3
   24f1e:	08c0      	lsrs	r0, r0, #3
   24f20:	0180      	lsls	r0, r0, #6
   24f22:	463b      	mov	r3, r7
   24f24:	f040 0001 	orr.w	r0, r0, #1
   24f28:	f014 fbd1 	bl	396ce <log_string_sync>
   24f2c:	e7eb      	b.n	24f06 <i2c_nrfx_twim_transfer+0x15e>
		if ((msgs[i].flags & I2C_MSG_READ)
   24f2e:	7a33      	ldrb	r3, [r6, #8]
   24f30:	07db      	lsls	r3, r3, #31
   24f32:	d403      	bmi.n	24f3c <i2c_nrfx_twim_transfer+0x194>
		concat_len = 0;
   24f34:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
   24f36:	3701      	adds	r7, #1
   24f38:	360c      	adds	r6, #12
   24f3a:	e75c      	b.n	24df6 <i2c_nrfx_twim_transfer+0x4e>
		    && cur_xfer.p_primary_buf == concat_buf) {
   24f3c:	9b08      	ldr	r3, [sp, #32]
   24f3e:	4598      	cmp	r8, r3
   24f40:	d1f8      	bne.n	24f34 <i2c_nrfx_twim_transfer+0x18c>
			while (concat_len >= msgs[j].len) {
   24f42:	230c      	movs	r3, #12
   24f44:	fb03 9307 	mla	r3, r3, r7, r9
   24f48:	685a      	ldr	r2, [r3, #4]
   24f4a:	3b0c      	subs	r3, #12
   24f4c:	4294      	cmp	r4, r2
   24f4e:	d3f1      	bcc.n	24f34 <i2c_nrfx_twim_transfer+0x18c>
				concat_len -= msgs[j].len;
   24f50:	1aa4      	subs	r4, r4, r2
   24f52:	68d8      	ldr	r0, [r3, #12]
   24f54:	eb08 0104 	add.w	r1, r8, r4
   24f58:	9303      	str	r3, [sp, #12]
   24f5a:	f019 f806 	bl	3df6a <memcpy>
   24f5e:	9b03      	ldr	r3, [sp, #12]
				j--;
   24f60:	e7f2      	b.n	24f48 <i2c_nrfx_twim_transfer+0x1a0>
			ret = -ENOTSUP;
   24f62:	f06f 0485 	mvn.w	r4, #133	; 0x85
   24f66:	e794      	b.n	24e92 <i2c_nrfx_twim_transfer+0xea>
   24f68:	0bad0000 	.word	0x0bad0000
   24f6c:	0003f5a4 	.word	0x0003f5a4
   24f70:	0003f634 	.word	0x0003f634
   24f74:	00041a21 	.word	0x00041a21
   24f78:	00041a43 	.word	0x00041a43
   24f7c:	00041a6d 	.word	0x00041a6d

00024f80 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   24f80:	2100      	movs	r1, #0
   24f82:	4802      	ldr	r0, [pc, #8]	; (24f8c <pwm_nrfx_get_cycles_per_sec+0xc>)
   24f84:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   24f88:	2000      	movs	r0, #0
   24f8a:	4770      	bx	lr
   24f8c:	00f42400 	.word	0x00f42400

00024f90 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24f90:	6803      	ldr	r3, [r0, #0]
{
   24f92:	b510      	push	{r4, lr}
    switch (port)
   24f94:	095a      	lsrs	r2, r3, #5
   24f96:	bf0c      	ite	eq
   24f98:	f04f 32ff 	moveq.w	r2, #4294967295
   24f9c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   24f9e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   24fa2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24fa6:	07db      	lsls	r3, r3, #31
{
   24fa8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24faa:	d40b      	bmi.n	24fc4 <nrf_gpio_pin_port_decode+0x34>
   24fac:	490f      	ldr	r1, [pc, #60]	; (24fec <nrf_gpio_pin_port_decode+0x5c>)
   24fae:	4810      	ldr	r0, [pc, #64]	; (24ff0 <nrf_gpio_pin_port_decode+0x60>)
   24fb0:	f44f 7305 	mov.w	r3, #532	; 0x214
   24fb4:	4a0f      	ldr	r2, [pc, #60]	; (24ff4 <nrf_gpio_pin_port_decode+0x64>)
   24fb6:	f014 f8bc 	bl	39132 <printk>
   24fba:	f44f 7105 	mov.w	r1, #532	; 0x214
   24fbe:	480d      	ldr	r0, [pc, #52]	; (24ff4 <nrf_gpio_pin_port_decode+0x64>)
   24fc0:	f014 fb56 	bl	39670 <assert_post_action>
    uint32_t pin_number = *p_pin;
   24fc4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   24fc6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24fca:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   24fcc:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24fce:	d00b      	beq.n	24fe8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   24fd0:	4909      	ldr	r1, [pc, #36]	; (24ff8 <nrf_gpio_pin_port_decode+0x68>)
   24fd2:	4807      	ldr	r0, [pc, #28]	; (24ff0 <nrf_gpio_pin_port_decode+0x60>)
   24fd4:	f240 2319 	movw	r3, #537	; 0x219
   24fd8:	4a06      	ldr	r2, [pc, #24]	; (24ff4 <nrf_gpio_pin_port_decode+0x64>)
   24fda:	f014 f8aa 	bl	39132 <printk>
   24fde:	f240 2119 	movw	r1, #537	; 0x219
   24fe2:	4804      	ldr	r0, [pc, #16]	; (24ff4 <nrf_gpio_pin_port_decode+0x64>)
   24fe4:	f014 fb44 	bl	39670 <assert_post_action>
}
   24fe8:	4804      	ldr	r0, [pc, #16]	; (24ffc <nrf_gpio_pin_port_decode+0x6c>)
   24fea:	bd10      	pop	{r4, pc}
   24fec:	000419c8 	.word	0x000419c8
   24ff0:	0004033e 	.word	0x0004033e
   24ff4:	00041995 	.word	0x00041995
   24ff8:	000451fc 	.word	0x000451fc
   24ffc:	40842500 	.word	0x40842500

00025000 <pwm_nrfx_init>:

static int pwm_nrfx_init(const struct device *dev)
{
	const struct pwm_nrfx_config *config = dev->config;

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   25000:	2300      	movs	r3, #0
{
   25002:	b510      	push	{r4, lr}
   25004:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config;
   25006:	6840      	ldr	r0, [r0, #4]
	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   25008:	461a      	mov	r2, r3
   2500a:	f100 0108 	add.w	r1, r0, #8
   2500e:	f009 fadb 	bl	2e5c8 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   25012:	4b09      	ldr	r3, [pc, #36]	; (25038 <pwm_nrfx_init+0x38>)
   25014:	4298      	cmp	r0, r3
   25016:	d00d      	beq.n	25034 <pwm_nrfx_init+0x34>
   25018:	4808      	ldr	r0, [pc, #32]	; (2503c <pwm_nrfx_init+0x3c>)
   2501a:	4b09      	ldr	r3, [pc, #36]	; (25040 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   2501c:	6822      	ldr	r2, [r4, #0]
   2501e:	1a1b      	subs	r3, r3, r0
   25020:	08db      	lsrs	r3, r3, #3
   25022:	019b      	lsls	r3, r3, #6
   25024:	f043 0001 	orr.w	r0, r3, #1
   25028:	4906      	ldr	r1, [pc, #24]	; (25044 <pwm_nrfx_init+0x44>)
   2502a:	f014 fb50 	bl	396ce <log_string_sync>
		return -EBUSY;
   2502e:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
   25032:	bd10      	pop	{r4, pc}
	return 0;
   25034:	2000      	movs	r0, #0
   25036:	e7fc      	b.n	25032 <pwm_nrfx_init+0x32>
   25038:	0bad0000 	.word	0x0bad0000
   2503c:	0003f5a4 	.word	0x0003f5a4
   25040:	0003f6c4 	.word	0x0003f6c4
   25044:	000419ef 	.word	0x000419ef

00025048 <pwm_nrfx_pin_set>:
{
   25048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2504c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   25050:	4688      	mov	r8, r1
   25052:	4616      	mov	r6, r2
   25054:	4699      	mov	r9, r3
	const struct pwm_nrfx_config *config = dev->config;
   25056:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
   25058:	6904      	ldr	r4, [r0, #16]
	if (flags) {
   2505a:	2d00      	cmp	r5, #0
   2505c:	f040 8082 	bne.w	25164 <pwm_nrfx_pin_set+0x11c>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   25060:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   25062:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   25066:	2bff      	cmp	r3, #255	; 0xff
   25068:	d003      	beq.n	25072 <pwm_nrfx_pin_set+0x2a>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   2506a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2506e:	4598      	cmp	r8, r3
   25070:	d07b      	beq.n	2516a <pwm_nrfx_pin_set+0x122>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   25072:	3501      	adds	r5, #1
   25074:	b2ed      	uxtb	r5, r5
   25076:	2d04      	cmp	r5, #4
   25078:	d1f3      	bne.n	25062 <pwm_nrfx_pin_set+0x1a>
   2507a:	485d      	ldr	r0, [pc, #372]	; (251f0 <pwm_nrfx_pin_set+0x1a8>)
   2507c:	4b5d      	ldr	r3, [pc, #372]	; (251f4 <pwm_nrfx_pin_set+0x1ac>)
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   2507e:	4642      	mov	r2, r8
   25080:	1ac0      	subs	r0, r0, r3
   25082:	08c0      	lsrs	r0, r0, #3
   25084:	495c      	ldr	r1, [pc, #368]	; (251f8 <pwm_nrfx_pin_set+0x1b0>)
   25086:	0180      	lsls	r0, r0, #6
   25088:	e041      	b.n	2510e <pwm_nrfx_pin_set+0xc6>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   2508a:	2000      	movs	r0, #0
   2508c:	e07e      	b.n	2518c <pwm_nrfx_pin_set+0x144>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   2508e:	3301      	adds	r3, #1
   25090:	2b04      	cmp	r3, #4
   25092:	f040 8087 	bne.w	251a4 <pwm_nrfx_pin_set+0x15c>
   25096:	4632      	mov	r2, r6
   25098:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   2509a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   2509e:	fa5f fc83 	uxtb.w	ip, r3
   250a2:	d228      	bcs.n	250f6 <pwm_nrfx_pin_set+0xae>
			data->prescaler     = prescaler;
   250a4:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
   250a8:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
   250ac:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
   250ae:	81a2      	strh	r2, [r4, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   250b0:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
   250b4:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   250b8:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   250bc:	454e      	cmp	r6, r9
   250be:	4633      	mov	r3, r6
   250c0:	bf28      	it	cs
   250c2:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
   250c4:	7ba2      	ldrb	r2, [r4, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   250c6:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
   250ca:	fa23 f202 	lsr.w	r2, r3, r2
   250ce:	ea42 020b 	orr.w	r2, r2, fp
   250d2:	b292      	uxth	r2, r2
	data->current[channel] = (
   250d4:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
   250d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   250dc:	b112      	cbz	r2, 250e4 <pwm_nrfx_pin_set+0x9c>
   250de:	89a1      	ldrh	r1, [r4, #12]
   250e0:	4291      	cmp	r1, r2
   250e2:	d819      	bhi.n	25118 <pwm_nrfx_pin_set+0xd0>
			config->initial_config.output_pins[channel]
   250e4:	197a      	adds	r2, r7, r5
   250e6:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
   250ea:	b1c3      	cbz	r3, 2511e <pwm_nrfx_pin_set+0xd6>
			&& channel_inverted_state;
   250ec:	454e      	cmp	r6, r9
   250ee:	d875      	bhi.n	251dc <pwm_nrfx_pin_set+0x194>
   250f0:	2a00      	cmp	r2, #0
   250f2:	db16      	blt.n	25122 <pwm_nrfx_pin_set+0xda>
   250f4:	e072      	b.n	251dc <pwm_nrfx_pin_set+0x194>
		countertop >>= 1;
   250f6:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   250f8:	2b08      	cmp	r3, #8
		countertop >>= 1;
   250fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   250fe:	d1cc      	bne.n	2509a <pwm_nrfx_pin_set+0x52>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   25100:	4632      	mov	r2, r6
   25102:	483b      	ldr	r0, [pc, #236]	; (251f0 <pwm_nrfx_pin_set+0x1a8>)
   25104:	4b3b      	ldr	r3, [pc, #236]	; (251f4 <pwm_nrfx_pin_set+0x1ac>)
   25106:	493d      	ldr	r1, [pc, #244]	; (251fc <pwm_nrfx_pin_set+0x1b4>)
   25108:	1ac0      	subs	r0, r0, r3
   2510a:	08c0      	lsrs	r0, r0, #3
   2510c:	0180      	lsls	r0, r0, #6
   2510e:	f040 0001 	orr.w	r0, r0, #1
   25112:	f014 fadc 	bl	396ce <log_string_sync>
   25116:	e05a      	b.n	251ce <pwm_nrfx_pin_set+0x186>
		if (was_stopped) {
   25118:	b9b8      	cbnz	r0, 2514a <pwm_nrfx_pin_set+0x102>
	return 0;
   2511a:	2000      	movs	r0, #0
   2511c:	e059      	b.n	251d2 <pwm_nrfx_pin_set+0x18a>
			&& channel_inverted_state;
   2511e:	454e      	cmp	r6, r9
   25120:	d85a      	bhi.n	251d8 <pwm_nrfx_pin_set+0x190>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25122:	a801      	add	r0, sp, #4
   25124:	f8cd 8004 	str.w	r8, [sp, #4]
   25128:	f7ff ff32 	bl	24f90 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2512c:	2301      	movs	r3, #1
   2512e:	9a01      	ldr	r2, [sp, #4]
   25130:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   25132:	60c3      	str	r3, [r0, #12]
		if (!any_other_channel_is_active(channel, data)) {
   25134:	4621      	mov	r1, r4
   25136:	4628      	mov	r0, r5
   25138:	f016 f930 	bl	3b39c <any_other_channel_is_active>
   2513c:	2800      	cmp	r0, #0
   2513e:	d1ec      	bne.n	2511a <pwm_nrfx_pin_set+0xd2>
			nrfx_pwm_stop(&config->pwm, false);
   25140:	4601      	mov	r1, r0
   25142:	4638      	mov	r0, r7
   25144:	f009 fba0 	bl	2e888 <nrfx_pwm_stop>
   25148:	e7e7      	b.n	2511a <pwm_nrfx_pin_set+0xd2>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   2514a:	4638      	mov	r0, r7
   2514c:	f009 fb6e 	bl	2e82c <nrfx_pwm_is_stopped>
   25150:	2800      	cmp	r0, #0
   25152:	d0fa      	beq.n	2514a <pwm_nrfx_pin_set+0x102>
			nrfx_pwm_simple_playback(&config->pwm,
   25154:	2302      	movs	r3, #2
   25156:	2201      	movs	r2, #1
   25158:	4638      	mov	r0, r7
   2515a:	f107 0118 	add.w	r1, r7, #24
   2515e:	f009 faf1 	bl	2e744 <nrfx_pwm_simple_playback>
   25162:	e7da      	b.n	2511a <pwm_nrfx_pin_set+0xd2>
		return -ENOTSUP;
   25164:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25168:	e033      	b.n	251d2 <pwm_nrfx_pin_set+0x18a>
	uint16_t pulse_cycle =
   2516a:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   2516e:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
   25172:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   25176:	b113      	cbz	r3, 2517e <pwm_nrfx_pin_set+0x136>
   25178:	89a2      	ldrh	r2, [r4, #12]
   2517a:	429a      	cmp	r2, r3
   2517c:	d885      	bhi.n	2508a <pwm_nrfx_pin_set+0x42>
		      !any_other_channel_is_active(channel, data);
   2517e:	4621      	mov	r1, r4
   25180:	4628      	mov	r0, r5
   25182:	f016 f90b 	bl	3b39c <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   25186:	f080 0001 	eor.w	r0, r0, #1
   2518a:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   2518c:	7bb9      	ldrb	r1, [r7, #14]
	if (period_cycles != data->period_cycles) {
   2518e:	6823      	ldr	r3, [r4, #0]
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   25190:	2901      	cmp	r1, #1
		period_cycles /= 2;
   25192:	bf04      	itt	eq
   25194:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
   25196:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != data->period_cycles) {
   2519a:	42b3      	cmp	r3, r6
   2519c:	d08e      	beq.n	250bc <pwm_nrfx_pin_set+0x74>
   2519e:	2300      	movs	r3, #0
				data->current[i]
   251a0:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
   251a4:	b2da      	uxtb	r2, r3
   251a6:	42aa      	cmp	r2, r5
   251a8:	f43f af71 	beq.w	2508e <pwm_nrfx_pin_set+0x46>
			uint16_t channel_pulse_cycle =
   251ac:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
   251b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
   251b4:	2a00      	cmp	r2, #0
   251b6:	f43f af6a 	beq.w	2508e <pwm_nrfx_pin_set+0x46>
   251ba:	480d      	ldr	r0, [pc, #52]	; (251f0 <pwm_nrfx_pin_set+0x1a8>)
   251bc:	4b0d      	ldr	r3, [pc, #52]	; (251f4 <pwm_nrfx_pin_set+0x1ac>)
				LOG_ERR("Incompatible period.");
   251be:	4910      	ldr	r1, [pc, #64]	; (25200 <pwm_nrfx_pin_set+0x1b8>)
   251c0:	1ac0      	subs	r0, r0, r3
   251c2:	08c0      	lsrs	r0, r0, #3
   251c4:	0180      	lsls	r0, r0, #6
   251c6:	f040 0001 	orr.w	r0, r0, #1
   251ca:	f014 fa80 	bl	396ce <log_string_sync>
	return -EINVAL;
   251ce:	f06f 0015 	mvn.w	r0, #21
}
   251d2:	b003      	add	sp, #12
   251d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   251d8:	2a00      	cmp	r2, #0
   251da:	daa2      	bge.n	25122 <pwm_nrfx_pin_set+0xda>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   251dc:	a801      	add	r0, sp, #4
   251de:	f8cd 8004 	str.w	r8, [sp, #4]
   251e2:	f7ff fed5 	bl	24f90 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   251e6:	2301      	movs	r3, #1
   251e8:	9a01      	ldr	r2, [sp, #4]
   251ea:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   251ec:	6083      	str	r3, [r0, #8]
   251ee:	e7a1      	b.n	25134 <pwm_nrfx_pin_set+0xec>
   251f0:	0003f6c4 	.word	0x0003f6c4
   251f4:	0003f5a4 	.word	0x0003f5a4
   251f8:	00041ae5 	.word	0x00041ae5
   251fc:	00041abb 	.word	0x00041abb
   25200:	00041aa6 	.word	0x00041aa6

00025204 <adxl362_accel_convert>:
}

static inline int adxl362_range_to_scale(int range)
{
	/* See table 1 in specifications section of datasheet */
	switch (range) {
   25204:	2a02      	cmp	r2, #2
	}
}

static void adxl362_accel_convert(struct sensor_value *val, int accel,
				  int range)
{
   25206:	b570      	push	{r4, r5, r6, lr}
   25208:	bfcc      	ite	gt
   2520a:	f06f 0615 	mvngt.w	r6, #21
   2520e:	4b11      	ldrle	r3, [pc, #68]	; (25254 <adxl362_accel_convert+0x50>)
   25210:	4604      	mov	r4, r0
   25212:	bfd8      	it	le
   25214:	f933 6012 	ldrshle.w	r6, [r3, r2, lsl #1]
	int scale = adxl362_range_to_scale(range);
	long micro_ms2 = accel * SENSOR_G / scale;
   25218:	480f      	ldr	r0, [pc, #60]	; (25258 <adxl362_accel_convert+0x54>)
   2521a:	4632      	mov	r2, r6
   2521c:	17f3      	asrs	r3, r6, #31
   2521e:	fb81 0100 	smull	r0, r1, r1, r0
   25222:	f7f7 fdf1 	bl	1ce08 <__aeabi_ldivmod>

	__ASSERT_NO_MSG(scale != -EINVAL);
   25226:	3616      	adds	r6, #22
	long micro_ms2 = accel * SENSOR_G / scale;
   25228:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(scale != -EINVAL);
   2522a:	d10b      	bne.n	25244 <adxl362_accel_convert+0x40>
   2522c:	490b      	ldr	r1, [pc, #44]	; (2525c <adxl362_accel_convert+0x58>)
   2522e:	480c      	ldr	r0, [pc, #48]	; (25260 <adxl362_accel_convert+0x5c>)
   25230:	f240 234a 	movw	r3, #586	; 0x24a
   25234:	4a0b      	ldr	r2, [pc, #44]	; (25264 <adxl362_accel_convert+0x60>)
   25236:	f013 ff7c 	bl	39132 <printk>
   2523a:	f240 214a 	movw	r1, #586	; 0x24a
   2523e:	4809      	ldr	r0, [pc, #36]	; (25264 <adxl362_accel_convert+0x60>)
   25240:	f014 fa16 	bl	39670 <assert_post_action>

	val->val1 = micro_ms2 / 1000000;
   25244:	4808      	ldr	r0, [pc, #32]	; (25268 <adxl362_accel_convert+0x64>)
   25246:	fb95 f3f0 	sdiv	r3, r5, r0
	val->val2 = micro_ms2 % 1000000;
   2524a:	fb00 5013 	mls	r0, r0, r3, r5
	val->val1 = micro_ms2 / 1000000;
   2524e:	6023      	str	r3, [r4, #0]
	val->val2 = micro_ms2 % 1000000;
   25250:	6060      	str	r0, [r4, #4]
}
   25252:	bd70      	pop	{r4, r5, r6, pc}
   25254:	000402ac 	.word	0x000402ac
   25258:	0095a33a 	.word	0x0095a33a
   2525c:	00041b66 	.word	0x00041b66
   25260:	0004033e 	.word	0x0004033e
   25264:	00041b32 	.word	0x00041b32
   25268:	000f4240 	.word	0x000f4240

0002526c <adxl362_channel_get>:
}

static int adxl362_channel_get(const struct device *dev,
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
   2526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2526e:	4616      	mov	r6, r2
	struct adxl362_data *data = dev->data;
   25270:	6904      	ldr	r4, [r0, #16]

	switch (chan) {
   25272:	290c      	cmp	r1, #12
   25274:	d83a      	bhi.n	252ec <adxl362_channel_get+0x80>
   25276:	e8df f001 	tbb	[pc, r1]
   2527a:	1007      	.short	0x1007
   2527c:	39391a15 	.word	0x39391a15
   25280:	39393939 	.word	0x39393939
   25284:	3939      	.short	0x3939
   25286:	2a          	.byte	0x2a
   25287:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X: /* Acceleration on the X axis, in m/s^2. */
		adxl362_accel_convert(val, data->acc_x, data->selected_range);
   25288:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   2528c:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
		break;
	case SENSOR_CHAN_ACCEL_Y: /* Acceleration on the Y axis, in m/s^2. */
		adxl362_accel_convert(val, data->acc_y, data->selected_range);
		break;
	case SENSOR_CHAN_ACCEL_Z: /* Acceleration on the Z axis, in m/s^2. */
		adxl362_accel_convert(val, data->acc_z,  data->selected_range);
   25290:	4630      	mov	r0, r6
   25292:	f7ff ffb7 	bl	25204 <adxl362_accel_convert>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   25296:	2000      	movs	r0, #0
}
   25298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		adxl362_accel_convert(val, data->acc_y, data->selected_range);
   2529a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   2529e:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   252a2:	e7f5      	b.n	25290 <adxl362_channel_get+0x24>
		adxl362_accel_convert(val, data->acc_z,  data->selected_range);
   252a4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   252a8:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
   252ac:	e7f0      	b.n	25290 <adxl362_channel_get+0x24>
   252ae:	f104 051c 	add.w	r5, r4, #28
   252b2:	f104 0722 	add.w	r7, r4, #34	; 0x22
			adxl362_accel_convert(&val[i], data->acc_xyz[i], data->selected_range);
   252b6:	f935 1b02 	ldrsh.w	r1, [r5], #2
   252ba:	4630      	mov	r0, r6
   252bc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   252c0:	f7ff ffa0 	bl	25204 <adxl362_accel_convert>
		for (size_t i = 0; i < 3; i++) {
   252c4:	42bd      	cmp	r5, r7
   252c6:	f106 0608 	add.w	r6, r6, #8
   252ca:	d1f4      	bne.n	252b6 <adxl362_channel_get+0x4a>
   252cc:	e7e3      	b.n	25296 <adxl362_channel_get+0x2a>
	int milli_c = (temp - ADXL362_TEMP_BIAS_LSB) * ADXL362_TEMP_MC_PER_LSB;
   252ce:	2241      	movs	r2, #65	; 0x41
   252d0:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   252d2:	4808      	ldr	r0, [pc, #32]	; (252f4 <adxl362_channel_get+0x88>)
   252d4:	fb11 0002 	smlabb	r0, r1, r2, r0
	val->val1 = milli_c / 1000;
   252d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   252dc:	fb90 f1f2 	sdiv	r1, r0, r2
   252e0:	6031      	str	r1, [r6, #0]
	val->val2 = (milli_c % 1000) * 1000;
   252e2:	fb02 0111 	mls	r1, r2, r1, r0
   252e6:	434a      	muls	r2, r1
   252e8:	6072      	str	r2, [r6, #4]
   252ea:	e7d4      	b.n	25296 <adxl362_channel_get+0x2a>
	struct adxl362_data *data = dev->data;
   252ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   252f0:	e7d2      	b.n	25298 <adxl362_channel_get+0x2c>
   252f2:	bf00      	nop
   252f4:	ffffa722 	.word	0xffffa722

000252f8 <adxl362_sample_fetch>:
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   252f8:	2938      	cmp	r1, #56	; 0x38
{
   252fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   252fc:	4604      	mov	r4, r0
	struct adxl362_data *data = dev->data;
   252fe:	6905      	ldr	r5, [r0, #16]
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   25300:	d00b      	beq.n	2531a <adxl362_sample_fetch+0x22>
   25302:	490c      	ldr	r1, [pc, #48]	; (25334 <adxl362_sample_fetch+0x3c>)
   25304:	480c      	ldr	r0, [pc, #48]	; (25338 <adxl362_sample_fetch+0x40>)
   25306:	f240 2325 	movw	r3, #549	; 0x225
   2530a:	4a0c      	ldr	r2, [pc, #48]	; (2533c <adxl362_sample_fetch+0x44>)
   2530c:	f013 ff11 	bl	39132 <printk>
   25310:	f240 2125 	movw	r1, #549	; 0x225
   25314:	4809      	ldr	r0, [pc, #36]	; (2533c <adxl362_sample_fetch+0x44>)
   25316:	f014 f9ab 	bl	39670 <assert_post_action>
	ret = adxl362_get_reg(dev, (uint8_t *)buf, ADXL362_REG_XDATA_L,
   2531a:	2308      	movs	r3, #8
   2531c:	220e      	movs	r2, #14
   2531e:	4669      	mov	r1, sp
   25320:	6920      	ldr	r0, [r4, #16]
   25322:	f016 f881 	bl	3b428 <adxl362_get_reg.isra.0>
	if (ret) {
   25326:	b918      	cbnz	r0, 25330 <adxl362_sample_fetch+0x38>
	data->acc_x = sys_le16_to_cpu(buf[0]);
   25328:	9b00      	ldr	r3, [sp, #0]
   2532a:	61eb      	str	r3, [r5, #28]
	data->acc_z = sys_le16_to_cpu(buf[2]);
   2532c:	9b01      	ldr	r3, [sp, #4]
   2532e:	622b      	str	r3, [r5, #32]
}
   25330:	b003      	add	sp, #12
   25332:	bd30      	pop	{r4, r5, pc}
   25334:	00041b73 	.word	0x00041b73
   25338:	0004033e 	.word	0x0004033e
   2533c:	00041b32 	.word	0x00041b32

00025340 <adxl362_init>:
 * @return  0 - the initialization was successful and the device is present;
 *         -1 - an error occurred.
 *
 */
static int adxl362_init(const struct device *dev)
{
   25340:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct adxl362_config *config = dev->config;
   25342:	6846      	ldr	r6, [r0, #4]
{
   25344:	4604      	mov	r4, r0
	struct adxl362_data *data = dev->data;
   25346:	6905      	ldr	r5, [r0, #16]
	uint8_t value;
	int err;

	data->spi = device_get_binding(config->spi_name);
   25348:	6830      	ldr	r0, [r6, #0]
   2534a:	f00e f8ab 	bl	334a4 <z_impl_device_get_binding>
   2534e:	6028      	str	r0, [r5, #0]
	if (!data->spi) {
   25350:	2800      	cmp	r0, #0
   25352:	f000 80f9 	beq.w	25548 <adxl362_init+0x208>
		LOG_DBG("spi device not found: %s", config->spi_name);
		return -EINVAL;
	}

	data->spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
   25356:	f44f 7380 	mov.w	r3, #256	; 0x100
   2535a:	812b      	strh	r3, [r5, #8]
	data->spi_cfg.frequency = config->spi_max_frequency;
   2535c:	6873      	ldr	r3, [r6, #4]
	data->spi_cfg.slave = config->spi_slave;

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	data->adxl362_cs_ctrl.gpio_dev =
				device_get_binding(config->gpio_cs_port);
   2535e:	68f0      	ldr	r0, [r6, #12]
	data->spi_cfg.frequency = config->spi_max_frequency;
   25360:	606b      	str	r3, [r5, #4]
	data->spi_cfg.slave = config->spi_slave;
   25362:	8933      	ldrh	r3, [r6, #8]
   25364:	816b      	strh	r3, [r5, #10]
   25366:	f00e f89d 	bl	334a4 <z_impl_device_get_binding>
	data->adxl362_cs_ctrl.gpio_dev =
   2536a:	6128      	str	r0, [r5, #16]
	if (!data->adxl362_cs_ctrl.gpio_dev) {
   2536c:	b960      	cbnz	r0, 25388 <adxl362_init+0x48>
   2536e:	4878      	ldr	r0, [pc, #480]	; (25550 <adxl362_init+0x210>)
   25370:	4b78      	ldr	r3, [pc, #480]	; (25554 <adxl362_init+0x214>)
		LOG_ERR("Unable to get GPIO SPI CS device");
   25372:	4979      	ldr	r1, [pc, #484]	; (25558 <adxl362_init+0x218>)
   25374:	1ac0      	subs	r0, r0, r3
   25376:	08c0      	lsrs	r0, r0, #3
   25378:	0180      	lsls	r0, r0, #6
   2537a:	f040 0001 	orr.w	r0, r0, #1
   2537e:	f014 f9a6 	bl	396ce <log_string_sync>
		LOG_ERR("Failed: %d\n", value);
		return -ENODEV;
	}

	if (adxl362_chip_init(dev) < 0) {
		return -ENODEV;
   25382:	f06f 0512 	mvn.w	r5, #18
   25386:	e0b7      	b.n	254f8 <adxl362_init+0x1b8>
	data->adxl362_cs_ctrl.gpio_pin = config->cs_gpio;
   25388:	7c33      	ldrb	r3, [r6, #16]
	return adxl362_set_reg(dev, ADXL362_RESET_KEY,
   2538a:	221f      	movs	r2, #31
	data->adxl362_cs_ctrl.gpio_pin = config->cs_gpio;
   2538c:	762b      	strb	r3, [r5, #24]
	data->adxl362_cs_ctrl.gpio_dt_flags = config->cs_flags;
   2538e:	7c73      	ldrb	r3, [r6, #17]
	return adxl362_set_reg(dev, ADXL362_RESET_KEY,
   25390:	2152      	movs	r1, #82	; 0x52
	data->adxl362_cs_ctrl.gpio_dt_flags = config->cs_flags;
   25392:	766b      	strb	r3, [r5, #25]
	data->adxl362_cs_ctrl.delay = 0U;
   25394:	2300      	movs	r3, #0
   25396:	616b      	str	r3, [r5, #20]
	data->spi_cfg.cs = &data->adxl362_cs_ctrl;
   25398:	f105 0310 	add.w	r3, r5, #16
   2539c:	60eb      	str	r3, [r5, #12]
	return adxl362_set_reg(dev, ADXL362_RESET_KEY,
   2539e:	6920      	ldr	r0, [r4, #16]
   253a0:	2301      	movs	r3, #1
   253a2:	f016 f835 	bl	3b410 <adxl362_set_reg.isra.0>
	if (err) {
   253a6:	4605      	mov	r5, r0
   253a8:	b158      	cbz	r0, 253c2 <adxl362_init+0x82>
		LOG_ERR("adxl362_software_reset failed, error %d\n", err);
   253aa:	462a      	mov	r2, r5
   253ac:	4868      	ldr	r0, [pc, #416]	; (25550 <adxl362_init+0x210>)
   253ae:	4b69      	ldr	r3, [pc, #420]	; (25554 <adxl362_init+0x214>)
   253b0:	496a      	ldr	r1, [pc, #424]	; (2555c <adxl362_init+0x21c>)
   253b2:	1ac0      	subs	r0, r0, r3
   253b4:	08c0      	lsrs	r0, r0, #3
   253b6:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed: %d\n", value);
   253b8:	f040 0001 	orr.w	r0, r0, #1
   253bc:	f014 f987 	bl	396ce <log_string_sync>
		return -ENODEV;
   253c0:	e7df      	b.n	25382 <adxl362_init+0x42>
	return z_impl_k_sleep(timeout);
   253c2:	2100      	movs	r1, #0
   253c4:	20a4      	movs	r0, #164	; 0xa4
   253c6:	f010 fc87 	bl	35cd8 <z_impl_k_sleep>
	adxl362_get_reg(dev, &value, ADXL362_REG_PARTID, 1);
   253ca:	2202      	movs	r2, #2
   253cc:	2301      	movs	r3, #1
   253ce:	6920      	ldr	r0, [r4, #16]
   253d0:	f10d 010d 	add.w	r1, sp, #13
   253d4:	f016 f828 	bl	3b428 <adxl362_get_reg.isra.0>
	if (value != ADXL362_PART_ID) {
   253d8:	f89d 200d 	ldrb.w	r2, [sp, #13]
   253dc:	2af2      	cmp	r2, #242	; 0xf2
   253de:	d006      	beq.n	253ee <adxl362_init+0xae>
   253e0:	485b      	ldr	r0, [pc, #364]	; (25550 <adxl362_init+0x210>)
   253e2:	4b5c      	ldr	r3, [pc, #368]	; (25554 <adxl362_init+0x214>)
		LOG_ERR("Failed: %d\n", value);
   253e4:	495e      	ldr	r1, [pc, #376]	; (25560 <adxl362_init+0x220>)
   253e6:	1ac0      	subs	r0, r0, r3
   253e8:	08c0      	lsrs	r0, r0, #3
   253ea:	0180      	lsls	r0, r0, #6
   253ec:	e7e4      	b.n	253b8 <adxl362_init+0x78>
	ret = adxl362_set_reg(dev, (threshold & 0x7FF),
   253ee:	2302      	movs	r3, #2
   253f0:	2220      	movs	r2, #32
   253f2:	21c8      	movs	r1, #200	; 0xc8
   253f4:	6920      	ldr	r0, [r4, #16]
   253f6:	f016 f80b 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   253fa:	2800      	cmp	r0, #0
   253fc:	d17f      	bne.n	254fe <adxl362_init+0x1be>
	ret = adxl362_set_reg(dev, time, ADXL362_REG_TIME_ACT, 1);
   253fe:	2301      	movs	r3, #1
   25400:	2222      	movs	r2, #34	; 0x22
   25402:	4619      	mov	r1, r3
   25404:	6920      	ldr	r0, [r4, #16]
   25406:	f016 f803 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   2540a:	2800      	cmp	r0, #0
   2540c:	d177      	bne.n	254fe <adxl362_init+0x1be>
	ret = adxl362_get_reg(dev, &old_act_inact_reg,
   2540e:	2301      	movs	r3, #1
   25410:	2227      	movs	r2, #39	; 0x27
   25412:	6920      	ldr	r0, [r4, #16]
   25414:	f10d 010f 	add.w	r1, sp, #15
   25418:	f016 f806 	bl	3b428 <adxl362_get_reg.isra.0>
	if (ret) {
   2541c:	2800      	cmp	r0, #0
   2541e:	d16e      	bne.n	254fe <adxl362_init+0x1be>
	new_act_inact_reg |= ADXL362_ACT_INACT_CTL_ACT_EN |
   25420:	f89d 100f 	ldrb.w	r1, [sp, #15]
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   25424:	2301      	movs	r3, #1
   25426:	2227      	movs	r2, #39	; 0x27
   25428:	6920      	ldr	r0, [r4, #16]
   2542a:	f041 0103 	orr.w	r1, r1, #3
   2542e:	f015 ffef 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   25432:	2800      	cmp	r0, #0
   25434:	d163      	bne.n	254fe <adxl362_init+0x1be>
	ret = adxl362_set_reg(dev, (threshold & 0x7FF),
   25436:	2302      	movs	r3, #2
   25438:	2223      	movs	r2, #35	; 0x23
   2543a:	21c8      	movs	r1, #200	; 0xc8
   2543c:	6920      	ldr	r0, [r4, #16]
   2543e:	f015 ffe7 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   25442:	2800      	cmp	r0, #0
   25444:	d15b      	bne.n	254fe <adxl362_init+0x1be>
	ret = adxl362_set_reg(dev, time, ADXL362_REG_TIME_INACT_L, 2);
   25446:	2302      	movs	r3, #2
   25448:	2225      	movs	r2, #37	; 0x25
   2544a:	2101      	movs	r1, #1
   2544c:	6920      	ldr	r0, [r4, #16]
   2544e:	f015 ffdf 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   25452:	2800      	cmp	r0, #0
   25454:	d153      	bne.n	254fe <adxl362_init+0x1be>
	ret = adxl362_get_reg(dev, &old_act_inact_reg,
   25456:	2301      	movs	r3, #1
   25458:	2227      	movs	r2, #39	; 0x27
   2545a:	6920      	ldr	r0, [r4, #16]
   2545c:	f10d 010f 	add.w	r1, sp, #15
   25460:	f015 ffe2 	bl	3b428 <adxl362_get_reg.isra.0>
	if (ret) {
   25464:	2800      	cmp	r0, #0
   25466:	d14a      	bne.n	254fe <adxl362_init+0x1be>
	new_act_inact_reg |= ADXL362_ACT_INACT_CTL_INACT_EN |
   25468:	f89d 100f 	ldrb.w	r1, [sp, #15]
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   2546c:	2301      	movs	r3, #1
   2546e:	2227      	movs	r2, #39	; 0x27
   25470:	6920      	ldr	r0, [r4, #16]
   25472:	f041 010c 	orr.w	r1, r1, #12
   25476:	f015 ffcb 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   2547a:	2800      	cmp	r0, #0
   2547c:	d13f      	bne.n	254fe <adxl362_init+0x1be>
	ret = adxl362_set_reg(dev, write_val, ADXL362_REG_FIFO_CTL, 1);
   2547e:	2301      	movs	r3, #1
   25480:	2228      	movs	r2, #40	; 0x28
   25482:	2108      	movs	r1, #8
   25484:	6920      	ldr	r0, [r4, #16]
   25486:	f015 ffc3 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   2548a:	bbc0      	cbnz	r0, 254fe <adxl362_init+0x1be>
	ret = adxl362_set_reg(dev, water_mark_lvl, ADXL362_REG_FIFO_SAMPLES, 2);
   2548c:	4601      	mov	r1, r0
   2548e:	2302      	movs	r3, #2
   25490:	2229      	movs	r2, #41	; 0x29
   25492:	6920      	ldr	r0, [r4, #16]
   25494:	f015 ffbc 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   25498:	bb88      	cbnz	r0, 254fe <adxl362_init+0x1be>
	ret = adxl362_set_range(dev, ADXL362_DEFAULT_RANGE_ACC);
   2549a:	4601      	mov	r1, r0
   2549c:	4620      	mov	r0, r4
   2549e:	f015 ffcc 	bl	3b43a <adxl362_set_range>
	if (ret) {
   254a2:	bb60      	cbnz	r0, 254fe <adxl362_init+0x1be>
	ret = adxl362_set_output_rate(dev, ADXL362_DEFAULT_ODR_ACC);
   254a4:	4601      	mov	r1, r0
   254a6:	4620      	mov	r0, r4
   254a8:	f015 ffe4 	bl	3b474 <adxl362_set_output_rate>
	if (ret) {
   254ac:	bb38      	cbnz	r0, 254fe <adxl362_init+0x1be>
	ret = adxl362_get_reg(dev, &old_power_ctl, ADXL362_REG_POWER_CTL, 1);
   254ae:	2301      	movs	r3, #1
   254b0:	222d      	movs	r2, #45	; 0x2d
   254b2:	6920      	ldr	r0, [r4, #16]
   254b4:	f10d 010f 	add.w	r1, sp, #15
   254b8:	f015 ffb6 	bl	3b428 <adxl362_get_reg.isra.0>
	if (ret) {
   254bc:	b9f8      	cbnz	r0, 254fe <adxl362_init+0x1be>
	new_power_ctl = old_power_ctl & ~ADXL362_POWER_CTL_MEASURE(0x3);
   254be:	f89d 100f 	ldrb.w	r1, [sp, #15]
	return adxl362_set_reg(dev, new_power_ctl, ADXL362_REG_POWER_CTL, 1);
   254c2:	2301      	movs	r3, #1
	new_power_ctl = old_power_ctl & ~ADXL362_POWER_CTL_MEASURE(0x3);
   254c4:	f021 0103 	bic.w	r1, r1, #3
	return adxl362_set_reg(dev, new_power_ctl, ADXL362_REG_POWER_CTL, 1);
   254c8:	222d      	movs	r2, #45	; 0x2d
   254ca:	6920      	ldr	r0, [r4, #16]
   254cc:	f041 0102 	orr.w	r1, r1, #2
   254d0:	f015 ff9e 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   254d4:	b998      	cbnz	r0, 254fe <adxl362_init+0x1be>
	}

#if defined(CONFIG_ADXL362_TRIGGER)
	if (adxl362_init_interrupt(dev) < 0) {
   254d6:	4620      	mov	r0, r4
   254d8:	f000 f90c 	bl	256f4 <adxl362_init_interrupt>
   254dc:	2800      	cmp	r0, #0
   254de:	da11      	bge.n	25504 <adxl362_init+0x1c4>
   254e0:	481b      	ldr	r0, [pc, #108]	; (25550 <adxl362_init+0x210>)
   254e2:	4b1c      	ldr	r3, [pc, #112]	; (25554 <adxl362_init+0x214>)
		LOG_ERR("Failed to initialize interrupt!");
   254e4:	491f      	ldr	r1, [pc, #124]	; (25564 <adxl362_init+0x224>)
   254e6:	1ac0      	subs	r0, r0, r3
   254e8:	08c0      	lsrs	r0, r0, #3
   254ea:	0180      	lsls	r0, r0, #6
	}

	if (adxl362_interrupt_config(dev,
				     config->int1_config,
				     config->int2_config) < 0) {
		LOG_ERR("Failed to configure interrupt");
   254ec:	f040 0001 	orr.w	r0, r0, #1
   254f0:	f014 f8ed 	bl	396ce <log_string_sync>
		return -EIO;
   254f4:	f06f 0504 	mvn.w	r5, #4
	}
#endif

	return 0;
}
   254f8:	4628      	mov	r0, r5
   254fa:	b004      	add	sp, #16
   254fc:	bd70      	pop	{r4, r5, r6, pc}
	if (adxl362_chip_init(dev) < 0) {
   254fe:	2800      	cmp	r0, #0
   25500:	dae9      	bge.n	254d6 <adxl362_init+0x196>
   25502:	e73e      	b.n	25382 <adxl362_init+0x42>
	if (adxl362_interrupt_config(dev,
   25504:	7eb2      	ldrb	r2, [r6, #26]
   25506:	7ef3      	ldrb	r3, [r6, #27]
	ret = adxl362_reg_access(adxl362_data,
   25508:	2601      	movs	r6, #1
	if (adxl362_interrupt_config(dev,
   2550a:	6924      	ldr	r4, [r4, #16]
   2550c:	f88d 200e 	strb.w	r2, [sp, #14]
   25510:	f88d 300f 	strb.w	r3, [sp, #15]
	ret = adxl362_reg_access(adxl362_data,
   25514:	222a      	movs	r2, #42	; 0x2a
   25516:	210a      	movs	r1, #10
   25518:	4620      	mov	r0, r4
   2551a:	9600      	str	r6, [sp, #0]
   2551c:	f10d 030e 	add.w	r3, sp, #14
   25520:	f015 ff51 	bl	3b3c6 <adxl362_reg_access>
	if (ret) {
   25524:	b938      	cbnz	r0, 25536 <adxl362_init+0x1f6>
	return ret = adxl362_reg_access(adxl362_data,
   25526:	222b      	movs	r2, #43	; 0x2b
   25528:	210a      	movs	r1, #10
   2552a:	4620      	mov	r0, r4
   2552c:	9600      	str	r6, [sp, #0]
   2552e:	f10d 030f 	add.w	r3, sp, #15
   25532:	f015 ff48 	bl	3b3c6 <adxl362_reg_access>
	if (adxl362_interrupt_config(dev,
   25536:	2800      	cmp	r0, #0
   25538:	dade      	bge.n	254f8 <adxl362_init+0x1b8>
   2553a:	4805      	ldr	r0, [pc, #20]	; (25550 <adxl362_init+0x210>)
   2553c:	4b05      	ldr	r3, [pc, #20]	; (25554 <adxl362_init+0x214>)
		LOG_ERR("Failed to configure interrupt");
   2553e:	490a      	ldr	r1, [pc, #40]	; (25568 <adxl362_init+0x228>)
   25540:	1ac0      	subs	r0, r0, r3
   25542:	08c0      	lsrs	r0, r0, #3
   25544:	0180      	lsls	r0, r0, #6
   25546:	e7d1      	b.n	254ec <adxl362_init+0x1ac>
		return -EINVAL;
   25548:	f06f 0515 	mvn.w	r5, #21
   2554c:	e7d4      	b.n	254f8 <adxl362_init+0x1b8>
   2554e:	bf00      	nop
   25550:	0003f5a4 	.word	0x0003f5a4
   25554:	0003f5a4 	.word	0x0003f5a4
   25558:	00041b8b 	.word	0x00041b8b
   2555c:	00041bac 	.word	0x00041bac
   25560:	00041bd5 	.word	0x00041bd5
   25564:	00041be1 	.word	0x00041be1
   25568:	00041c01 	.word	0x00041c01

0002556c <adxl362_set_interrupt_mode>:
	if (mode != ADXL362_MODE_DEFAULT &&
   2556c:	2901      	cmp	r1, #1
{
   2556e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25570:	4605      	mov	r5, r0
   25572:	460c      	mov	r4, r1
	if (mode != ADXL362_MODE_DEFAULT &&
   25574:	d90f      	bls.n	25596 <adxl362_set_interrupt_mode+0x2a>
	    mode != ADXL362_MODE_LINK &&
   25576:	2903      	cmp	r1, #3
   25578:	d00d      	beq.n	25596 <adxl362_set_interrupt_mode+0x2a>
   2557a:	4b11      	ldr	r3, [pc, #68]	; (255c0 <adxl362_set_interrupt_mode+0x54>)
   2557c:	4811      	ldr	r0, [pc, #68]	; (255c4 <adxl362_set_interrupt_mode+0x58>)
		    LOG_ERR("Wrong mode");
   2557e:	4912      	ldr	r1, [pc, #72]	; (255c8 <adxl362_set_interrupt_mode+0x5c>)
   25580:	1ac0      	subs	r0, r0, r3
   25582:	08c0      	lsrs	r0, r0, #3
   25584:	0180      	lsls	r0, r0, #6
   25586:	f040 0001 	orr.w	r0, r0, #1
   2558a:	f014 f8a0 	bl	396ce <log_string_sync>
		    return -EINVAL;
   2558e:	f06f 0015 	mvn.w	r0, #21
}
   25592:	b003      	add	sp, #12
   25594:	bd30      	pop	{r4, r5, pc}
	ret = adxl362_get_reg(dev, &old_act_inact_reg,
   25596:	2301      	movs	r3, #1
   25598:	2227      	movs	r2, #39	; 0x27
   2559a:	6928      	ldr	r0, [r5, #16]
   2559c:	f10d 0107 	add.w	r1, sp, #7
   255a0:	f015 ff42 	bl	3b428 <adxl362_get_reg.isra.0>
	if (ret) {
   255a4:	2800      	cmp	r0, #0
   255a6:	d1f4      	bne.n	25592 <adxl362_set_interrupt_mode+0x26>
	new_act_inact_reg |= old_act_inact_reg |
   255a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
			    ADXL362_ACT_INACT_CTL_LINKLOOP(mode);
   255ac:	0124      	lsls	r4, r4, #4
   255ae:	f004 0430 	and.w	r4, r4, #48	; 0x30
	ret = adxl362_set_reg(dev, new_act_inact_reg,
   255b2:	2301      	movs	r3, #1
   255b4:	2227      	movs	r2, #39	; 0x27
   255b6:	6928      	ldr	r0, [r5, #16]
   255b8:	4321      	orrs	r1, r4
   255ba:	f015 ff29 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   255be:	e7e8      	b.n	25592 <adxl362_set_interrupt_mode+0x26>
   255c0:	0003f5a4 	.word	0x0003f5a4
   255c4:	0003f5a4 	.word	0x0003f5a4
   255c8:	00041c1f 	.word	0x00041c1f

000255cc <adxl362_work_cb>:
		adxl362_thread_cb(drv_data->dev);
	}
}
#elif defined(CONFIG_ADXL362_TRIGGER_GLOBAL_THREAD)
static void adxl362_work_cb(struct k_work *work)
{
   255cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct adxl362_data *drv_data =
		CONTAINER_OF(work, struct adxl362_data, work);

	adxl362_thread_cb(drv_data->dev);
   255ce:	f850 5c38 	ldr.w	r5, [r0, #-56]
	if (adxl362_get_status(dev, &status_buf)) {
   255d2:	f10d 0107 	add.w	r1, sp, #7
   255d6:	4628      	mov	r0, r5
	struct adxl362_data *drv_data = dev->data;
   255d8:	692c      	ldr	r4, [r5, #16]
	if (adxl362_get_status(dev, &status_buf)) {
   255da:	f015 ff86 	bl	3b4ea <adxl362_get_status>
   255de:	b158      	cbz	r0, 255f8 <adxl362_work_cb+0x2c>
   255e0:	4817      	ldr	r0, [pc, #92]	; (25640 <adxl362_work_cb+0x74>)
   255e2:	4b18      	ldr	r3, [pc, #96]	; (25644 <adxl362_work_cb+0x78>)
		LOG_ERR("Unable to get status.");
   255e4:	4918      	ldr	r1, [pc, #96]	; (25648 <adxl362_work_cb+0x7c>)
   255e6:	1ac0      	subs	r0, r0, r3
   255e8:	08c0      	lsrs	r0, r0, #3
   255ea:	0180      	lsls	r0, r0, #6
   255ec:	f040 0001 	orr.w	r0, r0, #1
   255f0:	f014 f86d 	bl	396ce <log_string_sync>
}
   255f4:	b002      	add	sp, #8
   255f6:	bd70      	pop	{r4, r5, r6, pc}
	k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   255f8:	f104 063c 	add.w	r6, r4, #60	; 0x3c
	return z_impl_k_mutex_lock(mutex, timeout);
   255fc:	f04f 32ff 	mov.w	r2, #4294967295
   25600:	f04f 33ff 	mov.w	r3, #4294967295
   25604:	4630      	mov	r0, r6
   25606:	f00e fcf5 	bl	33ff4 <z_impl_k_mutex_lock>
	if (drv_data->th_handler != NULL) {
   2560a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   2560c:	b152      	cbz	r2, 25624 <adxl362_work_cb+0x58>
		if (ADXL362_STATUS_CHECK_INACT(status_buf) ||
   2560e:	f89d 1007 	ldrb.w	r1, [sp, #7]
		    ADXL362_STATUS_CHECK_ACTIVITY(status_buf)) {
   25612:	090b      	lsrs	r3, r1, #4
		if (ADXL362_STATUS_CHECK_INACT(status_buf) ||
   25614:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
   25618:	07d9      	lsls	r1, r3, #31
   2561a:	d503      	bpl.n	25624 <adxl362_work_cb+0x58>
			drv_data->th_handler(dev, &drv_data->th_trigger);
   2561c:	4628      	mov	r0, r5
   2561e:	f104 0154 	add.w	r1, r4, #84	; 0x54
   25622:	4790      	blx	r2
	if (drv_data->drdy_handler != NULL &&
   25624:	6da3      	ldr	r3, [r4, #88]	; 0x58
   25626:	b13b      	cbz	r3, 25638 <adxl362_work_cb+0x6c>
   25628:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2562c:	07d2      	lsls	r2, r2, #31
   2562e:	d503      	bpl.n	25638 <adxl362_work_cb+0x6c>
		drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   25630:	4628      	mov	r0, r5
   25632:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   25636:	4798      	blx	r3
	return z_impl_k_mutex_unlock(mutex);
   25638:	4630      	mov	r0, r6
   2563a:	f00e fdd5 	bl	341e8 <z_impl_k_mutex_unlock>
}
   2563e:	e7d9      	b.n	255f4 <adxl362_work_cb+0x28>
   25640:	0003f5a4 	.word	0x0003f5a4
   25644:	0003f5a4 	.word	0x0003f5a4
   25648:	00041c38 	.word	0x00041c38

0002564c <adxl362_trigger_set>:
#endif

int adxl362_trigger_set(const struct device *dev,
			const struct sensor_trigger *trig,
			sensor_trigger_handler_t handler)
{
   2564c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct adxl362_data *drv_data = dev->data;
	uint8_t int_mask, int_en, status_buf;

	switch (trig->type) {
   25650:	880c      	ldrh	r4, [r1, #0]
{
   25652:	4605      	mov	r5, r0
	switch (trig->type) {
   25654:	2c01      	cmp	r4, #1
{
   25656:	4688      	mov	r8, r1
   25658:	4617      	mov	r7, r2
	struct adxl362_data *drv_data = dev->data;
   2565a:	6906      	ldr	r6, [r0, #16]
	switch (trig->type) {
   2565c:	d020      	beq.n	256a0 <adxl362_trigger_set+0x54>
   2565e:	2c04      	cmp	r4, #4
   25660:	d133      	bne.n	256ca <adxl362_trigger_set+0x7e>
	case SENSOR_TRIG_THRESHOLD:
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   25662:	f106 043c 	add.w	r4, r6, #60	; 0x3c
	return z_impl_k_mutex_lock(mutex, timeout);
   25666:	f04f 32ff 	mov.w	r2, #4294967295
   2566a:	f04f 33ff 	mov.w	r3, #4294967295
   2566e:	4620      	mov	r0, r4
   25670:	f00e fcc0 	bl	33ff4 <z_impl_k_mutex_lock>
		drv_data->th_handler = handler;
		drv_data->th_trigger = *trig;
   25674:	f8d8 0000 	ldr.w	r0, [r8]
		drv_data->th_handler = handler;
   25678:	6537      	str	r7, [r6, #80]	; 0x50
		drv_data->th_trigger = *trig;
   2567a:	6570      	str	r0, [r6, #84]	; 0x54
	return z_impl_k_mutex_unlock(mutex);
   2567c:	4620      	mov	r0, r4
   2567e:	f00e fdb3 	bl	341e8 <z_impl_k_mutex_unlock>
		k_mutex_unlock(&drv_data->trigger_mutex);
		int_mask = ADXL362_INTMAP1_ACT |
			   ADXL362_INTMAP1_INACT;
		/* Clear activity and inactivity interrupts */
		adxl362_get_status(dev, &status_buf);
   25682:	4628      	mov	r0, r5
   25684:	f10d 0107 	add.w	r1, sp, #7
   25688:	f015 ff2f 	bl	3b4ea <adxl362_get_status>
		int_mask = ADXL362_INTMAP1_ACT |
   2568c:	2230      	movs	r2, #48	; 0x30
	default:
		LOG_ERR("Unsupported sensor trigger");
		return -ENOTSUP;
	}

	if (handler) {
   2568e:	2f00      	cmp	r7, #0
		int_en = int_mask;
	} else {
		int_en = 0U;
	}

	return adxl362_reg_write_mask(dev, ADXL362_REG_INTMAP1, int_mask, int_en);
   25690:	bf14      	ite	ne
   25692:	4613      	movne	r3, r2
   25694:	2300      	moveq	r3, #0
   25696:	212a      	movs	r1, #42	; 0x2a
   25698:	4628      	mov	r0, r5
   2569a:	f015 ff04 	bl	3b4a6 <adxl362_reg_write_mask>
   2569e:	e020      	b.n	256e2 <adxl362_trigger_set+0x96>
		k_mutex_lock(&drv_data->trigger_mutex, K_FOREVER);
   256a0:	f106 093c 	add.w	r9, r6, #60	; 0x3c
	return z_impl_k_mutex_lock(mutex, timeout);
   256a4:	f04f 32ff 	mov.w	r2, #4294967295
   256a8:	f04f 33ff 	mov.w	r3, #4294967295
   256ac:	4648      	mov	r0, r9
   256ae:	f00e fca1 	bl	33ff4 <z_impl_k_mutex_lock>
		drv_data->drdy_trigger = *trig;
   256b2:	f8d8 0000 	ldr.w	r0, [r8]
		drv_data->drdy_handler = handler;
   256b6:	65b7      	str	r7, [r6, #88]	; 0x58
		drv_data->drdy_trigger = *trig;
   256b8:	65f0      	str	r0, [r6, #92]	; 0x5c
	return z_impl_k_mutex_unlock(mutex);
   256ba:	4648      	mov	r0, r9
   256bc:	f00e fd94 	bl	341e8 <z_impl_k_mutex_unlock>
		adxl362_clear_data_ready(dev);
   256c0:	4628      	mov	r0, r5
   256c2:	f015 ff17 	bl	3b4f4 <adxl362_clear_data_ready>
		int_mask = ADXL362_INTMAP1_DATA_READY;
   256c6:	4622      	mov	r2, r4
		break;
   256c8:	e7e1      	b.n	2568e <adxl362_trigger_set+0x42>
   256ca:	4b07      	ldr	r3, [pc, #28]	; (256e8 <adxl362_trigger_set+0x9c>)
   256cc:	4807      	ldr	r0, [pc, #28]	; (256ec <adxl362_trigger_set+0xa0>)
		LOG_ERR("Unsupported sensor trigger");
   256ce:	4908      	ldr	r1, [pc, #32]	; (256f0 <adxl362_trigger_set+0xa4>)
   256d0:	1ac0      	subs	r0, r0, r3
   256d2:	08c0      	lsrs	r0, r0, #3
   256d4:	0180      	lsls	r0, r0, #6
   256d6:	f040 0001 	orr.w	r0, r0, #1
   256da:	f013 fff8 	bl	396ce <log_string_sync>
		return -ENOTSUP;
   256de:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   256e2:	b003      	add	sp, #12
   256e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   256e8:	0003f5a4 	.word	0x0003f5a4
   256ec:	0003f5a4 	.word	0x0003f5a4
   256f0:	00041c4e 	.word	0x00041c4e

000256f4 <adxl362_init_interrupt>:

int adxl362_init_interrupt(const struct device *dev)
{
   256f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   256f8:	ed2d 8b02 	vpush	{d8}
   256fc:	4607      	mov	r7, r0
	struct adxl362_data *drv_data = dev->data;
   256fe:	6904      	ldr	r4, [r0, #16]
	const struct adxl362_config *cfg = dev->config;
   25700:	6846      	ldr	r6, [r0, #4]
{
   25702:	b085      	sub	sp, #20
	return z_impl_k_mutex_init(mutex);
   25704:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   25708:	f018 fb1f 	bl	3dd4a <z_impl_k_mutex_init>
	int ret;

	k_mutex_init(&drv_data->trigger_mutex);

	drv_data->gpio = device_get_binding(cfg->gpio_port);
   2570c:	6970      	ldr	r0, [r6, #20]
   2570e:	f00d fec9 	bl	334a4 <z_impl_device_get_binding>
   25712:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (drv_data->gpio == NULL) {
   25714:	b990      	cbnz	r0, 2573c <adxl362_init_interrupt+0x48>
   25716:	4b77      	ldr	r3, [pc, #476]	; (258f4 <adxl362_init_interrupt+0x200>)
   25718:	4877      	ldr	r0, [pc, #476]	; (258f8 <adxl362_init_interrupt+0x204>)
		LOG_ERR("Failed to get pointer to %s device!",
   2571a:	6972      	ldr	r2, [r6, #20]
   2571c:	1ac0      	subs	r0, r0, r3
   2571e:	08c0      	lsrs	r0, r0, #3
   25720:	0180      	lsls	r0, r0, #6
   25722:	4976      	ldr	r1, [pc, #472]	; (258fc <adxl362_init_interrupt+0x208>)
   25724:	f040 0001 	orr.w	r0, r0, #1
   25728:	f013 ffd1 	bl	396ce <log_string_sync>
			cfg->gpio_port);
		return -EINVAL;
   2572c:	f06f 0515 	mvn.w	r5, #21

	gpio_pin_interrupt_configure(drv_data->gpio, cfg->int_gpio,
				     GPIO_INT_EDGE_TO_ACTIVE);

	return 0;
}
   25730:	4628      	mov	r0, r5
   25732:	b005      	add	sp, #20
   25734:	ecbd 8b02 	vpop	{d8}
   25738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ret = adxl362_set_interrupt_mode(dev, CONFIG_ADXL362_INTERRUPT_MODE);
   2573c:	2101      	movs	r1, #1
   2573e:	4638      	mov	r0, r7
   25740:	f7ff ff14 	bl	2556c <adxl362_set_interrupt_mode>
	if (ret) {
   25744:	4605      	mov	r5, r0
   25746:	2800      	cmp	r0, #0
   25748:	f040 80d0 	bne.w	258ec <adxl362_init_interrupt+0x1f8>
			   GPIO_INPUT | cfg->int_flags);
   2574c:	f896 9019 	ldrb.w	r9, [r6, #25]
	gpio_pin_configure(drv_data->gpio, cfg->int_gpio,
   25750:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
   25754:	f449 7380 	orr.w	r3, r9, #256	; 0x100
   25758:	ee08 3a10 	vmov	s16, r3
   2575c:	f896 b018 	ldrb.w	fp, [r6, #24]
	const struct gpio_driver_api *api =
   25760:	f8da 3008 	ldr.w	r3, [sl, #8]
   25764:	9302      	str	r3, [sp, #8]
	const struct gpio_driver_config *const cfg =
   25766:	f8da 3004 	ldr.w	r3, [sl, #4]
   2576a:	9303      	str	r3, [sp, #12]
	struct gpio_driver_data *data =
   2576c:	f8da 3010 	ldr.w	r3, [sl, #16]
   25770:	9301      	str	r3, [sp, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   25772:	f009 0330 	and.w	r3, r9, #48	; 0x30
   25776:	2b30      	cmp	r3, #48	; 0x30
   25778:	d10e      	bne.n	25798 <adxl362_init_interrupt+0xa4>
   2577a:	4961      	ldr	r1, [pc, #388]	; (25900 <adxl362_init_interrupt+0x20c>)
   2577c:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   25780:	4a60      	ldr	r2, [pc, #384]	; (25904 <adxl362_init_interrupt+0x210>)
   25782:	4861      	ldr	r0, [pc, #388]	; (25908 <adxl362_init_interrupt+0x214>)
   25784:	f013 fcd5 	bl	39132 <printk>
   25788:	4860      	ldr	r0, [pc, #384]	; (2590c <adxl362_init_interrupt+0x218>)
   2578a:	f013 fcd2 	bl	39132 <printk>
   2578e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   25792:	485c      	ldr	r0, [pc, #368]	; (25904 <adxl362_init_interrupt+0x210>)
   25794:	f013 ff6c 	bl	39670 <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   25798:	f009 0302 	and.w	r3, r9, #2
   2579c:	b173      	cbz	r3, 257bc <adxl362_init_interrupt+0xc8>
   2579e:	495c      	ldr	r1, [pc, #368]	; (25910 <adxl362_init_interrupt+0x21c>)
   257a0:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   257a4:	4a57      	ldr	r2, [pc, #348]	; (25904 <adxl362_init_interrupt+0x210>)
   257a6:	4858      	ldr	r0, [pc, #352]	; (25908 <adxl362_init_interrupt+0x214>)
   257a8:	f013 fcc3 	bl	39132 <printk>
   257ac:	4859      	ldr	r0, [pc, #356]	; (25914 <adxl362_init_interrupt+0x220>)
   257ae:	f013 fcc0 	bl	39132 <printk>
   257b2:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   257b6:	4853      	ldr	r0, [pc, #332]	; (25904 <adxl362_init_interrupt+0x210>)
   257b8:	f013 ff5a 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   257bc:	f009 0306 	and.w	r3, r9, #6
   257c0:	2b04      	cmp	r3, #4
   257c2:	d10b      	bne.n	257dc <adxl362_init_interrupt+0xe8>
   257c4:	4954      	ldr	r1, [pc, #336]	; (25918 <adxl362_init_interrupt+0x224>)
   257c6:	4850      	ldr	r0, [pc, #320]	; (25908 <adxl362_init_interrupt+0x214>)
   257c8:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   257cc:	4a4d      	ldr	r2, [pc, #308]	; (25904 <adxl362_init_interrupt+0x210>)
   257ce:	f013 fcb0 	bl	39132 <printk>
   257d2:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   257d6:	484b      	ldr	r0, [pc, #300]	; (25904 <adxl362_init_interrupt+0x210>)
   257d8:	f013 ff4a 	bl	39670 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   257dc:	f04f 0801 	mov.w	r8, #1
   257e0:	9b03      	ldr	r3, [sp, #12]
   257e2:	fa08 f80b 	lsl.w	r8, r8, fp
   257e6:	681b      	ldr	r3, [r3, #0]
   257e8:	ea18 0f03 	tst.w	r8, r3
   257ec:	d10e      	bne.n	2580c <adxl362_init_interrupt+0x118>
   257ee:	494b      	ldr	r1, [pc, #300]	; (2591c <adxl362_init_interrupt+0x228>)
   257f0:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   257f4:	4a43      	ldr	r2, [pc, #268]	; (25904 <adxl362_init_interrupt+0x210>)
   257f6:	4844      	ldr	r0, [pc, #272]	; (25908 <adxl362_init_interrupt+0x214>)
   257f8:	f013 fc9b 	bl	39132 <printk>
   257fc:	4848      	ldr	r0, [pc, #288]	; (25920 <adxl362_init_interrupt+0x22c>)
   257fe:	f013 fc98 	bl	39132 <printk>
   25802:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   25806:	483f      	ldr	r0, [pc, #252]	; (25904 <adxl362_init_interrupt+0x210>)
   25808:	f013 ff32 	bl	39670 <assert_post_action>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2580c:	9b01      	ldr	r3, [sp, #4]
   2580e:	f019 0f01 	tst.w	r9, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   25812:	681b      	ldr	r3, [r3, #0]
   25814:	9a01      	ldr	r2, [sp, #4]
   25816:	bf14      	ite	ne
   25818:	ea48 0303 	orrne.w	r3, r8, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2581c:	ea23 0308 	biceq.w	r3, r3, r8
			   BIT(cfg->int_gpio));
   25820:	f04f 0801 	mov.w	r8, #1
   25824:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   25826:	9b02      	ldr	r3, [sp, #8]
   25828:	ee18 2a10 	vmov	r2, s16
   2582c:	681b      	ldr	r3, [r3, #0]
   2582e:	4659      	mov	r1, fp
   25830:	4650      	mov	r0, sl
   25832:	4798      	blx	r3
   25834:	7e33      	ldrb	r3, [r6, #24]
 */
static inline void gpio_init_callback(struct gpio_callback *callback,
				      gpio_callback_handler_t handler,
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
   25836:	f114 0930 	adds.w	r9, r4, #48	; 0x30
   2583a:	fa08 f803 	lsl.w	r8, r8, r3
   2583e:	d10e      	bne.n	2585e <adxl362_init_interrupt+0x16a>
   25840:	4938      	ldr	r1, [pc, #224]	; (25924 <adxl362_init_interrupt+0x230>)
   25842:	f240 43c9 	movw	r3, #1225	; 0x4c9
   25846:	4a2f      	ldr	r2, [pc, #188]	; (25904 <adxl362_init_interrupt+0x210>)
   25848:	482f      	ldr	r0, [pc, #188]	; (25908 <adxl362_init_interrupt+0x214>)
   2584a:	f013 fc72 	bl	39132 <printk>
   2584e:	4836      	ldr	r0, [pc, #216]	; (25928 <adxl362_init_interrupt+0x234>)
   25850:	f013 fc6f 	bl	39132 <printk>
   25854:	f240 41c9 	movw	r1, #1225	; 0x4c9
   25858:	482a      	ldr	r0, [pc, #168]	; (25904 <adxl362_init_interrupt+0x210>)
   2585a:	f013 ff09 	bl	39670 <assert_post_action>
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2585e:	4b33      	ldr	r3, [pc, #204]	; (2592c <adxl362_init_interrupt+0x238>)
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
   25860:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	callback->pin_mask = pin_mask;
   25862:	e9c4 380d 	strd	r3, r8, [r4, #52]	; 0x34
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   25866:	6883      	ldr	r3, [r0, #8]
   25868:	69db      	ldr	r3, [r3, #28]
   2586a:	b963      	cbnz	r3, 25886 <adxl362_init_interrupt+0x192>
   2586c:	4b21      	ldr	r3, [pc, #132]	; (258f4 <adxl362_init_interrupt+0x200>)
   2586e:	4822      	ldr	r0, [pc, #136]	; (258f8 <adxl362_init_interrupt+0x204>)
		LOG_ERR("Failed to set gpio callback!");
   25870:	492f      	ldr	r1, [pc, #188]	; (25930 <adxl362_init_interrupt+0x23c>)
   25872:	1ac0      	subs	r0, r0, r3
   25874:	08c0      	lsrs	r0, r0, #3
   25876:	0180      	lsls	r0, r0, #6
   25878:	f040 0001 	orr.w	r0, r0, #1
   2587c:	f013 ff27 	bl	396ce <log_string_sync>
		return -EIO;
   25880:	f06f 0504 	mvn.w	r5, #4
   25884:	e754      	b.n	25730 <adxl362_init_interrupt+0x3c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   25886:	2201      	movs	r2, #1
   25888:	4649      	mov	r1, r9
   2588a:	4798      	blx	r3
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
   2588c:	2800      	cmp	r0, #0
   2588e:	dbed      	blt.n	2586c <adxl362_init_interrupt+0x178>
	drv_data->work.handler = adxl362_work_cb;
   25890:	4b28      	ldr	r3, [pc, #160]	; (25934 <adxl362_init_interrupt+0x240>)
	drv_data->dev = dev;
   25892:	62a7      	str	r7, [r4, #40]	; 0x28
	drv_data->work.handler = adxl362_work_cb;
   25894:	6663      	str	r3, [r4, #100]	; 0x64
	gpio_pin_interrupt_configure(drv_data->gpio, cfg->int_gpio,
   25896:	7e37      	ldrb	r7, [r6, #24]
   25898:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2589a:	2601      	movs	r6, #1
   2589c:	6863      	ldr	r3, [r4, #4]
   2589e:	40be      	lsls	r6, r7
   258a0:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
   258a2:	f8d4 8008 	ldr.w	r8, [r4, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   258a6:	421e      	tst	r6, r3
	const struct gpio_driver_data *const data =
   258a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   258ac:	d10e      	bne.n	258cc <adxl362_init_interrupt+0x1d8>
   258ae:	491b      	ldr	r1, [pc, #108]	; (2591c <adxl362_init_interrupt+0x228>)
   258b0:	f44f 7324 	mov.w	r3, #656	; 0x290
   258b4:	4a13      	ldr	r2, [pc, #76]	; (25904 <adxl362_init_interrupt+0x210>)
   258b6:	4814      	ldr	r0, [pc, #80]	; (25908 <adxl362_init_interrupt+0x214>)
   258b8:	f013 fc3b 	bl	39132 <printk>
   258bc:	4818      	ldr	r0, [pc, #96]	; (25920 <adxl362_init_interrupt+0x22c>)
   258be:	f013 fc38 	bl	39132 <printk>
   258c2:	f44f 7124 	mov.w	r1, #656	; 0x290
   258c6:	480f      	ldr	r0, [pc, #60]	; (25904 <adxl362_init_interrupt+0x210>)
   258c8:	f013 fed2 	bl	39670 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   258cc:	f8d9 3000 	ldr.w	r3, [r9]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   258d0:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   258d4:	421e      	tst	r6, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
   258d6:	bf14      	ite	ne
   258d8:	f44f 3300 	movne.w	r3, #131072	; 0x20000
   258dc:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
   258e0:	4639      	mov	r1, r7
   258e2:	4620      	mov	r0, r4
   258e4:	f8d8 6018 	ldr.w	r6, [r8, #24]
   258e8:	47b0      	blx	r6
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   258ea:	e721      	b.n	25730 <adxl362_init_interrupt+0x3c>
		return -EFAULT;
   258ec:	f06f 050d 	mvn.w	r5, #13
   258f0:	e71e      	b.n	25730 <adxl362_init_interrupt+0x3c>
   258f2:	bf00      	nop
   258f4:	0003f5a4 	.word	0x0003f5a4
   258f8:	0003f5a4 	.word	0x0003f5a4
   258fc:	00041c69 	.word	0x00041c69
   25900:	00041c8d 	.word	0x00041c8d
   25904:	000402d6 	.word	0x000402d6
   25908:	0004033e 	.word	0x0004033e
   2590c:	00041cc6 	.word	0x00041cc6
   25910:	00041d03 	.word	0x00041d03
   25914:	00041d37 	.word	0x00041d37
   25918:	00041d89 	.word	0x00041d89
   2591c:	00040300 	.word	0x00040300
   25920:	0004035b 	.word	0x0004035b
   25924:	00041954 	.word	0x00041954
   25928:	00041dbc 	.word	0x00041dbc
   2592c:	0003b50b 	.word	0x0003b50b
   25930:	00041de2 	.word	0x00041de2
   25934:	000255cd 	.word	0x000255cd

00025938 <bme680_sample_fetch>:

static int bme680_sample_fetch(const struct device *dev,
			       enum sensor_channel chan)
{
	struct bme680_data *data = dev->data;
	uint8_t buff[BME680_LEN_FIELD] = { 0 };
   25938:	2300      	movs	r3, #0
{
   2593a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t adc_temp, adc_press;
	uint16_t adc_hum, adc_gas_res;
	int size = BME680_LEN_FIELD;
	int ret;

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   2593e:	2938      	cmp	r1, #56	; 0x38
{
   25940:	b087      	sub	sp, #28
	uint8_t buff[BME680_LEN_FIELD] = { 0 };
   25942:	9304      	str	r3, [sp, #16]
   25944:	e9cd 3302 	strd	r3, r3, [sp, #8]
	struct bme680_data *data = dev->data;
   25948:	6904      	ldr	r4, [r0, #16]
	uint8_t buff[BME680_LEN_FIELD] = { 0 };
   2594a:	f8cd 3013 	str.w	r3, [sp, #19]
	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);
   2594e:	d009      	beq.n	25964 <bme680_sample_fetch+0x2c>
   25950:	49a8      	ldr	r1, [pc, #672]	; (25bf4 <bme680_sample_fetch+0x2bc>)
   25952:	48a9      	ldr	r0, [pc, #676]	; (25bf8 <bme680_sample_fetch+0x2c0>)
   25954:	23ca      	movs	r3, #202	; 0xca
   25956:	4aa9      	ldr	r2, [pc, #676]	; (25bfc <bme680_sample_fetch+0x2c4>)
   25958:	f013 fbeb 	bl	39132 <printk>
   2595c:	21ca      	movs	r1, #202	; 0xca
   2595e:	48a7      	ldr	r0, [pc, #668]	; (25bfc <bme680_sample_fetch+0x2c4>)
   25960:	f013 fe86 	bl	39670 <assert_post_action>

	ret = bme680_reg_read(data, BME680_REG_FIELD0, buff, size);
   25964:	230f      	movs	r3, #15
   25966:	211d      	movs	r1, #29
   25968:	4620      	mov	r0, r4
   2596a:	aa02      	add	r2, sp, #8
   2596c:	f015 fdfb 	bl	3b566 <bme680_reg_read>
	if (ret < 0) {
   25970:	2800      	cmp	r0, #0
   25972:	f2c0 813b 	blt.w	25bec <bme680_sample_fetch+0x2b4>
		return ret;
	}

	data->new_data = buff[0] & BME680_MSK_NEW_DATA;
   25976:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2597a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   2597e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
   25982:	f89d 2016 	ldrb.w	r2, [sp, #22]
			   | ((uint32_t)buff[7] >> 4));
	adc_hum = (uint16_t)(((uint32_t)buff[8] << 8) | (uint32_t)buff[9]);
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
	gas_range = buff[14] & BME680_MSK_GAS_RANGE;

	if (data->new_data) {
   25986:	061b      	lsls	r3, r3, #24
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
   25988:	f002 0110 	and.w	r1, r2, #16
   2598c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
	if (data->new_data) {
   25990:	f140 8125 	bpl.w	25bde <bme680_sample_fetch+0x2a6>
			   | ((uint32_t)buff[7] >> 4));
   25994:	f89d 600f 	ldrb.w	r6, [sp, #15]
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
   25998:	f89d 100e 	ldrb.w	r1, [sp, #14]
			   | ((uint32_t)buff[7] >> 4));
   2599c:	0936      	lsrs	r6, r6, #4
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
   2599e:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
   259a2:	f89d 100d 	ldrb.w	r1, [sp, #13]
			    | ((uint32_t)buff[4] >> 4));
   259a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
   259aa:	ea46 3101 	orr.w	r1, r6, r1, lsl #12
	var1 = ((int32_t)adc_temp >> 3) - ((int32_t)data->par_t1 << 1);
   259ae:	8aa6      	ldrh	r6, [r4, #20]
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   259b0:	f89d c00b 	ldrb.w	ip, [sp, #11]
	var1 = ((int32_t)adc_temp >> 3) - ((int32_t)data->par_t1 << 1);
   259b4:	0076      	lsls	r6, r6, #1
   259b6:	ebc6 06d1 	rsb	r6, r6, r1, lsr #3
   259ba:	ea4f 79e6 	mov.w	r9, r6, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   259be:	0870      	lsrs	r0, r6, #1
   259c0:	ea40 70c9 	orr.w	r0, r0, r9, lsl #31
   259c4:	ea4f 0769 	mov.w	r7, r9, asr #1
   259c8:	4347      	muls	r7, r0
   259ca:	fba0 0100 	umull	r0, r1, r0, r0
   259ce:	eb01 0147 	add.w	r1, r1, r7, lsl #1
   259d2:	0b07      	lsrs	r7, r0, #12
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   259d4:	f994 0018 	ldrsb.w	r0, [r4, #24]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   259d8:	ea47 5701 	orr.w	r7, r7, r1, lsl #20
   259dc:	ea4f 3b21 	mov.w	fp, r1, asr #12
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   259e0:	0101      	lsls	r1, r0, #4
   259e2:	ea4f 79e1 	mov.w	r9, r1, asr #31
   259e6:	fb07 f809 	mul.w	r8, r7, r9
   259ea:	fb01 880b 	mla	r8, r1, fp, r8
   259ee:	fba7 0101 	umull	r0, r1, r7, r1
   259f2:	e9cd 0100 	strd	r0, r1, [sp]
   259f6:	9901      	ldr	r1, [sp, #4]
	var2 = (var1 * (int32_t)data->par_t2) >> 11;
   259f8:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   259fc:	4441      	add	r1, r8
   259fe:	9101      	str	r1, [sp, #4]
	var2 = (var1 * (int32_t)data->par_t2) >> 11;
   25a00:	fb87 0106 	smull	r0, r1, r7, r6
   25a04:	0ac6      	lsrs	r6, r0, #11
   25a06:	ea46 5641 	orr.w	r6, r6, r1, lsl #21
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   25a0a:	9900      	ldr	r1, [sp, #0]
			    | ((uint32_t)buff[4] >> 4));
   25a0c:	091b      	lsrs	r3, r3, #4
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   25a0e:	0b88      	lsrs	r0, r1, #14
   25a10:	9901      	ldr	r1, [sp, #4]
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   25a12:	ea43 1c0c 	orr.w	ip, r3, ip, lsl #4
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   25a16:	ea40 4081 	orr.w	r0, r0, r1, lsl #18
	data->t_fine = var2 + var3;
   25a1a:	4430      	add	r0, r6
   25a1c:	6460      	str	r0, [r4, #68]	; 0x44
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   25a1e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
	var1 = (((int32_t)data->t_fine) >> 1) - 64000;
   25a22:	1040      	asrs	r0, r0, #1
   25a24:	f5a0 477a 	sub.w	r7, r0, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   25a28:	10b8      	asrs	r0, r7, #2
   25a2a:	4340      	muls	r0, r0
		(int32_t)data->par_p6) >> 2;
   25a2c:	f994 6024 	ldrsb.w	r6, [r4, #36]	; 0x24
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   25a30:	ea4f 28e0 	mov.w	r8, r0, asr #11
   25a34:	fb06 f808 	mul.w	r8, r6, r8
	var2 = var2 + ((var1 * (int32_t)data->par_p5) << 1);
   25a38:	f9b4 6022 	ldrsh.w	r6, [r4, #34]	; 0x22
	var2 = (var2 >> 2) + ((int32_t)data->par_p4 << 16);
   25a3c:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
	var2 = var2 + ((var1 * (int32_t)data->par_p5) << 1);
   25a40:	437e      	muls	r6, r7
   25a42:	0076      	lsls	r6, r6, #1
   25a44:	eb06 06a8 	add.w	r6, r6, r8, asr #2
	var2 = (var2 >> 2) + ((int32_t)data->par_p4 << 16);
   25a48:	041b      	lsls	r3, r3, #16
   25a4a:	eb03 06a6 	add.w	r6, r3, r6, asr #2
	calc_press = (calc_press - (var2 >> 12)) * ((uint32_t)3125);
   25a4e:	f640 4335 	movw	r3, #3125	; 0xc35
	       + (((int32_t)data->par_p2 * var1) >> 1);
   25a52:	f9b4 801c 	ldrsh.w	r8, [r4, #28]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   25a56:	1340      	asrs	r0, r0, #13
	       + (((int32_t)data->par_p2 * var1) >> 1);
   25a58:	fb07 f708 	mul.w	r7, r7, r8
		 ((int32_t)data->par_p3 << 5)) >> 3)
   25a5c:	f994 801e 	ldrsb.w	r8, [r4, #30]
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   25a60:	f89d 500a 	ldrb.w	r5, [sp, #10]
		 ((int32_t)data->par_p3 << 5)) >> 3)
   25a64:	ea4f 1848 	mov.w	r8, r8, lsl #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   25a68:	fb00 f008 	mul.w	r0, r0, r8
		 ((int32_t)data->par_p3 << 5)) >> 3)
   25a6c:	10c0      	asrs	r0, r0, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   25a6e:	eb00 0067 	add.w	r0, r0, r7, asr #1
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   25a72:	ea4c 3505 	orr.w	r5, ip, r5, lsl #12
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   25a76:	8b67      	ldrh	r7, [r4, #26]
	calc_press = 1048576 - adc_press;
   25a78:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
	var1 = var1 >> 18;
   25a7c:	1480      	asrs	r0, r0, #18
	calc_press = (calc_press - (var2 >> 12)) * ((uint32_t)3125);
   25a7e:	eba5 3626 	sub.w	r6, r5, r6, asr #12
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   25a82:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
	calc_press = (calc_press - (var2 >> 12)) * ((uint32_t)3125);
   25a86:	435e      	muls	r6, r3
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   25a88:	4378      	muls	r0, r7
	if (calc_press >= (int32_t)0x40000000) {
   25a8a:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   25a8e:	ea4f 30e0 	mov.w	r0, r0, asr #15
		calc_press = ((calc_press / var1) << 1);
   25a92:	bfad      	iteet	ge
   25a94:	fb96 f3f0 	sdivge	r3, r6, r0
		calc_press = ((calc_press << 1) / var1);
   25a98:	0076      	lsllt	r6, r6, #1
   25a9a:	fb96 f3f0 	sdivlt	r3, r6, r0
		calc_press = ((calc_press / var1) << 1);
   25a9e:	005b      	lslge	r3, r3, #1
	var2 = ((int32_t)(calc_press >> 2) * (int32_t)data->par_p8) >> 13;
   25aa0:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
   25aa4:	109f      	asrs	r7, r3, #2
   25aa6:	4347      	muls	r7, r0
		(int32_t)(((calc_press >> 3)
   25aa8:	10dd      	asrs	r5, r3, #3
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   25aaa:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
			 * (calc_press >> 3)) >> 13)) >> 12;
   25aae:	436d      	muls	r5, r5
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   25ab0:	01c0      	lsls	r0, r0, #7
   25ab2:	eb00 3067 	add.w	r0, r0, r7, asr #13
	var1 = ((int32_t)data->par_p9 *
   25ab6:	f9b4 7028 	ldrsh.w	r7, [r4, #40]	; 0x28
			 * (calc_press >> 3)) >> 13)) >> 12;
   25aba:	136d      	asrs	r5, r5, #13
	var1 = ((int32_t)data->par_p9 *
   25abc:	437d      	muls	r5, r7
	var3 = ((int32_t)(calc_press >> 8) * (int32_t)(calc_press >> 8)
   25abe:	121e      	asrs	r6, r3, #8
   25ac0:	fb06 f706 	mul.w	r7, r6, r6
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   25ac4:	eb00 3025 	add.w	r0, r0, r5, asr #12
		* (int32_t)data->par_p10) >> 17;
   25ac8:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   25acc:	3180      	adds	r1, #128	; 0x80
		* (int32_t)data->par_p10) >> 17;
   25ace:	437d      	muls	r5, r7
   25ad0:	4375      	muls	r5, r6
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   25ad2:	eb00 4065 	add.w	r0, r0, r5, asr #17
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   25ad6:	2564      	movs	r5, #100	; 0x64
			   + ((var1 + var2 + var3
   25ad8:	eb03 1320 	add.w	r3, r3, r0, asr #4
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   25adc:	f994 000c 	ldrsb.w	r0, [r4, #12]
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   25ae0:	1209      	asrs	r1, r1, #8
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   25ae2:	4348      	muls	r0, r1
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   25ae4:	fb90 f0f5 	sdiv	r0, r0, r5
	data->calc_press = calc_press
   25ae8:	6363      	str	r3, [r4, #52]	; 0x34
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   25aea:	f994 300b 	ldrsb.w	r3, [r4, #11]
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   25aee:	4348      	muls	r0, r1
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   25af0:	434b      	muls	r3, r1
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   25af2:	1180      	asrs	r0, r0, #6
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   25af4:	fb93 f3f5 	sdiv	r3, r3, r5
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   25af8:	fb90 f0f5 	sdiv	r0, r0, r5
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
   25afc:	f06f 060f 	mvn.w	r6, #15
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   25b00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   25b04:	4418      	add	r0, r3
	var2_1 = (int32_t)data->par_h2;
   25b06:	8923      	ldrh	r3, [r4, #8]
   25b08:	f8bd e010 	ldrh.w	lr, [sp, #16]
	var2 = (var2_1 * var2_2) >> 10;
   25b0c:	4358      	muls	r0, r3
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
   25b0e:	f89d a015 	ldrb.w	sl, [sp, #21]
	var2 = (var2_1 * var2_2) >> 10;
   25b12:	1283      	asrs	r3, r0, #10
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   25b14:	6321      	str	r1, [r4, #48]	; 0x30
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
   25b16:	fa9e fe9e 	rev16.w	lr, lr
   25b1a:	88e0      	ldrh	r0, [r4, #6]
   25b1c:	fa1f fe8e 	uxth.w	lr, lr
   25b20:	fb06 e000 	mla	r0, r6, r0, lr
	       (((temp_scaled * (int32_t)data->par_h3)
   25b24:	f994 e00a 	ldrsb.w	lr, [r4, #10]
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   25b28:	2605      	movs	r6, #5
	       (((temp_scaled * (int32_t)data->par_h3)
   25b2a:	fb01 fe0e 	mul.w	lr, r1, lr
		 / ((int32_t)100)) >> 1);
   25b2e:	fb9e fef5 	sdiv	lr, lr, r5
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
   25b32:	eba0 006e 	sub.w	r0, r0, lr, asr #1
	var3 = var1 * var2;
   25b36:	4358      	muls	r0, r3
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   25b38:	f994 300e 	ldrsb.w	r3, [r4, #14]
   25b3c:	434b      	muls	r3, r1
   25b3e:	fb93 f3f5 	sdiv	r3, r3, r5
	var4 = (int32_t)data->par_h6 << 7;
   25b42:	7b61      	ldrb	r1, [r4, #13]
		       ((int64_t)look_up1[gas_range])) >> 16;
   25b44:	f002 050f 	and.w	r5, r2, #15
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   25b48:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   25b4c:	1381      	asrs	r1, r0, #14
   25b4e:	4349      	muls	r1, r1
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   25b50:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   25b52:	1289      	asrs	r1, r1, #10
	var6 = (var4 * var5) >> 1;
   25b54:	434b      	muls	r3, r1
	calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
   25b56:	eb00 0363 	add.w	r3, r0, r3, asr #1
   25b5a:	1298      	asrs	r0, r3, #10
   25b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25b60:	4343      	muls	r3, r0
	data->calc_humidity = calc_hum;
   25b62:	4927      	ldr	r1, [pc, #156]	; (25c00 <bme680_sample_fetch+0x2c8>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
   25b64:	131b      	asrs	r3, r3, #12
   25b66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	data->calc_humidity = calc_hum;
   25b6a:	428b      	cmp	r3, r1
   25b6c:	bfd4      	ite	le
   25b6e:	63a3      	strle	r3, [r4, #56]	; 0x38
   25b70:	63a1      	strgt	r1, [r4, #56]	; 0x38
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   25b72:	f240 503c 	movw	r0, #1340	; 0x53c
   25b76:	2100      	movs	r1, #0
   25b78:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
   25b7c:	0992      	lsrs	r2, r2, #6
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   25b7e:	fbc3 0106 	smlal	r0, r1, r3, r6
		       ((int64_t)look_up1[gas_range])) >> 16;
   25b82:	4b20      	ldr	r3, [pc, #128]	; (25c04 <bme680_sample_fetch+0x2cc>)
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
   25b84:	ea42 0a8a 	orr.w	sl, r2, sl, lsl #2
		       ((int64_t)look_up1[gas_range])) >> 16;
   25b88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   25b8c:	fba0 6703 	umull	r6, r7, r0, r3
   25b90:	fb03 7701 	mla	r7, r3, r1, r7
   25b94:	0c31      	lsrs	r1, r6, #16
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
   25b96:	2600      	movs	r6, #0
   25b98:	ea4f 33ca 	mov.w	r3, sl, lsl #15
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   25b9c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
   25ba0:	f113 437f 	adds.w	r3, r3, #4278190080	; 0xff000000
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   25ba4:	ea4f 4027 	mov.w	r0, r7, asr #16
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
   25ba8:	f146 36ff 	adc.w	r6, r6, #4294967295
   25bac:	185a      	adds	r2, r3, r1
   25bae:	eb46 0300 	adc.w	r3, r6, r0
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
   25bb2:	4e15      	ldr	r6, [pc, #84]	; (25c08 <bme680_sample_fetch+0x2d0>)
   25bb4:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
   25bb8:	fba5 6701 	umull	r6, r7, r5, r1
   25bbc:	fb05 7700 	mla	r7, r5, r0, r7
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   25bc0:	0855      	lsrs	r5, r2, #1
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
   25bc2:	0a70      	lsrs	r0, r6, #9
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   25bc4:	ea45 75c3 	orr.w	r5, r5, r3, lsl #31
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
   25bc8:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
   25bcc:	ea4f 2c67 	mov.w	ip, r7, asr #9
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   25bd0:	1059      	asrs	r1, r3, #1
					    / (int64_t)var2);
   25bd2:	1940      	adds	r0, r0, r5
   25bd4:	eb4c 0101 	adc.w	r1, ip, r1
   25bd8:	f7f7 f916 	bl	1ce08 <__aeabi_ldivmod>
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   25bdc:	63e0      	str	r0, [r4, #60]	; 0x3c
		bme680_calc_humidity(data, adc_hum);
		bme680_calc_gas_resistance(data, gas_range, adc_gas_res);
	}

	/* Trigger the next measurement */
	ret = bme680_reg_write(data, BME680_REG_CTRL_MEAS,
   25bde:	2255      	movs	r2, #85	; 0x55
   25be0:	2174      	movs	r1, #116	; 0x74
   25be2:	4620      	mov	r0, r4
   25be4:	f015 fcdb 	bl	3b59e <bme680_reg_write>
			       BME680_CTRL_MEAS_VAL);
	if (ret < 0) {
   25be8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
		return ret;
	}

	return 0;
}
   25bec:	b007      	add	sp, #28
   25bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25bf2:	bf00      	nop
   25bf4:	00041b73 	.word	0x00041b73
   25bf8:	0004033e 	.word	0x0004033e
   25bfc:	00041dff 	.word	0x00041dff
   25c00:	000186a0 	.word	0x000186a0
   25c04:	0003fc28 	.word	0x0003fc28
   25c08:	0003fc68 	.word	0x0003fc68

00025c0c <bme680_init>:

	return 0;
}

static int bme680_init(const struct device *dev)
{
   25c0c:	b530      	push	{r4, r5, lr}
   25c0e:	4604      	mov	r4, r0
	struct bme680_data *data = dev->data;
   25c10:	6905      	ldr	r5, [r0, #16]
{
   25c12:	b08d      	sub	sp, #52	; 0x34
   25c14:	4896      	ldr	r0, [pc, #600]	; (25e70 <bme680_init+0x264>)
   25c16:	f00d fc45 	bl	334a4 <z_impl_device_get_binding>

	data->i2c_master = device_get_binding(
   25c1a:	6028      	str	r0, [r5, #0]
		DT_INST_BUS_LABEL(0));
	if (!data->i2c_master) {
   25c1c:	b968      	cbnz	r0, 25c3a <bme680_init+0x2e>
   25c1e:	4895      	ldr	r0, [pc, #596]	; (25e74 <bme680_init+0x268>)
   25c20:	4b95      	ldr	r3, [pc, #596]	; (25e78 <bme680_init+0x26c>)
		LOG_ERR("I2C master not found: %s",
   25c22:	4a93      	ldr	r2, [pc, #588]	; (25e70 <bme680_init+0x264>)
   25c24:	1ac0      	subs	r0, r0, r3
   25c26:	08c0      	lsrs	r0, r0, #3
   25c28:	4994      	ldr	r1, [pc, #592]	; (25e7c <bme680_init+0x270>)
   25c2a:	0180      	lsls	r0, r0, #6
		LOG_ERR("Bad BME680 chip id 0x%x", data->chip_id);
   25c2c:	f040 0001 	orr.w	r0, r0, #1
   25c30:	f013 fd4d 	bl	396ce <log_string_sync>
	}

	data->i2c_slave_addr = DT_INST_REG_ADDR(0);

	if (bme680_chip_init(dev) < 0) {
		return -EINVAL;
   25c34:	f06f 0015 	mvn.w	r0, #21
   25c38:	e117      	b.n	25e6a <bme680_init+0x25e>
	data->i2c_slave_addr = DT_INST_REG_ADDR(0);
   25c3a:	2376      	movs	r3, #118	; 0x76
	if (bme680_chip_init(dev) < 0) {
   25c3c:	6924      	ldr	r4, [r4, #16]
	data->i2c_slave_addr = DT_INST_REG_ADDR(0);
   25c3e:	80ab      	strh	r3, [r5, #4]
	err = bme680_reg_read(data, BME680_REG_CHIP_ID, &data->chip_id, 1);
   25c40:	21d0      	movs	r1, #208	; 0xd0
   25c42:	2301      	movs	r3, #1
   25c44:	4620      	mov	r0, r4
   25c46:	f104 0248 	add.w	r2, r4, #72	; 0x48
   25c4a:	f015 fc8c 	bl	3b566 <bme680_reg_read>
	if (err < 0) {
   25c4e:	2800      	cmp	r0, #0
   25c50:	dbf0      	blt.n	25c34 <bme680_init+0x28>
	if (data->chip_id == BME680_CHIP_ID) {
   25c52:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   25c56:	2a61      	cmp	r2, #97	; 0x61
   25c58:	d006      	beq.n	25c68 <bme680_init+0x5c>
   25c5a:	4886      	ldr	r0, [pc, #536]	; (25e74 <bme680_init+0x268>)
   25c5c:	4b86      	ldr	r3, [pc, #536]	; (25e78 <bme680_init+0x26c>)
		LOG_ERR("Bad BME680 chip id 0x%x", data->chip_id);
   25c5e:	4988      	ldr	r1, [pc, #544]	; (25e80 <bme680_init+0x274>)
   25c60:	1ac0      	subs	r0, r0, r3
   25c62:	08c0      	lsrs	r0, r0, #3
   25c64:	0180      	lsls	r0, r0, #6
   25c66:	e7e1      	b.n	25c2c <bme680_init+0x20>
	err = bme680_reg_read(data, BME680_REG_COEFF1, buff, BME680_LEN_COEFF1);
   25c68:	2317      	movs	r3, #23
   25c6a:	218a      	movs	r1, #138	; 0x8a
   25c6c:	4620      	mov	r0, r4
   25c6e:	aa01      	add	r2, sp, #4
   25c70:	f015 fc79 	bl	3b566 <bme680_reg_read>
	if (err < 0) {
   25c74:	2800      	cmp	r0, #0
   25c76:	dbdd      	blt.n	25c34 <bme680_init+0x28>
	err = bme680_reg_read(data, BME680_REG_COEFF2, &buff[BME680_LEN_COEFF1],
   25c78:	2310      	movs	r3, #16
   25c7a:	21e1      	movs	r1, #225	; 0xe1
   25c7c:	4620      	mov	r0, r4
   25c7e:	f10d 021b 	add.w	r2, sp, #27
   25c82:	f015 fc70 	bl	3b566 <bme680_reg_read>
	if (err < 0) {
   25c86:	2800      	cmp	r0, #0
   25c88:	dbd4      	blt.n	25c34 <bme680_init+0x28>
	err = bme680_reg_read(data, BME680_REG_COEFF3,
   25c8a:	2305      	movs	r3, #5
   25c8c:	2100      	movs	r1, #0
   25c8e:	4620      	mov	r0, r4
   25c90:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   25c94:	f015 fc67 	bl	3b566 <bme680_reg_read>
	if (err < 0) {
   25c98:	2800      	cmp	r0, #0
   25c9a:	dbcb      	blt.n	25c34 <bme680_init+0x28>
	data->par_t1 = (uint16_t)(BME680_CONCAT_BYTES(buff[32], buff[31]));
   25c9c:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   25ca0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
	err = bme680_reg_write(data, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   25ca4:	4620      	mov	r0, r4
	data->par_t1 = (uint16_t)(BME680_CONCAT_BYTES(buff[32], buff[31]));
   25ca6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25caa:	82a3      	strh	r3, [r4, #20]
	data->par_t2 = (int16_t)(BME680_CONCAT_BYTES(buff[1], buff[0]));
   25cac:	f89d 2005 	ldrb.w	r2, [sp, #5]
   25cb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   25cb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25cb8:	82e3      	strh	r3, [r4, #22]
	data->par_t3 = (uint8_t)(buff[2]);
   25cba:	f89d 3006 	ldrb.w	r3, [sp, #6]
   25cbe:	7623      	strb	r3, [r4, #24]
	data->par_p1 = (uint16_t)(BME680_CONCAT_BYTES(buff[5], buff[4]));
   25cc0:	f89d 2009 	ldrb.w	r2, [sp, #9]
   25cc4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   25cc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25ccc:	8363      	strh	r3, [r4, #26]
	data->par_p2 = (int16_t)(BME680_CONCAT_BYTES(buff[7], buff[6]));
   25cce:	f89d 200b 	ldrb.w	r2, [sp, #11]
   25cd2:	f89d 300a 	ldrb.w	r3, [sp, #10]
   25cd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25cda:	83a3      	strh	r3, [r4, #28]
	data->par_p3 = (int8_t)buff[8];
   25cdc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   25ce0:	77a3      	strb	r3, [r4, #30]
	data->par_p4 = (int16_t)(BME680_CONCAT_BYTES(buff[11], buff[10]));
   25ce2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   25ce6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   25cea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25cee:	8423      	strh	r3, [r4, #32]
	data->par_p5 = (int16_t)(BME680_CONCAT_BYTES(buff[13], buff[12]));
   25cf0:	f89d 2011 	ldrb.w	r2, [sp, #17]
   25cf4:	f89d 3010 	ldrb.w	r3, [sp, #16]
   25cf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25cfc:	8463      	strh	r3, [r4, #34]	; 0x22
	data->par_p6 = (int8_t)(buff[15]);
   25cfe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   25d02:	ba5b      	rev16	r3, r3
   25d04:	84a3      	strh	r3, [r4, #36]	; 0x24
	data->par_p8 = (int16_t)(BME680_CONCAT_BYTES(buff[19], buff[18]));
   25d06:	f89d 2017 	ldrb.w	r2, [sp, #23]
   25d0a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   25d0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25d12:	84e3      	strh	r3, [r4, #38]	; 0x26
	data->par_p9 = (int16_t)(BME680_CONCAT_BYTES(buff[21], buff[20]));
   25d14:	f89d 2019 	ldrb.w	r2, [sp, #25]
   25d18:	f89d 3018 	ldrb.w	r3, [sp, #24]
   25d1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25d20:	8523      	strh	r3, [r4, #40]	; 0x28
	data->par_p10 = (uint8_t)(buff[22]);
   25d22:	f89d 301a 	ldrb.w	r3, [sp, #26]
   25d26:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	data->par_h1 = (uint16_t)(((uint16_t)buff[25] << 4) | (buff[24] & 0x0f));
   25d2a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   25d2e:	f89d 101d 	ldrb.w	r1, [sp, #29]
   25d32:	f003 020f 	and.w	r2, r3, #15
   25d36:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   25d3a:	80e2      	strh	r2, [r4, #6]
	data->par_h2 = (uint16_t)(((uint16_t)buff[23] << 4) | ((buff[24]) >> 4));
   25d3c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   25d40:	091b      	lsrs	r3, r3, #4
   25d42:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   25d46:	8123      	strh	r3, [r4, #8]
	data->par_h3 = (int8_t)buff[26];
   25d48:	f89d 301e 	ldrb.w	r3, [sp, #30]
	err = bme680_reg_write(data, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   25d4c:	2172      	movs	r1, #114	; 0x72
	data->par_h3 = (int8_t)buff[26];
   25d4e:	72a3      	strb	r3, [r4, #10]
	data->par_h4 = (int8_t)buff[27];
   25d50:	f89d 301f 	ldrb.w	r3, [sp, #31]
   25d54:	72e3      	strb	r3, [r4, #11]
	data->par_h5 = (int8_t)buff[28];
   25d56:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25d5a:	7323      	strb	r3, [r4, #12]
	data->par_h6 = (uint8_t)buff[29];
   25d5c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25d60:	7363      	strb	r3, [r4, #13]
	data->par_h7 = (int8_t)buff[30];
   25d62:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   25d66:	73a3      	strb	r3, [r4, #14]
	data->par_gh1 = (int8_t)buff[35];
   25d68:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   25d6c:	73e3      	strb	r3, [r4, #15]
	data->par_gh2 = (int16_t)(BME680_CONCAT_BYTES(buff[34], buff[33]));
   25d6e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   25d72:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   25d76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25d7a:	8223      	strh	r3, [r4, #16]
	data->par_gh3 = (int8_t)buff[36];
   25d7c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	err = bme680_reg_write(data, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   25d80:	2201      	movs	r2, #1
	data->par_gh3 = (int8_t)buff[36];
   25d82:	74a3      	strb	r3, [r4, #18]
	data->res_heat_val = (int8_t)buff[37];
   25d84:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   25d88:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	data->res_heat_range = ((buff[39] & BME680_MSK_RH_RANGE) >> 4);
   25d8c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   25d90:	f3c3 1301 	ubfx	r3, r3, #4, #2
   25d94:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	data->range_sw_err = ((int8_t)(buff[41] & BME680_MSK_RANGE_SW_ERR)) / 16;
   25d98:	f99d 302d 	ldrsb.w	r3, [sp, #45]	; 0x2d
   25d9c:	111b      	asrs	r3, r3, #4
   25d9e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	err = bme680_reg_write(data, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   25da2:	f015 fbfc 	bl	3b59e <bme680_reg_write>
	if (err < 0) {
   25da6:	2800      	cmp	r0, #0
   25da8:	f6ff af44 	blt.w	25c34 <bme680_init+0x28>
	err = bme680_reg_write(data, BME680_REG_CONFIG, BME680_CONFIG_VAL);
   25dac:	2200      	movs	r2, #0
   25dae:	2175      	movs	r1, #117	; 0x75
   25db0:	4620      	mov	r0, r4
   25db2:	f015 fbf4 	bl	3b59e <bme680_reg_write>
	if (err < 0) {
   25db6:	2800      	cmp	r0, #0
   25db8:	f6ff af3c 	blt.w	25c34 <bme680_init+0x28>
	err = bme680_reg_write(data, BME680_REG_CTRL_GAS_1,
   25dbc:	2210      	movs	r2, #16
   25dbe:	2171      	movs	r1, #113	; 0x71
   25dc0:	4620      	mov	r0, r4
   25dc2:	f015 fbec 	bl	3b59e <bme680_reg_write>
	if (err < 0) {
   25dc6:	2800      	cmp	r0, #0
   25dc8:	f6ff af34 	blt.w	25c34 <bme680_init+0x28>
					   * heatr_temp * 5) / 100)
   25dcc:	2205      	movs	r2, #5
   25dce:	8a21      	ldrh	r1, [r4, #16]
   25dd0:	4b2c      	ldr	r3, [pc, #176]	; (25e84 <bme680_init+0x278>)
   25dd2:	2064      	movs	r0, #100	; 0x64
   25dd4:	fb11 3302 	smlabb	r3, r1, r2, r3
   25dd8:	f44f 71a0 	mov.w	r1, #320	; 0x140
   25ddc:	4359      	muls	r1, r3
   25dde:	fbb1 f1f0 	udiv	r1, r1, r0
					 + 3276800) / 10);
   25de2:	230a      	movs	r3, #10
   25de4:	f501 1148 	add.w	r1, r1, #3276800	; 0x320000
   25de8:	fbb1 f1f3 	udiv	r1, r1, r3
	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
   25dec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
   25df0:	f994 300f 	ldrsb.w	r3, [r4, #15]
   25df4:	f503 7344 	add.w	r3, r3, #784	; 0x310
   25df8:	4359      	muls	r1, r3
	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
   25dfa:	f994 3012 	ldrsb.w	r3, [r4, #18]
   25dfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   25e02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   25e06:	fb93 f3f2 	sdiv	r3, r3, r2
	var4 = (var3 / (data->res_heat_range + 4));
   25e0a:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
   25e0e:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
   25e10:	eb03 0361 	add.w	r3, r3, r1, asr #1
	var4 = (var3 / (data->res_heat_range + 4));
   25e14:	3204      	adds	r2, #4
   25e16:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * data->res_heat_val) + 65536;
   25e1a:	2283      	movs	r2, #131	; 0x83
   25e1c:	f994 102c 	ldrsb.w	r1, [r4, #44]	; 0x2c
   25e20:	434a      	muls	r2, r1
   25e22:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = ((var4 / var5) - 250) * 34;
   25e26:	fbb3 f3f2 	udiv	r3, r3, r2
   25e2a:	2222      	movs	r2, #34	; 0x22
   25e2c:	4353      	muls	r3, r2
	heatr_res = (heatr_res_x100 + 50) / 100;
   25e2e:	f5a3 5304 	sub.w	r3, r3, #8448	; 0x2100
   25e32:	3b02      	subs	r3, #2
   25e34:	fb93 f3f0 	sdiv	r3, r3, r0
	err = bme680_reg_write(data, BME680_REG_RES_HEAT0,
   25e38:	215a      	movs	r1, #90	; 0x5a
   25e3a:	4620      	mov	r0, r4
   25e3c:	b2da      	uxtb	r2, r3
   25e3e:	f015 fbae 	bl	3b59e <bme680_reg_write>
	if (err < 0) {
   25e42:	2800      	cmp	r0, #0
   25e44:	f6ff aef6 	blt.w	25c34 <bme680_init+0x28>
	err = bme680_reg_write(data, BME680_REG_GAS_WAIT0,
   25e48:	2271      	movs	r2, #113	; 0x71
   25e4a:	2164      	movs	r1, #100	; 0x64
   25e4c:	4620      	mov	r0, r4
   25e4e:	f015 fba6 	bl	3b59e <bme680_reg_write>
	if (err < 0) {
   25e52:	2800      	cmp	r0, #0
   25e54:	f6ff aeee 	blt.w	25c34 <bme680_init+0x28>
	err = bme680_reg_write(data, BME680_REG_CTRL_MEAS,
   25e58:	2255      	movs	r2, #85	; 0x55
   25e5a:	2174      	movs	r1, #116	; 0x74
   25e5c:	4620      	mov	r0, r4
   25e5e:	f015 fb9e 	bl	3b59e <bme680_reg_write>
	if (bme680_chip_init(dev) < 0) {
   25e62:	2800      	cmp	r0, #0
   25e64:	f6ff aee6 	blt.w	25c34 <bme680_init+0x28>
	}

	return 0;
   25e68:	2000      	movs	r0, #0
}
   25e6a:	b00d      	add	sp, #52	; 0x34
   25e6c:	bd30      	pop	{r4, r5, pc}
   25e6e:	bf00      	nop
   25e70:	00041a92 	.word	0x00041a92
   25e74:	0003f5cc 	.word	0x0003f5cc
   25e78:	0003f5a4 	.word	0x0003f5a4
   25e7c:	00041e31 	.word	0x00041e31
   25e80:	00041e4a 	.word	0x00041e4a
   25e84:	000bbffd 	.word	0x000bbffd

00025e88 <gpio_pin_set>:
{
   25e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   25e8c:	2501      	movs	r5, #1
   25e8e:	6843      	ldr	r3, [r0, #4]
   25e90:	408d      	lsls	r5, r1
   25e92:	681b      	ldr	r3, [r3, #0]
{
   25e94:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   25e96:	421d      	tst	r5, r3
{
   25e98:	4616      	mov	r6, r2
	const struct gpio_driver_data *const data =
   25e9a:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   25e9c:	d10e      	bne.n	25ebc <gpio_pin_set+0x34>
   25e9e:	4919      	ldr	r1, [pc, #100]	; (25f04 <gpio_pin_set+0x7c>)
   25ea0:	f240 439f 	movw	r3, #1183	; 0x49f
   25ea4:	4a18      	ldr	r2, [pc, #96]	; (25f08 <gpio_pin_set+0x80>)
   25ea6:	4819      	ldr	r0, [pc, #100]	; (25f0c <gpio_pin_set+0x84>)
   25ea8:	f013 f943 	bl	39132 <printk>
   25eac:	4818      	ldr	r0, [pc, #96]	; (25f10 <gpio_pin_set+0x88>)
   25eae:	f013 f940 	bl	39132 <printk>
   25eb2:	f240 419f 	movw	r1, #1183	; 0x49f
   25eb6:	4814      	ldr	r0, [pc, #80]	; (25f08 <gpio_pin_set+0x80>)
   25eb8:	f013 fbda 	bl	39670 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   25ebc:	683b      	ldr	r3, [r7, #0]
   25ebe:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   25ec0:	6863      	ldr	r3, [r4, #4]
   25ec2:	bf18      	it	ne
   25ec4:	f086 0601 	eorne.w	r6, r6, #1
   25ec8:	681b      	ldr	r3, [r3, #0]
   25eca:	421d      	tst	r5, r3
   25ecc:	d10e      	bne.n	25eec <gpio_pin_set+0x64>
   25ece:	490d      	ldr	r1, [pc, #52]	; (25f04 <gpio_pin_set+0x7c>)
   25ed0:	f240 4375 	movw	r3, #1141	; 0x475
   25ed4:	4a0c      	ldr	r2, [pc, #48]	; (25f08 <gpio_pin_set+0x80>)
   25ed6:	480d      	ldr	r0, [pc, #52]	; (25f0c <gpio_pin_set+0x84>)
   25ed8:	f013 f92b 	bl	39132 <printk>
   25edc:	480c      	ldr	r0, [pc, #48]	; (25f10 <gpio_pin_set+0x88>)
   25ede:	f013 f928 	bl	39132 <printk>
   25ee2:	f240 4175 	movw	r1, #1141	; 0x475
   25ee6:	4808      	ldr	r0, [pc, #32]	; (25f08 <gpio_pin_set+0x80>)
   25ee8:	f013 fbc2 	bl	39670 <assert_post_action>
	if (value != 0)	{
   25eec:	b136      	cbz	r6, 25efc <gpio_pin_set+0x74>
	return api->port_set_bits_raw(port, pins);
   25eee:	68a3      	ldr	r3, [r4, #8]
   25ef0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   25ef2:	4629      	mov	r1, r5
   25ef4:	4620      	mov	r0, r4
}
   25ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
   25efa:	4718      	bx	r3
   25efc:	68a3      	ldr	r3, [r4, #8]
   25efe:	691b      	ldr	r3, [r3, #16]
   25f00:	e7f7      	b.n	25ef2 <gpio_pin_set+0x6a>
   25f02:	bf00      	nop
   25f04:	00040300 	.word	0x00040300
   25f08:	000402d6 	.word	0x000402d6
   25f0c:	0004033e 	.word	0x0004033e
   25f10:	0004035b 	.word	0x0004035b

00025f14 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   25f14:	b538      	push	{r3, r4, r5, lr}
   25f16:	4604      	mov	r4, r0
   25f18:	2200      	movs	r2, #0
   25f1a:	2101      	movs	r1, #1
   25f1c:	200b      	movs	r0, #11
   25f1e:	f7fd f973 	bl	23208 <z_arm_irq_priority_set>
	struct spi_nrfx_data *data = get_dev_data(dev);
   25f22:	6923      	ldr	r3, [r4, #16]
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
   25f24:	4a0e      	ldr	r2, [pc, #56]	; (25f60 <spi_3_init+0x4c>)
	data->dev = dev;
   25f26:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
   25f28:	6860      	ldr	r0, [r4, #4]
   25f2a:	f100 0110 	add.w	r1, r0, #16
   25f2e:	f008 fd15 	bl	2e95c <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   25f32:	4b0c      	ldr	r3, [pc, #48]	; (25f64 <spi_3_init+0x50>)
   25f34:	4298      	cmp	r0, r3
   25f36:	d011      	beq.n	25f5c <spi_3_init+0x48>
   25f38:	4b0b      	ldr	r3, [pc, #44]	; (25f68 <spi_3_init+0x54>)
   25f3a:	480c      	ldr	r0, [pc, #48]	; (25f6c <spi_3_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   25f3c:	6822      	ldr	r2, [r4, #0]
   25f3e:	1ac0      	subs	r0, r0, r3
   25f40:	08c0      	lsrs	r0, r0, #3
   25f42:	0180      	lsls	r0, r0, #6
   25f44:	490a      	ldr	r1, [pc, #40]	; (25f70 <spi_3_init+0x5c>)
   25f46:	f040 0001 	orr.w	r0, r0, #1
   25f4a:	f013 fbc0 	bl	396ce <log_string_sync>
		return -EBUSY;
   25f4e:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPIM_DEVICE(3);
   25f52:	6920      	ldr	r0, [r4, #16]
   25f54:	f015 fb5e 	bl	3b614 <spi_context_unlock_unconditionally>
   25f58:	4628      	mov	r0, r5
   25f5a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   25f5c:	2500      	movs	r5, #0
   25f5e:	e7f8      	b.n	25f52 <spi_3_init+0x3e>
   25f60:	000263b5 	.word	0x000263b5
   25f64:	0bad0000 	.word	0x0bad0000
   25f68:	0003f5a4 	.word	0x0003f5a4
   25f6c:	0003f6dc 	.word	0x0003f6dc
   25f70:	000419ef 	.word	0x000419ef

00025f74 <transfer_next_chunk>:
{
   25f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   25f78:	6905      	ldr	r5, [r0, #16]
{
   25f7a:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   25f7c:	6d2f      	ldr	r7, [r5, #80]	; 0x50
   25f7e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   25f80:	b98f      	cbnz	r7, 25fa6 <transfer_next_chunk+0x32>
	if (chunk_len > 0) {
   25f82:	2c00      	cmp	r4, #0
   25f84:	d14c      	bne.n	26020 <transfer_next_chunk+0xac>
	_spi_context_cs_control(ctx, on, false);
   25f86:	2200      	movs	r2, #0
   25f88:	4628      	mov	r0, r5
   25f8a:	4611      	mov	r1, r2
   25f8c:	f015 fb1d 	bl	3b5ca <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   25f90:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   25f92:	f105 0020 	add.w	r0, r5, #32
   25f96:	f00e f9ef 	bl	34378 <z_impl_k_sem_give>
	dev_data->busy = false;
   25f9a:	2300      	movs	r3, #0
   25f9c:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   25fa0:	b005      	add	sp, #20
   25fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   25fa6:	463e      	mov	r6, r7
   25fa8:	b114      	cbz	r4, 25fb0 <transfer_next_chunk+0x3c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   25faa:	42a7      	cmp	r7, r4
   25fac:	bf28      	it	cs
   25fae:	4626      	movcs	r6, r4
		const uint8_t *tx_buf = ctx->tx_buf;
   25fb0:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   25fb4:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
   25fb8:	f1b8 0f00 	cmp.w	r8, #0
   25fbc:	d032      	beq.n	26024 <transfer_next_chunk+0xb0>
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   25fbe:	b38f      	cbz	r7, 26024 <transfer_next_chunk+0xb0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   25fc0:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
   25fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   25fc8:	d02c      	beq.n	26024 <transfer_next_chunk+0xb0>
			if (chunk_len > sizeof(dev_data->buffer)) {
   25fca:	2e08      	cmp	r6, #8
   25fcc:	bf28      	it	cs
   25fce:	2608      	movcs	r6, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   25fd0:	f105 0365 	add.w	r3, r5, #101	; 0x65
   25fd4:	4618      	mov	r0, r3
   25fd6:	4632      	mov	r2, r6
   25fd8:	4641      	mov	r1, r8
   25fda:	f017 ffc6 	bl	3df6a <memcpy>
   25fde:	4603      	mov	r3, r0
		if (chunk_len > dev_config->max_chunk_len) {
   25fe0:	f8d9 2008 	ldr.w	r2, [r9, #8]
		xfer.p_tx_buffer = tx_buf;
   25fe4:	9300      	str	r3, [sp, #0]
   25fe6:	4296      	cmp	r6, r2
   25fe8:	bf28      	it	cs
   25fea:	4616      	movcs	r6, r2
		dev_data->chunk_len = chunk_len;
   25fec:	662e      	str	r6, [r5, #96]	; 0x60
   25fee:	f1b8 0f00 	cmp.w	r8, #0
   25ff2:	d019      	beq.n	26028 <transfer_next_chunk+0xb4>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   25ff4:	2f00      	cmp	r7, #0
   25ff6:	bf18      	it	ne
   25ff8:	4637      	movne	r7, r6
		xfer.p_rx_buffer = ctx->rx_buf;
   25ffa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   25ffc:	9701      	str	r7, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   25ffe:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   26000:	b1a3      	cbz	r3, 2602c <transfer_next_chunk+0xb8>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   26002:	2c00      	cmp	r4, #0
   26004:	bf18      	it	ne
   26006:	4634      	movne	r4, r6
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   26008:	2200      	movs	r2, #0
   2600a:	4669      	mov	r1, sp
   2600c:	4648      	mov	r0, r9
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2600e:	9403      	str	r4, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   26010:	f008 fd6a 	bl	2eae8 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   26014:	4b06      	ldr	r3, [pc, #24]	; (26030 <transfer_next_chunk+0xbc>)
   26016:	4298      	cmp	r0, r3
   26018:	d0c2      	beq.n	25fa0 <transfer_next_chunk+0x2c>
			error = -EIO;
   2601a:	f06f 0404 	mvn.w	r4, #4
   2601e:	e7b2      	b.n	25f86 <transfer_next_chunk+0x12>
   26020:	4626      	mov	r6, r4
   26022:	e7c5      	b.n	25fb0 <transfer_next_chunk+0x3c>
   26024:	4643      	mov	r3, r8
   26026:	e7db      	b.n	25fe0 <transfer_next_chunk+0x6c>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   26028:	4647      	mov	r7, r8
   2602a:	e7e6      	b.n	25ffa <transfer_next_chunk+0x86>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2602c:	461c      	mov	r4, r3
   2602e:	e7eb      	b.n	26008 <transfer_next_chunk+0x94>
   26030:	0bad0000 	.word	0x0bad0000

00026034 <spi_nrfx_transceive>:
{
   26034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26038:	ed2d 8b02 	vpush	{d8}
   2603c:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   2603e:	888b      	ldrh	r3, [r1, #4]
   26040:	4681      	mov	r9, r0
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   26042:	6904      	ldr	r4, [r0, #16]
   26044:	0458      	lsls	r0, r3, #17
{
   26046:	460d      	mov	r5, r1
   26048:	4617      	mov	r7, r2
   2604a:	b087      	sub	sp, #28
   2604c:	d430      	bmi.n	260b0 <spi_nrfx_transceive+0x7c>
	return z_impl_k_sem_take(sem, timeout);
   2604e:	f04f 32ff 	mov.w	r2, #4294967295
   26052:	f04f 33ff 	mov.w	r3, #4294967295
   26056:	f104 0008 	add.w	r0, r4, #8
   2605a:	f00e f9d1 	bl	34400 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   2605e:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   26060:	f8d9 8010 	ldr.w	r8, [r9, #16]
	if (spi_context_configured(ctx, spi_cfg)) {
   26064:	f8d8 3000 	ldr.w	r3, [r8]
   26068:	429d      	cmp	r5, r3
   2606a:	f000 8118 	beq.w	2629e <spi_nrfx_transceive+0x26a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   2606e:	88ab      	ldrh	r3, [r5, #4]
   26070:	07d9      	lsls	r1, r3, #31
   26072:	d524      	bpl.n	260be <spi_nrfx_transceive+0x8a>
   26074:	48b3      	ldr	r0, [pc, #716]	; (26344 <spi_nrfx_transceive+0x310>)
   26076:	4bb4      	ldr	r3, [pc, #720]	; (26348 <spi_nrfx_transceive+0x314>)
		LOG_ERR("Slave mode is not supported on %s",
   26078:	f8d9 2000 	ldr.w	r2, [r9]
   2607c:	1ac0      	subs	r0, r0, r3
   2607e:	08c0      	lsrs	r0, r0, #3
   26080:	0180      	lsls	r0, r0, #6
   26082:	49b2      	ldr	r1, [pc, #712]	; (2634c <spi_nrfx_transceive+0x318>)
   26084:	f040 0001 	orr.w	r0, r0, #1
   26088:	f013 fb21 	bl	396ce <log_string_sync>
		return -EINVAL;
   2608c:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   26090:	6823      	ldr	r3, [r4, #0]
   26092:	889b      	ldrh	r3, [r3, #4]
   26094:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   26098:	d104      	bne.n	260a4 <spi_nrfx_transceive+0x70>
		ctx->owner = NULL;
   2609a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2609c:	f104 0008 	add.w	r0, r4, #8
   260a0:	f00e f96a 	bl	34378 <z_impl_k_sem_give>
}
   260a4:	4628      	mov	r0, r5
   260a6:	b007      	add	sp, #28
   260a8:	ecbd 8b02 	vpop	{d8}
   260ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   260b0:	6923      	ldr	r3, [r4, #16]
   260b2:	2b00      	cmp	r3, #0
   260b4:	d1cb      	bne.n	2604e <spi_nrfx_transceive+0x1a>
		(k_sem_count_get(&ctx->lock) == 0) &&
   260b6:	6863      	ldr	r3, [r4, #4]
   260b8:	4299      	cmp	r1, r3
   260ba:	d1c8      	bne.n	2604e <spi_nrfx_transceive+0x1a>
   260bc:	e7d0      	b.n	26060 <spi_nrfx_transceive+0x2c>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   260be:	071a      	lsls	r2, r3, #28
   260c0:	d50a      	bpl.n	260d8 <spi_nrfx_transceive+0xa4>
   260c2:	48a0      	ldr	r0, [pc, #640]	; (26344 <spi_nrfx_transceive+0x310>)
   260c4:	4ba0      	ldr	r3, [pc, #640]	; (26348 <spi_nrfx_transceive+0x314>)
		LOG_ERR("Loopback mode is not supported");
   260c6:	49a2      	ldr	r1, [pc, #648]	; (26350 <spi_nrfx_transceive+0x31c>)
   260c8:	1ac0      	subs	r0, r0, r3
   260ca:	08c0      	lsrs	r0, r0, #3
   260cc:	0180      	lsls	r0, r0, #6
		LOG_ERR("Word sizes other than 8 bits"
   260ce:	f040 0001 	orr.w	r0, r0, #1
   260d2:	f013 fafc 	bl	396ce <log_string_sync>
   260d6:	e7d9      	b.n	2608c <spi_nrfx_transceive+0x58>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   260d8:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   260dc:	d006      	beq.n	260ec <spi_nrfx_transceive+0xb8>
   260de:	4899      	ldr	r0, [pc, #612]	; (26344 <spi_nrfx_transceive+0x310>)
   260e0:	4b99      	ldr	r3, [pc, #612]	; (26348 <spi_nrfx_transceive+0x314>)
		LOG_ERR("Only single line mode is supported");
   260e2:	499c      	ldr	r1, [pc, #624]	; (26354 <spi_nrfx_transceive+0x320>)
   260e4:	1ac0      	subs	r0, r0, r3
   260e6:	08c0      	lsrs	r0, r0, #3
   260e8:	0180      	lsls	r0, r0, #6
   260ea:	e7f0      	b.n	260ce <spi_nrfx_transceive+0x9a>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   260ec:	f3c3 1245 	ubfx	r2, r3, #5, #6
   260f0:	2a08      	cmp	r2, #8
   260f2:	d006      	beq.n	26102 <spi_nrfx_transceive+0xce>
   260f4:	4893      	ldr	r0, [pc, #588]	; (26344 <spi_nrfx_transceive+0x310>)
   260f6:	4b94      	ldr	r3, [pc, #592]	; (26348 <spi_nrfx_transceive+0x314>)
		LOG_ERR("Word sizes other than 8 bits"
   260f8:	4997      	ldr	r1, [pc, #604]	; (26358 <spi_nrfx_transceive+0x324>)
   260fa:	1ac0      	subs	r0, r0, r3
   260fc:	08c0      	lsrs	r0, r0, #3
   260fe:	0180      	lsls	r0, r0, #6
   26100:	e7e5      	b.n	260ce <spi_nrfx_transceive+0x9a>
	if (spi_cfg->frequency < 125000) {
   26102:	6829      	ldr	r1, [r5, #0]
   26104:	4a95      	ldr	r2, [pc, #596]	; (2635c <spi_nrfx_transceive+0x328>)
   26106:	4291      	cmp	r1, r2
   26108:	d806      	bhi.n	26118 <spi_nrfx_transceive+0xe4>
   2610a:	488e      	ldr	r0, [pc, #568]	; (26344 <spi_nrfx_transceive+0x310>)
   2610c:	4b8e      	ldr	r3, [pc, #568]	; (26348 <spi_nrfx_transceive+0x314>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   2610e:	4994      	ldr	r1, [pc, #592]	; (26360 <spi_nrfx_transceive+0x32c>)
   26110:	1ac0      	subs	r0, r0, r3
   26112:	08c0      	lsrs	r0, r0, #3
   26114:	0180      	lsls	r0, r0, #6
   26116:	e7da      	b.n	260ce <spi_nrfx_transceive+0x9a>
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   26118:	f8d9 2004 	ldr.w	r2, [r9, #4]
	ctx->config = spi_cfg;
   2611c:	f8c8 5000 	str.w	r5, [r8]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   26120:	9203      	str	r2, [sp, #12]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   26122:	68aa      	ldr	r2, [r5, #8]
   26124:	2a00      	cmp	r2, #0
   26126:	f000 80e4 	beq.w	262f2 <spi_nrfx_transceive+0x2be>
   2612a:	6811      	ldr	r1, [r2, #0]
   2612c:	2900      	cmp	r1, #0
   2612e:	f000 80e0 	beq.w	262f2 <spi_nrfx_transceive+0x2be>
	if (ctx->config->operation & SPI_CS_ACTIVE_HIGH) {
   26132:	43db      	mvns	r3, r3
		__ASSERT(spi_context_cs_active_level(ctx) ==
   26134:	7a52      	ldrb	r2, [r2, #9]
   26136:	f3c3 33c0 	ubfx	r3, r3, #15, #1
   2613a:	f002 0201 	and.w	r2, r2, #1
   2613e:	4293      	cmp	r3, r2
   26140:	d00c      	beq.n	2615c <spi_nrfx_transceive+0x128>
   26142:	4988      	ldr	r1, [pc, #544]	; (26364 <spi_nrfx_transceive+0x330>)
   26144:	23b2      	movs	r3, #178	; 0xb2
   26146:	4a88      	ldr	r2, [pc, #544]	; (26368 <spi_nrfx_transceive+0x334>)
   26148:	4888      	ldr	r0, [pc, #544]	; (2636c <spi_nrfx_transceive+0x338>)
   2614a:	f012 fff2 	bl	39132 <printk>
   2614e:	4888      	ldr	r0, [pc, #544]	; (26370 <spi_nrfx_transceive+0x33c>)
   26150:	f012 ffef 	bl	39132 <printk>
   26154:	21b2      	movs	r1, #178	; 0xb2
   26156:	4884      	ldr	r0, [pc, #528]	; (26368 <spi_nrfx_transceive+0x334>)
   26158:	f013 fa8a 	bl	39670 <assert_post_action>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   2615c:	f8d8 3000 	ldr.w	r3, [r8]
   26160:	689b      	ldr	r3, [r3, #8]
   26162:	7a1a      	ldrb	r2, [r3, #8]
   26164:	f8d3 b000 	ldr.w	fp, [r3]
				   ctx->config->cs->gpio_dt_flags |
   26168:	f893 8009 	ldrb.w	r8, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   2616c:	9201      	str	r2, [sp, #4]
	const struct gpio_driver_api *api =
   2616e:	f8db 3008 	ldr.w	r3, [fp, #8]
   26172:	9304      	str	r3, [sp, #16]
	const struct gpio_driver_config *const cfg =
   26174:	f8db 3004 	ldr.w	r3, [fp, #4]
   26178:	9305      	str	r3, [sp, #20]
	struct gpio_driver_data *data =
   2617a:	f8db 3010 	ldr.w	r3, [fp, #16]
   2617e:	9302      	str	r3, [sp, #8]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   26180:	f008 0330 	and.w	r3, r8, #48	; 0x30
   26184:	2b30      	cmp	r3, #48	; 0x30
   26186:	d10e      	bne.n	261a6 <spi_nrfx_transceive+0x172>
   26188:	497a      	ldr	r1, [pc, #488]	; (26374 <spi_nrfx_transceive+0x340>)
   2618a:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   2618e:	4a7a      	ldr	r2, [pc, #488]	; (26378 <spi_nrfx_transceive+0x344>)
   26190:	4876      	ldr	r0, [pc, #472]	; (2636c <spi_nrfx_transceive+0x338>)
   26192:	f012 ffce 	bl	39132 <printk>
   26196:	4879      	ldr	r0, [pc, #484]	; (2637c <spi_nrfx_transceive+0x348>)
   26198:	f012 ffcb 	bl	39132 <printk>
   2619c:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   261a0:	4875      	ldr	r0, [pc, #468]	; (26378 <spi_nrfx_transceive+0x344>)
   261a2:	f013 fa65 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   261a6:	f008 0306 	and.w	r3, r8, #6
   261aa:	2b04      	cmp	r3, #4
   261ac:	d10b      	bne.n	261c6 <spi_nrfx_transceive+0x192>
   261ae:	4974      	ldr	r1, [pc, #464]	; (26380 <spi_nrfx_transceive+0x34c>)
   261b0:	486e      	ldr	r0, [pc, #440]	; (2636c <spi_nrfx_transceive+0x338>)
   261b2:	f44f 7337 	mov.w	r3, #732	; 0x2dc
   261b6:	4a70      	ldr	r2, [pc, #448]	; (26378 <spi_nrfx_transceive+0x344>)
   261b8:	f012 ffbb 	bl	39132 <printk>
   261bc:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   261c0:	486d      	ldr	r0, [pc, #436]	; (26378 <spi_nrfx_transceive+0x344>)
   261c2:	f013 fa55 	bl	39670 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   261c6:	f04f 0a01 	mov.w	sl, #1
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   261ca:	f018 0f01 	tst.w	r8, #1
   261ce:	bf0c      	ite	eq
   261d0:	f448 58b0 	orreq.w	r8, r8, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   261d4:	f488 58d0 	eorne.w	r8, r8, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   261d8:	f428 5380 	bic.w	r3, r8, #4096	; 0x1000
   261dc:	ee08 3a10 	vmov	s16, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   261e0:	9b01      	ldr	r3, [sp, #4]
   261e2:	fa0a fa03 	lsl.w	sl, sl, r3
   261e6:	9b05      	ldr	r3, [sp, #20]
   261e8:	681b      	ldr	r3, [r3, #0]
   261ea:	ea1a 0f03 	tst.w	sl, r3
   261ee:	d10e      	bne.n	2620e <spi_nrfx_transceive+0x1da>
   261f0:	4964      	ldr	r1, [pc, #400]	; (26384 <spi_nrfx_transceive+0x350>)
   261f2:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   261f6:	4a60      	ldr	r2, [pc, #384]	; (26378 <spi_nrfx_transceive+0x344>)
   261f8:	485c      	ldr	r0, [pc, #368]	; (2636c <spi_nrfx_transceive+0x338>)
   261fa:	f012 ff9a 	bl	39132 <printk>
   261fe:	4862      	ldr	r0, [pc, #392]	; (26388 <spi_nrfx_transceive+0x354>)
   26200:	f012 ff97 	bl	39132 <printk>
   26204:	f44f 713c 	mov.w	r1, #752	; 0x2f0
   26208:	485b      	ldr	r0, [pc, #364]	; (26378 <spi_nrfx_transceive+0x344>)
   2620a:	f013 fa31 	bl	39670 <assert_post_action>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2620e:	9b02      	ldr	r3, [sp, #8]
   26210:	9a02      	ldr	r2, [sp, #8]
   26212:	681b      	ldr	r3, [r3, #0]
   26214:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26218:	bf14      	ite	ne
   2621a:	ea4a 0303 	orrne.w	r3, sl, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2621e:	ea23 030a 	biceq.w	r3, r3, sl
   26222:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   26224:	9b04      	ldr	r3, [sp, #16]
   26226:	ee18 2a10 	vmov	r2, s16
   2622a:	4658      	mov	r0, fp
   2622c:	681b      	ldr	r3, [r3, #0]
   2622e:	9901      	ldr	r1, [sp, #4]
   26230:	4798      	blx	r3
	freq = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   26232:	f8d9 3004 	ldr.w	r3, [r9, #4]
   26236:	682a      	ldr	r2, [r5, #0]
   26238:	68db      	ldr	r3, [r3, #12]
   2623a:	4293      	cmp	r3, r2
   2623c:	bf28      	it	cs
   2623e:	4613      	movcs	r3, r2
	if (frequency < 250000) {
   26240:	4a52      	ldr	r2, [pc, #328]	; (2638c <spi_nrfx_transceive+0x358>)
   26242:	4293      	cmp	r3, r2
   26244:	d960      	bls.n	26308 <spi_nrfx_transceive+0x2d4>
	} else if (frequency < 500000) {
   26246:	4a52      	ldr	r2, [pc, #328]	; (26390 <spi_nrfx_transceive+0x35c>)
   26248:	4293      	cmp	r3, r2
   2624a:	d960      	bls.n	2630e <spi_nrfx_transceive+0x2da>
	} else if (frequency < 1000000) {
   2624c:	4a51      	ldr	r2, [pc, #324]	; (26394 <spi_nrfx_transceive+0x360>)
   2624e:	4293      	cmp	r3, r2
   26250:	d960      	bls.n	26314 <spi_nrfx_transceive+0x2e0>
	} else if (frequency < 2000000) {
   26252:	4a51      	ldr	r2, [pc, #324]	; (26398 <spi_nrfx_transceive+0x364>)
   26254:	4293      	cmp	r3, r2
   26256:	d960      	bls.n	2631a <spi_nrfx_transceive+0x2e6>
	} else if (frequency < 4000000) {
   26258:	4a50      	ldr	r2, [pc, #320]	; (2639c <spi_nrfx_transceive+0x368>)
   2625a:	4293      	cmp	r3, r2
   2625c:	d960      	bls.n	26320 <spi_nrfx_transceive+0x2ec>
		return NRF_SPIM_FREQ_8M;
   2625e:	4a50      	ldr	r2, [pc, #320]	; (263a0 <spi_nrfx_transceive+0x36c>)
   26260:	4293      	cmp	r3, r2
   26262:	bf34      	ite	cc
   26264:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
   26268:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
	nrf_spim_configure(spim->p_reg,
   2626c:	9a03      	ldr	r2, [sp, #12]
   2626e:	6810      	ldr	r0, [r2, #0]
   26270:	88aa      	ldrh	r2, [r5, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   26272:	0795      	lsls	r5, r2, #30
   26274:	f002 0104 	and.w	r1, r2, #4
   26278:	d555      	bpl.n	26326 <spi_nrfx_transceive+0x2f2>
			return NRF_SPIM_MODE_2;
   2627a:	2900      	cmp	r1, #0
   2627c:	bf14      	ite	ne
   2627e:	2103      	movne	r1, #3
   26280:	2102      	moveq	r1, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   26282:	2902      	cmp	r1, #2
	if (operation & SPI_TRANSFER_LSB) {
   26284:	f3c2 1200 	ubfx	r2, r2, #4, #1
   26288:	d051      	beq.n	2632e <spi_nrfx_transceive+0x2fa>
   2628a:	2903      	cmp	r1, #3
   2628c:	d052      	beq.n	26334 <spi_nrfx_transceive+0x300>
   2628e:	2901      	cmp	r1, #1
   26290:	d101      	bne.n	26296 <spi_nrfx_transceive+0x262>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   26292:	f042 0202 	orr.w	r2, r2, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   26296:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
    p_reg->FREQUENCY = (uint32_t)frequency;
   2629a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
		dev_data->busy = true;
   2629e:	2301      	movs	r3, #1
   262a0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   262a4:	2f00      	cmp	r7, #0
   262a6:	d048      	beq.n	2633a <spi_nrfx_transceive+0x306>
		ctx->current_tx = tx_bufs->buffers;
   262a8:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   262aa:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   262ac:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   262ae:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   262b0:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   262b2:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   262b4:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   262b6:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   262b8:	2e00      	cmp	r6, #0
   262ba:	d075      	beq.n	263a8 <spi_nrfx_transceive+0x374>
		ctx->current_rx = rx_bufs->buffers;
   262bc:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   262be:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   262c0:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   262c2:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   262c4:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   262c6:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   262c8:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   262ca:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   262cc:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
   262ce:	2101      	movs	r1, #1
   262d0:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   262d2:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   262d4:	f015 f979 	bl	3b5ca <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   262d8:	4648      	mov	r0, r9
   262da:	f7ff fe4b 	bl	25f74 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   262de:	f04f 32ff 	mov.w	r2, #4294967295
   262e2:	f04f 33ff 	mov.w	r3, #4294967295
   262e6:	f104 0020 	add.w	r0, r4, #32
   262ea:	f00e f889 	bl	34400 <z_impl_k_sem_take>
	status = ctx->sync_status;
   262ee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   262f0:	e6ce      	b.n	26090 <spi_nrfx_transceive+0x5c>
   262f2:	4b15      	ldr	r3, [pc, #84]	; (26348 <spi_nrfx_transceive+0x314>)
   262f4:	4813      	ldr	r0, [pc, #76]	; (26344 <spi_nrfx_transceive+0x310>)
		LOG_INF("CS control inhibited (no GPIO device)");
   262f6:	492b      	ldr	r1, [pc, #172]	; (263a4 <spi_nrfx_transceive+0x370>)
   262f8:	1ac0      	subs	r0, r0, r3
   262fa:	08c0      	lsrs	r0, r0, #3
   262fc:	0180      	lsls	r0, r0, #6
   262fe:	f040 0003 	orr.w	r0, r0, #3
   26302:	f013 f9e4 	bl	396ce <log_string_sync>
   26306:	e794      	b.n	26232 <spi_nrfx_transceive+0x1fe>
		return NRF_SPIM_FREQ_125K;
   26308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   2630c:	e7ae      	b.n	2626c <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_250K;
   2630e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   26312:	e7ab      	b.n	2626c <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_500K;
   26314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   26318:	e7a8      	b.n	2626c <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_1M;
   2631a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2631e:	e7a5      	b.n	2626c <spi_nrfx_transceive+0x238>
		return NRF_SPIM_FREQ_2M;
   26320:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   26324:	e7a2      	b.n	2626c <spi_nrfx_transceive+0x238>
			return NRF_SPIM_MODE_0;
   26326:	3900      	subs	r1, #0
   26328:	bf18      	it	ne
   2632a:	2101      	movne	r1, #1
   2632c:	e7a9      	b.n	26282 <spi_nrfx_transceive+0x24e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2632e:	f042 0204 	orr.w	r2, r2, #4
        break;
   26332:	e7b0      	b.n	26296 <spi_nrfx_transceive+0x262>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   26334:	f042 0206 	orr.w	r2, r2, #6
        break;
   26338:	e7ad      	b.n	26296 <spi_nrfx_transceive+0x262>
		ctx->tx_count = 0;
   2633a:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   2633e:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   26342:	e7b9      	b.n	262b8 <spi_nrfx_transceive+0x284>
   26344:	0003f6dc 	.word	0x0003f6dc
   26348:	0003f5a4 	.word	0x0003f5a4
   2634c:	00041e70 	.word	0x00041e70
   26350:	00041e92 	.word	0x00041e92
   26354:	00041eb1 	.word	0x00041eb1
   26358:	00041ed4 	.word	0x00041ed4
   2635c:	0001e847 	.word	0x0001e847
   26360:	00041f03 	.word	0x00041f03
   26364:	00041f61 	.word	0x00041f61
   26368:	00041f34 	.word	0x00041f34
   2636c:	0004033e 	.word	0x0004033e
   26370:	00041fb1 	.word	0x00041fb1
   26374:	00041c8d 	.word	0x00041c8d
   26378:	000402d6 	.word	0x000402d6
   2637c:	00041cc6 	.word	0x00041cc6
   26380:	00041d89 	.word	0x00041d89
   26384:	00040300 	.word	0x00040300
   26388:	0004035b 	.word	0x0004035b
   2638c:	0003d08f 	.word	0x0003d08f
   26390:	0007a11f 	.word	0x0007a11f
   26394:	000f423f 	.word	0x000f423f
   26398:	001e847f 	.word	0x001e847f
   2639c:	003d08ff 	.word	0x003d08ff
   263a0:	007a1200 	.word	0x007a1200
   263a4:	00041fe6 	.word	0x00041fe6
		ctx->rx_count = 0;
   263a8:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   263ac:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   263b0:	e78c      	b.n	262cc <spi_nrfx_transceive+0x298>
   263b2:	bf00      	nop

000263b4 <event_handler>:
{
   263b4:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   263b6:	7803      	ldrb	r3, [r0, #0]
{
   263b8:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   263ba:	2b00      	cmp	r3, #0
   263bc:	d14e      	bne.n	2645c <event_handler+0xa8>
	if (!ctx->tx_len) {
   263be:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   263c0:	b163      	cbz	r3, 263dc <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   263c2:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   263c4:	429a      	cmp	r2, r3
   263c6:	d91d      	bls.n	26404 <event_handler+0x50>
   263c8:	4825      	ldr	r0, [pc, #148]	; (26460 <event_handler+0xac>)
   263ca:	4b26      	ldr	r3, [pc, #152]	; (26464 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   263cc:	4926      	ldr	r1, [pc, #152]	; (26468 <event_handler+0xb4>)
   263ce:	1ac0      	subs	r0, r0, r3
   263d0:	08c0      	lsrs	r0, r0, #3
   263d2:	0180      	lsls	r0, r0, #6
   263d4:	f040 0001 	orr.w	r0, r0, #1
   263d8:	f013 f979 	bl	396ce <log_string_sync>
	if (!ctx->rx_len) {
   263dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
   263de:	b163      	cbz	r3, 263fa <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   263e0:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   263e2:	429a      	cmp	r2, r3
   263e4:	d924      	bls.n	26430 <event_handler+0x7c>
   263e6:	481e      	ldr	r0, [pc, #120]	; (26460 <event_handler+0xac>)
   263e8:	4b1e      	ldr	r3, [pc, #120]	; (26464 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   263ea:	491f      	ldr	r1, [pc, #124]	; (26468 <event_handler+0xb4>)
   263ec:	1ac0      	subs	r0, r0, r3
   263ee:	08c0      	lsrs	r0, r0, #3
   263f0:	0180      	lsls	r0, r0, #6
   263f2:	f040 0001 	orr.w	r0, r0, #1
   263f6:	f013 f96a 	bl	396ce <log_string_sync>
		transfer_next_chunk(dev_data->dev);
   263fa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   263fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   26400:	f7ff bdb8 	b.w	25f74 <transfer_next_chunk>
	ctx->tx_len -= len;
   26404:	1a9b      	subs	r3, r3, r2
   26406:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   26408:	b963      	cbnz	r3, 26424 <event_handler+0x70>
		ctx->tx_count--;
   2640a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2640c:	3b01      	subs	r3, #1
   2640e:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   26410:	b163      	cbz	r3, 2642c <event_handler+0x78>
			ctx->current_tx++;
   26412:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   26414:	f103 0208 	add.w	r2, r3, #8
   26418:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   2641a:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   2641c:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   2641e:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   26420:	650b      	str	r3, [r1, #80]	; 0x50
   26422:	e7db      	b.n	263dc <event_handler+0x28>
	} else if (ctx->tx_buf) {
   26424:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   26426:	2b00      	cmp	r3, #0
   26428:	d0d8      	beq.n	263dc <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   2642a:	4413      	add	r3, r2
   2642c:	64e3      	str	r3, [r4, #76]	; 0x4c
   2642e:	e7d5      	b.n	263dc <event_handler+0x28>
	ctx->rx_len -= len;
   26430:	1a9b      	subs	r3, r3, r2
   26432:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   26434:	b963      	cbnz	r3, 26450 <event_handler+0x9c>
		ctx->rx_count--;
   26436:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   26438:	3b01      	subs	r3, #1
   2643a:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   2643c:	b163      	cbz	r3, 26458 <event_handler+0xa4>
			ctx->current_rx++;
   2643e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   26440:	f103 0208 	add.w	r2, r3, #8
   26444:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   26446:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   26448:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   2644a:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   2644c:	65a3      	str	r3, [r4, #88]	; 0x58
   2644e:	e7d4      	b.n	263fa <event_handler+0x46>
	} else if (ctx->rx_buf) {
   26450:	6d63      	ldr	r3, [r4, #84]	; 0x54
   26452:	2b00      	cmp	r3, #0
   26454:	d0d1      	beq.n	263fa <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   26456:	4413      	add	r3, r2
   26458:	6563      	str	r3, [r4, #84]	; 0x54
   2645a:	e7ce      	b.n	263fa <event_handler+0x46>
}
   2645c:	bd10      	pop	{r4, pc}
   2645e:	bf00      	nop
   26460:	0003f6dc 	.word	0x0003f6dc
   26464:	0003f5a4 	.word	0x0003f5a4
   26468:	0004200c 	.word	0x0004200c

0002646c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2646c:	4b02      	ldr	r3, [pc, #8]	; (26478 <flash_nrf_pages_layout+0xc>)
   2646e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   26470:	2301      	movs	r3, #1
   26472:	6013      	str	r3, [r2, #0]
}
   26474:	4770      	bx	lr
   26476:	bf00      	nop
   26478:	2001729c 	.word	0x2001729c

0002647c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   2647c:	4800      	ldr	r0, [pc, #0]	; (26480 <flash_nrf_get_parameters+0x4>)
   2647e:	4770      	bx	lr
   26480:	0003fce8 	.word	0x0003fce8

00026484 <flash_nrf_read>:
{
   26484:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26486:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   26488:	4619      	mov	r1, r3
   2648a:	4620      	mov	r0, r4
{
   2648c:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   2648e:	9301      	str	r3, [sp, #4]
   26490:	f015 f8e2 	bl	3b658 <is_regular_addr_valid>
   26494:	9a01      	ldr	r2, [sp, #4]
   26496:	b978      	cbnz	r0, 264b8 <flash_nrf_read+0x34>
   26498:	4b10      	ldr	r3, [pc, #64]	; (264dc <flash_nrf_read+0x58>)
   2649a:	4811      	ldr	r0, [pc, #68]	; (264e0 <flash_nrf_read+0x5c>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2649c:	4911      	ldr	r1, [pc, #68]	; (264e4 <flash_nrf_read+0x60>)
   2649e:	1ac0      	subs	r0, r0, r3
   264a0:	08c0      	lsrs	r0, r0, #3
   264a2:	0180      	lsls	r0, r0, #6
   264a4:	4613      	mov	r3, r2
   264a6:	f040 0001 	orr.w	r0, r0, #1
   264aa:	4622      	mov	r2, r4
   264ac:	f013 f90f 	bl	396ce <log_string_sync>
		return -EINVAL;
   264b0:	f06f 0015 	mvn.w	r0, #21
}
   264b4:	b003      	add	sp, #12
   264b6:	bd30      	pop	{r4, r5, pc}
	if (!len) {
   264b8:	b16a      	cbz	r2, 264d6 <flash_nrf_read+0x52>
	if (addr < PM_APP_ADDRESS) {
   264ba:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   264be:	4621      	mov	r1, r4
   264c0:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   264c2:	da04      	bge.n	264ce <flash_nrf_read+0x4a>
}
   264c4:	b003      	add	sp, #12
   264c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return spm_request_read(data, addr, len);
   264ca:	f013 bff2 	b.w	3a4b2 <spm_request_read>
   264ce:	f017 fd4c 	bl	3df6a <memcpy>
	return 0;
   264d2:	2000      	movs	r0, #0
   264d4:	e7ee      	b.n	264b4 <flash_nrf_read+0x30>
		return 0;
   264d6:	4610      	mov	r0, r2
   264d8:	e7ec      	b.n	264b4 <flash_nrf_read+0x30>
   264da:	bf00      	nop
   264dc:	0003f5a4 	.word	0x0003f5a4
   264e0:	0003f61c 	.word	0x0003f61c
   264e4:	00042038 	.word	0x00042038

000264e8 <flash_nrf_erase>:
{
   264e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   264ea:	460d      	mov	r5, r1
   264ec:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   264ee:	f016 f8d7 	bl	3c6a0 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   264f2:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   264f4:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   264f6:	4628      	mov	r0, r5
   264f8:	f015 f8ae 	bl	3b658 <is_regular_addr_valid>
   264fc:	462f      	mov	r7, r5
   264fe:	b378      	cbz	r0, 26560 <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   26500:	fbb5 f3f6 	udiv	r3, r5, r6
   26504:	fb06 5313 	mls	r3, r6, r3, r5
   26508:	b923      	cbnz	r3, 26514 <flash_nrf_erase+0x2c>
   2650a:	fbb4 f2f6 	udiv	r2, r4, r6
   2650e:	fb06 4012 	mls	r0, r6, r2, r4
   26512:	b170      	cbz	r0, 26532 <flash_nrf_erase+0x4a>
   26514:	4b17      	ldr	r3, [pc, #92]	; (26574 <flash_nrf_erase+0x8c>)
   26516:	4818      	ldr	r0, [pc, #96]	; (26578 <flash_nrf_erase+0x90>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   26518:	462a      	mov	r2, r5
   2651a:	1ac0      	subs	r0, r0, r3
   2651c:	4623      	mov	r3, r4
   2651e:	08c0      	lsrs	r0, r0, #3
   26520:	4916      	ldr	r1, [pc, #88]	; (2657c <flash_nrf_erase+0x94>)
   26522:	0180      	lsls	r0, r0, #6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   26524:	f040 0001 	orr.w	r0, r0, #1
   26528:	f013 f8d1 	bl	396ce <log_string_sync>
		return -EINVAL;
   2652c:	f06f 0015 	mvn.w	r0, #21
   26530:	e015      	b.n	2655e <flash_nrf_erase+0x76>
		if (!n_pages) {
   26532:	42b4      	cmp	r4, r6
   26534:	d313      	bcc.n	2655e <flash_nrf_erase+0x76>
   26536:	f04f 32ff 	mov.w	r2, #4294967295
   2653a:	f04f 33ff 	mov.w	r3, #4294967295
   2653e:	4810      	ldr	r0, [pc, #64]	; (26580 <flash_nrf_erase+0x98>)
   26540:	f00d ff5e 	bl	34400 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   26544:	f016 f8ac 	bl	3c6a0 <nrfx_nvmc_flash_page_size_get>
   26548:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2654a:	4638      	mov	r0, r7
   2654c:	f007 ff1c 	bl	2e388 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   26550:	1b64      	subs	r4, r4, r5
   26552:	442f      	add	r7, r5
   26554:	d1f9      	bne.n	2654a <flash_nrf_erase+0x62>
	z_impl_k_sem_give(sem);
   26556:	480a      	ldr	r0, [pc, #40]	; (26580 <flash_nrf_erase+0x98>)
   26558:	f00d ff0e 	bl	34378 <z_impl_k_sem_give>
	return ret;
   2655c:	4620      	mov	r0, r4
}
   2655e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26560:	4b04      	ldr	r3, [pc, #16]	; (26574 <flash_nrf_erase+0x8c>)
   26562:	4805      	ldr	r0, [pc, #20]	; (26578 <flash_nrf_erase+0x90>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   26564:	462a      	mov	r2, r5
   26566:	1ac0      	subs	r0, r0, r3
   26568:	08c0      	lsrs	r0, r0, #3
   2656a:	4623      	mov	r3, r4
   2656c:	4905      	ldr	r1, [pc, #20]	; (26584 <flash_nrf_erase+0x9c>)
   2656e:	0180      	lsls	r0, r0, #6
   26570:	e7d8      	b.n	26524 <flash_nrf_erase+0x3c>
   26572:	bf00      	nop
   26574:	0003f5a4 	.word	0x0003f5a4
   26578:	0003f61c 	.word	0x0003f61c
   2657c:	00042055 	.word	0x00042055
   26580:	200172a4 	.word	0x200172a4
   26584:	00042038 	.word	0x00042038

00026588 <nrf_flash_init>:
{
   26588:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2658a:	2201      	movs	r2, #1
   2658c:	4806      	ldr	r0, [pc, #24]	; (265a8 <nrf_flash_init+0x20>)
   2658e:	4611      	mov	r1, r2
   26590:	f017 fbe2 	bl	3dd58 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   26594:	f016 f887 	bl	3c6a6 <nrfx_nvmc_flash_page_count_get>
   26598:	4c04      	ldr	r4, [pc, #16]	; (265ac <nrf_flash_init+0x24>)
   2659a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2659c:	f016 f880 	bl	3c6a0 <nrfx_nvmc_flash_page_size_get>
   265a0:	6060      	str	r0, [r4, #4]
}
   265a2:	2000      	movs	r0, #0
   265a4:	bd10      	pop	{r4, pc}
   265a6:	bf00      	nop
   265a8:	200172a4 	.word	0x200172a4
   265ac:	2001729c 	.word	0x2001729c

000265b0 <flash_nrf_write>:
{
   265b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265b2:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   265b4:	4619      	mov	r1, r3
   265b6:	4630      	mov	r0, r6
{
   265b8:	4617      	mov	r7, r2
   265ba:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   265bc:	f015 f84c 	bl	3b658 <is_regular_addr_valid>
   265c0:	b970      	cbnz	r0, 265e0 <flash_nrf_write+0x30>
   265c2:	4b1e      	ldr	r3, [pc, #120]	; (2663c <flash_nrf_write+0x8c>)
   265c4:	481e      	ldr	r0, [pc, #120]	; (26640 <flash_nrf_write+0x90>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   265c6:	4632      	mov	r2, r6
   265c8:	1ac0      	subs	r0, r0, r3
   265ca:	4623      	mov	r3, r4
   265cc:	08c0      	lsrs	r0, r0, #3
   265ce:	491d      	ldr	r1, [pc, #116]	; (26644 <flash_nrf_write+0x94>)
   265d0:	0180      	lsls	r0, r0, #6
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   265d2:	f040 0001 	orr.w	r0, r0, #1
   265d6:	f013 f87a 	bl	396ce <log_string_sync>
		return -EINVAL;
   265da:	f06f 0015 	mvn.w	r0, #21
}
   265de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   265e0:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   265e4:	f015 0503 	ands.w	r5, r5, #3
   265e8:	d008      	beq.n	265fc <flash_nrf_write+0x4c>
   265ea:	4b14      	ldr	r3, [pc, #80]	; (2663c <flash_nrf_write+0x8c>)
   265ec:	4814      	ldr	r0, [pc, #80]	; (26640 <flash_nrf_write+0x90>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   265ee:	4632      	mov	r2, r6
   265f0:	1ac0      	subs	r0, r0, r3
   265f2:	08c0      	lsrs	r0, r0, #3
   265f4:	4623      	mov	r3, r4
   265f6:	4914      	ldr	r1, [pc, #80]	; (26648 <flash_nrf_write+0x98>)
   265f8:	0180      	lsls	r0, r0, #6
   265fa:	e7ea      	b.n	265d2 <flash_nrf_write+0x22>
	if (!len) {
   265fc:	b1dc      	cbz	r4, 26636 <flash_nrf_write+0x86>
	return z_impl_k_sem_take(sem, timeout);
   265fe:	f04f 32ff 	mov.w	r2, #4294967295
   26602:	f04f 33ff 	mov.w	r3, #4294967295
   26606:	4811      	ldr	r0, [pc, #68]	; (2664c <flash_nrf_write+0x9c>)
   26608:	f00d fefa 	bl	34400 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   2660c:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   26610:	42ac      	cmp	r4, r5
   26612:	eb06 0005 	add.w	r0, r6, r5
   26616:	d109      	bne.n	2662c <flash_nrf_write+0x7c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   26618:	4a0d      	ldr	r2, [pc, #52]	; (26650 <flash_nrf_write+0xa0>)
   2661a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2661e:	07db      	lsls	r3, r3, #31
   26620:	d5fb      	bpl.n	2661a <flash_nrf_write+0x6a>
	z_impl_k_sem_give(sem);
   26622:	480a      	ldr	r0, [pc, #40]	; (2664c <flash_nrf_write+0x9c>)
   26624:	f00d fea8 	bl	34378 <z_impl_k_sem_give>
	return ret;
   26628:	2000      	movs	r0, #0
}
   2662a:	e7d8      	b.n	265de <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   2662c:	5979      	ldr	r1, [r7, r5]
   2662e:	f007 fedd 	bl	2e3ec <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   26632:	3504      	adds	r5, #4
}
   26634:	e7ec      	b.n	26610 <flash_nrf_write+0x60>
		return 0;
   26636:	4620      	mov	r0, r4
   26638:	e7d1      	b.n	265de <flash_nrf_write+0x2e>
   2663a:	bf00      	nop
   2663c:	0003f5a4 	.word	0x0003f5a4
   26640:	0003f61c 	.word	0x0003f61c
   26644:	00042038 	.word	0x00042038
   26648:	00042074 	.word	0x00042074
   2664c:	200172a4 	.word	0x200172a4
   26650:	40039000 	.word	0x40039000

00026654 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   26654:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   26656:	794b      	ldrb	r3, [r1, #5]
   26658:	2b01      	cmp	r3, #1
   2665a:	d02a      	beq.n	266b2 <uarte_nrfx_configure+0x5e>
   2665c:	2b03      	cmp	r3, #3
   2665e:	d125      	bne.n	266ac <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   26660:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   26662:	798b      	ldrb	r3, [r1, #6]
   26664:	2b03      	cmp	r3, #3
   26666:	d121      	bne.n	266ac <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   26668:	79cc      	ldrb	r4, [r1, #7]
   2666a:	b12c      	cbz	r4, 26678 <uarte_nrfx_configure+0x24>
   2666c:	2c01      	cmp	r4, #1
   2666e:	d11d      	bne.n	266ac <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   26670:	6843      	ldr	r3, [r0, #4]
   26672:	685b      	ldr	r3, [r3, #4]
   26674:	079b      	lsls	r3, r3, #30
   26676:	d019      	beq.n	266ac <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   26678:	790a      	ldrb	r2, [r1, #4]
   2667a:	b112      	cbz	r2, 26682 <uarte_nrfx_configure+0x2e>
   2667c:	2a02      	cmp	r2, #2
   2667e:	d115      	bne.n	266ac <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   26680:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   26682:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   26684:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   26686:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2668a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2668c:	d065      	beq.n	2675a <uarte_nrfx_configure+0x106>
   2668e:	d82d      	bhi.n	266ec <uarte_nrfx_configure+0x98>
   26690:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   26694:	d064      	beq.n	26760 <uarte_nrfx_configure+0x10c>
   26696:	d816      	bhi.n	266c6 <uarte_nrfx_configure+0x72>
   26698:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2669c:	d062      	beq.n	26764 <uarte_nrfx_configure+0x110>
   2669e:	d80a      	bhi.n	266b6 <uarte_nrfx_configure+0x62>
   266a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   266a4:	d061      	beq.n	2676a <uarte_nrfx_configure+0x116>
   266a6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   266aa:	d061      	beq.n	26770 <uarte_nrfx_configure+0x11c>
   266ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   266b0:	e052      	b.n	26758 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
   266b2:	2600      	movs	r6, #0
   266b4:	e7d5      	b.n	26662 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   266b6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   266ba:	d05c      	beq.n	26776 <uarte_nrfx_configure+0x122>
   266bc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   266c0:	d1f4      	bne.n	266ac <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   266c2:	4b37      	ldr	r3, [pc, #220]	; (267a0 <uarte_nrfx_configure+0x14c>)
   266c4:	e03c      	b.n	26740 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   266c6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   266ca:	d057      	beq.n	2677c <uarte_nrfx_configure+0x128>
   266cc:	d807      	bhi.n	266de <uarte_nrfx_configure+0x8a>
   266ce:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   266d2:	d055      	beq.n	26780 <uarte_nrfx_configure+0x12c>
   266d4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   266d8:	d1e8      	bne.n	266ac <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   266da:	4b32      	ldr	r3, [pc, #200]	; (267a4 <uarte_nrfx_configure+0x150>)
   266dc:	e030      	b.n	26740 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   266de:	f647 2712 	movw	r7, #31250	; 0x7a12
   266e2:	42bb      	cmp	r3, r7
   266e4:	d1e2      	bne.n	266ac <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   266e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   266ea:	e029      	b.n	26740 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   266ec:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   266f0:	d048      	beq.n	26784 <uarte_nrfx_configure+0x130>
   266f2:	d813      	bhi.n	2671c <uarte_nrfx_configure+0xc8>
   266f4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   266f8:	d047      	beq.n	2678a <uarte_nrfx_configure+0x136>
   266fa:	d809      	bhi.n	26710 <uarte_nrfx_configure+0xbc>
   266fc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   26700:	42bb      	cmp	r3, r7
   26702:	d044      	beq.n	2678e <uarte_nrfx_configure+0x13a>
   26704:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   26708:	d1d0      	bne.n	266ac <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2670a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2670e:	e017      	b.n	26740 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   26710:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   26714:	d1ca      	bne.n	266ac <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   26716:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2671a:	e011      	b.n	26740 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   2671c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   26720:	d038      	beq.n	26794 <uarte_nrfx_configure+0x140>
   26722:	d808      	bhi.n	26736 <uarte_nrfx_configure+0xe2>
   26724:	4f20      	ldr	r7, [pc, #128]	; (267a8 <uarte_nrfx_configure+0x154>)
   26726:	42bb      	cmp	r3, r7
   26728:	d037      	beq.n	2679a <uarte_nrfx_configure+0x146>
   2672a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2672e:	d1bd      	bne.n	266ac <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   26730:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   26734:	e004      	b.n	26740 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   26736:	4f1d      	ldr	r7, [pc, #116]	; (267ac <uarte_nrfx_configure+0x158>)
   26738:	42bb      	cmp	r3, r7
   2673a:	d1b7      	bne.n	266ac <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2673c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   26740:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   26744:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   26746:	4334      	orrs	r4, r6
   26748:	4322      	orrs	r2, r4
   2674a:	3304      	adds	r3, #4
   2674c:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2674e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   26752:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   26756:	2000      	movs	r0, #0
}
   26758:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2675a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2675e:	e7ef      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   26760:	4b13      	ldr	r3, [pc, #76]	; (267b0 <uarte_nrfx_configure+0x15c>)
   26762:	e7ed      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   26764:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   26768:	e7ea      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   2676a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2676e:	e7e7      	b.n	26740 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   26770:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   26774:	e7e4      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   26776:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2677a:	e7e1      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2677c:	4b0d      	ldr	r3, [pc, #52]	; (267b4 <uarte_nrfx_configure+0x160>)
   2677e:	e7df      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   26780:	4b0d      	ldr	r3, [pc, #52]	; (267b8 <uarte_nrfx_configure+0x164>)
   26782:	e7dd      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   26784:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   26788:	e7da      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2678a:	4b0c      	ldr	r3, [pc, #48]	; (267bc <uarte_nrfx_configure+0x168>)
   2678c:	e7d8      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2678e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   26792:	e7d5      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   26794:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   26798:	e7d2      	b.n	26740 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2679a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2679e:	e7cf      	b.n	26740 <uarte_nrfx_configure+0xec>
   267a0:	0013b000 	.word	0x0013b000
   267a4:	004ea000 	.word	0x004ea000
   267a8:	0003d090 	.word	0x0003d090
   267ac:	000f4240 	.word	0x000f4240
   267b0:	00275000 	.word	0x00275000
   267b4:	0075c000 	.word	0x0075c000
   267b8:	003af000 	.word	0x003af000
   267bc:	013a9000 	.word	0x013a9000

000267c0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   267c0:	6803      	ldr	r3, [r0, #0]
{
   267c2:	b510      	push	{r4, lr}
    switch (port)
   267c4:	095a      	lsrs	r2, r3, #5
   267c6:	bf0c      	ite	eq
   267c8:	f04f 32ff 	moveq.w	r2, #4294967295
   267cc:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   267ce:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   267d2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   267d6:	07db      	lsls	r3, r3, #31
{
   267d8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   267da:	d40b      	bmi.n	267f4 <nrf_gpio_pin_port_decode+0x34>
   267dc:	490f      	ldr	r1, [pc, #60]	; (2681c <nrf_gpio_pin_port_decode+0x5c>)
   267de:	4810      	ldr	r0, [pc, #64]	; (26820 <nrf_gpio_pin_port_decode+0x60>)
   267e0:	f44f 7305 	mov.w	r3, #532	; 0x214
   267e4:	4a0f      	ldr	r2, [pc, #60]	; (26824 <nrf_gpio_pin_port_decode+0x64>)
   267e6:	f012 fca4 	bl	39132 <printk>
   267ea:	f44f 7105 	mov.w	r1, #532	; 0x214
   267ee:	480d      	ldr	r0, [pc, #52]	; (26824 <nrf_gpio_pin_port_decode+0x64>)
   267f0:	f012 ff3e 	bl	39670 <assert_post_action>
    uint32_t pin_number = *p_pin;
   267f4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   267f6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   267fa:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   267fc:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   267fe:	d00b      	beq.n	26818 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   26800:	4909      	ldr	r1, [pc, #36]	; (26828 <nrf_gpio_pin_port_decode+0x68>)
   26802:	4807      	ldr	r0, [pc, #28]	; (26820 <nrf_gpio_pin_port_decode+0x60>)
   26804:	f240 2319 	movw	r3, #537	; 0x219
   26808:	4a06      	ldr	r2, [pc, #24]	; (26824 <nrf_gpio_pin_port_decode+0x64>)
   2680a:	f012 fc92 	bl	39132 <printk>
   2680e:	f240 2119 	movw	r1, #537	; 0x219
   26812:	4804      	ldr	r0, [pc, #16]	; (26824 <nrf_gpio_pin_port_decode+0x64>)
   26814:	f012 ff2c 	bl	39670 <assert_post_action>
}
   26818:	4804      	ldr	r0, [pc, #16]	; (2682c <nrf_gpio_pin_port_decode+0x6c>)
   2681a:	bd10      	pop	{r4, pc}
   2681c:	000419c8 	.word	0x000419c8
   26820:	0004033e 	.word	0x0004033e
   26824:	00041995 	.word	0x00041995
   26828:	000451fc 	.word	0x000451fc
   2682c:	40842500 	.word	0x40842500

00026830 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   26830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26832:	4605      	mov	r5, r0
   26834:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26836:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   26838:	f017 fa73 	bl	3dd22 <k_is_in_isr>
   2683c:	b910      	cbnz	r0, 26844 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   2683e:	4b20      	ldr	r3, [pc, #128]	; (268c0 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   26840:	781b      	ldrb	r3, [r3, #0]
   26842:	b983      	cbnz	r3, 26866 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   26844:	f04f 0320 	mov.w	r3, #32
   26848:	f3ef 8411 	mrs	r4, BASEPRI
   2684c:	f383 8811 	msr	BASEPRI, r3
   26850:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   26854:	4628      	mov	r0, r5
   26856:	f014 fff1 	bl	3b83c <is_tx_ready>
   2685a:	bb28      	cbnz	r0, 268a8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   2685c:	f384 8811 	msr	BASEPRI, r4
   26860:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   26864:	e7ee      	b.n	26844 <uarte_nrfx_poll_out+0x14>
{
   26866:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   26868:	4628      	mov	r0, r5
   2686a:	f014 ffe7 	bl	3b83c <is_tx_ready>
   2686e:	b970      	cbnz	r0, 2688e <uarte_nrfx_poll_out+0x5e>
   26870:	2001      	movs	r0, #1
   26872:	f015 ff10 	bl	3c696 <nrfx_busy_wait>
   26876:	3c01      	subs	r4, #1
   26878:	d1f6      	bne.n	26868 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   2687a:	2100      	movs	r1, #0
   2687c:	2021      	movs	r0, #33	; 0x21
   2687e:	f00f fa2b 	bl	35cd8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   26882:	e7f0      	b.n	26866 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   26884:	f384 8811 	msr	BASEPRI, r4
   26888:	f3bf 8f6f 	isb	sy
}
   2688c:	e7f5      	b.n	2687a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   2688e:	f04f 0320 	mov.w	r3, #32
   26892:	f3ef 8411 	mrs	r4, BASEPRI
   26896:	f383 8811 	msr	BASEPRI, r3
   2689a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2689e:	4628      	mov	r0, r5
   268a0:	f014 ffcc 	bl	3b83c <is_tx_ready>
   268a4:	2800      	cmp	r0, #0
   268a6:	d0ed      	beq.n	26884 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   268a8:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   268aa:	2201      	movs	r2, #1
   268ac:	4628      	mov	r0, r5
	data->char_out = c;
   268ae:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   268b2:	f015 f854 	bl	3b95e <tx_start>
	__asm__ volatile(
   268b6:	f384 8811 	msr	BASEPRI, r4
   268ba:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   268be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   268c0:	2001d8e7 	.word	0x2001d8e7

000268c4 <uarte_instance_init.isra.0>:
	return config->uarte_regs;
   268c4:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   268c6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	return config->uarte_regs;
   268ca:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   268cc:	2300      	movs	r3, #0
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   268ce:	6907      	ldr	r7, [r0, #16]
   268d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

	nrf_uarte_disable(uarte);

	data->dev = dev;
   268d4:	680b      	ldr	r3, [r1, #0]
   268d6:	6038      	str	r0, [r7, #0]
static int uarte_instance_init(const struct device *dev,
   268d8:	4606      	mov	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   268da:	a801      	add	r0, sp, #4
   268dc:	460d      	mov	r5, r1
   268de:	9301      	str	r3, [sp, #4]
   268e0:	f7ff ff6e 	bl	267c0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   268e4:	2301      	movs	r3, #1
   268e6:	9a01      	ldr	r2, [sp, #4]
   268e8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   268ea:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   268ec:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   268ee:	a801      	add	r0, sp, #4
   268f0:	9301      	str	r3, [sp, #4]
   268f2:	f7ff ff65 	bl	267c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   268f6:	2203      	movs	r2, #3
   268f8:	9b01      	ldr	r3, [sp, #4]
   268fa:	3380      	adds	r3, #128	; 0x80
   268fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   26900:	686b      	ldr	r3, [r5, #4]
   26902:	1c59      	adds	r1, r3, #1
   26904:	d008      	beq.n	26918 <uarte_instance_init.isra.0+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26906:	a801      	add	r0, sp, #4
   26908:	9301      	str	r3, [sp, #4]
   2690a:	f7ff ff59 	bl	267c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2690e:	220c      	movs	r2, #12
   26910:	9b01      	ldr	r3, [sp, #4]
   26912:	3380      	adds	r3, #128	; 0x80
   26914:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   26918:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   2691c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   26920:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   26924:	68ab      	ldr	r3, [r5, #8]
   26926:	1c5a      	adds	r2, r3, #1
   26928:	d008      	beq.n	2693c <uarte_instance_init.isra.0+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2692a:	a801      	add	r0, sp, #4
   2692c:	9301      	str	r3, [sp, #4]
   2692e:	f7ff ff47 	bl	267c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   26932:	220c      	movs	r2, #12
   26934:	9b01      	ldr	r3, [sp, #4]
   26936:	3380      	adds	r3, #128	; 0x80
   26938:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   2693c:	68eb      	ldr	r3, [r5, #12]
   2693e:	1c58      	adds	r0, r3, #1
   26940:	d011      	beq.n	26966 <uarte_instance_init.isra.0+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26942:	a801      	add	r0, sp, #4
   26944:	9301      	str	r3, [sp, #4]
   26946:	f7ff ff3b 	bl	267c0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2694a:	2301      	movs	r3, #1
   2694c:	9a01      	ldr	r2, [sp, #4]
   2694e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   26950:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   26952:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26954:	a801      	add	r0, sp, #4
   26956:	9301      	str	r3, [sp, #4]
   26958:	f7ff ff32 	bl	267c0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2695c:	2203      	movs	r2, #3
   2695e:	9b01      	ldr	r3, [sp, #4]
   26960:	3380      	adds	r3, #128	; 0x80
   26962:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   26966:	6931      	ldr	r1, [r6, #16]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   26968:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2696c:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   2696e:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   26972:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   26974:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   26978:	f7ff fe6c 	bl	26654 <uarte_nrfx_configure>
	if (err) {
   2697c:	4680      	mov	r8, r0
   2697e:	b9b0      	cbnz	r0, 269ae <uarte_instance_init.isra.0+0xea>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   26980:	6873      	ldr	r3, [r6, #4]
   26982:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   26984:	0719      	lsls	r1, r3, #28
   26986:	d542      	bpl.n	26a0e <uarte_instance_init.isra.0+0x14a>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   26988:	f107 0016 	add.w	r0, r7, #22
   2698c:	f007 fb8e 	bl	2e0ac <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   26990:	4b34      	ldr	r3, [pc, #208]	; (26a64 <uarte_instance_init.isra.0+0x1a0>)
   26992:	4298      	cmp	r0, r3
   26994:	d00f      	beq.n	269b6 <uarte_instance_init.isra.0+0xf2>
   26996:	4b34      	ldr	r3, [pc, #208]	; (26a68 <uarte_instance_init.isra.0+0x1a4>)
   26998:	4834      	ldr	r0, [pc, #208]	; (26a6c <uarte_instance_init.isra.0+0x1a8>)
		LOG_ERR("Failed to allocate PPI Channel");
   2699a:	4935      	ldr	r1, [pc, #212]	; (26a70 <uarte_instance_init.isra.0+0x1ac>)
   2699c:	1ac0      	subs	r0, r0, r3
   2699e:	08c0      	lsrs	r0, r0, #3
   269a0:	0180      	lsls	r0, r0, #6
   269a2:	f040 0001 	orr.w	r0, r0, #1
   269a6:	f012 fe92 	bl	396ce <log_string_sync>
		return -EIO;
   269aa:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   269ae:	4640      	mov	r0, r8
   269b0:	b002      	add	sp, #8
   269b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   269b6:	f514 7a90 	adds.w	sl, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   269ba:	f897 9016 	ldrb.w	r9, [r7, #22]
   269be:	d10b      	bne.n	269d8 <uarte_instance_init.isra.0+0x114>
   269c0:	492c      	ldr	r1, [pc, #176]	; (26a74 <uarte_instance_init.isra.0+0x1b0>)
   269c2:	482d      	ldr	r0, [pc, #180]	; (26a78 <uarte_instance_init.isra.0+0x1b4>)
   269c4:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   269c8:	4a2c      	ldr	r2, [pc, #176]	; (26a7c <uarte_instance_init.isra.0+0x1b8>)
   269ca:	f012 fbb2 	bl	39132 <printk>
   269ce:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
   269d2:	482a      	ldr	r0, [pc, #168]	; (26a7c <uarte_instance_init.isra.0+0x1b8>)
   269d4:	f012 fe4c 	bl	39670 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   269d8:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   269dc:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   269e0:	f8ca 9080 	str.w	r9, [sl, #128]	; 0x80
    NRFX_ASSERT(tep);
   269e4:	d10b      	bne.n	269fe <uarte_instance_init.isra.0+0x13a>
   269e6:	4926      	ldr	r1, [pc, #152]	; (26a80 <uarte_instance_init.isra.0+0x1bc>)
   269e8:	4823      	ldr	r0, [pc, #140]	; (26a78 <uarte_instance_init.isra.0+0x1b4>)
   269ea:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   269ee:	4a23      	ldr	r2, [pc, #140]	; (26a7c <uarte_instance_init.isra.0+0x1b8>)
   269f0:	f012 fb9f 	bl	39132 <printk>
   269f4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   269f8:	4820      	ldr	r0, [pc, #128]	; (26a7c <uarte_instance_init.isra.0+0x1b8>)
   269fa:	f012 fe39 	bl	39670 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   269fe:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   26a00:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   26a04:	7dba      	ldrb	r2, [r7, #22]
   26a06:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   26a08:	4a1e      	ldr	r2, [pc, #120]	; (26a84 <uarte_instance_init.isra.0+0x1c0>)
   26a0a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   26a0e:	2308      	movs	r3, #8
   26a10:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   26a14:	686b      	ldr	r3, [r5, #4]
   26a16:	3301      	adds	r3, #1
   26a18:	d00c      	beq.n	26a34 <uarte_instance_init.isra.0+0x170>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26a1a:	2300      	movs	r3, #0
   26a1c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   26a20:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   26a24:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   26a28:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   26a2c:	2301      	movs	r3, #1
   26a2e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26a32:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   26a34:	6873      	ldr	r3, [r6, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   26a36:	3714      	adds	r7, #20
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   26a38:	685b      	ldr	r3, [r3, #4]
   26a3a:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   26a3c:	bf5c      	itt	pl
   26a3e:	f44f 7280 	movpl.w	r2, #256	; 0x100
   26a42:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26a46:	06db      	lsls	r3, r3, #27
   26a48:	bf44      	itt	mi
   26a4a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   26a4e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   26a52:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26a54:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26a58:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26a5c:	2301      	movs	r3, #1
   26a5e:	60a3      	str	r3, [r4, #8]
   26a60:	60e3      	str	r3, [r4, #12]
	return 0;
   26a62:	e7a4      	b.n	269ae <uarte_instance_init.isra.0+0xea>
   26a64:	0bad0000 	.word	0x0bad0000
   26a68:	0003f5a4 	.word	0x0003f5a4
   26a6c:	0003f6e4 	.word	0x0003f6e4
   26a70:	0004209c 	.word	0x0004209c
   26a74:	000420f3 	.word	0x000420f3
   26a78:	0004033e 	.word	0x0004033e
   26a7c:	000420bb 	.word	0x000420bb
   26a80:	000420f7 	.word	0x000420f7
   26a84:	40017000 	.word	0x40017000

00026a88 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   26a88:	b530      	push	{r4, r5, lr}
   26a8a:	b085      	sub	sp, #20
   26a8c:	466c      	mov	r4, sp
   26a8e:	4605      	mov	r5, r0
   26a90:	4b08      	ldr	r3, [pc, #32]	; (26ab4 <uarte_0_init+0x2c>)
   26a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   26a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   26a98:	2200      	movs	r2, #0
   26a9a:	2101      	movs	r1, #1
   26a9c:	2008      	movs	r0, #8
   26a9e:	f7fc fbb3 	bl	23208 <z_arm_irq_priority_set>
   26aa2:	2008      	movs	r0, #8
   26aa4:	f7fc fb92 	bl	231cc <arch_irq_enable>
   26aa8:	4621      	mov	r1, r4
   26aaa:	4628      	mov	r0, r5
   26aac:	f7ff ff0a 	bl	268c4 <uarte_instance_init.isra.0>
   26ab0:	b005      	add	sp, #20
   26ab2:	bd30      	pop	{r4, r5, pc}
   26ab4:	0003f7b0 	.word	0x0003f7b0

00026ab8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   26ab8:	b530      	push	{r4, r5, lr}
   26aba:	b085      	sub	sp, #20
   26abc:	466c      	mov	r4, sp
   26abe:	4605      	mov	r5, r0
   26ac0:	4b08      	ldr	r3, [pc, #32]	; (26ae4 <uarte_1_init+0x2c>)
   26ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   26ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   26ac8:	2200      	movs	r2, #0
   26aca:	2101      	movs	r1, #1
   26acc:	2009      	movs	r0, #9
   26ace:	f7fc fb9b 	bl	23208 <z_arm_irq_priority_set>
   26ad2:	2009      	movs	r0, #9
   26ad4:	f7fc fb7a 	bl	231cc <arch_irq_enable>
   26ad8:	4621      	mov	r1, r4
   26ada:	4628      	mov	r0, r5
   26adc:	f7ff fef2 	bl	268c4 <uarte_instance_init.isra.0>
   26ae0:	b005      	add	sp, #20
   26ae2:	bd30      	pop	{r4, r5, pc}
   26ae4:	0003f7c0 	.word	0x0003f7c0

00026ae8 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   26ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26aea:	460f      	mov	r7, r1
   26aec:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   26aee:	b948      	cbnz	r0, 26b04 <entropy_cc3xx_rng_get_entropy+0x1c>
   26af0:	4918      	ldr	r1, [pc, #96]	; (26b54 <entropy_cc3xx_rng_get_entropy+0x6c>)
   26af2:	4819      	ldr	r0, [pc, #100]	; (26b58 <entropy_cc3xx_rng_get_entropy+0x70>)
   26af4:	2326      	movs	r3, #38	; 0x26
   26af6:	4a19      	ldr	r2, [pc, #100]	; (26b5c <entropy_cc3xx_rng_get_entropy+0x74>)
   26af8:	f012 fb1b 	bl	39132 <printk>
   26afc:	2126      	movs	r1, #38	; 0x26
   26afe:	4817      	ldr	r0, [pc, #92]	; (26b5c <entropy_cc3xx_rng_get_entropy+0x74>)
   26b00:	f012 fdb6 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   26b04:	b94f      	cbnz	r7, 26b1a <entropy_cc3xx_rng_get_entropy+0x32>
   26b06:	4916      	ldr	r1, [pc, #88]	; (26b60 <entropy_cc3xx_rng_get_entropy+0x78>)
   26b08:	4813      	ldr	r0, [pc, #76]	; (26b58 <entropy_cc3xx_rng_get_entropy+0x70>)
   26b0a:	2327      	movs	r3, #39	; 0x27
   26b0c:	4a13      	ldr	r2, [pc, #76]	; (26b5c <entropy_cc3xx_rng_get_entropy+0x74>)
   26b0e:	f012 fb10 	bl	39132 <printk>
   26b12:	2127      	movs	r1, #39	; 0x27
   26b14:	4811      	ldr	r0, [pc, #68]	; (26b5c <entropy_cc3xx_rng_get_entropy+0x74>)
   26b16:	f012 fdab 	bl	39670 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   26b1a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   26b1e:	2400      	movs	r4, #0
   26b20:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   26b24:	42a6      	cmp	r6, r4
   26b26:	d801      	bhi.n	26b2c <entropy_cc3xx_rng_get_entropy+0x44>
		offset += chunk_size;
	}
#endif

	return res;
}
   26b28:	b003      	add	sp, #12
   26b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   26b2c:	1b33      	subs	r3, r6, r4
   26b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   26b32:	bf38      	it	cc
   26b34:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   26b36:	aa01      	add	r2, sp, #4
   26b38:	4629      	mov	r1, r5
   26b3a:	1938      	adds	r0, r7, r4
   26b3c:	f013 fcad 	bl	3a49a <spm_request_random_number>
		if (olen != chunk_size) {
   26b40:	9b01      	ldr	r3, [sp, #4]
   26b42:	42ab      	cmp	r3, r5
   26b44:	d103      	bne.n	26b4e <entropy_cc3xx_rng_get_entropy+0x66>
		if (res != 0) {
   26b46:	2800      	cmp	r0, #0
   26b48:	d1ee      	bne.n	26b28 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
   26b4a:	442c      	add	r4, r5
   26b4c:	e7ea      	b.n	26b24 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   26b4e:	f06f 0015 	mvn.w	r0, #21
   26b52:	e7e9      	b.n	26b28 <entropy_cc3xx_rng_get_entropy+0x40>
   26b54:	00042142 	.word	0x00042142
   26b58:	0004033e 	.word	0x0004033e
   26b5c:	00042112 	.word	0x00042112
   26b60:	0004146b 	.word	0x0004146b

00026b64 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   26b64:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   26b66:	4d19      	ldr	r5, [pc, #100]	; (26bcc <_nrf_modem_lib_init+0x68>)
   26b68:	4c19      	ldr	r4, [pc, #100]	; (26bd0 <_nrf_modem_lib_init+0x6c>)
   26b6a:	782b      	ldrb	r3, [r5, #0]
   26b6c:	b933      	cbnz	r3, 26b7c <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   26b6e:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   26b72:	4818      	ldr	r0, [pc, #96]	; (26bd4 <_nrf_modem_lib_init+0x70>)
   26b74:	f017 f8e9 	bl	3dd4a <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   26b78:	2301      	movs	r3, #1
   26b7a:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   26b7c:	2200      	movs	r2, #0
   26b7e:	202a      	movs	r0, #42	; 0x2a
   26b80:	4611      	mov	r1, r2
   26b82:	f7fc fb41 	bl	23208 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   26b86:	2100      	movs	r1, #0
   26b88:	4813      	ldr	r0, [pc, #76]	; (26bd8 <_nrf_modem_lib_init+0x74>)
   26b8a:	f00c fb8d 	bl	332a8 <nrf_modem_init>
   26b8e:	4b13      	ldr	r3, [pc, #76]	; (26bdc <_nrf_modem_lib_init+0x78>)
   26b90:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   26b92:	f04f 32ff 	mov.w	r2, #4294967295
   26b96:	f04f 33ff 	mov.w	r3, #4294967295
   26b9a:	480e      	ldr	r0, [pc, #56]	; (26bd4 <_nrf_modem_lib_init+0x70>)
   26b9c:	f00d fa2a 	bl	33ff4 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   26ba0:	6820      	ldr	r0, [r4, #0]
   26ba2:	b170      	cbz	r0, 26bc2 <_nrf_modem_lib_init+0x5e>
	return node->next;
   26ba4:	6804      	ldr	r4, [r0, #0]
   26ba6:	2c00      	cmp	r4, #0
   26ba8:	bf38      	it	cc
   26baa:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   26bac:	3004      	adds	r0, #4
   26bae:	f00d fbe3 	bl	34378 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   26bb2:	b134      	cbz	r4, 26bc2 <_nrf_modem_lib_init+0x5e>
   26bb4:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26bb6:	4620      	mov	r0, r4
   26bb8:	2b00      	cmp	r3, #0
   26bba:	bf38      	it	cc
   26bbc:	2300      	movcc	r3, #0
   26bbe:	461c      	mov	r4, r3
   26bc0:	e7f4      	b.n	26bac <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
   26bc2:	4804      	ldr	r0, [pc, #16]	; (26bd4 <_nrf_modem_lib_init+0x70>)
   26bc4:	f00d fb10 	bl	341e8 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   26bc8:	2000      	movs	r0, #0
   26bca:	bd38      	pop	{r3, r4, r5, pc}
   26bcc:	2001ca98 	.word	0x2001ca98
   26bd0:	200172cc 	.word	0x200172cc
   26bd4:	200172d4 	.word	0x200172d4
   26bd8:	0003fd54 	.word	0x0003fd54
   26bdc:	200172c8 	.word	0x200172c8

00026be0 <nrf_modem_lib_shutdown_wait>:

void nrf_modem_lib_shutdown_wait(void)
{
   26be0:	b530      	push	{r4, r5, lr}
   26be2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   26be4:	2201      	movs	r2, #1
   26be6:	2100      	movs	r1, #0
   26be8:	a802      	add	r0, sp, #8
   26bea:	f017 f8b5 	bl	3dd58 <z_impl_k_sem_init>
   26bee:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   26bf0:	f04f 33ff 	mov.w	r3, #4294967295
   26bf4:	f04f 32ff 	mov.w	r2, #4294967295
   26bf8:	481c      	ldr	r0, [pc, #112]	; (26c6c <nrf_modem_lib_shutdown_wait+0x8c>)
   26bfa:	f00d f9fb 	bl	33ff4 <z_impl_k_mutex_lock>
	parent->next = child;
   26bfe:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   26c00:	4c1b      	ldr	r4, [pc, #108]	; (26c70 <nrf_modem_lib_shutdown_wait+0x90>)
	parent->next = child;
   26c02:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   26c04:	6863      	ldr	r3, [r4, #4]
   26c06:	bb2b      	cbnz	r3, 26c54 <nrf_modem_lib_shutdown_wait+0x74>
	list->head = node;
   26c08:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   26c0c:	4817      	ldr	r0, [pc, #92]	; (26c6c <nrf_modem_lib_shutdown_wait+0x8c>)
   26c0e:	f00d faeb 	bl	341e8 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   26c12:	f04f 32ff 	mov.w	r2, #4294967295
   26c16:	f04f 33ff 	mov.w	r3, #4294967295
   26c1a:	a802      	add	r0, sp, #8
   26c1c:	f00d fbf0 	bl	34400 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   26c20:	f04f 32ff 	mov.w	r2, #4294967295
   26c24:	f04f 33ff 	mov.w	r3, #4294967295
   26c28:	4810      	ldr	r0, [pc, #64]	; (26c6c <nrf_modem_lib_shutdown_wait+0x8c>)
   26c2a:	f00d f9e3 	bl	33ff4 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26c2e:	2200      	movs	r2, #0
   26c30:	6823      	ldr	r3, [r4, #0]
   26c32:	b153      	cbz	r3, 26c4a <nrf_modem_lib_shutdown_wait+0x6a>
   26c34:	42ab      	cmp	r3, r5
   26c36:	d116      	bne.n	26c66 <nrf_modem_lib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   26c38:	9901      	ldr	r1, [sp, #4]
   26c3a:	b972      	cbnz	r2, 26c5a <nrf_modem_lib_shutdown_wait+0x7a>
   26c3c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   26c3e:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   26c40:	429a      	cmp	r2, r3
   26c42:	d100      	bne.n	26c46 <nrf_modem_lib_shutdown_wait+0x66>
	list->tail = node;
   26c44:	6061      	str	r1, [r4, #4]
	parent->next = child;
   26c46:	2300      	movs	r3, #0
   26c48:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   26c4a:	4808      	ldr	r0, [pc, #32]	; (26c6c <nrf_modem_lib_shutdown_wait+0x8c>)
   26c4c:	f00d facc 	bl	341e8 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   26c50:	b009      	add	sp, #36	; 0x24
   26c52:	bd30      	pop	{r4, r5, pc}
   26c54:	601d      	str	r5, [r3, #0]
	list->tail = node;
   26c56:	6065      	str	r5, [r4, #4]
}
   26c58:	e7d8      	b.n	26c0c <nrf_modem_lib_shutdown_wait+0x2c>
	parent->next = child;
   26c5a:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26c5c:	6861      	ldr	r1, [r4, #4]
   26c5e:	4299      	cmp	r1, r3
	list->tail = node;
   26c60:	bf08      	it	eq
   26c62:	6062      	streq	r2, [r4, #4]
}
   26c64:	e7ef      	b.n	26c46 <nrf_modem_lib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26c66:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26c68:	681b      	ldr	r3, [r3, #0]
   26c6a:	e7e2      	b.n	26c32 <nrf_modem_lib_shutdown_wait+0x52>
   26c6c:	200172d4 	.word	0x200172d4
   26c70:	200172cc 	.word	0x200172cc

00026c74 <nrf_modem_lib_get_init_ret>:
}

int nrf_modem_lib_get_init_ret(void)
{
	return init_ret;
}
   26c74:	4b01      	ldr	r3, [pc, #4]	; (26c7c <nrf_modem_lib_get_init_ret+0x8>)
   26c76:	6818      	ldr	r0, [r3, #0]
   26c78:	4770      	bx	lr
   26c7a:	bf00      	nop
   26c7c:	200172c8 	.word	0x200172c8

00026c80 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   26c80:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   26c82:	4c0d      	ldr	r4, [pc, #52]	; (26cb8 <thread_monitor_entry_get+0x38>)
{
   26c84:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   26c86:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   26c88:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   26c8a:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   26c8c:	4b0b      	ldr	r3, [pc, #44]	; (26cbc <thread_monitor_entry_get+0x3c>)
   26c8e:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   26c90:	6801      	ldr	r1, [r0, #0]
   26c92:	4291      	cmp	r1, r2
   26c94:	d00e      	beq.n	26cb4 <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   26c96:	b151      	cbz	r1, 26cae <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   26c98:	6841      	ldr	r1, [r0, #4]
   26c9a:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   26c9c:	42b1      	cmp	r1, r6
   26c9e:	bfc4      	itt	gt
   26ca0:	4604      	movgt	r4, r0
   26ca2:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   26ca4:	3d01      	subs	r5, #1
   26ca6:	f100 0008 	add.w	r0, r0, #8
   26caa:	d1f1      	bne.n	26c90 <thread_monitor_entry_get+0x10>
   26cac:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   26cae:	3b01      	subs	r3, #1
	new_entry->id = id;
   26cb0:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   26cb2:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   26cb4:	bd70      	pop	{r4, r5, r6, pc}
   26cb6:	bf00      	nop
   26cb8:	20017714 	.word	0x20017714
   26cbc:	200176ec 	.word	0x200176ec

00026cc0 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   26cc0:	4668      	mov	r0, sp
   26cc2:	f020 0107 	bic.w	r1, r0, #7
   26cc6:	468d      	mov	sp, r1
   26cc8:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26cca:	4b0f      	ldr	r3, [pc, #60]	; (26d08 <rpc_proxy_irq_handler+0x48>)
   26ccc:	e8d3 2fef 	ldaex	r2, [r3]
   26cd0:	3201      	adds	r2, #1
   26cd2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26cd6:	2900      	cmp	r1, #0
   26cd8:	d1f8      	bne.n	26ccc <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_os_application_irq_handler();
   26cda:	f008 ff71 	bl	2fbc0 <nrf_modem_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   26cde:	4b0b      	ldr	r3, [pc, #44]	; (26d0c <rpc_proxy_irq_handler+0x4c>)
   26ce0:	681c      	ldr	r4, [r3, #0]
   26ce2:	2c00      	cmp	r4, #0
   26ce4:	bf38      	it	cc
   26ce6:	2400      	movcc	r4, #0
   26ce8:	b12c      	cbz	r4, 26cf6 <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   26cea:	1d20      	adds	r0, r4, #4
   26cec:	f00d fb44 	bl	34378 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26cf0:	6824      	ldr	r4, [r4, #0]
   26cf2:	2c00      	cmp	r4, #0
   26cf4:	d1f8      	bne.n	26ce8 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   26cf6:	f7fc fab9 	bl	2326c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   26cfa:	f7fc fe73 	bl	239e4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   26cfe:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   26d02:	4685      	mov	sp, r0
   26d04:	4770      	bx	lr
   26d06:	bf00      	nop
   26d08:	200176ec 	.word	0x200176ec
   26d0c:	2001770c 	.word	0x2001770c

00026d10 <nrf_modem_os_timedwait>:
{
   26d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d14:	460c      	mov	r4, r1
   26d16:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   26d18:	f017 f872 	bl	3de00 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   26d1c:	6823      	ldr	r3, [r4, #0]
   26d1e:	4680      	mov	r8, r0
   26d20:	2b00      	cmp	r3, #0
   26d22:	468a      	mov	sl, r1
   26d24:	d103      	bne.n	26d2e <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   26d26:	f00e fe87 	bl	35a38 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   26d2a:	203c      	movs	r0, #60	; 0x3c
   26d2c:	e091      	b.n	26e52 <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   26d2e:	bfbc      	itt	lt
   26d30:	f04f 33ff 	movlt.w	r3, #4294967295
   26d34:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   26d36:	2201      	movs	r2, #1
   26d38:	2100      	movs	r1, #0
   26d3a:	a802      	add	r0, sp, #8
   26d3c:	f017 f80c 	bl	3dd58 <z_impl_k_sem_init>
   26d40:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   26d42:	f04f 0320 	mov.w	r3, #32
   26d46:	f3ef 8b11 	mrs	fp, BASEPRI
   26d4a:	f383 8811 	msr	BASEPRI, r3
   26d4e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   26d52:	f00e fff9 	bl	35d48 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   26d56:	f7ff ff93 	bl	26c80 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   26d5a:	4947      	ldr	r1, [pc, #284]	; (26e78 <nrf_modem_os_timedwait+0x168>)
   26d5c:	6843      	ldr	r3, [r0, #4]
   26d5e:	680a      	ldr	r2, [r1, #0]
   26d60:	4689      	mov	r9, r1
   26d62:	4293      	cmp	r3, r2
   26d64:	f04f 0300 	mov.w	r3, #0
   26d68:	d108      	bne.n	26d7c <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   26d6a:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   26d6c:	4b43      	ldr	r3, [pc, #268]	; (26e7c <nrf_modem_os_timedwait+0x16c>)
   26d6e:	685a      	ldr	r2, [r3, #4]
   26d70:	2a00      	cmp	r2, #0
   26d72:	d171      	bne.n	26e58 <nrf_modem_os_timedwait+0x148>
	list->head = node;
   26d74:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   26d78:	2301      	movs	r3, #1
}
   26d7a:	e000      	b.n	26d7e <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   26d7c:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   26d7e:	f38b 8811 	msr	BASEPRI, fp
   26d82:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   26d86:	2b00      	cmp	r3, #0
   26d88:	d062      	beq.n	26e50 <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   26d8a:	6823      	ldr	r3, [r4, #0]
   26d8c:	1c5a      	adds	r2, r3, #1
   26d8e:	d066      	beq.n	26e5e <nrf_modem_os_timedwait+0x14e>
			return (t * to_hz + off) / from_hz;
   26d90:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   26d94:	f240 30e7 	movw	r0, #999	; 0x3e7
   26d98:	2100      	movs	r1, #0
   26d9a:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   26d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26da2:	2300      	movs	r3, #0
   26da4:	fbce 010c 	smlal	r0, r1, lr, ip
   26da8:	f7f6 f87e 	bl	1cea8 <__aeabi_uldivmod>
   26dac:	4602      	mov	r2, r0
   26dae:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   26db0:	a802      	add	r0, sp, #8
   26db2:	f00d fb25 	bl	34400 <z_impl_k_sem_take>
	__asm__ volatile(
   26db6:	f04f 0320 	mov.w	r3, #32
   26dba:	f3ef 8b11 	mrs	fp, BASEPRI
   26dbe:	f383 8811 	msr	BASEPRI, r3
   26dc2:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26dc6:	2000      	movs	r0, #0
   26dc8:	4b2c      	ldr	r3, [pc, #176]	; (26e7c <nrf_modem_os_timedwait+0x16c>)
   26dca:	681a      	ldr	r2, [r3, #0]
   26dcc:	b15a      	cbz	r2, 26de6 <nrf_modem_os_timedwait+0xd6>
   26dce:	42aa      	cmp	r2, r5
   26dd0:	d14f      	bne.n	26e72 <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   26dd2:	9d01      	ldr	r5, [sp, #4]
   26dd4:	2800      	cmp	r0, #0
   26dd6:	d146      	bne.n	26e66 <nrf_modem_os_timedwait+0x156>
   26dd8:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   26dda:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   26ddc:	4291      	cmp	r1, r2
   26dde:	d100      	bne.n	26de2 <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   26de0:	605d      	str	r5, [r3, #4]
	parent->next = child;
   26de2:	2300      	movs	r3, #0
   26de4:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   26de6:	f00e ffaf 	bl	35d48 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   26dea:	f7ff ff49 	bl	26c80 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   26dee:	f8d9 3000 	ldr.w	r3, [r9]
   26df2:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   26df4:	f38b 8811 	msr	BASEPRI, fp
   26df8:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   26dfc:	6825      	ldr	r5, [r4, #0]
   26dfe:	1c6b      	adds	r3, r5, #1
   26e00:	d026      	beq.n	26e50 <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   26e02:	f016 fffd 	bl	3de00 <z_impl_k_uptime_ticks>
   26e06:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   26e0a:	468e      	mov	lr, r1
   26e0c:	fba8 890c 	umull	r8, r9, r8, ip
   26e10:	fba0 010c 	umull	r0, r1, r0, ip
   26e14:	fb0c 990a 	mla	r9, ip, sl, r9
   26e18:	fb0c 110e 	mla	r1, ip, lr, r1
   26e1c:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   26e20:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   26e24:	1952      	adds	r2, r2, r5
   26e26:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   26e2a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   26e2e:	0bc5      	lsrs	r5, r0, #15
   26e30:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   26e34:	1b56      	subs	r6, r2, r5
   26e36:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   26e3a:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   26e3e:	2e00      	cmp	r6, #0
   26e40:	f177 0300 	sbcs.w	r3, r7, #0
   26e44:	bfb8      	it	lt
   26e46:	2600      	movlt	r6, #0
   26e48:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   26e4a:	2e00      	cmp	r6, #0
   26e4c:	f43f af6d 	beq.w	26d2a <nrf_modem_os_timedwait+0x1a>
	return 0;
   26e50:	2000      	movs	r0, #0
}
   26e52:	b009      	add	sp, #36	; 0x24
   26e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e58:	6015      	str	r5, [r2, #0]
	list->tail = node;
   26e5a:	605d      	str	r5, [r3, #4]
   26e5c:	e78c      	b.n	26d78 <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   26e5e:	f04f 32ff 	mov.w	r2, #4294967295
   26e62:	4613      	mov	r3, r2
   26e64:	e7a4      	b.n	26db0 <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   26e66:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   26e68:	6859      	ldr	r1, [r3, #4]
   26e6a:	4291      	cmp	r1, r2
	list->tail = node;
   26e6c:	bf08      	it	eq
   26e6e:	6058      	streq	r0, [r3, #4]
}
   26e70:	e7b7      	b.n	26de2 <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26e72:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e74:	6812      	ldr	r2, [r2, #0]
   26e76:	e7a9      	b.n	26dcc <nrf_modem_os_timedwait+0xbc>
   26e78:	200176ec 	.word	0x200176ec
   26e7c:	2001770c 	.word	0x2001770c

00026e80 <nrf_modem_os_errno_set>:
	switch (err_code) {
   26e80:	283d      	cmp	r0, #61	; 0x3d
{
   26e82:	b510      	push	{r4, lr}
   26e84:	4604      	mov	r4, r0
	switch (err_code) {
   26e86:	f300 80a1 	bgt.w	26fcc <nrf_modem_os_errno_set+0x14c>
   26e8a:	2800      	cmp	r0, #0
   26e8c:	dc1e      	bgt.n	26ecc <nrf_modem_os_errno_set+0x4c>
		__ASSERT(false, "Untranslated errno %d set by nrf_modem_lib!", err_code);
   26e8e:	f240 135f 	movw	r3, #351	; 0x15f
   26e92:	4abc      	ldr	r2, [pc, #752]	; (27184 <nrf_modem_os_errno_set+0x304>)
   26e94:	49bc      	ldr	r1, [pc, #752]	; (27188 <nrf_modem_os_errno_set+0x308>)
   26e96:	48bd      	ldr	r0, [pc, #756]	; (2718c <nrf_modem_os_errno_set+0x30c>)
   26e98:	f012 f94b 	bl	39132 <printk>
   26e9c:	4621      	mov	r1, r4
   26e9e:	48bc      	ldr	r0, [pc, #752]	; (27190 <nrf_modem_os_errno_set+0x310>)
   26ea0:	f012 f947 	bl	39132 <printk>
   26ea4:	f240 115f 	movw	r1, #351	; 0x15f
   26ea8:	48b6      	ldr	r0, [pc, #728]	; (27184 <nrf_modem_os_errno_set+0x304>)
   26eaa:	f012 fbe1 	bl	39670 <assert_post_action>
   26eae:	4bb9      	ldr	r3, [pc, #740]	; (27194 <nrf_modem_os_errno_set+0x314>)
   26eb0:	48b9      	ldr	r0, [pc, #740]	; (27198 <nrf_modem_os_errno_set+0x318>)
		LOG_ERR("Untranslated errno %d set by nrf_modem_lib!", err_code);
   26eb2:	4622      	mov	r2, r4
   26eb4:	1ac0      	subs	r0, r0, r3
   26eb6:	08c0      	lsrs	r0, r0, #3
   26eb8:	0180      	lsls	r0, r0, #6
   26eba:	49b8      	ldr	r1, [pc, #736]	; (2719c <nrf_modem_os_errno_set+0x31c>)
   26ebc:	f040 0001 	orr.w	r0, r0, #1
   26ec0:	f012 fc05 	bl	396ce <log_string_sync>
		errno = 0xBAADBAAD;
   26ec4:	f013 fb6f 	bl	3a5a6 <__errno>
   26ec8:	4bb5      	ldr	r3, [pc, #724]	; (271a0 <nrf_modem_os_errno_set+0x320>)
   26eca:	e0c0      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
   26ecc:	1e43      	subs	r3, r0, #1
   26ece:	2b3c      	cmp	r3, #60	; 0x3c
   26ed0:	d8dd      	bhi.n	26e8e <nrf_modem_os_errno_set+0xe>
   26ed2:	a201      	add	r2, pc, #4	; (adr r2, 26ed8 <nrf_modem_os_errno_set+0x58>)
   26ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   26ed8:	00027049 	.word	0x00027049
   26edc:	00027053 	.word	0x00027053
   26ee0:	00026e8f 	.word	0x00026e8f
   26ee4:	00026e8f 	.word	0x00026e8f
   26ee8:	0002705b 	.word	0x0002705b
   26eec:	00026e8f 	.word	0x00026e8f
   26ef0:	00026e8f 	.word	0x00026e8f
   26ef4:	00027063 	.word	0x00027063
   26ef8:	0002706b 	.word	0x0002706b
   26efc:	00026e8f 	.word	0x00026e8f
   26f00:	00026e8f 	.word	0x00026e8f
   26f04:	00027073 	.word	0x00027073
   26f08:	0002707b 	.word	0x0002707b
   26f0c:	00027083 	.word	0x00027083
   26f10:	00026e8f 	.word	0x00026e8f
   26f14:	00026e8f 	.word	0x00026e8f
   26f18:	00026e8f 	.word	0x00026e8f
   26f1c:	00026e8f 	.word	0x00026e8f
   26f20:	00026e8f 	.word	0x00026e8f
   26f24:	00026e8f 	.word	0x00026e8f
   26f28:	00026e8f 	.word	0x00026e8f
   26f2c:	0002708b 	.word	0x0002708b
   26f30:	00026e8f 	.word	0x00026e8f
   26f34:	00027093 	.word	0x00027093
   26f38:	00026e8f 	.word	0x00026e8f
   26f3c:	00026e8f 	.word	0x00026e8f
   26f40:	00026e8f 	.word	0x00026e8f
   26f44:	00026e8f 	.word	0x00026e8f
   26f48:	00026e8f 	.word	0x00026e8f
   26f4c:	00026e8f 	.word	0x00026e8f
   26f50:	00026e8f 	.word	0x00026e8f
   26f54:	00026e8f 	.word	0x00026e8f
   26f58:	00026e8f 	.word	0x00026e8f
   26f5c:	00026e8f 	.word	0x00026e8f
   26f60:	0002709b 	.word	0x0002709b
   26f64:	00026e8f 	.word	0x00026e8f
   26f68:	000270a3 	.word	0x000270a3
   26f6c:	00026e8f 	.word	0x00026e8f
   26f70:	00026e8f 	.word	0x00026e8f
   26f74:	00027173 	.word	0x00027173
   26f78:	000270ab 	.word	0x000270ab
   26f7c:	000270b3 	.word	0x000270b3
   26f80:	000270bb 	.word	0x000270bb
   26f84:	000270c3 	.word	0x000270c3
   26f88:	000270cb 	.word	0x000270cb
   26f8c:	00026e8f 	.word	0x00026e8f
   26f90:	000270d3 	.word	0x000270d3
   26f94:	000270db 	.word	0x000270db
   26f98:	00026e8f 	.word	0x00026e8f
   26f9c:	000270e3 	.word	0x000270e3
   26fa0:	000270eb 	.word	0x000270eb
   26fa4:	000270f3 	.word	0x000270f3
   26fa8:	0002717b 	.word	0x0002717b
   26fac:	000270fb 	.word	0x000270fb
   26fb0:	00026e8f 	.word	0x00026e8f
   26fb4:	00027103 	.word	0x00027103
   26fb8:	0002710b 	.word	0x0002710b
   26fbc:	00026e8f 	.word	0x00026e8f
   26fc0:	00026e8f 	.word	0x00026e8f
   26fc4:	00027113 	.word	0x00027113
   26fc8:	0002711b 	.word	0x0002711b
	switch (err_code) {
   26fcc:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   26fd0:	2b18      	cmp	r3, #24
   26fd2:	f63f af5c 	bhi.w	26e8e <nrf_modem_os_errno_set+0xe>
   26fd6:	2b18      	cmp	r3, #24
   26fd8:	f63f af59 	bhi.w	26e8e <nrf_modem_os_errno_set+0xe>
   26fdc:	a201      	add	r2, pc, #4	; (adr r2, 26fe4 <nrf_modem_os_errno_set+0x164>)
   26fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   26fe2:	bf00      	nop
   26fe4:	00027123 	.word	0x00027123
   26fe8:	00026e8f 	.word	0x00026e8f
   26fec:	00026e8f 	.word	0x00026e8f
   26ff0:	00026e8f 	.word	0x00026e8f
   26ff4:	00026e8f 	.word	0x00026e8f
   26ff8:	00026e8f 	.word	0x00026e8f
   26ffc:	00026e8f 	.word	0x00026e8f
   27000:	0002712b 	.word	0x0002712b
   27004:	00026e8f 	.word	0x00026e8f
   27008:	0002713b 	.word	0x0002713b
   2700c:	00027133 	.word	0x00027133
   27010:	00026e8f 	.word	0x00026e8f
   27014:	00026e8f 	.word	0x00026e8f
   27018:	00026e8f 	.word	0x00026e8f
   2701c:	00026e8f 	.word	0x00026e8f
   27020:	00026e8f 	.word	0x00026e8f
   27024:	00026e8f 	.word	0x00026e8f
   27028:	00026e8f 	.word	0x00026e8f
   2702c:	00026e8f 	.word	0x00026e8f
   27030:	00026e8f 	.word	0x00026e8f
   27034:	00027143 	.word	0x00027143
   27038:	0002714b 	.word	0x0002714b
   2703c:	00027155 	.word	0x00027155
   27040:	0002715f 	.word	0x0002715f
   27044:	00027169 	.word	0x00027169
		errno = EPERM;
   27048:	f013 faad 	bl	3a5a6 <__errno>
   2704c:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   2704e:	6003      	str	r3, [r0, #0]
}
   27050:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   27052:	f013 faa8 	bl	3a5a6 <__errno>
   27056:	2302      	movs	r3, #2
   27058:	e7f9      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EIO;
   2705a:	f013 faa4 	bl	3a5a6 <__errno>
   2705e:	2305      	movs	r3, #5
   27060:	e7f5      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOEXEC;
   27062:	f013 faa0 	bl	3a5a6 <__errno>
   27066:	2308      	movs	r3, #8
   27068:	e7f1      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EBADF;
   2706a:	f013 fa9c 	bl	3a5a6 <__errno>
   2706e:	2309      	movs	r3, #9
   27070:	e7ed      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOMEM;
   27072:	f013 fa98 	bl	3a5a6 <__errno>
   27076:	230c      	movs	r3, #12
   27078:	e7e9      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EACCES;
   2707a:	f013 fa94 	bl	3a5a6 <__errno>
   2707e:	230d      	movs	r3, #13
   27080:	e7e5      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EFAULT;
   27082:	f013 fa90 	bl	3a5a6 <__errno>
   27086:	230e      	movs	r3, #14
   27088:	e7e1      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EINVAL;
   2708a:	f013 fa8c 	bl	3a5a6 <__errno>
   2708e:	2316      	movs	r3, #22
   27090:	e7dd      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EMFILE;
   27092:	f013 fa88 	bl	3a5a6 <__errno>
   27096:	2318      	movs	r3, #24
   27098:	e7d9      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EAGAIN;
   2709a:	f013 fa84 	bl	3a5a6 <__errno>
   2709e:	230b      	movs	r3, #11
   270a0:	e7d5      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EDOM;
   270a2:	f013 fa80 	bl	3a5a6 <__errno>
   270a6:	2321      	movs	r3, #33	; 0x21
   270a8:	e7d1      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EPROTOTYPE;
   270aa:	f013 fa7c 	bl	3a5a6 <__errno>
   270ae:	236b      	movs	r3, #107	; 0x6b
   270b0:	e7cd      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOPROTOOPT;
   270b2:	f013 fa78 	bl	3a5a6 <__errno>
   270b6:	236d      	movs	r3, #109	; 0x6d
   270b8:	e7c9      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EPROTONOSUPPORT;
   270ba:	f013 fa74 	bl	3a5a6 <__errno>
   270be:	237b      	movs	r3, #123	; 0x7b
   270c0:	e7c5      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ESOCKTNOSUPPORT;
   270c2:	f013 fa70 	bl	3a5a6 <__errno>
   270c6:	237c      	movs	r3, #124	; 0x7c
   270c8:	e7c1      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EOPNOTSUPP;
   270ca:	f013 fa6c 	bl	3a5a6 <__errno>
   270ce:	235f      	movs	r3, #95	; 0x5f
   270d0:	e7bd      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EAFNOSUPPORT;
   270d2:	f013 fa68 	bl	3a5a6 <__errno>
   270d6:	236a      	movs	r3, #106	; 0x6a
   270d8:	e7b9      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EADDRINUSE;
   270da:	f013 fa64 	bl	3a5a6 <__errno>
   270de:	2370      	movs	r3, #112	; 0x70
   270e0:	e7b5      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ENETDOWN;
   270e2:	f013 fa60 	bl	3a5a6 <__errno>
   270e6:	2373      	movs	r3, #115	; 0x73
   270e8:	e7b1      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ENETUNREACH;
   270ea:	f013 fa5c 	bl	3a5a6 <__errno>
   270ee:	2372      	movs	r3, #114	; 0x72
   270f0:	e7ad      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ENETRESET;
   270f2:	f013 fa58 	bl	3a5a6 <__errno>
   270f6:	237e      	movs	r3, #126	; 0x7e
   270f8:	e7a9      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNRESET;
   270fa:	f013 fa54 	bl	3a5a6 <__errno>
   270fe:	2368      	movs	r3, #104	; 0x68
   27100:	e7a5      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EISCONN;
   27102:	f013 fa50 	bl	3a5a6 <__errno>
   27106:	237f      	movs	r3, #127	; 0x7f
   27108:	e7a1      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOTCONN;
   2710a:	f013 fa4c 	bl	3a5a6 <__errno>
   2710e:	2380      	movs	r3, #128	; 0x80
   27110:	e79d      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ETIMEDOUT;
   27112:	f013 fa48 	bl	3a5a6 <__errno>
   27116:	2374      	movs	r3, #116	; 0x74
   27118:	e799      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNREFUSED;
   2711a:	f013 fa44 	bl	3a5a6 <__errno>
   2711e:	236f      	movs	r3, #111	; 0x6f
   27120:	e795      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOBUFS;
   27122:	f013 fa40 	bl	3a5a6 <__errno>
   27126:	2369      	movs	r3, #105	; 0x69
   27128:	e791      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EHOSTDOWN;
   2712a:	f013 fa3c 	bl	3a5a6 <__errno>
   2712e:	2375      	movs	r3, #117	; 0x75
   27130:	e78d      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EINPROGRESS;
   27132:	f013 fa38 	bl	3a5a6 <__errno>
   27136:	2377      	movs	r3, #119	; 0x77
   27138:	e789      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EALREADY;
   2713a:	f013 fa34 	bl	3a5a6 <__errno>
   2713e:	2378      	movs	r3, #120	; 0x78
   27140:	e785      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ECANCELED;
   27142:	f013 fa30 	bl	3a5a6 <__errno>
   27146:	238c      	movs	r3, #140	; 0x8c
   27148:	e781      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ENOKEY;
   2714a:	f013 fa2c 	bl	3a5a6 <__errno>
   2714e:	f240 73d1 	movw	r3, #2001	; 0x7d1
   27152:	e77c      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYEXPIRED;
   27154:	f013 fa27 	bl	3a5a6 <__errno>
   27158:	f240 73d2 	movw	r3, #2002	; 0x7d2
   2715c:	e777      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYREVOKED;
   2715e:	f013 fa22 	bl	3a5a6 <__errno>
   27162:	f240 73d3 	movw	r3, #2003	; 0x7d3
   27166:	e772      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EKEYREJECTED;
   27168:	f013 fa1d 	bl	3a5a6 <__errno>
   2716c:	f240 73d4 	movw	r3, #2004	; 0x7d4
   27170:	e76d      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = EMSGSIZE;
   27172:	f013 fa18 	bl	3a5a6 <__errno>
   27176:	237a      	movs	r3, #122	; 0x7a
   27178:	e769      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
		errno = ECONNABORTED;
   2717a:	f013 fa14 	bl	3a5a6 <__errno>
   2717e:	2371      	movs	r3, #113	; 0x71
   27180:	e765      	b.n	2704e <nrf_modem_os_errno_set+0x1ce>
   27182:	bf00      	nop
   27184:	00042163 	.word	0x00042163
   27188:	000451fc 	.word	0x000451fc
   2718c:	0004033e 	.word	0x0004033e
   27190:	00042194 	.word	0x00042194
   27194:	0003f5a4 	.word	0x0003f5a4
   27198:	0003f6ac 	.word	0x0003f6ac
   2719c:	000421c2 	.word	0x000421c2
   271a0:	baadbaad 	.word	0xbaadbaad

000271a4 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   271a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   271a8:	4b01      	ldr	r3, [pc, #4]	; (271b0 <nrf_modem_os_application_irq_set+0xc>)
   271aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   271ae:	4770      	bx	lr
   271b0:	e000e100 	.word	0xe000e100

000271b4 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   271b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   271b8:	4b01      	ldr	r3, [pc, #4]	; (271c0 <nrf_modem_os_application_irq_clear+0xc>)
   271ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   271be:	4770      	bx	lr
   271c0:	e000e100 	.word	0xe000e100

000271c4 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   271c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   271c8:	4b01      	ldr	r3, [pc, #4]	; (271d0 <nrf_modem_os_trace_irq_set+0xc>)
   271ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   271ce:	4770      	bx	lr
   271d0:	e000e100 	.word	0xe000e100

000271d4 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   271d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   271d8:	4b01      	ldr	r3, [pc, #4]	; (271e0 <nrf_modem_os_trace_irq_clear+0xc>)
   271da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   271de:	4770      	bx	lr
   271e0:	e000e100 	.word	0xe000e100

000271e4 <nrf_modem_os_alloc>:
	nrfx_uarte_init(&uarte_inst, &config, NULL);
#endif
}

void *nrf_modem_os_alloc(size_t bytes)
{
   271e4:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   271e6:	2200      	movs	r2, #0
   271e8:	2300      	movs	r3, #0
   271ea:	4801      	ldr	r0, [pc, #4]	; (271f0 <nrf_modem_os_alloc+0xc>)
   271ec:	f016 bd8f 	b.w	3dd0e <k_heap_alloc>
   271f0:	20014cfc 	.word	0x20014cfc

000271f4 <nrf_modem_os_free>:
#endif
	return addr;
}

void nrf_modem_os_free(void *mem)
{
   271f4:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   271f6:	4801      	ldr	r0, [pc, #4]	; (271fc <nrf_modem_os_free+0x8>)
   271f8:	f00c bb9c 	b.w	33934 <k_heap_free>
   271fc:	20014cfc 	.word	0x20014cfc

00027200 <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   27200:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   27202:	2200      	movs	r2, #0
   27204:	2300      	movs	r3, #0
   27206:	4801      	ldr	r0, [pc, #4]	; (2720c <nrf_modem_os_shm_tx_alloc+0xc>)
   27208:	f016 bd81 	b.w	3dd0e <k_heap_alloc>
   2720c:	200176f4 	.word	0x200176f4

00027210 <nrf_modem_os_shm_tx_free>:
#endif
	return addr;
}

void nrf_modem_os_shm_tx_free(void *mem)
{
   27210:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   27212:	4801      	ldr	r0, [pc, #4]	; (27218 <nrf_modem_os_shm_tx_free+0x8>)
   27214:	f00c bb8e 	b.w	33934 <k_heap_free>
   27218:	200176f4 	.word	0x200176f4

0002721c <nrf_modem_os_init>:
}
#endif

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   2721c:	b510      	push	{r4, lr}
	list->head = NULL;
   2721e:	2400      	movs	r4, #0
   27220:	4b0c      	ldr	r3, [pc, #48]	; (27254 <nrf_modem_os_init+0x38>)
	list->tail = NULL;
   27222:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27226:	4b0c      	ldr	r3, [pc, #48]	; (27258 <nrf_modem_os_init+0x3c>)
   27228:	e8d3 2fef 	ldaex	r2, [r3]
   2722c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   27230:	2900      	cmp	r1, #0
   27232:	d1f9      	bne.n	27228 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   27234:	f014 fc22 	bl	3ba7c <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
   27238:	f014 fc15 	bl	3ba66 <trace_task_create>

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   2723c:	4b07      	ldr	r3, [pc, #28]	; (2725c <nrf_modem_os_init+0x40>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   2723e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   27242:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   27244:	4b06      	ldr	r3, [pc, #24]	; (27260 <nrf_modem_os_init+0x44>)
	k_heap_init(&shmem_heap,
   27246:	4907      	ldr	r1, [pc, #28]	; (27264 <nrf_modem_os_init+0x48>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   27248:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   2724a:	4807      	ldr	r0, [pc, #28]	; (27268 <nrf_modem_os_init+0x4c>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   2724c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   27250:	f016 bd54 	b.w	3dcfc <k_heap_init>
   27254:	2001770c 	.word	0x2001770c
   27258:	200176ec 	.word	0x200176ec
   2725c:	200172e8 	.word	0x200172e8
   27260:	200176f0 	.word	0x200176f0
   27264:	200104e8 	.word	0x200104e8
   27268:	200176f4 	.word	0x200176f4

0002726c <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   2726c:	f240 2302 	movw	r3, #514	; 0x202
   27270:	4298      	cmp	r0, r3
   27272:	f000 80db 	beq.w	2742c <z_to_nrf_optname+0x1c0>
   27276:	dc07      	bgt.n	27288 <z_to_nrf_optname+0x1c>
   27278:	2801      	cmp	r0, #1
   2727a:	d05b      	beq.n	27334 <z_to_nrf_optname+0xc8>
   2727c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   27280:	d034      	beq.n	272ec <z_to_nrf_optname+0x80>
   27282:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   27286:	4770      	bx	lr
	switch (z_in_level) {
   27288:	f240 2303 	movw	r3, #515	; 0x203
   2728c:	4298      	cmp	r0, r3
   2728e:	d1f8      	bne.n	27282 <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   27290:	3901      	subs	r1, #1
   27292:	2913      	cmp	r1, #19
   27294:	d8f5      	bhi.n	27282 <z_to_nrf_optname+0x16>
   27296:	a301      	add	r3, pc, #4	; (adr r3, 2729c <z_to_nrf_optname+0x30>)
   27298:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2729c:	0002743b 	.word	0x0002743b
   272a0:	00027415 	.word	0x00027415
   272a4:	00027419 	.word	0x00027419
   272a8:	00027345 	.word	0x00027345
   272ac:	0002741d 	.word	0x0002741d
   272b0:	00027421 	.word	0x00027421
   272b4:	00027425 	.word	0x00027425
   272b8:	00027283 	.word	0x00027283
   272bc:	00027283 	.word	0x00027283
   272c0:	00027283 	.word	0x00027283
   272c4:	00027283 	.word	0x00027283
   272c8:	00027283 	.word	0x00027283
   272cc:	00027283 	.word	0x00027283
   272d0:	00027283 	.word	0x00027283
   272d4:	00027283 	.word	0x00027283
   272d8:	00027283 	.word	0x00027283
   272dc:	00027283 	.word	0x00027283
   272e0:	00027283 	.word	0x00027283
   272e4:	00027283 	.word	0x00027283
   272e8:	00027429 	.word	0x00027429
		switch (z_in_optname) {
   272ec:	3901      	subs	r1, #1
   272ee:	290b      	cmp	r1, #11
   272f0:	d8c7      	bhi.n	27282 <z_to_nrf_optname+0x16>
   272f2:	a301      	add	r3, pc, #4	; (adr r3, 272f8 <z_to_nrf_optname+0x8c>)
   272f4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   272f8:	00027415 	.word	0x00027415
   272fc:	0002741d 	.word	0x0002741d
   27300:	00027421 	.word	0x00027421
   27304:	00027425 	.word	0x00027425
   27308:	00027345 	.word	0x00027345
   2730c:	0002743b 	.word	0x0002743b
   27310:	00027283 	.word	0x00027283
   27314:	00027283 	.word	0x00027283
   27318:	00027283 	.word	0x00027283
   2731c:	00027419 	.word	0x00027419
   27320:	00027329 	.word	0x00027329
   27324:	00027331 	.word	0x00027331
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   27328:	2309      	movs	r3, #9
	int retval = 0;
   2732a:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   2732c:	6013      	str	r3, [r2, #0]
			break;
   2732e:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   27330:	2308      	movs	r3, #8
   27332:	e7fa      	b.n	2732a <z_to_nrf_optname+0xbe>
		switch (z_in_optname) {
   27334:	2937      	cmp	r1, #55	; 0x37
   27336:	dca4      	bgt.n	27282 <z_to_nrf_optname+0x16>
   27338:	2913      	cmp	r1, #19
   2733a:	dc05      	bgt.n	27348 <z_to_nrf_optname+0xdc>
   2733c:	2902      	cmp	r1, #2
   2733e:	d055      	beq.n	273ec <z_to_nrf_optname+0x180>
   27340:	2904      	cmp	r1, #4
   27342:	d19e      	bne.n	27282 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   27344:	2304      	movs	r3, #4
   27346:	e7f0      	b.n	2732a <z_to_nrf_optname+0xbe>
   27348:	3914      	subs	r1, #20
   2734a:	2923      	cmp	r1, #35	; 0x23
   2734c:	d899      	bhi.n	27282 <z_to_nrf_optname+0x16>
   2734e:	a301      	add	r3, pc, #4	; (adr r3, 27354 <z_to_nrf_optname+0xe8>)
   27350:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   27354:	00027429 	.word	0x00027429
   27358:	000273e5 	.word	0x000273e5
   2735c:	00027283 	.word	0x00027283
   27360:	00027283 	.word	0x00027283
   27364:	00027283 	.word	0x00027283
   27368:	000273e9 	.word	0x000273e9
   2736c:	00027283 	.word	0x00027283
   27370:	00027283 	.word	0x00027283
   27374:	00027283 	.word	0x00027283
   27378:	00027283 	.word	0x00027283
   2737c:	000273f1 	.word	0x000273f1
   27380:	000273f5 	.word	0x000273f5
   27384:	000273f9 	.word	0x000273f9
   27388:	00027283 	.word	0x00027283
   2738c:	00027283 	.word	0x00027283
   27390:	00027283 	.word	0x00027283
   27394:	00027283 	.word	0x00027283
   27398:	00027283 	.word	0x00027283
   2739c:	00027283 	.word	0x00027283
   273a0:	00027283 	.word	0x00027283
   273a4:	00027283 	.word	0x00027283
   273a8:	00027283 	.word	0x00027283
   273ac:	00027283 	.word	0x00027283
   273b0:	00027283 	.word	0x00027283
   273b4:	00027283 	.word	0x00027283
   273b8:	00027283 	.word	0x00027283
   273bc:	00027283 	.word	0x00027283
   273c0:	00027283 	.word	0x00027283
   273c4:	00027283 	.word	0x00027283
   273c8:	00027283 	.word	0x00027283
   273cc:	00027401 	.word	0x00027401
   273d0:	00027405 	.word	0x00027405
   273d4:	00027409 	.word	0x00027409
   273d8:	0002740d 	.word	0x0002740d
   273dc:	00027411 	.word	0x00027411
   273e0:	000273fd 	.word	0x000273fd
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   273e4:	2315      	movs	r3, #21
   273e6:	e7a0      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   273e8:	2319      	movs	r3, #25
   273ea:	e79e      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   273ec:	2328      	movs	r3, #40	; 0x28
   273ee:	e79c      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   273f0:	231e      	movs	r3, #30
   273f2:	e79a      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   273f4:	231f      	movs	r3, #31
   273f6:	e798      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   273f8:	2320      	movs	r3, #32
   273fa:	e796      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   273fc:	2337      	movs	r3, #55	; 0x37
   273fe:	e794      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   27400:	2332      	movs	r3, #50	; 0x32
   27402:	e792      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   27404:	2333      	movs	r3, #51	; 0x33
   27406:	e790      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   27408:	2334      	movs	r3, #52	; 0x34
   2740a:	e78e      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   2740c:	2335      	movs	r3, #53	; 0x35
   2740e:	e78c      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   27410:	2336      	movs	r3, #54	; 0x36
   27412:	e78a      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   27414:	2302      	movs	r3, #2
   27416:	e788      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   27418:	2303      	movs	r3, #3
   2741a:	e786      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   2741c:	2305      	movs	r3, #5
   2741e:	e784      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   27420:	2306      	movs	r3, #6
   27422:	e782      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   27424:	2307      	movs	r3, #7
   27426:	e780      	b.n	2732a <z_to_nrf_optname+0xbe>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   27428:	2314      	movs	r3, #20
   2742a:	e77e      	b.n	2732a <z_to_nrf_optname+0xbe>
		switch (z_in_optname) {
   2742c:	2902      	cmp	r1, #2
   2742e:	d0f1      	beq.n	27414 <z_to_nrf_optname+0x1a8>
   27430:	2903      	cmp	r1, #3
   27432:	d0f1      	beq.n	27418 <z_to_nrf_optname+0x1ac>
   27434:	2901      	cmp	r1, #1
   27436:	f47f af24 	bne.w	27282 <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_FW_VERSION;
   2743a:	2301      	movs	r3, #1
   2743c:	e775      	b.n	2732a <z_to_nrf_optname+0xbe>
   2743e:	bf00      	nop

00027440 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   27440:	f04f 32ff 	mov.w	r2, #4294967295
   27444:	4b05      	ldr	r3, [pc, #20]	; (2745c <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   27446:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   27448:	601a      	str	r2, [r3, #0]
   2744a:	609a      	str	r2, [r3, #8]
   2744c:	611a      	str	r2, [r3, #16]
   2744e:	619a      	str	r2, [r3, #24]
   27450:	621a      	str	r2, [r3, #32]
   27452:	629a      	str	r2, [r3, #40]	; 0x28
   27454:	631a      	str	r2, [r3, #48]	; 0x30
   27456:	639a      	str	r2, [r3, #56]	; 0x38
}
   27458:	4770      	bx	lr
   2745a:	bf00      	nop
   2745c:	2001776c 	.word	0x2001776c

00027460 <nrf91_socket_offload_ioctl>:
{
   27460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27464:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
   27468:	b091      	sub	sp, #68	; 0x44
   2746a:	2b03      	cmp	r3, #3
   2746c:	d878      	bhi.n	27560 <nrf91_socket_offload_ioctl+0x100>
   2746e:	e8df f003 	tbb	[pc, r3]
   27472:	0295      	.short	0x0295
   27474:	7308      	.short	0x7308
		return 0;
   27476:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   2747a:	4620      	mov	r0, r4
   2747c:	b011      	add	sp, #68	; 0x44
   2747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   27482:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   27486:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   2748a:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   2748c:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   27490:	4668      	mov	r0, sp
   27492:	2240      	movs	r2, #64	; 0x40
   27494:	f016 fd89 	bl	3dfaa <memset>
	for (int i = 0; i < nfds; i++) {
   27498:	466e      	mov	r6, sp
   2749a:	464d      	mov	r5, r9
   2749c:	464f      	mov	r7, r9
	int retval = 0;
   2749e:	4654      	mov	r4, sl
		tmp[i].events = 0;
   274a0:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   274a2:	4940      	ldr	r1, [pc, #256]	; (275a4 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   274a4:	45d0      	cmp	r8, sl
   274a6:	dc32      	bgt.n	2750e <nrf91_socket_offload_ioctl+0xae>
	if (retval > 0) {
   274a8:	2c00      	cmp	r4, #0
   274aa:	dce6      	bgt.n	2747a <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   274ac:	465a      	mov	r2, fp
   274ae:	4641      	mov	r1, r8
   274b0:	4668      	mov	r0, sp
   274b2:	f016 fbda 	bl	3dc6a <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   274b6:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   274b8:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   274ba:	4598      	cmp	r8, r3
   274bc:	dddd      	ble.n	2747a <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   274be:	f859 2033 	ldr.w	r2, [r9, r3, lsl #3]
   274c2:	2a00      	cmp	r2, #0
   274c4:	db20      	blt.n	27508 <nrf91_socket_offload_ioctl+0xa8>
		if (tmp[i].revents & NRF_POLLIN) {
   274c6:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   274ca:	88d2      	ldrh	r2, [r2, #6]
   274cc:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   274ce:	bf42      	ittt	mi
   274d0:	88e9      	ldrhmi	r1, [r5, #6]
   274d2:	f041 0101 	orrmi.w	r1, r1, #1
   274d6:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   274d8:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   274da:	bf42      	ittt	mi
   274dc:	88e9      	ldrhmi	r1, [r5, #6]
   274de:	f041 0104 	orrmi.w	r1, r1, #4
   274e2:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   274e4:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   274e6:	bf42      	ittt	mi
   274e8:	88e9      	ldrhmi	r1, [r5, #6]
   274ea:	f041 0108 	orrmi.w	r1, r1, #8
   274ee:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   274f0:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   274f2:	bf42      	ittt	mi
   274f4:	88e9      	ldrhmi	r1, [r5, #6]
   274f6:	f041 0120 	orrmi.w	r1, r1, #32
   274fa:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   274fc:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   274fe:	bf42      	ittt	mi
   27500:	88ea      	ldrhmi	r2, [r5, #6]
   27502:	f042 0210 	orrmi.w	r2, r2, #16
   27506:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   27508:	3301      	adds	r3, #1
   2750a:	3508      	adds	r5, #8
   2750c:	e7d5      	b.n	274ba <nrf91_socket_offload_ioctl+0x5a>
		if (fds[i].fd < 0) {
   2750e:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   27510:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   27512:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   27514:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   27516:	da05      	bge.n	27524 <nrf91_socket_offload_ioctl+0xc4>
			tmp[i].fd = fds[i].fd;
   27518:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   2751a:	f10a 0a01 	add.w	sl, sl, #1
   2751e:	3608      	adds	r6, #8
   27520:	3708      	adds	r7, #8
   27522:	e7bf      	b.n	274a4 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   27524:	2286      	movs	r2, #134	; 0x86
   27526:	f7f8 f863 	bl	1f5f0 <z_get_fd_obj>
			if (obj != NULL) {
   2752a:	2300      	movs	r3, #0
   2752c:	491d      	ldr	r1, [pc, #116]	; (275a4 <nrf91_socket_offload_ioctl+0x144>)
   2752e:	b178      	cbz	r0, 27550 <nrf91_socket_offload_ioctl+0xf0>
				tmp[i].fd = OBJ_TO_SD(obj);
   27530:	6802      	ldr	r2, [r0, #0]
   27532:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   27534:	88b8      	ldrh	r0, [r7, #4]
   27536:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   27538:	bf42      	ittt	mi
   2753a:	88b2      	ldrhmi	r2, [r6, #4]
   2753c:	f042 0201 	orrmi.w	r2, r2, #1
   27540:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   27542:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   27544:	bf42      	ittt	mi
   27546:	88b2      	ldrhmi	r2, [r6, #4]
   27548:	f042 0202 	orrmi.w	r2, r2, #2
   2754c:	80b2      	strhmi	r2, [r6, #4]
   2754e:	e7e4      	b.n	2751a <nrf91_socket_offload_ioctl+0xba>
				fds[i].revents = POLLNVAL;
   27550:	2220      	movs	r2, #32
				retval++;
   27552:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   27554:	80fa      	strh	r2, [r7, #6]
				retval++;
   27556:	e7ed      	b.n	27534 <nrf91_socket_offload_ioctl+0xd4>
		ctx->lock = va_arg(args, struct k_mutex *);
   27558:	6813      	ldr	r3, [r2, #0]
		return 0;
   2755a:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   2755c:	6043      	str	r3, [r0, #4]
		return 0;
   2755e:	e78c      	b.n	2747a <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   27560:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   27562:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   27564:	d00b      	beq.n	2757e <nrf91_socket_offload_ioctl+0x11e>
   27566:	2904      	cmp	r1, #4
   27568:	d111      	bne.n	2758e <nrf91_socket_offload_ioctl+0x12e>
		flags = va_arg(args, int);
   2756a:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   2756c:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   27570:	d10d      	bne.n	2758e <nrf91_socket_offload_ioctl+0x12e>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   27572:	2101      	movs	r1, #1
   27574:	1392      	asrs	r2, r2, #14
   27576:	f016 fb7a 	bl	3dc6e <nrf_fcntl>
   2757a:	4604      	mov	r4, r0
		break;
   2757c:	e77d      	b.n	2747a <nrf91_socket_offload_ioctl+0x1a>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   2757e:	2200      	movs	r2, #0
   27580:	2102      	movs	r1, #2
   27582:	f016 fb74 	bl	3dc6e <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   27586:	0380      	lsls	r0, r0, #14
   27588:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   2758c:	e775      	b.n	2747a <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   2758e:	f013 f80a 	bl	3a5a6 <__errno>
   27592:	2316      	movs	r3, #22
	return retval;
   27594:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   27598:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   2759a:	e76e      	b.n	2747a <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   2759c:	f06f 0411 	mvn.w	r4, #17
   275a0:	e76b      	b.n	2747a <nrf91_socket_offload_ioctl+0x1a>
   275a2:	bf00      	nop
   275a4:	0003fd80 	.word	0x0003fd80

000275a8 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   275a8:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   275aa:	4b03      	ldr	r3, [pc, #12]	; (275b8 <nrf91_socket_iface_init+0x10>)
   275ac:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   275ae:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   275b0:	4802      	ldr	r0, [pc, #8]	; (275bc <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   275b2:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   275b4:	f7fa b9f2 	b.w	2199c <socket_offload_dns_register>
   275b8:	20017768 	.word	0x20017768
   275bc:	0003fd78 	.word	0x0003fd78

000275c0 <nrf91_socket_offload_getaddrinfo>:
{
   275c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   275c4:	4614      	mov	r4, r2
   275c6:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   275c8:	2100      	movs	r1, #0
{
   275ca:	b093      	sub	sp, #76	; 0x4c
   275cc:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   275ce:	2220      	movs	r2, #32
   275d0:	a802      	add	r0, sp, #8
{
   275d2:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   275d4:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   275d6:	f016 fce8 	bl	3dfaa <memset>
	if (hints != NULL) {
   275da:	b194      	cbz	r4, 27602 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   275dc:	4620      	mov	r0, r4
   275de:	a902      	add	r1, sp, #8
   275e0:	f014 fb27 	bl	3bc32 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   275e4:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   275e8:	f000 80e0 	beq.w	277ac <nrf91_socket_offload_getaddrinfo+0x1ec>
		} else if (error == -EAFNOSUPPORT) {
   275ec:	306a      	adds	r0, #106	; 0x6a
   275ee:	f000 80e0 	beq.w	277b2 <nrf91_socket_offload_getaddrinfo+0x1f2>
		if (hints->ai_next != NULL) {
   275f2:	6820      	ldr	r0, [r4, #0]
   275f4:	b120      	cbz	r0, 27600 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   275f6:	ac0a      	add	r4, sp, #40	; 0x28
   275f8:	4621      	mov	r1, r4
   275fa:	f014 fb1a 	bl	3bc32 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   275fe:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   27600:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   27602:	f04f 32ff 	mov.w	r2, #4294967295
   27606:	f04f 33ff 	mov.w	r3, #4294967295
   2760a:	486b      	ldr	r0, [pc, #428]	; (277b8 <nrf91_socket_offload_getaddrinfo+0x1f8>)
   2760c:	f014 fbe3 	bl	3bdd6 <k_mutex_lock.constprop.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   27610:	4628      	mov	r0, r5
   27612:	4622      	mov	r2, r4
   27614:	4631      	mov	r1, r6
   27616:	ab01      	add	r3, sp, #4
   27618:	f016 fb23 	bl	3dc62 <nrf_getaddrinfo>
	if (retval != 0) {
   2761c:	4605      	mov	r5, r0
   2761e:	b318      	cbz	r0, 27668 <nrf91_socket_offload_getaddrinfo+0xa8>
	switch (nrf_error) {
   27620:	282f      	cmp	r0, #47	; 0x2f
   27622:	f000 80bd 	beq.w	277a0 <nrf91_socket_offload_getaddrinfo+0x1e0>
   27626:	dc0f      	bgt.n	27648 <nrf91_socket_offload_getaddrinfo+0x88>
   27628:	280c      	cmp	r0, #12
   2762a:	f000 80bc 	beq.w	277a6 <nrf91_socket_offload_getaddrinfo+0x1e6>
		return DNS_EAI_AGAIN;
   2762e:	2823      	cmp	r0, #35	; 0x23
   27630:	bf14      	ite	ne
   27632:	f06f 050a 	mvnne.w	r5, #10
   27636:	f06f 0502 	mvneq.w	r5, #2
	k_mutex_unlock(&getaddrinfo_lock);
   2763a:	485f      	ldr	r0, [pc, #380]	; (277b8 <nrf91_socket_offload_getaddrinfo+0x1f8>)
   2763c:	f014 fa89 	bl	3bb52 <k_mutex_unlock>
}
   27640:	4628      	mov	r0, r5
   27642:	b013      	add	sp, #76	; 0x4c
   27644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   27648:	2833      	cmp	r0, #51	; 0x33
   2764a:	d006      	beq.n	2765a <nrf91_socket_offload_getaddrinfo+0x9a>
		return DNS_EAI_INPROGRESS;
   2764c:	2873      	cmp	r0, #115	; 0x73
   2764e:	bf14      	ite	ne
   27650:	f06f 050a 	mvnne.w	r5, #10
   27654:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   27658:	e7ef      	b.n	2763a <nrf91_socket_offload_getaddrinfo+0x7a>
		errno = ENETUNREACH;
   2765a:	f012 ffa4 	bl	3a5a6 <__errno>
   2765e:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   27660:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   27664:	6003      	str	r3, [r0, #0]
   27666:	e7e8      	b.n	2763a <nrf91_socket_offload_getaddrinfo+0x7a>
	struct zsock_addrinfo *latest_z_res = NULL;
   27668:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   2766a:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2766c:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   2766e:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   27670:	b91e      	cbnz	r6, 2767a <nrf91_socket_offload_getaddrinfo+0xba>
	nrf_freeaddrinfo(nrf_res);
   27672:	9801      	ldr	r0, [sp, #4]
   27674:	f016 faf7 	bl	3dc66 <nrf_freeaddrinfo>
   27678:	e7df      	b.n	2763a <nrf91_socket_offload_getaddrinfo+0x7a>
					k_malloc(sizeof(struct zsock_addrinfo));
   2767a:	2050      	movs	r0, #80	; 0x50
   2767c:	f016 fc39 	bl	3def2 <k_malloc>
		if (next_z_res == NULL) {
   27680:	4604      	mov	r4, r0
   27682:	2800      	cmp	r0, #0
   27684:	f000 8081 	beq.w	2778a <nrf91_socket_offload_getaddrinfo+0x1ca>
	family = nrf_to_z_family(nrf_in->ai_family);
   27688:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2768a:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   2768c:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   2768e:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   27692:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   27696:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   2769a:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   2769c:	dc0b      	bgt.n	276b6 <nrf91_socket_offload_getaddrinfo+0xf6>
   2769e:	2900      	cmp	r1, #0
   276a0:	db0b      	blt.n	276ba <nrf91_socket_offload_getaddrinfo+0xfa>
   276a2:	290a      	cmp	r1, #10
   276a4:	d809      	bhi.n	276ba <nrf91_socket_offload_getaddrinfo+0xfa>
   276a6:	e8df f001 	tbb	[pc, r1]
   276aa:	262c      	.short	0x262c
   276ac:	0e08082a 	.word	0x0e08082a
   276b0:	08080808 	.word	0x08080808
   276b4:	28          	.byte	0x28
   276b5:	00          	.byte	0x00
   276b6:	2966      	cmp	r1, #102	; 0x66
   276b8:	d023      	beq.n	27702 <nrf91_socket_offload_getaddrinfo+0x142>
			k_free(next_z_res);
   276ba:	4620      	mov	r0, r4
   276bc:	f016 fc12 	bl	3dee4 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   276c0:	f06f 0508 	mvn.w	r5, #8
   276c4:	e063      	b.n	2778e <nrf91_socket_offload_getaddrinfo+0x1ce>
		return AF_PACKET;
   276c6:	2303      	movs	r3, #3
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   276c8:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   276ca:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   276cc:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   276d0:	d043      	beq.n	2775a <nrf91_socket_offload_getaddrinfo+0x19a>
   276d2:	dc1e      	bgt.n	27712 <nrf91_socket_offload_getaddrinfo+0x152>
   276d4:	2a02      	cmp	r2, #2
   276d6:	d044      	beq.n	27762 <nrf91_socket_offload_getaddrinfo+0x1a2>
   276d8:	dc15      	bgt.n	27706 <nrf91_socket_offload_getaddrinfo+0x146>
   276da:	b332      	cbz	r2, 2772a <nrf91_socket_offload_getaddrinfo+0x16a>
   276dc:	2a01      	cmp	r2, #1
   276de:	d042      	beq.n	27766 <nrf91_socket_offload_getaddrinfo+0x1a6>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   276e0:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   276e4:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   276e6:	2300      	movs	r3, #0
   276e8:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   276ea:	4620      	mov	r0, r4
   276ec:	f016 fbfa 	bl	3dee4 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   276f0:	f06f 0506 	mvn.w	r5, #6
   276f4:	e04b      	b.n	2778e <nrf91_socket_offload_getaddrinfo+0x1ce>
		return AF_LOCAL;
   276f6:	2306      	movs	r3, #6
   276f8:	e7e6      	b.n	276c8 <nrf91_socket_offload_getaddrinfo+0x108>
		return AF_INET6;
   276fa:	2302      	movs	r3, #2
   276fc:	e7e4      	b.n	276c8 <nrf91_socket_offload_getaddrinfo+0x108>
	switch (nrf_family) {
   276fe:	2301      	movs	r3, #1
   27700:	e7e2      	b.n	276c8 <nrf91_socket_offload_getaddrinfo+0x108>
		return AF_LTE;
   27702:	460b      	mov	r3, r1
   27704:	e7e0      	b.n	276c8 <nrf91_socket_offload_getaddrinfo+0x108>
	switch (proto) {
   27706:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   2770a:	d1e9      	bne.n	276e0 <nrf91_socket_offload_getaddrinfo+0x120>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2770c:	f44f 7381 	mov.w	r3, #258	; 0x102
   27710:	e025      	b.n	2775e <nrf91_socket_offload_getaddrinfo+0x19e>
	switch (proto) {
   27712:	f240 2302 	movw	r3, #514	; 0x202
   27716:	429a      	cmp	r2, r3
   27718:	d007      	beq.n	2772a <nrf91_socket_offload_getaddrinfo+0x16a>
   2771a:	f240 2303 	movw	r3, #515	; 0x203
   2771e:	429a      	cmp	r2, r3
   27720:	d003      	beq.n	2772a <nrf91_socket_offload_getaddrinfo+0x16a>
   27722:	f240 2301 	movw	r3, #513	; 0x201
   27726:	429a      	cmp	r2, r3
   27728:	d1da      	bne.n	276e0 <nrf91_socket_offload_getaddrinfo+0x120>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2772a:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   2772c:	2902      	cmp	r1, #2
   2772e:	d11c      	bne.n	2776a <nrf91_socket_offload_getaddrinfo+0x1aa>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   27730:	2008      	movs	r0, #8
   27732:	f016 fbde 	bl	3def2 <k_malloc>
   27736:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   27738:	b320      	cbz	r0, 27784 <nrf91_socket_offload_getaddrinfo+0x1c4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   2773a:	2308      	movs	r3, #8
   2773c:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   2773e:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   27740:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   27742:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   27744:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   27746:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   27748:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   2774a:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   2774c:	f1b8 0f00 	cmp.w	r8, #0
   27750:	d123      	bne.n	2779a <nrf91_socket_offload_getaddrinfo+0x1da>
			*res = next_z_res;
   27752:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   27754:	46a0      	mov	r8, r4
   27756:	69f6      	ldr	r6, [r6, #28]
   27758:	e78a      	b.n	27670 <nrf91_socket_offload_getaddrinfo+0xb0>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   2775a:	f240 1311 	movw	r3, #273	; 0x111
   2775e:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   27760:	e7e4      	b.n	2772c <nrf91_socket_offload_getaddrinfo+0x16c>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   27762:	2311      	movs	r3, #17
   27764:	e7fb      	b.n	2775e <nrf91_socket_offload_getaddrinfo+0x19e>
   27766:	2306      	movs	r3, #6
   27768:	e7f9      	b.n	2775e <nrf91_socket_offload_getaddrinfo+0x19e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   2776a:	290a      	cmp	r1, #10
   2776c:	d1bd      	bne.n	276ea <nrf91_socket_offload_getaddrinfo+0x12a>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2776e:	2018      	movs	r0, #24
   27770:	f016 fbbf 	bl	3def2 <k_malloc>
   27774:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   27776:	b128      	cbz	r0, 27784 <nrf91_socket_offload_getaddrinfo+0x1c4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   27778:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   2777a:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   2777c:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2777e:	f014 fa83 	bl	3bc88 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   27782:	e7e3      	b.n	2774c <nrf91_socket_offload_getaddrinfo+0x18c>
			k_free(next_z_res);
   27784:	4620      	mov	r0, r4
   27786:	f016 fbad 	bl	3dee4 <k_free>
			retval = DNS_EAI_MEMORY;
   2778a:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   2778e:	6838      	ldr	r0, [r7, #0]
   27790:	f014 fa42 	bl	3bc18 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   27794:	2300      	movs	r3, #0
   27796:	603b      	str	r3, [r7, #0]
   27798:	e76b      	b.n	27672 <nrf91_socket_offload_getaddrinfo+0xb2>
			latest_z_res->ai_next = next_z_res;
   2779a:	f8c8 4000 	str.w	r4, [r8]
   2779e:	e7d9      	b.n	27754 <nrf91_socket_offload_getaddrinfo+0x194>
		return DNS_EAI_NONAME;
   277a0:	f06f 0501 	mvn.w	r5, #1
   277a4:	e749      	b.n	2763a <nrf91_socket_offload_getaddrinfo+0x7a>
		return DNS_EAI_MEMORY;
   277a6:	f06f 0509 	mvn.w	r5, #9
   277aa:	e746      	b.n	2763a <nrf91_socket_offload_getaddrinfo+0x7a>
			return DNS_EAI_SOCKTYPE;
   277ac:	f06f 0506 	mvn.w	r5, #6
   277b0:	e746      	b.n	27640 <nrf91_socket_offload_getaddrinfo+0x80>
			return DNS_EAI_ADDRFAMILY;
   277b2:	f06f 0508 	mvn.w	r5, #8
   277b6:	e743      	b.n	27640 <nrf91_socket_offload_getaddrinfo+0x80>
   277b8:	20014d64 	.word	0x20014d64

000277bc <nrf91_socket_offload_sendmsg>:
{
   277bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   277c0:	4680      	mov	r8, r0
   277c2:	4691      	mov	r9, r2
	if (msg == NULL) {
   277c4:	460c      	mov	r4, r1
   277c6:	b1f9      	cbz	r1, 27808 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   277c8:	2300      	movs	r3, #0
	ssize_t len = 0;
   277ca:	461a      	mov	r2, r3
   277cc:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   277ce:	4298      	cmp	r0, r3
   277d0:	d124      	bne.n	2781c <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   277d2:	2a80      	cmp	r2, #128	; 0x80
   277d4:	d86d      	bhi.n	278b2 <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   277d6:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   277d8:	f04f 32ff 	mov.w	r2, #4294967295
   277dc:	f04f 33ff 	mov.w	r3, #4294967295
   277e0:	4836      	ldr	r0, [pc, #216]	; (278bc <nrf91_socket_offload_sendmsg+0x100>)
   277e2:	f014 faf8 	bl	3bdd6 <k_mutex_lock.constprop.0>
		len = 0;
   277e6:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   277e8:	4e35      	ldr	r6, [pc, #212]	; (278c0 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   277ea:	68e3      	ldr	r3, [r4, #12]
   277ec:	429d      	cmp	r5, r3
   277ee:	d31c      	bcc.n	2782a <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   277f0:	2600      	movs	r6, #0
		ret = 0;
   277f2:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   277f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 278c0 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   277f8:	42b7      	cmp	r7, r6
   277fa:	dd01      	ble.n	27800 <nrf91_socket_offload_sendmsg+0x44>
   277fc:	2d00      	cmp	r5, #0
   277fe:	da25      	bge.n	2784c <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   27800:	482e      	ldr	r0, [pc, #184]	; (278bc <nrf91_socket_offload_sendmsg+0x100>)
   27802:	f014 f9a6 	bl	3bb52 <k_mutex_unlock>
		return ret;
   27806:	e005      	b.n	27814 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   27808:	f012 fecd 	bl	3a5a6 <__errno>
   2780c:	2316      	movs	r3, #22
		return -1;
   2780e:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   27812:	6003      	str	r3, [r0, #0]
}
   27814:	4628      	mov	r0, r5
   27816:	b002      	add	sp, #8
   27818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   2781c:	68a1      	ldr	r1, [r4, #8]
   2781e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   27822:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   27824:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   27826:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   27828:	e7d1      	b.n	277ce <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   2782a:	68a1      	ldr	r1, [r4, #8]
   2782c:	19f0      	adds	r0, r6, r7
   2782e:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   27832:	685a      	ldr	r2, [r3, #4]
   27834:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   27838:	f016 fb97 	bl	3df6a <memcpy>
			len += msg->msg_iov[i].iov_len;
   2783c:	68a3      	ldr	r3, [r4, #8]
   2783e:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   27842:	4453      	add	r3, sl
   27844:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   27846:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   27848:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   2784a:	e7ce      	b.n	277ea <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   2784c:	6863      	ldr	r3, [r4, #4]
   2784e:	1bba      	subs	r2, r7, r6
   27850:	9301      	str	r3, [sp, #4]
   27852:	6823      	ldr	r3, [r4, #0]
   27854:	eb0a 0106 	add.w	r1, sl, r6
   27858:	9300      	str	r3, [sp, #0]
   2785a:	4640      	mov	r0, r8
   2785c:	464b      	mov	r3, r9
   2785e:	f014 fa40 	bl	3bce2 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   27862:	1e05      	subs	r5, r0, #0
				offset += ret;
   27864:	bfc8      	it	gt
   27866:	1976      	addgt	r6, r6, r5
   27868:	e7c6      	b.n	277f8 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   2786a:	68a3      	ldr	r3, [r4, #8]
   2786c:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   27870:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   27874:	685b      	ldr	r3, [r3, #4]
   27876:	b133      	cbz	r3, 27886 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   27878:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   2787a:	68a3      	ldr	r3, [r4, #8]
   2787c:	eb03 020a 	add.w	r2, r3, sl
   27880:	6852      	ldr	r2, [r2, #4]
   27882:	4297      	cmp	r7, r2
   27884:	d304      	bcc.n	27890 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   27886:	3601      	adds	r6, #1
   27888:	68e3      	ldr	r3, [r4, #12]
   2788a:	42b3      	cmp	r3, r6
   2788c:	d8ed      	bhi.n	2786a <nrf91_socket_offload_sendmsg+0xae>
   2788e:	e7c1      	b.n	27814 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   27890:	f853 100a 	ldr.w	r1, [r3, sl]
   27894:	6863      	ldr	r3, [r4, #4]
   27896:	4640      	mov	r0, r8
   27898:	9301      	str	r3, [sp, #4]
   2789a:	6823      	ldr	r3, [r4, #0]
   2789c:	1bd2      	subs	r2, r2, r7
   2789e:	9300      	str	r3, [sp, #0]
   278a0:	4439      	add	r1, r7
   278a2:	464b      	mov	r3, r9
   278a4:	f014 fa1d 	bl	3bce2 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   278a8:	1e03      	subs	r3, r0, #0
   278aa:	db05      	blt.n	278b8 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   278ac:	441f      	add	r7, r3
			len += ret;
   278ae:	441d      	add	r5, r3
   278b0:	e7e3      	b.n	2787a <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   278b2:	2600      	movs	r6, #0
	len = 0;
   278b4:	4635      	mov	r5, r6
   278b6:	e7e7      	b.n	27888 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   278b8:	461d      	mov	r5, r3
   278ba:	e7ab      	b.n	27814 <nrf91_socket_offload_sendmsg+0x58>
   278bc:	20014db4 	.word	0x20014db4
   278c0:	2001ca99 	.word	0x2001ca99

000278c4 <allocate_ctx>:
{
   278c4:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   278c6:	f04f 32ff 	mov.w	r2, #4294967295
   278ca:	f04f 33ff 	mov.w	r3, #4294967295
{
   278ce:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   278d0:	480b      	ldr	r0, [pc, #44]	; (27900 <allocate_ctx+0x3c>)
   278d2:	f014 fa80 	bl	3bdd6 <k_mutex_lock.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   278d6:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   278d8:	4a0a      	ldr	r2, [pc, #40]	; (27904 <allocate_ctx+0x40>)
   278da:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   278de:	3101      	adds	r1, #1
   278e0:	d108      	bne.n	278f4 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   278e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   278e6:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   278ea:	4805      	ldr	r0, [pc, #20]	; (27900 <allocate_ctx+0x3c>)
   278ec:	f014 f931 	bl	3bb52 <k_mutex_unlock>
}
   278f0:	4628      	mov	r0, r5
   278f2:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   278f4:	3301      	adds	r3, #1
   278f6:	2b08      	cmp	r3, #8
   278f8:	d1ef      	bne.n	278da <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   278fa:	2500      	movs	r5, #0
   278fc:	e7f5      	b.n	278ea <allocate_ctx+0x26>
   278fe:	bf00      	nop
   27900:	20014d28 	.word	0x20014d28
   27904:	2001776c 	.word	0x2001776c

00027908 <release_ctx>:
{
   27908:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   2790a:	4d09      	ldr	r5, [pc, #36]	; (27930 <release_ctx+0x28>)
{
   2790c:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   2790e:	f04f 32ff 	mov.w	r2, #4294967295
   27912:	f04f 33ff 	mov.w	r3, #4294967295
   27916:	4628      	mov	r0, r5
   27918:	f014 fa5d 	bl	3bdd6 <k_mutex_lock.constprop.0>
	ctx->lock = NULL;
   2791c:	2300      	movs	r3, #0
   2791e:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_unlock(&ctx_lock);
   27922:	4628      	mov	r0, r5
	ctx->lock = NULL;
   27924:	e9c4 2300 	strd	r2, r3, [r4]
}
   27928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&ctx_lock);
   2792c:	f014 b911 	b.w	3bb52 <k_mutex_unlock>
   27930:	20014d28 	.word	0x20014d28

00027934 <nrf91_socket_offload_accept>:
{
   27934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27938:	b08b      	sub	sp, #44	; 0x2c
   2793a:	4607      	mov	r7, r0
   2793c:	460c      	mov	r4, r1
   2793e:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   27940:	f7f7 fe88 	bl	1f654 <z_reserve_fd>
   27944:	4606      	mov	r6, r0
	if (fd < 0) {
   27946:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   27948:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   2794a:	da02      	bge.n	27952 <nrf91_socket_offload_accept+0x1e>
	return -1;
   2794c:	f04f 36ff 	mov.w	r6, #4294967295
   27950:	e03d      	b.n	279ce <nrf91_socket_offload_accept+0x9a>
	if ((addr != NULL) && (addrlen != NULL)) {
   27952:	b31c      	cbz	r4, 2799c <nrf91_socket_offload_accept+0x68>
   27954:	b32d      	cbz	r5, 279a2 <nrf91_socket_offload_accept+0x6e>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   27956:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   27958:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2795a:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   2795c:	bf0c      	ite	eq
   2795e:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   27960:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   27962:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   27964:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   27966:	4639      	mov	r1, r7
   27968:	f016 f921 	bl	3dbae <nrf_accept>
	if (new_sd < 0) {
   2796c:	f1b0 0900 	subs.w	r9, r0, #0
   27970:	dbec      	blt.n	2794c <nrf91_socket_offload_accept+0x18>
	ctx = allocate_ctx(new_sd);
   27972:	f7ff ffa7 	bl	278c4 <allocate_ctx>
	if (ctx == NULL) {
   27976:	4680      	mov	r8, r0
   27978:	b9b0      	cbnz	r0, 279a8 <nrf91_socket_offload_accept+0x74>
		errno = ENOMEM;
   2797a:	f012 fe14 	bl	3a5a6 <__errno>
   2797e:	230c      	movs	r3, #12
   27980:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   27982:	4648      	mov	r0, r9
   27984:	f016 f8ae 	bl	3dae4 <nrf_close>
	if (ctx != NULL) {
   27988:	f1b8 0f00 	cmp.w	r8, #0
   2798c:	d002      	beq.n	27994 <nrf91_socket_offload_accept+0x60>
		release_ctx(ctx);
   2798e:	4640      	mov	r0, r8
   27990:	f7ff ffba 	bl	27908 <release_ctx>
	z_free_fd(fd);
   27994:	4630      	mov	r0, r6
   27996:	f7f7 fead 	bl	1f6f4 <z_free_fd>
   2799a:	e7d7      	b.n	2794c <nrf91_socket_offload_accept+0x18>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   2799c:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   2799e:	4627      	mov	r7, r4
   279a0:	e7e1      	b.n	27966 <nrf91_socket_offload_accept+0x32>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   279a2:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   279a4:	462f      	mov	r7, r5
   279a6:	e7de      	b.n	27966 <nrf91_socket_offload_accept+0x32>
	if ((addr != NULL) && (addrlen != NULL)) {
   279a8:	b164      	cbz	r4, 279c4 <nrf91_socket_offload_accept+0x90>
   279aa:	b15d      	cbz	r5, 279c4 <nrf91_socket_offload_accept+0x90>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   279ac:	687b      	ldr	r3, [r7, #4]
   279ae:	2b02      	cmp	r3, #2
   279b0:	d111      	bne.n	279d6 <nrf91_socket_offload_accept+0xa2>
			*addrlen = sizeof(struct sockaddr_in);
   279b2:	2308      	movs	r3, #8
   279b4:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   279b6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   279ba:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   279bc:	2301      	movs	r3, #1
   279be:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   279c0:	9b04      	ldr	r3, [sp, #16]
   279c2:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   279c4:	4641      	mov	r1, r8
   279c6:	4630      	mov	r0, r6
   279c8:	4a07      	ldr	r2, [pc, #28]	; (279e8 <nrf91_socket_offload_accept+0xb4>)
   279ca:	f7f7 fe79 	bl	1f6c0 <z_finalize_fd>
}
   279ce:	4630      	mov	r0, r6
   279d0:	b00b      	add	sp, #44	; 0x2c
   279d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   279d6:	2b0a      	cmp	r3, #10
   279d8:	d1d3      	bne.n	27982 <nrf91_socket_offload_accept+0x4e>
			*addrlen = sizeof(struct sockaddr_in6);
   279da:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   279dc:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   279de:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   279e0:	a901      	add	r1, sp, #4
   279e2:	f014 f951 	bl	3bc88 <nrf_to_z_ipv6>
   279e6:	e7ed      	b.n	279c4 <nrf91_socket_offload_accept+0x90>
   279e8:	0003fd80 	.word	0x0003fd80

000279ec <nrf91_socket_create>:
{
   279ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   279ee:	4606      	mov	r6, r0
   279f0:	460d      	mov	r5, r1
   279f2:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   279f4:	f7f7 fe2e 	bl	1f654 <z_reserve_fd>
	if (fd < 0) {
   279f8:	1e04      	subs	r4, r0, #0
   279fa:	db0d      	blt.n	27a18 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   279fc:	b2b0      	uxth	r0, r6
   279fe:	f014 f85c 	bl	3baba <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   27a02:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   27a06:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   27a08:	d109      	bne.n	27a1e <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   27a0a:	f012 fdcc 	bl	3a5a6 <__errno>
   27a0e:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   27a10:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   27a12:	4620      	mov	r0, r4
   27a14:	f7f7 fe6e 	bl	1f6f4 <z_free_fd>
		return -1;
   27a18:	f04f 34ff 	mov.w	r4, #4294967295
   27a1c:	e026      	b.n	27a6c <nrf91_socket_create+0x80>
	switch (socktype) {
   27a1e:	2d03      	cmp	r5, #3
   27a20:	d003      	beq.n	27a2a <nrf91_socket_create+0x3e>
   27a22:	2d04      	cmp	r5, #4
   27a24:	bf08      	it	eq
   27a26:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   27a2a:	4638      	mov	r0, r7
   27a2c:	f014 f862 	bl	3baf4 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   27a30:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   27a34:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   27a36:	d103      	bne.n	27a40 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   27a38:	f012 fdb5 	bl	3a5a6 <__errno>
   27a3c:	237b      	movs	r3, #123	; 0x7b
   27a3e:	e7e7      	b.n	27a10 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   27a40:	4629      	mov	r1, r5
   27a42:	4630      	mov	r0, r6
   27a44:	f016 f83d 	bl	3dac2 <nrf_socket>
	if (sd < 0) {
   27a48:	1e05      	subs	r5, r0, #0
   27a4a:	dbe2      	blt.n	27a12 <nrf91_socket_create+0x26>
	ctx = allocate_ctx(sd);
   27a4c:	f7ff ff3a 	bl	278c4 <allocate_ctx>
	if (ctx == NULL) {
   27a50:	4601      	mov	r1, r0
   27a52:	b938      	cbnz	r0, 27a64 <nrf91_socket_create+0x78>
		errno = ENOMEM;
   27a54:	f012 fda7 	bl	3a5a6 <__errno>
   27a58:	230c      	movs	r3, #12
   27a5a:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   27a5c:	4628      	mov	r0, r5
   27a5e:	f016 f841 	bl	3dae4 <nrf_close>
   27a62:	e7d6      	b.n	27a12 <nrf91_socket_create+0x26>
	z_finalize_fd(fd, ctx,
   27a64:	4620      	mov	r0, r4
   27a66:	4a02      	ldr	r2, [pc, #8]	; (27a70 <nrf91_socket_create+0x84>)
   27a68:	f7f7 fe2a 	bl	1f6c0 <z_finalize_fd>
}
   27a6c:	4620      	mov	r0, r4
   27a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27a70:	0003fd80 	.word	0x0003fd80

00027a74 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   27a74:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   27a76:	f240 2201 	movw	r2, #513	; 0x201
   27a7a:	2102      	movs	r1, #2
   27a7c:	2066      	movs	r0, #102	; 0x66
   27a7e:	f7f9 fe1d 	bl	216bc <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   27a82:	4b05      	ldr	r3, [pc, #20]	; (27a98 <open_socket+0x24>)
   27a84:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   27a86:	3001      	adds	r0, #1
   27a88:	d104      	bne.n	27a94 <open_socket+0x20>
		return -errno;
   27a8a:	f012 fd8c 	bl	3a5a6 <__errno>
   27a8e:	6800      	ldr	r0, [r0, #0]
   27a90:	4240      	negs	r0, r0
	}

	return 0;
}
   27a92:	bd08      	pop	{r3, pc}
	return 0;
   27a94:	2000      	movs	r0, #0
   27a96:	e7fc      	b.n	27a92 <open_socket+0x1e>
   27a98:	200177ac 	.word	0x200177ac

00027a9c <complete_cmd>:
	return 0;
}

/* Clear the current command safely */
static void complete_cmd(void)
{
   27a9c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   27a9e:	4c08      	ldr	r4, [pc, #32]	; (27ac0 <complete_cmd+0x24>)
   27aa0:	f04f 32ff 	mov.w	r2, #4294967295
   27aa4:	f04f 33ff 	mov.w	r3, #4294967295
   27aa8:	4620      	mov	r0, r4
   27aaa:	f00c faa3 	bl	33ff4 <z_impl_k_mutex_lock>
	k_mutex_lock(&current_cmd_mutex, K_FOREVER);
	current_cmd.cmd = NULL;
   27aae:	2200      	movs	r2, #0
   27ab0:	4b04      	ldr	r3, [pc, #16]	; (27ac4 <complete_cmd+0x28>)
	k_mutex_unlock(&current_cmd_mutex);
   27ab2:	4620      	mov	r0, r4
}
   27ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	current_cmd.cmd = NULL;
   27ab8:	601a      	str	r2, [r3, #0]
	k_mutex_unlock(&current_cmd_mutex);
   27aba:	f014 ba4f 	b.w	3bf5c <k_mutex_unlock>
   27abe:	bf00      	nop
   27ac0:	20014d3c 	.word	0x20014d3c
   27ac4:	200177b0 	.word	0x200177b0

00027ac8 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   27ac8:	b530      	push	{r4, r5, lr}
   27aca:	b089      	sub	sp, #36	; 0x24
	k_mutex_lock(&at_cmd_init_mutex, K_FOREVER);
	static bool initialized;
	if (initialized) {
   27acc:	4d1e      	ldr	r5, [pc, #120]	; (27b48 <at_cmd_driver_init+0x80>)
   27ace:	f04f 33ff 	mov.w	r3, #4294967295
   27ad2:	f04f 32ff 	mov.w	r2, #4294967295
   27ad6:	481d      	ldr	r0, [pc, #116]	; (27b4c <at_cmd_driver_init+0x84>)
   27ad8:	f00c fa8c 	bl	33ff4 <z_impl_k_mutex_lock>
   27adc:	782b      	ldrb	r3, [r5, #0]
   27ade:	b133      	cbz	r3, 27aee <at_cmd_driver_init+0x26>
		k_mutex_unlock(&at_cmd_init_mutex);
   27ae0:	481a      	ldr	r0, [pc, #104]	; (27b4c <at_cmd_driver_init+0x84>)
   27ae2:	f014 fa3b 	bl	3bf5c <k_mutex_unlock>
		return 0;
   27ae6:	2400      	movs	r4, #0

	LOG_DBG("Common AT socket processing thread created");
	initialized = true;
	k_mutex_unlock(&at_cmd_init_mutex);
	return 0;
}
   27ae8:	4620      	mov	r0, r4
   27aea:	b009      	add	sp, #36	; 0x24
   27aec:	bd30      	pop	{r4, r5, pc}
	err = open_socket();
   27aee:	f7ff ffc1 	bl	27a74 <open_socket>
	if (err) {
   27af2:	4604      	mov	r4, r0
   27af4:	b170      	cbz	r0, 27b14 <at_cmd_driver_init+0x4c>
   27af6:	4816      	ldr	r0, [pc, #88]	; (27b50 <at_cmd_driver_init+0x88>)
   27af8:	4b16      	ldr	r3, [pc, #88]	; (27b54 <at_cmd_driver_init+0x8c>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   27afa:	4622      	mov	r2, r4
   27afc:	1ac0      	subs	r0, r0, r3
   27afe:	08c0      	lsrs	r0, r0, #3
   27b00:	0180      	lsls	r0, r0, #6
   27b02:	4915      	ldr	r1, [pc, #84]	; (27b58 <at_cmd_driver_init+0x90>)
   27b04:	f040 0001 	orr.w	r0, r0, #1
   27b08:	f011 fde1 	bl	396ce <log_string_sync>
	k_mutex_unlock(&at_cmd_init_mutex);
   27b0c:	480f      	ldr	r0, [pc, #60]	; (27b4c <at_cmd_driver_init+0x84>)
   27b0e:	f014 fa25 	bl	3bf5c <k_mutex_unlock>
	return 0;
   27b12:	e7e9      	b.n	27ae8 <at_cmd_driver_init+0x20>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   27b14:	2200      	movs	r2, #0
   27b16:	2300      	movs	r3, #0
   27b18:	e9cd 2306 	strd	r2, r3, [sp, #24]
   27b1c:	230a      	movs	r3, #10
   27b1e:	e9cd 0000 	strd	r0, r0, [sp]
   27b22:	e9cd 0302 	strd	r0, r3, [sp, #8]
   27b26:	9004      	str	r0, [sp, #16]
   27b28:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
   27b2c:	4b0b      	ldr	r3, [pc, #44]	; (27b5c <at_cmd_driver_init+0x94>)
   27b2e:	490c      	ldr	r1, [pc, #48]	; (27b60 <at_cmd_driver_init+0x98>)
   27b30:	480c      	ldr	r0, [pc, #48]	; (27b64 <at_cmd_driver_init+0x9c>)
   27b32:	f00b ffef 	bl	33b14 <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   27b36:	4b0c      	ldr	r3, [pc, #48]	; (27b68 <at_cmd_driver_init+0xa0>)
   27b38:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread, str);
   27b3a:	490c      	ldr	r1, [pc, #48]	; (27b6c <at_cmd_driver_init+0xa4>)
   27b3c:	f016 f8f7 	bl	3dd2e <z_impl_k_thread_name_set>
	initialized = true;
   27b40:	2301      	movs	r3, #1
   27b42:	702b      	strb	r3, [r5, #0]
   27b44:	e7e2      	b.n	27b0c <at_cmd_driver_init+0x44>
   27b46:	bf00      	nop
   27b48:	2001d5a5 	.word	0x2001d5a5
   27b4c:	20014d14 	.word	0x20014d14
   27b50:	0003f5bc 	.word	0x0003f5bc
   27b54:	0003f5a4 	.word	0x0003f5a4
   27b58:	0004221d 	.word	0x0004221d
   27b5c:	00027c6d 	.word	0x00027c6d
   27b60:	2001dce8 	.word	0x2001dce8
   27b64:	20015050 	.word	0x20015050
   27b68:	200177d4 	.word	0x200177d4
   27b6c:	0004223f 	.word	0x0004223f

00027b70 <load_cmd_and_write>:
{
   27b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27b74:	b087      	sub	sp, #28
		if (current_cmd.cmd != NULL ||
   27b76:	4f34      	ldr	r7, [pc, #208]	; (27c48 <load_cmd_and_write+0xd8>)
	return z_impl_k_mutex_lock(mutex, timeout);
   27b78:	f04f 33ff 	mov.w	r3, #4294967295
   27b7c:	46b8      	mov	r8, r7
   27b7e:	f04f 32ff 	mov.w	r2, #4294967295
   27b82:	4832      	ldr	r0, [pc, #200]	; (27c4c <load_cmd_and_write+0xdc>)
   27b84:	f00c fa36 	bl	33ff4 <z_impl_k_mutex_lock>
   27b88:	4d31      	ldr	r5, [pc, #196]	; (27c50 <load_cmd_and_write+0xe0>)
   27b8a:	4b32      	ldr	r3, [pc, #200]	; (27c54 <load_cmd_and_write+0xe4>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   27b8c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 27c68 <load_cmd_and_write+0xf8>
   27b90:	1aed      	subs	r5, r5, r3
   27b92:	08ed      	lsrs	r5, r5, #3
   27b94:	683b      	ldr	r3, [r7, #0]
   27b96:	2b00      	cmp	r3, #0
   27b98:	d14f      	bne.n	27c3a <load_cmd_and_write+0xca>
   27b9a:	2200      	movs	r2, #0
   27b9c:	2300      	movs	r3, #0
   27b9e:	4639      	mov	r1, r7
   27ba0:	4648      	mov	r0, r9
   27ba2:	f00c f979 	bl	33e98 <z_impl_k_msgq_get>
   27ba6:	4604      	mov	r4, r0
   27ba8:	2800      	cmp	r0, #0
   27baa:	d146      	bne.n	27c3a <load_cmd_and_write+0xca>
		ret = at_write(current_cmd.cmd);
   27bac:	6839      	ldr	r1, [r7, #0]
	int bytes_to_send = strlen(cmd);
   27bae:	4608      	mov	r0, r1
   27bb0:	9103      	str	r1, [sp, #12]
   27bb2:	f7f5 fb53 	bl	1d25c <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   27bb6:	4b28      	ldr	r3, [pc, #160]	; (27c58 <load_cmd_and_write+0xe8>)
	int bytes_to_send = strlen(cmd);
   27bb8:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   27bba:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   27bbc:	4632      	mov	r2, r6
   27bbe:	9903      	ldr	r1, [sp, #12]
   27bc0:	4623      	mov	r3, r4
   27bc2:	e9cd 4400 	strd	r4, r4, [sp]
   27bc6:	f012 f93c 	bl	39e42 <z_impl_zsock_sendto>
	if (bytes_sent == -1) {
   27bca:	1c41      	adds	r1, r0, #1
   27bcc:	4602      	mov	r2, r0
   27bce:	d129      	bne.n	27c24 <load_cmd_and_write+0xb4>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   27bd0:	f012 fce9 	bl	3a5a6 <__errno>
   27bd4:	01ac      	lsls	r4, r5, #6
   27bd6:	f044 0401 	orr.w	r4, r4, #1
   27bda:	6802      	ldr	r2, [r0, #0]
   27bdc:	491f      	ldr	r1, [pc, #124]	; (27c5c <load_cmd_and_write+0xec>)
   27bde:	4620      	mov	r0, r4
   27be0:	f011 fd75 	bl	396ce <log_string_sync>
		return -errno;
   27be4:	f012 fcdf 	bl	3a5a6 <__errno>
   27be8:	6804      	ldr	r4, [r0, #0]
   27bea:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   27bec:	f898 3010 	ldrb.w	r3, [r8, #16]
   27bf0:	07da      	lsls	r2, r3, #31
   27bf2:	d503      	bpl.n	27bfc <load_cmd_and_write+0x8c>
			k_free(current_cmd.cmd);
   27bf4:	f8d8 0000 	ldr.w	r0, [r8]
   27bf8:	f016 f974 	bl	3dee4 <k_free>
		if (ret != 0) {
   27bfc:	b1ec      	cbz	r4, 27c3a <load_cmd_and_write+0xca>
			resp.state = AT_CMD_ERROR_WRITE;
   27bfe:	2305      	movs	r3, #5
   27c00:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   27c04:	f898 3010 	ldrb.w	r3, [r8, #16]
			resp.code = ret;
   27c08:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   27c0a:	079b      	lsls	r3, r3, #30
   27c0c:	d507      	bpl.n	27c1e <load_cmd_and_write+0xae>
	return z_impl_k_msgq_put(msgq, data, timeout);
   27c0e:	f04f 32ff 	mov.w	r2, #4294967295
   27c12:	f04f 33ff 	mov.w	r3, #4294967295
   27c16:	4812      	ldr	r0, [pc, #72]	; (27c60 <load_cmd_and_write+0xf0>)
   27c18:	a904      	add	r1, sp, #16
   27c1a:	f00c f895 	bl	33d48 <z_impl_k_msgq_put>
			complete_cmd();
   27c1e:	f7ff ff3d 	bl	27a9c <complete_cmd>
	} while (ret != 0);
   27c22:	e7b7      	b.n	27b94 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   27c24:	4286      	cmp	r6, r0
   27c26:	d0e1      	beq.n	27bec <load_cmd_and_write+0x7c>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   27c28:	ea4f 1c85 	mov.w	ip, r5, lsl #6
   27c2c:	4633      	mov	r3, r6
   27c2e:	490d      	ldr	r1, [pc, #52]	; (27c64 <load_cmd_and_write+0xf4>)
   27c30:	f04c 0002 	orr.w	r0, ip, #2
   27c34:	f011 fd4b 	bl	396ce <log_string_sync>
   27c38:	e7d8      	b.n	27bec <load_cmd_and_write+0x7c>
	k_mutex_unlock(&current_cmd_mutex);
   27c3a:	4804      	ldr	r0, [pc, #16]	; (27c4c <load_cmd_and_write+0xdc>)
   27c3c:	f014 f98e 	bl	3bf5c <k_mutex_unlock>
}
   27c40:	b007      	add	sp, #28
   27c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27c46:	bf00      	nop
   27c48:	200177b0 	.word	0x200177b0
   27c4c:	20014d3c 	.word	0x20014d3c
   27c50:	0003f5bc 	.word	0x0003f5bc
   27c54:	0003f5a4 	.word	0x0003f5a4
   27c58:	200177ac 	.word	0x200177ac
   27c5c:	00042254 	.word	0x00042254
   27c60:	20014e24 	.word	0x20014e24
   27c64:	00042277 	.word	0x00042277
   27c68:	20014df0 	.word	0x20014df0

00027c6c <socket_thread_fn>:
{
   27c6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   27c70:	f8df 9260 	ldr.w	r9, [pc, #608]	; 27ed4 <socket_thread_fn+0x268>
   27c74:	4f83      	ldr	r7, [pc, #524]	; (27e84 <socket_thread_fn+0x218>)
   27c76:	46ca      	mov	sl, r9
   27c78:	4b83      	ldr	r3, [pc, #524]	; (27e88 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   27c7a:	4e84      	ldr	r6, [pc, #528]	; (27e8c <socket_thread_fn+0x220>)
   27c7c:	1aff      	subs	r7, r7, r3
   27c7e:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   27c80:	f7ff ff76 	bl	27b70 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   27c84:	f8d9 0000 	ldr.w	r0, [r9]
   27c88:	2500      	movs	r5, #0
   27c8a:	f640 228c 	movw	r2, #2700	; 0xa8c
   27c8e:	462b      	mov	r3, r5
   27c90:	e9cd 5500 	strd	r5, r5, [sp]
   27c94:	497d      	ldr	r1, [pc, #500]	; (27e8c <socket_thread_fn+0x220>)
   27c96:	f012 f92b 	bl	39ef0 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   27c9a:	4c7d      	ldr	r4, [pc, #500]	; (27e90 <socket_thread_fn+0x224>)
		if (bytes_read < 0) {
   27c9c:	f1b0 0800 	subs.w	r8, r0, #0
		ret.code  = 0;
   27ca0:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   27ca2:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   27ca4:	da6c      	bge.n	27d80 <socket_thread_fn+0x114>
			if (errno == EHOSTDOWN) {
   27ca6:	f012 fc7e 	bl	3a5a6 <__errno>
   27caa:	6803      	ldr	r3, [r0, #0]
   27cac:	2b75      	cmp	r3, #117	; 0x75
   27cae:	d122      	bne.n	27cf6 <socket_thread_fn+0x8a>
   27cb0:	2301      	movs	r3, #1
   27cb2:	4c78      	ldr	r4, [pc, #480]	; (27e94 <socket_thread_fn+0x228>)
   27cb4:	e8d4 2fef 	ldaex	r2, [r4]
   27cb8:	e8c4 3fe1 	stlex	r1, r3, [r4]
   27cbc:	2900      	cmp	r1, #0
   27cbe:	d1f9      	bne.n	27cb4 <socket_thread_fn+0x48>
				close(common_socket_fd);
   27cc0:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   27cc4:	f012 f872 	bl	39dac <z_impl_zsock_close>
				nrf_modem_lib_shutdown_wait();
   27cc8:	f7fe ff8a 	bl	26be0 <nrf_modem_lib_shutdown_wait>
   27ccc:	e8d4 3fef 	ldaex	r3, [r4]
   27cd0:	e8c4 5fe2 	stlex	r2, r5, [r4]
   27cd4:	2a00      	cmp	r2, #0
   27cd6:	d1f9      	bne.n	27ccc <socket_thread_fn+0x60>
				if (open_socket() != 0) {
   27cd8:	f7ff fecc 	bl	27a74 <open_socket>
   27cdc:	2800      	cmp	r0, #0
   27cde:	d0cf      	beq.n	27c80 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   27ce0:	f012 fc61 	bl	3a5a6 <__errno>
   27ce4:	01bc      	lsls	r4, r7, #6
   27ce6:	f044 0401 	orr.w	r4, r4, #1
   27cea:	6802      	ldr	r2, [r0, #0]
   27cec:	496a      	ldr	r1, [pc, #424]	; (27e98 <socket_thread_fn+0x22c>)
   27cee:	4620      	mov	r0, r4
   27cf0:	f011 fced 	bl	396ce <log_string_sync>
   27cf4:	e7c4      	b.n	27c80 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   27cf6:	f012 fc56 	bl	3a5a6 <__errno>
   27cfa:	01bd      	lsls	r5, r7, #6
   27cfc:	f045 0801 	orr.w	r8, r5, #1
   27d00:	6802      	ldr	r2, [r0, #0]
   27d02:	4966      	ldr	r1, [pc, #408]	; (27e9c <socket_thread_fn+0x230>)
   27d04:	4640      	mov	r0, r8
   27d06:	f011 fce2 	bl	396ce <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   27d0a:	f8d9 0000 	ldr.w	r0, [r9]
   27d0e:	f012 f84d 	bl	39dac <z_impl_zsock_close>
   27d12:	bb28      	cbnz	r0, 27d60 <socket_thread_fn+0xf4>
			    (open_socket() == 0)) {
   27d14:	f7ff feae 	bl	27a74 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   27d18:	bb10      	cbnz	r0, 27d60 <socket_thread_fn+0xf4>
				LOG_INF("AT socket recovered");
   27d1a:	4961      	ldr	r1, [pc, #388]	; (27ea0 <socket_thread_fn+0x234>)
   27d1c:	f045 0003 	orr.w	r0, r5, #3
   27d20:	f011 fcd5 	bl	396ce <log_string_sync>
				ret.state = AT_CMD_ERROR_READ;
   27d24:	2306      	movs	r3, #6
   27d26:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   27d28:	f012 fc3d 	bl	3a5a6 <__errno>
   27d2c:	6803      	ldr	r3, [r0, #0]
   27d2e:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   27d30:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   27d32:	4b5c      	ldr	r3, [pc, #368]	; (27ea4 <socket_thread_fn+0x238>)
   27d34:	681a      	ldr	r2, [r3, #0]
   27d36:	b16a      	cbz	r2, 27d54 <socket_thread_fn+0xe8>
   27d38:	7c1b      	ldrb	r3, [r3, #16]
   27d3a:	079b      	lsls	r3, r3, #30
   27d3c:	d50a      	bpl.n	27d54 <socket_thread_fn+0xe8>
		    current_cmd.flags & AT_CMD_SYNC &&
   27d3e:	7923      	ldrb	r3, [r4, #4]
   27d40:	2b07      	cmp	r3, #7
   27d42:	d09d      	beq.n	27c80 <socket_thread_fn+0x14>
   27d44:	f04f 32ff 	mov.w	r2, #4294967295
   27d48:	f04f 33ff 	mov.w	r3, #4294967295
   27d4c:	4950      	ldr	r1, [pc, #320]	; (27e90 <socket_thread_fn+0x224>)
   27d4e:	4856      	ldr	r0, [pc, #344]	; (27ea8 <socket_thread_fn+0x23c>)
   27d50:	f00b fffa 	bl	33d48 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   27d54:	7923      	ldrb	r3, [r4, #4]
   27d56:	2b07      	cmp	r3, #7
   27d58:	d092      	beq.n	27c80 <socket_thread_fn+0x14>
			complete_cmd();
   27d5a:	f7ff fe9f 	bl	27a9c <complete_cmd>
   27d5e:	e78f      	b.n	27c80 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   27d60:	f012 fc21 	bl	3a5a6 <__errno>
   27d64:	f045 0501 	orr.w	r5, r5, #1
   27d68:	6802      	ldr	r2, [r0, #0]
   27d6a:	4950      	ldr	r1, [pc, #320]	; (27eac <socket_thread_fn+0x240>)
   27d6c:	4628      	mov	r0, r5
   27d6e:	f011 fcae 	bl	396ce <log_string_sync>
			close(common_socket_fd);
   27d72:	f8da 0000 	ldr.w	r0, [sl]
}
   27d76:	b002      	add	sp, #8
   27d78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27d7c:	f012 b816 	b.w	39dac <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   27d80:	d10a      	bne.n	27d98 <socket_thread_fn+0x12c>
			LOG_ERR("AT message empty");
   27d82:	01b8      	lsls	r0, r7, #6
   27d84:	494a      	ldr	r1, [pc, #296]	; (27eb0 <socket_thread_fn+0x244>)
   27d86:	f040 0001 	orr.w	r0, r0, #1
   27d8a:	f011 fca0 	bl	396ce <log_string_sync>
			ret.state = AT_CMD_ERROR_READ;
   27d8e:	2306      	movs	r3, #6
   27d90:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   27d92:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   27d96:	e7cb      	b.n	27d30 <socket_thread_fn+0xc4>
		} else if (buf[bytes_read - 1] != '\0') {
   27d98:	eb06 0308 	add.w	r3, r6, r8
   27d9c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   27da0:	b153      	cbz	r3, 27db8 <socket_thread_fn+0x14c>
			LOG_ERR("AT message too large for reception buffer or "
   27da2:	01b8      	lsls	r0, r7, #6
   27da4:	4943      	ldr	r1, [pc, #268]	; (27eb4 <socket_thread_fn+0x248>)
   27da6:	f040 0001 	orr.w	r0, r0, #1
   27daa:	f011 fc90 	bl	396ce <log_string_sync>
			ret.state = AT_CMD_ERROR_READ;
   27dae:	2306      	movs	r3, #6
   27db0:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   27db2:	f06f 0368 	mvn.w	r3, #104	; 0x68
   27db6:	e7bb      	b.n	27d30 <socket_thread_fn+0xc4>
	ret->state = AT_CMD_NOTIFICATION;
   27db8:	2307      	movs	r3, #7
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   27dba:	483f      	ldr	r0, [pc, #252]	; (27eb8 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   27dbc:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   27dbe:	f7f5 fa4d 	bl	1d25c <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   27dc2:	f1a8 0505 	sub.w	r5, r8, #5
   27dc6:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   27dc8:	4602      	mov	r2, r0
   27dca:	493b      	ldr	r1, [pc, #236]	; (27eb8 <socket_thread_fn+0x24c>)
   27dcc:	4628      	mov	r0, r5
   27dce:	f016 fa87 	bl	3e2e0 <strncmp>
		if (match) {
   27dd2:	b9c0      	cbnz	r0, 27e06 <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   27dd4:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   27dd6:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   27dd8:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   27dda:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   27ddc:	3201      	adds	r2, #1
   27dde:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   27de0:	4d30      	ldr	r5, [pc, #192]	; (27ea4 <socket_thread_fn+0x238>)
   27de2:	682b      	ldr	r3, [r5, #0]
   27de4:	2b00      	cmp	r3, #0
   27de6:	d043      	beq.n	27e70 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   27de8:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   27dea:	2800      	cmp	r0, #0
   27dec:	d040      	beq.n	27e70 <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   27dee:	7923      	ldrb	r3, [r4, #4]
   27df0:	2b07      	cmp	r3, #7
   27df2:	d12e      	bne.n	27e52 <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   27df4:	4b31      	ldr	r3, [pc, #196]	; (27ebc <socket_thread_fn+0x250>)
   27df6:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   27df8:	b913      	cbnz	r3, 27e00 <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   27dfa:	68ab      	ldr	r3, [r5, #8]
   27dfc:	2b00      	cmp	r3, #0
   27dfe:	d098      	beq.n	27d32 <socket_thread_fn+0xc6>
			current_cmd.callback(buf);
   27e00:	4630      	mov	r0, r6
   27e02:	4798      	blx	r3
   27e04:	e795      	b.n	27d32 <socket_thread_fn+0xc6>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   27e06:	4630      	mov	r0, r6
   27e08:	492d      	ldr	r1, [pc, #180]	; (27ec0 <socket_thread_fn+0x254>)
   27e0a:	f016 fa9b 	bl	3e344 <strstr>
		if (tmpstr) {
   27e0e:	4605      	mov	r5, r0
   27e10:	b128      	cbz	r0, 27e1e <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   27e12:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   27e14:	482b      	ldr	r0, [pc, #172]	; (27ec4 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   27e16:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   27e18:	f016 f887 	bl	3df2a <atoi>
   27e1c:	e7db      	b.n	27dd6 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   27e1e:	4630      	mov	r0, r6
   27e20:	4929      	ldr	r1, [pc, #164]	; (27ec8 <socket_thread_fn+0x25c>)
   27e22:	f016 fa8f 	bl	3e344 <strstr>
		if (tmpstr) {
   27e26:	4605      	mov	r5, r0
   27e28:	b108      	cbz	r0, 27e2e <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   27e2a:	2303      	movs	r3, #3
   27e2c:	e7f2      	b.n	27e14 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   27e2e:	4827      	ldr	r0, [pc, #156]	; (27ecc <socket_thread_fn+0x260>)
   27e30:	f7f5 fa14 	bl	1d25c <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   27e34:	f1a8 0508 	sub.w	r5, r8, #8
   27e38:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   27e3a:	4602      	mov	r2, r0
   27e3c:	4923      	ldr	r1, [pc, #140]	; (27ecc <socket_thread_fn+0x260>)
   27e3e:	4628      	mov	r0, r5
   27e40:	f016 fa4e 	bl	3e2e0 <strncmp>
		if (match) {
   27e44:	b9c0      	cbnz	r0, 27e78 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   27e46:	2301      	movs	r3, #1
   27e48:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   27e4a:	f06f 0307 	mvn.w	r3, #7
   27e4e:	6023      	str	r3, [r4, #0]
			break;
   27e50:	e7c2      	b.n	27dd8 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   27e52:	68eb      	ldr	r3, [r5, #12]
   27e54:	429a      	cmp	r2, r3
   27e56:	d908      	bls.n	27e6a <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   27e58:	01b8      	lsls	r0, r7, #6
   27e5a:	491d      	ldr	r1, [pc, #116]	; (27ed0 <socket_thread_fn+0x264>)
   27e5c:	f040 0001 	orr.w	r0, r0, #1
   27e60:	f011 fc35 	bl	396ce <log_string_sync>
				ret.code  = -EMSGSIZE;
   27e64:	f06f 0379 	mvn.w	r3, #121	; 0x79
   27e68:	e762      	b.n	27d30 <socket_thread_fn+0xc4>
   27e6a:	4631      	mov	r1, r6
   27e6c:	f016 f87d 	bl	3df6a <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   27e70:	7923      	ldrb	r3, [r4, #4]
   27e72:	2b07      	cmp	r3, #7
   27e74:	d1c1      	bne.n	27dfa <socket_thread_fn+0x18e>
   27e76:	e7bd      	b.n	27df4 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   27e78:	4630      	mov	r0, r6
   27e7a:	f7f5 f9ef 	bl	1d25c <strlen>
   27e7e:	1c42      	adds	r2, r0, #1
   27e80:	e7ae      	b.n	27de0 <socket_thread_fn+0x174>
   27e82:	bf00      	nop
   27e84:	0003f5bc 	.word	0x0003f5bc
   27e88:	0003f5a4 	.word	0x0003f5a4
   27e8c:	2001cb19 	.word	0x2001cb19
   27e90:	200177c8 	.word	0x200177c8
   27e94:	200177d0 	.word	0x200177d0
   27e98:	000422a9 	.word	0x000422a9
   27e9c:	000422e4 	.word	0x000422e4
   27ea0:	00042306 	.word	0x00042306
   27ea4:	200177b0 	.word	0x200177b0
   27ea8:	20014e24 	.word	0x20014e24
   27eac:	0004231a 	.word	0x0004231a
   27eb0:	00042351 	.word	0x00042351
   27eb4:	00042362 	.word	0x00042362
   27eb8:	000423ad 	.word	0x000423ad
   27ebc:	200177c4 	.word	0x200177c4
   27ec0:	000423b2 	.word	0x000423b2
   27ec4:	2001cb24 	.word	0x2001cb24
   27ec8:	000423be 	.word	0x000423be
   27ecc:	000423ca 	.word	0x000423ca
   27ed0:	000423d2 	.word	0x000423d2
   27ed4:	200177ac 	.word	0x200177ac

00027ed8 <at_cmd_write>:
{
   27ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
   27eda:	4605      	mov	r5, r0
   27edc:	460f      	mov	r7, r1
   27ede:	4616      	mov	r6, r2
   27ee0:	461c      	mov	r4, r3
   27ee2:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27ee4:	4b3b      	ldr	r3, [pc, #236]	; (27fd4 <at_cmd_write+0xfc>)
   27ee6:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   27eea:	2b01      	cmp	r3, #1
   27eec:	d06f      	beq.n	27fce <at_cmd_write+0xf6>
	return z_impl_k_current_get();
   27eee:	f00d ff2b 	bl	35d48 <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   27ef2:	4b39      	ldr	r3, [pc, #228]	; (27fd8 <at_cmd_write+0x100>)
   27ef4:	681b      	ldr	r3, [r3, #0]
   27ef6:	4283      	cmp	r3, r0
   27ef8:	d10e      	bne.n	27f18 <at_cmd_write+0x40>
   27efa:	4938      	ldr	r1, [pc, #224]	; (27fdc <at_cmd_write+0x104>)
   27efc:	f240 1389 	movw	r3, #393	; 0x189
   27f00:	4a37      	ldr	r2, [pc, #220]	; (27fe0 <at_cmd_write+0x108>)
   27f02:	4838      	ldr	r0, [pc, #224]	; (27fe4 <at_cmd_write+0x10c>)
   27f04:	f011 f915 	bl	39132 <printk>
   27f08:	4837      	ldr	r0, [pc, #220]	; (27fe8 <at_cmd_write+0x110>)
   27f0a:	f011 f912 	bl	39132 <printk>
   27f0e:	f240 1189 	movw	r1, #393	; 0x189
   27f12:	4833      	ldr	r0, [pc, #204]	; (27fe0 <at_cmd_write+0x108>)
   27f14:	f011 fbac 	bl	39670 <assert_post_action>
	if (cmd == NULL) {
   27f18:	b155      	cbz	r5, 27f30 <at_cmd_write+0x58>
   27f1a:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   27f1c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   27f20:	b9c3      	cbnz	r3, 27f54 <at_cmd_write+0x7c>
   27f22:	4832      	ldr	r0, [pc, #200]	; (27fec <at_cmd_write+0x114>)
   27f24:	4b32      	ldr	r3, [pc, #200]	; (27ff0 <at_cmd_write+0x118>)
		LOG_ERR("Invalid command");
   27f26:	4933      	ldr	r1, [pc, #204]	; (27ff4 <at_cmd_write+0x11c>)
   27f28:	1ac0      	subs	r0, r0, r3
   27f2a:	08c0      	lsrs	r0, r0, #3
   27f2c:	0180      	lsls	r0, r0, #6
   27f2e:	e005      	b.n	27f3c <at_cmd_write+0x64>
   27f30:	482e      	ldr	r0, [pc, #184]	; (27fec <at_cmd_write+0x114>)
   27f32:	4b2f      	ldr	r3, [pc, #188]	; (27ff0 <at_cmd_write+0x118>)
		LOG_ERR("cmd is NULL");
   27f34:	4930      	ldr	r1, [pc, #192]	; (27ff8 <at_cmd_write+0x120>)
   27f36:	1ac0      	subs	r0, r0, r3
   27f38:	08c0      	lsrs	r0, r0, #3
   27f3a:	0180      	lsls	r0, r0, #6
   27f3c:	f040 0001 	orr.w	r0, r0, #1
   27f40:	f011 fbc5 	bl	396ce <log_string_sync>
		if (state) {
   27f44:	b91c      	cbnz	r4, 27f4e <at_cmd_write+0x76>
		return -EINVAL;
   27f46:	f06f 0015 	mvn.w	r0, #21
}
   27f4a:	b009      	add	sp, #36	; 0x24
   27f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   27f4e:	2304      	movs	r3, #4
   27f50:	7023      	strb	r3, [r4, #0]
   27f52:	e7f8      	b.n	27f46 <at_cmd_write+0x6e>
		if (*c > ' ') {
   27f54:	2b20      	cmp	r3, #32
   27f56:	d9e1      	bls.n	27f1c <at_cmd_write+0x44>
	command.callback = NULL;
   27f58:	2300      	movs	r3, #0
   27f5a:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   27f5c:	2302      	movs	r3, #2
	command.resp = buf;
   27f5e:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   27f62:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   27f64:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   27f68:	f04f 32ff 	mov.w	r2, #4294967295
   27f6c:	f04f 33ff 	mov.w	r3, #4294967295
   27f70:	4822      	ldr	r0, [pc, #136]	; (27ffc <at_cmd_write+0x124>)
   27f72:	f00c f83f 	bl	33ff4 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   27f76:	f04f 32ff 	mov.w	r2, #4294967295
   27f7a:	f04f 33ff 	mov.w	r3, #4294967295
   27f7e:	4820      	ldr	r0, [pc, #128]	; (28000 <at_cmd_write+0x128>)
   27f80:	a903      	add	r1, sp, #12
   27f82:	f00b fee1 	bl	33d48 <z_impl_k_msgq_put>
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   27f86:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   27f88:	b178      	cbz	r0, 27faa <at_cmd_write+0xd2>
   27f8a:	4a19      	ldr	r2, [pc, #100]	; (27ff0 <at_cmd_write+0x118>)
   27f8c:	4b17      	ldr	r3, [pc, #92]	; (27fec <at_cmd_write+0x114>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   27f8e:	491d      	ldr	r1, [pc, #116]	; (28004 <at_cmd_write+0x12c>)
   27f90:	1a9b      	subs	r3, r3, r2
   27f92:	08db      	lsrs	r3, r3, #3
   27f94:	019b      	lsls	r3, r3, #6
   27f96:	4602      	mov	r2, r0
   27f98:	f043 0001 	orr.w	r0, r3, #1
   27f9c:	f011 fb97 	bl	396ce <log_string_sync>
		if (state) {
   27fa0:	b10c      	cbz	r4, 27fa6 <at_cmd_write+0xce>
			*state = AT_CMD_ERROR_QUEUE;
   27fa2:	2304      	movs	r3, #4
		*state = ret.state;
   27fa4:	7023      	strb	r3, [r4, #0]
	return ret.code;
   27fa6:	9801      	ldr	r0, [sp, #4]
   27fa8:	e7cf      	b.n	27f4a <at_cmd_write+0x72>
	load_cmd_and_write();
   27faa:	f7ff fde1 	bl	27b70 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   27fae:	f04f 32ff 	mov.w	r2, #4294967295
   27fb2:	f04f 33ff 	mov.w	r3, #4294967295
   27fb6:	4814      	ldr	r0, [pc, #80]	; (28008 <at_cmd_write+0x130>)
   27fb8:	a901      	add	r1, sp, #4
   27fba:	f00b ff6d 	bl	33e98 <z_impl_k_msgq_get>
	k_mutex_unlock(&response_sync_get);
   27fbe:	480f      	ldr	r0, [pc, #60]	; (27ffc <at_cmd_write+0x124>)
   27fc0:	f013 ffcc 	bl	3bf5c <k_mutex_unlock>
	if (state) {
   27fc4:	2c00      	cmp	r4, #0
   27fc6:	d0ee      	beq.n	27fa6 <at_cmd_write+0xce>
		*state = ret.state;
   27fc8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   27fcc:	e7ea      	b.n	27fa4 <at_cmd_write+0xcc>
		return -EHOSTDOWN;
   27fce:	f06f 0074 	mvn.w	r0, #116	; 0x74
   27fd2:	e7ba      	b.n	27f4a <at_cmd_write+0x72>
   27fd4:	200177d0 	.word	0x200177d0
   27fd8:	200177d4 	.word	0x200177d4
   27fdc:	00042433 	.word	0x00042433
   27fe0:	0004240f 	.word	0x0004240f
   27fe4:	0004033e 	.word	0x0004033e
   27fe8:	00042451 	.word	0x00042451
   27fec:	0003f5bc 	.word	0x0003f5bc
   27ff0:	0003f5a4 	.word	0x0003f5a4
   27ff4:	000423ff 	.word	0x000423ff
   27ff8:	000423f3 	.word	0x000423f3
   27ffc:	20014da0 	.word	0x20014da0
   28000:	20014df0 	.word	0x20014df0
   28004:	00042481 	.word	0x00042481
   28008:	20014e24 	.word	0x20014e24

0002800c <at_cmd_set_notification_handler>:
{
   2800c:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   2800e:	4c09      	ldr	r4, [pc, #36]	; (28034 <at_cmd_set_notification_handler+0x28>)
{
   28010:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   28012:	6822      	ldr	r2, [r4, #0]
   28014:	b15a      	cbz	r2, 2802e <at_cmd_set_notification_handler+0x22>
   28016:	4282      	cmp	r2, r0
   28018:	d009      	beq.n	2802e <at_cmd_set_notification_handler+0x22>
   2801a:	4807      	ldr	r0, [pc, #28]	; (28038 <at_cmd_set_notification_handler+0x2c>)
   2801c:	4b07      	ldr	r3, [pc, #28]	; (2803c <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   2801e:	4908      	ldr	r1, [pc, #32]	; (28040 <at_cmd_set_notification_handler+0x34>)
   28020:	1a1b      	subs	r3, r3, r0
   28022:	08db      	lsrs	r3, r3, #3
   28024:	019b      	lsls	r3, r3, #6
   28026:	f043 0002 	orr.w	r0, r3, #2
   2802a:	f011 fb50 	bl	396ce <log_string_sync>
	notification_handler = handler;
   2802e:	6025      	str	r5, [r4, #0]
}
   28030:	bd38      	pop	{r3, r4, r5, pc}
   28032:	bf00      	nop
   28034:	200177c4 	.word	0x200177c4
   28038:	0003f5a4 	.word	0x0003f5a4
   2803c:	0003f5bc 	.word	0x0003f5bc
   28040:	000424a1 	.word	0x000424a1

00028044 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   28044:	4a0c      	ldr	r2, [pc, #48]	; (28078 <module_init+0x34>)
{
   28046:	b508      	push	{r3, lr}
	if (initialized) {
   28048:	7813      	ldrb	r3, [r2, #0]
   2804a:	b15b      	cbz	r3, 28064 <module_init+0x20>
   2804c:	480b      	ldr	r0, [pc, #44]	; (2807c <module_init+0x38>)
   2804e:	4b0c      	ldr	r3, [pc, #48]	; (28080 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   28050:	490c      	ldr	r1, [pc, #48]	; (28084 <module_init+0x40>)
   28052:	1ac0      	subs	r0, r0, r3
   28054:	08c0      	lsrs	r0, r0, #3
   28056:	0180      	lsls	r0, r0, #6
   28058:	f040 0002 	orr.w	r0, r0, #2
   2805c:	f011 fb37 	bl	396ce <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   28060:	2000      	movs	r0, #0
   28062:	bd08      	pop	{r3, pc}
	initialized = true;
   28064:	2101      	movs	r1, #1
   28066:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   28068:	4a07      	ldr	r2, [pc, #28]	; (28088 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   2806a:	4808      	ldr	r0, [pc, #32]	; (2808c <module_init+0x48>)
	list->tail = NULL;
   2806c:	e9c2 3300 	strd	r3, r3, [r2]
   28070:	f7ff ffcc 	bl	2800c <at_cmd_set_notification_handler>
	return 0;
   28074:	e7f4      	b.n	28060 <module_init+0x1c>
   28076:	bf00      	nop
   28078:	2001d5a6 	.word	0x2001d5a6
   2807c:	0003f5c4 	.word	0x0003f5c4
   28080:	0003f5a4 	.word	0x0003f5a4
   28084:	000424d1 	.word	0x000424d1
   28088:	200177d8 	.word	0x200177d8
   2808c:	0002809d 	.word	0x0002809d

00028090 <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
   28090:	4801      	ldr	r0, [pc, #4]	; (28098 <k_mutex_unlock.constprop.0+0x8>)
   28092:	f00c b8a9 	b.w	341e8 <z_impl_k_mutex_unlock>
   28096:	bf00      	nop
   28098:	20014d78 	.word	0x20014d78

0002809c <notif_dispatch>:
{
   2809c:	b538      	push	{r3, r4, r5, lr}
   2809e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   280a0:	f04f 33ff 	mov.w	r3, #4294967295
   280a4:	f04f 32ff 	mov.w	r2, #4294967295
   280a8:	480d      	ldr	r0, [pc, #52]	; (280e0 <notif_dispatch+0x44>)
   280aa:	f00b ffa3 	bl	33ff4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   280ae:	4b0d      	ldr	r3, [pc, #52]	; (280e4 <notif_dispatch+0x48>)
   280b0:	681b      	ldr	r3, [r3, #0]
   280b2:	b91b      	cbnz	r3, 280bc <notif_dispatch+0x20>
}
   280b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   280b8:	f7ff bfea 	b.w	28090 <k_mutex_unlock.constprop.0>
	return node->next;
   280bc:	681c      	ldr	r4, [r3, #0]
   280be:	2c00      	cmp	r4, #0
   280c0:	bf38      	it	cc
   280c2:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   280c4:	4629      	mov	r1, r5
   280c6:	689a      	ldr	r2, [r3, #8]
   280c8:	6858      	ldr	r0, [r3, #4]
   280ca:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   280cc:	2c00      	cmp	r4, #0
   280ce:	d0f1      	beq.n	280b4 <notif_dispatch+0x18>
   280d0:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   280d2:	4623      	mov	r3, r4
   280d4:	2a00      	cmp	r2, #0
   280d6:	bf38      	it	cc
   280d8:	2200      	movcc	r2, #0
   280da:	4614      	mov	r4, r2
   280dc:	e7f2      	b.n	280c4 <notif_dispatch+0x28>
   280de:	bf00      	nop
   280e0:	20014d78 	.word	0x20014d78
   280e4:	200177d8 	.word	0x200177d8

000280e8 <date_time_init>:
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   280e8:	b508      	push	{r3, lr}
	k_work_init_delayable(&time_work, date_time_handler);
   280ea:	4906      	ldr	r1, [pc, #24]	; (28104 <date_time_init+0x1c>)
   280ec:	4806      	ldr	r0, [pc, #24]	; (28108 <date_time_init+0x20>)
   280ee:	f00c fcbb 	bl	34a68 <k_work_init_delayable>
	k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   280f2:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   280f6:	2300      	movs	r3, #0
   280f8:	4803      	ldr	r0, [pc, #12]	; (28108 <date_time_init+0x20>)
   280fa:	f00c fd5d 	bl	34bb8 <k_work_schedule>

	return 0;
}
   280fe:	2000      	movs	r0, #0
   28100:	bd08      	pop	{r3, pc}
   28102:	bf00      	nop
   28104:	00028121 	.word	0x00028121
   28108:	20015200 	.word	0x20015200

0002810c <date_time_notify_event.constprop.0>:
	if (app_evt_handler != NULL) {
   2810c:	4b02      	ldr	r3, [pc, #8]	; (28118 <date_time_notify_event.constprop.0+0xc>)
   2810e:	681b      	ldr	r3, [r3, #0]
   28110:	b10b      	cbz	r3, 28116 <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   28112:	4802      	ldr	r0, [pc, #8]	; (2811c <date_time_notify_event.constprop.0+0x10>)
   28114:	4718      	bx	r3
}
   28116:	4770      	bx	lr
   28118:	200177e0 	.word	0x200177e0
   2811c:	2001d5a7 	.word	0x2001d5a7

00028120 <date_time_handler>:
{
   28120:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
   28122:	4805      	ldr	r0, [pc, #20]	; (28138 <date_time_handler+0x18>)
   28124:	f00c f928 	bl	34378 <z_impl_k_sem_give>
}
   28128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   2812c:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   28130:	2300      	movs	r3, #0
   28132:	4802      	ldr	r0, [pc, #8]	; (2813c <date_time_handler+0x1c>)
   28134:	f00c bd40 	b.w	34bb8 <k_work_schedule>
   28138:	20014e88 	.word	0x20014e88
   2813c:	20015200 	.word	0x20015200

00028140 <new_date_time_get>:
{
   28140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   28144:	4e85      	ldr	r6, [pc, #532]	; (2835c <new_date_time_get+0x21c>)
   28146:	4c86      	ldr	r4, [pc, #536]	; (28360 <new_date_time_get+0x220>)
   28148:	4637      	mov	r7, r6
   2814a:	4b86      	ldr	r3, [pc, #536]	; (28364 <new_date_time_get+0x224>)
{
   2814c:	b095      	sub	sp, #84	; 0x54
   2814e:	1ae4      	subs	r4, r4, r3
   28150:	08e4      	lsrs	r4, r4, #3
	return z_impl_k_sem_take(sem, timeout);
   28152:	f04f 33ff 	mov.w	r3, #4294967295
   28156:	f04f 32ff 	mov.w	r2, #4294967295
   2815a:	4883      	ldr	r0, [pc, #524]	; (28368 <new_date_time_get+0x228>)
   2815c:	f00c f950 	bl	34400 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   28160:	68b3      	ldr	r3, [r6, #8]
   28162:	2b00      	cmp	r3, #0
   28164:	f040 808d 	bne.w	28282 <new_date_time_get+0x142>
{
   28168:	f04f 0900 	mov.w	r9, #0
   2816c:	4d7f      	ldr	r5, [pc, #508]	; (2836c <new_date_time_get+0x22c>)
		hints.ai_family = AF_INET;
   2816e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 2839c <new_date_time_get+0x25c>
	err = sntp_query(&sntp_ctx, timeout, time);
   28172:	f8df b220 	ldr.w	fp, [pc, #544]	; 28394 <new_date_time_get+0x254>
	hints.ai_socktype = SOCK_DGRAM;
   28176:	2302      	movs	r3, #2
   28178:	2201      	movs	r2, #1
   2817a:	e9c8 2302 	strd	r2, r3, [r8, #8]
	hints.ai_protocol = 0;
   2817e:	2300      	movs	r3, #0
   28180:	f8c8 3010 	str.w	r3, [r8, #16]
	if (server->addrlen == 0) {
   28184:	69ab      	ldr	r3, [r5, #24]
   28186:	2b00      	cmp	r3, #0
   28188:	f040 80ac 	bne.w	282e4 <new_date_time_get+0x1a4>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   2818c:	4642      	mov	r2, r8
   2818e:	4978      	ldr	r1, [pc, #480]	; (28370 <new_date_time_get+0x230>)
   28190:	f855 0c04 	ldr.w	r0, [r5, #-4]
   28194:	ab02      	add	r3, sp, #8
   28196:	f011 fdf2 	bl	39d7e <zsock_getaddrinfo>
		if (err) {
   2819a:	4602      	mov	r2, r0
   2819c:	2800      	cmp	r0, #0
   2819e:	f000 8085 	beq.w	282ac <new_date_time_get+0x16c>
			LOG_WRN("getaddrinfo, error: %d", err);
   281a2:	01a0      	lsls	r0, r4, #6
   281a4:	4973      	ldr	r1, [pc, #460]	; (28374 <new_date_time_get+0x234>)
   281a6:	f040 0002 	orr.w	r0, r0, #2
   281aa:	f011 fa90 	bl	396ce <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   281ae:	f109 0901 	add.w	r9, r9, #1
   281b2:	f1b9 0f05 	cmp.w	r9, #5
   281b6:	f105 0520 	add.w	r5, r5, #32
   281ba:	d1dc      	bne.n	28176 <new_date_time_get+0x36>
	LOG_WRN("Not getting time from any NTP server");
   281bc:	01a0      	lsls	r0, r4, #6
   281be:	496e      	ldr	r1, [pc, #440]	; (28378 <new_date_time_get+0x238>)
   281c0:	f040 0002 	orr.w	r0, r0, #2
   281c4:	f011 fa83 	bl	396ce <log_string_sync>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   281c8:	2300      	movs	r3, #0
   281ca:	2221      	movs	r2, #33	; 0x21
   281cc:	486b      	ldr	r0, [pc, #428]	; (2837c <new_date_time_get+0x23c>)
   281ce:	a902      	add	r1, sp, #8
   281d0:	f7ff fe82 	bl	27ed8 <at_cmd_write>
	if (err) {
   281d4:	2800      	cmp	r0, #0
   281d6:	f040 80bd 	bne.w	28354 <new_date_time_get+0x214>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   281da:	2520      	movs	r5, #32
   281dc:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   281e0:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   281e4:	4628      	mov	r0, r5
   281e6:	aa02      	add	r2, sp, #8
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   281e8:	f812 3b01 	ldrb.w	r3, [r2], #1
   281ec:	3b2c      	subs	r3, #44	; 0x2c
   281ee:	b2db      	uxtb	r3, r3
   281f0:	2b0e      	cmp	r3, #14
   281f2:	d805      	bhi.n	28200 <new_date_time_get+0xc0>
   281f4:	fa21 f303 	lsr.w	r3, r1, r3
   281f8:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   281fa:	bf48      	it	mi
   281fc:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   28200:	3d01      	subs	r5, #1
   28202:	d1f1      	bne.n	281e8 <new_date_time_get+0xa8>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   28204:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   28206:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   28208:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   2820a:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2820c:	f00f fd0a 	bl	37c24 <strtol>
   28210:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   28212:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   28214:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   28216:	a901      	add	r1, sp, #4
   28218:	9801      	ldr	r0, [sp, #4]
   2821a:	f00f fd03 	bl	37c24 <strtol>
   2821e:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   28220:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   28222:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   28224:	a901      	add	r1, sp, #4
   28226:	9801      	ldr	r0, [sp, #4]
   28228:	f00f fcfc 	bl	37c24 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2822c:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2822e:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   28230:	a901      	add	r1, sp, #4
   28232:	9801      	ldr	r0, [sp, #4]
   28234:	f00f fcf6 	bl	37c24 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   28238:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2823a:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2823c:	a901      	add	r1, sp, #4
   2823e:	9801      	ldr	r0, [sp, #4]
   28240:	f00f fcf0 	bl	37c24 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   28244:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   28246:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   28248:	a901      	add	r1, sp, #4
   2824a:	9801      	ldr	r0, [sp, #4]
   2824c:	f00f fcea 	bl	37c24 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   28250:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   28252:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   28254:	2b73      	cmp	r3, #115	; 0x73
   28256:	d07d      	beq.n	28354 <new_date_time_get+0x214>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   28258:	a80b      	add	r0, sp, #44	; 0x2c
   2825a:	f7f7 fd85 	bl	1fd68 <timeutil_timegm64>
   2825e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   28262:	460a      	mov	r2, r1
   28264:	fba0 0103 	umull	r0, r1, r0, r3
   28268:	fb03 1102 	mla	r1, r3, r2, r1
   2826c:	e9c7 0100 	strd	r0, r1, [r7]
	time_aux.last_date_time_update = k_uptime_get();
   28270:	f013 fe76 	bl	3bf60 <k_uptime_get>
			initial_valid_time = true;
   28274:	2201      	movs	r2, #1
   28276:	4b42      	ldr	r3, [pc, #264]	; (28380 <new_date_time_get+0x240>)
	time_aux.last_date_time_update = k_uptime_get();
   28278:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   2827a:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   2827c:	4b41      	ldr	r3, [pc, #260]	; (28384 <new_date_time_get+0x244>)
   2827e:	701d      	strb	r5, [r3, #0]
			date_time_notify_event(&evt);
   28280:	e058      	b.n	28334 <new_date_time_get+0x1f4>
	if (time_aux.last_date_time_update == 0 ||
   28282:	e9d6 2300 	ldrd	r2, r3, [r6]
   28286:	4313      	orrs	r3, r2
   28288:	f43f af6e 	beq.w	28168 <new_date_time_get+0x28>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   2828c:	f013 fe68 	bl	3bf60 <k_uptime_get>
   28290:	68b3      	ldr	r3, [r6, #8]
   28292:	4a3d      	ldr	r2, [pc, #244]	; (28388 <new_date_time_get+0x248>)
   28294:	1ac0      	subs	r0, r0, r3
   28296:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   2829a:	2300      	movs	r3, #0
   2829c:	4282      	cmp	r2, r0
   2829e:	418b      	sbcs	r3, r1
   282a0:	f6ff af62 	blt.w	28168 <new_date_time_get+0x28>
			initial_valid_time = true;
   282a4:	2201      	movs	r2, #1
   282a6:	4b36      	ldr	r3, [pc, #216]	; (28380 <new_date_time_get+0x240>)
		evt.type = DATE_TIME_NOT_OBTAINED;
   282a8:	701a      	strb	r2, [r3, #0]
   282aa:	e043      	b.n	28334 <new_date_time_get+0x1f4>
		if (addrinfo->ai_addrlen > sizeof(server->addr)) {
   282ac:	f8dd a008 	ldr.w	sl, [sp, #8]
   282b0:	f8da 2014 	ldr.w	r2, [sl, #20]
   282b4:	2a18      	cmp	r2, #24
   282b6:	d90a      	bls.n	282ce <new_date_time_get+0x18e>
			LOG_WRN("getaddrinfo, addrlen: %d > %d",
   282b8:	01a0      	lsls	r0, r4, #6
   282ba:	2318      	movs	r3, #24
   282bc:	4933      	ldr	r1, [pc, #204]	; (2838c <new_date_time_get+0x24c>)
   282be:	f040 0002 	orr.w	r0, r0, #2
   282c2:	f011 fa04 	bl	396ce <log_string_sync>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   282c6:	9802      	ldr	r0, [sp, #8]
   282c8:	f011 fd5b 	bl	39d82 <zsock_freeaddrinfo>
		if (err) {
   282cc:	e76f      	b.n	281ae <new_date_time_get+0x6e>
   282ce:	4628      	mov	r0, r5
   282d0:	f8da 1018 	ldr.w	r1, [sl, #24]
   282d4:	f015 fe49 	bl	3df6a <memcpy>
		server->addrlen = addrinfo->ai_addrlen;
   282d8:	f8da 2014 	ldr.w	r2, [sl, #20]
   282dc:	4650      	mov	r0, sl
   282de:	61aa      	str	r2, [r5, #24]
   282e0:	f011 fd4f 	bl	39d82 <zsock_freeaddrinfo>
	err = sntp_init(&sntp_ctx, &server->addr, server->addrlen);
   282e4:	4629      	mov	r1, r5
   282e6:	69aa      	ldr	r2, [r5, #24]
   282e8:	a80b      	add	r0, sp, #44	; 0x2c
   282ea:	f011 fd14 	bl	39d16 <sntp_init>
	if (err) {
   282ee:	4682      	mov	sl, r0
   282f0:	b318      	cbz	r0, 2833a <new_date_time_get+0x1fa>
		LOG_WRN("sntp_init, error: %d", err);
   282f2:	4652      	mov	r2, sl
   282f4:	4926      	ldr	r1, [pc, #152]	; (28390 <new_date_time_get+0x250>)
   282f6:	01a0      	lsls	r0, r4, #6
		LOG_WRN("sntp_query, error: %d", err);
   282f8:	f040 0002 	orr.w	r0, r0, #2
   282fc:	f011 f9e7 	bl	396ce <log_string_sync>
	sntp_close(&sntp_ctx);
   28300:	a80b      	add	r0, sp, #44	; 0x2c
   28302:	f011 fd37 	bl	39d74 <sntp_close>
		if (err) {
   28306:	f1ba 0f00 	cmp.w	sl, #0
   2830a:	f47f af50 	bne.w	281ae <new_date_time_get+0x6e>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   2830e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   28312:	4b20      	ldr	r3, [pc, #128]	; (28394 <new_date_time_get+0x254>)
   28314:	681a      	ldr	r2, [r3, #0]
   28316:	6858      	ldr	r0, [r3, #4]
   28318:	fba2 2301 	umull	r2, r3, r2, r1
   2831c:	fb01 3300 	mla	r3, r1, r0, r3
   28320:	e9c7 2300 	strd	r2, r3, [r7]
		time_aux.last_date_time_update = k_uptime_get();
   28324:	f013 fe1c 	bl	3bf60 <k_uptime_get>
			initial_valid_time = true;
   28328:	2301      	movs	r3, #1
   2832a:	4a15      	ldr	r2, [pc, #84]	; (28380 <new_date_time_get+0x240>)
		time_aux.last_date_time_update = k_uptime_get();
   2832c:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   2832e:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   28330:	4a14      	ldr	r2, [pc, #80]	; (28384 <new_date_time_get+0x244>)
   28332:	7013      	strb	r3, [r2, #0]
		date_time_notify_event(&evt);
   28334:	f7ff feea 	bl	2810c <date_time_notify_event.constprop.0>
   28338:	e70b      	b.n	28152 <new_date_time_get+0x12>
	err = sntp_query(&sntp_ctx, timeout, time);
   2833a:	465a      	mov	r2, fp
   2833c:	f241 3188 	movw	r1, #5000	; 0x1388
   28340:	a80b      	add	r0, sp, #44	; 0x2c
   28342:	f7f4 ff95 	bl	1d270 <sntp_query>
	if (err) {
   28346:	4682      	mov	sl, r0
   28348:	2800      	cmp	r0, #0
   2834a:	d0d9      	beq.n	28300 <new_date_time_get+0x1c0>
		LOG_WRN("sntp_query, error: %d", err);
   2834c:	4652      	mov	r2, sl
   2834e:	4912      	ldr	r1, [pc, #72]	; (28398 <new_date_time_get+0x258>)
   28350:	01a0      	lsls	r0, r4, #6
   28352:	e7d1      	b.n	282f8 <new_date_time_get+0x1b8>
		evt.type = DATE_TIME_NOT_OBTAINED;
   28354:	2203      	movs	r2, #3
   28356:	4b0b      	ldr	r3, [pc, #44]	; (28384 <new_date_time_get+0x244>)
   28358:	e7a6      	b.n	282a8 <new_date_time_get+0x168>
   2835a:	bf00      	nop
   2835c:	200151f0 	.word	0x200151f0
   28360:	0003f5e4 	.word	0x0003f5e4
   28364:	0003f5a4 	.word	0x0003f5a4
   28368:	20014e88 	.word	0x20014e88
   2836c:	20014778 	.word	0x20014778
   28370:	00042709 	.word	0x00042709
   28374:	0004270d 	.word	0x0004270d
   28378:	0004276d 	.word	0x0004276d
   2837c:	00042596 	.word	0x00042596
   28380:	2001d5a8 	.word	0x2001d5a8
   28384:	2001d5a7 	.word	0x2001d5a7
   28388:	0036ee80 	.word	0x0036ee80
   2838c:	00042724 	.word	0x00042724
   28390:	00042742 	.word	0x00042742
   28394:	200151e0 	.word	0x200151e0
   28398:	00042757 	.word	0x00042757
   2839c:	200177e4 	.word	0x200177e4

000283a0 <api_uninit>:

	return nrf_cloud_init(&params);
}

static int api_uninit(const struct cloud_backend *const backend)
{
   283a0:	b508      	push	{r3, lr}
   283a2:	4806      	ldr	r0, [pc, #24]	; (283bc <api_uninit+0x1c>)
   283a4:	4b06      	ldr	r3, [pc, #24]	; (283c0 <api_uninit+0x20>)
	LOG_INF("uninit() is not implemented");
   283a6:	4907      	ldr	r1, [pc, #28]	; (283c4 <api_uninit+0x24>)
   283a8:	1ac0      	subs	r0, r0, r3
   283aa:	08c0      	lsrs	r0, r0, #3
   283ac:	0180      	lsls	r0, r0, #6
   283ae:	f040 0003 	orr.w	r0, r0, #3
   283b2:	f011 f98c 	bl	396ce <log_string_sync>

	return 0;
}
   283b6:	2000      	movs	r0, #0
   283b8:	bd08      	pop	{r3, pc}
   283ba:	bf00      	nop
   283bc:	0003f684 	.word	0x0003f684
   283c0:	0003f5a4 	.word	0x0003f5a4
   283c4:	000427f7 	.word	0x000427f7

000283c8 <api_connect_error_translate.part.0>:
static int connect_error_translate(const int err)
   283c8:	4602      	mov	r2, r0
   283ca:	b508      	push	{r3, lr}
   283cc:	4806      	ldr	r0, [pc, #24]	; (283e8 <api_connect_error_translate.part.0+0x20>)
   283ce:	4b07      	ldr	r3, [pc, #28]	; (283ec <api_connect_error_translate.part.0+0x24>)
		LOG_ERR("nRF cloud connect failed %d", err);
   283d0:	4907      	ldr	r1, [pc, #28]	; (283f0 <api_connect_error_translate.part.0+0x28>)
   283d2:	1a1b      	subs	r3, r3, r0
   283d4:	08db      	lsrs	r3, r3, #3
   283d6:	019b      	lsls	r3, r3, #6
   283d8:	f043 0001 	orr.w	r0, r3, #1
   283dc:	f011 f977 	bl	396ce <log_string_sync>
}
   283e0:	f06f 0004 	mvn.w	r0, #4
   283e4:	bd08      	pop	{r3, pc}
   283e6:	bf00      	nop
   283e8:	0003f5a4 	.word	0x0003f5a4
   283ec:	0003f684 	.word	0x0003f684
   283f0:	00042813 	.word	0x00042813

000283f4 <connect_error_translate>:
	switch (err) {
   283f4:	2800      	cmp	r0, #0
   283f6:	dc0e      	bgt.n	28416 <connect_error_translate+0x22>
   283f8:	f110 0f0d 	cmn.w	r0, #13
   283fc:	da0d      	bge.n	2841a <connect_error_translate+0x26>
   283fe:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   28402:	d042      	beq.n	2848a <connect_error_translate+0x96>
   28404:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   28408:	da2d      	bge.n	28466 <connect_error_translate+0x72>
   2840a:	f110 0f77 	cmn.w	r0, #119	; 0x77
   2840e:	d03f      	beq.n	28490 <connect_error_translate+0x9c>
   28410:	f110 0f74 	cmn.w	r0, #116	; 0x74
   28414:	d03f      	beq.n	28496 <connect_error_translate+0xa2>
   28416:	f7ff bfd7 	b.w	283c8 <api_connect_error_translate.part.0>
   2841a:	f100 030d 	add.w	r3, r0, #13
   2841e:	2b0d      	cmp	r3, #13
   28420:	d8f9      	bhi.n	28416 <connect_error_translate+0x22>
   28422:	a201      	add	r2, pc, #4	; (adr r2, 28428 <connect_error_translate+0x34>)
   28424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   28428:	00028479 	.word	0x00028479
   2842c:	00028485 	.word	0x00028485
   28430:	00028417 	.word	0x00028417
   28434:	00028461 	.word	0x00028461
   28438:	00028417 	.word	0x00028417
   2843c:	0002847f 	.word	0x0002847f
   28440:	00028417 	.word	0x00028417
   28444:	00028417 	.word	0x00028417
   28448:	00028417 	.word	0x00028417
   2844c:	00028417 	.word	0x00028417
   28450:	00028417 	.word	0x00028417
   28454:	00028417 	.word	0x00028417
   28458:	00028417 	.word	0x00028417
   2845c:	00028477 	.word	0x00028477
   28460:	f06f 0002 	mvn.w	r0, #2
   28464:	4770      	bx	lr
   28466:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   2846a:	d017      	beq.n	2849c <connect_error_translate+0xa8>
   2846c:	f110 0f16 	cmn.w	r0, #22
   28470:	d1d1      	bne.n	28416 <connect_error_translate+0x22>
		return NRF_CLOUD_CONNECT_RES_ERR_PRV_KEY;
   28472:	f06f 0006 	mvn.w	r0, #6
}
   28476:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   28478:	f04f 30ff 	mov.w	r0, #4294967295
   2847c:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_BACKEND;
   2847e:	f06f 0003 	mvn.w	r0, #3
   28482:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
   28484:	f06f 0005 	mvn.w	r0, #5
   28488:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_CERT_MISC;
   2848a:	f06f 0008 	mvn.w	r0, #8
   2848e:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   28490:	f06f 000a 	mvn.w	r0, #10
   28494:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   28496:	f06f 0009 	mvn.w	r0, #9
   2849a:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_CERT;
   2849c:	f06f 0007 	mvn.w	r0, #7
   284a0:	4770      	bx	lr
   284a2:	bf00      	nop

000284a4 <api_event_handler>:
{
   284a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   284a8:	4605      	mov	r5, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   284aa:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 28660 <api_event_handler+0x1bc>
{
   284ae:	b088      	sub	sp, #32
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   284b0:	f8d8 3000 	ldr.w	r3, [r8]
	struct cloud_event evt = { 0 };
   284b4:	221c      	movs	r2, #28
   284b6:	2100      	movs	r1, #0
   284b8:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   284ba:	685e      	ldr	r6, [r3, #4]
	struct cloud_event evt = { 0 };
   284bc:	4c58      	ldr	r4, [pc, #352]	; (28620 <api_event_handler+0x17c>)
   284be:	f015 fd74 	bl	3dfaa <memset>
	switch (nrf_cloud_evt->type) {
   284c2:	4858      	ldr	r0, [pc, #352]	; (28624 <api_event_handler+0x180>)
   284c4:	782b      	ldrb	r3, [r5, #0]
   284c6:	1a24      	subs	r4, r4, r0
   284c8:	08e4      	lsrs	r4, r4, #3
   284ca:	2b0a      	cmp	r3, #10
   284cc:	4647      	mov	r7, r8
   284ce:	ea4f 1084 	mov.w	r0, r4, lsl #6
   284d2:	d80a      	bhi.n	284ea <api_event_handler+0x46>
   284d4:	b15b      	cbz	r3, 284ee <api_event_handler+0x4a>
   284d6:	3b02      	subs	r3, #2
   284d8:	2b08      	cmp	r3, #8
   284da:	d80f      	bhi.n	284fc <api_event_handler+0x58>
   284dc:	e8df f003 	tbb	[pc, r3]
   284e0:	41392f21 	.word	0x41392f21
   284e4:	5a527d49 	.word	0x5a527d49
   284e8:	92          	.byte	0x92
   284e9:	00          	.byte	0x00
   284ea:	2bff      	cmp	r3, #255	; 0xff
   284ec:	d063      	beq.n	285b6 <api_event_handler+0x112>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   284ee:	4a4e      	ldr	r2, [pc, #312]	; (28628 <api_event_handler+0x184>)
   284f0:	494e      	ldr	r1, [pc, #312]	; (2862c <api_event_handler+0x188>)
   284f2:	f040 0004 	orr.w	r0, r0, #4
   284f6:	f011 f8ea 	bl	396ce <log_string_sync>
}
   284fa:	e040      	b.n	2857e <api_event_handler+0xda>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   284fc:	4a4a      	ldr	r2, [pc, #296]	; (28628 <api_event_handler+0x184>)
   284fe:	494c      	ldr	r1, [pc, #304]	; (28630 <api_event_handler+0x18c>)
   28500:	f040 0004 	orr.w	r0, r0, #4
   28504:	f011 f8e3 	bl	396ce <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTED;
   28508:	2301      	movs	r3, #1
   2850a:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.persistent_session = (nrf_cloud_evt->status != 0);
   2850e:	686b      	ldr	r3, [r5, #4]
   28510:	3b00      	subs	r3, #0
   28512:	bf18      	it	ne
   28514:	2301      	movne	r3, #1
   28516:	f88d 3008 	strb.w	r3, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2851a:	68f2      	ldr	r2, [r6, #12]
   2851c:	6838      	ldr	r0, [r7, #0]
   2851e:	a901      	add	r1, sp, #4
   28520:	e058      	b.n	285d4 <api_event_handler+0x130>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTING");
   28522:	4a41      	ldr	r2, [pc, #260]	; (28628 <api_event_handler+0x184>)
   28524:	4943      	ldr	r1, [pc, #268]	; (28634 <api_event_handler+0x190>)
   28526:	f040 0004 	orr.w	r0, r0, #4
   2852a:	f011 f8d0 	bl	396ce <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTING;
   2852e:	2300      	movs	r3, #0
			api_connect_error_translate(nrf_cloud_evt->status);
   28530:	6868      	ldr	r0, [r5, #4]
		evt.type = CLOUD_EVT_CONNECTING;
   28532:	f88d 3004 	strb.w	r3, [sp, #4]
			api_connect_error_translate(nrf_cloud_evt->status);
   28536:	f013 fd39 	bl	3bfac <api_connect_error_translate>
		evt.data.err =
   2853a:	9002      	str	r0, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2853c:	e7ed      	b.n	2851a <api_event_handler+0x76>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   2853e:	4a3a      	ldr	r2, [pc, #232]	; (28628 <api_event_handler+0x184>)
   28540:	493d      	ldr	r1, [pc, #244]	; (28638 <api_event_handler+0x194>)
   28542:	f040 0004 	orr.w	r0, r0, #4
   28546:	f011 f8c2 	bl	396ce <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   2854a:	2307      	movs	r3, #7
		evt.type = CLOUD_EVT_DISCONNECTED;
   2854c:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   28550:	e7e3      	b.n	2851a <api_event_handler+0x76>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   28552:	4a35      	ldr	r2, [pc, #212]	; (28628 <api_event_handler+0x184>)
   28554:	4939      	ldr	r1, [pc, #228]	; (2863c <api_event_handler+0x198>)
   28556:	f040 0004 	orr.w	r0, r0, #4
   2855a:	f011 f8b8 	bl	396ce <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   2855e:	2308      	movs	r3, #8
   28560:	e7f4      	b.n	2854c <api_event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   28562:	4a31      	ldr	r2, [pc, #196]	; (28628 <api_event_handler+0x184>)
   28564:	4936      	ldr	r1, [pc, #216]	; (28640 <api_event_handler+0x19c>)
   28566:	f040 0004 	orr.w	r0, r0, #4
   2856a:	f011 f8b0 	bl	396ce <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   2856e:	2303      	movs	r3, #3
   28570:	e7ec      	b.n	2854c <api_event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   28572:	4a2d      	ldr	r2, [pc, #180]	; (28628 <api_event_handler+0x184>)
   28574:	4933      	ldr	r1, [pc, #204]	; (28644 <api_event_handler+0x1a0>)
   28576:	f040 0004 	orr.w	r0, r0, #4
   2857a:	f011 f8a8 	bl	396ce <log_string_sync>
}
   2857e:	b008      	add	sp, #32
   28580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   28584:	4a28      	ldr	r2, [pc, #160]	; (28628 <api_event_handler+0x184>)
   28586:	4930      	ldr	r1, [pc, #192]	; (28648 <api_event_handler+0x1a4>)
   28588:	f040 0004 	orr.w	r0, r0, #4
   2858c:	f011 f89f 	bl	396ce <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   28590:	2305      	movs	r3, #5
   28592:	e7db      	b.n	2854c <api_event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   28594:	4a24      	ldr	r2, [pc, #144]	; (28628 <api_event_handler+0x184>)
   28596:	492d      	ldr	r1, [pc, #180]	; (2864c <api_event_handler+0x1a8>)
   28598:	f040 0004 	orr.w	r0, r0, #4
   2859c:	f011 f897 	bl	396ce <log_string_sync>
		atomic_set(&transport_disconnected, 1);
   285a0:	2101      	movs	r1, #1
   285a2:	482b      	ldr	r0, [pc, #172]	; (28650 <api_event_handler+0x1ac>)
   285a4:	f013 fcf3 	bl	3bf8e <atomic_set>
			api_disconnect_status_translate(nrf_cloud_evt->status);
   285a8:	792b      	ldrb	r3, [r5, #4]
   285aa:	2b03      	cmp	r3, #3
   285ac:	bf28      	it	cs
   285ae:	2303      	movcs	r3, #3
   285b0:	9302      	str	r3, [sp, #8]
		evt.type = CLOUD_EVT_DISCONNECTED;
   285b2:	2302      	movs	r3, #2
   285b4:	e7ca      	b.n	2854c <api_event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   285b6:	686b      	ldr	r3, [r5, #4]
   285b8:	4a1b      	ldr	r2, [pc, #108]	; (28628 <api_event_handler+0x184>)
   285ba:	4926      	ldr	r1, [pc, #152]	; (28654 <api_event_handler+0x1b0>)
   285bc:	f040 0004 	orr.w	r0, r0, #4
   285c0:	f011 f885 	bl	396ce <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   285c4:	2304      	movs	r3, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   285c6:	68f2      	ldr	r2, [r6, #12]
   285c8:	f8d8 0000 	ldr.w	r0, [r8]
		evt.type = CLOUD_EVT_ERROR;
   285cc:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   285d0:	eb0d 0103 	add.w	r1, sp, r3
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   285d4:	f013 fcd2 	bl	3bf7c <cloud_notify_event>
		break;
   285d8:	e7d1      	b.n	2857e <api_event_handler+0xda>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   285da:	4a13      	ldr	r2, [pc, #76]	; (28628 <api_event_handler+0x184>)
   285dc:	491e      	ldr	r1, [pc, #120]	; (28658 <api_event_handler+0x1b4>)
   285de:	f040 0004 	orr.w	r0, r0, #4
   285e2:	f011 f874 	bl	396ce <log_string_sync>
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   285e6:	2306      	movs	r3, #6
   285e8:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   285ec:	68eb      	ldr	r3, [r5, #12]
   285ee:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   285f0:	68ab      	ldr	r3, [r5, #8]
   285f2:	9303      	str	r3, [sp, #12]
		evt.data.msg.endpoint.type = CLOUD_EP_MSG;
   285f4:	2300      	movs	r3, #0
   285f6:	f8ad 3014 	strh.w	r3, [sp, #20]
		evt.data.msg.endpoint.str =
   285fa:	696b      	ldr	r3, [r5, #20]
   285fc:	9306      	str	r3, [sp, #24]
		evt.data.msg.endpoint.len = nrf_cloud_evt->topic.len;
   285fe:	692b      	ldr	r3, [r5, #16]
   28600:	9307      	str	r3, [sp, #28]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   28602:	e78a      	b.n	2851a <api_event_handler+0x76>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   28604:	4a08      	ldr	r2, [pc, #32]	; (28628 <api_event_handler+0x184>)
   28606:	4915      	ldr	r1, [pc, #84]	; (2865c <api_event_handler+0x1b8>)
   28608:	f040 0004 	orr.w	r0, r0, #4
   2860c:	f011 f85f 	bl	396ce <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   28610:	230a      	movs	r3, #10
   28612:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   28616:	68eb      	ldr	r3, [r5, #12]
   28618:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   2861a:	68ab      	ldr	r3, [r5, #8]
   2861c:	9303      	str	r3, [sp, #12]
   2861e:	e77c      	b.n	2851a <api_event_handler+0x76>
   28620:	0003f684 	.word	0x0003f684
   28624:	0003f5a4 	.word	0x0003f5a4
   28628:	00042c25 	.word	0x00042c25
   2862c:	000429a0 	.word	0x000429a0
   28630:	0004282f 	.word	0x0004282f
   28634:	00042855 	.word	0x00042855
   28638:	0004287c 	.word	0x0004287c
   2863c:	000428a7 	.word	0x000428a7
   28640:	000428c9 	.word	0x000428c9
   28644:	000428e1 	.word	0x000428e1
   28648:	00042903 	.word	0x00042903
   2864c:	00042925 	.word	0x00042925
   28650:	20017844 	.word	0x20017844
   28654:	0004294e 	.word	0x0004294e
   28658:	0004296a 	.word	0x0004296a
   2865c:	00042984 	.word	0x00042984
   28660:	20017840 	.word	0x20017840

00028664 <nfsm_get_current_state>:
	return current_state;
   28664:	4b01      	ldr	r3, [pc, #4]	; (2866c <nfsm_get_current_state+0x8>)
   28666:	7818      	ldrb	r0, [r3, #0]
}
   28668:	4770      	bx	lr
   2866a:	bf00      	nop
   2866c:	2001d5a9 	.word	0x2001d5a9

00028670 <nfsm_set_current_state_and_notify>:
{
   28670:	b570      	push	{r4, r5, r6, lr}
   28672:	4606      	mov	r6, r0
   28674:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   28676:	f04f 32ff 	mov.w	r2, #4294967295
   2867a:	f04f 33ff 	mov.w	r3, #4294967295
   2867e:	4812      	ldr	r0, [pc, #72]	; (286c8 <nfsm_set_current_state_and_notify+0x58>)
   28680:	f00b fcb8 	bl	33ff4 <z_impl_k_mutex_lock>
   28684:	4c11      	ldr	r4, [pc, #68]	; (286cc <nfsm_set_current_state_and_notify+0x5c>)
   28686:	4812      	ldr	r0, [pc, #72]	; (286d0 <nfsm_set_current_state_and_notify+0x60>)
	LOG_DBG("state: %d", state);
   28688:	4633      	mov	r3, r6
   2868a:	1a24      	subs	r4, r4, r0
   2868c:	08e4      	lsrs	r4, r4, #3
   2868e:	01a4      	lsls	r4, r4, #6
   28690:	4a10      	ldr	r2, [pc, #64]	; (286d4 <nfsm_set_current_state_and_notify+0x64>)
   28692:	4911      	ldr	r1, [pc, #68]	; (286d8 <nfsm_set_current_state_and_notify+0x68>)
   28694:	f044 0004 	orr.w	r0, r4, #4
   28698:	f011 f819 	bl	396ce <log_string_sync>
	current_state = state;
   2869c:	4b0f      	ldr	r3, [pc, #60]	; (286dc <nfsm_set_current_state_and_notify+0x6c>)
   2869e:	701e      	strb	r6, [r3, #0]
	if ((evt != NULL) &&
   286a0:	b135      	cbz	r5, 286b0 <nfsm_set_current_state_and_notify+0x40>
   286a2:	782b      	ldrb	r3, [r5, #0]
   286a4:	2b09      	cmp	r3, #9
   286a6:	d103      	bne.n	286b0 <nfsm_set_current_state_and_notify+0x40>
		atomic_set(&transport_disconnected, 1);
   286a8:	2101      	movs	r1, #1
   286aa:	480d      	ldr	r0, [pc, #52]	; (286e0 <nfsm_set_current_state_and_notify+0x70>)
   286ac:	f013 fc6f 	bl	3bf8e <atomic_set>
	if ((app_event_handler != NULL) && (evt != NULL)) {
   286b0:	4b0c      	ldr	r3, [pc, #48]	; (286e4 <nfsm_set_current_state_and_notify+0x74>)
   286b2:	681b      	ldr	r3, [r3, #0]
   286b4:	b113      	cbz	r3, 286bc <nfsm_set_current_state_and_notify+0x4c>
   286b6:	b10d      	cbz	r5, 286bc <nfsm_set_current_state_and_notify+0x4c>
		app_event_handler(evt);
   286b8:	4628      	mov	r0, r5
   286ba:	4798      	blx	r3
}
   286bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_mutex_unlock(mutex);
   286c0:	4801      	ldr	r0, [pc, #4]	; (286c8 <nfsm_set_current_state_and_notify+0x58>)
   286c2:	f00b bd91 	b.w	341e8 <z_impl_k_mutex_unlock>
   286c6:	bf00      	nop
   286c8:	20014ddc 	.word	0x20014ddc
   286cc:	0003f684 	.word	0x0003f684
   286d0:	0003f5a4 	.word	0x0003f5a4
   286d4:	00042bdf 	.word	0x00042bdf
   286d8:	000429bb 	.word	0x000429bb
   286dc:	2001d5a9 	.word	0x2001d5a9
   286e0:	20017844 	.word	0x20017844
   286e4:	20017834 	.word	0x20017834

000286e8 <nfsm_get_disconnect_requested>:
   286e8:	4b03      	ldr	r3, [pc, #12]	; (286f8 <nfsm_get_disconnect_requested+0x10>)
   286ea:	e8d3 0faf 	lda	r0, [r3]
}
   286ee:	3800      	subs	r0, #0
   286f0:	bf18      	it	ne
   286f2:	2001      	movne	r0, #1
   286f4:	4770      	bx	lr
   286f6:	bf00      	nop
   286f8:	2001783c 	.word	0x2001783c

000286fc <nrf_cloud_init>:
{
   286fc:	b538      	push	{r3, r4, r5, lr}
	if (current_state != STATE_IDLE) {
   286fe:	4d0e      	ldr	r5, [pc, #56]	; (28738 <nrf_cloud_init+0x3c>)
{
   28700:	4604      	mov	r4, r0
	if (current_state != STATE_IDLE) {
   28702:	782b      	ldrb	r3, [r5, #0]
   28704:	b98b      	cbnz	r3, 2872a <nrf_cloud_init+0x2e>
	if (param->event_handler == NULL) {
   28706:	6803      	ldr	r3, [r0, #0]
   28708:	b193      	cbz	r3, 28730 <nrf_cloud_init+0x34>
	err = nfsm_init();
   2870a:	f000 fdd3 	bl	292b4 <nfsm_init>
	if (err) {
   2870e:	b958      	cbnz	r0, 28728 <nrf_cloud_init+0x2c>
	err = nrf_codec_init();
   28710:	f013 fcb8 	bl	3c084 <nrf_codec_init>
	if (err) {
   28714:	b940      	cbnz	r0, 28728 <nrf_cloud_init+0x2c>
	err = nct_init(param->client_id);
   28716:	6860      	ldr	r0, [r4, #4]
   28718:	f001 fa46 	bl	29ba8 <nct_init>
	if (err) {
   2871c:	b920      	cbnz	r0, 28728 <nrf_cloud_init+0x2c>
	app_event_handler = param->event_handler;
   2871e:	4b07      	ldr	r3, [pc, #28]	; (2873c <nrf_cloud_init+0x40>)
   28720:	6822      	ldr	r2, [r4, #0]
   28722:	601a      	str	r2, [r3, #0]
	current_state = STATE_INITIALIZED;
   28724:	2301      	movs	r3, #1
   28726:	702b      	strb	r3, [r5, #0]
}
   28728:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   2872a:	f06f 000c 	mvn.w	r0, #12
   2872e:	e7fb      	b.n	28728 <nrf_cloud_init+0x2c>
		return -EINVAL;
   28730:	f06f 0015 	mvn.w	r0, #21
   28734:	e7f8      	b.n	28728 <nrf_cloud_init+0x2c>
   28736:	bf00      	nop
   28738:	2001d5a9 	.word	0x2001d5a9
   2873c:	20017834 	.word	0x20017834

00028740 <api_init>:
	struct nrf_cloud_init_param params = {
   28740:	2300      	movs	r3, #0
{
   28742:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_init_param params = {
   28744:	9301      	str	r3, [sp, #4]
   28746:	4b06      	ldr	r3, [pc, #24]	; (28760 <api_init+0x20>)
   28748:	9300      	str	r3, [sp, #0]
	backend->config->handler = handler;
   2874a:	6843      	ldr	r3, [r0, #4]
   2874c:	6059      	str	r1, [r3, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   2874e:	4b05      	ldr	r3, [pc, #20]	; (28764 <api_init+0x24>)
   28750:	6018      	str	r0, [r3, #0]
	return nrf_cloud_init(&params);
   28752:	4668      	mov	r0, sp
   28754:	f7ff ffd2 	bl	286fc <nrf_cloud_init>
}
   28758:	b003      	add	sp, #12
   2875a:	f85d fb04 	ldr.w	pc, [sp], #4
   2875e:	bf00      	nop
   28760:	000284a5 	.word	0x000284a5
   28764:	20017840 	.word	0x20017840

00028768 <nrf_cloud_connect>:
{
   28768:	b510      	push	{r4, lr}
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   2876a:	4b15      	ldr	r3, [pc, #84]	; (287c0 <nrf_cloud_connect+0x58>)
   2876c:	781a      	ldrb	r2, [r3, #0]
   2876e:	2a01      	cmp	r2, #1
   28770:	d822      	bhi.n	287b8 <nrf_cloud_connect+0x50>
	if (current_state == STATE_IDLE) {
   28772:	781b      	ldrb	r3, [r3, #0]
   28774:	b1eb      	cbz	r3, 287b2 <nrf_cloud_connect+0x4a>
   28776:	4b13      	ldr	r3, [pc, #76]	; (287c4 <nrf_cloud_connect+0x5c>)
   28778:	e8d3 4faf 	lda	r4, [r3]
	if (atomic_get(&connection_poll_active)) {
   2877c:	b184      	cbz	r4, 287a0 <nrf_cloud_connect+0x38>
   2877e:	4b12      	ldr	r3, [pc, #72]	; (287c8 <nrf_cloud_connect+0x60>)
   28780:	4812      	ldr	r0, [pc, #72]	; (287cc <nrf_cloud_connect+0x64>)
		LOG_DBG("Connection poll in progress");
   28782:	4a13      	ldr	r2, [pc, #76]	; (287d0 <nrf_cloud_connect+0x68>)
   28784:	1ac0      	subs	r0, r0, r3
   28786:	08c0      	lsrs	r0, r0, #3
   28788:	0180      	lsls	r0, r0, #6
   2878a:	f040 0004 	orr.w	r0, r0, #4
   2878e:	4911      	ldr	r1, [pc, #68]	; (287d4 <nrf_cloud_connect+0x6c>)
   28790:	f010 ff9d 	bl	396ce <log_string_sync>
		return -EINPROGRESS;
   28794:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   28798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return connect_error_translate(err);
   2879c:	f7ff be2a 	b.w	283f4 <connect_error_translate>
	atomic_set(&disconnect_requested, 0);
   287a0:	4621      	mov	r1, r4
   287a2:	480d      	ldr	r0, [pc, #52]	; (287d8 <nrf_cloud_connect+0x70>)
   287a4:	f013 fbf3 	bl	3bf8e <atomic_set>
	z_impl_k_sem_give(sem);
   287a8:	480c      	ldr	r0, [pc, #48]	; (287dc <nrf_cloud_connect+0x74>)
   287aa:	f00b fde5 	bl	34378 <z_impl_k_sem_give>
	return 0;
   287ae:	4620      	mov	r0, r4
}
   287b0:	e7f2      	b.n	28798 <nrf_cloud_connect+0x30>
		return -EACCES;
   287b2:	f06f 000c 	mvn.w	r0, #12
   287b6:	e7ef      	b.n	28798 <nrf_cloud_connect+0x30>
}
   287b8:	f04f 30ff 	mov.w	r0, #4294967295
   287bc:	bd10      	pop	{r4, pc}
   287be:	bf00      	nop
   287c0:	2001d5a9 	.word	0x2001d5a9
   287c4:	20017838 	.word	0x20017838
   287c8:	0003f5a4 	.word	0x0003f5a4
   287cc:	0003f684 	.word	0x0003f684
   287d0:	00042c01 	.word	0x00042c01
   287d4:	000429c9 	.word	0x000429c9
   287d8:	2001783c 	.word	0x2001783c
   287dc:	20014e58 	.word	0x20014e58

000287e0 <nrf_cloud_disconnect>:
{
   287e0:	b508      	push	{r3, lr}
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   287e2:	4b09      	ldr	r3, [pc, #36]	; (28808 <nrf_cloud_disconnect+0x28>)
   287e4:	781a      	ldrb	r2, [r3, #0]
   287e6:	2a09      	cmp	r2, #9
   287e8:	d902      	bls.n	287f0 <nrf_cloud_disconnect+0x10>
	    NOT_VALID_STATE(STATE_CC_CONNECTED)) {
   287ea:	781b      	ldrb	r3, [r3, #0]
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   287ec:	2b04      	cmp	r3, #4
   287ee:	d807      	bhi.n	28800 <nrf_cloud_disconnect+0x20>
	atomic_set(&disconnect_requested, 1);
   287f0:	2101      	movs	r1, #1
   287f2:	4806      	ldr	r0, [pc, #24]	; (2880c <nrf_cloud_disconnect+0x2c>)
   287f4:	f013 fbcb 	bl	3bf8e <atomic_set>
}
   287f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   287fc:	f001 bd08 	b.w	2a210 <nct_disconnect>
}
   28800:	f06f 000c 	mvn.w	r0, #12
   28804:	bd08      	pop	{r3, pc}
   28806:	bf00      	nop
   28808:	2001d5a9 	.word	0x2001d5a9
   2880c:	2001783c 	.word	0x2001783c

00028810 <nrf_cloud_run>:
{
   28810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   28814:	f04f 0900 	mov.w	r9, #0
   28818:	4d54      	ldr	r5, [pc, #336]	; (2896c <nrf_cloud_run+0x15c>)
   2881a:	4b55      	ldr	r3, [pc, #340]	; (28970 <nrf_cloud_run+0x160>)
	return z_impl_k_sem_take(sem, timeout);
   2881c:	4f55      	ldr	r7, [pc, #340]	; (28974 <nrf_cloud_run+0x164>)
   2881e:	1aed      	subs	r5, r5, r3
	atomic_set(&connection_poll_active, 1);
   28820:	f8df 8188 	ldr.w	r8, [pc, #392]	; 289ac <nrf_cloud_run+0x19c>
{
   28824:	b088      	sub	sp, #32
   28826:	08ed      	lsrs	r5, r5, #3
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   28828:	2402      	movs	r4, #2
   2882a:	f04f 32ff 	mov.w	r2, #4294967295
   2882e:	f04f 33ff 	mov.w	r3, #4294967295
   28832:	4638      	mov	r0, r7
	app_event_handler(&evt);
   28834:	4e50      	ldr	r6, [pc, #320]	; (28978 <nrf_cloud_run+0x168>)
   28836:	f00b fde3 	bl	34400 <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   2883a:	2101      	movs	r1, #1
   2883c:	4640      	mov	r0, r8
   2883e:	f013 fba6 	bl	3bf8e <atomic_set>
	app_event_handler(&evt);
   28842:	6833      	ldr	r3, [r6, #0]
   28844:	a802      	add	r0, sp, #8
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   28846:	f88d 4008 	strb.w	r4, [sp, #8]
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2884a:	f8cd 900c 	str.w	r9, [sp, #12]
	app_event_handler(&evt);
   2884e:	4798      	blx	r3
	atomic_set(&disconnect_requested, 0);
   28850:	2100      	movs	r1, #0
   28852:	484a      	ldr	r0, [pc, #296]	; (2897c <nrf_cloud_run+0x16c>)
   28854:	f013 fb9b 	bl	3bf8e <atomic_set>
	return nct_connect();
   28858:	f001 fb0c 	bl	29e74 <nct_connect>
	ret = connect_error_translate(ret);
   2885c:	f7ff fdca 	bl	283f4 <connect_error_translate>
	if (ret != NRF_CLOUD_CONNECT_RES_SUCCESS) {
   28860:	4682      	mov	sl, r0
   28862:	b178      	cbz	r0, 28884 <nrf_cloud_run+0x74>
		evt.status = ret;
   28864:	9003      	str	r0, [sp, #12]
		app_event_handler(&evt);
   28866:	6833      	ldr	r3, [r6, #0]
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   28868:	f88d 4008 	strb.w	r4, [sp, #8]
		app_event_handler(&evt);
   2886c:	a802      	add	r0, sp, #8
   2886e:	4798      	blx	r3
	atomic_set(&connection_poll_active, 0);
   28870:	2100      	movs	r1, #0
   28872:	4640      	mov	r0, r8
   28874:	f013 fb8b 	bl	3bf8e <atomic_set>
   28878:	2200      	movs	r2, #0
   2887a:	2300      	movs	r3, #0
   2887c:	4638      	mov	r0, r7
   2887e:	f00b fdbf 	bl	34400 <z_impl_k_sem_take>
	goto start;
   28882:	e7d1      	b.n	28828 <nrf_cloud_run+0x18>
		LOG_DBG("Cloud connection request sent.");
   28884:	01ac      	lsls	r4, r5, #6
   28886:	4a3e      	ldr	r2, [pc, #248]	; (28980 <nrf_cloud_run+0x170>)
   28888:	493e      	ldr	r1, [pc, #248]	; (28984 <nrf_cloud_run+0x174>)
   2888a:	f044 0004 	orr.w	r0, r4, #4
   2888e:	f010 ff1e 	bl	396ce <log_string_sync>
	fds[0].fd = nct_socket_get();
   28892:	f001 fced 	bl	2a270 <nct_socket_get>
	fds[0].events = POLLIN;
   28896:	2301      	movs	r3, #1
   28898:	f8ad 3004 	strh.w	r3, [sp, #4]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2889c:	2309      	movs	r3, #9
	atomic_set(&transport_disconnected, 0);
   2889e:	4651      	mov	r1, sl
	fds[0].fd = nct_socket_get();
   288a0:	9000      	str	r0, [sp, #0]
	atomic_set(&transport_disconnected, 0);
   288a2:	4839      	ldr	r0, [pc, #228]	; (28988 <nrf_cloud_run+0x178>)
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   288a4:	f88d 3008 	strb.w	r3, [sp, #8]
	atomic_set(&transport_disconnected, 0);
   288a8:	f013 fb71 	bl	3bf8e <atomic_set>
   288ac:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 28988 <nrf_cloud_run+0x178>
		ret = poll(fds, ARRAY_SIZE(fds), nct_keepalive_time_left());
   288b0:	f001 fcd8 	bl	2a264 <nct_keepalive_time_left>
   288b4:	4602      	mov	r2, r0
	return z_impl_zsock_poll(fds, nfds, timeout);
   288b6:	2101      	movs	r1, #1
   288b8:	4668      	mov	r0, sp
   288ba:	f7f8 ff55 	bl	21768 <z_impl_zsock_poll>
		if (ret == 0) {
   288be:	4602      	mov	r2, r0
   288c0:	b910      	cbnz	r0, 288c8 <nrf_cloud_run+0xb8>
	nct_process();
   288c2:	f001 fcc3 	bl	2a24c <nct_process>
			continue;
   288c6:	e7f3      	b.n	288b0 <nrf_cloud_run+0xa0>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   288c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   288cc:	07d8      	lsls	r0, r3, #31
   288ce:	d516      	bpl.n	288fe <nrf_cloud_run+0xee>
	nct_process();
   288d0:	f001 fcbc 	bl	2a24c <nct_process>
   288d4:	e8da 3faf 	lda	r3, [sl]
			if (atomic_get(&transport_disconnected) == 1) {
   288d8:	2b01      	cmp	r3, #1
   288da:	d1e9      	bne.n	288b0 <nrf_cloud_run+0xa0>
				LOG_DBG("The cloud socket is already closed.");
   288dc:	4a28      	ldr	r2, [pc, #160]	; (28980 <nrf_cloud_run+0x170>)
   288de:	492b      	ldr	r1, [pc, #172]	; (2898c <nrf_cloud_run+0x17c>)
   288e0:	f044 0004 	orr.w	r0, r4, #4
   288e4:	f010 fef3 	bl	396ce <log_string_sync>
   288e8:	4b27      	ldr	r3, [pc, #156]	; (28988 <nrf_cloud_run+0x178>)
   288ea:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&transport_disconnected) == 0) {
   288ee:	2b00      	cmp	r3, #0
   288f0:	d1be      	bne.n	28870 <nrf_cloud_run+0x60>
		app_event_handler(&evt);
   288f2:	6833      	ldr	r3, [r6, #0]
   288f4:	a802      	add	r0, sp, #8
   288f6:	4798      	blx	r3
		nrf_cloud_disconnect();
   288f8:	f7ff ff72 	bl	287e0 <nrf_cloud_disconnect>
   288fc:	e7b8      	b.n	28870 <nrf_cloud_run+0x60>
		if (ret < 0) {
   288fe:	2a00      	cmp	r2, #0
   28900:	da06      	bge.n	28910 <nrf_cloud_run+0x100>
			LOG_ERR("poll() returned an error: %d", ret);
   28902:	4923      	ldr	r1, [pc, #140]	; (28990 <nrf_cloud_run+0x180>)
   28904:	f044 0001 	orr.w	r0, r4, #1
			LOG_DBG("Cloud connection was unexpectedly closed.");
   28908:	f010 fee1 	bl	396ce <log_string_sync>
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2890c:	2303      	movs	r3, #3
   2890e:	e00e      	b.n	2892e <nrf_cloud_run+0x11e>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   28910:	0699      	lsls	r1, r3, #26
   28912:	d50e      	bpl.n	28932 <nrf_cloud_run+0x122>
			LOG_DBG("Socket error: POLLNVAL");
   28914:	f044 0404 	orr.w	r4, r4, #4
   28918:	4620      	mov	r0, r4
   2891a:	4a19      	ldr	r2, [pc, #100]	; (28980 <nrf_cloud_run+0x170>)
   2891c:	491d      	ldr	r1, [pc, #116]	; (28994 <nrf_cloud_run+0x184>)
   2891e:	f010 fed6 	bl	396ce <log_string_sync>
			LOG_DBG("The cloud socket was unexpectedly closed.");
   28922:	4620      	mov	r0, r4
   28924:	4a16      	ldr	r2, [pc, #88]	; (28980 <nrf_cloud_run+0x170>)
   28926:	491c      	ldr	r1, [pc, #112]	; (28998 <nrf_cloud_run+0x188>)
   28928:	f010 fed1 	bl	396ce <log_string_sync>
			evt.status = NRF_CLOUD_DISCONNECT_INVALID_REQUEST;
   2892c:	2302      	movs	r3, #2
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2892e:	9303      	str	r3, [sp, #12]
			break;
   28930:	e7da      	b.n	288e8 <nrf_cloud_run+0xd8>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   28932:	06da      	lsls	r2, r3, #27
   28934:	d50d      	bpl.n	28952 <nrf_cloud_run+0x142>
			LOG_DBG("Socket error: POLLHUP");
   28936:	f044 0404 	orr.w	r4, r4, #4
   2893a:	4620      	mov	r0, r4
   2893c:	4a10      	ldr	r2, [pc, #64]	; (28980 <nrf_cloud_run+0x170>)
   2893e:	4917      	ldr	r1, [pc, #92]	; (2899c <nrf_cloud_run+0x18c>)
   28940:	f010 fec5 	bl	396ce <log_string_sync>
			LOG_DBG("Connection was closed by the cloud.");
   28944:	4620      	mov	r0, r4
   28946:	4a0e      	ldr	r2, [pc, #56]	; (28980 <nrf_cloud_run+0x170>)
   28948:	4915      	ldr	r1, [pc, #84]	; (289a0 <nrf_cloud_run+0x190>)
   2894a:	f010 fec0 	bl	396ce <log_string_sync>
			evt.status = NRF_CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   2894e:	2301      	movs	r3, #1
   28950:	e7ed      	b.n	2892e <nrf_cloud_run+0x11e>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   28952:	071b      	lsls	r3, r3, #28
   28954:	d5ac      	bpl.n	288b0 <nrf_cloud_run+0xa0>
			LOG_DBG("Socket error: POLLERR");
   28956:	f044 0404 	orr.w	r4, r4, #4
   2895a:	4620      	mov	r0, r4
   2895c:	4a08      	ldr	r2, [pc, #32]	; (28980 <nrf_cloud_run+0x170>)
   2895e:	4911      	ldr	r1, [pc, #68]	; (289a4 <nrf_cloud_run+0x194>)
   28960:	f010 feb5 	bl	396ce <log_string_sync>
			LOG_DBG("Cloud connection was unexpectedly closed.");
   28964:	4620      	mov	r0, r4
   28966:	4a06      	ldr	r2, [pc, #24]	; (28980 <nrf_cloud_run+0x170>)
   28968:	490f      	ldr	r1, [pc, #60]	; (289a8 <nrf_cloud_run+0x198>)
   2896a:	e7cd      	b.n	28908 <nrf_cloud_run+0xf8>
   2896c:	0003f684 	.word	0x0003f684
   28970:	0003f5a4 	.word	0x0003f5a4
   28974:	20014e58 	.word	0x20014e58
   28978:	20017834 	.word	0x20017834
   2897c:	2001783c 	.word	0x2001783c
   28980:	00042c17 	.word	0x00042c17
   28984:	000429e9 	.word	0x000429e9
   28988:	20017844 	.word	0x20017844
   2898c:	00042a0c 	.word	0x00042a0c
   28990:	00042a34 	.word	0x00042a34
   28994:	00042a51 	.word	0x00042a51
   28998:	00042a6c 	.word	0x00042a6c
   2899c:	00042a9a 	.word	0x00042a9a
   289a0:	00042ab4 	.word	0x00042ab4
   289a4:	00042adc 	.word	0x00042adc
   289a8:	00042af6 	.word	0x00042af6
   289ac:	20017838 	.word	0x20017838

000289b0 <nrf_cloud_send>:
{
   289b0:	b530      	push	{r4, r5, lr}
	switch (msg->topic_type) {
   289b2:	7a05      	ldrb	r5, [r0, #8]
{
   289b4:	4604      	mov	r4, r0
	switch (msg->topic_type) {
   289b6:	2d01      	cmp	r5, #1
{
   289b8:	b087      	sub	sp, #28
	switch (msg->topic_type) {
   289ba:	d00e      	beq.n	289da <nrf_cloud_send+0x2a>
   289bc:	2d02      	cmp	r5, #2
   289be:	d02a      	beq.n	28a16 <nrf_cloud_send+0x66>
   289c0:	4b26      	ldr	r3, [pc, #152]	; (28a5c <nrf_cloud_send+0xac>)
   289c2:	4827      	ldr	r0, [pc, #156]	; (28a60 <nrf_cloud_send+0xb0>)
		LOG_ERR("Unknown topic type");
   289c4:	4927      	ldr	r1, [pc, #156]	; (28a64 <nrf_cloud_send+0xb4>)
   289c6:	1ac0      	subs	r0, r0, r3
   289c8:	08c0      	lsrs	r0, r0, #3
   289ca:	0180      	lsls	r0, r0, #6
   289cc:	f040 0001 	orr.w	r0, r0, #1
   289d0:	f010 fe7d 	bl	396ce <log_string_sync>
		return -ENODATA;
   289d4:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   289d8:	e01a      	b.n	28a10 <nrf_cloud_send+0x60>
		const struct nct_cc_data shadow_data = {
   289da:	2210      	movs	r2, #16
   289dc:	2100      	movs	r1, #0
   289de:	a802      	add	r0, sp, #8
   289e0:	f015 fae3 	bl	3dfaa <memset>
   289e4:	6823      	ldr	r3, [r4, #0]
		err = nct_cc_send(&shadow_data);
   289e6:	4668      	mov	r0, sp
		const struct nct_cc_data shadow_data = {
   289e8:	9300      	str	r3, [sp, #0]
   289ea:	6863      	ldr	r3, [r4, #4]
   289ec:	f88d 5014 	strb.w	r5, [sp, #20]
   289f0:	9301      	str	r3, [sp, #4]
		err = nct_cc_send(&shadow_data);
   289f2:	f001 fad1 	bl	29f98 <nct_cc_send>
		if (err) {
   289f6:	4604      	mov	r4, r0
   289f8:	b150      	cbz	r0, 28a10 <nrf_cloud_send+0x60>
   289fa:	4819      	ldr	r0, [pc, #100]	; (28a60 <nrf_cloud_send+0xb0>)
   289fc:	4b17      	ldr	r3, [pc, #92]	; (28a5c <nrf_cloud_send+0xac>)
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   289fe:	4622      	mov	r2, r4
   28a00:	1ac0      	subs	r0, r0, r3
   28a02:	08c0      	lsrs	r0, r0, #3
   28a04:	0180      	lsls	r0, r0, #6
   28a06:	4918      	ldr	r1, [pc, #96]	; (28a68 <nrf_cloud_send+0xb8>)
   28a08:	f040 0001 	orr.w	r0, r0, #1
   28a0c:	f010 fe5f 	bl	396ce <log_string_sync>
}
   28a10:	4620      	mov	r0, r4
   28a12:	b007      	add	sp, #28
   28a14:	bd30      	pop	{r4, r5, pc}
		const struct nct_dc_data buf = {
   28a16:	2300      	movs	r3, #0
   28a18:	e9cd 3302 	strd	r3, r3, [sp, #8]
   28a1c:	9304      	str	r3, [sp, #16]
   28a1e:	6803      	ldr	r3, [r0, #0]
   28a20:	9300      	str	r3, [sp, #0]
   28a22:	6843      	ldr	r3, [r0, #4]
   28a24:	9301      	str	r3, [sp, #4]
		if (msg->qos == MQTT_QOS_0_AT_MOST_ONCE) {
   28a26:	7a43      	ldrb	r3, [r0, #9]
   28a28:	b923      	cbnz	r3, 28a34 <nrf_cloud_send+0x84>
			err = nct_dc_stream(&buf);
   28a2a:	4668      	mov	r0, sp
   28a2c:	f013 fb89 	bl	3c142 <nct_dc_stream>
	return 0;
   28a30:	2400      	movs	r4, #0
   28a32:	e7ed      	b.n	28a10 <nrf_cloud_send+0x60>
		} else if (msg->qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   28a34:	2b01      	cmp	r3, #1
   28a36:	d103      	bne.n	28a40 <nrf_cloud_send+0x90>
			err = nct_dc_send(&buf);
   28a38:	4668      	mov	r0, sp
   28a3a:	f013 fb7f 	bl	3c13c <nct_dc_send>
   28a3e:	e7f7      	b.n	28a30 <nrf_cloud_send+0x80>
   28a40:	4b06      	ldr	r3, [pc, #24]	; (28a5c <nrf_cloud_send+0xac>)
   28a42:	4807      	ldr	r0, [pc, #28]	; (28a60 <nrf_cloud_send+0xb0>)
			LOG_ERR("Unsupported QoS setting.");
   28a44:	4909      	ldr	r1, [pc, #36]	; (28a6c <nrf_cloud_send+0xbc>)
   28a46:	1ac0      	subs	r0, r0, r3
   28a48:	08c0      	lsrs	r0, r0, #3
   28a4a:	0180      	lsls	r0, r0, #6
   28a4c:	f040 0001 	orr.w	r0, r0, #1
   28a50:	f010 fe3d 	bl	396ce <log_string_sync>
			return err;
   28a54:	f06f 0415 	mvn.w	r4, #21
   28a58:	e7da      	b.n	28a10 <nrf_cloud_send+0x60>
   28a5a:	bf00      	nop
   28a5c:	0003f5a4 	.word	0x0003f5a4
   28a60:	0003f684 	.word	0x0003f684
   28a64:	00042b5c 	.word	0x00042b5c
   28a68:	00042b24 	.word	0x00042b24
   28a6c:	00042b43 	.word	0x00042b43

00028a70 <api_send>:
	return nrf_cloud_disconnect();
}

static int api_send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   28a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   28a72:	694c      	ldr	r4, [r1, #20]
   28a74:	2c00      	cmp	r4, #0
   28a76:	d14b      	bne.n	28b10 <api_send+0xa0>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   28a78:	898b      	ldrh	r3, [r1, #12]
   28a7a:	b16b      	cbz	r3, 28a98 <api_send+0x28>
   28a7c:	2b01      	cmp	r3, #1
   28a7e:	d03c      	beq.n	28afa <api_send+0x8a>
   28a80:	4a25      	ldr	r2, [pc, #148]	; (28b18 <api_send+0xa8>)
   28a82:	4826      	ldr	r0, [pc, #152]	; (28b1c <api_send+0xac>)
		}

		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   28a84:	4926      	ldr	r1, [pc, #152]	; (28b20 <api_send+0xb0>)
   28a86:	1a80      	subs	r0, r0, r2
   28a88:	08c0      	lsrs	r0, r0, #3
   28a8a:	0180      	lsls	r0, r0, #6
   28a8c:	4a25      	ldr	r2, [pc, #148]	; (28b24 <api_send+0xb4>)
   28a8e:	f040 0004 	orr.w	r0, r0, #4
   28a92:	f010 fe1c 	bl	396ce <log_string_sync>
		break;
	}

	if (err) {
   28a96:	e02d      	b.n	28af4 <api_send+0x84>
		struct nrf_cloud_tx_data buf = {
   28a98:	f8ad 300d 	strh.w	r3, [sp, #13]
   28a9c:	f88d 300f 	strb.w	r3, [sp, #15]
   28aa0:	684b      	ldr	r3, [r1, #4]
   28aa2:	9301      	str	r3, [sp, #4]
   28aa4:	680b      	ldr	r3, [r1, #0]
   28aa6:	9302      	str	r3, [sp, #8]
   28aa8:	2302      	movs	r3, #2
   28aaa:	f88d 300c 	strb.w	r3, [sp, #12]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   28aae:	7a0b      	ldrb	r3, [r1, #8]
   28ab0:	b993      	cbnz	r3, 28ad8 <api_send+0x68>
			buf.qos = MQTT_QOS_1_AT_LEAST_ONCE;
   28ab2:	f88d 300d 	strb.w	r3, [sp, #13]
		err = nrf_cloud_send(&shadow_data);
   28ab6:	a801      	add	r0, sp, #4
   28ab8:	f7ff ff7a 	bl	289b0 <nrf_cloud_send>
		if (err) {
   28abc:	4604      	mov	r4, r0
   28abe:	b1c8      	cbz	r0, 28af4 <api_send+0x84>
   28ac0:	4b15      	ldr	r3, [pc, #84]	; (28b18 <api_send+0xa8>)
   28ac2:	4816      	ldr	r0, [pc, #88]	; (28b1c <api_send+0xac>)
			LOG_ERR("nrf_cloud_send failed, error: %d", err);
   28ac4:	4622      	mov	r2, r4
   28ac6:	1ac0      	subs	r0, r0, r3
   28ac8:	08c0      	lsrs	r0, r0, #3
   28aca:	0180      	lsls	r0, r0, #6
   28acc:	4916      	ldr	r1, [pc, #88]	; (28b28 <api_send+0xb8>)
   28ace:	f040 0001 	orr.w	r0, r0, #1
   28ad2:	f010 fdfc 	bl	396ce <log_string_sync>
			return err;
   28ad6:	e00d      	b.n	28af4 <api_send+0x84>
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   28ad8:	2b01      	cmp	r3, #1
   28ada:	d0ea      	beq.n	28ab2 <api_send+0x42>
   28adc:	4b0e      	ldr	r3, [pc, #56]	; (28b18 <api_send+0xa8>)
   28ade:	480f      	ldr	r0, [pc, #60]	; (28b1c <api_send+0xac>)
			LOG_ERR("Unsupported QoS setting.");
   28ae0:	4912      	ldr	r1, [pc, #72]	; (28b2c <api_send+0xbc>)
   28ae2:	1ac0      	subs	r0, r0, r3
   28ae4:	08c0      	lsrs	r0, r0, #3
   28ae6:	0180      	lsls	r0, r0, #6
   28ae8:	f040 0001 	orr.w	r0, r0, #1
   28aec:	f010 fdef 	bl	396ce <log_string_sync>
			return err;
   28af0:	f06f 0415 	mvn.w	r4, #21
		return err;
	}

	return 0;
}
   28af4:	4620      	mov	r0, r4
   28af6:	b004      	add	sp, #16
   28af8:	bd10      	pop	{r4, pc}
		struct nrf_cloud_tx_data shadow_data = {
   28afa:	684a      	ldr	r2, [r1, #4]
   28afc:	f8ad 400d 	strh.w	r4, [sp, #13]
   28b00:	9201      	str	r2, [sp, #4]
   28b02:	680a      	ldr	r2, [r1, #0]
   28b04:	f88d 400f 	strb.w	r4, [sp, #15]
   28b08:	9202      	str	r2, [sp, #8]
   28b0a:	f88d 300c 	strb.w	r3, [sp, #12]
   28b0e:	e7d2      	b.n	28ab6 <api_send+0x46>
		return -ENOTSUP;
   28b10:	f06f 0485 	mvn.w	r4, #133	; 0x85
   28b14:	e7ee      	b.n	28af4 <api_send+0x84>
   28b16:	bf00      	nop
   28b18:	0003f5a4 	.word	0x0003f5a4
   28b1c:	0003f684 	.word	0x0003f684
   28b20:	00042b90 	.word	0x00042b90
   28b24:	00042c37 	.word	0x00042c37
   28b28:	00042b6f 	.word	0x00042b6f
   28b2c:	00042b43 	.word	0x00042b43

00028b30 <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   28b30:	4b01      	ldr	r3, [pc, #4]	; (28b38 <nct_input+0x8>)
   28b32:	7819      	ldrb	r1, [r3, #0]
   28b34:	f000 bbc4 	b.w	292c0 <nfsm_handle_incoming_event>
   28b38:	2001d5a9 	.word	0x2001d5a9

00028b3c <nct_apply_update>:
	app_event_handler(evt);
   28b3c:	4b01      	ldr	r3, [pc, #4]	; (28b44 <nct_apply_update+0x8>)
   28b3e:	681b      	ldr	r3, [r3, #0]
   28b40:	4718      	bx	r3
   28b42:	bf00      	nop
   28b44:	20017834 	.word	0x20017834

00028b48 <nrf_cloud_decode_desired_obj>:
{
   28b48:	b538      	push	{r3, r4, r5, lr}
   28b4a:	460c      	mov	r4, r1
	if ((root_obj != NULL) && (desired_obj != NULL)) {
   28b4c:	4605      	mov	r5, r0
   28b4e:	b140      	cbz	r0, 28b62 <nrf_cloud_decode_desired_obj+0x1a>
		state_obj = json_object_decode(root_obj, "state");
   28b50:	4904      	ldr	r1, [pc, #16]	; (28b64 <nrf_cloud_decode_desired_obj+0x1c>)
   28b52:	f013 fa63 	bl	3c01c <json_object_decode>
		if (state_obj == NULL) {
   28b56:	b918      	cbnz	r0, 28b60 <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, "desired");
   28b58:	4628      	mov	r0, r5
   28b5a:	4903      	ldr	r1, [pc, #12]	; (28b68 <nrf_cloud_decode_desired_obj+0x20>)
   28b5c:	f013 fa5e 	bl	3c01c <json_object_decode>
			*desired_obj = state_obj;
   28b60:	6020      	str	r0, [r4, #0]
}
   28b62:	bd38      	pop	{r3, r4, r5, pc}
   28b64:	00042c40 	.word	0x00042c40
   28b68:	00042c46 	.word	0x00042c46

00028b6c <nrf_cloud_decode_requested_state>:
{
   28b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28b6e:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   28b70:	460f      	mov	r7, r1
   28b72:	b949      	cbnz	r1, 28b88 <nrf_cloud_decode_requested_state+0x1c>
   28b74:	494e      	ldr	r1, [pc, #312]	; (28cb0 <nrf_cloud_decode_requested_state+0x144>)
   28b76:	484f      	ldr	r0, [pc, #316]	; (28cb4 <nrf_cloud_decode_requested_state+0x148>)
   28b78:	23cb      	movs	r3, #203	; 0xcb
   28b7a:	4a4f      	ldr	r2, [pc, #316]	; (28cb8 <nrf_cloud_decode_requested_state+0x14c>)
   28b7c:	f010 fad9 	bl	39132 <printk>
   28b80:	21cb      	movs	r1, #203	; 0xcb
   28b82:	484d      	ldr	r0, [pc, #308]	; (28cb8 <nrf_cloud_decode_requested_state+0x14c>)
   28b84:	f010 fd74 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   28b88:	b94e      	cbnz	r6, 28b9e <nrf_cloud_decode_requested_state+0x32>
   28b8a:	494c      	ldr	r1, [pc, #304]	; (28cbc <nrf_cloud_decode_requested_state+0x150>)
   28b8c:	4849      	ldr	r0, [pc, #292]	; (28cb4 <nrf_cloud_decode_requested_state+0x148>)
   28b8e:	23cc      	movs	r3, #204	; 0xcc
   28b90:	4a49      	ldr	r2, [pc, #292]	; (28cb8 <nrf_cloud_decode_requested_state+0x14c>)
   28b92:	f010 face 	bl	39132 <printk>
   28b96:	21cc      	movs	r1, #204	; 0xcc
   28b98:	4847      	ldr	r0, [pc, #284]	; (28cb8 <nrf_cloud_decode_requested_state+0x14c>)
   28b9a:	f010 fd69 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   28b9e:	6873      	ldr	r3, [r6, #4]
   28ba0:	b94b      	cbnz	r3, 28bb6 <nrf_cloud_decode_requested_state+0x4a>
   28ba2:	4947      	ldr	r1, [pc, #284]	; (28cc0 <nrf_cloud_decode_requested_state+0x154>)
   28ba4:	4843      	ldr	r0, [pc, #268]	; (28cb4 <nrf_cloud_decode_requested_state+0x148>)
   28ba6:	23cd      	movs	r3, #205	; 0xcd
   28ba8:	4a43      	ldr	r2, [pc, #268]	; (28cb8 <nrf_cloud_decode_requested_state+0x14c>)
   28baa:	f010 fac2 	bl	39132 <printk>
   28bae:	21cd      	movs	r1, #205	; 0xcd
   28bb0:	4841      	ldr	r0, [pc, #260]	; (28cb8 <nrf_cloud_decode_requested_state+0x14c>)
   28bb2:	f010 fd5d 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   28bb6:	6833      	ldr	r3, [r6, #0]
   28bb8:	b94b      	cbnz	r3, 28bce <nrf_cloud_decode_requested_state+0x62>
   28bba:	4942      	ldr	r1, [pc, #264]	; (28cc4 <nrf_cloud_decode_requested_state+0x158>)
   28bbc:	483d      	ldr	r0, [pc, #244]	; (28cb4 <nrf_cloud_decode_requested_state+0x148>)
   28bbe:	23ce      	movs	r3, #206	; 0xce
   28bc0:	4a3d      	ldr	r2, [pc, #244]	; (28cb8 <nrf_cloud_decode_requested_state+0x14c>)
   28bc2:	f010 fab6 	bl	39132 <printk>
   28bc6:	21ce      	movs	r1, #206	; 0xce
   28bc8:	483b      	ldr	r0, [pc, #236]	; (28cb8 <nrf_cloud_decode_requested_state+0x14c>)
   28bca:	f010 fd51 	bl	39670 <assert_post_action>
	root_obj = cJSON_Parse(input->ptr);
   28bce:	6870      	ldr	r0, [r6, #4]
   28bd0:	f013 fcee 	bl	3c5b0 <cJSON_Parse>
	if (root_obj == NULL) {
   28bd4:	4605      	mov	r5, r0
   28bd6:	b988      	cbnz	r0, 28bfc <nrf_cloud_decode_requested_state+0x90>
   28bd8:	4b3b      	ldr	r3, [pc, #236]	; (28cc8 <nrf_cloud_decode_requested_state+0x15c>)
   28bda:	4c3c      	ldr	r4, [pc, #240]	; (28ccc <nrf_cloud_decode_requested_state+0x160>)
   28bdc:	6870      	ldr	r0, [r6, #4]
   28bde:	1ae4      	subs	r4, r4, r3
   28be0:	f010 fd88 	bl	396f4 <z_log_strdup>
   28be4:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("cJSON_Parse failed: %s",
   28be6:	01a4      	lsls	r4, r4, #6
   28be8:	f044 0401 	orr.w	r4, r4, #1
   28bec:	4602      	mov	r2, r0
   28bee:	4938      	ldr	r1, [pc, #224]	; (28cd0 <nrf_cloud_decode_requested_state+0x164>)
   28bf0:	4620      	mov	r0, r4
   28bf2:	f010 fd6c 	bl	396ce <log_string_sync>
		return -ENOENT;
   28bf6:	f06f 0401 	mvn.w	r4, #1
   28bfa:	e00d      	b.n	28c18 <nrf_cloud_decode_requested_state+0xac>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   28bfc:	a901      	add	r1, sp, #4
   28bfe:	f7ff ffa3 	bl	28b48 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, "nrfcloud_mqtt_topic_prefix");
   28c02:	4934      	ldr	r1, [pc, #208]	; (28cd4 <nrf_cloud_decode_requested_state+0x168>)
   28c04:	9801      	ldr	r0, [sp, #4]
   28c06:	f013 fa09 	bl	3c01c <json_object_decode>
	if (topic_prefix_obj != NULL) {
   28c0a:	b140      	cbz	r0, 28c1e <nrf_cloud_decode_requested_state+0xb2>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   28c0c:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   28c0e:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   28c10:	703b      	strb	r3, [r7, #0]
		cJSON_Delete(root_obj);
   28c12:	f004 ffef 	bl	2dbf4 <cJSON_Delete>
		return 0;
   28c16:	2400      	movs	r4, #0
}
   28c18:	4620      	mov	r0, r4
   28c1a:	b003      	add	sp, #12
   28c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pairing_obj = json_object_decode(desired_obj, "pairing");
   28c1e:	492e      	ldr	r1, [pc, #184]	; (28cd8 <nrf_cloud_decode_requested_state+0x16c>)
   28c20:	9801      	ldr	r0, [sp, #4]
   28c22:	f013 f9fb 	bl	3c01c <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   28c26:	492d      	ldr	r1, [pc, #180]	; (28cdc <nrf_cloud_decode_requested_state+0x170>)
   28c28:	f013 f9f8 	bl	3c01c <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   28c2c:	b110      	cbz	r0, 28c34 <nrf_cloud_decode_requested_state+0xc8>
   28c2e:	68c3      	ldr	r3, [r0, #12]
   28c30:	2b10      	cmp	r3, #16
   28c32:	d01c      	beq.n	28c6e <nrf_cloud_decode_requested_state+0x102>
		if (cJSON_HasObjectItem(desired_obj, "config") == false) {
   28c34:	492a      	ldr	r1, [pc, #168]	; (28ce0 <nrf_cloud_decode_requested_state+0x174>)
   28c36:	9801      	ldr	r0, [sp, #4]
   28c38:	f013 fcca 	bl	3c5d0 <cJSON_HasObjectItem>
   28c3c:	b998      	cbnz	r0, 28c66 <nrf_cloud_decode_requested_state+0xfa>
   28c3e:	4b22      	ldr	r3, [pc, #136]	; (28cc8 <nrf_cloud_decode_requested_state+0x15c>)
   28c40:	4c22      	ldr	r4, [pc, #136]	; (28ccc <nrf_cloud_decode_requested_state+0x160>)
			LOG_WRN("Unhandled data received from nRF Cloud.");
   28c42:	4928      	ldr	r1, [pc, #160]	; (28ce4 <nrf_cloud_decode_requested_state+0x178>)
   28c44:	1ae4      	subs	r4, r4, r3
   28c46:	08e4      	lsrs	r4, r4, #3
   28c48:	01a4      	lsls	r4, r4, #6
   28c4a:	f044 0002 	orr.w	r0, r4, #2
			LOG_INF("Ensure device firmware is up to date.");
   28c4e:	f044 0403 	orr.w	r4, r4, #3
			LOG_WRN("Unhandled data received from nRF Cloud.");
   28c52:	f010 fd3c 	bl	396ce <log_string_sync>
			LOG_INF("Ensure device firmware is up to date.");
   28c56:	4620      	mov	r0, r4
   28c58:	4923      	ldr	r1, [pc, #140]	; (28ce8 <nrf_cloud_decode_requested_state+0x17c>)
   28c5a:	f010 fd38 	bl	396ce <log_string_sync>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   28c5e:	4620      	mov	r0, r4
   28c60:	4922      	ldr	r1, [pc, #136]	; (28cec <nrf_cloud_decode_requested_state+0x180>)
   28c62:	f010 fd34 	bl	396ce <log_string_sync>
		cJSON_Delete(root_obj);
   28c66:	4628      	mov	r0, r5
   28c68:	f004 ffc4 	bl	2dbf4 <cJSON_Delete>
   28c6c:	e7c3      	b.n	28bf6 <nrf_cloud_decode_requested_state+0x8a>
	const char *state_str = pairing_state_obj->valuestring;
   28c6e:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   28c70:	481f      	ldr	r0, [pc, #124]	; (28cf0 <nrf_cloud_decode_requested_state+0x184>)
   28c72:	f7f4 faf3 	bl	1d25c <strlen>
   28c76:	491e      	ldr	r1, [pc, #120]	; (28cf0 <nrf_cloud_decode_requested_state+0x184>)
   28c78:	4602      	mov	r2, r0
   28c7a:	4620      	mov	r0, r4
   28c7c:	f015 fb30 	bl	3e2e0 <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   28c80:	4604      	mov	r4, r0
   28c82:	b928      	cbnz	r0, 28c90 <nrf_cloud_decode_requested_state+0x124>
		(*requested_state) = STATE_UA_PIN_WAIT;
   28c84:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   28c86:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   28c88:	703b      	strb	r3, [r7, #0]
	cJSON_Delete(root_obj);
   28c8a:	f004 ffb3 	bl	2dbf4 <cJSON_Delete>
	return 0;
   28c8e:	e7c3      	b.n	28c18 <nrf_cloud_decode_requested_state+0xac>
   28c90:	4b0d      	ldr	r3, [pc, #52]	; (28cc8 <nrf_cloud_decode_requested_state+0x15c>)
   28c92:	480e      	ldr	r0, [pc, #56]	; (28ccc <nrf_cloud_decode_requested_state+0x160>)
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   28c94:	4917      	ldr	r1, [pc, #92]	; (28cf4 <nrf_cloud_decode_requested_state+0x188>)
   28c96:	1ac0      	subs	r0, r0, r3
   28c98:	08c0      	lsrs	r0, r0, #3
   28c9a:	0180      	lsls	r0, r0, #6
   28c9c:	f040 0001 	orr.w	r0, r0, #1
   28ca0:	f010 fd15 	bl	396ce <log_string_sync>
		cJSON_Delete(root_obj);
   28ca4:	4628      	mov	r0, r5
   28ca6:	f004 ffa5 	bl	2dbf4 <cJSON_Delete>
		return -ENOTSUP;
   28caa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   28cae:	e7b3      	b.n	28c18 <nrf_cloud_decode_requested_state+0xac>
   28cb0:	00042cf8 	.word	0x00042cf8
   28cb4:	0004033e 	.word	0x0004033e
   28cb8:	00042c4e 	.word	0x00042c4e
   28cbc:	00042d17 	.word	0x00042d17
   28cc0:	00042d2c 	.word	0x00042d2c
   28cc4:	00042d46 	.word	0x00042d46
   28cc8:	0003f5a4 	.word	0x0003f5a4
   28ccc:	0003f68c 	.word	0x0003f68c
   28cd0:	00042d56 	.word	0x00042d56
   28cd4:	00042d6d 	.word	0x00042d6d
   28cd8:	00042d88 	.word	0x00042d88
   28cdc:	00042c40 	.word	0x00042c40
   28ce0:	0004506a 	.word	0x0004506a
   28ce4:	00042d90 	.word	0x00042d90
   28ce8:	00042db8 	.word	0x00042db8
   28cec:	00042dde 	.word	0x00042dde
   28cf0:	00042e19 	.word	0x00042e19
   28cf4:	00042e28 	.word	0x00042e28

00028cf8 <nrf_cloud_encode_config_response>:
{
   28cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28cfc:	4604      	mov	r4, r0
   28cfe:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   28d00:	460d      	mov	r5, r1
   28d02:	b959      	cbnz	r1, 28d1c <nrf_cloud_encode_config_response+0x24>
   28d04:	494e      	ldr	r1, [pc, #312]	; (28e40 <nrf_cloud_encode_config_response+0x148>)
   28d06:	484f      	ldr	r0, [pc, #316]	; (28e44 <nrf_cloud_encode_config_response+0x14c>)
   28d08:	f240 1307 	movw	r3, #263	; 0x107
   28d0c:	4a4e      	ldr	r2, [pc, #312]	; (28e48 <nrf_cloud_encode_config_response+0x150>)
   28d0e:	f010 fa10 	bl	39132 <printk>
   28d12:	f240 1107 	movw	r1, #263	; 0x107
   28d16:	484c      	ldr	r0, [pc, #304]	; (28e48 <nrf_cloud_encode_config_response+0x150>)
   28d18:	f010 fcaa 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   28d1c:	2c00      	cmp	r4, #0
   28d1e:	d164      	bne.n	28dea <nrf_cloud_encode_config_response+0xf2>
   28d20:	494a      	ldr	r1, [pc, #296]	; (28e4c <nrf_cloud_encode_config_response+0x154>)
   28d22:	4848      	ldr	r0, [pc, #288]	; (28e44 <nrf_cloud_encode_config_response+0x14c>)
   28d24:	f44f 7384 	mov.w	r3, #264	; 0x108
   28d28:	4a47      	ldr	r2, [pc, #284]	; (28e48 <nrf_cloud_encode_config_response+0x150>)
   28d2a:	f010 fa02 	bl	39132 <printk>
   28d2e:	f44f 7184 	mov.w	r1, #264	; 0x108
   28d32:	4845      	ldr	r0, [pc, #276]	; (28e48 <nrf_cloud_encode_config_response+0x150>)
   28d34:	f010 fc9c 	bl	39670 <assert_post_action>
		return -ESRCH; /* invalid input or no JSON parsed */
   28d38:	f06f 0002 	mvn.w	r0, #2
   28d3c:	e07d      	b.n	28e3a <nrf_cloud_encode_config_response+0x142>
	root_obj = cJSON_CreateObject();
   28d3e:	f005 f81b 	bl	2dd78 <cJSON_CreateObject>
   28d42:	4606      	mov	r6, r0
	desired_obj = cJSON_CreateObject();
   28d44:	f005 f818 	bl	2dd78 <cJSON_CreateObject>
   28d48:	4680      	mov	r8, r0
	null_obj = cJSON_CreateNull();
   28d4a:	f004 ffe5 	bl	2dd18 <cJSON_CreateNull>
   28d4e:	4681      	mov	r9, r0
	reported_obj = cJSON_CreateObject();
   28d50:	f005 f812 	bl	2dd78 <cJSON_CreateObject>
   28d54:	4682      	mov	sl, r0
	if ((root_obj == NULL) || (desired_obj == NULL) || (null_obj == NULL) ||
   28d56:	b136      	cbz	r6, 28d66 <nrf_cloud_encode_config_response+0x6e>
   28d58:	f1b8 0f00 	cmp.w	r8, #0
   28d5c:	d003      	beq.n	28d66 <nrf_cloud_encode_config_response+0x6e>
   28d5e:	f1b9 0f00 	cmp.w	r9, #0
   28d62:	d000      	beq.n	28d66 <nrf_cloud_encode_config_response+0x6e>
   28d64:	b9a0      	cbnz	r0, 28d90 <nrf_cloud_encode_config_response+0x98>
		cJSON_Delete(root_obj);
   28d66:	4630      	mov	r0, r6
   28d68:	f004 ff44 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(desired_obj);
   28d6c:	4640      	mov	r0, r8
   28d6e:	f004 ff41 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(null_obj);
   28d72:	4648      	mov	r0, r9
   28d74:	f004 ff3e 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   28d78:	4650      	mov	r0, sl
   28d7a:	f004 ff3b 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(config_obj);
   28d7e:	4638      	mov	r0, r7
   28d80:	f004 ff38 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   28d84:	4620      	mov	r0, r4
   28d86:	f004 ff35 	bl	2dbf4 <cJSON_Delete>
		return -ENOMEM;
   28d8a:	f06f 000b 	mvn.w	r0, #11
   28d8e:	e054      	b.n	28e3a <nrf_cloud_encode_config_response+0x142>
	cJSON_AddItemToObject(parent, str, item);
   28d90:	463a      	mov	r2, r7
   28d92:	492f      	ldr	r1, [pc, #188]	; (28e50 <nrf_cloud_encode_config_response+0x158>)
   28d94:	f013 fc25 	bl	3c5e2 <cJSON_AddItemToObject>
   28d98:	4652      	mov	r2, sl
   28d9a:	492e      	ldr	r1, [pc, #184]	; (28e54 <nrf_cloud_encode_config_response+0x15c>)
   28d9c:	4630      	mov	r0, r6
   28d9e:	f013 fc20 	bl	3c5e2 <cJSON_AddItemToObject>
   28da2:	464a      	mov	r2, r9
   28da4:	492a      	ldr	r1, [pc, #168]	; (28e50 <nrf_cloud_encode_config_response+0x158>)
   28da6:	4640      	mov	r0, r8
   28da8:	f013 fc1b 	bl	3c5e2 <cJSON_AddItemToObject>
   28dac:	4642      	mov	r2, r8
   28dae:	492a      	ldr	r1, [pc, #168]	; (28e58 <nrf_cloud_encode_config_response+0x160>)
   28db0:	4630      	mov	r0, r6
   28db2:	f013 fc16 	bl	3c5e2 <cJSON_AddItemToObject>
	cJSON_Delete(state_obj);
   28db6:	4620      	mov	r0, r4
   28db8:	f004 ff1c 	bl	2dbf4 <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   28dbc:	f004 ffdc 	bl	2dd78 <cJSON_CreateObject>
   28dc0:	4607      	mov	r7, r0
	cJSON_AddItemToObject(parent, str, item);
   28dc2:	4632      	mov	r2, r6
   28dc4:	4925      	ldr	r1, [pc, #148]	; (28e5c <nrf_cloud_encode_config_response+0x164>)
   28dc6:	f013 fc0c 	bl	3c5e2 <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(state_obj);
   28dca:	4638      	mov	r0, r7
   28dcc:	f013 fbf4 	bl	3c5b8 <cJSON_PrintUnformatted>
   28dd0:	4604      	mov	r4, r0
	cJSON_Delete(state_obj);
   28dd2:	4638      	mov	r0, r7
   28dd4:	f004 ff0e 	bl	2dbf4 <cJSON_Delete>
	if (buffer == NULL) {
   28dd8:	2c00      	cmp	r4, #0
   28dda:	d0d6      	beq.n	28d8a <nrf_cloud_encode_config_response+0x92>
	output->len = strlen(buffer);
   28ddc:	4620      	mov	r0, r4
	output->ptr = buffer;
   28dde:	606c      	str	r4, [r5, #4]
	output->len = strlen(buffer);
   28de0:	f7f4 fa3c 	bl	1d25c <strlen>
   28de4:	6028      	str	r0, [r5, #0]
	return 0;
   28de6:	2000      	movs	r0, #0
   28de8:	e027      	b.n	28e3a <nrf_cloud_encode_config_response+0x142>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   28dea:	6860      	ldr	r0, [r4, #4]
   28dec:	f013 fbe0 	bl	3c5b0 <cJSON_Parse>
	if (input_obj == NULL) {
   28df0:	4606      	mov	r6, r0
   28df2:	2800      	cmp	r0, #0
   28df4:	d0a0      	beq.n	28d38 <nrf_cloud_encode_config_response+0x40>
	state_obj = cJSON_DetachItemFromObject(input_obj, "state");
   28df6:	4919      	ldr	r1, [pc, #100]	; (28e5c <nrf_cloud_encode_config_response+0x164>)
   28df8:	f013 fc12 	bl	3c620 <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   28dfc:	1e04      	subs	r4, r0, #0
   28dfe:	bf14      	ite	ne
   28e00:	4620      	movne	r0, r4
   28e02:	4630      	moveq	r0, r6
   28e04:	4912      	ldr	r1, [pc, #72]	; (28e50 <nrf_cloud_encode_config_response+0x158>)
   28e06:	f013 fc0b 	bl	3c620 <cJSON_DetachItemFromObject>
   28e0a:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   28e0c:	4630      	mov	r0, r6
   28e0e:	f004 fef1 	bl	2dbf4 <cJSON_Delete>
	if (has_config) {
   28e12:	f1b8 0f00 	cmp.w	r8, #0
   28e16:	d004      	beq.n	28e22 <nrf_cloud_encode_config_response+0x12a>
		*has_config = (config_obj != NULL);
   28e18:	1e3b      	subs	r3, r7, #0
   28e1a:	bf18      	it	ne
   28e1c:	2301      	movne	r3, #1
   28e1e:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   28e22:	b10c      	cbz	r4, 28e28 <nrf_cloud_encode_config_response+0x130>
   28e24:	2f00      	cmp	r7, #0
   28e26:	d18a      	bne.n	28d3e <nrf_cloud_encode_config_response+0x46>
		cJSON_Delete(state_obj);
   28e28:	4620      	mov	r0, r4
   28e2a:	f004 fee3 	bl	2dbf4 <cJSON_Delete>
		cJSON_Delete(config_obj);
   28e2e:	4638      	mov	r0, r7
   28e30:	f004 fee0 	bl	2dbf4 <cJSON_Delete>
		output->ptr = NULL;
   28e34:	2000      	movs	r0, #0
		output->len = 0;
   28e36:	e9c5 0000 	strd	r0, r0, [r5]
}
   28e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28e3e:	bf00      	nop
   28e40:	00042cd9 	.word	0x00042cd9
   28e44:	0004033e 	.word	0x0004033e
   28e48:	00042c4e 	.word	0x00042c4e
   28e4c:	00042d17 	.word	0x00042d17
   28e50:	0004506a 	.word	0x0004506a
   28e54:	00042cef 	.word	0x00042cef
   28e58:	00042c46 	.word	0x00042c46
   28e5c:	00042c40 	.word	0x00042c40

00028e60 <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   28e60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   28e64:	4688      	mov	r8, r1
   28e66:	4617      	mov	r7, r2
   28e68:	4699      	mov	r9, r3
	__ASSERT_NO_MSG(input != NULL);
   28e6a:	4604      	mov	r4, r0
   28e6c:	b958      	cbnz	r0, 28e86 <nrf_cloud_decode_data_endpoint+0x26>
   28e6e:	4950      	ldr	r1, [pc, #320]	; (28fb0 <nrf_cloud_decode_data_endpoint+0x150>)
   28e70:	4850      	ldr	r0, [pc, #320]	; (28fb4 <nrf_cloud_decode_data_endpoint+0x154>)
   28e72:	f240 13d9 	movw	r3, #473	; 0x1d9
   28e76:	4a50      	ldr	r2, [pc, #320]	; (28fb8 <nrf_cloud_decode_data_endpoint+0x158>)
   28e78:	f010 f95b 	bl	39132 <printk>
   28e7c:	f240 11d9 	movw	r1, #473	; 0x1d9
   28e80:	484d      	ldr	r0, [pc, #308]	; (28fb8 <nrf_cloud_decode_data_endpoint+0x158>)
   28e82:	f010 fbf5 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   28e86:	6863      	ldr	r3, [r4, #4]
   28e88:	b95b      	cbnz	r3, 28ea2 <nrf_cloud_decode_data_endpoint+0x42>
   28e8a:	494c      	ldr	r1, [pc, #304]	; (28fbc <nrf_cloud_decode_data_endpoint+0x15c>)
   28e8c:	4849      	ldr	r0, [pc, #292]	; (28fb4 <nrf_cloud_decode_data_endpoint+0x154>)
   28e8e:	f44f 73ed 	mov.w	r3, #474	; 0x1da
   28e92:	4a49      	ldr	r2, [pc, #292]	; (28fb8 <nrf_cloud_decode_data_endpoint+0x158>)
   28e94:	f010 f94d 	bl	39132 <printk>
   28e98:	f44f 71ed 	mov.w	r1, #474	; 0x1da
   28e9c:	4846      	ldr	r0, [pc, #280]	; (28fb8 <nrf_cloud_decode_data_endpoint+0x158>)
   28e9e:	f010 fbe7 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   28ea2:	6823      	ldr	r3, [r4, #0]
   28ea4:	b95b      	cbnz	r3, 28ebe <nrf_cloud_decode_data_endpoint+0x5e>
   28ea6:	4946      	ldr	r1, [pc, #280]	; (28fc0 <nrf_cloud_decode_data_endpoint+0x160>)
   28ea8:	4842      	ldr	r0, [pc, #264]	; (28fb4 <nrf_cloud_decode_data_endpoint+0x154>)
   28eaa:	f240 13db 	movw	r3, #475	; 0x1db
   28eae:	4a42      	ldr	r2, [pc, #264]	; (28fb8 <nrf_cloud_decode_data_endpoint+0x158>)
   28eb0:	f010 f93f 	bl	39132 <printk>
   28eb4:	f240 11db 	movw	r1, #475	; 0x1db
   28eb8:	483f      	ldr	r0, [pc, #252]	; (28fb8 <nrf_cloud_decode_data_endpoint+0x158>)
   28eba:	f010 fbd9 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   28ebe:	f1b8 0f00 	cmp.w	r8, #0
   28ec2:	d10b      	bne.n	28edc <nrf_cloud_decode_data_endpoint+0x7c>
   28ec4:	493f      	ldr	r1, [pc, #252]	; (28fc4 <nrf_cloud_decode_data_endpoint+0x164>)
   28ec6:	483b      	ldr	r0, [pc, #236]	; (28fb4 <nrf_cloud_decode_data_endpoint+0x154>)
   28ec8:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
   28ecc:	4a3a      	ldr	r2, [pc, #232]	; (28fb8 <nrf_cloud_decode_data_endpoint+0x158>)
   28ece:	f010 f930 	bl	39132 <printk>
   28ed2:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
   28ed6:	4838      	ldr	r0, [pc, #224]	; (28fb8 <nrf_cloud_decode_data_endpoint+0x158>)
   28ed8:	f010 fbca 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   28edc:	b95f      	cbnz	r7, 28ef6 <nrf_cloud_decode_data_endpoint+0x96>
   28ede:	493a      	ldr	r1, [pc, #232]	; (28fc8 <nrf_cloud_decode_data_endpoint+0x168>)
   28ee0:	4834      	ldr	r0, [pc, #208]	; (28fb4 <nrf_cloud_decode_data_endpoint+0x154>)
   28ee2:	f240 13dd 	movw	r3, #477	; 0x1dd
   28ee6:	4a34      	ldr	r2, [pc, #208]	; (28fb8 <nrf_cloud_decode_data_endpoint+0x158>)
   28ee8:	f010 f923 	bl	39132 <printk>
   28eec:	f240 11dd 	movw	r1, #477	; 0x1dd
   28ef0:	4831      	ldr	r0, [pc, #196]	; (28fb8 <nrf_cloud_decode_data_endpoint+0x158>)
   28ef2:	f010 fbbd 	bl	39670 <assert_post_action>

	int err;
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *desired_obj = NULL;
   28ef6:	2300      	movs	r3, #0

	root_obj = cJSON_Parse(input->ptr);
   28ef8:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   28efa:	9301      	str	r3, [sp, #4]
	root_obj = cJSON_Parse(input->ptr);
   28efc:	f013 fb58 	bl	3c5b0 <cJSON_Parse>
	if (root_obj == NULL) {
   28f00:	4605      	mov	r5, r0
   28f02:	b318      	cbz	r0, 28f4c <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   28f04:	a901      	add	r1, sp, #4
   28f06:	f7ff fe1f 	bl	28b48 <nrf_cloud_decode_desired_obj>

	if (m_endpoint != NULL) {
   28f0a:	f1b9 0f00 	cmp.w	r9, #0
   28f0e:	d020      	beq.n	28f52 <nrf_cloud_decode_data_endpoint+0xf2>
		m_endpoint_obj = json_object_decode(
   28f10:	492e      	ldr	r1, [pc, #184]	; (28fcc <nrf_cloud_decode_data_endpoint+0x16c>)
   28f12:	9801      	ldr	r0, [sp, #4]
   28f14:	f013 f882 	bl	3c01c <json_object_decode>
   28f18:	4604      	mov	r4, r0
			desired_obj, "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   28f1a:	492d      	ldr	r1, [pc, #180]	; (28fd0 <nrf_cloud_decode_data_endpoint+0x170>)
   28f1c:	9801      	ldr	r0, [sp, #4]
   28f1e:	f013 f87d 	bl	3c01c <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   28f22:	492c      	ldr	r1, [pc, #176]	; (28fd4 <nrf_cloud_decode_data_endpoint+0x174>)
	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   28f24:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   28f26:	f013 f879 	bl	3c01c <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   28f2a:	492b      	ldr	r1, [pc, #172]	; (28fd8 <nrf_cloud_decode_data_endpoint+0x178>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   28f2c:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   28f2e:	4630      	mov	r0, r6
   28f30:	f013 f874 	bl	3c01c <json_object_decode>
   28f34:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   28f36:	f1ba 0f00 	cmp.w	sl, #0
   28f3a:	d004      	beq.n	28f46 <nrf_cloud_decode_data_endpoint+0xe6>
   28f3c:	b118      	cbz	r0, 28f46 <nrf_cloud_decode_data_endpoint+0xe6>
   28f3e:	f8da 300c 	ldr.w	r3, [sl, #12]
   28f42:	2b10      	cmp	r3, #16
   28f44:	d007      	beq.n	28f56 <nrf_cloud_decode_data_endpoint+0xf6>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   28f46:	4628      	mov	r0, r5
   28f48:	f004 fe54 	bl	2dbf4 <cJSON_Delete>
		return -ENOENT;
   28f4c:	f06f 0401 	mvn.w	r4, #1
   28f50:	e017      	b.n	28f82 <nrf_cloud_decode_data_endpoint+0x122>
	cJSON *m_endpoint_obj = NULL;
   28f52:	464c      	mov	r4, r9
   28f54:	e7e1      	b.n	28f1a <nrf_cloud_decode_data_endpoint+0xba>
	return !strncmp(s1, s2, strlen(s2));
   28f56:	4821      	ldr	r0, [pc, #132]	; (28fdc <nrf_cloud_decode_data_endpoint+0x17c>)
	const char *state_str = pairing_state_obj->valuestring;
   28f58:	f8da a010 	ldr.w	sl, [sl, #16]
	return !strncmp(s1, s2, strlen(s2));
   28f5c:	f7f4 f97e 	bl	1d25c <strlen>
   28f60:	491e      	ldr	r1, [pc, #120]	; (28fdc <nrf_cloud_decode_data_endpoint+0x17c>)
   28f62:	4602      	mov	r2, r0
   28f64:	4650      	mov	r0, sl
   28f66:	f015 f9bb 	bl	3e2e0 <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   28f6a:	2800      	cmp	r0, #0
   28f6c:	d1eb      	bne.n	28f46 <nrf_cloud_decode_data_endpoint+0xe6>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   28f6e:	b164      	cbz	r4, 28f8a <nrf_cloud_decode_data_endpoint+0x12a>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   28f70:	4620      	mov	r0, r4
   28f72:	4649      	mov	r1, r9
   28f74:	f013 f867 	bl	3c046 <json_decode_and_alloc>
		if (err) {
   28f78:	4604      	mov	r4, r0
   28f7a:	b130      	cbz	r0, 28f8a <nrf_cloud_decode_data_endpoint+0x12a>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   28f7c:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   28f7e:	f004 fe39 	bl	2dbf4 <cJSON_Delete>

	return err;
}
   28f82:	4620      	mov	r0, r4
   28f84:	b002      	add	sp, #8
   28f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   28f8a:	4915      	ldr	r1, [pc, #84]	; (28fe0 <nrf_cloud_decode_data_endpoint+0x180>)
   28f8c:	4630      	mov	r0, r6
   28f8e:	f013 f845 	bl	3c01c <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   28f92:	4641      	mov	r1, r8
   28f94:	f013 f857 	bl	3c046 <json_decode_and_alloc>
	if (err) {
   28f98:	4604      	mov	r4, r0
   28f9a:	2800      	cmp	r0, #0
   28f9c:	d1ee      	bne.n	28f7c <nrf_cloud_decode_data_endpoint+0x11c>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   28f9e:	4911      	ldr	r1, [pc, #68]	; (28fe4 <nrf_cloud_decode_data_endpoint+0x184>)
   28fa0:	4630      	mov	r0, r6
   28fa2:	f013 f83b 	bl	3c01c <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   28fa6:	4639      	mov	r1, r7
   28fa8:	f013 f84d 	bl	3c046 <json_decode_and_alloc>
	if (err) {
   28fac:	4604      	mov	r4, r0
   28fae:	e7e5      	b.n	28f7c <nrf_cloud_decode_data_endpoint+0x11c>
   28fb0:	00042d17 	.word	0x00042d17
   28fb4:	0004033e 	.word	0x0004033e
   28fb8:	00042c4e 	.word	0x00042c4e
   28fbc:	00042d2c 	.word	0x00042d2c
   28fc0:	00042d46 	.word	0x00042d46
   28fc4:	00042eb5 	.word	0x00042eb5
   28fc8:	00042ed0 	.word	0x00042ed0
   28fcc:	00042d6d 	.word	0x00042d6d
   28fd0:	00042d88 	.word	0x00042d88
   28fd4:	00042c40 	.word	0x00042c40
   28fd8:	00042e81 	.word	0x00042e81
   28fdc:	00042e98 	.word	0x00042e98
   28fe0:	00042ead 	.word	0x00042ead
   28fe4:	00042eb1 	.word	0x00042eb1

00028fe8 <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   28fe8:	b510      	push	{r4, lr}
   28fea:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct nct_cc_data msg = {
   28fec:	2218      	movs	r2, #24
   28fee:	2100      	movs	r1, #0
   28ff0:	4668      	mov	r0, sp
   28ff2:	f014 ffda 	bl	3dfaa <memset>
   28ff6:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.id = DEFAULT_REPORT_ID,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   28ff8:	4669      	mov	r1, sp
   28ffa:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   28ffc:	9304      	str	r3, [sp, #16]
   28ffe:	f88d 3014 	strb.w	r3, [sp, #20]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   29002:	f7f4 fa5d 	bl	1d4c0 <nrf_cloud_encode_state>
	if (err) {
   29006:	4604      	mov	r4, r0
   29008:	b168      	cbz	r0, 29026 <state_ua_pin_wait+0x3e>
   2900a:	4819      	ldr	r0, [pc, #100]	; (29070 <state_ua_pin_wait+0x88>)
   2900c:	4b19      	ldr	r3, [pc, #100]	; (29074 <state_ua_pin_wait+0x8c>)
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2900e:	4622      	mov	r2, r4
   29010:	1ac0      	subs	r0, r0, r3
   29012:	08c0      	lsrs	r0, r0, #3
   29014:	0180      	lsls	r0, r0, #6
   29016:	4918      	ldr	r1, [pc, #96]	; (29078 <state_ua_pin_wait+0x90>)
   29018:	f040 0001 	orr.w	r0, r0, #1
   2901c:	f010 fb57 	bl	396ce <log_string_sync>
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   29020:	4620      	mov	r0, r4
   29022:	b00c      	add	sp, #48	; 0x30
   29024:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   29026:	4668      	mov	r0, sp
   29028:	f000 ffb6 	bl	29f98 <nct_cc_send>
	if (err) {
   2902c:	4604      	mov	r4, r0
   2902e:	b170      	cbz	r0, 2904e <state_ua_pin_wait+0x66>
   29030:	4b10      	ldr	r3, [pc, #64]	; (29074 <state_ua_pin_wait+0x8c>)
   29032:	480f      	ldr	r0, [pc, #60]	; (29070 <state_ua_pin_wait+0x88>)
		LOG_ERR("nct_cc_send failed %d", err);
   29034:	4622      	mov	r2, r4
   29036:	1ac0      	subs	r0, r0, r3
   29038:	08c0      	lsrs	r0, r0, #3
   2903a:	0180      	lsls	r0, r0, #6
   2903c:	490f      	ldr	r1, [pc, #60]	; (2907c <state_ua_pin_wait+0x94>)
   2903e:	f040 0001 	orr.w	r0, r0, #1
   29042:	f010 fb44 	bl	396ce <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   29046:	9801      	ldr	r0, [sp, #4]
   29048:	f014 ff4c 	bl	3dee4 <k_free>
		return err;
   2904c:	e7e8      	b.n	29020 <state_ua_pin_wait+0x38>
	nrf_cloud_free((void *)msg.data.ptr);
   2904e:	9801      	ldr	r0, [sp, #4]
   29050:	f014 ff48 	bl	3dee4 <k_free>
	struct nrf_cloud_evt evt = {
   29054:	2218      	movs	r2, #24
   29056:	4621      	mov	r1, r4
   29058:	eb0d 0002 	add.w	r0, sp, r2
   2905c:	f014 ffa5 	bl	3dfaa <memset>
   29060:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   29062:	2006      	movs	r0, #6
   29064:	a906      	add	r1, sp, #24
	struct nrf_cloud_evt evt = {
   29066:	f88d 3018 	strb.w	r3, [sp, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2906a:	f7ff fb01 	bl	28670 <nfsm_set_current_state_and_notify>
	return 0;
   2906e:	e7d7      	b.n	29020 <state_ua_pin_wait+0x38>
   29070:	0003f69c 	.word	0x0003f69c
   29074:	0003f5a4 	.word	0x0003f5a4
   29078:	00042f35 	.word	0x00042f35
   2907c:	00042f56 	.word	0x00042f56

00029080 <cc_connection_handler>:

	return 0;
}

static int cc_connection_handler(const struct nct_evt *nct_evt)
{
   29080:	b510      	push	{r4, lr}
   29082:	4604      	mov	r4, r0
   29084:	b086      	sub	sp, #24
		.opcode = NCT_CC_OPCODE_GET_REQ,
		.id = CLOUD_STATE_REQ_ID,
	};

	int err;
	const struct nrf_cloud_evt evt = {
   29086:	2100      	movs	r1, #0
   29088:	2218      	movs	r2, #24
   2908a:	4668      	mov	r0, sp
   2908c:	f014 ff8d 	bl	3dfaa <memset>
   29090:	23ff      	movs	r3, #255	; 0xff
		.type = NRF_CLOUD_EVT_ERROR,
	};

	if (nct_evt->status != 0) {
   29092:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   29094:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   29098:	b139      	cbz	r1, 290aa <cc_connection_handler+0x2a>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   2909a:	4669      	mov	r1, sp
   2909c:	200c      	movs	r0, #12
   2909e:	f7ff fae7 	bl	28670 <nfsm_set_current_state_and_notify>
		return 0;
   290a2:	2400      	movs	r4, #0
	}

	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);

	return 0;
}
   290a4:	4620      	mov	r0, r4
   290a6:	b006      	add	sp, #24
   290a8:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   290aa:	2004      	movs	r0, #4
   290ac:	f7ff fae0 	bl	28670 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   290b0:	4806      	ldr	r0, [pc, #24]	; (290cc <cc_connection_handler+0x4c>)
   290b2:	f000 ff71 	bl	29f98 <nct_cc_send>
	if (err) {
   290b6:	4604      	mov	r4, r0
   290b8:	b120      	cbz	r0, 290c4 <cc_connection_handler+0x44>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   290ba:	4669      	mov	r1, sp
   290bc:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   290be:	f7ff fad7 	bl	28670 <nfsm_set_current_state_and_notify>
	return 0;
   290c2:	e7ef      	b.n	290a4 <cc_connection_handler+0x24>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   290c4:	4601      	mov	r1, r0
   290c6:	2005      	movs	r0, #5
   290c8:	e7f9      	b.n	290be <cc_connection_handler+0x3e>
   290ca:	bf00      	nop
   290cc:	0003fed4 	.word	0x0003fed4

000290d0 <cc_rx_data_handler>:

	return state_ua_pin_complete();
}

static int cc_rx_data_handler(const struct nct_evt *nct_evt)
{
   290d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	enum nfsm_state new_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
	bool config_found = false;
   290d2:	2700      	movs	r7, #0
{
   290d4:	b095      	sub	sp, #84	; 0x54
   290d6:	4606      	mov	r6, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   290d8:	6844      	ldr	r4, [r0, #4]
	bool config_found = false;
   290da:	f88d 7007 	strb.w	r7, [sp, #7]
	const enum nfsm_state current_state = nfsm_get_current_state();
   290de:	f7ff fac1 	bl	28664 <nfsm_get_current_state>
	struct nct_cc_data msg = {
   290e2:	2218      	movs	r2, #24
   290e4:	4639      	mov	r1, r7
	const enum nfsm_state current_state = nfsm_get_current_state();
   290e6:	4605      	mov	r5, r0
	struct nct_cc_data msg = {
   290e8:	a808      	add	r0, sp, #32
   290ea:	f014 ff5e 	bl	3dfaa <memset>
   290ee:	2301      	movs	r3, #1
	struct nrf_cloud_evt cloud_evt = {
   290f0:	2218      	movs	r2, #24
   290f2:	4639      	mov	r1, r7
   290f4:	a80e      	add	r0, sp, #56	; 0x38
	struct nct_cc_data msg = {
   290f6:	930c      	str	r3, [sp, #48]	; 0x30
   290f8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	struct nrf_cloud_evt cloud_evt = {
   290fc:	f014 ff55 	bl	3dfaa <memset>
   29100:	2307      	movs	r3, #7
	if (evt->param.cc == NULL) {
   29102:	6870      	ldr	r0, [r6, #4]
	struct nrf_cloud_evt cloud_evt = {
   29104:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (evt->param.cc == NULL) {
   29108:	b190      	cbz	r0, 29130 <cc_rx_data_handler+0x60>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   2910a:	eb0d 0203 	add.w	r2, sp, r3
   2910e:	a908      	add	r1, sp, #32
   29110:	f7ff fdf2 	bl	28cf8 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   29114:	b328      	cbz	r0, 29162 <cc_rx_data_handler+0x92>
   29116:	1cc3      	adds	r3, r0, #3
   29118:	d023      	beq.n	29162 <cc_rx_data_handler+0x92>
   2911a:	4a5f      	ldr	r2, [pc, #380]	; (29298 <cc_rx_data_handler+0x1c8>)
   2911c:	4b5f      	ldr	r3, [pc, #380]	; (2929c <cc_rx_data_handler+0x1cc>)
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   2911e:	4960      	ldr	r1, [pc, #384]	; (292a0 <cc_rx_data_handler+0x1d0>)
   29120:	1a9b      	subs	r3, r3, r2
   29122:	08db      	lsrs	r3, r3, #3
   29124:	019b      	lsls	r3, r3, #6
   29126:	4602      	mov	r2, r0
   29128:	f043 0001 	orr.w	r0, r3, #1
   2912c:	f010 facf 	bl	396ce <log_string_sync>

	handle_device_config_update(nct_evt, &config_found);

	err = nrf_cloud_decode_requested_state(payload, &new_state);
   29130:	4620      	mov	r0, r4
   29132:	f10d 0106 	add.w	r1, sp, #6
   29136:	f7ff fd19 	bl	28b6c <nrf_cloud_decode_requested_state>

	if (err) {
   2913a:	4604      	mov	r4, r0
   2913c:	2800      	cmp	r0, #0
   2913e:	d03a      	beq.n	291b6 <cc_rx_data_handler+0xe6>
		if (!config_found) {
   29140:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29144:	2b00      	cmp	r3, #0
   29146:	f040 80a4 	bne.w	29292 <cc_rx_data_handler+0x1c2>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   2914a:	4622      	mov	r2, r4
   2914c:	4853      	ldr	r0, [pc, #332]	; (2929c <cc_rx_data_handler+0x1cc>)
   2914e:	4b52      	ldr	r3, [pc, #328]	; (29298 <cc_rx_data_handler+0x1c8>)
   29150:	4954      	ldr	r1, [pc, #336]	; (292a4 <cc_rx_data_handler+0x1d4>)
   29152:	1ac0      	subs	r0, r0, r3
   29154:	08c0      	lsrs	r0, r0, #3
   29156:	0180      	lsls	r0, r0, #6
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   29158:	f040 0001 	orr.w	r0, r0, #1
   2915c:	f010 fab7 	bl	396ce <log_string_sync>
		return err;
   29160:	e045      	b.n	291ee <cc_rx_data_handler+0x11e>
	if (*config_found == false) {
   29162:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29166:	2b00      	cmp	r3, #0
   29168:	d0e2      	beq.n	29130 <cc_rx_data_handler+0x60>
	if (msg.data.ptr) {
   2916a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2916c:	b193      	cbz	r3, 29194 <cc_rx_data_handler+0xc4>
		err = nct_cc_send(&msg);
   2916e:	a808      	add	r0, sp, #32
   29170:	f000 ff12 	bl	29f98 <nct_cc_send>
   29174:	4607      	mov	r7, r0
		nrf_cloud_free((void *)msg.data.ptr);
   29176:	9809      	ldr	r0, [sp, #36]	; 0x24
   29178:	f014 feb4 	bl	3dee4 <k_free>
		if (err) {
   2917c:	b157      	cbz	r7, 29194 <cc_rx_data_handler+0xc4>
   2917e:	4846      	ldr	r0, [pc, #280]	; (29298 <cc_rx_data_handler+0x1c8>)
   29180:	4b46      	ldr	r3, [pc, #280]	; (2929c <cc_rx_data_handler+0x1cc>)
			LOG_ERR("nct_cc_send failed %d", err);
   29182:	463a      	mov	r2, r7
   29184:	1a1b      	subs	r3, r3, r0
   29186:	08db      	lsrs	r3, r3, #3
   29188:	019b      	lsls	r3, r3, #6
   2918a:	4947      	ldr	r1, [pc, #284]	; (292a8 <cc_rx_data_handler+0x1d8>)
   2918c:	f043 0001 	orr.w	r0, r3, #1
   29190:	f010 fa9d 	bl	396ce <log_string_sync>
	cloud_evt.data = evt->param.cc->data;
   29194:	6873      	ldr	r3, [r6, #4]
   29196:	aa10      	add	r2, sp, #64	; 0x40
   29198:	e893 0003 	ldmia.w	r3, {r0, r1}
   2919c:	e882 0003 	stmia.w	r2, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   291a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   291a4:	ab14      	add	r3, sp, #80	; 0x50
   291a6:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   291aa:	f7ff fa5b 	bl	28664 <nfsm_get_current_state>
   291ae:	a90e      	add	r1, sp, #56	; 0x38
   291b0:	f7ff fa5e 	bl	28670 <nfsm_set_current_state_and_notify>
	return err;
   291b4:	e7bc      	b.n	29130 <cc_rx_data_handler+0x60>

		/* Config only, nothing else to do */
		return 0;
	}

	switch (current_state) {
   291b6:	2d07      	cmp	r5, #7
   291b8:	d815      	bhi.n	291e6 <cc_rx_data_handler+0x116>
   291ba:	2d03      	cmp	r5, #3
   291bc:	d917      	bls.n	291ee <cc_rx_data_handler+0x11e>
	case STATE_CC_CONNECTED:
	case STATE_CLOUD_STATE_REQUESTED:
	case STATE_UA_PIN_WAIT:
	case STATE_UA_PIN_COMPLETE:
		if (new_state == STATE_UA_PIN_COMPLETE) {
   291be:	f89d 5006 	ldrb.w	r5, [sp, #6]
   291c2:	2d07      	cmp	r5, #7
   291c4:	d158      	bne.n	29278 <cc_rx_data_handler+0x1a8>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &endpoint);
   291c6:	6870      	ldr	r0, [r6, #4]
   291c8:	ab06      	add	r3, sp, #24
   291ca:	aa02      	add	r2, sp, #8
   291cc:	a904      	add	r1, sp, #16
   291ce:	f7ff fe47 	bl	28e60 <nrf_cloud_decode_data_endpoint>
	if (err) {
   291d2:	4604      	mov	r4, r0
   291d4:	b170      	cbz	r0, 291f4 <cc_rx_data_handler+0x124>
   291d6:	4831      	ldr	r0, [pc, #196]	; (2929c <cc_rx_data_handler+0x1cc>)
   291d8:	4b2f      	ldr	r3, [pc, #188]	; (29298 <cc_rx_data_handler+0x1c8>)
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   291da:	4622      	mov	r2, r4
   291dc:	1ac0      	subs	r0, r0, r3
   291de:	08c0      	lsrs	r0, r0, #3
   291e0:	4932      	ldr	r1, [pc, #200]	; (292ac <cc_rx_data_handler+0x1dc>)
   291e2:	0180      	lsls	r0, r0, #6
   291e4:	e7b8      	b.n	29158 <cc_rx_data_handler+0x88>
	switch (current_state) {
   291e6:	3d08      	subs	r5, #8
   291e8:	b2ed      	uxtb	r5, r5
   291ea:	2d01      	cmp	r5, #1
   291ec:	d94a      	bls.n	29284 <cc_rx_data_handler+0x1b4>
	default:
		break;
	}

	return 0;
}
   291ee:	4620      	mov	r0, r4
   291f0:	b015      	add	sp, #84	; 0x54
   291f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nct_dc_endpoint_set(&tx, &rx, &endpoint);
   291f4:	aa06      	add	r2, sp, #24
   291f6:	a902      	add	r1, sp, #8
   291f8:	a804      	add	r0, sp, #16
   291fa:	f000 ff37 	bl	2a06c <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   291fe:	4621      	mov	r1, r4
   29200:	2218      	movs	r2, #24
   29202:	a808      	add	r0, sp, #32
   29204:	f014 fed1 	bl	3dfaa <memset>
   29208:	f641 63d2 	movw	r3, #7890	; 0x1ed2
   2920c:	930c      	str	r3, [sp, #48]	; 0x30
   2920e:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   29210:	4628      	mov	r0, r5
   29212:	a908      	add	r1, sp, #32
	struct nct_cc_data msg = {
   29214:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   29218:	f7f4 f952 	bl	1d4c0 <nrf_cloud_encode_state>
	if (err) {
   2921c:	4604      	mov	r4, r0
   2921e:	b138      	cbz	r0, 29230 <cc_rx_data_handler+0x160>
   29220:	481e      	ldr	r0, [pc, #120]	; (2929c <cc_rx_data_handler+0x1cc>)
   29222:	4b1d      	ldr	r3, [pc, #116]	; (29298 <cc_rx_data_handler+0x1c8>)
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   29224:	4622      	mov	r2, r4
   29226:	1ac0      	subs	r0, r0, r3
   29228:	08c0      	lsrs	r0, r0, #3
   2922a:	4921      	ldr	r1, [pc, #132]	; (292b0 <cc_rx_data_handler+0x1e0>)
   2922c:	0180      	lsls	r0, r0, #6
   2922e:	e793      	b.n	29158 <cc_rx_data_handler+0x88>
	err = nct_cc_send(&msg);
   29230:	a808      	add	r0, sp, #32
   29232:	f000 feb1 	bl	29f98 <nct_cc_send>
	if (err) {
   29236:	4604      	mov	r4, r0
   29238:	b170      	cbz	r0, 29258 <cc_rx_data_handler+0x188>
   2923a:	4b17      	ldr	r3, [pc, #92]	; (29298 <cc_rx_data_handler+0x1c8>)
   2923c:	4817      	ldr	r0, [pc, #92]	; (2929c <cc_rx_data_handler+0x1cc>)
		LOG_ERR("nct_cc_send failed %d", err);
   2923e:	4622      	mov	r2, r4
   29240:	1ac0      	subs	r0, r0, r3
   29242:	08c0      	lsrs	r0, r0, #3
   29244:	0180      	lsls	r0, r0, #6
   29246:	4918      	ldr	r1, [pc, #96]	; (292a8 <cc_rx_data_handler+0x1d8>)
   29248:	f040 0001 	orr.w	r0, r0, #1
   2924c:	f010 fa3f 	bl	396ce <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   29250:	9809      	ldr	r0, [sp, #36]	; 0x24
   29252:	f014 fe47 	bl	3dee4 <k_free>
		return err;
   29256:	e7ca      	b.n	291ee <cc_rx_data_handler+0x11e>
	nrf_cloud_free((void *)msg.data.ptr);
   29258:	9809      	ldr	r0, [sp, #36]	; 0x24
   2925a:	f014 fe43 	bl	3dee4 <k_free>
	struct nrf_cloud_evt evt = {
   2925e:	4621      	mov	r1, r4
   29260:	2218      	movs	r2, #24
   29262:	a80e      	add	r0, sp, #56	; 0x38
   29264:	f014 fea1 	bl	3dfaa <memset>
   29268:	2304      	movs	r3, #4
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2926a:	4628      	mov	r0, r5
   2926c:	a90e      	add	r1, sp, #56	; 0x38
	struct nrf_cloud_evt evt = {
   2926e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   29272:	f7ff f9fd 	bl	28670 <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   29276:	e7ba      	b.n	291ee <cc_rx_data_handler+0x11e>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   29278:	2d06      	cmp	r5, #6
   2927a:	d1b8      	bne.n	291ee <cc_rx_data_handler+0x11e>
			return state_ua_pin_wait();
   2927c:	f7ff feb4 	bl	28fe8 <state_ua_pin_wait>
   29280:	4604      	mov	r4, r0
   29282:	e7b4      	b.n	291ee <cc_rx_data_handler+0x11e>
		if (new_state == STATE_UA_PIN_WAIT) {
   29284:	f89d 3006 	ldrb.w	r3, [sp, #6]
   29288:	2b06      	cmp	r3, #6
   2928a:	d1b0      	bne.n	291ee <cc_rx_data_handler+0x11e>
			(void)nct_dc_disconnect();
   2928c:	f000 ff8c 	bl	2a1a8 <nct_dc_disconnect>
   29290:	e7f4      	b.n	2927c <cc_rx_data_handler+0x1ac>
		return 0;
   29292:	2400      	movs	r4, #0
   29294:	e7ab      	b.n	291ee <cc_rx_data_handler+0x11e>
   29296:	bf00      	nop
   29298:	0003f5a4 	.word	0x0003f5a4
   2929c:	0003f69c 	.word	0x0003f69c
   292a0:	00042f6c 	.word	0x00042f6c
   292a4:	00042f97 	.word	0x00042f97
   292a8:	00042f56 	.word	0x00042f56
   292ac:	00042fc2 	.word	0x00042fc2
   292b0:	00042f35 	.word	0x00042f35

000292b4 <nfsm_init>:
	persistent_session = false;
   292b4:	2000      	movs	r0, #0
   292b6:	4b01      	ldr	r3, [pc, #4]	; (292bc <nfsm_init+0x8>)
   292b8:	7018      	strb	r0, [r3, #0]
}
   292ba:	4770      	bx	lr
   292bc:	2001d5aa 	.word	0x2001d5aa

000292c0 <nfsm_handle_incoming_event>:
{
   292c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   292c4:	460e      	mov	r6, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   292c6:	4607      	mov	r7, r0
   292c8:	b130      	cbz	r0, 292d8 <nfsm_handle_incoming_event+0x18>
   292ca:	f890 8008 	ldrb.w	r8, [r0, #8]
   292ce:	f1b8 0f09 	cmp.w	r8, #9
   292d2:	d801      	bhi.n	292d8 <nfsm_handle_incoming_event+0x18>
   292d4:	290c      	cmp	r1, #12
   292d6:	d90f      	bls.n	292f8 <nfsm_handle_incoming_event+0x38>
		__ASSERT_NO_MSG(false);
   292d8:	2379      	movs	r3, #121	; 0x79
   292da:	4a1b      	ldr	r2, [pc, #108]	; (29348 <nfsm_handle_incoming_event+0x88>)
   292dc:	491b      	ldr	r1, [pc, #108]	; (2934c <nfsm_handle_incoming_event+0x8c>)
   292de:	481c      	ldr	r0, [pc, #112]	; (29350 <nfsm_handle_incoming_event+0x90>)
   292e0:	f00f ff27 	bl	39132 <printk>
   292e4:	2179      	movs	r1, #121	; 0x79
   292e6:	4818      	ldr	r0, [pc, #96]	; (29348 <nfsm_handle_incoming_event+0x88>)
   292e8:	f010 f9c2 	bl	39670 <assert_post_action>
   292ec:	f06f 0415 	mvn.w	r4, #21
}
   292f0:	4620      	mov	r0, r4
   292f2:	b002      	add	sp, #8
   292f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   292f8:	4b16      	ldr	r3, [pc, #88]	; (29354 <nfsm_handle_incoming_event+0x94>)
   292fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   292fe:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
   29302:	b184      	cbz	r4, 29326 <nfsm_handle_incoming_event+0x66>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   29304:	47a0      	blx	r4
		if (err) {
   29306:	4604      	mov	r4, r0
   29308:	2800      	cmp	r0, #0
   2930a:	d0f1      	beq.n	292f0 <nfsm_handle_incoming_event+0x30>
   2930c:	4812      	ldr	r0, [pc, #72]	; (29358 <nfsm_handle_incoming_event+0x98>)
   2930e:	4d13      	ldr	r5, [pc, #76]	; (2935c <nfsm_handle_incoming_event+0x9c>)
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   29310:	4632      	mov	r2, r6
   29312:	1a2d      	subs	r5, r5, r0
   29314:	08ed      	lsrs	r5, r5, #3
   29316:	01ad      	lsls	r5, r5, #6
   29318:	7a3b      	ldrb	r3, [r7, #8]
   2931a:	4911      	ldr	r1, [pc, #68]	; (29360 <nfsm_handle_incoming_event+0xa0>)
   2931c:	f045 0001 	orr.w	r0, r5, #1
   29320:	f010 f9d5 	bl	396ce <log_string_sync>
   29324:	e7e4      	b.n	292f0 <nfsm_handle_incoming_event+0x30>
   29326:	4b0c      	ldr	r3, [pc, #48]	; (29358 <nfsm_handle_incoming_event+0x98>)
   29328:	4d0c      	ldr	r5, [pc, #48]	; (2935c <nfsm_handle_incoming_event+0x9c>)
   2932a:	1aed      	subs	r5, r5, r3
	LOG_DBG("Dropping FSM transition %d, current state %d", nct_evt->type,
   2932c:	f7ff f99a 	bl	28664 <nfsm_get_current_state>
   29330:	08ed      	lsrs	r5, r5, #3
   29332:	01ad      	lsls	r5, r5, #6
   29334:	f045 0504 	orr.w	r5, r5, #4
   29338:	9000      	str	r0, [sp, #0]
   2933a:	4643      	mov	r3, r8
   2933c:	4628      	mov	r0, r5
   2933e:	4a09      	ldr	r2, [pc, #36]	; (29364 <nfsm_handle_incoming_event+0xa4>)
   29340:	4909      	ldr	r1, [pc, #36]	; (29368 <nfsm_handle_incoming_event+0xa8>)
   29342:	f010 f9c4 	bl	396ce <log_string_sync>
	return 0;
   29346:	e7d3      	b.n	292f0 <nfsm_handle_incoming_event+0x30>
   29348:	00042feb 	.word	0x00042feb
   2934c:	000451fc 	.word	0x000451fc
   29350:	0004033e 	.word	0x0004033e
   29354:	0003ff3c 	.word	0x0003ff3c
   29358:	0003f5a4 	.word	0x0003f5a4
   2935c:	0003f69c 	.word	0x0003f69c
   29360:	00043028 	.word	0x00043028
   29364:	000430f7 	.word	0x000430f7
   29368:	0004304c 	.word	0x0004304c

0002936c <cc_tx_ack_handler>:

static int cc_tx_ack_handler(const struct nct_evt *nct_evt)
{
   2936c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   2936e:	f241 622e 	movw	r2, #5678	; 0x162e
   29372:	6843      	ldr	r3, [r0, #4]
   29374:	4293      	cmp	r3, r2
   29376:	d105      	bne.n	29384 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   29378:	2100      	movs	r1, #0
   2937a:	2005      	movs	r0, #5
   2937c:	f7ff f978 	bl	28670 <nfsm_set_current_state_and_notify>
				" skipping nct_dc_connect()");
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
		}
	}

	return 0;
   29380:	2400      	movs	r4, #0
   29382:	e00e      	b.n	293a2 <cc_tx_ack_handler+0x36>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   29384:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   29388:	4293      	cmp	r3, r2
   2938a:	d1f9      	bne.n	29380 <cc_tx_ack_handler+0x14>
		if (!persistent_session) {
   2938c:	4b12      	ldr	r3, [pc, #72]	; (293d8 <cc_tx_ack_handler+0x6c>)
   2938e:	781b      	ldrb	r3, [r3, #0]
   29390:	b953      	cbnz	r3, 293a8 <cc_tx_ack_handler+0x3c>
			err = nct_dc_connect();
   29392:	f000 fedb 	bl	2a14c <nct_dc_connect>
			if (err) {
   29396:	4604      	mov	r4, r0
   29398:	b918      	cbnz	r0, 293a2 <cc_tx_ack_handler+0x36>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   2939a:	4601      	mov	r1, r0
   2939c:	2008      	movs	r0, #8
   2939e:	f7ff f967 	bl	28670 <nfsm_set_current_state_and_notify>
}
   293a2:	4620      	mov	r0, r4
   293a4:	b004      	add	sp, #16
   293a6:	bd10      	pop	{r4, pc}
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   293a8:	2400      	movs	r4, #0
   293aa:	2302      	movs	r3, #2
   293ac:	9403      	str	r4, [sp, #12]
   293ae:	480b      	ldr	r0, [pc, #44]	; (293dc <cc_tx_ack_handler+0x70>)
   293b0:	f88d 300c 	strb.w	r3, [sp, #12]
   293b4:	4b0a      	ldr	r3, [pc, #40]	; (293e0 <cc_tx_ack_handler+0x74>)
			LOG_DBG("Previous session valid;"
   293b6:	4a0b      	ldr	r2, [pc, #44]	; (293e4 <cc_tx_ack_handler+0x78>)
   293b8:	1ac0      	subs	r0, r0, r3
   293ba:	08c0      	lsrs	r0, r0, #3
   293bc:	0180      	lsls	r0, r0, #6
   293be:	490a      	ldr	r1, [pc, #40]	; (293e8 <cc_tx_ack_handler+0x7c>)
   293c0:	f040 0004 	orr.w	r0, r0, #4
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   293c4:	e9cd 4401 	strd	r4, r4, [sp, #4]
			LOG_DBG("Previous session valid;"
   293c8:	f010 f981 	bl	396ce <log_string_sync>
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   293cc:	2108      	movs	r1, #8
   293ce:	a801      	add	r0, sp, #4
   293d0:	f7ff ff76 	bl	292c0 <nfsm_handle_incoming_event>
   293d4:	e7e5      	b.n	293a2 <cc_tx_ack_handler+0x36>
   293d6:	bf00      	nop
   293d8:	2001d5aa 	.word	0x2001d5aa
   293dc:	0003f69c 	.word	0x0003f69c
   293e0:	0003f5a4 	.word	0x0003f5a4
   293e4:	0004311d 	.word	0x0004311d
   293e8:	0004307d 	.word	0x0004307d

000293ec <connection_handler>:
{
   293ec:	b570      	push	{r4, r5, r6, lr}
	if (nct_evt->status != 0) {
   293ee:	6804      	ldr	r4, [r0, #0]
{
   293f0:	4605      	mov	r5, r0
   293f2:	b08a      	sub	sp, #40	; 0x28
	if (nct_evt->status != 0) {
   293f4:	b164      	cbz	r4, 29410 <connection_handler+0x24>
		evt.type = NRF_CLOUD_EVT_ERROR;
   293f6:	23ff      	movs	r3, #255	; 0xff
		evt.status = nct_evt->status;
   293f8:	9405      	str	r4, [sp, #20]
		evt.type = NRF_CLOUD_EVT_ERROR;
   293fa:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   293fe:	f7ff f931 	bl	28664 <nfsm_get_current_state>
   29402:	a904      	add	r1, sp, #16
   29404:	f7ff f934 	bl	28670 <nfsm_set_current_state_and_notify>
		return 0;
   29408:	2400      	movs	r4, #0
}
   2940a:	4620      	mov	r0, r4
   2940c:	b00a      	add	sp, #40	; 0x28
   2940e:	bd70      	pop	{r4, r5, r6, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   29410:	2601      	movs	r6, #1
	evt.status = nct_evt->param.flag;
   29412:	7903      	ldrb	r3, [r0, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   29414:	a904      	add	r1, sp, #16
   29416:	2002      	movs	r0, #2
	evt.status = nct_evt->param.flag;
   29418:	9305      	str	r3, [sp, #20]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2941a:	f88d 6010 	strb.w	r6, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2941e:	f7ff f927 	bl	28670 <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   29422:	792b      	ldrb	r3, [r5, #4]
   29424:	2b00      	cmp	r3, #0
   29426:	bf14      	ite	ne
   29428:	4632      	movne	r2, r6
   2942a:	2200      	moveq	r2, #0
   2942c:	4b10      	ldr	r3, [pc, #64]	; (29470 <connection_handler+0x84>)
   2942e:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   29430:	d109      	bne.n	29446 <connection_handler+0x5a>
		err = nct_cc_connect();
   29432:	f000 fd8b 	bl	29f4c <nct_cc_connect>
		if (err) {
   29436:	4604      	mov	r4, r0
   29438:	2800      	cmp	r0, #0
   2943a:	d1e6      	bne.n	2940a <connection_handler+0x1e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   2943c:	4601      	mov	r1, r0
   2943e:	2003      	movs	r0, #3
   29440:	f7ff f916 	bl	28670 <nfsm_set_current_state_and_notify>
   29444:	e7e1      	b.n	2940a <connection_handler+0x1e>
   29446:	4b0b      	ldr	r3, [pc, #44]	; (29474 <connection_handler+0x88>)
   29448:	480b      	ldr	r0, [pc, #44]	; (29478 <connection_handler+0x8c>)
		LOG_DBG("Previous session valid; skipping nct_cc_connect()");
   2944a:	4a0c      	ldr	r2, [pc, #48]	; (2947c <connection_handler+0x90>)
   2944c:	1ac0      	subs	r0, r0, r3
   2944e:	08c0      	lsrs	r0, r0, #3
   29450:	0180      	lsls	r0, r0, #6
   29452:	490b      	ldr	r1, [pc, #44]	; (29480 <connection_handler+0x94>)
   29454:	f040 0004 	orr.w	r0, r0, #4
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   29458:	9403      	str	r4, [sp, #12]
   2945a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2945e:	f88d 600c 	strb.w	r6, [sp, #12]
		LOG_DBG("Previous session valid; skipping nct_cc_connect()");
   29462:	f010 f934 	bl	396ce <log_string_sync>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   29466:	2103      	movs	r1, #3
   29468:	a801      	add	r0, sp, #4
   2946a:	f7ff ff29 	bl	292c0 <nfsm_handle_incoming_event>
   2946e:	e7cc      	b.n	2940a <connection_handler+0x1e>
   29470:	2001d5aa 	.word	0x2001d5aa
   29474:	0003f5a4 	.word	0x0003f5a4
   29478:	0003f69c 	.word	0x0003f69c
   2947c:	0004310a 	.word	0x0004310a
   29480:	000430b3 	.word	0x000430b3

00029484 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   29484:	2200      	movs	r2, #0
   29486:	4b05      	ldr	r3, [pc, #20]	; (2949c <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   29488:	e9c3 222f 	strd	r2, r2, [r3, #188]	; 0xbc

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   2948c:	e9c3 222d 	strd	r2, r2, [r3, #180]	; 0xb4

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   29490:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.job_status_endp.utf8 = NULL;
	nct.job_status_endp.size = 0;
   29494:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc
}
   29498:	4770      	bx	lr
   2949a:	bf00      	nop
   2949c:	20017850 	.word	0x20017850

000294a0 <get_next_message_id>:

/* Get the next unused message id. */
static uint32_t get_next_message_id(void)
{
	nct.message_id++;
   294a0:	4b07      	ldr	r3, [pc, #28]	; (294c0 <get_next_message_id+0x20>)
   294a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   294a6:	1c51      	adds	r1, r2, #1

	if ((uint16_t)nct.message_id == 0) {
   294a8:	b288      	uxth	r0, r1
   294aa:	b120      	cbz	r0, 294b6 <get_next_message_id+0x16>
	nct.message_id++;
   294ac:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		nct.message_id++;
	}

	return nct.message_id;
}
   294b0:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
   294b4:	4770      	bx	lr
		nct.message_id++;
   294b6:	3202      	adds	r2, #2
   294b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
   294bc:	e7f8      	b.n	294b0 <get_next_message_id+0x10>
   294be:	bf00      	nop
   294c0:	20017850 	.word	0x20017850

000294c4 <nct_settings_set>:
	return 0;
}

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   294c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   294c8:	460d      	mov	r5, r1
   294ca:	4617      	mov	r7, r2
   294cc:	4698      	mov	r8, r3
	if (!key) {
   294ce:	4606      	mov	r6, r0
   294d0:	2800      	cmp	r0, #0
   294d2:	d033      	beq.n	2953c <nct_settings_set+0x78>
   294d4:	4b1b      	ldr	r3, [pc, #108]	; (29544 <nct_settings_set+0x80>)
   294d6:	4c1c      	ldr	r4, [pc, #112]	; (29548 <nct_settings_set+0x84>)
   294d8:	1ae4      	subs	r4, r4, r3
   294da:	f010 f90b 	bl	396f4 <z_log_strdup>
   294de:	08e4      	lsrs	r4, r4, #3
		return -EINVAL;
	}

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);
   294e0:	01a4      	lsls	r4, r4, #6
   294e2:	f044 0404 	orr.w	r4, r4, #4
   294e6:	4603      	mov	r3, r0
   294e8:	4a18      	ldr	r2, [pc, #96]	; (2954c <nct_settings_set+0x88>)
   294ea:	4919      	ldr	r1, [pc, #100]	; (29550 <nct_settings_set+0x8c>)
   294ec:	4620      	mov	r0, r4
   294ee:	9500      	str	r5, [sp, #0]
   294f0:	f010 f8ed 	bl	396ce <log_string_sync>

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   294f4:	4817      	ldr	r0, [pc, #92]	; (29554 <nct_settings_set+0x90>)
   294f6:	f7f3 feb1 	bl	1d25c <strlen>
   294fa:	4916      	ldr	r1, [pc, #88]	; (29554 <nct_settings_set+0x90>)
   294fc:	4602      	mov	r2, r0
   294fe:	4630      	mov	r0, r6
   29500:	f014 feee 	bl	3e2e0 <strncmp>
   29504:	4606      	mov	r6, r0
   29506:	b128      	cbz	r0, 29514 <nct_settings_set+0x50>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   29508:	f06f 0685 	mvn.w	r6, #133	; 0x85
}
   2950c:	4630      	mov	r0, r6
   2950e:	b004      	add	sp, #16
   29510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   29514:	2d04      	cmp	r5, #4
   29516:	d1f7      	bne.n	29508 <nct_settings_set+0x44>
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   29518:	462a      	mov	r2, r5
   2951a:	4640      	mov	r0, r8
   2951c:	a903      	add	r1, sp, #12
   2951e:	47b8      	blx	r7
   29520:	2804      	cmp	r0, #4
   29522:	d1f1      	bne.n	29508 <nct_settings_set+0x44>
			persistent_session = (bool)read_val;
   29524:	9b03      	ldr	r3, [sp, #12]
   29526:	4a0c      	ldr	r2, [pc, #48]	; (29558 <nct_settings_set+0x94>)
   29528:	1e19      	subs	r1, r3, #0
   2952a:	bf18      	it	ne
   2952c:	2101      	movne	r1, #1
			LOG_DBG("Read setting val: %d", read_val);
   2952e:	4620      	mov	r0, r4
			persistent_session = (bool)read_val;
   29530:	7011      	strb	r1, [r2, #0]
			LOG_DBG("Read setting val: %d", read_val);
   29532:	4a06      	ldr	r2, [pc, #24]	; (2954c <nct_settings_set+0x88>)
   29534:	4909      	ldr	r1, [pc, #36]	; (2955c <nct_settings_set+0x98>)
   29536:	f010 f8ca 	bl	396ce <log_string_sync>
			return 0;
   2953a:	e7e7      	b.n	2950c <nct_settings_set+0x48>
		return -EINVAL;
   2953c:	f06f 0615 	mvn.w	r6, #21
   29540:	e7e4      	b.n	2950c <nct_settings_set+0x48>
   29542:	bf00      	nop
   29544:	0003f5a4 	.word	0x0003f5a4
   29548:	0003f6a4 	.word	0x0003f6a4
   2954c:	000437d2 	.word	0x000437d2
   29550:	0004312f 	.word	0x0004312f
   29554:	00043233 	.word	0x00043233
   29558:	2001d5ac 	.word	0x2001d5ac
   2955c:	0004314e 	.word	0x0004314e

00029560 <nrf_cloud_fota_cb_handler>:
}

#if defined(CONFIG_NRF_CLOUD_FOTA)
static void nrf_cloud_fota_cb_handler(const struct nrf_cloud_fota_evt
				      * const evt)
{
   29560:	b510      	push	{r4, lr}
   29562:	7803      	ldrb	r3, [r0, #0]
   29564:	4604      	mov	r4, r0
   29566:	b088      	sub	sp, #32
   29568:	2b04      	cmp	r3, #4
   2956a:	d82e      	bhi.n	295ca <nrf_cloud_fota_cb_handler+0x6a>
   2956c:	e8df f003 	tbb	[pc, r3]
   29570:	3a2f0f03 	.word	0x3a2f0f03
   29574:	42          	.byte	0x42
   29575:	00          	.byte	0x00
   29576:	4823      	ldr	r0, [pc, #140]	; (29604 <nrf_cloud_fota_cb_handler+0xa4>)
   29578:	4b23      	ldr	r3, [pc, #140]	; (29608 <nrf_cloud_fota_cb_handler+0xa8>)
	switch (evt->id) {
	case NRF_CLOUD_FOTA_EVT_START: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_START");
   2957a:	4a24      	ldr	r2, [pc, #144]	; (2960c <nrf_cloud_fota_cb_handler+0xac>)
   2957c:	1ac0      	subs	r0, r0, r3
   2957e:	08c0      	lsrs	r0, r0, #3
   29580:	4923      	ldr	r1, [pc, #140]	; (29610 <nrf_cloud_fota_cb_handler+0xb0>)
   29582:	0180      	lsls	r0, r0, #6
	case NRF_CLOUD_FOTA_EVT_ERASE_PENDING: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_PENDING");
		break;
	}
	case NRF_CLOUD_FOTA_EVT_ERASE_DONE: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_DONE");
   29584:	f040 0004 	orr.w	r0, r0, #4
   29588:	f010 f8a1 	bl	396ce <log_string_sync>
	}
	default: {
		break;
	}
	}
}
   2958c:	e01d      	b.n	295ca <nrf_cloud_fota_cb_handler+0x6a>
		struct nrf_cloud_evt cloud_evt = {
   2958e:	2218      	movs	r2, #24
   29590:	2100      	movs	r1, #0
   29592:	a802      	add	r0, sp, #8
   29594:	f014 fd09 	bl	3dfaa <memset>
   29598:	230a      	movs	r3, #10
   2959a:	481b      	ldr	r0, [pc, #108]	; (29608 <nrf_cloud_fota_cb_handler+0xa8>)
   2959c:	f88d 3008 	strb.w	r3, [sp, #8]
   295a0:	4b18      	ldr	r3, [pc, #96]	; (29604 <nrf_cloud_fota_cb_handler+0xa4>)
		LOG_DBG("NRF_CLOUD_FOTA_EVT_DONE: rebooting");
   295a2:	4a1a      	ldr	r2, [pc, #104]	; (2960c <nrf_cloud_fota_cb_handler+0xac>)
   295a4:	1a1b      	subs	r3, r3, r0
   295a6:	08db      	lsrs	r3, r3, #3
   295a8:	019b      	lsls	r3, r3, #6
   295aa:	f043 0004 	orr.w	r0, r3, #4
   295ae:	4919      	ldr	r1, [pc, #100]	; (29614 <nrf_cloud_fota_cb_handler+0xb4>)
   295b0:	f010 f88d 	bl	396ce <log_string_sync>
			fota_type = evt->type;
   295b4:	78a3      	ldrb	r3, [r4, #2]
		nct_apply_update(&cloud_evt);
   295b6:	a802      	add	r0, sp, #8
			fota_type = evt->type;
   295b8:	f88d 3007 	strb.w	r3, [sp, #7]
			cloud_evt.data.ptr = &fota_type;
   295bc:	f10d 0307 	add.w	r3, sp, #7
   295c0:	9305      	str	r3, [sp, #20]
			cloud_evt.data.len = sizeof(fota_type);
   295c2:	2301      	movs	r3, #1
   295c4:	9304      	str	r3, [sp, #16]
		nct_apply_update(&cloud_evt);
   295c6:	f7ff fab9 	bl	28b3c <nct_apply_update>
}
   295ca:	b008      	add	sp, #32
   295cc:	bd10      	pop	{r4, pc}
   295ce:	4b0e      	ldr	r3, [pc, #56]	; (29608 <nrf_cloud_fota_cb_handler+0xa8>)
   295d0:	480c      	ldr	r0, [pc, #48]	; (29604 <nrf_cloud_fota_cb_handler+0xa4>)
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
   295d2:	4911      	ldr	r1, [pc, #68]	; (29618 <nrf_cloud_fota_cb_handler+0xb8>)
   295d4:	1ac0      	subs	r0, r0, r3
   295d6:	08c0      	lsrs	r0, r0, #3
   295d8:	0180      	lsls	r0, r0, #6
   295da:	f040 0001 	orr.w	r0, r0, #1
   295de:	f010 f876 	bl	396ce <log_string_sync>
   295e2:	e7f2      	b.n	295ca <nrf_cloud_fota_cb_handler+0x6a>
   295e4:	4807      	ldr	r0, [pc, #28]	; (29604 <nrf_cloud_fota_cb_handler+0xa4>)
   295e6:	4b08      	ldr	r3, [pc, #32]	; (29608 <nrf_cloud_fota_cb_handler+0xa8>)
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_PENDING");
   295e8:	4a08      	ldr	r2, [pc, #32]	; (2960c <nrf_cloud_fota_cb_handler+0xac>)
   295ea:	1ac0      	subs	r0, r0, r3
   295ec:	08c0      	lsrs	r0, r0, #3
   295ee:	490b      	ldr	r1, [pc, #44]	; (2961c <nrf_cloud_fota_cb_handler+0xbc>)
   295f0:	0180      	lsls	r0, r0, #6
   295f2:	e7c7      	b.n	29584 <nrf_cloud_fota_cb_handler+0x24>
   295f4:	4803      	ldr	r0, [pc, #12]	; (29604 <nrf_cloud_fota_cb_handler+0xa4>)
   295f6:	4b04      	ldr	r3, [pc, #16]	; (29608 <nrf_cloud_fota_cb_handler+0xa8>)
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_DONE");
   295f8:	4a04      	ldr	r2, [pc, #16]	; (2960c <nrf_cloud_fota_cb_handler+0xac>)
   295fa:	1ac0      	subs	r0, r0, r3
   295fc:	08c0      	lsrs	r0, r0, #3
   295fe:	4908      	ldr	r1, [pc, #32]	; (29620 <nrf_cloud_fota_cb_handler+0xc0>)
   29600:	0180      	lsls	r0, r0, #6
   29602:	e7bf      	b.n	29584 <nrf_cloud_fota_cb_handler+0x24>
   29604:	0003f6a4 	.word	0x0003f6a4
   29608:	0003f5a4 	.word	0x0003f5a4
   2960c:	000437f6 	.word	0x000437f6
   29610:	00043167 	.word	0x00043167
   29614:	00043184 	.word	0x00043184
   29618:	000431ab 	.word	0x000431ab
   2961c:	000431c4 	.word	0x000431c4
   29620:	000431e9 	.word	0x000431e9

00029624 <allocate_and_format_topic>:
{
   29624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const size_t client_sz = strlen(client_id_buf);
   29626:	4f13      	ldr	r7, [pc, #76]	; (29674 <allocate_and_format_topic+0x50>)
{
   29628:	4605      	mov	r5, r0
	const size_t client_sz = strlen(client_id_buf);
   2962a:	6838      	ldr	r0, [r7, #0]
{
   2962c:	460e      	mov	r6, r1
	const size_t client_sz = strlen(client_id_buf);
   2962e:	f7f3 fe15 	bl	1d25c <strlen>
   29632:	4604      	mov	r4, r0
	topic_sz = client_sz + strlen(topic_template) - 1;
   29634:	4630      	mov	r0, r6
   29636:	f7f3 fe11 	bl	1d25c <strlen>
   2963a:	4404      	add	r4, r0
   2963c:	3c01      	subs	r4, #1
	*topic_buf = nrf_cloud_calloc(topic_sz, 1);
   2963e:	2101      	movs	r1, #1
   29640:	4620      	mov	r0, r4
   29642:	f014 fc5a 	bl	3defa <k_calloc>
   29646:	6028      	str	r0, [r5, #0]
	if (!*topic_buf) {
   29648:	b170      	cbz	r0, 29668 <allocate_and_format_topic+0x44>
	ret = snprintf(*topic_buf, topic_sz,
   2964a:	4632      	mov	r2, r6
   2964c:	4621      	mov	r1, r4
   2964e:	683b      	ldr	r3, [r7, #0]
   29650:	f00e fa04 	bl	37a5c <sniprintf>
	if (ret <= 0 || ret >= topic_sz) {
   29654:	2800      	cmp	r0, #0
   29656:	dd01      	ble.n	2965c <allocate_and_format_topic+0x38>
   29658:	42a0      	cmp	r0, r4
   2965a:	d308      	bcc.n	2966e <allocate_and_format_topic+0x4a>
		nrf_cloud_free(*topic_buf);
   2965c:	6828      	ldr	r0, [r5, #0]
   2965e:	f014 fc41 	bl	3dee4 <k_free>
		return -EIO;
   29662:	f06f 0004 	mvn.w	r0, #4
}
   29666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   29668:	f06f 000b 	mvn.w	r0, #11
   2966c:	e7fb      	b.n	29666 <allocate_and_format_topic+0x42>
	return 0;
   2966e:	2000      	movs	r0, #0
   29670:	e7f9      	b.n	29666 <allocate_and_format_topic+0x42>
   29672:	bf00      	nop
   29674:	2001784c 	.word	0x2001784c

00029678 <nct_reset_topics>:
{
   29678:	b510      	push	{r4, lr}
	if (accepted_topic) {
   2967a:	4c17      	ldr	r4, [pc, #92]	; (296d8 <nct_reset_topics+0x60>)
   2967c:	6820      	ldr	r0, [r4, #0]
   2967e:	b118      	cbz	r0, 29688 <nct_reset_topics+0x10>
		nrf_cloud_free(accepted_topic);
   29680:	f014 fc30 	bl	3dee4 <k_free>
		accepted_topic = NULL;
   29684:	2300      	movs	r3, #0
   29686:	6023      	str	r3, [r4, #0]
	if (rejected_topic) {
   29688:	4c14      	ldr	r4, [pc, #80]	; (296dc <nct_reset_topics+0x64>)
   2968a:	6820      	ldr	r0, [r4, #0]
   2968c:	b118      	cbz	r0, 29696 <nct_reset_topics+0x1e>
		nrf_cloud_free(rejected_topic);
   2968e:	f014 fc29 	bl	3dee4 <k_free>
		rejected_topic = NULL;
   29692:	2300      	movs	r3, #0
   29694:	6023      	str	r3, [r4, #0]
	if (update_delta_topic) {
   29696:	4c12      	ldr	r4, [pc, #72]	; (296e0 <nct_reset_topics+0x68>)
   29698:	6820      	ldr	r0, [r4, #0]
   2969a:	b118      	cbz	r0, 296a4 <nct_reset_topics+0x2c>
		nrf_cloud_free(update_delta_topic);
   2969c:	f014 fc22 	bl	3dee4 <k_free>
		update_delta_topic = NULL;
   296a0:	2300      	movs	r3, #0
   296a2:	6023      	str	r3, [r4, #0]
	if (update_topic) {
   296a4:	4c0f      	ldr	r4, [pc, #60]	; (296e4 <nct_reset_topics+0x6c>)
   296a6:	6820      	ldr	r0, [r4, #0]
   296a8:	b118      	cbz	r0, 296b2 <nct_reset_topics+0x3a>
		nrf_cloud_free(update_topic);
   296aa:	f014 fc1b 	bl	3dee4 <k_free>
		update_topic = NULL;
   296ae:	2300      	movs	r3, #0
   296b0:	6023      	str	r3, [r4, #0]
	if (shadow_get_topic) {
   296b2:	4c0d      	ldr	r4, [pc, #52]	; (296e8 <nct_reset_topics+0x70>)
   296b4:	6820      	ldr	r0, [r4, #0]
   296b6:	b118      	cbz	r0, 296c0 <nct_reset_topics+0x48>
		nrf_cloud_free(shadow_get_topic);
   296b8:	f014 fc14 	bl	3dee4 <k_free>
		shadow_get_topic = NULL;
   296bc:	2300      	movs	r3, #0
   296be:	6023      	str	r3, [r4, #0]
	memset(nct_cc_rx_list, 0, sizeof(nct_cc_rx_list[0]) * CC_RX_LIST_CNT);
   296c0:	2224      	movs	r2, #36	; 0x24
   296c2:	2100      	movs	r1, #0
   296c4:	4809      	ldr	r0, [pc, #36]	; (296ec <nct_reset_topics+0x74>)
   296c6:	f014 fc70 	bl	3dfaa <memset>
}
   296ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(nct_cc_tx_list, 0, sizeof(nct_cc_tx_list[0]) * CC_TX_LIST_CNT);
   296ce:	2218      	movs	r2, #24
   296d0:	2100      	movs	r1, #0
   296d2:	4807      	ldr	r0, [pc, #28]	; (296f0 <nct_reset_topics+0x78>)
   296d4:	f014 bc69 	b.w	3dfaa <memset>
   296d8:	20017848 	.word	0x20017848
   296dc:	20018368 	.word	0x20018368
   296e0:	20018370 	.word	0x20018370
   296e4:	20018374 	.word	0x20018374
   296e8:	2001836c 	.word	0x2001836c
   296ec:	2001832c 	.word	0x2001832c
   296f0:	20018350 	.word	0x20018350

000296f4 <dc_send>:
{
   296f4:	b530      	push	{r4, r5, lr}
   296f6:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   296f8:	4604      	mov	r4, r0
{
   296fa:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   296fc:	b310      	cbz	r0, 29744 <dc_send+0x50>
	struct mqtt_publish_param publish = {
   296fe:	2210      	movs	r2, #16
   29700:	2100      	movs	r1, #0
   29702:	a802      	add	r0, sp, #8
   29704:	f014 fc51 	bl	3dfaa <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   29708:	4b10      	ldr	r3, [pc, #64]	; (2974c <dc_send+0x58>)
	struct mqtt_publish_param publish = {
   2970a:	f88d 5008 	strb.w	r5, [sp, #8]
   2970e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   29712:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   29716:	9200      	str	r2, [sp, #0]
   29718:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2971a:	6823      	ldr	r3, [r4, #0]
   2971c:	b11b      	cbz	r3, 29726 <dc_send+0x32>
   2971e:	6862      	ldr	r2, [r4, #4]
   29720:	b10a      	cbz	r2, 29726 <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   29722:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (dc_data->id != 0) {
   29726:	6923      	ldr	r3, [r4, #16]
   29728:	b13b      	cbz	r3, 2973a <dc_send+0x46>
		publish.message_id = dc_data->id;
   2972a:	f8ad 3014 	strh.w	r3, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2972e:	4669      	mov	r1, sp
   29730:	4807      	ldr	r0, [pc, #28]	; (29750 <dc_send+0x5c>)
   29732:	f011 fbbf 	bl	3aeb4 <mqtt_publish>
}
   29736:	b007      	add	sp, #28
   29738:	bd30      	pop	{r4, r5, pc}
		publish.message_id = get_next_message_id();
   2973a:	f7ff feb1 	bl	294a0 <get_next_message_id>
   2973e:	f8ad 0014 	strh.w	r0, [sp, #20]
   29742:	e7f4      	b.n	2972e <dc_send+0x3a>
		return -EINVAL;
   29744:	f06f 0015 	mvn.w	r0, #21
   29748:	e7f5      	b.n	29736 <dc_send+0x42>
   2974a:	bf00      	nop
   2974c:	20017850 	.word	0x20017850
   29750:	2001786c 	.word	0x2001786c

00029754 <dc_endpoint_free>:
{
   29754:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   29756:	4c0d      	ldr	r4, [pc, #52]	; (2978c <dc_endpoint_free+0x38>)
   29758:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2975c:	b108      	cbz	r0, 29762 <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   2975e:	f014 fbc1 	bl	3dee4 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   29762:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   29766:	b108      	cbz	r0, 2976c <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   29768:	f014 fbbc 	bl	3dee4 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   2976c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   29770:	b108      	cbz	r0, 29776 <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   29772:	f014 fbb7 	bl	3dee4 <k_free>
	if (nct.job_status_endp.utf8 != NULL) {
   29776:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2977a:	b108      	cbz	r0, 29780 <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.job_status_endp.utf8);
   2977c:	f014 fbb2 	bl	3dee4 <k_free>
	dc_endpoint_reset();
   29780:	f7ff fe80 	bl	29484 <dc_endpoint_reset>
}
   29784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_cloud_fota_endpoint_clear();
   29788:	f001 ba64 	b.w	2ac54 <nrf_cloud_fota_endpoint_clear>
   2978c:	20017850 	.word	0x20017850

00029790 <save_session_state>:
{
   29790:	b513      	push	{r0, r1, r4, lr}
   29792:	4b0d      	ldr	r3, [pc, #52]	; (297c8 <save_session_state+0x38>)
   29794:	4c0d      	ldr	r4, [pc, #52]	; (297cc <save_session_state+0x3c>)
   29796:	9001      	str	r0, [sp, #4]
   29798:	1ae4      	subs	r4, r4, r3
   2979a:	08e4      	lsrs	r4, r4, #3
	LOG_DBG("Setting session state: %d", session_valid);
   2979c:	01a4      	lsls	r4, r4, #6
   2979e:	4603      	mov	r3, r0
   297a0:	4a0b      	ldr	r2, [pc, #44]	; (297d0 <save_session_state+0x40>)
   297a2:	f044 0004 	orr.w	r0, r4, #4
   297a6:	490b      	ldr	r1, [pc, #44]	; (297d4 <save_session_state+0x44>)
   297a8:	f00f ff91 	bl	396ce <log_string_sync>
	persistent_session = (bool)session_valid;
   297ac:	9b01      	ldr	r3, [sp, #4]
   297ae:	4a0a      	ldr	r2, [pc, #40]	; (297d8 <save_session_state+0x48>)
   297b0:	3b00      	subs	r3, #0
   297b2:	bf18      	it	ne
   297b4:	2301      	movne	r3, #1
   297b6:	7013      	strb	r3, [r2, #0]
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   297b8:	2204      	movs	r2, #4
   297ba:	4808      	ldr	r0, [pc, #32]	; (297dc <save_session_state+0x4c>)
   297bc:	eb0d 0102 	add.w	r1, sp, r2
   297c0:	f7f8 fb36 	bl	21e30 <settings_save_one>
}
   297c4:	b002      	add	sp, #8
   297c6:	bd10      	pop	{r4, pc}
   297c8:	0003f5a4 	.word	0x0003f5a4
   297cc:	0003f6a4 	.word	0x0003f6a4
   297d0:	000437e3 	.word	0x000437e3
   297d4:	0004320b 	.word	0x0004320b
   297d8:	2001d5ac 	.word	0x2001d5ac
   297dc:	00043229 	.word	0x00043229

000297e0 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   297e0:	2300      	movs	r3, #0
{
   297e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   297e6:	b092      	sub	sp, #72	; 0x48
	struct nct_evt evt = { .status = _mqtt_evt->result };
   297e8:	e9cd 3305 	strd	r3, r3, [sp, #20]
   297ec:	69cb      	ldr	r3, [r1, #28]
{
   297ee:	4607      	mov	r7, r0
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_NRF_CLOUD_FOTA)
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   297f0:	4608      	mov	r0, r1
{
   297f2:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   297f4:	9304      	str	r3, [sp, #16]
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   297f6:	f001 fab7 	bl	2ad68 <nrf_cloud_fota_mqtt_evt_handler>
	if (err == 0) {
   297fa:	1e02      	subs	r2, r0, #0
   297fc:	d05e      	beq.n	298bc <nct_mqtt_evt_handler+0xdc>
		return;
	} else if (err < 0) {
   297fe:	da0a      	bge.n	29816 <nct_mqtt_evt_handler+0x36>
   29800:	4b8a      	ldr	r3, [pc, #552]	; (29a2c <nct_mqtt_evt_handler+0x24c>)
   29802:	488b      	ldr	r0, [pc, #556]	; (29a30 <nct_mqtt_evt_handler+0x250>)
		LOG_ERR("nrf_cloud_fota_mqtt_evt_handler: Failed! %d", err);
   29804:	498b      	ldr	r1, [pc, #556]	; (29a34 <nct_mqtt_evt_handler+0x254>)
   29806:	1a1b      	subs	r3, r3, r0
   29808:	08db      	lsrs	r3, r3, #3
   2980a:	019b      	lsls	r3, r3, #6

	if (event_notify) {
		err = nct_input(&evt);

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
   2980c:	f043 0001 	orr.w	r0, r3, #1
   29810:	f00f ff5d 	bl	396ce <log_string_sync>
   29814:	e052      	b.n	298bc <nct_mqtt_evt_handler+0xdc>
	switch (_mqtt_evt->type) {
   29816:	7823      	ldrb	r3, [r4, #0]
   29818:	2b08      	cmp	r3, #8
   2981a:	d84f      	bhi.n	298bc <nct_mqtt_evt_handler+0xdc>
   2981c:	e8df f013 	tbh	[pc, r3, lsl #1]
   29820:	00da0009 	.word	0x00da0009
   29824:	00c60026 	.word	0x00c60026
   29828:	004e004e 	.word	0x004e004e
   2982c:	009f004e 	.word	0x009f004e
   29830:	00b4      	.short	0x00b4
   29832:	4b7f      	ldr	r3, [pc, #508]	; (29a30 <nct_mqtt_evt_handler+0x250>)
   29834:	487d      	ldr	r0, [pc, #500]	; (29a2c <nct_mqtt_evt_handler+0x24c>)
		LOG_DBG("MQTT_EVT_CONNACK: result %d", _mqtt_evt->result);
   29836:	4a80      	ldr	r2, [pc, #512]	; (29a38 <nct_mqtt_evt_handler+0x258>)
   29838:	1ac0      	subs	r0, r0, r3
   2983a:	08c0      	lsrs	r0, r0, #3
   2983c:	0180      	lsls	r0, r0, #6
   2983e:	69e3      	ldr	r3, [r4, #28]
   29840:	f040 0004 	orr.w	r0, r0, #4
   29844:	497d      	ldr	r1, [pc, #500]	; (29a3c <nct_mqtt_evt_handler+0x25c>)
   29846:	f00f ff42 	bl	396ce <log_string_sync>
		evt.param.flag = (p->session_present_flag != 0) &&
   2984a:	7920      	ldrb	r0, [r4, #4]
   2984c:	4b7c      	ldr	r3, [pc, #496]	; (29a40 <nct_mqtt_evt_handler+0x260>)
   2984e:	b158      	cbz	r0, 29868 <nct_mqtt_evt_handler+0x88>
   29850:	781a      	ldrb	r2, [r3, #0]
		if (persistent_session && (p->session_present_flag == 0)) {
   29852:	781b      	ldrb	r3, [r3, #0]
		evt.param.flag = (p->session_present_flag != 0) &&
   29854:	f88d 2014 	strb.w	r2, [sp, #20]
		if (persistent_session && (p->session_present_flag == 0)) {
   29858:	b113      	cbz	r3, 29860 <nct_mqtt_evt_handler+0x80>
   2985a:	b908      	cbnz	r0, 29860 <nct_mqtt_evt_handler+0x80>
			save_session_state(0);
   2985c:	f7ff ff98 	bl	29790 <save_session_state>
		evt.type = NCT_EVT_CONNECTED;
   29860:	2300      	movs	r3, #0
		evt.type = NCT_EVT_DISCONNECTED;
   29862:	f88d 3018 	strb.w	r3, [sp, #24]
	if (event_notify) {
   29866:	e059      	b.n	2991c <nct_mqtt_evt_handler+0x13c>
		evt.param.flag = (p->session_present_flag != 0) &&
   29868:	4602      	mov	r2, r0
   2986a:	e7f2      	b.n	29852 <nct_mqtt_evt_handler+0x72>
   2986c:	4b70      	ldr	r3, [pc, #448]	; (29a30 <nct_mqtt_evt_handler+0x250>)
   2986e:	4e6f      	ldr	r6, [pc, #444]	; (29a2c <nct_mqtt_evt_handler+0x24c>)
		LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   29870:	4a71      	ldr	r2, [pc, #452]	; (29a38 <nct_mqtt_evt_handler+0x258>)
   29872:	1af6      	subs	r6, r6, r3
   29874:	08f6      	lsrs	r6, r6, #3
   29876:	6963      	ldr	r3, [r4, #20]
   29878:	01b6      	lsls	r6, r6, #6
   2987a:	9300      	str	r3, [sp, #0]
   2987c:	4971      	ldr	r1, [pc, #452]	; (29a44 <nct_mqtt_evt_handler+0x264>)
   2987e:	8b23      	ldrh	r3, [r4, #24]
   29880:	f046 0004 	orr.w	r0, r6, #4
   29884:	f00f ff23 	bl	396ce <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   29888:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (length > (sizeof(nct.payload_buf) - 1)) {
   2988c:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   29890:	d817      	bhi.n	298c2 <nct_mqtt_evt_handler+0xe2>
	int ret = mqtt_readall_publish_payload(client, nct.payload_buf, length);
   29892:	4d6d      	ldr	r5, [pc, #436]	; (29a48 <nct_mqtt_evt_handler+0x268>)
   29894:	4642      	mov	r2, r8
   29896:	f505 7136 	add.w	r1, r5, #728	; 0x2d8
   2989a:	4638      	mov	r0, r7
   2989c:	f011 fc7a 	bl	3b194 <mqtt_readall_publish_payload>
	nct.payload_buf[length] = 0;
   298a0:	eb05 0208 	add.w	r2, r5, r8
   298a4:	2500      	movs	r5, #0
   298a6:	f882 52d8 	strb.w	r5, [r2, #728]	; 0x2d8
		if (err < 0) {
   298aa:	1e02      	subs	r2, r0, #0
   298ac:	da0c      	bge.n	298c8 <nct_mqtt_evt_handler+0xe8>
			LOG_ERR("publish_get_payload: failed %d", err);
   298ae:	4967      	ldr	r1, [pc, #412]	; (29a4c <nct_mqtt_evt_handler+0x26c>)
   298b0:	f046 0001 	orr.w	r0, r6, #1
   298b4:	f00f ff0b 	bl	396ce <log_string_sync>
			nrf_cloud_disconnect();
   298b8:	f7fe ff92 	bl	287e0 <nrf_cloud_disconnect>
		}
	}
}
   298bc:	b012      	add	sp, #72	; 0x48
   298be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
   298c2:	f06f 0279 	mvn.w	r2, #121	; 0x79
   298c6:	e7f2      	b.n	298ae <nct_mqtt_evt_handler+0xce>
   298c8:	4e61      	ldr	r6, [pc, #388]	; (29a50 <nct_mqtt_evt_handler+0x270>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   298ca:	68a2      	ldr	r2, [r4, #8]
   298cc:	6873      	ldr	r3, [r6, #4]
   298ce:	6831      	ldr	r1, [r6, #0]
   298d0:	429a      	cmp	r2, r3
   298d2:	bf28      	it	cs
   298d4:	461a      	movcs	r2, r3
   298d6:	6860      	ldr	r0, [r4, #4]
   298d8:	f014 fd02 	bl	3e2e0 <strncmp>
		if (strings_compare(
   298dc:	2800      	cmp	r0, #0
   298de:	d12a      	bne.n	29936 <nct_mqtt_evt_handler+0x156>
			*opcode = nct_cc_rx_opcode_map[index];
   298e0:	4b5c      	ldr	r3, [pc, #368]	; (29a54 <nct_mqtt_evt_handler+0x274>)
   298e2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   298e6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			cc.id = p->message_id;
   298ea:	8b23      	ldrh	r3, [r4, #24]
   298ec:	9310      	str	r3, [sp, #64]	; 0x40
			cc.data.ptr = nct.payload_buf;
   298ee:	4b5a      	ldr	r3, [pc, #360]	; (29a58 <nct_mqtt_evt_handler+0x278>)
   298f0:	930d      	str	r3, [sp, #52]	; 0x34
			cc.data.len = p->message.payload.len;
   298f2:	6963      	ldr	r3, [r4, #20]
   298f4:	930c      	str	r3, [sp, #48]	; 0x30
			cc.topic.len = p->message.topic.topic.size;
   298f6:	68a3      	ldr	r3, [r4, #8]
   298f8:	930e      	str	r3, [sp, #56]	; 0x38
			cc.topic.ptr = p->message.topic.topic.utf8;
   298fa:	6863      	ldr	r3, [r4, #4]
   298fc:	930f      	str	r3, [sp, #60]	; 0x3c
			evt.type = NCT_EVT_CC_RX_DATA;
   298fe:	2303      	movs	r3, #3
   29900:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   29904:	ab0c      	add	r3, sp, #48	; 0x30
			evt.param.dc = &dc;
   29906:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   29908:	7b23      	ldrb	r3, [r4, #12]
   2990a:	2b01      	cmp	r3, #1
   2990c:	d106      	bne.n	2991c <nct_mqtt_evt_handler+0x13c>
			const struct mqtt_puback_param ack = {
   2990e:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   29910:	4638      	mov	r0, r7
   29912:	a903      	add	r1, sp, #12
			const struct mqtt_puback_param ack = {
   29914:	f8ad 300c 	strh.w	r3, [sp, #12]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   29918:	f011 fb11 	bl	3af3e <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2991c:	a804      	add	r0, sp, #16
   2991e:	f7ff f907 	bl	28b30 <nct_input>
		if (err != 0) {
   29922:	2800      	cmp	r0, #0
   29924:	d0ca      	beq.n	298bc <nct_mqtt_evt_handler+0xdc>
   29926:	4a42      	ldr	r2, [pc, #264]	; (29a30 <nct_mqtt_evt_handler+0x250>)
   29928:	4b40      	ldr	r3, [pc, #256]	; (29a2c <nct_mqtt_evt_handler+0x24c>)
			LOG_ERR("nct_input: failed %d", err);
   2992a:	494c      	ldr	r1, [pc, #304]	; (29a5c <nct_mqtt_evt_handler+0x27c>)
   2992c:	1a9b      	subs	r3, r3, r2
   2992e:	08db      	lsrs	r3, r3, #3
   29930:	4602      	mov	r2, r0
   29932:	019b      	lsls	r3, r3, #6
   29934:	e76a      	b.n	2980c <nct_mqtt_evt_handler+0x2c>
	for (uint32_t index = 0; index < list_size; index++) {
   29936:	3501      	adds	r5, #1
   29938:	2d03      	cmp	r5, #3
   2993a:	f106 060c 	add.w	r6, r6, #12
   2993e:	d1c4      	bne.n	298ca <nct_mqtt_evt_handler+0xea>
			dc.id = p->message_id;
   29940:	8b23      	ldrh	r3, [r4, #24]
   29942:	930b      	str	r3, [sp, #44]	; 0x2c
			dc.data.ptr = nct.payload_buf;
   29944:	4b44      	ldr	r3, [pc, #272]	; (29a58 <nct_mqtt_evt_handler+0x278>)
   29946:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   29948:	6963      	ldr	r3, [r4, #20]
   2994a:	9307      	str	r3, [sp, #28]
			dc.topic.len = p->message.topic.topic.size;
   2994c:	68a3      	ldr	r3, [r4, #8]
   2994e:	9309      	str	r3, [sp, #36]	; 0x24
			dc.topic.ptr = p->message.topic.topic.utf8;
   29950:	6863      	ldr	r3, [r4, #4]
   29952:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_DC_RX_DATA;
   29954:	2305      	movs	r3, #5
   29956:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   2995a:	ab07      	add	r3, sp, #28
   2995c:	e7d3      	b.n	29906 <nct_mqtt_evt_handler+0x126>
   2995e:	4b34      	ldr	r3, [pc, #208]	; (29a30 <nct_mqtt_evt_handler+0x250>)
   29960:	4d32      	ldr	r5, [pc, #200]	; (29a2c <nct_mqtt_evt_handler+0x24c>)
		LOG_DBG("MQTT_EVT_SUBACK: id = %d result = %d",
   29962:	4a35      	ldr	r2, [pc, #212]	; (29a38 <nct_mqtt_evt_handler+0x258>)
   29964:	1aed      	subs	r5, r5, r3
   29966:	08ed      	lsrs	r5, r5, #3
   29968:	69e3      	ldr	r3, [r4, #28]
   2996a:	01ad      	lsls	r5, r5, #6
   2996c:	9300      	str	r3, [sp, #0]
   2996e:	493c      	ldr	r1, [pc, #240]	; (29a60 <nct_mqtt_evt_handler+0x280>)
   29970:	88a3      	ldrh	r3, [r4, #4]
   29972:	f045 0004 	orr.w	r0, r5, #4
   29976:	f00f feaa 	bl	396ce <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2997a:	f240 42d2 	movw	r2, #1234	; 0x4d2
   2997e:	88a3      	ldrh	r3, [r4, #4]
   29980:	4293      	cmp	r3, r2
   29982:	d135      	bne.n	299f0 <nct_mqtt_evt_handler+0x210>
			evt.type = NCT_EVT_CC_CONNECTED;
   29984:	2301      	movs	r3, #1
   29986:	e76c      	b.n	29862 <nct_mqtt_evt_handler+0x82>
   29988:	4b29      	ldr	r3, [pc, #164]	; (29a30 <nct_mqtt_evt_handler+0x250>)
   2998a:	4828      	ldr	r0, [pc, #160]	; (29a2c <nct_mqtt_evt_handler+0x24c>)
		LOG_DBG("MQTT_EVT_UNSUBACK");
   2998c:	4a2a      	ldr	r2, [pc, #168]	; (29a38 <nct_mqtt_evt_handler+0x258>)
   2998e:	1ac0      	subs	r0, r0, r3
   29990:	08c0      	lsrs	r0, r0, #3
   29992:	0180      	lsls	r0, r0, #6
   29994:	4933      	ldr	r1, [pc, #204]	; (29a64 <nct_mqtt_evt_handler+0x284>)
   29996:	f040 0004 	orr.w	r0, r0, #4
   2999a:	f00f fe98 	bl	396ce <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2999e:	f240 43d2 	movw	r3, #1234	; 0x4d2
   299a2:	88a2      	ldrh	r2, [r4, #4]
   299a4:	429a      	cmp	r2, r3
   299a6:	d189      	bne.n	298bc <nct_mqtt_evt_handler+0xdc>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   299a8:	2307      	movs	r3, #7
   299aa:	e75a      	b.n	29862 <nct_mqtt_evt_handler+0x82>
   299ac:	4b20      	ldr	r3, [pc, #128]	; (29a30 <nct_mqtt_evt_handler+0x250>)
   299ae:	481f      	ldr	r0, [pc, #124]	; (29a2c <nct_mqtt_evt_handler+0x24c>)
		LOG_DBG("MQTT_EVT_PUBACK: id = %d result = %d",
   299b0:	4a21      	ldr	r2, [pc, #132]	; (29a38 <nct_mqtt_evt_handler+0x258>)
   299b2:	1ac0      	subs	r0, r0, r3
   299b4:	08c0      	lsrs	r0, r0, #3
   299b6:	69e3      	ldr	r3, [r4, #28]
   299b8:	0180      	lsls	r0, r0, #6
   299ba:	9300      	str	r3, [sp, #0]
   299bc:	492a      	ldr	r1, [pc, #168]	; (29a68 <nct_mqtt_evt_handler+0x288>)
   299be:	88a3      	ldrh	r3, [r4, #4]
   299c0:	f040 0004 	orr.w	r0, r0, #4
   299c4:	f00f fe83 	bl	396ce <log_string_sync>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   299c8:	2304      	movs	r3, #4
   299ca:	f88d 3018 	strb.w	r3, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   299ce:	88a3      	ldrh	r3, [r4, #4]
   299d0:	9305      	str	r3, [sp, #20]
	if (event_notify) {
   299d2:	e7a3      	b.n	2991c <nct_mqtt_evt_handler+0x13c>
   299d4:	4b16      	ldr	r3, [pc, #88]	; (29a30 <nct_mqtt_evt_handler+0x250>)
   299d6:	4815      	ldr	r0, [pc, #84]	; (29a2c <nct_mqtt_evt_handler+0x24c>)
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);
   299d8:	4a17      	ldr	r2, [pc, #92]	; (29a38 <nct_mqtt_evt_handler+0x258>)
   299da:	1ac0      	subs	r0, r0, r3
   299dc:	08c0      	lsrs	r0, r0, #3
   299de:	0180      	lsls	r0, r0, #6
   299e0:	69e3      	ldr	r3, [r4, #28]
   299e2:	4922      	ldr	r1, [pc, #136]	; (29a6c <nct_mqtt_evt_handler+0x28c>)
   299e4:	f040 0004 	orr.w	r0, r0, #4
   299e8:	f00f fe71 	bl	396ce <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   299ec:	2309      	movs	r3, #9
   299ee:	e738      	b.n	29862 <nct_mqtt_evt_handler+0x82>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   299f0:	f242 223d 	movw	r2, #8765	; 0x223d
   299f4:	4293      	cmp	r3, r2
   299f6:	f47f af61 	bne.w	298bc <nct_mqtt_evt_handler+0xdc>
			evt.type = NCT_EVT_DC_CONNECTED;
   299fa:	2302      	movs	r3, #2
			err = save_session_state(1);
   299fc:	2001      	movs	r0, #1
			evt.type = NCT_EVT_DC_CONNECTED;
   299fe:	f88d 3018 	strb.w	r3, [sp, #24]
			err = save_session_state(1);
   29a02:	f7ff fec5 	bl	29790 <save_session_state>
			if (err) {
   29a06:	4602      	mov	r2, r0
   29a08:	b120      	cbz	r0, 29a14 <nct_mqtt_evt_handler+0x234>
				LOG_ERR("Failed to save session state: %d",
   29a0a:	4919      	ldr	r1, [pc, #100]	; (29a70 <nct_mqtt_evt_handler+0x290>)
   29a0c:	f045 0001 	orr.w	r0, r5, #1
   29a10:	f00f fe5d 	bl	396ce <log_string_sync>
			err = nrf_cloud_fota_subscribe();
   29a14:	f001 f926 	bl	2ac64 <nrf_cloud_fota_subscribe>
			if (err) {
   29a18:	4602      	mov	r2, r0
   29a1a:	2800      	cmp	r0, #0
   29a1c:	f43f af7e 	beq.w	2991c <nct_mqtt_evt_handler+0x13c>
				LOG_ERR("FOTA MQTT subscribe failed: %d", err);
   29a20:	4914      	ldr	r1, [pc, #80]	; (29a74 <nct_mqtt_evt_handler+0x294>)
   29a22:	f045 0001 	orr.w	r0, r5, #1
   29a26:	f00f fe52 	bl	396ce <log_string_sync>
	if (event_notify) {
   29a2a:	e777      	b.n	2991c <nct_mqtt_evt_handler+0x13c>
   29a2c:	0003f6a4 	.word	0x0003f6a4
   29a30:	0003f5a4 	.word	0x0003f5a4
   29a34:	0004323a 	.word	0x0004323a
   29a38:	00043821 	.word	0x00043821
   29a3c:	00043266 	.word	0x00043266
   29a40:	2001d5ac 	.word	0x2001d5ac
   29a44:	00043286 	.word	0x00043286
   29a48:	20017850 	.word	0x20017850
   29a4c:	000432ad 	.word	0x000432ad
   29a50:	2001832c 	.word	0x2001832c
   29a54:	0003ff98 	.word	0x0003ff98
   29a58:	20017b28 	.word	0x20017b28
   29a5c:	00043399 	.word	0x00043399
   29a60:	000432cc 	.word	0x000432cc
   29a64:	00043335 	.word	0x00043335
   29a68:	0004334b 	.word	0x0004334b
   29a6c:	00043374 	.word	0x00043374
   29a70:	000432f5 	.word	0x000432f5
   29a74:	00043316 	.word	0x00043316

00029a78 <nct_mqtt_connect>:
{
   29a78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   29a7c:	4d3d      	ldr	r5, [pc, #244]	; (29b74 <nct_mqtt_connect+0xfc>)
   29a7e:	4b3e      	ldr	r3, [pc, #248]	; (29b78 <nct_mqtt_connect+0x100>)
	if (!initialized) {
   29a80:	f8df 8120 	ldr.w	r8, [pc, #288]	; 29ba4 <nct_mqtt_connect+0x12c>
   29a84:	1aed      	subs	r5, r5, r3
   29a86:	f898 6000 	ldrb.w	r6, [r8]
   29a8a:	08ed      	lsrs	r5, r5, #3
   29a8c:	4c3b      	ldr	r4, [pc, #236]	; (29b7c <nct_mqtt_connect+0x104>)
   29a8e:	01ad      	lsls	r5, r5, #6
   29a90:	2e00      	cmp	r6, #0
   29a92:	d13f      	bne.n	29b14 <nct_mqtt_connect+0x9c>
		mqtt_client_init(&nct.client);
   29a94:	f104 001c 	add.w	r0, r4, #28
   29a98:	f011 f9b0 	bl	3adfc <mqtt_client_init>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   29a9c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
   29aa0:	66e3      	str	r3, [r4, #108]	; 0x6c
		nct.client.evt_cb = nct_mqtt_evt_handler;
   29aa2:	4b37      	ldr	r3, [pc, #220]	; (29b80 <nct_mqtt_connect+0x108>)
   29aa4:	4627      	mov	r7, r4
   29aa6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   29aaa:	4b36      	ldr	r3, [pc, #216]	; (29b84 <nct_mqtt_connect+0x10c>)
   29aac:	6818      	ldr	r0, [r3, #0]
   29aae:	6660      	str	r0, [r4, #100]	; 0x64
		nct.client.client_id.size = strlen(client_id_buf);
   29ab0:	f7f3 fbd4 	bl	1d25c <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   29ab4:	2304      	movs	r3, #4
   29ab6:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
		nct.client.clean_session = persistent_session ? 0U : 1U;
   29aba:	4b33      	ldr	r3, [pc, #204]	; (29b88 <nct_mqtt_connect+0x110>)
   29abc:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
   29ac0:	781b      	ldrb	r3, [r3, #0]
		LOG_DBG("MQTT clean session flag: %u",
   29ac2:	4932      	ldr	r1, [pc, #200]	; (29b8c <nct_mqtt_connect+0x114>)
		nct.client.clean_session = persistent_session ? 0U : 1U;
   29ac4:	f083 0301 	eor.w	r3, r3, #1
   29ac8:	f363 0241 	bfi	r2, r3, #1, #1
		nct.client.client_id.size = strlen(client_id_buf);
   29acc:	66a0      	str	r0, [r4, #104]	; 0x68
		nct.client.clean_session = persistent_session ? 0U : 1U;
   29ace:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
		LOG_DBG("MQTT clean session flag: %u",
   29ad2:	f045 0004 	orr.w	r0, r5, #4
   29ad6:	4a2e      	ldr	r2, [pc, #184]	; (29b90 <nct_mqtt_connect+0x118>)
		nct.client.user_name = NULL;
   29ad8:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
		LOG_DBG("MQTT clean session flag: %u",
   29adc:	f00f fdf7 	bl	396ce <log_string_sync>
		nct.client.rx_buf = nct.rx_buf;
   29ae0:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
   29ae4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   29ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   29aec:	f04f 0c01 	mov.w	ip, #1
		nct.client.tx_buf = nct.tx_buf;
   29af0:	f504 72ec 	add.w	r2, r4, #472	; 0x1d8
   29af4:	f104 0648 	add.w	r6, r4, #72	; 0x48
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   29af8:	e9c4 2323 	strd	r2, r3, [r4, #140]	; 0x8c
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   29afc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   29b00:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   29b02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   29b04:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   29b08:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   29b0c:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
		initialized = true;
   29b10:	f888 c000 	strb.w	ip, [r8]
	err = mqtt_connect(&nct.client);
   29b14:	481f      	ldr	r0, [pc, #124]	; (29b94 <nct_mqtt_connect+0x11c>)
   29b16:	f011 f98a 	bl	3ae2e <mqtt_connect>
	if (err != 0) {
   29b1a:	4606      	mov	r6, r0
   29b1c:	b150      	cbz	r0, 29b34 <nct_mqtt_connect+0xbc>
		LOG_DBG("mqtt_connect failed %d", err);
   29b1e:	4603      	mov	r3, r0
   29b20:	4a1b      	ldr	r2, [pc, #108]	; (29b90 <nct_mqtt_connect+0x118>)
   29b22:	491d      	ldr	r1, [pc, #116]	; (29b98 <nct_mqtt_connect+0x120>)
   29b24:	f045 0004 	orr.w	r0, r5, #4
   29b28:	f00f fdd1 	bl	396ce <log_string_sync>
}
   29b2c:	4630      	mov	r0, r6
   29b2e:	b004      	add	sp, #16
   29b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct timeval timeout = {
   29b34:	273c      	movs	r7, #60	; 0x3c
   29b36:	9003      	str	r0, [sp, #12]
   29b38:	9702      	str	r7, [sp, #8]
	return mqtt_keepalive_time_left(&nct.client);
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
   29b3a:	6c60      	ldr	r0, [r4, #68]	; 0x44
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   29b3c:	2308      	movs	r3, #8
   29b3e:	2215      	movs	r2, #21
   29b40:	9300      	str	r3, [sp, #0]
   29b42:	2101      	movs	r1, #1
   29b44:	446b      	add	r3, sp
   29b46:	f010 fa31 	bl	39fac <z_impl_zsock_setsockopt>
		if (err == -1) {
   29b4a:	1c43      	adds	r3, r0, #1
   29b4c:	4604      	mov	r4, r0
   29b4e:	d109      	bne.n	29b64 <nct_mqtt_connect+0xec>
			LOG_ERR("Failed to set timeout, errno: %d", errno);
   29b50:	f010 fd29 	bl	3a5a6 <__errno>
   29b54:	f045 0501 	orr.w	r5, r5, #1
   29b58:	6802      	ldr	r2, [r0, #0]
   29b5a:	4910      	ldr	r1, [pc, #64]	; (29b9c <nct_mqtt_connect+0x124>)
   29b5c:	4628      	mov	r0, r5
   29b5e:	f00f fdb6 	bl	396ce <log_string_sync>
			err = 0;
   29b62:	e7e3      	b.n	29b2c <nct_mqtt_connect+0xb4>
			LOG_INF("Using socket send timeout of %d seconds",
   29b64:	463a      	mov	r2, r7
   29b66:	490e      	ldr	r1, [pc, #56]	; (29ba0 <nct_mqtt_connect+0x128>)
   29b68:	f045 0003 	orr.w	r0, r5, #3
   29b6c:	f00f fdaf 	bl	396ce <log_string_sync>
   29b70:	4626      	mov	r6, r4
	return err;
   29b72:	e7db      	b.n	29b2c <nct_mqtt_connect+0xb4>
   29b74:	0003f6a4 	.word	0x0003f6a4
   29b78:	0003f5a4 	.word	0x0003f5a4
   29b7c:	20017850 	.word	0x20017850
   29b80:	000297e1 	.word	0x000297e1
   29b84:	2001784c 	.word	0x2001784c
   29b88:	2001d5ac 	.word	0x2001d5ac
   29b8c:	000433ae 	.word	0x000433ae
   29b90:	00043810 	.word	0x00043810
   29b94:	2001786c 	.word	0x2001786c
   29b98:	000433ce 	.word	0x000433ce
   29b9c:	000433e9 	.word	0x000433e9
   29ba0:	0004340a 	.word	0x0004340a
   29ba4:	2001d5ab 	.word	0x2001d5ab

00029ba8 <nct_init>:
{
   29ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29bac:	b08d      	sub	sp, #52	; 0x34
	if (!IS_ENABLED(CONFIG_NRF_CLOUD_CLIENT_ID_SRC_RUNTIME) &&
   29bae:	b148      	cbz	r0, 29bc4 <nct_init+0x1c>
   29bb0:	488b      	ldr	r0, [pc, #556]	; (29de0 <nct_init+0x238>)
   29bb2:	4b8c      	ldr	r3, [pc, #560]	; (29de4 <nct_init+0x23c>)
		LOG_WRN("Not configured to for runtime client ID, ignoring");
   29bb4:	498c      	ldr	r1, [pc, #560]	; (29de8 <nct_init+0x240>)
   29bb6:	1ac0      	subs	r0, r0, r3
   29bb8:	08c0      	lsrs	r0, r0, #3
   29bba:	0180      	lsls	r0, r0, #6
   29bbc:	f040 0002 	orr.w	r0, r0, #2
   29bc0:	f00f fd85 	bl	396ce <log_string_sync>
	err = at_cmd_write("AT+CGSN", imei_buf, sizeof(imei_buf), NULL);
   29bc4:	ad02      	add	r5, sp, #8
   29bc6:	2300      	movs	r3, #0
   29bc8:	2214      	movs	r2, #20
   29bca:	4629      	mov	r1, r5
   29bcc:	4887      	ldr	r0, [pc, #540]	; (29dec <nct_init+0x244>)
   29bce:	f7fe f983 	bl	27ed8 <at_cmd_write>
	if (err) {
   29bd2:	4604      	mov	r4, r0
   29bd4:	b158      	cbz	r0, 29bee <nct_init+0x46>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   29bd6:	4622      	mov	r2, r4
   29bd8:	4881      	ldr	r0, [pc, #516]	; (29de0 <nct_init+0x238>)
   29bda:	4b82      	ldr	r3, [pc, #520]	; (29de4 <nct_init+0x23c>)
   29bdc:	4984      	ldr	r1, [pc, #528]	; (29df0 <nct_init+0x248>)
   29bde:	1ac0      	subs	r0, r0, r3
   29be0:	08c0      	lsrs	r0, r0, #3
   29be2:	0180      	lsls	r0, r0, #6
   29be4:	f040 0001 	orr.w	r0, r0, #1
		LOG_ERR("Settings init failed: %d", ret);
   29be8:	f00f fd71 	bl	396ce <log_string_sync>
		return ret;
   29bec:	e01a      	b.n	29c24 <nct_init+0x7c>
	snprintf(id_buf, sizeof(id_buf), "%s%.*s",
   29bee:	230f      	movs	r3, #15
   29bf0:	2114      	movs	r1, #20
   29bf2:	4a80      	ldr	r2, [pc, #512]	; (29df4 <nct_init+0x24c>)
	imei_buf[NRF_IMEI_LEN] = 0;
   29bf4:	f88d 0017 	strb.w	r0, [sp, #23]
	snprintf(id_buf, sizeof(id_buf), "%s%.*s",
   29bf8:	9501      	str	r5, [sp, #4]
   29bfa:	9300      	str	r3, [sp, #0]
   29bfc:	a807      	add	r0, sp, #28
   29bfe:	4b7e      	ldr	r3, [pc, #504]	; (29df8 <nct_init+0x250>)
   29c00:	f00d ff2c 	bl	37a5c <sniprintf>
	size_t len = strlen(id);
   29c04:	a807      	add	r0, sp, #28
   29c06:	f7f3 fb29 	bl	1d25c <strlen>
	if (len > NRF_CLOUD_CLIENT_ID_MAX_LEN) {
   29c0a:	2840      	cmp	r0, #64	; 0x40
	size_t len = strlen(id);
   29c0c:	4605      	mov	r5, r0
	if (len > NRF_CLOUD_CLIENT_ID_MAX_LEN) {
   29c0e:	d82a      	bhi.n	29c66 <nct_init+0xbe>
	client_id_buf = nrf_cloud_calloc(len + 1, 1);
   29c10:	2101      	movs	r1, #1
   29c12:	4408      	add	r0, r1
   29c14:	f014 f971 	bl	3defa <k_calloc>
   29c18:	4e78      	ldr	r6, [pc, #480]	; (29dfc <nct_init+0x254>)
   29c1a:	4604      	mov	r4, r0
   29c1c:	6030      	str	r0, [r6, #0]
	if (!client_id_buf) {
   29c1e:	b928      	cbnz	r0, 29c2c <nct_init+0x84>
		return -ENOMEM;
   29c20:	f06f 040b 	mvn.w	r4, #11
}
   29c24:	4620      	mov	r0, r4
   29c26:	b00d      	add	sp, #52	; 0x34
   29c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c2c:	462a      	mov	r2, r5
   29c2e:	a907      	add	r1, sp, #28
   29c30:	f014 f99b 	bl	3df6a <memcpy>
   29c34:	4d6a      	ldr	r5, [pc, #424]	; (29de0 <nct_init+0x238>)
   29c36:	4b6b      	ldr	r3, [pc, #428]	; (29de4 <nct_init+0x23c>)
   29c38:	4620      	mov	r0, r4
   29c3a:	1aed      	subs	r5, r5, r3
   29c3c:	f00f fd5a 	bl	396f4 <z_log_strdup>
   29c40:	08ed      	lsrs	r5, r5, #3
	LOG_DBG("client_id = %s", log_strdup(client_id_buf));
   29c42:	01ad      	lsls	r5, r5, #6
   29c44:	f045 0704 	orr.w	r7, r5, #4
   29c48:	4603      	mov	r3, r0
   29c4a:	4a6d      	ldr	r2, [pc, #436]	; (29e00 <nct_init+0x258>)
   29c4c:	4638      	mov	r0, r7
   29c4e:	496d      	ldr	r1, [pc, #436]	; (29e04 <nct_init+0x25c>)
   29c50:	f00f fd3d 	bl	396ce <log_string_sync>
	ret = settings_subsys_init();
   29c54:	f7f8 fa64 	bl	22120 <settings_subsys_init>
	if (ret) {
   29c58:	4604      	mov	r4, r0
   29c5a:	b138      	cbz	r0, 29c6c <nct_init+0xc4>
		LOG_ERR("Settings init failed: %d", ret);
   29c5c:	4602      	mov	r2, r0
   29c5e:	496a      	ldr	r1, [pc, #424]	; (29e08 <nct_init+0x260>)
   29c60:	f045 0001 	orr.w	r0, r5, #1
   29c64:	e7c0      	b.n	29be8 <nct_init+0x40>
		return -ENAMETOOLONG;
   29c66:	f06f 045a 	mvn.w	r4, #90	; 0x5a
   29c6a:	e7db      	b.n	29c24 <nct_init+0x7c>
	ret = settings_load_subtree(settings_handler_nrf_cloud.name);
   29c6c:	4867      	ldr	r0, [pc, #412]	; (29e0c <nct_init+0x264>)
   29c6e:	f7f8 f919 	bl	21ea4 <settings_load_subtree>
	if (ret) {
   29c72:	4604      	mov	r4, r0
   29c74:	b170      	cbz	r0, 29c94 <nct_init+0xec>
		LOG_ERR("Cannot load settings: %d", ret);
   29c76:	4602      	mov	r2, r0
   29c78:	4965      	ldr	r1, [pc, #404]	; (29e10 <nct_init+0x268>)
   29c7a:	e7f1      	b.n	29c60 <nct_init+0xb8>
	LOG_ERR("Failed to format MQTT topics, err: %d", ret);
   29c7c:	4622      	mov	r2, r4
   29c7e:	4965      	ldr	r1, [pc, #404]	; (29e14 <nct_init+0x26c>)
   29c80:	f045 0001 	orr.w	r0, r5, #1
   29c84:	f00f fd23 	bl	396ce <log_string_sync>
	nct_reset_topics();
   29c88:	f7ff fcf6 	bl	29678 <nct_reset_topics>
	if (err) {
   29c8c:	e7ca      	b.n	29c24 <nct_init+0x7c>
		return -ENODEV;
   29c8e:	f06f 0412 	mvn.w	r4, #18
   29c92:	e7c7      	b.n	29c24 <nct_init+0x7c>
	err = nrf_cloud_fota_init(nrf_cloud_fota_cb_handler);
   29c94:	4860      	ldr	r0, [pc, #384]	; (29e18 <nct_init+0x270>)
   29c96:	f000 fea1 	bl	2a9dc <nrf_cloud_fota_init>
	if (err < 0) {
   29c9a:	1e04      	subs	r4, r0, #0
   29c9c:	dbc2      	blt.n	29c24 <nct_init+0x7c>
	} else if (err && persistent_session) {
   29c9e:	d005      	beq.n	29cac <nct_init+0x104>
   29ca0:	4b5e      	ldr	r3, [pc, #376]	; (29e1c <nct_init+0x274>)
   29ca2:	781b      	ldrb	r3, [r3, #0]
   29ca4:	b113      	cbz	r3, 29cac <nct_init+0x104>
		save_session_state(0);
   29ca6:	2000      	movs	r0, #0
   29ca8:	f7ff fd72 	bl	29790 <save_session_state>
	dc_endpoint_reset();
   29cac:	f7ff fbea 	bl	29484 <dc_endpoint_reset>
	if (!client_id_buf) {
   29cb0:	6833      	ldr	r3, [r6, #0]
   29cb2:	2b00      	cmp	r3, #0
   29cb4:	d0eb      	beq.n	29c8e <nct_init+0xe6>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   29cb6:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 29e68 <nct_init+0x2c0>
	nct_reset_topics();
   29cba:	f7ff fcdd 	bl	29678 <nct_reset_topics>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   29cbe:	4650      	mov	r0, sl
   29cc0:	4957      	ldr	r1, [pc, #348]	; (29e20 <nct_init+0x278>)
   29cc2:	f7ff fcaf 	bl	29624 <allocate_and_format_topic>
	if (ret) {
   29cc6:	4604      	mov	r4, r0
   29cc8:	2800      	cmp	r0, #0
   29cca:	d1d7      	bne.n	29c7c <nct_init+0xd4>
	ret = allocate_and_format_topic(&rejected_topic, NCT_REJECTED_TOPIC);
   29ccc:	f8df 919c 	ldr.w	r9, [pc, #412]	; 29e6c <nct_init+0x2c4>
   29cd0:	4954      	ldr	r1, [pc, #336]	; (29e24 <nct_init+0x27c>)
   29cd2:	4648      	mov	r0, r9
   29cd4:	f7ff fca6 	bl	29624 <allocate_and_format_topic>
	if (ret) {
   29cd8:	4604      	mov	r4, r0
   29cda:	2800      	cmp	r0, #0
   29cdc:	d1ce      	bne.n	29c7c <nct_init+0xd4>
	ret = allocate_and_format_topic(&update_delta_topic, NCT_UPDATE_DELTA_TOPIC);
   29cde:	f8df 8190 	ldr.w	r8, [pc, #400]	; 29e70 <nct_init+0x2c8>
   29ce2:	4951      	ldr	r1, [pc, #324]	; (29e28 <nct_init+0x280>)
   29ce4:	4640      	mov	r0, r8
   29ce6:	f7ff fc9d 	bl	29624 <allocate_and_format_topic>
	if (ret) {
   29cea:	4604      	mov	r4, r0
   29cec:	2800      	cmp	r0, #0
   29cee:	d1c5      	bne.n	29c7c <nct_init+0xd4>
	ret = allocate_and_format_topic(&update_topic, NCT_UPDATE_TOPIC);
   29cf0:	4e4e      	ldr	r6, [pc, #312]	; (29e2c <nct_init+0x284>)
   29cf2:	494f      	ldr	r1, [pc, #316]	; (29e30 <nct_init+0x288>)
   29cf4:	4630      	mov	r0, r6
   29cf6:	f7ff fc95 	bl	29624 <allocate_and_format_topic>
	if (ret) {
   29cfa:	4604      	mov	r4, r0
   29cfc:	2800      	cmp	r0, #0
   29cfe:	d1bd      	bne.n	29c7c <nct_init+0xd4>
	ret = allocate_and_format_topic(&shadow_get_topic, NCT_SHADOW_GET);
   29d00:	4f4c      	ldr	r7, [pc, #304]	; (29e34 <nct_init+0x28c>)
   29d02:	494d      	ldr	r1, [pc, #308]	; (29e38 <nct_init+0x290>)
   29d04:	4638      	mov	r0, r7
   29d06:	f7ff fc8d 	bl	29624 <allocate_and_format_topic>
	if (ret) {
   29d0a:	4604      	mov	r4, r0
   29d0c:	2800      	cmp	r0, #0
   29d0e:	d1b5      	bne.n	29c7c <nct_init+0xd4>
   29d10:	f8da 0000 	ldr.w	r0, [sl]
   29d14:	f00f fcee 	bl	396f4 <z_log_strdup>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   29d18:	f045 0504 	orr.w	r5, r5, #4
   29d1c:	4603      	mov	r3, r0
   29d1e:	4a47      	ldr	r2, [pc, #284]	; (29e3c <nct_init+0x294>)
   29d20:	4628      	mov	r0, r5
   29d22:	4947      	ldr	r1, [pc, #284]	; (29e40 <nct_init+0x298>)
   29d24:	f00f fcd3 	bl	396ce <log_string_sync>
   29d28:	f8d9 0000 	ldr.w	r0, [r9]
   29d2c:	f00f fce2 	bl	396f4 <z_log_strdup>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   29d30:	4a42      	ldr	r2, [pc, #264]	; (29e3c <nct_init+0x294>)
   29d32:	4603      	mov	r3, r0
   29d34:	4943      	ldr	r1, [pc, #268]	; (29e44 <nct_init+0x29c>)
   29d36:	4628      	mov	r0, r5
   29d38:	f00f fcc9 	bl	396ce <log_string_sync>
   29d3c:	f8d8 0000 	ldr.w	r0, [r8]
   29d40:	f00f fcd8 	bl	396f4 <z_log_strdup>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   29d44:	4a3d      	ldr	r2, [pc, #244]	; (29e3c <nct_init+0x294>)
   29d46:	4603      	mov	r3, r0
   29d48:	493f      	ldr	r1, [pc, #252]	; (29e48 <nct_init+0x2a0>)
   29d4a:	4628      	mov	r0, r5
   29d4c:	f00f fcbf 	bl	396ce <log_string_sync>
   29d50:	6830      	ldr	r0, [r6, #0]
   29d52:	f00f fccf 	bl	396f4 <z_log_strdup>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   29d56:	4a39      	ldr	r2, [pc, #228]	; (29e3c <nct_init+0x294>)
   29d58:	4603      	mov	r3, r0
   29d5a:	493c      	ldr	r1, [pc, #240]	; (29e4c <nct_init+0x2a4>)
   29d5c:	4628      	mov	r0, r5
   29d5e:	f00f fcb6 	bl	396ce <log_string_sync>
   29d62:	6838      	ldr	r0, [r7, #0]
   29d64:	f00f fcc6 	bl	396f4 <z_log_strdup>
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   29d68:	f04f 0b01 	mov.w	fp, #1
   29d6c:	4603      	mov	r3, r0
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   29d6e:	4a33      	ldr	r2, [pc, #204]	; (29e3c <nct_init+0x294>)
   29d70:	4937      	ldr	r1, [pc, #220]	; (29e50 <nct_init+0x2a8>)
   29d72:	4628      	mov	r0, r5
   29d74:	f00f fcab 	bl	396ce <log_string_sync>
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   29d78:	4d36      	ldr	r5, [pc, #216]	; (29e54 <nct_init+0x2ac>)
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   29d7a:	f8da 0000 	ldr.w	r0, [sl]
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   29d7e:	f885 b008 	strb.w	fp, [r5, #8]
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   29d82:	6028      	str	r0, [r5, #0]
	nct_cc_rx_list[0].topic.size = strlen(accepted_topic);
   29d84:	f7f3 fa6a 	bl	1d25c <strlen>
   29d88:	6068      	str	r0, [r5, #4]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   29d8a:	f8d9 0000 	ldr.w	r0, [r9]
	nct_cc_rx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   29d8e:	f885 b014 	strb.w	fp, [r5, #20]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   29d92:	60e8      	str	r0, [r5, #12]
	nct_cc_rx_list[1].topic.size = strlen(rejected_topic);
   29d94:	f7f3 fa62 	bl	1d25c <strlen>
   29d98:	6128      	str	r0, [r5, #16]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   29d9a:	f8d8 0000 	ldr.w	r0, [r8]
	nct_cc_rx_list[2].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   29d9e:	f885 b020 	strb.w	fp, [r5, #32]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   29da2:	61a8      	str	r0, [r5, #24]
	nct_cc_rx_list[2].topic.size = strlen(update_delta_topic);
   29da4:	f7f3 fa5a 	bl	1d25c <strlen>
   29da8:	61e8      	str	r0, [r5, #28]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   29daa:	4d2b      	ldr	r5, [pc, #172]	; (29e58 <nct_init+0x2b0>)
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   29dac:	6838      	ldr	r0, [r7, #0]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   29dae:	f885 b008 	strb.w	fp, [r5, #8]
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   29db2:	6028      	str	r0, [r5, #0]
	nct_cc_tx_list[0].topic.size = strlen(shadow_get_topic);
   29db4:	f7f3 fa52 	bl	1d25c <strlen>
   29db8:	6068      	str	r0, [r5, #4]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   29dba:	6830      	ldr	r0, [r6, #0]
	nct_cc_tx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   29dbc:	f885 b014 	strb.w	fp, [r5, #20]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   29dc0:	60e8      	str	r0, [r5, #12]
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   29dc2:	f7f3 fa4b 	bl	1d25c <strlen>
	nct.tls_config.peer_verify = 2;
   29dc6:	2202      	movs	r2, #2
   29dc8:	4b24      	ldr	r3, [pc, #144]	; (29e5c <nct_init+0x2b4>)
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   29dca:	6128      	str	r0, [r5, #16]
	nct.tls_config.cipher_count = 0;
   29dcc:	e9c3 2400 	strd	r2, r4, [r3]
	nct.tls_config.sec_tag_list = sec_tag_list;
   29dd0:	4a23      	ldr	r2, [pc, #140]	; (29e60 <nct_init+0x2b8>)
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   29dd2:	e9c3 4b02 	strd	r4, fp, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   29dd6:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   29dd8:	4a22      	ldr	r2, [pc, #136]	; (29e64 <nct_init+0x2bc>)
   29dda:	615a      	str	r2, [r3, #20]
	return nct_provision();
   29ddc:	e722      	b.n	29c24 <nct_init+0x7c>
   29dde:	bf00      	nop
   29de0:	0003f6a4 	.word	0x0003f6a4
   29de4:	0003f5a4 	.word	0x0003f5a4
   29de8:	00043432 	.word	0x00043432
   29dec:	000425a8 	.word	0x000425a8
   29df0:	00043464 	.word	0x00043464
   29df4:	0004348a 	.word	0x0004348a
   29df8:	00043485 	.word	0x00043485
   29dfc:	2001784c 	.word	0x2001784c
   29e00:	000437a2 	.word	0x000437a2
   29e04:	00043491 	.word	0x00043491
   29e08:	000434a4 	.word	0x000434a4
   29e0c:	00042bd5 	.word	0x00042bd5
   29e10:	000434bd 	.word	0x000434bd
   29e14:	00043610 	.word	0x00043610
   29e18:	00029561 	.word	0x00029561
   29e1c:	2001d5ac 	.word	0x2001d5ac
   29e20:	000434d6 	.word	0x000434d6
   29e24:	000434ed 	.word	0x000434ed
   29e28:	00043510 	.word	0x00043510
   29e2c:	20018374 	.word	0x20018374
   29e30:	00043533 	.word	0x00043533
   29e34:	2001836c 	.word	0x2001836c
   29e38:	00043550 	.word	0x00043550
   29e3c:	000437be 	.word	0x000437be
   29e40:	0004356a 	.word	0x0004356a
   29e44:	00043581 	.word	0x00043581
   29e48:	00043598 	.word	0x00043598
   29e4c:	000435b3 	.word	0x000435b3
   29e50:	000435c8 	.word	0x000435c8
   29e54:	2001832c 	.word	0x2001832c
   29e58:	20018350 	.word	0x20018350
   29e5c:	20017850 	.word	0x20017850
   29e60:	2001482c 	.word	0x2001482c
   29e64:	000435e1 	.word	0x000435e1
   29e68:	20017848 	.word	0x20017848
   29e6c:	20018368 	.word	0x20018368
   29e70:	20018370 	.word	0x20018370

00029e74 <nct_connect>:
{
   29e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   29e76:	b09d      	sub	sp, #116	; 0x74
	struct addrinfo hints = {
   29e78:	2250      	movs	r2, #80	; 0x50
   29e7a:	2100      	movs	r1, #0
   29e7c:	a808      	add	r0, sp, #32
   29e7e:	f014 f894 	bl	3dfaa <memset>
   29e82:	2301      	movs	r3, #1
	return zsock_getaddrinfo(host, service, hints, res);
   29e84:	2100      	movs	r1, #0
   29e86:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   29e8a:	4827      	ldr	r0, [pc, #156]	; (29f28 <nct_connect+0xb4>)
   29e8c:	ab03      	add	r3, sp, #12
   29e8e:	aa08      	add	r2, sp, #32
   29e90:	f00f ff75 	bl	39d7e <zsock_getaddrinfo>
	if (err) {
   29e94:	4c25      	ldr	r4, [pc, #148]	; (29f2c <nct_connect+0xb8>)
   29e96:	4b26      	ldr	r3, [pc, #152]	; (29f30 <nct_connect+0xbc>)
   29e98:	1ae4      	subs	r4, r4, r3
   29e9a:	08e4      	lsrs	r4, r4, #3
   29e9c:	4603      	mov	r3, r0
   29e9e:	b158      	cbz	r0, 29eb8 <nct_connect+0x44>
		LOG_DBG("getaddrinfo failed %d", err);
   29ea0:	01a4      	lsls	r4, r4, #6
   29ea2:	f044 0004 	orr.w	r0, r4, #4
   29ea6:	4a23      	ldr	r2, [pc, #140]	; (29f34 <nct_connect+0xc0>)
   29ea8:	4923      	ldr	r1, [pc, #140]	; (29f38 <nct_connect+0xc4>)
   29eaa:	f00f fc10 	bl	396ce <log_string_sync>
		return -ECHILD;
   29eae:	f06f 0409 	mvn.w	r4, #9
}
   29eb2:	4620      	mov	r0, r4
   29eb4:	b01d      	add	sp, #116	; 0x74
   29eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr = result;
   29eb8:	01a4      	lsls	r4, r4, #6
   29eba:	9d03      	ldr	r5, [sp, #12]
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   29ebc:	4f1d      	ldr	r7, [pc, #116]	; (29f34 <nct_connect+0xc0>)
   29ebe:	f044 0604 	orr.w	r6, r4, #4
	while (addr != NULL) {
   29ec2:	b915      	cbnz	r5, 29eca <nct_connect+0x56>
	err = -ECHILD;
   29ec4:	f06f 0409 	mvn.w	r4, #9
   29ec8:	e01f      	b.n	29f0a <nct_connect+0x96>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   29eca:	696b      	ldr	r3, [r5, #20]
   29ecc:	2b08      	cmp	r3, #8
   29ece:	d120      	bne.n	29f12 <nct_connect+0x9e>
					->sin_addr.s_addr;
   29ed0:	69ab      	ldr	r3, [r5, #24]
			broker->sin_addr.s_addr =
   29ed2:	491a      	ldr	r1, [pc, #104]	; (29f3c <nct_connect+0xc8>)
					->sin_addr.s_addr;
   29ed4:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   29ed6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
			broker->sin_family = AF_INET;
   29eda:	4b19      	ldr	r3, [pc, #100]	; (29f40 <nct_connect+0xcc>)
   29edc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   29ee0:	2310      	movs	r3, #16
   29ee2:	31a0      	adds	r1, #160	; 0xa0
   29ee4:	eb0d 0203 	add.w	r2, sp, r3
   29ee8:	2001      	movs	r0, #1
   29eea:	f7fa fa43 	bl	24374 <z_impl_net_addr_ntop>
   29eee:	a804      	add	r0, sp, #16
   29ef0:	f00f fc00 	bl	396f4 <z_log_strdup>
			LOG_DBG("IPv4 address: %s", log_strdup(addr_str));
   29ef4:	f044 0404 	orr.w	r4, r4, #4
   29ef8:	4603      	mov	r3, r0
   29efa:	4a0e      	ldr	r2, [pc, #56]	; (29f34 <nct_connect+0xc0>)
   29efc:	4620      	mov	r0, r4
   29efe:	4911      	ldr	r1, [pc, #68]	; (29f44 <nct_connect+0xd0>)
   29f00:	f00f fbe5 	bl	396ce <log_string_sync>
			err = nct_mqtt_connect();
   29f04:	f7ff fdb8 	bl	29a78 <nct_mqtt_connect>
   29f08:	4604      	mov	r4, r0
	zsock_freeaddrinfo(ai);
   29f0a:	9803      	ldr	r0, [sp, #12]
   29f0c:	f00f ff39 	bl	39d82 <zsock_freeaddrinfo>
	return err;
   29f10:	e7cf      	b.n	29eb2 <nct_connect+0x3e>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   29f12:	2208      	movs	r2, #8
   29f14:	2118      	movs	r1, #24
   29f16:	4630      	mov	r0, r6
   29f18:	e9cd 2100 	strd	r2, r1, [sp]
   29f1c:	463a      	mov	r2, r7
   29f1e:	490a      	ldr	r1, [pc, #40]	; (29f48 <nct_connect+0xd4>)
   29f20:	f00f fbd5 	bl	396ce <log_string_sync>
		addr = addr->ai_next;
   29f24:	682d      	ldr	r5, [r5, #0]
   29f26:	e7cc      	b.n	29ec2 <nct_connect+0x4e>
   29f28:	000435e1 	.word	0x000435e1
   29f2c:	0003f6a4 	.word	0x0003f6a4
   29f30:	0003f5a4 	.word	0x0003f5a4
   29f34:	00043836 	.word	0x00043836
   29f38:	00043636 	.word	0x00043636
   29f3c:	20017850 	.word	0x20017850
   29f40:	b3220001 	.word	0xb3220001
   29f44:	00043650 	.word	0x00043650
   29f48:	00043665 	.word	0x00043665

00029f4c <nct_cc_connect>:
{
   29f4c:	b507      	push	{r0, r1, r2, lr}
   29f4e:	4b0b      	ldr	r3, [pc, #44]	; (29f7c <nct_cc_connect+0x30>)
   29f50:	480b      	ldr	r0, [pc, #44]	; (29f80 <nct_cc_connect+0x34>)
	LOG_DBG("nct_cc_connect");
   29f52:	4a0c      	ldr	r2, [pc, #48]	; (29f84 <nct_cc_connect+0x38>)
   29f54:	1ac0      	subs	r0, r0, r3
   29f56:	08c0      	lsrs	r0, r0, #3
   29f58:	0180      	lsls	r0, r0, #6
   29f5a:	490b      	ldr	r1, [pc, #44]	; (29f88 <nct_cc_connect+0x3c>)
   29f5c:	f040 0004 	orr.w	r0, r0, #4
   29f60:	f00f fbb5 	bl	396ce <log_string_sync>
	const struct mqtt_subscription_list subscription_list = {
   29f64:	4b09      	ldr	r3, [pc, #36]	; (29f8c <nct_cc_connect+0x40>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   29f66:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   29f68:	9300      	str	r3, [sp, #0]
   29f6a:	4b09      	ldr	r3, [pc, #36]	; (29f90 <nct_cc_connect+0x44>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   29f6c:	4809      	ldr	r0, [pc, #36]	; (29f94 <nct_cc_connect+0x48>)
	const struct mqtt_subscription_list subscription_list = {
   29f6e:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   29f70:	f011 f835 	bl	3afde <mqtt_subscribe>
}
   29f74:	b003      	add	sp, #12
   29f76:	f85d fb04 	ldr.w	pc, [sp], #4
   29f7a:	bf00      	nop
   29f7c:	0003f5a4 	.word	0x0003f5a4
   29f80:	0003f6a4 	.word	0x0003f6a4
   29f84:	00043842 	.word	0x00043842
   29f88:	0004368c 	.word	0x0004368c
   29f8c:	2001832c 	.word	0x2001832c
   29f90:	04d20003 	.word	0x04d20003
   29f94:	2001786c 	.word	0x2001786c

00029f98 <nct_cc_send>:
{
   29f98:	b570      	push	{r4, r5, r6, lr}
   29f9a:	4b2b      	ldr	r3, [pc, #172]	; (2a048 <nct_cc_send+0xb0>)
   29f9c:	4c2b      	ldr	r4, [pc, #172]	; (2a04c <nct_cc_send+0xb4>)
	if (cc_data == NULL) {
   29f9e:	4605      	mov	r5, r0
   29fa0:	1ae4      	subs	r4, r4, r3
   29fa2:	08e4      	lsrs	r4, r4, #3
{
   29fa4:	b088      	sub	sp, #32
   29fa6:	01a4      	lsls	r4, r4, #6
	if (cc_data == NULL) {
   29fa8:	b948      	cbnz	r0, 29fbe <nct_cc_send+0x26>
		LOG_ERR("cc_data == NULL");
   29faa:	4929      	ldr	r1, [pc, #164]	; (2a050 <nct_cc_send+0xb8>)
   29fac:	f044 0001 	orr.w	r0, r4, #1
   29fb0:	f00f fb8d 	bl	396ce <log_string_sync>
		return -EINVAL;
   29fb4:	f06f 0515 	mvn.w	r5, #21
}
   29fb8:	4628      	mov	r0, r5
   29fba:	b008      	add	sp, #32
   29fbc:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   29fbe:	7d06      	ldrb	r6, [r0, #20]
   29fc0:	2e01      	cmp	r6, #1
   29fc2:	d908      	bls.n	29fd6 <nct_cc_send+0x3e>
		LOG_ERR("opcode = %d", cc_data->opcode);
   29fc4:	4632      	mov	r2, r6
   29fc6:	4923      	ldr	r1, [pc, #140]	; (2a054 <nct_cc_send+0xbc>)
   29fc8:	f044 0001 	orr.w	r0, r4, #1
   29fcc:	f00f fb7f 	bl	396ce <log_string_sync>
		return -ENOTSUP;
   29fd0:	f06f 0585 	mvn.w	r5, #133	; 0x85
   29fd4:	e7f0      	b.n	29fb8 <nct_cc_send+0x20>
	struct mqtt_publish_param publish = {
   29fd6:	2210      	movs	r2, #16
   29fd8:	2100      	movs	r1, #0
   29fda:	eb0d 0002 	add.w	r0, sp, r2
   29fde:	f013 ffe4 	bl	3dfaa <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   29fe2:	220c      	movs	r2, #12
   29fe4:	4372      	muls	r2, r6
   29fe6:	491c      	ldr	r1, [pc, #112]	; (2a058 <nct_cc_send+0xc0>)
   29fe8:	188b      	adds	r3, r1, r2
	struct mqtt_publish_param publish = {
   29fea:	588a      	ldr	r2, [r1, r2]
   29fec:	9202      	str	r2, [sp, #8]
   29fee:	685a      	ldr	r2, [r3, #4]
   29ff0:	7a1b      	ldrb	r3, [r3, #8]
   29ff2:	9203      	str	r2, [sp, #12]
   29ff4:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   29ff8:	682b      	ldr	r3, [r5, #0]
   29ffa:	b11b      	cbz	r3, 2a004 <nct_cc_send+0x6c>
   29ffc:	686a      	ldr	r2, [r5, #4]
   29ffe:	b10a      	cbz	r2, 2a004 <nct_cc_send+0x6c>
		publish.message.payload.len = cc_data->data.len;
   2a000:	e9cd 2305 	strd	r2, r3, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : get_next_message_id();
   2a004:	692b      	ldr	r3, [r5, #16]
   2a006:	b1d3      	cbz	r3, 2a03e <nct_cc_send+0xa6>
   2a008:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2a00a:	682a      	ldr	r2, [r5, #0]
   2a00c:	4913      	ldr	r1, [pc, #76]	; (2a05c <nct_cc_send+0xc4>)
   2a00e:	9201      	str	r2, [sp, #4]
   2a010:	7d2a      	ldrb	r2, [r5, #20]
   2a012:	f044 0004 	orr.w	r0, r4, #4
   2a016:	9200      	str	r2, [sp, #0]
   2a018:	4a11      	ldr	r2, [pc, #68]	; (2a060 <nct_cc_send+0xc8>)
	publish.message_id = cc_data->id ? cc_data->id : get_next_message_id();
   2a01a:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2a01e:	f00f fb56 	bl	396ce <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   2a022:	4810      	ldr	r0, [pc, #64]	; (2a064 <nct_cc_send+0xcc>)
   2a024:	a902      	add	r1, sp, #8
   2a026:	f010 ff45 	bl	3aeb4 <mqtt_publish>
	if (err) {
   2a02a:	4605      	mov	r5, r0
   2a02c:	2800      	cmp	r0, #0
   2a02e:	d0c3      	beq.n	29fb8 <nct_cc_send+0x20>
		LOG_ERR("mqtt_publish failed %d", err);
   2a030:	4602      	mov	r2, r0
   2a032:	490d      	ldr	r1, [pc, #52]	; (2a068 <nct_cc_send+0xd0>)
   2a034:	f044 0001 	orr.w	r0, r4, #1
   2a038:	f00f fb49 	bl	396ce <log_string_sync>
   2a03c:	e7bc      	b.n	29fb8 <nct_cc_send+0x20>
	publish.message_id = cc_data->id ? cc_data->id : get_next_message_id();
   2a03e:	f7ff fa2f 	bl	294a0 <get_next_message_id>
   2a042:	b283      	uxth	r3, r0
   2a044:	e7e1      	b.n	2a00a <nct_cc_send+0x72>
   2a046:	bf00      	nop
   2a048:	0003f5a4 	.word	0x0003f5a4
   2a04c:	0003f6a4 	.word	0x0003f6a4
   2a050:	0004369f 	.word	0x0004369f
   2a054:	000436af 	.word	0x000436af
   2a058:	20018350 	.word	0x20018350
   2a05c:	000436bb 	.word	0x000436bb
   2a060:	00043851 	.word	0x00043851
   2a064:	2001786c 	.word	0x2001786c
   2a068:	000436ea 	.word	0x000436ea

0002a06c <nct_dc_endpoint_set>:
{
   2a06c:	b570      	push	{r4, r5, r6, lr}
   2a06e:	4606      	mov	r6, r0
   2a070:	460d      	mov	r5, r1
   2a072:	4614      	mov	r4, r2
   2a074:	4817      	ldr	r0, [pc, #92]	; (2a0d4 <nct_dc_endpoint_set+0x68>)
   2a076:	4b18      	ldr	r3, [pc, #96]	; (2a0d8 <nct_dc_endpoint_set+0x6c>)
	LOG_DBG("nct_dc_endpoint_set");
   2a078:	4a18      	ldr	r2, [pc, #96]	; (2a0dc <nct_dc_endpoint_set+0x70>)
   2a07a:	1a1b      	subs	r3, r3, r0
   2a07c:	08db      	lsrs	r3, r3, #3
   2a07e:	019b      	lsls	r3, r3, #6
   2a080:	f043 0004 	orr.w	r0, r3, #4
   2a084:	4916      	ldr	r1, [pc, #88]	; (2a0e0 <nct_dc_endpoint_set+0x74>)
   2a086:	f00f fb22 	bl	396ce <log_string_sync>
	dc_endpoint_free();
   2a08a:	f7ff fb63 	bl	29754 <dc_endpoint_free>
	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   2a08e:	6872      	ldr	r2, [r6, #4]
   2a090:	4814      	ldr	r0, [pc, #80]	; (2a0e4 <nct_dc_endpoint_set+0x78>)
   2a092:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
	nct.dc_tx_endp.size = tx_endp->len;
   2a096:	6832      	ldr	r2, [r6, #0]
   2a098:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   2a09c:	686a      	ldr	r2, [r5, #4]
   2a09e:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
	nct.dc_rx_endp.size = rx_endp->len;
   2a0a2:	682a      	ldr	r2, [r5, #0]
   2a0a4:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
	if (m_endp != NULL) {
   2a0a8:	b19c      	cbz	r4, 2a0d2 <nct_dc_endpoint_set+0x66>
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2a0aa:	6862      	ldr	r2, [r4, #4]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2a0ac:	490e      	ldr	r1, [pc, #56]	; (2a0e8 <nct_dc_endpoint_set+0x7c>)
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2a0ae:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
		nct.dc_m_endp.size = m_endp->len;
   2a0b2:	6822      	ldr	r2, [r4, #0]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2a0b4:	6809      	ldr	r1, [r1, #0]
		nct.dc_m_endp.size = m_endp->len;
   2a0b6:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2a0ba:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   2a0be:	301c      	adds	r0, #28
   2a0c0:	f000 fdaa 	bl	2ac18 <nrf_cloud_fota_endpoint_set_and_report>
		if (persistent_session) {
   2a0c4:	4b09      	ldr	r3, [pc, #36]	; (2a0ec <nct_dc_endpoint_set+0x80>)
   2a0c6:	781b      	ldrb	r3, [r3, #0]
   2a0c8:	b11b      	cbz	r3, 2a0d2 <nct_dc_endpoint_set+0x66>
}
   2a0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)nrf_cloud_fota_update_check();
   2a0ce:	f000 be23 	b.w	2ad18 <nrf_cloud_fota_update_check>
}
   2a0d2:	bd70      	pop	{r4, r5, r6, pc}
   2a0d4:	0003f5a4 	.word	0x0003f5a4
   2a0d8:	0003f6a4 	.word	0x0003f6a4
   2a0dc:	0004385d 	.word	0x0004385d
   2a0e0:	00043701 	.word	0x00043701
   2a0e4:	20017850 	.word	0x20017850
   2a0e8:	2001784c 	.word	0x2001784c
   2a0ec:	2001d5ac 	.word	0x2001d5ac

0002a0f0 <nct_dc_endpoint_get>:
{
   2a0f0:	b570      	push	{r4, r5, r6, lr}
   2a0f2:	4606      	mov	r6, r0
   2a0f4:	460d      	mov	r5, r1
   2a0f6:	4614      	mov	r4, r2
   2a0f8:	480f      	ldr	r0, [pc, #60]	; (2a138 <nct_dc_endpoint_get+0x48>)
   2a0fa:	4b10      	ldr	r3, [pc, #64]	; (2a13c <nct_dc_endpoint_get+0x4c>)
	LOG_DBG("nct_dc_endpoint_get");
   2a0fc:	4a10      	ldr	r2, [pc, #64]	; (2a140 <nct_dc_endpoint_get+0x50>)
   2a0fe:	1a1b      	subs	r3, r3, r0
   2a100:	08db      	lsrs	r3, r3, #3
   2a102:	019b      	lsls	r3, r3, #6
   2a104:	f043 0004 	orr.w	r0, r3, #4
   2a108:	490e      	ldr	r1, [pc, #56]	; (2a144 <nct_dc_endpoint_get+0x54>)
   2a10a:	f00f fae0 	bl	396ce <log_string_sync>
	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2a10e:	4b0e      	ldr	r3, [pc, #56]	; (2a148 <nct_dc_endpoint_get+0x58>)
   2a110:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2a114:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2a116:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   2a11a:	6032      	str	r2, [r6, #0]
	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2a11c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   2a120:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2a122:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   2a126:	602a      	str	r2, [r5, #0]
	if (m_endp != NULL) {
   2a128:	b12c      	cbz	r4, 2a136 <nct_dc_endpoint_get+0x46>
		m_endp->ptr = nct.dc_m_endp.utf8;
   2a12a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
		m_endp->len = nct.dc_m_endp.size;
   2a12e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		m_endp->ptr = nct.dc_m_endp.utf8;
   2a132:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   2a134:	6023      	str	r3, [r4, #0]
}
   2a136:	bd70      	pop	{r4, r5, r6, pc}
   2a138:	0003f5a4 	.word	0x0003f5a4
   2a13c:	0003f6a4 	.word	0x0003f6a4
   2a140:	00043871 	.word	0x00043871
   2a144:	00043719 	.word	0x00043719
   2a148:	20017850 	.word	0x20017850

0002a14c <nct_dc_connect>:
{
   2a14c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a14e:	4b10      	ldr	r3, [pc, #64]	; (2a190 <nct_dc_connect+0x44>)
   2a150:	4810      	ldr	r0, [pc, #64]	; (2a194 <nct_dc_connect+0x48>)
	LOG_DBG("nct_dc_connect");
   2a152:	4a11      	ldr	r2, [pc, #68]	; (2a198 <nct_dc_connect+0x4c>)
   2a154:	1ac0      	subs	r0, r0, r3
   2a156:	08c0      	lsrs	r0, r0, #3
   2a158:	0180      	lsls	r0, r0, #6
   2a15a:	4910      	ldr	r1, [pc, #64]	; (2a19c <nct_dc_connect+0x50>)
   2a15c:	f040 0004 	orr.w	r0, r0, #4
   2a160:	f00f fab5 	bl	396ce <log_string_sync>
			.utf8 = nct.dc_rx_endp.utf8,
   2a164:	480e      	ldr	r0, [pc, #56]	; (2a1a0 <nct_dc_connect+0x54>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2a166:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   2a168:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
	return mqtt_subscribe(&nct.client, &subscription_list);
   2a16c:	301c      	adds	r0, #28
	struct mqtt_topic subscribe_topic = {
   2a16e:	9303      	str	r3, [sp, #12]
   2a170:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2a174:	9304      	str	r3, [sp, #16]
   2a176:	2301      	movs	r3, #1
   2a178:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   2a17c:	ab03      	add	r3, sp, #12
   2a17e:	9301      	str	r3, [sp, #4]
   2a180:	4b08      	ldr	r3, [pc, #32]	; (2a1a4 <nct_dc_connect+0x58>)
   2a182:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2a184:	f010 ff2b 	bl	3afde <mqtt_subscribe>
}
   2a188:	b007      	add	sp, #28
   2a18a:	f85d fb04 	ldr.w	pc, [sp], #4
   2a18e:	bf00      	nop
   2a190:	0003f5a4 	.word	0x0003f5a4
   2a194:	0003f6a4 	.word	0x0003f6a4
   2a198:	00043885 	.word	0x00043885
   2a19c:	00043731 	.word	0x00043731
   2a1a0:	20017850 	.word	0x20017850
   2a1a4:	223d0001 	.word	0x223d0001

0002a1a8 <nct_dc_disconnect>:
{
   2a1a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a1aa:	4b12      	ldr	r3, [pc, #72]	; (2a1f4 <nct_dc_disconnect+0x4c>)
   2a1ac:	4c12      	ldr	r4, [pc, #72]	; (2a1f8 <nct_dc_disconnect+0x50>)
	LOG_DBG("nct_dc_disconnect");
   2a1ae:	4a13      	ldr	r2, [pc, #76]	; (2a1fc <nct_dc_disconnect+0x54>)
   2a1b0:	1ae4      	subs	r4, r4, r3
   2a1b2:	08e4      	lsrs	r4, r4, #3
   2a1b4:	01a4      	lsls	r4, r4, #6
   2a1b6:	4912      	ldr	r1, [pc, #72]	; (2a200 <nct_dc_disconnect+0x58>)
   2a1b8:	f044 0004 	orr.w	r0, r4, #4
   2a1bc:	f00f fa87 	bl	396ce <log_string_sync>
	const struct mqtt_subscription_list subscription_list = {
   2a1c0:	4810      	ldr	r0, [pc, #64]	; (2a204 <nct_dc_disconnect+0x5c>)
   2a1c2:	4b11      	ldr	r3, [pc, #68]	; (2a208 <nct_dc_disconnect+0x60>)
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2a1c4:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2a1c6:	9000      	str	r0, [sp, #0]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2a1c8:	38a0      	subs	r0, #160	; 0xa0
	const struct mqtt_subscription_list subscription_list = {
   2a1ca:	9301      	str	r3, [sp, #4]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2a1cc:	f010 ff2e 	bl	3b02c <mqtt_unsubscribe>
   2a1d0:	4605      	mov	r5, r0
	int err = nrf_cloud_fota_unsubscribe();
   2a1d2:	f000 fd83 	bl	2acdc <nrf_cloud_fota_unsubscribe>
	if (err) {
   2a1d6:	4606      	mov	r6, r0
   2a1d8:	b140      	cbz	r0, 2a1ec <nct_dc_disconnect+0x44>
		LOG_ERR("FOTA MQTT unsubscribe failed: %d", err);
   2a1da:	4602      	mov	r2, r0
   2a1dc:	490b      	ldr	r1, [pc, #44]	; (2a20c <nct_dc_disconnect+0x64>)
   2a1de:	f044 0001 	orr.w	r0, r4, #1
   2a1e2:	f00f fa74 	bl	396ce <log_string_sync>
		if (ret == 0) {
   2a1e6:	2d00      	cmp	r5, #0
   2a1e8:	bf08      	it	eq
   2a1ea:	4635      	moveq	r5, r6
}
   2a1ec:	4628      	mov	r0, r5
   2a1ee:	b002      	add	sp, #8
   2a1f0:	bd70      	pop	{r4, r5, r6, pc}
   2a1f2:	bf00      	nop
   2a1f4:	0003f5a4 	.word	0x0003f5a4
   2a1f8:	0003f6a4 	.word	0x0003f6a4
   2a1fc:	00043894 	.word	0x00043894
   2a200:	00043744 	.word	0x00043744
   2a204:	2001790c 	.word	0x2001790c
   2a208:	223d0001 	.word	0x223d0001
   2a20c:	0004375a 	.word	0x0004375a

0002a210 <nct_disconnect>:
{
   2a210:	b508      	push	{r3, lr}
   2a212:	4809      	ldr	r0, [pc, #36]	; (2a238 <nct_disconnect+0x28>)
   2a214:	4b09      	ldr	r3, [pc, #36]	; (2a23c <nct_disconnect+0x2c>)
	LOG_DBG("nct_disconnect");
   2a216:	4a0a      	ldr	r2, [pc, #40]	; (2a240 <nct_disconnect+0x30>)
   2a218:	1ac0      	subs	r0, r0, r3
   2a21a:	08c0      	lsrs	r0, r0, #3
   2a21c:	0180      	lsls	r0, r0, #6
   2a21e:	f040 0004 	orr.w	r0, r0, #4
   2a222:	4908      	ldr	r1, [pc, #32]	; (2a244 <nct_disconnect+0x34>)
   2a224:	f00f fa53 	bl	396ce <log_string_sync>
	dc_endpoint_free();
   2a228:	f7ff fa94 	bl	29754 <dc_endpoint_free>
}
   2a22c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2a230:	4805      	ldr	r0, [pc, #20]	; (2a248 <nct_disconnect+0x38>)
   2a232:	f010 beab 	b.w	3af8c <mqtt_disconnect>
   2a236:	bf00      	nop
   2a238:	0003f6a4 	.word	0x0003f6a4
   2a23c:	0003f5a4 	.word	0x0003f5a4
   2a240:	000438a6 	.word	0x000438a6
   2a244:	0004377b 	.word	0x0004377b
   2a248:	2001786c 	.word	0x2001786c

0002a24c <nct_process>:
{
   2a24c:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   2a24e:	4c04      	ldr	r4, [pc, #16]	; (2a260 <nct_process+0x14>)
   2a250:	4620      	mov	r0, r4
   2a252:	f010 ff7b 	bl	3b14c <mqtt_input>
	mqtt_live(&nct.client);
   2a256:	4620      	mov	r0, r4
}
   2a258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   2a25c:	f010 bf38 	b.w	3b0d0 <mqtt_live>
   2a260:	2001786c 	.word	0x2001786c

0002a264 <nct_keepalive_time_left>:
	return mqtt_keepalive_time_left(&nct.client);
   2a264:	4801      	ldr	r0, [pc, #4]	; (2a26c <nct_keepalive_time_left+0x8>)
   2a266:	f010 bf5a 	b.w	3b11e <mqtt_keepalive_time_left>
   2a26a:	bf00      	nop
   2a26c:	2001786c 	.word	0x2001786c

0002a270 <nct_socket_get>:
}
   2a270:	4b01      	ldr	r3, [pc, #4]	; (2a278 <nct_socket_get+0x8>)
   2a272:	6c58      	ldr	r0, [r3, #68]	; 0x44
   2a274:	4770      	bx	lr
   2a276:	bf00      	nop
   2a278:	20017850 	.word	0x20017850

0002a27c <fota_settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(fota, SETTINGS_FULL_FOTA, NULL,
			       fota_settings_set, NULL, NULL);

static int fota_settings_set(const char *key, size_t len_rd,
			     settings_read_cb read_cb, void *cb_arg)
{
   2a27c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2a280:	461f      	mov	r7, r3
   2a282:	4c24      	ldr	r4, [pc, #144]	; (2a314 <fota_settings_set+0x98>)
   2a284:	4b24      	ldr	r3, [pc, #144]	; (2a318 <fota_settings_set+0x9c>)
   2a286:	460d      	mov	r5, r1
   2a288:	1ae4      	subs	r4, r4, r3
   2a28a:	08e4      	lsrs	r4, r4, #3
   2a28c:	4616      	mov	r6, r2
	if (!key) {
   2a28e:	4680      	mov	r8, r0
   2a290:	01a4      	lsls	r4, r4, #6
   2a292:	b958      	cbnz	r0, 2a2ac <fota_settings_set+0x30>
		LOG_DBG("Key is NULL");
   2a294:	4a21      	ldr	r2, [pc, #132]	; (2a31c <fota_settings_set+0xa0>)
   2a296:	4922      	ldr	r1, [pc, #136]	; (2a320 <fota_settings_set+0xa4>)
   2a298:	f044 0004 	orr.w	r0, r4, #4
   2a29c:	f00f fa17 	bl	396ce <log_string_sync>
		return -EINVAL;
   2a2a0:	f06f 0815 	mvn.w	r8, #21
				saved_job.validate);
			return 0;
		}
	}
	return -ENOTSUP;
}
   2a2a4:	4640      	mov	r0, r8
   2a2a6:	b003      	add	sp, #12
   2a2a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a2ac:	f00f fa22 	bl	396f4 <z_log_strdup>
	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);
   2a2b0:	f044 0404 	orr.w	r4, r4, #4
   2a2b4:	4603      	mov	r3, r0
   2a2b6:	4a19      	ldr	r2, [pc, #100]	; (2a31c <fota_settings_set+0xa0>)
   2a2b8:	491a      	ldr	r1, [pc, #104]	; (2a324 <fota_settings_set+0xa8>)
   2a2ba:	4620      	mov	r0, r4
   2a2bc:	9500      	str	r5, [sp, #0]
   2a2be:	f00f fa06 	bl	396ce <log_string_sync>
	if (!strncmp(key, SETTINGS_FOTA_JOB, strlen(SETTINGS_FOTA_JOB)) &&
   2a2c2:	4819      	ldr	r0, [pc, #100]	; (2a328 <fota_settings_set+0xac>)
   2a2c4:	f7f2 ffca 	bl	1d25c <strlen>
   2a2c8:	4917      	ldr	r1, [pc, #92]	; (2a328 <fota_settings_set+0xac>)
   2a2ca:	4602      	mov	r2, r0
   2a2cc:	4640      	mov	r0, r8
   2a2ce:	f014 f807 	bl	3e2e0 <strncmp>
   2a2d2:	4680      	mov	r8, r0
   2a2d4:	b110      	cbz	r0, 2a2dc <fota_settings_set+0x60>
	return -ENOTSUP;
   2a2d6:	f06f 0885 	mvn.w	r8, #133	; 0x85
   2a2da:	e7e3      	b.n	2a2a4 <fota_settings_set+0x28>
	if (!strncmp(key, SETTINGS_FOTA_JOB, strlen(SETTINGS_FOTA_JOB)) &&
   2a2dc:	2d27      	cmp	r5, #39	; 0x27
   2a2de:	d1fa      	bne.n	2a2d6 <fota_settings_set+0x5a>
		if (read_cb(cb_arg, (void *)&saved_job, len_rd) == len_rd) {
   2a2e0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2a330 <fota_settings_set+0xb4>
   2a2e4:	462a      	mov	r2, r5
   2a2e6:	4649      	mov	r1, r9
   2a2e8:	4638      	mov	r0, r7
   2a2ea:	47b0      	blx	r6
   2a2ec:	2827      	cmp	r0, #39	; 0x27
   2a2ee:	d1f2      	bne.n	2a2d6 <fota_settings_set+0x5a>
   2a2f0:	f109 0002 	add.w	r0, r9, #2
   2a2f4:	f00f f9fe 	bl	396f4 <z_log_strdup>
			LOG_DBG("Saved job: %s, type: %d, validate: %d",
   2a2f8:	f899 2000 	ldrb.w	r2, [r9]
   2a2fc:	4603      	mov	r3, r0
   2a2fe:	9201      	str	r2, [sp, #4]
   2a300:	f899 2001 	ldrb.w	r2, [r9, #1]
   2a304:	4620      	mov	r0, r4
   2a306:	9200      	str	r2, [sp, #0]
   2a308:	4908      	ldr	r1, [pc, #32]	; (2a32c <fota_settings_set+0xb0>)
   2a30a:	4a04      	ldr	r2, [pc, #16]	; (2a31c <fota_settings_set+0xa0>)
   2a30c:	f00f f9df 	bl	396ce <log_string_sync>
			return 0;
   2a310:	e7c8      	b.n	2a2a4 <fota_settings_set+0x28>
   2a312:	bf00      	nop
   2a314:	0003f694 	.word	0x0003f694
   2a318:	0003f5a4 	.word	0x0003f5a4
   2a31c:	00043e88 	.word	0x00043e88
   2a320:	000438b5 	.word	0x000438b5
   2a324:	0004312f 	.word	0x0004312f
   2a328:	00043c2f 	.word	0x00043c2f
   2a32c:	000438c5 	.word	0x000438c5
   2a330:	20014a49 	.word	0x20014a49

0002a334 <add_number_to_array>:
	}
	return item;
}

static bool add_number_to_array(cJSON *const array, const int number)
{
   2a334:	b538      	push	{r3, r4, r5, lr}
   2a336:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2a338:	4605      	mov	r5, r0
   2a33a:	b958      	cbnz	r0, 2a354 <add_number_to_array+0x20>
   2a33c:	490e      	ldr	r1, [pc, #56]	; (2a378 <add_number_to_array+0x44>)
   2a33e:	480f      	ldr	r0, [pc, #60]	; (2a37c <add_number_to_array+0x48>)
   2a340:	f240 23b7 	movw	r3, #695	; 0x2b7
   2a344:	4a0e      	ldr	r2, [pc, #56]	; (2a380 <add_number_to_array+0x4c>)
   2a346:	f00e fef4 	bl	39132 <printk>
   2a34a:	f240 21b7 	movw	r1, #695	; 0x2b7
   2a34e:	480c      	ldr	r0, [pc, #48]	; (2a380 <add_number_to_array+0x4c>)
   2a350:	f00f f98e 	bl	39670 <assert_post_action>

	cJSON *item = cJSON_CreateNumber(number);
   2a354:	4620      	mov	r0, r4
   2a356:	f7f2 f9c5 	bl	1c6e4 <__aeabi_i2d>
   2a35a:	ec41 0b10 	vmov	d0, r0, r1
   2a35e:	f7f3 fb47 	bl	1d9f0 <cJSON_CreateNumber>

	if (item) {
   2a362:	4604      	mov	r4, r0
   2a364:	b118      	cbz	r0, 2a36e <add_number_to_array+0x3a>
		cJSON_AddItemToArray(array, item);
   2a366:	4601      	mov	r1, r0
   2a368:	4628      	mov	r0, r5
   2a36a:	f012 f938 	bl	3c5de <cJSON_AddItemToArray>
	}
	return item;
}
   2a36e:	1e20      	subs	r0, r4, #0
   2a370:	bf18      	it	ne
   2a372:	2001      	movne	r0, #1
   2a374:	bd38      	pop	{r3, r4, r5, pc}
   2a376:	bf00      	nop
   2a378:	0004392d 	.word	0x0004392d
   2a37c:	0004033e 	.word	0x0004033e
   2a380:	000438ef 	.word	0x000438ef

0002a384 <add_string_to_array>:
{
   2a384:	b538      	push	{r3, r4, r5, lr}
   2a386:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2a388:	4605      	mov	r5, r0
   2a38a:	b958      	cbnz	r0, 2a3a4 <add_string_to_array+0x20>
   2a38c:	490c      	ldr	r1, [pc, #48]	; (2a3c0 <add_string_to_array+0x3c>)
   2a38e:	480d      	ldr	r0, [pc, #52]	; (2a3c4 <add_string_to_array+0x40>)
   2a390:	f240 23ab 	movw	r3, #683	; 0x2ab
   2a394:	4a0c      	ldr	r2, [pc, #48]	; (2a3c8 <add_string_to_array+0x44>)
   2a396:	f00e fecc 	bl	39132 <printk>
   2a39a:	f240 21ab 	movw	r1, #683	; 0x2ab
   2a39e:	480a      	ldr	r0, [pc, #40]	; (2a3c8 <add_string_to_array+0x44>)
   2a3a0:	f00f f966 	bl	39670 <assert_post_action>
	cJSON *item = cJSON_CreateString(string);
   2a3a4:	4620      	mov	r0, r4
   2a3a6:	f003 fcc3 	bl	2dd30 <cJSON_CreateString>
	if (item) {
   2a3aa:	4604      	mov	r4, r0
   2a3ac:	b118      	cbz	r0, 2a3b6 <add_string_to_array+0x32>
		cJSON_AddItemToArray(array, item);
   2a3ae:	4601      	mov	r1, r0
   2a3b0:	4628      	mov	r0, r5
   2a3b2:	f012 f914 	bl	3c5de <cJSON_AddItemToArray>
}
   2a3b6:	1e20      	subs	r0, r4, #0
   2a3b8:	bf18      	it	ne
   2a3ba:	2001      	movne	r0, #1
   2a3bc:	bd38      	pop	{r3, r4, r5, pc}
   2a3be:	bf00      	nop
   2a3c0:	0004392d 	.word	0x0004392d
   2a3c4:	0004033e 	.word	0x0004033e
   2a3c8:	000438ef 	.word	0x000438ef

0002a3cc <publish>:
	memset(job, 0, sizeof(*job));
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
}

static int publish(const struct mqtt_publish_param *const pub)
{
   2a3cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a3ce:	4b16      	ldr	r3, [pc, #88]	; (2a428 <publish+0x5c>)
   2a3d0:	4c16      	ldr	r4, [pc, #88]	; (2a42c <publish+0x60>)
   2a3d2:	4605      	mov	r5, r0
   2a3d4:	6800      	ldr	r0, [r0, #0]
   2a3d6:	1ae4      	subs	r4, r4, r3
   2a3d8:	f00f f98c 	bl	396f4 <z_log_strdup>
   2a3dc:	08e4      	lsrs	r4, r4, #3
	__ASSERT_NO_MSG(pub != NULL);

	int ret;

	LOG_DBG("Topic: %s",
   2a3de:	01a4      	lsls	r4, r4, #6
   2a3e0:	f044 0604 	orr.w	r6, r4, #4
   2a3e4:	4603      	mov	r3, r0
   2a3e6:	4a12      	ldr	r2, [pc, #72]	; (2a430 <publish+0x64>)
   2a3e8:	4912      	ldr	r1, [pc, #72]	; (2a434 <publish+0x68>)
   2a3ea:	4630      	mov	r0, r6
   2a3ec:	f00f f96f 	bl	396ce <log_string_sync>
		log_strdup(pub->message.topic.topic.utf8));
	LOG_DBG("Payload (%d bytes): %s",
   2a3f0:	692b      	ldr	r3, [r5, #16]
   2a3f2:	68e8      	ldr	r0, [r5, #12]
   2a3f4:	9303      	str	r3, [sp, #12]
   2a3f6:	f00f f97d 	bl	396f4 <z_log_strdup>
   2a3fa:	9b03      	ldr	r3, [sp, #12]
   2a3fc:	4a0c      	ldr	r2, [pc, #48]	; (2a430 <publish+0x64>)
   2a3fe:	490e      	ldr	r1, [pc, #56]	; (2a438 <publish+0x6c>)
   2a400:	9000      	str	r0, [sp, #0]
   2a402:	4630      	mov	r0, r6
   2a404:	f00f f963 	bl	396ce <log_string_sync>
		pub->message.payload.len,
		log_strdup(pub->message.payload.data));

	ret = mqtt_publish(client_mqtt, pub);
   2a408:	4b0c      	ldr	r3, [pc, #48]	; (2a43c <publish+0x70>)
   2a40a:	4629      	mov	r1, r5
   2a40c:	6818      	ldr	r0, [r3, #0]
   2a40e:	f010 fd51 	bl	3aeb4 <mqtt_publish>
	if (ret) {
   2a412:	4605      	mov	r5, r0
   2a414:	b128      	cbz	r0, 2a422 <publish+0x56>
		LOG_ERR("Publish failed: %d", ret);
   2a416:	4602      	mov	r2, r0
   2a418:	4909      	ldr	r1, [pc, #36]	; (2a440 <publish+0x74>)
   2a41a:	f044 0001 	orr.w	r0, r4, #1
   2a41e:	f00f f956 	bl	396ce <log_string_sync>
	}
	return ret;
}
   2a422:	4628      	mov	r0, r5
   2a424:	b004      	add	sp, #16
   2a426:	bd70      	pop	{r4, r5, r6, pc}
   2a428:	0003f5a4 	.word	0x0003f5a4
   2a42c:	0003f694 	.word	0x0003f694
   2a430:	00043f0d 	.word	0x00043f0d
   2a434:	00043942 	.word	0x00043942
   2a438:	00043950 	.word	0x00043950
   2a43c:	20018378 	.word	0x20018378
   2a440:	0004396b 	.word	0x0004396b

0002a444 <save_validate_status>:
{
   2a444:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2a448:	460f      	mov	r7, r1
   2a44a:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(job_id != NULL);
   2a44c:	4605      	mov	r5, r0
   2a44e:	b958      	cbnz	r0, 2a468 <save_validate_status+0x24>
   2a450:	4922      	ldr	r1, [pc, #136]	; (2a4dc <save_validate_status+0x98>)
   2a452:	4823      	ldr	r0, [pc, #140]	; (2a4e0 <save_validate_status+0x9c>)
   2a454:	f240 2322 	movw	r3, #546	; 0x222
   2a458:	4a22      	ldr	r2, [pc, #136]	; (2a4e4 <save_validate_status+0xa0>)
   2a45a:	f00e fe6a 	bl	39132 <printk>
   2a45e:	f240 2122 	movw	r1, #546	; 0x222
   2a462:	4820      	ldr	r0, [pc, #128]	; (2a4e4 <save_validate_status+0xa0>)
   2a464:	f00f f904 	bl	39670 <assert_post_action>
   2a468:	4b1f      	ldr	r3, [pc, #124]	; (2a4e8 <save_validate_status+0xa4>)
   2a46a:	4c20      	ldr	r4, [pc, #128]	; (2a4ec <save_validate_status+0xa8>)
   2a46c:	4628      	mov	r0, r5
   2a46e:	1ae4      	subs	r4, r4, r3
   2a470:	f00f f940 	bl	396f4 <z_log_strdup>
   2a474:	08e4      	lsrs	r4, r4, #3
	LOG_DBG("%s() - %s, %d, %d",
   2a476:	4b1e      	ldr	r3, [pc, #120]	; (2a4f0 <save_validate_status+0xac>)
   2a478:	01a4      	lsls	r4, r4, #6
   2a47a:	f044 0804 	orr.w	r8, r4, #4
   2a47e:	9000      	str	r0, [sp, #0]
   2a480:	461a      	mov	r2, r3
   2a482:	4640      	mov	r0, r8
   2a484:	e9cd 7601 	strd	r7, r6, [sp, #4]
   2a488:	491a      	ldr	r1, [pc, #104]	; (2a4f4 <save_validate_status+0xb0>)
   2a48a:	f00f f920 	bl	396ce <log_string_sync>
	if (validate == NRF_CLOUD_FOTA_VALIDATE_DONE) {
   2a48e:	2e05      	cmp	r6, #5
   2a490:	4819      	ldr	r0, [pc, #100]	; (2a4f8 <save_validate_status+0xb4>)
   2a492:	d118      	bne.n	2a4c6 <save_validate_status+0x82>
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2a494:	2303      	movs	r3, #3
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2a496:	2100      	movs	r1, #0
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2a498:	7043      	strb	r3, [r0, #1]
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2a49a:	2225      	movs	r2, #37	; 0x25
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2a49c:	f800 1b02 	strb.w	r1, [r0], #2
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2a4a0:	f013 fd83 	bl	3dfaa <memset>
	ret = settings_save_one(SETTINGS_FULL_FOTA_JOB, &saved_job,
   2a4a4:	2227      	movs	r2, #39	; 0x27
   2a4a6:	4914      	ldr	r1, [pc, #80]	; (2a4f8 <save_validate_status+0xb4>)
   2a4a8:	4814      	ldr	r0, [pc, #80]	; (2a4fc <save_validate_status+0xb8>)
   2a4aa:	f7f7 fcc1 	bl	21e30 <settings_save_one>
	if (ret) {
   2a4ae:	4605      	mov	r5, r0
   2a4b0:	b128      	cbz	r0, 2a4be <save_validate_status+0x7a>
		LOG_ERR("settings_save_one failed: %d", ret);
   2a4b2:	4602      	mov	r2, r0
   2a4b4:	4912      	ldr	r1, [pc, #72]	; (2a500 <save_validate_status+0xbc>)
   2a4b6:	f044 0001 	orr.w	r0, r4, #1
   2a4ba:	f00f f908 	bl	396ce <log_string_sync>
}
   2a4be:	4628      	mov	r0, r5
   2a4c0:	b004      	add	sp, #16
   2a4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		saved_job.type = job_type;
   2a4c6:	7047      	strb	r7, [r0, #1]
		saved_job.validate = validate;
   2a4c8:	f800 6b02 	strb.w	r6, [r0], #2
		if (job_id != saved_job.id) {
   2a4cc:	4285      	cmp	r5, r0
   2a4ce:	d0e9      	beq.n	2a4a4 <save_validate_status+0x60>
			strncpy(saved_job.id, job_id, sizeof(saved_job.id));
   2a4d0:	2225      	movs	r2, #37	; 0x25
   2a4d2:	4629      	mov	r1, r5
   2a4d4:	f013 ff16 	bl	3e304 <strncpy>
   2a4d8:	e7e4      	b.n	2a4a4 <save_validate_status+0x60>
   2a4da:	bf00      	nop
   2a4dc:	0004397e 	.word	0x0004397e
   2a4e0:	0004033e 	.word	0x0004033e
   2a4e4:	000438ef 	.word	0x000438ef
   2a4e8:	0003f5a4 	.word	0x0003f5a4
   2a4ec:	0003f694 	.word	0x0003f694
   2a4f0:	00043ecb 	.word	0x00043ecb
   2a4f4:	00043994 	.word	0x00043994
   2a4f8:	20014a49 	.word	0x20014a49
   2a4fc:	000439aa 	.word	0x000439aa
   2a500:	000439bd 	.word	0x000439bd

0002a504 <reset_topics>:
{
   2a504:	b508      	push	{r3, lr}
	reset_topic(&sub_topics[SUB_TOPIC_IDX_RCV].topic);
   2a506:	4805      	ldr	r0, [pc, #20]	; (2a51c <reset_topics+0x18>)
   2a508:	f011 fe1e 	bl	3c148 <reset_topic>
	reset_topic(&topic_updt.topic);
   2a50c:	4804      	ldr	r0, [pc, #16]	; (2a520 <reset_topics+0x1c>)
   2a50e:	f011 fe1b 	bl	3c148 <reset_topic>
}
   2a512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	reset_topic(&topic_req.topic);
   2a516:	4803      	ldr	r0, [pc, #12]	; (2a524 <reset_topics+0x20>)
   2a518:	f011 be16 	b.w	3c148 <reset_topic>
   2a51c:	20014830 	.word	0x20014830
   2a520:	20014848 	.word	0x20014848
   2a524:	2001483c 	.word	0x2001483c

0002a528 <build_topic>:
{
   2a528:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	size_t size = endpoint->size + strlen(client_id) +
   2a52c:	684d      	ldr	r5, [r1, #4]
{
   2a52e:	4690      	mov	r8, r2
   2a530:	460f      	mov	r7, r1
   2a532:	461e      	mov	r6, r3
   2a534:	4681      	mov	r9, r0
	size_t size = endpoint->size + strlen(client_id) +
   2a536:	f7f2 fe91 	bl	1d25c <strlen>
   2a53a:	4682      	mov	sl, r0
		      strlen(topic_str) + 1;
   2a53c:	4640      	mov	r0, r8
   2a53e:	f7f2 fe8d 	bl	1d25c <strlen>
	size_t size = endpoint->size + strlen(client_id) +
   2a542:	1c6b      	adds	r3, r5, #1
   2a544:	eb03 050a 	add.w	r5, r3, sl
   2a548:	182c      	adds	r4, r5, r0
	buf = nrf_cloud_calloc(size, 1);
   2a54a:	2101      	movs	r1, #1
   2a54c:	4620      	mov	r0, r4
   2a54e:	f013 fcd4 	bl	3defa <k_calloc>
	if (!buf) {
   2a552:	4605      	mov	r5, r0
   2a554:	b938      	cbnz	r0, 2a566 <build_topic+0x3e>
		reset_topic(topic_out);
   2a556:	4630      	mov	r0, r6
   2a558:	f011 fdf6 	bl	3c148 <reset_topic>
		return ret;
   2a55c:	f06f 000b 	mvn.w	r0, #11
}
   2a560:	b002      	add	sp, #8
   2a562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ret = snprintf(buf, size, "%s%s%s",
   2a566:	4621      	mov	r1, r4
   2a568:	e9cd 9800 	strd	r9, r8, [sp]
   2a56c:	683b      	ldr	r3, [r7, #0]
   2a56e:	4a08      	ldr	r2, [pc, #32]	; (2a590 <build_topic+0x68>)
   2a570:	f00d fa74 	bl	37a5c <sniprintf>
	if (ret <= 0 || ret >= size) {
   2a574:	2800      	cmp	r0, #0
   2a576:	dd01      	ble.n	2a57c <build_topic+0x54>
   2a578:	42a0      	cmp	r0, r4
   2a57a:	d305      	bcc.n	2a588 <build_topic+0x60>
		nrf_cloud_free(buf);
   2a57c:	4628      	mov	r0, r5
   2a57e:	f013 fcb1 	bl	3dee4 <k_free>
		return ret;
   2a582:	f06f 0006 	mvn.w	r0, #6
   2a586:	e7eb      	b.n	2a560 <build_topic+0x38>
	topic_out->size = ret;
   2a588:	e9c6 5000 	strd	r5, r0, [r6]
	return 0;
   2a58c:	2000      	movs	r0, #0
   2a58e:	e7e7      	b.n	2a560 <build_topic+0x38>
   2a590:	000439da 	.word	0x000439da

0002a594 <get_string_from_array>:
{
   2a594:	b570      	push	{r4, r5, r6, lr}
   2a596:	4605      	mov	r5, r0
   2a598:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(string_out != NULL);
   2a59a:	4614      	mov	r4, r2
   2a59c:	b95a      	cbnz	r2, 2a5b6 <get_string_from_array+0x22>
   2a59e:	490d      	ldr	r1, [pc, #52]	; (2a5d4 <get_string_from_array+0x40>)
   2a5a0:	480d      	ldr	r0, [pc, #52]	; (2a5d8 <get_string_from_array+0x44>)
   2a5a2:	f44f 7331 	mov.w	r3, #708	; 0x2c4
   2a5a6:	4a0d      	ldr	r2, [pc, #52]	; (2a5dc <get_string_from_array+0x48>)
   2a5a8:	f00e fdc3 	bl	39132 <printk>
   2a5ac:	f44f 7131 	mov.w	r1, #708	; 0x2c4
   2a5b0:	480a      	ldr	r0, [pc, #40]	; (2a5dc <get_string_from_array+0x48>)
   2a5b2:	f00f f85d 	bl	39670 <assert_post_action>
	cJSON *item = cJSON_GetArrayItem(array, index);
   2a5b6:	4628      	mov	r0, r5
   2a5b8:	4631      	mov	r1, r6
   2a5ba:	f012 f800 	bl	3c5be <cJSON_GetArrayItem>
   2a5be:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2a5c0:	f012 f854 	bl	3c66c <cJSON_IsString>
   2a5c4:	b118      	cbz	r0, 2a5ce <get_string_from_array+0x3a>
	return 0;
   2a5c6:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2a5c8:	692b      	ldr	r3, [r5, #16]
   2a5ca:	6023      	str	r3, [r4, #0]
}
   2a5cc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2a5ce:	f06f 0015 	mvn.w	r0, #21
   2a5d2:	e7fb      	b.n	2a5cc <get_string_from_array+0x38>
   2a5d4:	000439e1 	.word	0x000439e1
   2a5d8:	0004033e 	.word	0x0004033e
   2a5dc:	000438ef 	.word	0x000438ef

0002a5e0 <get_number_from_array>:
{
   2a5e0:	b570      	push	{r4, r5, r6, lr}
   2a5e2:	4605      	mov	r5, r0
   2a5e4:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(number_out != NULL);
   2a5e6:	4614      	mov	r4, r2
   2a5e8:	b95a      	cbnz	r2, 2a602 <get_number_from_array+0x22>
   2a5ea:	490d      	ldr	r1, [pc, #52]	; (2a620 <get_number_from_array+0x40>)
   2a5ec:	480d      	ldr	r0, [pc, #52]	; (2a624 <get_number_from_array+0x44>)
   2a5ee:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   2a5f2:	4a0d      	ldr	r2, [pc, #52]	; (2a628 <get_number_from_array+0x48>)
   2a5f4:	f00e fd9d 	bl	39132 <printk>
   2a5f8:	f44f 7135 	mov.w	r1, #724	; 0x2d4
   2a5fc:	480a      	ldr	r0, [pc, #40]	; (2a628 <get_number_from_array+0x48>)
   2a5fe:	f00f f837 	bl	39670 <assert_post_action>
	cJSON *item = cJSON_GetArrayItem(array, index);
   2a602:	4628      	mov	r0, r5
   2a604:	4631      	mov	r1, r6
   2a606:	f011 ffda 	bl	3c5be <cJSON_GetArrayItem>
   2a60a:	4605      	mov	r5, r0
	if (!cJSON_IsNumber(item)) {
   2a60c:	f012 f827 	bl	3c65e <cJSON_IsNumber>
   2a610:	b118      	cbz	r0, 2a61a <get_number_from_array+0x3a>
	return 0;
   2a612:	2000      	movs	r0, #0
	*number_out = item->valueint;
   2a614:	696b      	ldr	r3, [r5, #20]
   2a616:	6023      	str	r3, [r4, #0]
}
   2a618:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2a61a:	f06f 0015 	mvn.w	r0, #21
   2a61e:	e7fb      	b.n	2a618 <get_number_from_array+0x38>
   2a620:	000439fb 	.word	0x000439fb
   2a624:	0004033e 	.word	0x0004033e
   2a628:	000438ef 	.word	0x000438ef

0002a62c <send_event.constprop.0>:
	struct nrf_cloud_fota_evt evt = {
   2a62c:	2300      	movs	r3, #0
static void send_event(const enum nrf_cloud_fota_evt_id id,
   2a62e:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_fota_evt evt = {
   2a630:	f8cd 3003 	str.w	r3, [sp, #3]
   2a634:	f88d 3007 	strb.w	r3, [sp, #7]
		.status = job->status,
   2a638:	4b0b      	ldr	r3, [pc, #44]	; (2a668 <send_event.constprop.0+0x3c>)
	switch (id) {
   2a63a:	2802      	cmp	r0, #2
	struct nrf_cloud_fota_evt evt = {
   2a63c:	791a      	ldrb	r2, [r3, #4]
   2a63e:	f88d 0000 	strb.w	r0, [sp]
   2a642:	f88d 2001 	strb.w	r2, [sp, #1]
   2a646:	7a1a      	ldrb	r2, [r3, #8]
		evt.evt_data.error = job->error;
   2a648:	bf08      	it	eq
   2a64a:	7f1b      	ldrbeq	r3, [r3, #28]
	struct nrf_cloud_fota_evt evt = {
   2a64c:	f88d 2002 	strb.w	r2, [sp, #2]
		evt.evt_data.error = job->error;
   2a650:	bf08      	it	eq
   2a652:	f88d 3004 	strbeq.w	r3, [sp, #4]
	if (event_cb) {
   2a656:	4b05      	ldr	r3, [pc, #20]	; (2a66c <send_event.constprop.0+0x40>)
   2a658:	681b      	ldr	r3, [r3, #0]
   2a65a:	b10b      	cbz	r3, 2a660 <send_event.constprop.0+0x34>
		event_cb(&evt);
   2a65c:	4668      	mov	r0, sp
   2a65e:	4798      	blx	r3
}
   2a660:	b003      	add	sp, #12
   2a662:	f85d fb04 	ldr.w	pc, [sp], #4
   2a666:	bf00      	nop
   2a668:	2001837c 	.word	0x2001837c
   2a66c:	200183a4 	.word	0x200183a4

0002a670 <cleanup_job.constprop.0>:
static void cleanup_job(struct nrf_cloud_fota_job *const job)
   2a670:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a672:	4b11      	ldr	r3, [pc, #68]	; (2a6b8 <cleanup_job.constprop.0+0x48>)
   2a674:	4c11      	ldr	r4, [pc, #68]	; (2a6bc <cleanup_job.constprop.0+0x4c>)
	LOG_DBG("%s() - ID: %s", __func__,
   2a676:	4d12      	ldr	r5, [pc, #72]	; (2a6c0 <cleanup_job.constprop.0+0x50>)
   2a678:	1ae4      	subs	r4, r4, r3
   2a67a:	08e4      	lsrs	r4, r4, #3
   2a67c:	68e8      	ldr	r0, [r5, #12]
   2a67e:	01a4      	lsls	r4, r4, #6
   2a680:	f044 0404 	orr.w	r4, r4, #4
   2a684:	b1a8      	cbz	r0, 2a6b2 <cleanup_job.constprop.0+0x42>
   2a686:	f00f f835 	bl	396f4 <z_log_strdup>
   2a68a:	4b0e      	ldr	r3, [pc, #56]	; (2a6c4 <cleanup_job.constprop.0+0x54>)
   2a68c:	9000      	str	r0, [sp, #0]
   2a68e:	461a      	mov	r2, r3
   2a690:	4620      	mov	r0, r4
   2a692:	490d      	ldr	r1, [pc, #52]	; (2a6c8 <cleanup_job.constprop.0+0x58>)
   2a694:	f00f f81b 	bl	396ce <log_string_sync>
	if (job->parsed_payload) {
   2a698:	6828      	ldr	r0, [r5, #0]
   2a69a:	b108      	cbz	r0, 2a6a0 <cleanup_job.constprop.0+0x30>
		cJSON_Delete(job->parsed_payload);
   2a69c:	f003 faaa 	bl	2dbf4 <cJSON_Delete>
	memset(job, 0, sizeof(*job));
   2a6a0:	2228      	movs	r2, #40	; 0x28
   2a6a2:	2100      	movs	r1, #0
   2a6a4:	4806      	ldr	r0, [pc, #24]	; (2a6c0 <cleanup_job.constprop.0+0x50>)
   2a6a6:	f013 fc80 	bl	3dfaa <memset>
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2a6aa:	2303      	movs	r3, #3
   2a6ac:	722b      	strb	r3, [r5, #8]
}
   2a6ae:	b003      	add	sp, #12
   2a6b0:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("%s() - ID: %s", __func__,
   2a6b2:	4806      	ldr	r0, [pc, #24]	; (2a6cc <cleanup_job.constprop.0+0x5c>)
   2a6b4:	e7e9      	b.n	2a68a <cleanup_job.constprop.0+0x1a>
   2a6b6:	bf00      	nop
   2a6b8:	0003f5a4 	.word	0x0003f5a4
   2a6bc:	0003f694 	.word	0x0003f694
   2a6c0:	2001837c 	.word	0x2001837c
   2a6c4:	00043f01 	.word	0x00043f01
   2a6c8:	00043a19 	.word	0x00043a19
   2a6cc:	00043a15 	.word	0x00043a15

0002a6d0 <send_job_update>:
		return false;
	}
}

static int send_job_update(struct nrf_cloud_fota_job *const job)
{
   2a6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* ensure shell-invoked fota doesn't crash below */
	if ((job == NULL) || (job->info.id == NULL)) {
   2a6d4:	68c3      	ldr	r3, [r0, #12]
{
   2a6d6:	4604      	mov	r4, r0
   2a6d8:	b086      	sub	sp, #24
	if ((job == NULL) || (job->info.id == NULL)) {
   2a6da:	2b00      	cmp	r3, #0
   2a6dc:	d065      	beq.n	2a7aa <send_job_update+0xda>
		return -EINVAL;
	} else if (client_mqtt == NULL) {
   2a6de:	4b37      	ldr	r3, [pc, #220]	; (2a7bc <send_job_update+0xec>)
   2a6e0:	681b      	ldr	r3, [r3, #0]
   2a6e2:	2b00      	cmp	r3, #0
   2a6e4:	d064      	beq.n	2a7b0 <send_job_update+0xe0>
		return -ENXIO;
	} else if (topic_updt.topic.utf8 == NULL) {
   2a6e6:	4d36      	ldr	r5, [pc, #216]	; (2a7c0 <send_job_update+0xf0>)
   2a6e8:	682b      	ldr	r3, [r5, #0]
   2a6ea:	2b00      	cmp	r3, #0
   2a6ec:	d063      	beq.n	2a7b6 <send_job_update+0xe6>
		return -EHOSTUNREACH;
	}

	int ret;
	struct mqtt_publish_param param = {
   2a6ee:	466e      	mov	r6, sp
   2a6f0:	2218      	movs	r2, #24
   2a6f2:	2100      	movs	r1, #0
   2a6f4:	4630      	mov	r0, r6
   2a6f6:	f013 fc58 	bl	3dfaa <memset>
   2a6fa:	f44f 5309 	mov.w	r3, #8768	; 0x2240
   2a6fe:	f8ad 3014 	strh.w	r3, [sp, #20]
		.message_id = NRF_CLOUD_FOTA_UPDATE_ID,
		.dup_flag = 0,
		.retain_flag = 0,
	};
	bool result;
	cJSON *array = cJSON_CreateArray();
   2a702:	f003 fb2d 	bl	2dd60 <cJSON_CreateArray>

	if (!array) {
   2a706:	4680      	mov	r8, r0
   2a708:	b928      	cbnz	r0, 2a716 <send_job_update+0x46>
					      get_error_string(job->error));
	}

	if (!result) {
		cJSON_Delete(array);
		return -ENOMEM;
   2a70a:	f06f 050b 	mvn.w	r5, #11
		/* If job was updated to terminal status, save job ID */
		strncpy(last_job, job->info.id, sizeof(last_job));
	}

	return ret;
}
   2a70e:	4628      	mov	r0, r5
   2a710:	b006      	add	sp, #24
   2a712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = add_string_to_array(array, job->info.id) &&
   2a716:	68e1      	ldr	r1, [r4, #12]
   2a718:	f7ff fe34 	bl	2a384 <add_string_to_array>
   2a71c:	b118      	cbz	r0, 2a726 <send_job_update+0x56>
		 add_number_to_array(array, job->status);
   2a71e:	4640      	mov	r0, r8
   2a720:	7921      	ldrb	r1, [r4, #4]
   2a722:	f7ff fe07 	bl	2a334 <add_number_to_array>
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2a726:	7923      	ldrb	r3, [r4, #4]
	result = add_string_to_array(array, job->info.id) &&
   2a728:	4607      	mov	r7, r0
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2a72a:	2b07      	cmp	r3, #7
   2a72c:	d10c      	bne.n	2a748 <send_job_update+0x78>
		result &= add_number_to_array(array, job->dl_progress);
   2a72e:	4640      	mov	r0, r8
   2a730:	6a21      	ldr	r1, [r4, #32]
   2a732:	f7ff fdff 	bl	2a334 <add_number_to_array>
		result &= add_string_to_array(array,
   2a736:	ea00 0307 	and.w	r3, r0, r7
   2a73a:	f003 0301 	and.w	r3, r3, #1
		cJSON_Delete(array);
   2a73e:	4640      	mov	r0, r8
	if (!result) {
   2a740:	b97b      	cbnz	r3, 2a762 <send_job_update+0x92>
		cJSON_Delete(array);
   2a742:	f003 fa57 	bl	2dbf4 <cJSON_Delete>
   2a746:	e7e0      	b.n	2a70a <send_job_update+0x3a>
	switch (err) {
   2a748:	7f23      	ldrb	r3, [r4, #28]
		result &= add_string_to_array(array,
   2a74a:	4640      	mov	r0, r8
   2a74c:	3b01      	subs	r3, #1
   2a74e:	b2db      	uxtb	r3, r3
   2a750:	2b04      	cmp	r3, #4
   2a752:	bf96      	itet	ls
   2a754:	4a1b      	ldrls	r2, [pc, #108]	; (2a7c4 <send_job_update+0xf4>)
   2a756:	491c      	ldrhi	r1, [pc, #112]	; (2a7c8 <send_job_update+0xf8>)
   2a758:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   2a75c:	f7ff fe12 	bl	2a384 <add_string_to_array>
   2a760:	e7e9      	b.n	2a736 <send_job_update+0x66>
	char *array_str = cJSON_PrintUnformatted(array);
   2a762:	f011 ff29 	bl	3c5b8 <cJSON_PrintUnformatted>
   2a766:	4607      	mov	r7, r0
	cJSON_Delete(array);
   2a768:	4640      	mov	r0, r8
   2a76a:	f003 fa43 	bl	2dbf4 <cJSON_Delete>
	if (array_str == NULL) {
   2a76e:	2f00      	cmp	r7, #0
   2a770:	d0cb      	beq.n	2a70a <send_job_update+0x3a>
		pub_param->message.topic = *topic;
   2a772:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2a776:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		pub_param->message.payload.len = strlen(array_str);
   2a77a:	4638      	mov	r0, r7
		pub_param->message.payload.data = array_str;
   2a77c:	9703      	str	r7, [sp, #12]
		pub_param->message.payload.len = strlen(array_str);
   2a77e:	f7f2 fd6d 	bl	1d25c <strlen>
   2a782:	9004      	str	r0, [sp, #16]
		ret = publish(pub_param);
   2a784:	4630      	mov	r0, r6
   2a786:	f7ff fe21 	bl	2a3cc <publish>
   2a78a:	4605      	mov	r5, r0
	cJSON_FreeString(array_str);
   2a78c:	4638      	mov	r0, r7
   2a78e:	f011 ff7f 	bl	3c690 <cJSON_FreeString>
	if (ret == 0 && is_job_status_terminal(job->status)) {
   2a792:	2d00      	cmp	r5, #0
   2a794:	d1bb      	bne.n	2a70e <send_job_update+0x3e>
	switch (status) {
   2a796:	7923      	ldrb	r3, [r4, #4]
   2a798:	3b02      	subs	r3, #2
   2a79a:	2b04      	cmp	r3, #4
   2a79c:	d8b7      	bhi.n	2a70e <send_job_update+0x3e>
		strncpy(last_job, job->info.id, sizeof(last_job));
   2a79e:	2225      	movs	r2, #37	; 0x25
   2a7a0:	68e1      	ldr	r1, [r4, #12]
   2a7a2:	480a      	ldr	r0, [pc, #40]	; (2a7cc <send_job_update+0xfc>)
   2a7a4:	f013 fdae 	bl	3e304 <strncpy>
   2a7a8:	e7b1      	b.n	2a70e <send_job_update+0x3e>
		return -EINVAL;
   2a7aa:	f06f 0515 	mvn.w	r5, #21
   2a7ae:	e7ae      	b.n	2a70e <send_job_update+0x3e>
		return -ENXIO;
   2a7b0:	f06f 0505 	mvn.w	r5, #5
   2a7b4:	e7ab      	b.n	2a70e <send_job_update+0x3e>
		return -EHOSTUNREACH;
   2a7b6:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2a7ba:	e7a8      	b.n	2a70e <send_job_update+0x3e>
   2a7bc:	20018378 	.word	0x20018378
   2a7c0:	20014848 	.word	0x20014848
   2a7c4:	0003ffa4 	.word	0x0003ffa4
   2a7c8:	000408ea 	.word	0x000408ea
   2a7cc:	2001d5ae 	.word	0x2001d5ae

0002a7d0 <http_fota_handler>:
{
   2a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(evt != NULL);
   2a7d2:	4606      	mov	r6, r0
   2a7d4:	b958      	cbnz	r0, 2a7ee <http_fota_handler+0x1e>
   2a7d6:	4949      	ldr	r1, [pc, #292]	; (2a8fc <http_fota_handler+0x12c>)
   2a7d8:	4849      	ldr	r0, [pc, #292]	; (2a900 <http_fota_handler+0x130>)
   2a7da:	f240 2341 	movw	r3, #577	; 0x241
   2a7de:	4a49      	ldr	r2, [pc, #292]	; (2a904 <http_fota_handler+0x134>)
   2a7e0:	f00e fca7 	bl	39132 <printk>
   2a7e4:	f240 2141 	movw	r1, #577	; 0x241
   2a7e8:	4846      	ldr	r0, [pc, #280]	; (2a904 <http_fota_handler+0x134>)
   2a7ea:	f00e ff41 	bl	39670 <assert_post_action>
   2a7ee:	4b46      	ldr	r3, [pc, #280]	; (2a908 <http_fota_handler+0x138>)
   2a7f0:	4d46      	ldr	r5, [pc, #280]	; (2a90c <http_fota_handler+0x13c>)
	LOG_DBG("evt: %d", evt->id);
   2a7f2:	4a47      	ldr	r2, [pc, #284]	; (2a910 <http_fota_handler+0x140>)
   2a7f4:	1aed      	subs	r5, r5, r3
   2a7f6:	08ed      	lsrs	r5, r5, #3
   2a7f8:	01ad      	lsls	r5, r5, #6
   2a7fa:	7833      	ldrb	r3, [r6, #0]
   2a7fc:	4945      	ldr	r1, [pc, #276]	; (2a914 <http_fota_handler+0x144>)
   2a7fe:	f045 0004 	orr.w	r0, r5, #4
   2a802:	f00e ff64 	bl	396ce <log_string_sync>
	switch (evt->id) {
   2a806:	7833      	ldrb	r3, [r6, #0]
   2a808:	4f43      	ldr	r7, [pc, #268]	; (2a918 <http_fota_handler+0x148>)
   2a80a:	2b04      	cmp	r3, #4
   2a80c:	d83a      	bhi.n	2a884 <http_fota_handler+0xb4>
   2a80e:	e8df f003 	tbb	[pc, r3]
   2a812:	035b      	.short	0x035b
   2a814:	3620      	.short	0x3620
   2a816:	3c          	.byte	0x3c
   2a817:	00          	.byte	0x00
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2a818:	4c40      	ldr	r4, [pc, #256]	; (2a91c <http_fota_handler+0x14c>)
		LOG_INF("Download complete");
   2a81a:	4941      	ldr	r1, [pc, #260]	; (2a920 <http_fota_handler+0x150>)
   2a81c:	f045 0003 	orr.w	r0, r5, #3
   2a820:	f00e ff55 	bl	396ce <log_string_sync>
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2a824:	7923      	ldrb	r3, [r4, #4]
   2a826:	2b07      	cmp	r3, #7
   2a828:	d108      	bne.n	2a83c <http_fota_handler+0x6c>
   2a82a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a82c:	2b64      	cmp	r3, #100	; 0x64
   2a82e:	d005      	beq.n	2a83c <http_fota_handler+0x6c>
			current_fota.dl_progress = 100;
   2a830:	2364      	movs	r3, #100	; 0x64
			(void)send_job_update(&current_fota);
   2a832:	4620      	mov	r0, r4
			current_fota.sent_dl_progress = 100;
   2a834:	e9c4 3308 	strd	r3, r3, [r4, #32]
			(void)send_job_update(&current_fota);
   2a838:	f7ff ff4a 	bl	2a6d0 <send_job_update>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2a83c:	2201      	movs	r2, #1
		save_validate_status(current_fota.info.id,
   2a83e:	7a21      	ldrb	r1, [r4, #8]
   2a840:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2a842:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2a844:	f7ff fdfe 	bl	2a444 <save_validate_status>
		ret = send_job_update(&current_fota);
   2a848:	4834      	ldr	r0, [pc, #208]	; (2a91c <http_fota_handler+0x14c>)
   2a84a:	f7ff ff41 	bl	2a6d0 <send_job_update>
   2a84e:	4604      	mov	r4, r0
		break;
   2a850:	e00d      	b.n	2a86e <http_fota_handler+0x9e>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2a852:	2201      	movs	r2, #1
   2a854:	4c31      	ldr	r4, [pc, #196]	; (2a91c <http_fota_handler+0x14c>)
		save_validate_status(current_fota.info.id,
   2a856:	7a21      	ldrb	r1, [r4, #8]
   2a858:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2a85a:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2a85c:	f7ff fdf2 	bl	2a444 <save_validate_status>
		ret = send_job_update(&current_fota);
   2a860:	4620      	mov	r0, r4
   2a862:	f7ff ff35 	bl	2a6d0 <send_job_update>
   2a866:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_PENDING, &current_fota);
   2a868:	2003      	movs	r0, #3
   2a86a:	f7ff fedf 	bl	2a62c <send_event.constprop.0>
	if (ret) {
   2a86e:	b14c      	cbz	r4, 2a884 <http_fota_handler+0xb4>
		LOG_ERR("Failed to send job update to cloud: %d", ret);
   2a870:	4622      	mov	r2, r4
   2a872:	492c      	ldr	r1, [pc, #176]	; (2a924 <http_fota_handler+0x154>)
   2a874:	f045 0001 	orr.w	r0, r5, #1
   2a878:	f00e ff29 	bl	396ce <log_string_sync>
   2a87c:	e002      	b.n	2a884 <http_fota_handler+0xb4>
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_DONE, &current_fota);
   2a87e:	2004      	movs	r0, #4
   2a880:	f7ff fed4 	bl	2a62c <send_event.constprop.0>
	last_fota_dl_evt = evt->id;
   2a884:	7833      	ldrb	r3, [r6, #0]
   2a886:	703b      	strb	r3, [r7, #0]
}
   2a888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2a88a:	2202      	movs	r2, #2
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2a88c:	7839      	ldrb	r1, [r7, #0]
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2a88e:	4b23      	ldr	r3, [pc, #140]	; (2a91c <http_fota_handler+0x14c>)
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2a890:	2903      	cmp	r1, #3
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2a892:	711a      	strb	r2, [r3, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2a894:	d002      	beq.n	2a89c <http_fota_handler+0xcc>
		    evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE) {
   2a896:	7931      	ldrb	r1, [r6, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2a898:	4291      	cmp	r1, r2
   2a89a:	d110      	bne.n	2a8be <http_fota_handler+0xee>
			current_fota.status = NRF_CLOUD_FOTA_REJECTED;
   2a89c:	2206      	movs	r2, #6
   2a89e:	711a      	strb	r2, [r3, #4]
		save_validate_status(current_fota.info.id,
   2a8a0:	2205      	movs	r2, #5
   2a8a2:	7a19      	ldrb	r1, [r3, #8]
   2a8a4:	68d8      	ldr	r0, [r3, #12]
   2a8a6:	f7ff fdcd 	bl	2a444 <save_validate_status>
		ret = send_job_update(&current_fota);
   2a8aa:	481c      	ldr	r0, [pc, #112]	; (2a91c <http_fota_handler+0x14c>)
   2a8ac:	f7ff ff10 	bl	2a6d0 <send_job_update>
   2a8b0:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERROR, &current_fota);
   2a8b2:	2002      	movs	r0, #2
   2a8b4:	f7ff feba 	bl	2a62c <send_event.constprop.0>
		cleanup_job(&current_fota);
   2a8b8:	f7ff feda 	bl	2a670 <cleanup_job.constprop.0>
		break;
   2a8bc:	e7d7      	b.n	2a86e <http_fota_handler+0x9e>
		} else if (evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH) {
   2a8be:	2903      	cmp	r1, #3
			current_fota.error = NRF_CLOUD_FOTA_ERROR_MISMATCH;
   2a8c0:	bf08      	it	eq
   2a8c2:	2205      	moveq	r2, #5
			current_fota.error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD;
   2a8c4:	771a      	strb	r2, [r3, #28]
   2a8c6:	e7eb      	b.n	2a8a0 <http_fota_handler+0xd0>
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2a8c8:	2207      	movs	r2, #7
   2a8ca:	4b14      	ldr	r3, [pc, #80]	; (2a91c <http_fota_handler+0x14c>)
		if ((current_fota.sent_dl_progress == 100) &&
   2a8cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2a8ce:	711a      	strb	r2, [r3, #4]
		current_fota.dl_progress = evt->progress;
   2a8d0:	6872      	ldr	r2, [r6, #4]
		if ((current_fota.sent_dl_progress == 100) &&
   2a8d2:	2964      	cmp	r1, #100	; 0x64
		current_fota.dl_progress = evt->progress;
   2a8d4:	621a      	str	r2, [r3, #32]
		if ((current_fota.sent_dl_progress == 100) &&
   2a8d6:	d108      	bne.n	2a8ea <http_fota_handler+0x11a>
   2a8d8:	2a64      	cmp	r2, #100	; 0x64
   2a8da:	d0d3      	beq.n	2a884 <http_fota_handler+0xb4>
		if (current_fota.sent_dl_progress >
   2a8dc:	2a63      	cmp	r2, #99	; 0x63
   2a8de:	dd06      	ble.n	2a8ee <http_fota_handler+0x11e>
		    (((current_fota.dl_progress -
   2a8e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2a8e2:	1a51      	subs	r1, r2, r1
		if (current_fota.dl_progress != 100 &&
   2a8e4:	2909      	cmp	r1, #9
   2a8e6:	ddcd      	ble.n	2a884 <http_fota_handler+0xb4>
   2a8e8:	e005      	b.n	2a8f6 <http_fota_handler+0x126>
		if (current_fota.sent_dl_progress >
   2a8ea:	428a      	cmp	r2, r1
   2a8ec:	da01      	bge.n	2a8f2 <http_fota_handler+0x122>
			current_fota.sent_dl_progress = 0;
   2a8ee:	2100      	movs	r1, #0
   2a8f0:	6259      	str	r1, [r3, #36]	; 0x24
		if (current_fota.dl_progress != 100 &&
   2a8f2:	2a64      	cmp	r2, #100	; 0x64
   2a8f4:	d1f4      	bne.n	2a8e0 <http_fota_handler+0x110>
		current_fota.sent_dl_progress = current_fota.dl_progress;
   2a8f6:	625a      	str	r2, [r3, #36]	; 0x24
   2a8f8:	e7a6      	b.n	2a848 <http_fota_handler+0x78>
   2a8fa:	bf00      	nop
   2a8fc:	00043a2b 	.word	0x00043a2b
   2a900:	0004033e 	.word	0x0004033e
   2a904:	000438ef 	.word	0x000438ef
   2a908:	0003f5a4 	.word	0x0003f5a4
   2a90c:	0003f694 	.word	0x0003f694
   2a910:	00043ee0 	.word	0x00043ee0
   2a914:	00043a3e 	.word	0x00043a3e
   2a918:	20014a48 	.word	0x20014a48
   2a91c:	2001837c 	.word	0x2001837c
   2a920:	00043a4a 	.word	0x00043a4a
   2a924:	00043a5c 	.word	0x00043a5c

0002a928 <report_validated_job_status>:
{
   2a928:	b530      	push	{r4, r5, lr}
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2a92a:	4c27      	ldr	r4, [pc, #156]	; (2a9c8 <report_validated_job_status+0xa0>)
{
   2a92c:	b08b      	sub	sp, #44	; 0x2c
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2a92e:	7865      	ldrb	r5, [r4, #1]
   2a930:	2d03      	cmp	r5, #3
   2a932:	d046      	beq.n	2a9c2 <report_validated_job_status+0x9a>
	struct nrf_cloud_fota_job job = {
   2a934:	2228      	movs	r2, #40	; 0x28
   2a936:	2100      	movs	r1, #0
   2a938:	4668      	mov	r0, sp
   2a93a:	f013 fb36 	bl	3dfaa <memset>
	switch (saved_job.validate) {
   2a93e:	7822      	ldrb	r2, [r4, #0]
	struct nrf_cloud_fota_job job = {
   2a940:	1ca3      	adds	r3, r4, #2
	switch (saved_job.validate) {
   2a942:	2a03      	cmp	r2, #3
	struct nrf_cloud_fota_job job = {
   2a944:	f88d 5008 	strb.w	r5, [sp, #8]
   2a948:	9303      	str	r3, [sp, #12]
	switch (saved_job.validate) {
   2a94a:	d022      	beq.n	2a992 <report_validated_job_status+0x6a>
   2a94c:	2a04      	cmp	r2, #4
   2a94e:	f04f 0503 	mov.w	r5, #3
   2a952:	d01b      	beq.n	2a98c <report_validated_job_status+0x64>
   2a954:	2a02      	cmp	r2, #2
   2a956:	d120      	bne.n	2a99a <report_validated_job_status+0x72>
		job.status = NRF_CLOUD_FOTA_SUCCEEDED;
   2a958:	f88d 5004 	strb.w	r5, [sp, #4]
	int ret = 0;
   2a95c:	2400      	movs	r4, #0
	if (job.info.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   2a95e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2a962:	2b03      	cmp	r3, #3
   2a964:	d00f      	beq.n	2a986 <report_validated_job_status+0x5e>
		ret = send_job_update(&job);
   2a966:	4668      	mov	r0, sp
   2a968:	f7ff feb2 	bl	2a6d0 <send_job_update>
		if (ret) {
   2a96c:	4604      	mov	r4, r0
   2a96e:	b150      	cbz	r0, 2a986 <report_validated_job_status+0x5e>
   2a970:	4816      	ldr	r0, [pc, #88]	; (2a9cc <report_validated_job_status+0xa4>)
   2a972:	4b17      	ldr	r3, [pc, #92]	; (2a9d0 <report_validated_job_status+0xa8>)
			LOG_ERR("Error sending job update: %d", ret);
   2a974:	4622      	mov	r2, r4
   2a976:	1ac0      	subs	r0, r0, r3
   2a978:	08c0      	lsrs	r0, r0, #3
   2a97a:	0180      	lsls	r0, r0, #6
   2a97c:	4915      	ldr	r1, [pc, #84]	; (2a9d4 <report_validated_job_status+0xac>)
   2a97e:	f040 0001 	orr.w	r0, r0, #1
   2a982:	f00e fea4 	bl	396ce <log_string_sync>
}
   2a986:	4620      	mov	r0, r4
   2a988:	b00b      	add	sp, #44	; 0x2c
   2a98a:	bd30      	pop	{r4, r5, pc}
		job.error = NRF_CLOUD_FOTA_ERROR_UNABLE_TO_VALIDATE;
   2a98c:	f88d 501c 	strb.w	r5, [sp, #28]
   2a990:	e7e2      	b.n	2a958 <report_validated_job_status+0x30>
		job.status = NRF_CLOUD_FOTA_FAILED;
   2a992:	2302      	movs	r3, #2
   2a994:	f88d 3004 	strb.w	r3, [sp, #4]
   2a998:	e7e0      	b.n	2a95c <report_validated_job_status+0x34>
   2a99a:	4b0d      	ldr	r3, [pc, #52]	; (2a9d0 <report_validated_job_status+0xa8>)
   2a99c:	480b      	ldr	r0, [pc, #44]	; (2a9cc <report_validated_job_status+0xa4>)
		LOG_ERR("Unexpected job validation status: %d",
   2a99e:	490e      	ldr	r1, [pc, #56]	; (2a9d8 <report_validated_job_status+0xb0>)
   2a9a0:	1ac0      	subs	r0, r0, r3
   2a9a2:	08c0      	lsrs	r0, r0, #3
   2a9a4:	0180      	lsls	r0, r0, #6
   2a9a6:	f040 0001 	orr.w	r0, r0, #1
   2a9aa:	f00e fe90 	bl	396ce <log_string_sync>
		ret = save_validate_status(job.info.id, job.info.type,
   2a9ae:	2205      	movs	r2, #5
   2a9b0:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2a9b4:	9803      	ldr	r0, [sp, #12]
   2a9b6:	f7ff fd45 	bl	2a444 <save_validate_status>
		job.info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2a9ba:	f88d 5008 	strb.w	r5, [sp, #8]
		ret = save_validate_status(job.info.id, job.info.type,
   2a9be:	4604      	mov	r4, r0
		break;
   2a9c0:	e7cd      	b.n	2a95e <report_validated_job_status+0x36>
		return 1;
   2a9c2:	2401      	movs	r4, #1
   2a9c4:	e7df      	b.n	2a986 <report_validated_job_status+0x5e>
   2a9c6:	bf00      	nop
   2a9c8:	20014a49 	.word	0x20014a49
   2a9cc:	0003f694 	.word	0x0003f694
   2a9d0:	0003f5a4 	.word	0x0003f5a4
   2a9d4:	00043aa8 	.word	0x00043aa8
   2a9d8:	00043a83 	.word	0x00043a83

0002a9dc <nrf_cloud_fota_init>:
{
   2a9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cb == NULL) {
   2a9e0:	b970      	cbnz	r0, 2aa00 <nrf_cloud_fota_init+0x24>
   2a9e2:	4b5a      	ldr	r3, [pc, #360]	; (2ab4c <nrf_cloud_fota_init+0x170>)
   2a9e4:	485a      	ldr	r0, [pc, #360]	; (2ab50 <nrf_cloud_fota_init+0x174>)
		LOG_ERR("Invalid parameter");
   2a9e6:	495b      	ldr	r1, [pc, #364]	; (2ab54 <nrf_cloud_fota_init+0x178>)
   2a9e8:	1ac0      	subs	r0, r0, r3
   2a9ea:	08c0      	lsrs	r0, r0, #3
   2a9ec:	0180      	lsls	r0, r0, #6
   2a9ee:	f040 0001 	orr.w	r0, r0, #1
   2a9f2:	f00e fe6c 	bl	396ce <log_string_sync>
		return -EINVAL;
   2a9f6:	f06f 0415 	mvn.w	r4, #21
}
   2a9fa:	4620      	mov	r0, r4
   2a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_cb = cb;
   2aa00:	4b55      	ldr	r3, [pc, #340]	; (2ab58 <nrf_cloud_fota_init+0x17c>)
	if (initialized) {
   2aa02:	4f56      	ldr	r7, [pc, #344]	; (2ab5c <nrf_cloud_fota_init+0x180>)
	event_cb = cb;
   2aa04:	6018      	str	r0, [r3, #0]
	if (initialized) {
   2aa06:	783b      	ldrb	r3, [r7, #0]
   2aa08:	2b00      	cmp	r3, #0
   2aa0a:	f040 809c 	bne.w	2ab46 <nrf_cloud_fota_init+0x16a>
	ret = fota_download_init(http_fota_handler);
   2aa0e:	4854      	ldr	r0, [pc, #336]	; (2ab60 <nrf_cloud_fota_init+0x184>)
   2aa10:	f001 fcbe 	bl	2c390 <fota_download_init>
	if (ret != 0) {
   2aa14:	4604      	mov	r4, r0
   2aa16:	b158      	cbz	r0, 2aa30 <nrf_cloud_fota_init+0x54>
		LOG_ERR("fota_download_init error: %d", ret);
   2aa18:	4622      	mov	r2, r4
   2aa1a:	484d      	ldr	r0, [pc, #308]	; (2ab50 <nrf_cloud_fota_init+0x174>)
   2aa1c:	4b4b      	ldr	r3, [pc, #300]	; (2ab4c <nrf_cloud_fota_init+0x170>)
   2aa1e:	4951      	ldr	r1, [pc, #324]	; (2ab64 <nrf_cloud_fota_init+0x188>)
   2aa20:	1ac0      	subs	r0, r0, r3
   2aa22:	08c0      	lsrs	r0, r0, #3
   2aa24:	0180      	lsls	r0, r0, #6
		LOG_ERR("Cannot load settings: %d", ret);
   2aa26:	f040 0001 	orr.w	r0, r0, #1
   2aa2a:	f00e fe50 	bl	396ce <log_string_sync>
		return ret;
   2aa2e:	e7e4      	b.n	2a9fa <nrf_cloud_fota_init+0x1e>
	ret = settings_load_subtree(settings_handler_fota.name);
   2aa30:	484d      	ldr	r0, [pc, #308]	; (2ab68 <nrf_cloud_fota_init+0x18c>)
   2aa32:	f7f7 fa37 	bl	21ea4 <settings_load_subtree>
	if (ret) {
   2aa36:	4604      	mov	r4, r0
   2aa38:	b138      	cbz	r0, 2aa4a <nrf_cloud_fota_init+0x6e>
   2aa3a:	4845      	ldr	r0, [pc, #276]	; (2ab50 <nrf_cloud_fota_init+0x174>)
   2aa3c:	4b43      	ldr	r3, [pc, #268]	; (2ab4c <nrf_cloud_fota_init+0x170>)
		LOG_ERR("Cannot load settings: %d", ret);
   2aa3e:	4622      	mov	r2, r4
   2aa40:	1ac0      	subs	r0, r0, r3
   2aa42:	08c0      	lsrs	r0, r0, #3
   2aa44:	4949      	ldr	r1, [pc, #292]	; (2ab6c <nrf_cloud_fota_init+0x190>)
   2aa46:	0180      	lsls	r0, r0, #6
   2aa48:	e7ed      	b.n	2aa26 <nrf_cloud_fota_init+0x4a>
	if (saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_PENDING) {
   2aa4a:	4b49      	ldr	r3, [pc, #292]	; (2ab70 <nrf_cloud_fota_init+0x194>)
   2aa4c:	781d      	ldrb	r5, [r3, #0]
   2aa4e:	4698      	mov	r8, r3
   2aa50:	2d01      	cmp	r5, #1
   2aa52:	d166      	bne.n	2ab22 <nrf_cloud_fota_init+0x146>
		if (!boot_is_img_confirmed()) {
   2aa54:	f00f fdb3 	bl	3a5be <boot_is_img_confirmed>
   2aa58:	4606      	mov	r6, r0
   2aa5a:	bb88      	cbnz	r0, 2aac0 <nrf_cloud_fota_init+0xe4>
			ret = boot_write_img_confirmed();
   2aa5c:	f00f fdc6 	bl	3a5ec <boot_write_img_confirmed>
			if (ret) {
   2aa60:	4604      	mov	r4, r0
   2aa62:	4b3b      	ldr	r3, [pc, #236]	; (2ab50 <nrf_cloud_fota_init+0x174>)
   2aa64:	4a39      	ldr	r2, [pc, #228]	; (2ab4c <nrf_cloud_fota_init+0x170>)
   2aa66:	1a9b      	subs	r3, r3, r2
   2aa68:	08db      	lsrs	r3, r3, #3
   2aa6a:	0198      	lsls	r0, r3, #6
   2aa6c:	b304      	cbz	r4, 2aab0 <nrf_cloud_fota_init+0xd4>
				LOG_ERR("FOTA update confirmation failed: %d",
   2aa6e:	4622      	mov	r2, r4
   2aa70:	4940      	ldr	r1, [pc, #256]	; (2ab74 <nrf_cloud_fota_init+0x198>)
   2aa72:	f040 0001 	orr.w	r0, r0, #1
   2aa76:	f00e fe2a 	bl	396ce <log_string_sync>
				validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2aa7a:	2203      	movs	r2, #3
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM) {
   2aa7c:	f898 3001 	ldrb.w	r3, [r8, #1]
   2aa80:	2b01      	cmp	r3, #1
   2aa82:	d128      	bne.n	2aad6 <nrf_cloud_fota_init+0xfa>
	int modem_dfu_res = nrf_modem_lib_get_init_ret();
   2aa84:	f7fc f8f6 	bl	26c74 <nrf_modem_lib_get_init_ret>
   2aa88:	4d31      	ldr	r5, [pc, #196]	; (2ab50 <nrf_cloud_fota_init+0x174>)
   2aa8a:	4b30      	ldr	r3, [pc, #192]	; (2ab4c <nrf_cloud_fota_init+0x170>)
   2aa8c:	4602      	mov	r2, r0
	switch (modem_dfu_res) {
   2aa8e:	1aed      	subs	r5, r5, r3
   2aa90:	4b39      	ldr	r3, [pc, #228]	; (2ab78 <nrf_cloud_fota_init+0x19c>)
   2aa92:	08ed      	lsrs	r5, r5, #3
   2aa94:	4298      	cmp	r0, r3
   2aa96:	ea4f 1585 	mov.w	r5, r5, lsl #6
   2aa9a:	dc13      	bgt.n	2aac4 <nrf_cloud_fota_init+0xe8>
   2aa9c:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   2aaa0:	dd32      	ble.n	2ab08 <nrf_cloud_fota_init+0x12c>
		LOG_ERR("Modem FOTA error: %d", modem_dfu_res);
   2aaa2:	4936      	ldr	r1, [pc, #216]	; (2ab7c <nrf_cloud_fota_init+0x1a0>)
   2aaa4:	f045 0001 	orr.w	r0, r5, #1
   2aaa8:	f00e fe11 	bl	396ce <log_string_sync>
		ret = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2aaac:	2203      	movs	r2, #3
		break;
   2aaae:	e012      	b.n	2aad6 <nrf_cloud_fota_init+0xfa>
				LOG_INF("FOTA update confirmed");
   2aab0:	4933      	ldr	r1, [pc, #204]	; (2ab80 <nrf_cloud_fota_init+0x1a4>)
   2aab2:	f040 0003 	orr.w	r0, r0, #3
   2aab6:	f00e fe0a 	bl	396ce <log_string_sync>
		update_was_pending = true;
   2aaba:	462e      	mov	r6, r5
				validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   2aabc:	2202      	movs	r2, #2
   2aabe:	e7dd      	b.n	2aa7c <nrf_cloud_fota_init+0xa0>
	enum fota_validate_status validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2aac0:	2204      	movs	r2, #4
   2aac2:	e7db      	b.n	2aa7c <nrf_cloud_fota_init+0xa0>
	switch (modem_dfu_res) {
   2aac4:	4b2f      	ldr	r3, [pc, #188]	; (2ab84 <nrf_cloud_fota_init+0x1a8>)
   2aac6:	4298      	cmp	r0, r3
   2aac8:	d11e      	bne.n	2ab08 <nrf_cloud_fota_init+0x12c>
		LOG_INF("Modem FOTA update confirmed");
   2aaca:	492f      	ldr	r1, [pc, #188]	; (2ab88 <nrf_cloud_fota_init+0x1ac>)
   2aacc:	f045 0003 	orr.w	r0, r5, #3
   2aad0:	f00e fdfd 	bl	396ce <log_string_sync>
		ret = NRF_CLOUD_FOTA_VALIDATE_PASS;
   2aad4:	2202      	movs	r2, #2
		save_validate_status(saved_job.id, saved_job.type, validate);
   2aad6:	f898 1001 	ldrb.w	r1, [r8, #1]
   2aada:	482c      	ldr	r0, [pc, #176]	; (2ab8c <nrf_cloud_fota_init+0x1b0>)
   2aadc:	f7ff fcb2 	bl	2a444 <save_validate_status>
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM) {
   2aae0:	f898 5001 	ldrb.w	r5, [r8, #1]
   2aae4:	2d01      	cmp	r5, #1
   2aae6:	d118      	bne.n	2ab1a <nrf_cloud_fota_init+0x13e>
   2aae8:	4b18      	ldr	r3, [pc, #96]	; (2ab4c <nrf_cloud_fota_init+0x170>)
   2aaea:	4819      	ldr	r0, [pc, #100]	; (2ab50 <nrf_cloud_fota_init+0x174>)
			LOG_INF("Rebooting to complete modem FOTA");
   2aaec:	4928      	ldr	r1, [pc, #160]	; (2ab90 <nrf_cloud_fota_init+0x1b4>)
   2aaee:	1ac0      	subs	r0, r0, r3
   2aaf0:	08c0      	lsrs	r0, r0, #3
   2aaf2:	0180      	lsls	r0, r0, #6
   2aaf4:	f040 0003 	orr.w	r0, r0, #3
   2aaf8:	f00e fde9 	bl	396ce <log_string_sync>
			sys_reboot(SYS_REBOOT_COLD);
   2aafc:	4628      	mov	r0, r5
   2aafe:	f7f6 fa2f 	bl	20f60 <sys_reboot>
	initialized = true;
   2ab02:	2301      	movs	r3, #1
   2ab04:	703b      	strb	r3, [r7, #0]
	return ret;
   2ab06:	e778      	b.n	2a9fa <nrf_cloud_fota_init+0x1e>
		LOG_DBG("Modem FOTA result unknown: %d", modem_dfu_res);
   2ab08:	4613      	mov	r3, r2
   2ab0a:	4922      	ldr	r1, [pc, #136]	; (2ab94 <nrf_cloud_fota_init+0x1b8>)
   2ab0c:	4a22      	ldr	r2, [pc, #136]	; (2ab98 <nrf_cloud_fota_init+0x1bc>)
   2ab0e:	f045 0004 	orr.w	r0, r5, #4
   2ab12:	f00e fddc 	bl	396ce <log_string_sync>
	enum fota_validate_status ret = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2ab16:	2204      	movs	r2, #4
   2ab18:	e7dd      	b.n	2aad6 <nrf_cloud_fota_init+0xfa>
			ret = 1;
   2ab1a:	2e00      	cmp	r6, #0
   2ab1c:	bf18      	it	ne
   2ab1e:	2401      	movne	r4, #1
   2ab20:	e7ef      	b.n	2ab02 <nrf_cloud_fota_init+0x126>
	} else if ((saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_PASS ||
   2ab22:	3d02      	subs	r5, #2
   2ab24:	2d02      	cmp	r5, #2
   2ab26:	d8ec      	bhi.n	2ab02 <nrf_cloud_fota_init+0x126>
		    saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_UNKNOWN) &&
   2ab28:	785d      	ldrb	r5, [r3, #1]
   2ab2a:	2d01      	cmp	r5, #1
   2ab2c:	d1e9      	bne.n	2ab02 <nrf_cloud_fota_init+0x126>
   2ab2e:	4b07      	ldr	r3, [pc, #28]	; (2ab4c <nrf_cloud_fota_init+0x170>)
   2ab30:	4807      	ldr	r0, [pc, #28]	; (2ab50 <nrf_cloud_fota_init+0x174>)
		LOG_INF("FOTA updated modem");
   2ab32:	491a      	ldr	r1, [pc, #104]	; (2ab9c <nrf_cloud_fota_init+0x1c0>)
   2ab34:	1ac0      	subs	r0, r0, r3
   2ab36:	08c0      	lsrs	r0, r0, #3
   2ab38:	0180      	lsls	r0, r0, #6
   2ab3a:	f040 0003 	orr.w	r0, r0, #3
   2ab3e:	f00e fdc6 	bl	396ce <log_string_sync>
		ret = 1;
   2ab42:	462c      	mov	r4, r5
   2ab44:	e7dd      	b.n	2ab02 <nrf_cloud_fota_init+0x126>
		return 0;
   2ab46:	2400      	movs	r4, #0
   2ab48:	e757      	b.n	2a9fa <nrf_cloud_fota_init+0x1e>
   2ab4a:	bf00      	nop
   2ab4c:	0003f5a4 	.word	0x0003f5a4
   2ab50:	0003f694 	.word	0x0003f694
   2ab54:	00043ac5 	.word	0x00043ac5
   2ab58:	200183a4 	.word	0x200183a4
   2ab5c:	2001d5ad 	.word	0x2001d5ad
   2ab60:	0002a7d1 	.word	0x0002a7d1
   2ab64:	00043ad7 	.word	0x00043ad7
   2ab68:	00043af4 	.word	0x00043af4
   2ab6c:	000434bd 	.word	0x000434bd
   2ab70:	20014a49 	.word	0x20014a49
   2ab74:	00043b03 	.word	0x00043b03
   2ab78:	04400004 	.word	0x04400004
   2ab7c:	00043b43 	.word	0x00043b43
   2ab80:	00043b2d 	.word	0x00043b2d
   2ab84:	05500001 	.word	0x05500001
   2ab88:	00043b27 	.word	0x00043b27
   2ab8c:	20014a4b 	.word	0x20014a4b
   2ab90:	00043b7a 	.word	0x00043b7a
   2ab94:	00043b58 	.word	0x00043b58
   2ab98:	00043e9a 	.word	0x00043e9a
   2ab9c:	00043b9b 	.word	0x00043b9b

0002aba0 <nrf_cloud_fota_endpoint_set>:
{
   2aba0:	b570      	push	{r4, r5, r6, lr}
   2aba2:	460e      	mov	r6, r1
   2aba4:	4615      	mov	r5, r2
	if (client == NULL || endpoint == NULL ||
   2aba6:	b328      	cbz	r0, 2abf4 <nrf_cloud_fota_endpoint_set+0x54>
   2aba8:	b322      	cbz	r2, 2abf4 <nrf_cloud_fota_endpoint_set+0x54>
   2abaa:	6813      	ldr	r3, [r2, #0]
   2abac:	b313      	cbz	r3, 2abf4 <nrf_cloud_fota_endpoint_set+0x54>
	    endpoint->utf8 == NULL || endpoint->size == 0 ||
   2abae:	6853      	ldr	r3, [r2, #4]
   2abb0:	b303      	cbz	r3, 2abf4 <nrf_cloud_fota_endpoint_set+0x54>
   2abb2:	b1f9      	cbz	r1, 2abf4 <nrf_cloud_fota_endpoint_set+0x54>
	client_mqtt = client;
   2abb4:	4b11      	ldr	r3, [pc, #68]	; (2abfc <_flash_used>)
   2abb6:	6018      	str	r0, [r3, #0]
	reset_topics();
   2abb8:	f7ff fca4 	bl	2a504 <reset_topics>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_RCV,
   2abbc:	4629      	mov	r1, r5
   2abbe:	4630      	mov	r0, r6
   2abc0:	4b0f      	ldr	r3, [pc, #60]	; (2ac00 <_flash_used+0x4>)
   2abc2:	4a10      	ldr	r2, [pc, #64]	; (2ac04 <_flash_used+0x8>)
   2abc4:	f7ff fcb0 	bl	2a528 <build_topic>
	if (ret) {
   2abc8:	4604      	mov	r4, r0
   2abca:	b978      	cbnz	r0, 2abec <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_UPDATE,
   2abcc:	4629      	mov	r1, r5
   2abce:	4630      	mov	r0, r6
   2abd0:	4b0d      	ldr	r3, [pc, #52]	; (2ac08 <_flash_used+0xc>)
   2abd2:	4a0e      	ldr	r2, [pc, #56]	; (2ac0c <_flash_used+0x10>)
   2abd4:	f7ff fca8 	bl	2a528 <build_topic>
	if (ret) {
   2abd8:	4604      	mov	r4, r0
   2abda:	b938      	cbnz	r0, 2abec <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_REQ,
   2abdc:	4629      	mov	r1, r5
   2abde:	4630      	mov	r0, r6
   2abe0:	4b0b      	ldr	r3, [pc, #44]	; (2ac10 <_flash_used+0x14>)
   2abe2:	4a0c      	ldr	r2, [pc, #48]	; (2ac14 <_flash_used+0x18>)
   2abe4:	f7ff fca0 	bl	2a528 <build_topic>
	if (ret) {
   2abe8:	4604      	mov	r4, r0
   2abea:	b108      	cbz	r0, 2abf0 <nrf_cloud_fota_endpoint_set+0x50>
	reset_topics();
   2abec:	f7ff fc8a 	bl	2a504 <reset_topics>
}
   2abf0:	4620      	mov	r0, r4
   2abf2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2abf4:	f06f 0415 	mvn.w	r4, #21
   2abf8:	e7fa      	b.n	2abf0 <nrf_cloud_fota_endpoint_set+0x50>
   2abfa:	bf00      	nop
   2abfc:	20018378 	.word	0x20018378
   2ac00:	20014830 	.word	0x20014830
   2ac04:	00043bae 	.word	0x00043bae
   2ac08:	20014848 	.word	0x20014848
   2ac0c:	00043bb8 	.word	0x00043bb8
   2ac10:	2001483c 	.word	0x2001483c
   2ac14:	00043bc5 	.word	0x00043bc5

0002ac18 <nrf_cloud_fota_endpoint_set_and_report>:
{
   2ac18:	b510      	push	{r4, lr}
	int ret = nrf_cloud_fota_endpoint_set(client, client_id, endpoint);
   2ac1a:	f7ff ffc1 	bl	2aba0 <nrf_cloud_fota_endpoint_set>
	if (ret) {
   2ac1e:	4604      	mov	r4, r0
   2ac20:	b160      	cbz	r0, 2ac3c <nrf_cloud_fota_endpoint_set_and_report+0x24>
   2ac22:	4809      	ldr	r0, [pc, #36]	; (2ac48 <nrf_cloud_fota_endpoint_set_and_report+0x30>)
   2ac24:	4b09      	ldr	r3, [pc, #36]	; (2ac4c <nrf_cloud_fota_endpoint_set_and_report+0x34>)
		LOG_ERR("Failed to set FOTA endpoint: %d", ret);
   2ac26:	4622      	mov	r2, r4
   2ac28:	1ac0      	subs	r0, r0, r3
   2ac2a:	08c0      	lsrs	r0, r0, #3
   2ac2c:	0180      	lsls	r0, r0, #6
   2ac2e:	4908      	ldr	r1, [pc, #32]	; (2ac50 <nrf_cloud_fota_endpoint_set_and_report+0x38>)
   2ac30:	f040 0001 	orr.w	r0, r0, #1
   2ac34:	f00e fd4b 	bl	396ce <log_string_sync>
}
   2ac38:	4620      	mov	r0, r4
   2ac3a:	bd10      	pop	{r4, pc}
	ret = report_validated_job_status();
   2ac3c:	f7ff fe74 	bl	2a928 <report_validated_job_status>
	if (ret > 0) {
   2ac40:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   2ac44:	e7f8      	b.n	2ac38 <nrf_cloud_fota_endpoint_set_and_report+0x20>
   2ac46:	bf00      	nop
   2ac48:	0003f694 	.word	0x0003f694
   2ac4c:	0003f5a4 	.word	0x0003f5a4
   2ac50:	00043bcf 	.word	0x00043bcf

0002ac54 <nrf_cloud_fota_endpoint_clear>:
	client_mqtt = NULL;
   2ac54:	2200      	movs	r2, #0
   2ac56:	4b02      	ldr	r3, [pc, #8]	; (2ac60 <nrf_cloud_fota_endpoint_clear+0xc>)
   2ac58:	601a      	str	r2, [r3, #0]
	reset_topics();
   2ac5a:	f7ff bc53 	b.w	2a504 <reset_topics>
   2ac5e:	bf00      	nop
   2ac60:	20018378 	.word	0x20018378

0002ac64 <nrf_cloud_fota_subscribe>:
{
   2ac64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	for (int i = 0; i < sub_list.list_count; ++i) {
   2ac66:	2500      	movs	r5, #0
	struct mqtt_subscription_list sub_list = {
   2ac68:	4b15      	ldr	r3, [pc, #84]	; (2acc0 <nrf_cloud_fota_subscribe+0x5c>)
   2ac6a:	4c16      	ldr	r4, [pc, #88]	; (2acc4 <nrf_cloud_fota_subscribe+0x60>)
   2ac6c:	9300      	str	r3, [sp, #0]
   2ac6e:	4b16      	ldr	r3, [pc, #88]	; (2acc8 <nrf_cloud_fota_subscribe+0x64>)
		LOG_DBG("Subscribing to topic: %s",
   2ac70:	4e16      	ldr	r6, [pc, #88]	; (2accc <nrf_cloud_fota_subscribe+0x68>)
	struct mqtt_subscription_list sub_list = {
   2ac72:	9301      	str	r3, [sp, #4]
   2ac74:	4b16      	ldr	r3, [pc, #88]	; (2acd0 <nrf_cloud_fota_subscribe+0x6c>)
   2ac76:	1ae4      	subs	r4, r4, r3
   2ac78:	08e4      	lsrs	r4, r4, #3
		LOG_DBG("Subscribing to topic: %s",
   2ac7a:	01a4      	lsls	r4, r4, #6
   2ac7c:	f044 0404 	orr.w	r4, r4, #4
		if (sub_list.list[i].topic.size == 0 ||
   2ac80:	230c      	movs	r3, #12
   2ac82:	436b      	muls	r3, r5
   2ac84:	9900      	ldr	r1, [sp, #0]
   2ac86:	18ca      	adds	r2, r1, r3
   2ac88:	6852      	ldr	r2, [r2, #4]
   2ac8a:	b1aa      	cbz	r2, 2acb8 <nrf_cloud_fota_subscribe+0x54>
		    sub_list.list[i].topic.utf8 == NULL) {
   2ac8c:	58c8      	ldr	r0, [r1, r3]
		if (sub_list.list[i].topic.size == 0 ||
   2ac8e:	b198      	cbz	r0, 2acb8 <nrf_cloud_fota_subscribe+0x54>
   2ac90:	f00e fd30 	bl	396f4 <z_log_strdup>
		LOG_DBG("Subscribing to topic: %s",
   2ac94:	4632      	mov	r2, r6
   2ac96:	4603      	mov	r3, r0
   2ac98:	490e      	ldr	r1, [pc, #56]	; (2acd4 <nrf_cloud_fota_subscribe+0x70>)
   2ac9a:	4620      	mov	r0, r4
   2ac9c:	f00e fd17 	bl	396ce <log_string_sync>
	for (int i = 0; i < sub_list.list_count; ++i) {
   2aca0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2aca4:	3501      	adds	r5, #1
   2aca6:	429d      	cmp	r5, r3
   2aca8:	dbea      	blt.n	2ac80 <nrf_cloud_fota_subscribe+0x1c>
	return mqtt_subscribe(client_mqtt, &sub_list);
   2acaa:	4b0b      	ldr	r3, [pc, #44]	; (2acd8 <nrf_cloud_fota_subscribe+0x74>)
   2acac:	4669      	mov	r1, sp
   2acae:	6818      	ldr	r0, [r3, #0]
   2acb0:	f010 f995 	bl	3afde <mqtt_subscribe>
}
   2acb4:	b002      	add	sp, #8
   2acb6:	bd70      	pop	{r4, r5, r6, pc}
			return -EFAULT;
   2acb8:	f06f 000d 	mvn.w	r0, #13
   2acbc:	e7fa      	b.n	2acb4 <nrf_cloud_fota_subscribe+0x50>
   2acbe:	bf00      	nop
   2acc0:	20014830 	.word	0x20014830
   2acc4:	0003f694 	.word	0x0003f694
   2acc8:	223e0001 	.word	0x223e0001
   2accc:	00043eb2 	.word	0x00043eb2
   2acd0:	0003f5a4 	.word	0x0003f5a4
   2acd4:	00043bef 	.word	0x00043bef
   2acd8:	20018378 	.word	0x20018378

0002acdc <nrf_cloud_fota_unsubscribe>:
{
   2acdc:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2acde:	466b      	mov	r3, sp
   2ace0:	4a0a      	ldr	r2, [pc, #40]	; (2ad0c <nrf_cloud_fota_unsubscribe+0x30>)
   2ace2:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2ace6:	4a0a      	ldr	r2, [pc, #40]	; (2ad10 <nrf_cloud_fota_unsubscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   2ace8:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2acec:	6851      	ldr	r1, [r2, #4]
   2acee:	b149      	cbz	r1, 2ad04 <nrf_cloud_fota_unsubscribe+0x28>
   2acf0:	6812      	ldr	r2, [r2, #0]
   2acf2:	b13a      	cbz	r2, 2ad04 <nrf_cloud_fota_unsubscribe+0x28>
	return mqtt_unsubscribe(client_mqtt, &sub_list);
   2acf4:	4619      	mov	r1, r3
   2acf6:	4b07      	ldr	r3, [pc, #28]	; (2ad14 <nrf_cloud_fota_unsubscribe+0x38>)
   2acf8:	6818      	ldr	r0, [r3, #0]
   2acfa:	f010 f997 	bl	3b02c <mqtt_unsubscribe>
}
   2acfe:	b003      	add	sp, #12
   2ad00:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   2ad04:	f06f 000d 	mvn.w	r0, #13
   2ad08:	e7f9      	b.n	2acfe <nrf_cloud_fota_unsubscribe+0x22>
   2ad0a:	bf00      	nop
   2ad0c:	0003f7d0 	.word	0x0003f7d0
   2ad10:	20014830 	.word	0x20014830
   2ad14:	20018378 	.word	0x20018378

0002ad18 <nrf_cloud_fota_update_check>:

int nrf_cloud_fota_update_check(void)
{
   2ad18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (client_mqtt == NULL) {
   2ad1a:	4b10      	ldr	r3, [pc, #64]	; (2ad5c <nrf_cloud_fota_update_check+0x44>)
   2ad1c:	681b      	ldr	r3, [r3, #0]
   2ad1e:	b1bb      	cbz	r3, 2ad50 <nrf_cloud_fota_update_check+0x38>
		return -ENXIO;
	} else if (topic_req.topic.utf8 == NULL) {
   2ad20:	4a0f      	ldr	r2, [pc, #60]	; (2ad60 <nrf_cloud_fota_update_check+0x48>)
   2ad22:	6813      	ldr	r3, [r2, #0]
   2ad24:	b1bb      	cbz	r3, 2ad56 <nrf_cloud_fota_update_check+0x3e>
		.message_id = NRF_CLOUD_FOTA_REQUEST_ID,
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.topic = topic_req;
   2ad26:	ca07      	ldmia	r2, {r0, r1, r2}
	struct mqtt_publish_param param = {
   2ad28:	2300      	movs	r3, #0
   2ad2a:	f8ad 3016 	strh.w	r3, [sp, #22]
   2ad2e:	f242 233f 	movw	r3, #8767	; 0x223f
   2ad32:	f8ad 3014 	strh.w	r3, [sp, #20]
	param.message.topic = topic_req;
   2ad36:	466b      	mov	r3, sp
   2ad38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2ad3c:	4a09      	ldr	r2, [pc, #36]	; (2ad64 <nrf_cloud_fota_update_check+0x4c>)
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;

	return publish(&param);
   2ad3e:	4618      	mov	r0, r3
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2ad40:	9203      	str	r2, [sp, #12]
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;
   2ad42:	2204      	movs	r2, #4
   2ad44:	9204      	str	r2, [sp, #16]
	return publish(&param);
   2ad46:	f7ff fb41 	bl	2a3cc <publish>
}
   2ad4a:	b007      	add	sp, #28
   2ad4c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENXIO;
   2ad50:	f06f 0005 	mvn.w	r0, #5
   2ad54:	e7f9      	b.n	2ad4a <nrf_cloud_fota_update_check+0x32>
		return -EHOSTUNREACH;
   2ad56:	f06f 0075 	mvn.w	r0, #117	; 0x75
   2ad5a:	e7f6      	b.n	2ad4a <nrf_cloud_fota_update_check+0x32>
   2ad5c:	20018378 	.word	0x20018378
   2ad60:	2001483c 	.word	0x2001483c
   2ad64:	00043c0c 	.word	0x00043c0c

0002ad68 <nrf_cloud_fota_mqtt_evt_handler>:

	return 0;
}

int nrf_cloud_fota_mqtt_evt_handler(const struct mqtt_evt *evt)
{
   2ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2ad6c:	4bb8      	ldr	r3, [pc, #736]	; (2b050 <nrf_cloud_fota_mqtt_evt_handler+0x2e8>)
{
   2ad6e:	4607      	mov	r7, r0
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2ad70:	6818      	ldr	r0, [r3, #0]
{
   2ad72:	b087      	sub	sp, #28
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2ad74:	2800      	cmp	r0, #0
   2ad76:	f000 81df 	beq.w	2b138 <nrf_cloud_fota_mqtt_evt_handler+0x3d0>
   2ad7a:	685b      	ldr	r3, [r3, #4]
   2ad7c:	2b00      	cmp	r3, #0
   2ad7e:	f000 81db 	beq.w	2b138 <nrf_cloud_fota_mqtt_evt_handler+0x3d0>
	    sub_topics[SUB_TOPIC_IDX_RCV].topic.size == 0) {
		/* Ignore MQTT until a topic has been set */
		return 1;
	}

	switch (evt->type) {
   2ad82:	f897 a000 	ldrb.w	sl, [r7]
   2ad86:	f1ba 0f09 	cmp.w	sl, #9
   2ad8a:	f200 8141 	bhi.w	2b010 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>
   2ad8e:	e8df f01a 	tbh	[pc, sl, lsl #1]
   2ad92:	01d3      	.short	0x01d3
   2ad94:	000a01d3 	.word	0x000a01d3
   2ad98:	01d301ca 	.word	0x01d301ca
   2ad9c:	01d301d3 	.word	0x01d301d3
   2ada0:	01b901a6 	.word	0x01b901a6
   2ada4:	01d3      	.short	0x01d3
	struct mqtt_puback_param ack = {
   2ada6:	8b3b      	ldrh	r3, [r7, #24]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2ada8:	6879      	ldr	r1, [r7, #4]
	struct mqtt_puback_param ack = {
   2adaa:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2adae:	f013 fac9 	bl	3e344 <strstr>
   2adb2:	2800      	cmp	r0, #0
   2adb4:	f000 81c0 	beq.w	2b138 <nrf_cloud_fota_mqtt_evt_handler+0x3d0>
   2adb8:	4ba6      	ldr	r3, [pc, #664]	; (2b054 <nrf_cloud_fota_mqtt_evt_handler+0x2ec>)
   2adba:	4da7      	ldr	r5, [pc, #668]	; (2b058 <nrf_cloud_fota_mqtt_evt_handler+0x2f0>)
	LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   2adbc:	4aa7      	ldr	r2, [pc, #668]	; (2b05c <nrf_cloud_fota_mqtt_evt_handler+0x2f4>)
   2adbe:	1aed      	subs	r5, r5, r3
   2adc0:	08ed      	lsrs	r5, r5, #3
   2adc2:	697b      	ldr	r3, [r7, #20]
   2adc4:	01ad      	lsls	r5, r5, #6
   2adc6:	f045 0b04 	orr.w	fp, r5, #4
   2adca:	4658      	mov	r0, fp
   2adcc:	49a4      	ldr	r1, [pc, #656]	; (2b060 <nrf_cloud_fota_mqtt_evt_handler+0x2f8>)
   2adce:	9300      	str	r3, [sp, #0]
   2add0:	8b3b      	ldrh	r3, [r7, #24]
   2add2:	f00e fc7c 	bl	396ce <log_string_sync>
	payload = nrf_cloud_calloc(p->message.payload.len + 1, 1);
   2add6:	2101      	movs	r1, #1
   2add8:	6978      	ldr	r0, [r7, #20]
   2adda:	4408      	add	r0, r1
   2addc:	f013 f88d 	bl	3defa <k_calloc>
	if (!payload) {
   2ade0:	4681      	mov	r9, r0
   2ade2:	bb20      	cbnz	r0, 2ae2e <nrf_cloud_fota_mqtt_evt_handler+0xc6>
		LOG_ERR("Unable to allocate memory for job");
   2ade4:	499f      	ldr	r1, [pc, #636]	; (2b064 <nrf_cloud_fota_mqtt_evt_handler+0x2fc>)
   2ade6:	f045 0001 	orr.w	r0, r5, #1
   2adea:	f00e fc70 	bl	396ce <log_string_sync>
	bool skip = false;
   2adee:	46c8      	mov	r8, r9
		ret = -ENOMEM;
   2adf0:	f06f 040b 	mvn.w	r4, #11
	if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2adf4:	7b3b      	ldrb	r3, [r7, #12]
   2adf6:	2b00      	cmp	r3, #0
   2adf8:	f040 80e1 	bne.w	2afbe <nrf_cloud_fota_mqtt_evt_handler+0x256>
		LOG_DBG("No ack required");
   2adfc:	4a97      	ldr	r2, [pc, #604]	; (2b05c <nrf_cloud_fota_mqtt_evt_handler+0x2f4>)
   2adfe:	499a      	ldr	r1, [pc, #616]	; (2b068 <nrf_cloud_fota_mqtt_evt_handler+0x300>)
   2ae00:	f045 0004 	orr.w	r0, r5, #4
   2ae04:	f00e fc63 	bl	396ce <log_string_sync>
	if (skip || job_info->type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2ae08:	f1b8 0f00 	cmp.w	r8, #0
   2ae0c:	d105      	bne.n	2ae1a <nrf_cloud_fota_mqtt_evt_handler+0xb2>
   2ae0e:	4b97      	ldr	r3, [pc, #604]	; (2b06c <nrf_cloud_fota_mqtt_evt_handler+0x304>)
   2ae10:	7a1a      	ldrb	r2, [r3, #8]
   2ae12:	461e      	mov	r6, r3
   2ae14:	2a03      	cmp	r2, #3
   2ae16:	f040 80e5 	bne.w	2afe4 <nrf_cloud_fota_mqtt_evt_handler+0x27c>
		if (payload_array) {
   2ae1a:	f1b9 0f00 	cmp.w	r9, #0
   2ae1e:	d002      	beq.n	2ae26 <nrf_cloud_fota_mqtt_evt_handler+0xbe>
			cJSON_Delete(payload_array);
   2ae20:	4648      	mov	r0, r9
   2ae22:	f002 fee7 	bl	2dbf4 <cJSON_Delete>
		return 1;
	break;
	}

	return 0;
}
   2ae26:	4620      	mov	r0, r4
   2ae28:	b007      	add	sp, #28
   2ae2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ret = mqtt_readall_publish_payload(client_mqtt, payload,
   2ae2e:	4b90      	ldr	r3, [pc, #576]	; (2b070 <nrf_cloud_fota_mqtt_evt_handler+0x308>)
   2ae30:	4601      	mov	r1, r0
   2ae32:	697a      	ldr	r2, [r7, #20]
   2ae34:	6818      	ldr	r0, [r3, #0]
   2ae36:	f010 f9ad 	bl	3b194 <mqtt_readall_publish_payload>
	if (ret) {
   2ae3a:	4604      	mov	r4, r0
   2ae3c:	b140      	cbz	r0, 2ae50 <nrf_cloud_fota_mqtt_evt_handler+0xe8>
		LOG_ERR("Error reading MQTT payload: %d", ret);
   2ae3e:	4602      	mov	r2, r0
   2ae40:	498c      	ldr	r1, [pc, #560]	; (2b074 <nrf_cloud_fota_mqtt_evt_handler+0x30c>)
   2ae42:	f045 0001 	orr.w	r0, r5, #1
   2ae46:	f00e fc42 	bl	396ce <log_string_sync>
		cJSON_Delete(array);
   2ae4a:	2600      	movs	r6, #0
	bool skip = false;
   2ae4c:	46b0      	mov	r8, r6
   2ae4e:	e0a6      	b.n	2af9e <nrf_cloud_fota_mqtt_evt_handler+0x236>
	return current_fota.parsed_payload != NULL;
   2ae50:	4b86      	ldr	r3, [pc, #536]	; (2b06c <nrf_cloud_fota_mqtt_evt_handler+0x304>)
   2ae52:	681a      	ldr	r2, [r3, #0]
   2ae54:	4698      	mov	r8, r3
	if (is_fota_active() && !ble_id) {
   2ae56:	b142      	cbz	r2, 2ae6a <nrf_cloud_fota_mqtt_evt_handler+0x102>
		LOG_INF("Job in progress... skipping");
   2ae58:	4987      	ldr	r1, [pc, #540]	; (2b078 <nrf_cloud_fota_mqtt_evt_handler+0x310>)
   2ae5a:	f045 0003 	orr.w	r0, r5, #3
   2ae5e:	f00e fc36 	bl	396ce <log_string_sync>
	cJSON *payload_array = NULL;
   2ae62:	4626      	mov	r6, r4
		skip = true;
   2ae64:	f04f 0801 	mov.w	r8, #1
send_ack:
   2ae68:	e099      	b.n	2af9e <nrf_cloud_fota_mqtt_evt_handler+0x236>
	cJSON *array = cJSON_Parse(payload_in);
   2ae6a:	4648      	mov	r0, r9
   2ae6c:	f011 fba0 	bl	3c5b0 <cJSON_Parse>
	if (!array || !cJSON_IsArray(array)) {
   2ae70:	4606      	mov	r6, r0
   2ae72:	b9a0      	cbnz	r0, 2ae9e <nrf_cloud_fota_mqtt_evt_handler+0x136>
		LOG_ERR("Invalid JSON array");
   2ae74:	4981      	ldr	r1, [pc, #516]	; (2b07c <nrf_cloud_fota_mqtt_evt_handler+0x314>)
   2ae76:	f045 0001 	orr.w	r0, r5, #1
   2ae7a:	f00e fc28 	bl	396ce <log_string_sync>
		err = -EINVAL;
   2ae7e:	f06f 0415 	mvn.w	r4, #21
	memset(job_info, 0, sizeof(*job_info));
   2ae82:	2214      	movs	r2, #20
   2ae84:	2100      	movs	r1, #0
   2ae86:	487e      	ldr	r0, [pc, #504]	; (2b080 <nrf_cloud_fota_mqtt_evt_handler+0x318>)
   2ae88:	f013 f88f 	bl	3dfaa <memset>
	job_info->type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2ae8c:	2303      	movs	r3, #3
   2ae8e:	f888 3008 	strb.w	r3, [r8, #8]
	if (array) {
   2ae92:	2e00      	cmp	r6, #0
   2ae94:	d0da      	beq.n	2ae4c <nrf_cloud_fota_mqtt_evt_handler+0xe4>
		cJSON_Delete(array);
   2ae96:	4630      	mov	r0, r6
   2ae98:	f002 feac 	bl	2dbf4 <cJSON_Delete>
   2ae9c:	e7d5      	b.n	2ae4a <nrf_cloud_fota_mqtt_evt_handler+0xe2>
	if (!array || !cJSON_IsArray(array)) {
   2ae9e:	f011 fbec 	bl	3c67a <cJSON_IsArray>
   2aea2:	2800      	cmp	r0, #0
   2aea4:	d0e6      	beq.n	2ae74 <nrf_cloud_fota_mqtt_evt_handler+0x10c>
	temp = cJSON_PrintUnformatted(array);
   2aea6:	4630      	mov	r0, r6
   2aea8:	f011 fb86 	bl	3c5b8 <cJSON_PrintUnformatted>
	if (temp) {
   2aeac:	4604      	mov	r4, r0
   2aeae:	b150      	cbz	r0, 2aec6 <nrf_cloud_fota_mqtt_evt_handler+0x15e>
   2aeb0:	f00e fc20 	bl	396f4 <z_log_strdup>
		LOG_DBG("JSON array: %s", log_strdup(temp));
   2aeb4:	4a73      	ldr	r2, [pc, #460]	; (2b084 <nrf_cloud_fota_mqtt_evt_handler+0x31c>)
   2aeb6:	4603      	mov	r3, r0
   2aeb8:	4973      	ldr	r1, [pc, #460]	; (2b088 <nrf_cloud_fota_mqtt_evt_handler+0x320>)
   2aeba:	4658      	mov	r0, fp
   2aebc:	f00e fc07 	bl	396ce <log_string_sync>
		cJSON_FreeString(temp);
   2aec0:	4620      	mov	r0, r4
   2aec2:	f011 fbe5 	bl	3c690 <cJSON_FreeString>
	if (get_string_from_array(array, RCV_ITEM_IDX_JOB_ID - offset,
   2aec6:	2100      	movs	r1, #0
   2aec8:	4630      	mov	r0, r6
   2aeca:	4a70      	ldr	r2, [pc, #448]	; (2b08c <nrf_cloud_fota_mqtt_evt_handler+0x324>)
   2aecc:	f7ff fb62 	bl	2a594 <get_string_from_array>
   2aed0:	b138      	cbz	r0, 2aee2 <nrf_cloud_fota_mqtt_evt_handler+0x17a>
		LOG_ERR("Error parsing job info");
   2aed2:	496f      	ldr	r1, [pc, #444]	; (2b090 <nrf_cloud_fota_mqtt_evt_handler+0x328>)
   2aed4:	f045 0001 	orr.w	r0, r5, #1
   2aed8:	f00e fbf9 	bl	396ce <log_string_sync>
	int err = -ENOMSG;
   2aedc:	f06f 0422 	mvn.w	r4, #34	; 0x22
		goto cleanup;
   2aee0:	e7cf      	b.n	2ae82 <nrf_cloud_fota_mqtt_evt_handler+0x11a>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_HOST - offset,
   2aee2:	2103      	movs	r1, #3
   2aee4:	4630      	mov	r0, r6
   2aee6:	4a6b      	ldr	r2, [pc, #428]	; (2b094 <nrf_cloud_fota_mqtt_evt_handler+0x32c>)
   2aee8:	f7ff fb54 	bl	2a594 <get_string_from_array>
				  &job_info->id) ||
   2aeec:	2800      	cmp	r0, #0
   2aeee:	d1f0      	bne.n	2aed2 <nrf_cloud_fota_mqtt_evt_handler+0x16a>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_PATH - offset,
   2aef0:	2104      	movs	r1, #4
   2aef2:	4630      	mov	r0, r6
   2aef4:	4a68      	ldr	r2, [pc, #416]	; (2b098 <nrf_cloud_fota_mqtt_evt_handler+0x330>)
   2aef6:	f7ff fb4d 	bl	2a594 <get_string_from_array>
				  &job_info->host) ||
   2aefa:	2800      	cmp	r0, #0
   2aefc:	d1e9      	bne.n	2aed2 <nrf_cloud_fota_mqtt_evt_handler+0x16a>
	    get_number_from_array(array, RCV_ITEM_IDX_FW_TYPE - offset,
   2aefe:	2101      	movs	r1, #1
   2af00:	4630      	mov	r0, r6
   2af02:	4a5f      	ldr	r2, [pc, #380]	; (2b080 <nrf_cloud_fota_mqtt_evt_handler+0x318>)
   2af04:	f7ff fb6c 	bl	2a5e0 <get_number_from_array>
				  &job_info->path) ||
   2af08:	2800      	cmp	r0, #0
   2af0a:	d1e2      	bne.n	2aed2 <nrf_cloud_fota_mqtt_evt_handler+0x16a>
	    get_number_from_array(array, RCV_ITEM_IDX_FILE_SIZE - offset,
   2af0c:	2102      	movs	r1, #2
   2af0e:	4630      	mov	r0, r6
   2af10:	4a62      	ldr	r2, [pc, #392]	; (2b09c <nrf_cloud_fota_mqtt_evt_handler+0x334>)
   2af12:	f7ff fb65 	bl	2a5e0 <get_number_from_array>
				  (int *)&job_info->type) ||
   2af16:	4604      	mov	r4, r0
   2af18:	2800      	cmp	r0, #0
   2af1a:	d1da      	bne.n	2aed2 <nrf_cloud_fota_mqtt_evt_handler+0x16a>
	job_id_len = strlen(job_info->id);
   2af1c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2af20:	f7f2 f99c 	bl	1d25c <strlen>
	if (job_id_len > (JOB_ID_STRING_SIZE - 1)) {
   2af24:	2824      	cmp	r0, #36	; 0x24
	job_id_len = strlen(job_info->id);
   2af26:	4602      	mov	r2, r0
	if (job_id_len > (JOB_ID_STRING_SIZE - 1)) {
   2af28:	d906      	bls.n	2af38 <nrf_cloud_fota_mqtt_evt_handler+0x1d0>
		LOG_ERR("Job ID length: %d, exceeds allowed length: %d",
   2af2a:	2324      	movs	r3, #36	; 0x24
   2af2c:	495c      	ldr	r1, [pc, #368]	; (2b0a0 <nrf_cloud_fota_mqtt_evt_handler+0x338>)
   2af2e:	f045 0001 	orr.w	r0, r5, #1
   2af32:	f00e fbcc 	bl	396ce <log_string_sync>
		goto cleanup;
   2af36:	e7d1      	b.n	2aedc <nrf_cloud_fota_mqtt_evt_handler+0x174>
	    job_info->type >= NRF_CLOUD_FOTA_TYPE__INVALID) {
   2af38:	f898 2008 	ldrb.w	r2, [r8, #8]
	if (job_info->type < NRF_CLOUD_FOTA_TYPE__FIRST ||
   2af3c:	2a02      	cmp	r2, #2
   2af3e:	d905      	bls.n	2af4c <nrf_cloud_fota_mqtt_evt_handler+0x1e4>
		LOG_ERR("Invalid FOTA type: %d", job_info->type);
   2af40:	4958      	ldr	r1, [pc, #352]	; (2b0a4 <nrf_cloud_fota_mqtt_evt_handler+0x33c>)
   2af42:	f045 0001 	orr.w	r0, r5, #1
   2af46:	f00e fbc2 	bl	396ce <log_string_sync>
   2af4a:	e7c7      	b.n	2aedc <nrf_cloud_fota_mqtt_evt_handler+0x174>
   2af4c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2af50:	f00e fbd0 	bl	396f4 <z_log_strdup>
	LOG_DBG("Job ID: %s, type: %d, size: %d",
   2af54:	f8d8 2018 	ldr.w	r2, [r8, #24]
   2af58:	f045 0b04 	orr.w	fp, r5, #4
   2af5c:	9201      	str	r2, [sp, #4]
   2af5e:	f898 2008 	ldrb.w	r2, [r8, #8]
   2af62:	4603      	mov	r3, r0
   2af64:	4950      	ldr	r1, [pc, #320]	; (2b0a8 <nrf_cloud_fota_mqtt_evt_handler+0x340>)
   2af66:	4658      	mov	r0, fp
   2af68:	9200      	str	r2, [sp, #0]
   2af6a:	4a46      	ldr	r2, [pc, #280]	; (2b084 <nrf_cloud_fota_mqtt_evt_handler+0x31c>)
   2af6c:	f00e fbaf 	bl	396ce <log_string_sync>
   2af70:	f8d8 0010 	ldr.w	r0, [r8, #16]
   2af74:	f00e fbbe 	bl	396f4 <z_log_strdup>
   2af78:	9003      	str	r0, [sp, #12]
   2af7a:	f8d8 0014 	ldr.w	r0, [r8, #20]
   2af7e:	f00e fbb9 	bl	396f4 <z_log_strdup>
	LOG_DBG("File: %s/%s",
   2af82:	494a      	ldr	r1, [pc, #296]	; (2b0ac <nrf_cloud_fota_mqtt_evt_handler+0x344>)
   2af84:	9000      	str	r0, [sp, #0]
   2af86:	9b03      	ldr	r3, [sp, #12]
   2af88:	4658      	mov	r0, fp
   2af8a:	4a3e      	ldr	r2, [pc, #248]	; (2b084 <nrf_cloud_fota_mqtt_evt_handler+0x31c>)
   2af8c:	f00e fb9f 	bl	396ce <log_string_sync>
	if (ret == 0 && strcmp(last_job, job_info->id) == 0) {
   2af90:	f8d8 100c 	ldr.w	r1, [r8, #12]
   2af94:	4846      	ldr	r0, [pc, #280]	; (2b0b0 <nrf_cloud_fota_mqtt_evt_handler+0x348>)
   2af96:	f7f2 f957 	bl	1d248 <strcmp>
   2af9a:	b128      	cbz	r0, 2afa8 <nrf_cloud_fota_mqtt_evt_handler+0x240>
	bool skip = false;
   2af9c:	46a0      	mov	r8, r4
		nrf_cloud_free(payload);
   2af9e:	4648      	mov	r0, r9
   2afa0:	f012 ffa0 	bl	3dee4 <k_free>
   2afa4:	46b1      	mov	r9, r6
   2afa6:	e725      	b.n	2adf4 <nrf_cloud_fota_mqtt_evt_handler+0x8c>
   2afa8:	4841      	ldr	r0, [pc, #260]	; (2b0b0 <nrf_cloud_fota_mqtt_evt_handler+0x348>)
   2afaa:	f00e fba3 	bl	396f4 <z_log_strdup>
		LOG_INF("Job %s already completed... skipping",
   2afae:	f045 0803 	orr.w	r8, r5, #3
   2afb2:	4602      	mov	r2, r0
   2afb4:	493f      	ldr	r1, [pc, #252]	; (2b0b4 <nrf_cloud_fota_mqtt_evt_handler+0x34c>)
   2afb6:	4640      	mov	r0, r8
   2afb8:	f00e fb89 	bl	396ce <log_string_sync>
   2afbc:	e752      	b.n	2ae64 <nrf_cloud_fota_mqtt_evt_handler+0xfc>
		int ack_res = mqtt_publish_qos1_ack(client_mqtt, &ack);
   2afbe:	4b2c      	ldr	r3, [pc, #176]	; (2b070 <nrf_cloud_fota_mqtt_evt_handler+0x308>)
   2afc0:	a905      	add	r1, sp, #20
   2afc2:	6818      	ldr	r0, [r3, #0]
   2afc4:	f00f ffbb 	bl	3af3e <mqtt_publish_qos1_ack>
		if (ack_res) {
   2afc8:	4606      	mov	r6, r0
   2afca:	2800      	cmp	r0, #0
   2afcc:	f43f af1c 	beq.w	2ae08 <nrf_cloud_fota_mqtt_evt_handler+0xa0>
			LOG_ERR("MQTT ACK failed: %d", ack_res);
   2afd0:	4602      	mov	r2, r0
   2afd2:	4939      	ldr	r1, [pc, #228]	; (2b0b8 <nrf_cloud_fota_mqtt_evt_handler+0x350>)
   2afd4:	f045 0001 	orr.w	r0, r5, #1
   2afd8:	f00e fb79 	bl	396ce <log_string_sync>
			if (!ret) {
   2afdc:	2c00      	cmp	r4, #0
   2afde:	bf08      	it	eq
   2afe0:	4634      	moveq	r4, r6
   2afe2:	e711      	b.n	2ae08 <nrf_cloud_fota_mqtt_evt_handler+0xa0>
	switch (job->info.type) {
   2afe4:	2a01      	cmp	r2, #1
		current_fota.parsed_payload = payload_array;
   2afe6:	f8c3 9000 	str.w	r9, [r3]
	switch (job->info.type) {
   2afea:	d015      	beq.n	2b018 <nrf_cloud_fota_mqtt_evt_handler+0x2b0>
   2afec:	f012 0ffd 	tst.w	r2, #253	; 0xfd
   2aff0:	d010      	beq.n	2b014 <nrf_cloud_fota_mqtt_evt_handler+0x2ac>
		LOG_ERR("Unhandled FOTA type: %d", job->info.type);
   2aff2:	4932      	ldr	r1, [pc, #200]	; (2b0bc <nrf_cloud_fota_mqtt_evt_handler+0x354>)
   2aff4:	f045 0001 	orr.w	r0, r5, #1
   2aff8:	f00e fb69 	bl	396ce <log_string_sync>
		return -EFTYPE;
   2affc:	f06f 044e 	mvn.w	r4, #78	; 0x4e
		(void)send_job_update(&current_fota);
   2b000:	481a      	ldr	r0, [pc, #104]	; (2b06c <nrf_cloud_fota_mqtt_evt_handler+0x304>)
   2b002:	f7ff fb65 	bl	2a6d0 <send_job_update>
		if (ret) {
   2b006:	2c00      	cmp	r4, #0
   2b008:	f43f af0d 	beq.w	2ae26 <nrf_cloud_fota_mqtt_evt_handler+0xbe>
			cleanup_job(&current_fota);
   2b00c:	f7ff fb30 	bl	2a670 <cleanup_job.constprop.0>
	return 0;
   2b010:	2400      	movs	r4, #0
   2b012:	e708      	b.n	2ae26 <nrf_cloud_fota_mqtt_evt_handler+0xbe>
		img_type = DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2b014:	f04f 0a01 	mov.w	sl, #1
	ret = fota_download_start_with_image_type(job->info.host,
   2b018:	f240 63a4 	movw	r3, #1700	; 0x6a4
   2b01c:	f8cd a004 	str.w	sl, [sp, #4]
   2b020:	9300      	str	r3, [sp, #0]
   2b022:	4a27      	ldr	r2, [pc, #156]	; (2b0c0 <nrf_cloud_fota_mqtt_evt_handler+0x358>)
   2b024:	2300      	movs	r3, #0
   2b026:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   2b02a:	f001 f965 	bl	2c2f8 <fota_download_start_with_image_type>
	if (ret) {
   2b02e:	4604      	mov	r4, r0
   2b030:	2800      	cmp	r0, #0
   2b032:	d049      	beq.n	2b0c8 <nrf_cloud_fota_mqtt_evt_handler+0x360>
		LOG_ERR("Failed to start FOTA download: %d", ret);
   2b034:	4602      	mov	r2, r0
   2b036:	4923      	ldr	r1, [pc, #140]	; (2b0c4 <nrf_cloud_fota_mqtt_evt_handler+0x35c>)
   2b038:	f045 0001 	orr.w	r0, r5, #1
   2b03c:	f00e fb47 	bl	396ce <log_string_sync>
		job->status = NRF_CLOUD_FOTA_FAILED;
   2b040:	2002      	movs	r0, #2
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   2b042:	2301      	movs	r3, #1
		job->status = NRF_CLOUD_FOTA_FAILED;
   2b044:	7130      	strb	r0, [r6, #4]
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   2b046:	7733      	strb	r3, [r6, #28]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2b048:	f7ff faf0 	bl	2a62c <send_event.constprop.0>
   2b04c:	e7d8      	b.n	2b000 <nrf_cloud_fota_mqtt_evt_handler+0x298>
   2b04e:	bf00      	nop
   2b050:	20014830 	.word	0x20014830
   2b054:	0003f5a4 	.word	0x0003f5a4
   2b058:	0003f694 	.word	0x0003f694
   2b05c:	00043f15 	.word	0x00043f15
   2b060:	00043286 	.word	0x00043286
   2b064:	00043c11 	.word	0x00043c11
   2b068:	00043d47 	.word	0x00043d47
   2b06c:	2001837c 	.word	0x2001837c
   2b070:	20018378 	.word	0x20018378
   2b074:	00043c33 	.word	0x00043c33
   2b078:	00043c52 	.word	0x00043c52
   2b07c:	00043c6e 	.word	0x00043c6e
   2b080:	20018384 	.word	0x20018384
   2b084:	00043ef2 	.word	0x00043ef2
   2b088:	00043c81 	.word	0x00043c81
   2b08c:	20018388 	.word	0x20018388
   2b090:	00043c94 	.word	0x00043c94
   2b094:	2001838c 	.word	0x2001838c
   2b098:	20018390 	.word	0x20018390
   2b09c:	20018394 	.word	0x20018394
   2b0a0:	00043cab 	.word	0x00043cab
   2b0a4:	00043cd9 	.word	0x00043cd9
   2b0a8:	00043cef 	.word	0x00043cef
   2b0ac:	00043d12 	.word	0x00043d12
   2b0b0:	2001d5ae 	.word	0x2001d5ae
   2b0b4:	00043d22 	.word	0x00043d22
   2b0b8:	00043d5b 	.word	0x00043d5b
   2b0bc:	00043d6f 	.word	0x00043d6f
   2b0c0:	01010001 	.word	0x01010001
   2b0c4:	00043d87 	.word	0x00043d87
		LOG_INF("Downloading update");
   2b0c8:	f045 0003 	orr.w	r0, r5, #3
   2b0cc:	492f      	ldr	r1, [pc, #188]	; (2b18c <__kernel_ram_size+0x4c>)
   2b0ce:	f00e fafe 	bl	396ce <log_string_sync>
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   2b0d2:	2307      	movs	r3, #7
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2b0d4:	4620      	mov	r0, r4
		job->sent_dl_progress = 0;
   2b0d6:	e9c6 4408 	strd	r4, r4, [r6, #32]
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   2b0da:	7133      	strb	r3, [r6, #4]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2b0dc:	e7b4      	b.n	2b048 <nrf_cloud_fota_mqtt_evt_handler+0x2e0>
		if (evt->param.suback.message_id !=
   2b0de:	f242 233e 	movw	r3, #8766	; 0x223e
   2b0e2:	88ba      	ldrh	r2, [r7, #4]
   2b0e4:	429a      	cmp	r2, r3
   2b0e6:	d127      	bne.n	2b138 <nrf_cloud_fota_mqtt_evt_handler+0x3d0>
   2b0e8:	4b29      	ldr	r3, [pc, #164]	; (2b190 <__kernel_ram_size+0x50>)
   2b0ea:	482a      	ldr	r0, [pc, #168]	; (2b194 <__kernel_ram_size+0x54>)
		LOG_DBG("MQTT_EVT_SUBACK");
   2b0ec:	4a2a      	ldr	r2, [pc, #168]	; (2b198 <__kernel_ram_size+0x58>)
   2b0ee:	1ac0      	subs	r0, r0, r3
   2b0f0:	08c0      	lsrs	r0, r0, #3
   2b0f2:	0180      	lsls	r0, r0, #6
   2b0f4:	4929      	ldr	r1, [pc, #164]	; (2b19c <__kernel_ram_size+0x5c>)
   2b0f6:	f040 0004 	orr.w	r0, r0, #4
   2b0fa:	f00e fae8 	bl	396ce <log_string_sync>
		nrf_cloud_fota_update_check();
   2b0fe:	f7ff fe0b 	bl	2ad18 <nrf_cloud_fota_update_check>
		break;
   2b102:	e785      	b.n	2b010 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>
		if (evt->param.unsuback.message_id !=
   2b104:	f242 233e 	movw	r3, #8766	; 0x223e
   2b108:	88ba      	ldrh	r2, [r7, #4]
   2b10a:	429a      	cmp	r2, r3
   2b10c:	d114      	bne.n	2b138 <nrf_cloud_fota_mqtt_evt_handler+0x3d0>
   2b10e:	4b20      	ldr	r3, [pc, #128]	; (2b190 <__kernel_ram_size+0x50>)
   2b110:	4820      	ldr	r0, [pc, #128]	; (2b194 <__kernel_ram_size+0x54>)
		LOG_DBG("MQTT_EVT_UNSUBACK");
   2b112:	4a21      	ldr	r2, [pc, #132]	; (2b198 <__kernel_ram_size+0x58>)
   2b114:	1ac0      	subs	r0, r0, r3
   2b116:	08c0      	lsrs	r0, r0, #3
   2b118:	0180      	lsls	r0, r0, #6
   2b11a:	4921      	ldr	r1, [pc, #132]	; (2b1a0 <__kernel_ram_size+0x60>)
   2b11c:	f040 0004 	orr.w	r0, r0, #4
   2b120:	f00e fad5 	bl	396ce <log_string_sync>
   2b124:	e774      	b.n	2b010 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>
		switch (evt->param.puback.message_id) {
   2b126:	88bb      	ldrh	r3, [r7, #4]
   2b128:	f5b3 5f09 	cmp.w	r3, #8768	; 0x2240
   2b12c:	d00e      	beq.n	2b14c <__kernel_ram_size+0xc>
   2b12e:	d805      	bhi.n	2b13c <nrf_cloud_fota_mqtt_evt_handler+0x3d4>
   2b130:	f242 223f 	movw	r2, #8767	; 0x223f
   2b134:	4293      	cmp	r3, r2
   2b136:	d007      	beq.n	2b148 <__kernel_ram_size+0x8>
   2b138:	2401      	movs	r4, #1
   2b13a:	e674      	b.n	2ae26 <nrf_cloud_fota_mqtt_evt_handler+0xbe>
   2b13c:	f503 425d 	add.w	r2, r3, #56576	; 0xdd00
   2b140:	32bf      	adds	r2, #191	; 0xbf
   2b142:	b292      	uxth	r2, r2
   2b144:	2a01      	cmp	r2, #1
   2b146:	d8f7      	bhi.n	2b138 <nrf_cloud_fota_mqtt_evt_handler+0x3d0>
		bool do_update_check = false;
   2b148:	2400      	movs	r4, #0
   2b14a:	e000      	b.n	2b14e <__kernel_ram_size+0xe>
   2b14c:	2401      	movs	r4, #1
   2b14e:	4a10      	ldr	r2, [pc, #64]	; (2b190 <__kernel_ram_size+0x50>)
   2b150:	4810      	ldr	r0, [pc, #64]	; (2b194 <__kernel_ram_size+0x54>)
		LOG_DBG("MQTT_EVT_PUBACK: msg id %d",
   2b152:	4914      	ldr	r1, [pc, #80]	; (2b1a4 <__kernel_ram_size+0x64>)
   2b154:	1a80      	subs	r0, r0, r2
   2b156:	08c0      	lsrs	r0, r0, #3
   2b158:	0180      	lsls	r0, r0, #6
   2b15a:	4a0f      	ldr	r2, [pc, #60]	; (2b198 <__kernel_ram_size+0x58>)
   2b15c:	f040 0004 	orr.w	r0, r0, #4
   2b160:	f00e fab5 	bl	396ce <log_string_sync>
		if (!do_update_check) {
   2b164:	2c00      	cmp	r4, #0
   2b166:	f43f ae5e 	beq.w	2ae26 <nrf_cloud_fota_mqtt_evt_handler+0xbe>
		switch (saved_job.validate) {
   2b16a:	4b0f      	ldr	r3, [pc, #60]	; (2b1a8 <__kernel_ram_size+0x68>)
   2b16c:	7818      	ldrb	r0, [r3, #0]
   2b16e:	2801      	cmp	r0, #1
   2b170:	d009      	beq.n	2b186 <__kernel_ram_size+0x46>
   2b172:	3802      	subs	r0, #2
   2b174:	2802      	cmp	r0, #2
   2b176:	f63f af4b 	bhi.w	2b010 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>
			save_validate_status(saved_job.id, saved_job.type,
   2b17a:	2205      	movs	r2, #5
   2b17c:	7859      	ldrb	r1, [r3, #1]
   2b17e:	1c98      	adds	r0, r3, #2
   2b180:	f7ff f960 	bl	2a444 <save_validate_status>
			break;
   2b184:	e744      	b.n	2b010 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>
			send_event(NRF_CLOUD_FOTA_EVT_DONE, &current_fota);
   2b186:	f7ff fa51 	bl	2a62c <send_event.constprop.0>
			break;
   2b18a:	e741      	b.n	2b010 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>
   2b18c:	00043da9 	.word	0x00043da9
   2b190:	0003f5a4 	.word	0x0003f5a4
   2b194:	0003f694 	.word	0x0003f694
   2b198:	00043f2d 	.word	0x00043f2d
   2b19c:	00043dbc 	.word	0x00043dbc
   2b1a0:	00043335 	.word	0x00043335
   2b1a4:	00043dd0 	.word	0x00043dd0
   2b1a8:	20014a49 	.word	0x20014a49

0002b1ac <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   2b1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2b1ae:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   2b1b2:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2b1b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2b1b8:	d90e      	bls.n	2b1d8 <fragment_evt_send+0x2c>
   2b1ba:	490f      	ldr	r1, [pc, #60]	; (2b1f8 <fragment_evt_send+0x4c>)
   2b1bc:	f240 1391 	movw	r3, #401	; 0x191
   2b1c0:	4a0e      	ldr	r2, [pc, #56]	; (2b1fc <fragment_evt_send+0x50>)
   2b1c2:	480f      	ldr	r0, [pc, #60]	; (2b200 <fragment_evt_send+0x54>)
   2b1c4:	f00d ffb5 	bl	39132 <printk>
   2b1c8:	480e      	ldr	r0, [pc, #56]	; (2b204 <fragment_evt_send+0x58>)
   2b1ca:	f00d ffb2 	bl	39132 <printk>
   2b1ce:	f240 1191 	movw	r1, #401	; 0x191
   2b1d2:	480a      	ldr	r0, [pc, #40]	; (2b1fc <fragment_evt_send+0x50>)
   2b1d4:	f00e fa4c 	bl	39670 <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   2b1d8:	2300      	movs	r3, #0
   2b1da:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   2b1de:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   2b1e0:	9302      	str	r3, [sp, #8]
   2b1e2:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
			.len = client->offset,
		}
	};

	return client->callback(&evt);
   2b1e6:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   2b1e8:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   2b1ea:	f641 1310 	movw	r3, #6416	; 0x1910
   2b1ee:	58e3      	ldr	r3, [r4, r3]
   2b1f0:	4798      	blx	r3
}
   2b1f2:	b004      	add	sp, #16
   2b1f4:	bd10      	pop	{r4, pc}
   2b1f6:	bf00      	nop
   2b1f8:	00043f92 	.word	0x00043f92
   2b1fc:	00043f4d 	.word	0x00043f4d
   2b200:	0004033e 	.word	0x0004033e
   2b204:	00043fa9 	.word	0x00043fa9

0002b208 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   2b208:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   2b20a:	4604      	mov	r4, r0
{
   2b20c:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   2b20e:	b310      	cbz	r0, 2b256 <download_client_init+0x4e>
   2b210:	b309      	cbz	r1, 2b256 <download_client_init+0x4e>
		return -EINVAL;
	}

	client->fd = -1;
   2b212:	f04f 33ff 	mov.w	r3, #4294967295
   2b216:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2b218:	f641 1310 	movw	r3, #6416	; 0x1910
   2b21c:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2b21e:	2200      	movs	r2, #0
   2b220:	2300      	movs	r3, #0
   2b222:	2500      	movs	r5, #0
   2b224:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b228:	230e      	movs	r3, #14
   2b22a:	9000      	str	r0, [sp, #0]
   2b22c:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2b230:	f500 6111 	add.w	r1, r0, #2320	; 0x910
   2b234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2b238:	e9cd 5501 	strd	r5, r5, [sp, #4]
   2b23c:	4b07      	ldr	r3, [pc, #28]	; (2b25c <download_client_init+0x54>)
   2b23e:	f600 0048 	addw	r0, r0, #2120	; 0x848
   2b242:	f008 fc67 	bl	33b14 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   2b246:	f8c4 0840 	str.w	r0, [r4, #2112]	; 0x840
	return z_impl_k_thread_name_set(thread, str);
   2b24a:	4905      	ldr	r1, [pc, #20]	; (2b260 <download_client_init+0x58>)
   2b24c:	f012 fd6f 	bl	3dd2e <z_impl_k_thread_name_set>
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	k_thread_name_set(client->tid, "download_client");

	return 0;
   2b250:	4628      	mov	r0, r5
}
   2b252:	b009      	add	sp, #36	; 0x24
   2b254:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2b256:	f06f 0015 	mvn.w	r0, #21
   2b25a:	e7fa      	b.n	2b252 <download_client_init+0x4a>
   2b25c:	0002b861 	.word	0x0002b861
   2b260:	00043fbc 	.word	0x00043fbc

0002b264 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   2b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b268:	4688      	mov	r8, r1
   2b26a:	4617      	mov	r7, r2
	int err;
	struct sockaddr sa;

	if (client == NULL || host == NULL || config == NULL) {
   2b26c:	4604      	mov	r4, r0
{
   2b26e:	b0c7      	sub	sp, #284	; 0x11c
	if (client == NULL || host == NULL || config == NULL) {
   2b270:	2800      	cmp	r0, #0
   2b272:	f000 828d 	beq.w	2b790 <download_client_connect+0x52c>
   2b276:	2900      	cmp	r1, #0
   2b278:	f000 828a 	beq.w	2b790 <download_client_connect+0x52c>
   2b27c:	2a00      	cmp	r2, #0
   2b27e:	f000 8287 	beq.w	2b790 <download_client_connect+0x52c>
		return -EINVAL;
	}

	if (client->fd != -1) {
   2b282:	6803      	ldr	r3, [r0, #0]
   2b284:	3301      	adds	r3, #1
   2b286:	f040 8286 	bne.w	2b796 <download_client_connect+0x532>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   2b28a:	68d3      	ldr	r3, [r2, #12]
   2b28c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2b290:	d90f      	bls.n	2b2b2 <download_client_connect+0x4e>
   2b292:	4bad      	ldr	r3, [pc, #692]	; (2b548 <download_client_connect+0x2e4>)
   2b294:	48ad      	ldr	r0, [pc, #692]	; (2b54c <download_client_connect+0x2e8>)
		LOG_ERR("The configured fragment size is larger than buffer");
   2b296:	49ae      	ldr	r1, [pc, #696]	; (2b550 <download_client_connect+0x2ec>)
   2b298:	1ac0      	subs	r0, r0, r3
   2b29a:	08c0      	lsrs	r0, r0, #3
   2b29c:	0180      	lsls	r0, r0, #6
   2b29e:	f040 0001 	orr.w	r0, r0, #1
   2b2a2:	f00e fa14 	bl	396ce <log_string_sync>
		return -E2BIG;
   2b2a6:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   2b2aa:	4628      	mov	r0, r5
   2b2ac:	b047      	add	sp, #284	; 0x11c
   2b2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct addrinfo hints = {
   2b2b2:	2100      	movs	r1, #0
		err = host_lookup(host, AF_INET, config->pdn_id, config->apn, &sa);
   2b2b4:	f892 9008 	ldrb.w	r9, [r2, #8]
   2b2b8:	f8d2 a004 	ldr.w	sl, [r2, #4]
	struct addrinfo hints = {
   2b2bc:	a81e      	add	r0, sp, #120	; 0x78
   2b2be:	2250      	movs	r2, #80	; 0x50
   2b2c0:	f012 fe73 	bl	3dfaa <memset>
   2b2c4:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   2b2c6:	2240      	movs	r2, #64	; 0x40
   2b2c8:	4640      	mov	r0, r8
   2b2ca:	a90e      	add	r1, sp, #56	; 0x38
	struct addrinfo hints = {
   2b2cc:	9320      	str	r3, [sp, #128]	; 0x80
	err = url_parse_host(host, hostname, sizeof(hostname));
   2b2ce:	f000 fc5b 	bl	2bb88 <url_parse_host>
	if (err) {
   2b2d2:	4605      	mov	r5, r0
   2b2d4:	2800      	cmp	r0, #0
   2b2d6:	d1e8      	bne.n	2b2aa <download_client_connect+0x46>
	if (pdn_id) {
   2b2d8:	ae32      	add	r6, sp, #200	; 0xc8
   2b2da:	f1b9 0f00 	cmp.w	r9, #0
   2b2de:	d023      	beq.n	2b328 <download_client_connect+0xc4>
		hints.ai_flags = AI_PDNSERV;
   2b2e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   2b2e4:	2104      	movs	r1, #4
   2b2e6:	4a9b      	ldr	r2, [pc, #620]	; (2b554 <download_client_connect+0x2f0>)
		hints.ai_flags = AI_PDNSERV;
   2b2e8:	931f      	str	r3, [sp, #124]	; 0x7c
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   2b2ea:	a807      	add	r0, sp, #28
   2b2ec:	464b      	mov	r3, r9
   2b2ee:	f00c fbb5 	bl	37a5c <sniprintf>
	return zsock_getaddrinfo(host, service, hints, res);
   2b2f2:	4633      	mov	r3, r6
   2b2f4:	aa1e      	add	r2, sp, #120	; 0x78
   2b2f6:	a907      	add	r1, sp, #28
   2b2f8:	a80e      	add	r0, sp, #56	; 0x38
   2b2fa:	f00e fd40 	bl	39d7e <zsock_getaddrinfo>
   2b2fe:	4605      	mov	r5, r0
	if (err) {
   2b300:	b1d0      	cbz	r0, 2b338 <download_client_connect+0xd4>
   2b302:	4b91      	ldr	r3, [pc, #580]	; (2b548 <download_client_connect+0x2e4>)
   2b304:	4c91      	ldr	r4, [pc, #580]	; (2b54c <download_client_connect+0x2e8>)
   2b306:	a80e      	add	r0, sp, #56	; 0x38
   2b308:	1ae4      	subs	r4, r4, r3
   2b30a:	f00e f9f3 	bl	396f4 <z_log_strdup>
   2b30e:	08e4      	lsrs	r4, r4, #3
		LOG_WRN("Failed to resolve hostname %s on %s",
   2b310:	01a4      	lsls	r4, r4, #6
   2b312:	f044 0402 	orr.w	r4, r4, #2
   2b316:	4602      	mov	r2, r0
   2b318:	4b8f      	ldr	r3, [pc, #572]	; (2b558 <download_client_connect+0x2f4>)
   2b31a:	4620      	mov	r0, r4
   2b31c:	498f      	ldr	r1, [pc, #572]	; (2b55c <download_client_connect+0x2f8>)
   2b31e:	f00e f9d6 	bl	396ce <log_string_sync>
		return -EHOSTUNREACH;
   2b322:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2b326:	e7c0      	b.n	2b2aa <download_client_connect+0x46>
		if (apn) {
   2b328:	f1ba 0f00 	cmp.w	sl, #0
   2b32c:	d000      	beq.n	2b330 <download_client_connect+0xcc>
			hints.ai_next = &(struct addrinfo) {
   2b32e:	961e      	str	r6, [sp, #120]	; 0x78
   2b330:	4633      	mov	r3, r6
   2b332:	2100      	movs	r1, #0
   2b334:	aa1e      	add	r2, sp, #120	; 0x78
   2b336:	e7df      	b.n	2b2f8 <download_client_connect+0x94>
	*sa = *(ai->ai_addr);
   2b338:	f8dd e0c8 	ldr.w	lr, [sp, #200]	; 0xc8
   2b33c:	f10d 0c20 	add.w	ip, sp, #32
   2b340:	f8de 3018 	ldr.w	r3, [lr, #24]
   2b344:	f103 0918 	add.w	r9, r3, #24
   2b348:	4662      	mov	r2, ip
   2b34a:	6818      	ldr	r0, [r3, #0]
   2b34c:	6859      	ldr	r1, [r3, #4]
   2b34e:	3308      	adds	r3, #8
   2b350:	c203      	stmia	r2!, {r0, r1}
   2b352:	454b      	cmp	r3, r9
   2b354:	4694      	mov	ip, r2
   2b356:	d1f7      	bne.n	2b348 <download_client_connect+0xe4>
	zsock_freeaddrinfo(ai);
   2b358:	4670      	mov	r0, lr
   2b35a:	f00e fd12 	bl	39d82 <zsock_freeaddrinfo>
	client->config = *config;
   2b35e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2b360:	f604 0c18 	addw	ip, r4, #2072	; 0x818
   2b364:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2b368:	683b      	ldr	r3, [r7, #0]
	err = url_parse_proto(host, &dl->proto, &type);
   2b36a:	4640      	mov	r0, r8
	client->config = *config;
   2b36c:	f8cc 3000 	str.w	r3, [ip]
	err = url_parse_proto(host, &dl->proto, &type);
   2b370:	aa0e      	add	r2, sp, #56	; 0x38
	client->host = host;
   2b372:	f8c4 8810 	str.w	r8, [r4, #2064]	; 0x810
	err = url_parse_proto(host, &dl->proto, &type);
   2b376:	f604 012c 	addw	r1, r4, #2092	; 0x82c
   2b37a:	f000 fbcf 	bl	2bb1c <url_parse_proto>
	if (err) {
   2b37e:	b150      	cbz	r0, 2b396 <download_client_connect+0x132>
		type = SOCK_STREAM;
   2b380:	2301      	movs	r3, #1
   2b382:	930e      	str	r3, [sp, #56]	; 0x38
		if (dl->config.sec_tag != -1) {
   2b384:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   2b388:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   2b38a:	bf14      	ite	ne
   2b38c:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   2b390:	2306      	moveq	r3, #6
   2b392:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   2b396:	f8d4 282c 	ldr.w	r2, [r4, #2092]	; 0x82c
   2b39a:	f422 7380 	bic.w	r3, r2, #256	; 0x100
   2b39e:	2b11      	cmp	r3, #17
   2b3a0:	f000 81f0 	beq.w	2b784 <download_client_connect+0x520>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   2b3a4:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
   2b3a8:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   2b3ac:	d113      	bne.n	2b3d6 <download_client_connect+0x172>
		if (dl->config.sec_tag == -1) {
   2b3ae:	3301      	adds	r3, #1
   2b3b0:	d11d      	bne.n	2b3ee <download_client_connect+0x18a>
   2b3b2:	4866      	ldr	r0, [pc, #408]	; (2b54c <download_client_connect+0x2e8>)
   2b3b4:	4b64      	ldr	r3, [pc, #400]	; (2b548 <download_client_connect+0x2e4>)
			LOG_WRN("No security tag provided for TLS/DTLS");
   2b3b6:	496a      	ldr	r1, [pc, #424]	; (2b560 <download_client_connect+0x2fc>)
   2b3b8:	1ac0      	subs	r0, r0, r3
   2b3ba:	08c0      	lsrs	r0, r0, #3
   2b3bc:	0180      	lsls	r0, r0, #6
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   2b3be:	f040 0002 	orr.w	r0, r0, #2
   2b3c2:	f00e f984 	bl	396ce <log_string_sync>
		return -EINVAL;
   2b3c6:	f06f 0b15 	mvn.w	fp, #21
	if (client->fd < 0) {
   2b3ca:	6823      	ldr	r3, [r4, #0]
		return err;
   2b3cc:	ea35 0523 	bics.w	r5, r5, r3, asr #32
   2b3d0:	bf28      	it	cs
   2b3d2:	465d      	movcs	r5, fp
   2b3d4:	e769      	b.n	2b2aa <download_client_connect+0x46>
	if (dl->config.sec_tag == -1 && dl->config.set_tls_hostname) {
   2b3d6:	3301      	adds	r3, #1
   2b3d8:	d109      	bne.n	2b3ee <download_client_connect+0x18a>
   2b3da:	f894 3828 	ldrb.w	r3, [r4, #2088]	; 0x828
   2b3de:	b133      	cbz	r3, 2b3ee <download_client_connect+0x18a>
   2b3e0:	485a      	ldr	r0, [pc, #360]	; (2b54c <download_client_connect+0x2e8>)
   2b3e2:	4b59      	ldr	r3, [pc, #356]	; (2b548 <download_client_connect+0x2e4>)
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   2b3e4:	495f      	ldr	r1, [pc, #380]	; (2b564 <download_client_connect+0x300>)
   2b3e6:	1ac0      	subs	r0, r0, r3
   2b3e8:	08c0      	lsrs	r0, r0, #3
   2b3ea:	0180      	lsls	r0, r0, #6
   2b3ec:	e7e7      	b.n	2b3be <download_client_connect+0x15a>
	err = url_parse_port(host, &port);
   2b3ee:	4640      	mov	r0, r8
   2b3f0:	a907      	add	r1, sp, #28
   2b3f2:	f000 fc01 	bl	2bbf8 <url_parse_port>
	if (err) {
   2b3f6:	b148      	cbz	r0, 2b40c <download_client_connect+0x1a8>
		switch (dl->proto) {
   2b3f8:	f8d4 382c 	ldr.w	r3, [r4, #2092]	; 0x82c
   2b3fc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2b400:	d03b      	beq.n	2b47a <download_client_connect+0x216>
   2b402:	dc33      	bgt.n	2b46c <download_client_connect+0x208>
   2b404:	2b06      	cmp	r3, #6
   2b406:	d03d      	beq.n	2b484 <download_client_connect+0x220>
   2b408:	2b11      	cmp	r3, #17
   2b40a:	d03d      	beq.n	2b488 <download_client_connect+0x224>
	switch (sa->sa_family) {
   2b40c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   2b410:	2801      	cmp	r0, #1
   2b412:	d03c      	beq.n	2b48e <download_client_connect+0x22a>
   2b414:	2802      	cmp	r0, #2
   2b416:	f040 81b8 	bne.w	2b78a <download_client_connect+0x526>
		SIN6(sa)->sin6_port = htons(port);
   2b41a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2b41e:	0213      	lsls	r3, r2, #8
   2b420:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2b424:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		addrlen = sizeof(struct sockaddr_in6);
   2b428:	2318      	movs	r3, #24
	*fd = socket(sa->sa_family, type, dl->proto);
   2b42a:	990e      	ldr	r1, [sp, #56]	; 0x38
   2b42c:	f8d4 282c 	ldr.w	r2, [r4, #2092]	; 0x82c
		addrlen = sizeof(struct sockaddr_in);
   2b430:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_socket(family, type, proto);
   2b432:	f7f6 f943 	bl	216bc <z_impl_zsock_socket>
   2b436:	4b45      	ldr	r3, [pc, #276]	; (2b54c <download_client_connect+0x2e8>)
   2b438:	4a43      	ldr	r2, [pc, #268]	; (2b548 <download_client_connect+0x2e4>)
	if (*fd < 0) {
   2b43a:	2800      	cmp	r0, #0
   2b43c:	eba3 0902 	sub.w	r9, r3, r2
   2b440:	ea4f 03d9 	mov.w	r3, r9, lsr #3
	*fd = socket(sa->sa_family, type, dl->proto);
   2b444:	6020      	str	r0, [r4, #0]
	if (*fd < 0) {
   2b446:	9303      	str	r3, [sp, #12]
   2b448:	ea4f 1783 	mov.w	r7, r3, lsl #6
   2b44c:	da28      	bge.n	2b4a0 <download_client_connect+0x23c>
		LOG_ERR("Failed to create socket, err %d", errno);
   2b44e:	f00f f8aa 	bl	3a5a6 <__errno>
   2b452:	f047 0701 	orr.w	r7, r7, #1
   2b456:	6802      	ldr	r2, [r0, #0]
   2b458:	4943      	ldr	r1, [pc, #268]	; (2b568 <download_client_connect+0x304>)
   2b45a:	4638      	mov	r0, r7
   2b45c:	f00e f937 	bl	396ce <log_string_sync>
		return -errno;
   2b460:	f00f f8a1 	bl	3a5a6 <__errno>
   2b464:	6800      	ldr	r0, [r0, #0]
   2b466:	f1c0 0b00 	rsb	fp, r0, #0
   2b46a:	e7ae      	b.n	2b3ca <download_client_connect+0x166>
		switch (dl->proto) {
   2b46c:	f240 1211 	movw	r2, #273	; 0x111
   2b470:	4293      	cmp	r3, r2
   2b472:	d1cb      	bne.n	2b40c <download_client_connect+0x1a8>
			port = 5684;
   2b474:	f241 6334 	movw	r3, #5684	; 0x1634
   2b478:	e001      	b.n	2b47e <download_client_connect+0x21a>
			port = 443;
   2b47a:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   2b47e:	f8ad 301c 	strh.w	r3, [sp, #28]
			break;
   2b482:	e7c3      	b.n	2b40c <download_client_connect+0x1a8>
			port = 80;
   2b484:	2350      	movs	r3, #80	; 0x50
   2b486:	e7fa      	b.n	2b47e <download_client_connect+0x21a>
			port = 5683;
   2b488:	f241 6333 	movw	r3, #5683	; 0x1633
   2b48c:	e7f7      	b.n	2b47e <download_client_connect+0x21a>
		SIN(sa)->sin_port = htons(port);
   2b48e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2b492:	0213      	lsls	r3, r2, #8
   2b494:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   2b498:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		addrlen = sizeof(struct sockaddr_in);
   2b49c:	2308      	movs	r3, #8
   2b49e:	e7c4      	b.n	2b42a <download_client_connect+0x1c6>
	if (dl->config.apn != NULL && strlen(dl->config.apn)) {
   2b4a0:	f8d4 081c 	ldr.w	r0, [r4, #2076]	; 0x81c
   2b4a4:	2800      	cmp	r0, #0
   2b4a6:	d06d      	beq.n	2b584 <download_client_connect+0x320>
   2b4a8:	f7f1 fed8 	bl	1d25c <strlen>
   2b4ac:	2800      	cmp	r0, #0
   2b4ae:	d069      	beq.n	2b584 <download_client_connect+0x320>
		err = socket_apn_set(*fd, dl->config.apn);
   2b4b0:	f8d4 981c 	ldr.w	r9, [r4, #2076]	; 0x81c
   2b4b4:	f8d4 b000 	ldr.w	fp, [r4]
	__ASSERT_NO_MSG(apn);
   2b4b8:	f1b9 0f00 	cmp.w	r9, #0
   2b4bc:	d109      	bne.n	2b4d2 <download_client_connect+0x26e>
   2b4be:	492b      	ldr	r1, [pc, #172]	; (2b56c <download_client_connect+0x308>)
   2b4c0:	482b      	ldr	r0, [pc, #172]	; (2b570 <download_client_connect+0x30c>)
   2b4c2:	23a7      	movs	r3, #167	; 0xa7
   2b4c4:	4a2b      	ldr	r2, [pc, #172]	; (2b574 <download_client_connect+0x310>)
   2b4c6:	f00d fe34 	bl	39132 <printk>
   2b4ca:	21a7      	movs	r1, #167	; 0xa7
   2b4cc:	4829      	ldr	r0, [pc, #164]	; (2b574 <download_client_connect+0x310>)
   2b4ce:	f00e f8cf 	bl	39670 <assert_post_action>
	len = strlen(apn);
   2b4d2:	4648      	mov	r0, r9
   2b4d4:	f7f1 fec2 	bl	1d25c <strlen>
	if (len >= IFNAMSIZ) {
   2b4d8:	282f      	cmp	r0, #47	; 0x2f
	len = strlen(apn);
   2b4da:	4682      	mov	sl, r0
	if (len >= IFNAMSIZ) {
   2b4dc:	d90d      	bls.n	2b4fa <download_client_connect+0x296>
		LOG_ERR("Access point name is too long.");
   2b4de:	4926      	ldr	r1, [pc, #152]	; (2b578 <download_client_connect+0x314>)
   2b4e0:	f047 0001 	orr.w	r0, r7, #1
   2b4e4:	f00e f8f3 	bl	396ce <log_string_sync>
		return -EINVAL;
   2b4e8:	f06f 0b15 	mvn.w	fp, #21
		close(*fd);
   2b4ec:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   2b4ee:	f00e fc5d 	bl	39dac <z_impl_zsock_close>
		*fd = -1;
   2b4f2:	f04f 33ff 	mov.w	r3, #4294967295
   2b4f6:	6023      	str	r3, [r4, #0]
   2b4f8:	e767      	b.n	2b3ca <download_client_connect+0x166>
	LOG_INF("Setting up APN: %s", log_strdup(apn));
   2b4fa:	f047 0303 	orr.w	r3, r7, #3
   2b4fe:	4648      	mov	r0, r9
   2b500:	9305      	str	r3, [sp, #20]
   2b502:	f00e f8f7 	bl	396f4 <z_log_strdup>
   2b506:	9b05      	ldr	r3, [sp, #20]
   2b508:	4602      	mov	r2, r0
   2b50a:	491c      	ldr	r1, [pc, #112]	; (2b57c <download_client_connect+0x318>)
   2b50c:	4618      	mov	r0, r3
   2b50e:	f00e f8de 	bl	396ce <log_string_sync>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2b512:	2219      	movs	r2, #25
   2b514:	464b      	mov	r3, r9
   2b516:	2101      	movs	r1, #1
   2b518:	4658      	mov	r0, fp
   2b51a:	f8cd a000 	str.w	sl, [sp]
   2b51e:	f00e fd45 	bl	39fac <z_impl_zsock_setsockopt>
	if (err) {
   2b522:	2800      	cmp	r0, #0
   2b524:	d05d      	beq.n	2b5e2 <download_client_connect+0x37e>
   2b526:	4648      	mov	r0, r9
   2b528:	f00e f8e4 	bl	396f4 <z_log_strdup>
   2b52c:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to bind socket to network \"%s\", err %d",
   2b52e:	f00f f83a 	bl	3a5a6 <__errno>
   2b532:	9a03      	ldr	r2, [sp, #12]
   2b534:	6803      	ldr	r3, [r0, #0]
   2b536:	4912      	ldr	r1, [pc, #72]	; (2b580 <download_client_connect+0x31c>)
   2b538:	f047 0701 	orr.w	r7, r7, #1
		LOG_ERR("Failed to bind socket to PDN ID %d, err %d",
   2b53c:	4638      	mov	r0, r7
   2b53e:	f00e f8c6 	bl	396ce <log_string_sync>
		return -ENETDOWN;
   2b542:	f06f 0b72 	mvn.w	fp, #114	; 0x72
   2b546:	e7d1      	b.n	2b4ec <download_client_connect+0x288>
   2b548:	0003f5a4 	.word	0x0003f5a4
   2b54c:	0003f614 	.word	0x0003f614
   2b550:	00043fcc 	.word	0x00043fcc
   2b554:	00043263 	.word	0x00043263
   2b558:	00043fff 	.word	0x00043fff
   2b55c:	00044004 	.word	0x00044004
   2b560:	00044028 	.word	0x00044028
   2b564:	0004404e 	.word	0x0004404e
   2b568:	00044082 	.word	0x00044082
   2b56c:	00042592 	.word	0x00042592
   2b570:	0004033e 	.word	0x0004033e
   2b574:	00043f4d 	.word	0x00043f4d
   2b578:	000440a2 	.word	0x000440a2
   2b57c:	000440c1 	.word	0x000440c1
   2b580:	000440d4 	.word	0x000440d4
	} else if (dl->config.pdn_id) {
   2b584:	f894 9820 	ldrb.w	r9, [r4, #2080]	; 0x820
   2b588:	f1b9 0f00 	cmp.w	r9, #0
   2b58c:	d029      	beq.n	2b5e2 <download_client_connect+0x37e>
	char buf[8] = {0};
   2b58e:	2300      	movs	r3, #0
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   2b590:	2108      	movs	r1, #8
	char buf[8] = {0};
   2b592:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   2b596:	4a81      	ldr	r2, [pc, #516]	; (2b79c <download_client_connect+0x538>)
   2b598:	464b      	mov	r3, r9
   2b59a:	4630      	mov	r0, r6
   2b59c:	f8d4 a000 	ldr.w	sl, [r4]
   2b5a0:	f00c fa5c 	bl	37a5c <sniprintf>
	LOG_INF("Binding to PDN ID: %s", log_strdup(buf));
   2b5a4:	9b03      	ldr	r3, [sp, #12]
   2b5a6:	4630      	mov	r0, r6
   2b5a8:	019f      	lsls	r7, r3, #6
   2b5aa:	f00e f8a3 	bl	396f4 <z_log_strdup>
   2b5ae:	f047 0b03 	orr.w	fp, r7, #3
   2b5b2:	4602      	mov	r2, r0
   2b5b4:	497a      	ldr	r1, [pc, #488]	; (2b7a0 <download_client_connect+0x53c>)
   2b5b6:	4658      	mov	r0, fp
   2b5b8:	f00e f889 	bl	396ce <log_string_sync>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &buf, strlen(buf));
   2b5bc:	4630      	mov	r0, r6
   2b5be:	f7f1 fe4d 	bl	1d25c <strlen>
   2b5c2:	2219      	movs	r2, #25
   2b5c4:	9000      	str	r0, [sp, #0]
   2b5c6:	4633      	mov	r3, r6
   2b5c8:	2101      	movs	r1, #1
   2b5ca:	4650      	mov	r0, sl
   2b5cc:	f00e fcee 	bl	39fac <z_impl_zsock_setsockopt>
	if (err) {
   2b5d0:	b138      	cbz	r0, 2b5e2 <download_client_connect+0x37e>
		LOG_ERR("Failed to bind socket to PDN ID %d, err %d",
   2b5d2:	f00e ffe8 	bl	3a5a6 <__errno>
   2b5d6:	f047 0701 	orr.w	r7, r7, #1
   2b5da:	464a      	mov	r2, r9
   2b5dc:	6803      	ldr	r3, [r0, #0]
   2b5de:	4971      	ldr	r1, [pc, #452]	; (2b7a4 <download_client_connect+0x540>)
   2b5e0:	e7ac      	b.n	2b53c <download_client_connect+0x2d8>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   2b5e2:	f8d4 382c 	ldr.w	r3, [r4, #2092]	; 0x82c
   2b5e6:	9a03      	ldr	r2, [sp, #12]
   2b5e8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2b5ec:	ea4f 1782 	mov.w	r7, r2, lsl #6
   2b5f0:	d003      	beq.n	2b5fa <download_client_connect+0x396>
   2b5f2:	f240 1211 	movw	r2, #273	; 0x111
   2b5f6:	4293      	cmp	r3, r2
   2b5f8:	d177      	bne.n	2b6ea <download_client_connect+0x486>
	     && (dl->config.sec_tag != -1)) {
   2b5fa:	f8d4 a818 	ldr.w	sl, [r4, #2072]	; 0x818
   2b5fe:	f1ba 3fff 	cmp.w	sl, #4294967295
   2b602:	d072      	beq.n	2b6ea <download_client_connect+0x486>
	verify = REQUIRED;
   2b604:	2302      	movs	r3, #2
   2b606:	f8d4 b000 	ldr.w	fp, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   2b60a:	f8cd a0c8 	str.w	sl, [sp, #200]	; 0xc8
	verify = REQUIRED;
   2b60e:	931e      	str	r3, [sp, #120]	; 0x78
   2b610:	2304      	movs	r3, #4
   2b612:	2205      	movs	r2, #5
   2b614:	9300      	str	r3, [sp, #0]
   2b616:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2b61a:	ab1e      	add	r3, sp, #120	; 0x78
   2b61c:	4658      	mov	r0, fp
   2b61e:	f00e fcc5 	bl	39fac <z_impl_zsock_setsockopt>
	if (err) {
   2b622:	9b03      	ldr	r3, [sp, #12]
   2b624:	ea4f 1983 	mov.w	r9, r3, lsl #6
   2b628:	b328      	cbz	r0, 2b676 <download_client_connect+0x412>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   2b62a:	f00e ffbc 	bl	3a5a6 <__errno>
   2b62e:	495e      	ldr	r1, [pc, #376]	; (2b7a8 <download_client_connect+0x544>)
   2b630:	6802      	ldr	r2, [r0, #0]
   2b632:	f049 0a01 	orr.w	sl, r9, #1
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   2b636:	4650      	mov	r0, sl
   2b638:	f00e f849 	bl	396ce <log_string_sync>
		return -errno;
   2b63c:	f00e ffb3 	bl	3a5a6 <__errno>
   2b640:	6800      	ldr	r0, [r0, #0]
   2b642:	f1c0 0b00 	rsb	fp, r0, #0
		if (err) {
   2b646:	f1bb 0f00 	cmp.w	fp, #0
   2b64a:	f47f af4f 	bne.w	2b4ec <download_client_connect+0x288>
		if (dl->config.set_tls_hostname) {
   2b64e:	f894 3828 	ldrb.w	r3, [r4, #2088]	; 0x828
   2b652:	2b00      	cmp	r3, #0
   2b654:	d049      	beq.n	2b6ea <download_client_connect+0x486>
	err = url_parse_host(hostname, parsed_host, sizeof(parsed_host));
   2b656:	2240      	movs	r2, #64	; 0x40
   2b658:	4631      	mov	r1, r6
   2b65a:	4640      	mov	r0, r8
   2b65c:	f8d4 a000 	ldr.w	sl, [r4]
   2b660:	f000 fa92 	bl	2bb88 <url_parse_host>
	if (err) {
   2b664:	4683      	mov	fp, r0
   2b666:	b1f0      	cbz	r0, 2b6a6 <download_client_connect+0x442>
		LOG_ERR("Failed to parse host, err %d", err);
   2b668:	4602      	mov	r2, r0
   2b66a:	4950      	ldr	r1, [pc, #320]	; (2b7ac <download_client_connect+0x548>)
   2b66c:	f049 0001 	orr.w	r0, r9, #1
   2b670:	f00e f82d 	bl	396ce <log_string_sync>
			if (err) {
   2b674:	e73a      	b.n	2b4ec <download_client_connect+0x288>
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   2b676:	4652      	mov	r2, sl
   2b678:	494d      	ldr	r1, [pc, #308]	; (2b7b0 <download_client_connect+0x54c>)
   2b67a:	f047 0003 	orr.w	r0, r7, #3
   2b67e:	f00e f826 	bl	396ce <log_string_sync>
   2b682:	2304      	movs	r3, #4
   2b684:	2201      	movs	r2, #1
   2b686:	9300      	str	r3, [sp, #0]
   2b688:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2b68c:	4633      	mov	r3, r6
   2b68e:	4658      	mov	r0, fp
   2b690:	f00e fc8c 	bl	39fac <z_impl_zsock_setsockopt>
	if (err) {
   2b694:	2800      	cmp	r0, #0
   2b696:	d0da      	beq.n	2b64e <download_client_connect+0x3ea>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   2b698:	f00e ff85 	bl	3a5a6 <__errno>
   2b69c:	f047 0a01 	orr.w	sl, r7, #1
   2b6a0:	6802      	ldr	r2, [r0, #0]
   2b6a2:	4944      	ldr	r1, [pc, #272]	; (2b7b4 <download_client_connect+0x550>)
   2b6a4:	e7c7      	b.n	2b636 <download_client_connect+0x3d2>
	err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, parsed_host,
   2b6a6:	4630      	mov	r0, r6
   2b6a8:	f7f1 fdd8 	bl	1d25c <strlen>
   2b6ac:	2202      	movs	r2, #2
   2b6ae:	9000      	str	r0, [sp, #0]
   2b6b0:	4633      	mov	r3, r6
   2b6b2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2b6b6:	4650      	mov	r0, sl
   2b6b8:	f00e fc78 	bl	39fac <z_impl_zsock_setsockopt>
	if (err) {
   2b6bc:	b1a8      	cbz	r0, 2b6ea <download_client_connect+0x486>
   2b6be:	4630      	mov	r0, r6
   2b6c0:	f00e f818 	bl	396f4 <z_log_strdup>
   2b6c4:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to setup TLS hostname (%s), errno %d",
   2b6c6:	f00e ff6e 	bl	3a5a6 <__errno>
   2b6ca:	f047 0901 	orr.w	r9, r7, #1
   2b6ce:	6803      	ldr	r3, [r0, #0]
   2b6d0:	9a03      	ldr	r2, [sp, #12]
   2b6d2:	4648      	mov	r0, r9
   2b6d4:	4938      	ldr	r1, [pc, #224]	; (2b7b8 <download_client_connect+0x554>)
   2b6d6:	f00d fffa 	bl	396ce <log_string_sync>
		return -errno;
   2b6da:	f00e ff64 	bl	3a5a6 <__errno>
   2b6de:	6803      	ldr	r3, [r0, #0]
   2b6e0:	f1c3 0b00 	rsb	fp, r3, #0
			if (err) {
   2b6e4:	2b00      	cmp	r3, #0
   2b6e6:	f47f af01 	bne.w	2b4ec <download_client_connect+0x288>
		timeout_ms = CONFIG_DOWNLOAD_CLIENT_UDP_SOCK_TIMEO_MS;
   2b6ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   2b6ec:	4933      	ldr	r1, [pc, #204]	; (2b7bc <download_client_connect+0x558>)
		timeout_ms = CONFIG_DOWNLOAD_CLIENT_UDP_SOCK_TIMEO_MS;
   2b6ee:	2b01      	cmp	r3, #1
		.tv_sec = (timeout_ms / 1000),
   2b6f0:	bf14      	ite	ne
   2b6f2:	2204      	movne	r2, #4
   2b6f4:	221e      	moveq	r2, #30
	struct timeval timeo = {
   2b6f6:	2300      	movs	r3, #0
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   2b6f8:	f047 0003 	orr.w	r0, r7, #3
	err = socket_timeout_set(*fd, type);
   2b6fc:	f8d4 9000 	ldr.w	r9, [r4]
	struct timeval timeo = {
   2b700:	9232      	str	r2, [sp, #200]	; 0xc8
   2b702:	9333      	str	r3, [sp, #204]	; 0xcc
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   2b704:	f00d ffe3 	bl	396ce <log_string_sync>
   2b708:	2308      	movs	r3, #8
   2b70a:	2214      	movs	r2, #20
   2b70c:	9300      	str	r3, [sp, #0]
   2b70e:	2101      	movs	r1, #1
   2b710:	4633      	mov	r3, r6
   2b712:	4648      	mov	r0, r9
   2b714:	f00e fc4a 	bl	39fac <z_impl_zsock_setsockopt>
	if (err) {
   2b718:	b180      	cbz	r0, 2b73c <download_client_connect+0x4d8>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   2b71a:	f00e ff44 	bl	3a5a6 <__errno>
   2b71e:	f047 0602 	orr.w	r6, r7, #2
   2b722:	6802      	ldr	r2, [r0, #0]
   2b724:	4926      	ldr	r1, [pc, #152]	; (2b7c0 <download_client_connect+0x55c>)
   2b726:	4630      	mov	r0, r6
   2b728:	f00d ffd1 	bl	396ce <log_string_sync>
		return -errno;
   2b72c:	f00e ff3b 	bl	3a5a6 <__errno>
   2b730:	6803      	ldr	r3, [r0, #0]
   2b732:	f1c3 0b00 	rsb	fp, r3, #0
	if (err) {
   2b736:	2b00      	cmp	r3, #0
   2b738:	f47f aed8 	bne.w	2b4ec <download_client_connect+0x288>
   2b73c:	4640      	mov	r0, r8
   2b73e:	f00d ffd9 	bl	396f4 <z_log_strdup>
	LOG_INF("Connecting to %s", log_strdup(host));
   2b742:	f047 0603 	orr.w	r6, r7, #3
   2b746:	4602      	mov	r2, r0
   2b748:	491e      	ldr	r1, [pc, #120]	; (2b7c4 <download_client_connect+0x560>)
   2b74a:	4630      	mov	r0, r6
   2b74c:	f00d ffbf 	bl	396ce <log_string_sync>
	err = connect(*fd, sa, addrlen);
   2b750:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   2b752:	9a04      	ldr	r2, [sp, #16]
   2b754:	a908      	add	r1, sp, #32
   2b756:	f00e fb4d 	bl	39df4 <z_impl_zsock_connect>
	if (err) {
   2b75a:	b910      	cbnz	r0, 2b762 <download_client_connect+0x4fe>
		return -EINVAL;
   2b75c:	f04f 0b00 	mov.w	fp, #0
   2b760:	e633      	b.n	2b3ca <download_client_connect+0x166>
		LOG_ERR("Unable to connect, errno %d", errno);
   2b762:	f00e ff20 	bl	3a5a6 <__errno>
   2b766:	f047 0701 	orr.w	r7, r7, #1
   2b76a:	6802      	ldr	r2, [r0, #0]
   2b76c:	4916      	ldr	r1, [pc, #88]	; (2b7c8 <download_client_connect+0x564>)
   2b76e:	4638      	mov	r0, r7
   2b770:	f00d ffad 	bl	396ce <log_string_sync>
		err = -errno;
   2b774:	f00e ff17 	bl	3a5a6 <__errno>
   2b778:	6803      	ldr	r3, [r0, #0]
   2b77a:	f1c3 0b00 	rsb	fp, r3, #0
	if (err) {
   2b77e:	2b00      	cmp	r3, #0
   2b780:	d0ec      	beq.n	2b75c <download_client_connect+0x4f8>
   2b782:	e6b3      	b.n	2b4ec <download_client_connect+0x288>
			return -EPROTONOSUPPORT;
   2b784:	f06f 0b7a 	mvn.w	fp, #122	; 0x7a
   2b788:	e61f      	b.n	2b3ca <download_client_connect+0x166>
	switch (sa->sa_family) {
   2b78a:	f06f 0b69 	mvn.w	fp, #105	; 0x69
   2b78e:	e61c      	b.n	2b3ca <download_client_connect+0x166>
		return -EINVAL;
   2b790:	f06f 0515 	mvn.w	r5, #21
   2b794:	e589      	b.n	2b2aa <download_client_connect+0x46>
		return 0;
   2b796:	2500      	movs	r5, #0
   2b798:	e587      	b.n	2b2aa <download_client_connect+0x46>
   2b79a:	bf00      	nop
   2b79c:	00044102 	.word	0x00044102
   2b7a0:	00044108 	.word	0x00044108
   2b7a4:	0004411e 	.word	0x0004411e
   2b7a8:	00044149 	.word	0x00044149
   2b7ac:	000441c6 	.word	0x000441c6
   2b7b0:	00044175 	.word	0x00044175
   2b7b4:	00044198 	.word	0x00044198
   2b7b8:	000441e3 	.word	0x000441e3
   2b7bc:	0004420f 	.word	0x0004420f
   2b7c0:	00044232 	.word	0x00044232
   2b7c4:	00044259 	.word	0x00044259
   2b7c8:	0004426a 	.word	0x0004426a

0002b7cc <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   2b7cc:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   2b7ce:	4604      	mov	r4, r0
   2b7d0:	b1e0      	cbz	r0, 2b80c <download_client_disconnect+0x40>
   2b7d2:	6800      	ldr	r0, [r0, #0]
   2b7d4:	2800      	cmp	r0, #0
   2b7d6:	db19      	blt.n	2b80c <download_client_disconnect+0x40>
	return z_impl_zsock_close(sock);
   2b7d8:	f00e fae8 	bl	39dac <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   2b7dc:	b190      	cbz	r0, 2b804 <download_client_disconnect+0x38>
   2b7de:	4b0d      	ldr	r3, [pc, #52]	; (2b814 <download_client_disconnect+0x48>)
   2b7e0:	4c0d      	ldr	r4, [pc, #52]	; (2b818 <download_client_disconnect+0x4c>)
   2b7e2:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Failed to close socket, errno %d", errno);
   2b7e4:	f00e fedf 	bl	3a5a6 <__errno>
   2b7e8:	08e4      	lsrs	r4, r4, #3
   2b7ea:	01a4      	lsls	r4, r4, #6
   2b7ec:	f044 0401 	orr.w	r4, r4, #1
   2b7f0:	6802      	ldr	r2, [r0, #0]
   2b7f2:	490a      	ldr	r1, [pc, #40]	; (2b81c <download_client_disconnect+0x50>)
   2b7f4:	4620      	mov	r0, r4
   2b7f6:	f00d ff6a 	bl	396ce <log_string_sync>
		return -errno;
   2b7fa:	f00e fed4 	bl	3a5a6 <__errno>
   2b7fe:	6800      	ldr	r0, [r0, #0]
   2b800:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   2b802:	bd10      	pop	{r4, pc}
	client->fd = -1;
   2b804:	f04f 33ff 	mov.w	r3, #4294967295
   2b808:	6023      	str	r3, [r4, #0]
	return 0;
   2b80a:	e7fa      	b.n	2b802 <download_client_disconnect+0x36>
		return -EINVAL;
   2b80c:	f06f 0015 	mvn.w	r0, #21
   2b810:	e7f7      	b.n	2b802 <download_client_disconnect+0x36>
   2b812:	bf00      	nop
   2b814:	0003f5a4 	.word	0x0003f5a4
   2b818:	0003f614 	.word	0x0003f614
   2b81c:	00044286 	.word	0x00044286

0002b820 <reconnect>:
{
   2b820:	b510      	push	{r4, lr}
   2b822:	4604      	mov	r4, r0
   2b824:	4b0b      	ldr	r3, [pc, #44]	; (2b854 <reconnect+0x34>)
   2b826:	480c      	ldr	r0, [pc, #48]	; (2b858 <reconnect+0x38>)
	LOG_INF("Reconnecting..");
   2b828:	490c      	ldr	r1, [pc, #48]	; (2b85c <reconnect+0x3c>)
   2b82a:	1a1b      	subs	r3, r3, r0
   2b82c:	08db      	lsrs	r3, r3, #3
   2b82e:	019b      	lsls	r3, r3, #6
   2b830:	f043 0003 	orr.w	r0, r3, #3
   2b834:	f00d ff4b 	bl	396ce <log_string_sync>
	err = download_client_disconnect(dl);
   2b838:	4620      	mov	r0, r4
   2b83a:	f7ff ffc7 	bl	2b7cc <download_client_disconnect>
	if (err) {
   2b83e:	b940      	cbnz	r0, 2b852 <reconnect+0x32>
	err = download_client_connect(dl, dl->host, &dl->config);
   2b840:	4620      	mov	r0, r4
   2b842:	f8d4 1810 	ldr.w	r1, [r4, #2064]	; 0x810
   2b846:	f604 0218 	addw	r2, r4, #2072	; 0x818
}
   2b84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   2b84e:	f7ff bd09 	b.w	2b264 <download_client_connect>
}
   2b852:	bd10      	pop	{r4, pc}
   2b854:	0003f614 	.word	0x0003f614
   2b858:	0003f5a4 	.word	0x0003f5a4
   2b85c:	000442a7 	.word	0x000442a7

0002b860 <download_thread>:
{
   2b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b864:	4605      	mov	r5, r0
	int rc = 0;
   2b866:	2400      	movs	r4, #0
   2b868:	4e82      	ldr	r6, [pc, #520]	; (2ba74 <download_thread+0x214>)
   2b86a:	4b83      	ldr	r3, [pc, #524]	; (2ba78 <download_thread+0x218>)
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   2b86c:	f8df 822c 	ldr.w	r8, [pc, #556]	; 2ba9c <download_thread+0x23c>
   2b870:	1af6      	subs	r6, r6, r3
   2b872:	f8df 922c 	ldr.w	r9, [pc, #556]	; 2baa0 <download_thread+0x240>
   2b876:	f8df a22c 	ldr.w	sl, [pc, #556]	; 2baa4 <download_thread+0x244>
{
   2b87a:	b087      	sub	sp, #28
   2b87c:	08f6      	lsrs	r6, r6, #3
	k_thread_suspend(dl->tid);
   2b87e:	f8d5 0840 	ldr.w	r0, [r5, #2112]	; 0x840
	z_impl_k_thread_suspend(thread);
   2b882:	f009 fc89 	bl	35198 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   2b886:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   2b88a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2b88e:	d30e      	bcc.n	2b8ae <download_thread+0x4e>
   2b890:	4649      	mov	r1, r9
   2b892:	f240 13c9 	movw	r3, #457	; 0x1c9
   2b896:	4642      	mov	r2, r8
   2b898:	4650      	mov	r0, sl
   2b89a:	f00d fc4a 	bl	39132 <printk>
   2b89e:	4877      	ldr	r0, [pc, #476]	; (2ba7c <download_thread+0x21c>)
   2b8a0:	f00d fc47 	bl	39132 <printk>
   2b8a4:	f240 11c9 	movw	r1, #457	; 0x1c9
   2b8a8:	4640      	mov	r0, r8
   2b8aa:	f00d fee1 	bl	39670 <assert_post_action>
		if (sizeof(dl->buf) - dl->offset == 0) {
   2b8ae:	f8d5 1804 	ldr.w	r1, [r5, #2052]	; 0x804
   2b8b2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   2b8b6:	d10b      	bne.n	2b8d0 <download_thread+0x70>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   2b8b8:	01b0      	lsls	r0, r6, #6
   2b8ba:	460a      	mov	r2, r1
   2b8bc:	f040 0001 	orr.w	r0, r0, #1
   2b8c0:	496f      	ldr	r1, [pc, #444]	; (2ba80 <download_thread+0x220>)
   2b8c2:	f00d ff04 	bl	396ce <log_string_sync>
			error_evt_send(dl, E2BIG);
   2b8c6:	2107      	movs	r1, #7
			error_evt_send(dl, EBADMSG);
   2b8c8:	f505 50c8 	add.w	r0, r5, #6400	; 0x1900
   2b8cc:	3010      	adds	r0, #16
   2b8ce:	e04b      	b.n	2b968 <download_thread+0x108>
		len = recv(dl->fd, dl->buf + dl->offset,
   2b8d0:	462f      	mov	r7, r5
   2b8d2:	f857 0b04 	ldr.w	r0, [r7], #4
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2b8d6:	2300      	movs	r3, #0
   2b8d8:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
   2b8dc:	e9cd 3300 	strd	r3, r3, [sp]
   2b8e0:	4439      	add	r1, r7
   2b8e2:	f00e fb05 	bl	39ef0 <z_impl_zsock_recvfrom>
		if ((len == 0) || (len == -1)) {
   2b8e6:	1e43      	subs	r3, r0, #1
   2b8e8:	3303      	adds	r3, #3
   2b8ea:	4607      	mov	r7, r0
   2b8ec:	d953      	bls.n	2b996 <download_thread+0x136>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   2b8ee:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   2b8f2:	b173      	cbz	r3, 2b912 <download_thread+0xb2>
   2b8f4:	f895 3830 	ldrb.w	r3, [r5, #2096]	; 0x830
   2b8f8:	b15b      	cbz	r3, 2b912 <download_thread+0xb2>
				rc = fragment_evt_send(dl);
   2b8fa:	4628      	mov	r0, r5
   2b8fc:	f7ff fc56 	bl	2b1ac <fragment_evt_send>
				if (rc) {
   2b900:	4604      	mov	r4, r0
   2b902:	b130      	cbz	r0, 2b912 <download_thread+0xb2>
					LOG_INF("Fragment refused, download stopped.");
   2b904:	01b0      	lsls	r0, r6, #6
   2b906:	495f      	ldr	r1, [pc, #380]	; (2ba84 <download_thread+0x224>)
   2b908:	f040 0003 	orr.w	r0, r0, #3
			LOG_INF("Fragment refused, download stopped.");
   2b90c:	f00d fedf 	bl	396ce <log_string_sync>
   2b910:	e7b5      	b.n	2b87e <download_thread+0x1e>
			if (len == -1) {
   2b912:	3701      	adds	r7, #1
   2b914:	d137      	bne.n	2b986 <download_thread+0x126>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   2b916:	f00e fe46 	bl	3a5a6 <__errno>
   2b91a:	6803      	ldr	r3, [r0, #0]
   2b91c:	2b74      	cmp	r3, #116	; 0x74
   2b91e:	d126      	bne.n	2b96e <download_thread+0x10e>
					if (dl->proto == IPPROTO_UDP ||
   2b920:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
   2b924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   2b928:	2b11      	cmp	r3, #17
   2b92a:	f000 8084 	beq.w	2ba36 <download_thread+0x1d6>
					error_cause = ETIMEDOUT;
   2b92e:	2474      	movs	r4, #116	; 0x74
				LOG_ERR("Error in recv(), errno %d", errno);
   2b930:	f00e fe39 	bl	3a5a6 <__errno>
   2b934:	01b7      	lsls	r7, r6, #6
   2b936:	f047 0701 	orr.w	r7, r7, #1
   2b93a:	6802      	ldr	r2, [r0, #0]
   2b93c:	4952      	ldr	r1, [pc, #328]	; (2ba88 <download_thread+0x228>)
   2b93e:	4638      	mov	r0, r7
   2b940:	f00d fec5 	bl	396ce <log_string_sync>
			rc = error_evt_send(dl, error_cause);
   2b944:	f505 57c8 	add.w	r7, r5, #6400	; 0x1900
   2b948:	3710      	adds	r7, #16
   2b94a:	4621      	mov	r1, r4
   2b94c:	4638      	mov	r0, r7
   2b94e:	f010 fc11 	bl	3c174 <error_evt_send.isra.0>
			if (rc) {
   2b952:	4604      	mov	r4, r0
   2b954:	2800      	cmp	r0, #0
   2b956:	d192      	bne.n	2b87e <download_thread+0x1e>
			rc = reconnect(dl);
   2b958:	4628      	mov	r0, r5
   2b95a:	f7ff ff61 	bl	2b820 <reconnect>
			if (rc) {
   2b95e:	4604      	mov	r4, r0
   2b960:	2800      	cmp	r0, #0
   2b962:	d068      	beq.n	2ba36 <download_thread+0x1d6>
				error_evt_send(dl, EHOSTDOWN);
   2b964:	2175      	movs	r1, #117	; 0x75
   2b966:	4638      	mov	r0, r7
   2b968:	f010 fc04 	bl	3c174 <error_evt_send.isra.0>
				break;
   2b96c:	e787      	b.n	2b87e <download_thread+0x1e>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   2b96e:	f00e fe1a 	bl	3a5a6 <__errno>
   2b972:	6803      	ldr	r3, [r0, #0]
   2b974:	2b0b      	cmp	r3, #11
   2b976:	d0d3      	beq.n	2b920 <download_thread+0xc0>
				    (errno == EAGAIN)) {
   2b978:	f00e fe15 	bl	3a5a6 <__errno>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   2b97c:	6803      	ldr	r3, [r0, #0]
   2b97e:	2b0b      	cmp	r3, #11
   2b980:	d0ce      	beq.n	2b920 <download_thread+0xc0>
			error_cause = ECONNRESET;
   2b982:	2468      	movs	r4, #104	; 0x68
   2b984:	e7d4      	b.n	2b930 <download_thread+0xd0>
				LOG_WRN("Peer closed connection!");
   2b986:	01b0      	lsls	r0, r6, #6
   2b988:	4940      	ldr	r1, [pc, #256]	; (2ba8c <download_thread+0x22c>)
   2b98a:	f040 0002 	orr.w	r0, r0, #2
   2b98e:	f00d fe9e 	bl	396ce <log_string_sync>
			error_cause = ECONNRESET;
   2b992:	2468      	movs	r4, #104	; 0x68
   2b994:	e7d6      	b.n	2b944 <download_thread+0xe4>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   2b996:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
   2b99a:	2b06      	cmp	r3, #6
   2b99c:	d002      	beq.n	2b9a4 <download_thread+0x144>
   2b99e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2b9a2:	d106      	bne.n	2b9b2 <download_thread+0x152>
			rc = http_parse(client, len);
   2b9a4:	4639      	mov	r1, r7
   2b9a6:	4628      	mov	r0, r5
   2b9a8:	f000 fa0a 	bl	2bdc0 <http_parse>
			if (rc > 0) {
   2b9ac:	1e04      	subs	r4, r0, #0
   2b9ae:	f73f af6a 	bgt.w	2b886 <download_thread+0x26>
		if (rc < 0) {
   2b9b2:	2c00      	cmp	r4, #0
   2b9b4:	da01      	bge.n	2b9ba <download_thread+0x15a>
			error_evt_send(dl, EBADMSG);
   2b9b6:	214d      	movs	r1, #77	; 0x4d
   2b9b8:	e786      	b.n	2b8c8 <download_thread+0x68>
		if (dl->file_size) {
   2b9ba:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   2b9be:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   2b9c2:	01b7      	lsls	r7, r6, #6
   2b9c4:	b193      	cbz	r3, 2b9ec <download_thread+0x18c>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   2b9c6:	2164      	movs	r1, #100	; 0x64
   2b9c8:	4351      	muls	r1, r2
   2b9ca:	fbb1 f1f3 	udiv	r1, r1, r3
   2b9ce:	f047 0003 	orr.w	r0, r7, #3
   2b9d2:	9100      	str	r1, [sp, #0]
   2b9d4:	492e      	ldr	r1, [pc, #184]	; (2ba90 <download_thread+0x230>)
   2b9d6:	f00d fe7a 	bl	396ce <log_string_sync>
		rc = fragment_evt_send(dl);
   2b9da:	4628      	mov	r0, r5
   2b9dc:	f7ff fbe6 	bl	2b1ac <fragment_evt_send>
		if (rc) {
   2b9e0:	4604      	mov	r4, r0
   2b9e2:	b148      	cbz	r0, 2b9f8 <download_thread+0x198>
			LOG_INF("Fragment refused, download stopped.");
   2b9e4:	4927      	ldr	r1, [pc, #156]	; (2ba84 <download_thread+0x224>)
   2b9e6:	f047 0003 	orr.w	r0, r7, #3
   2b9ea:	e78f      	b.n	2b90c <download_thread+0xac>
			LOG_INF("Downloaded %u bytes", dl->progress);
   2b9ec:	4929      	ldr	r1, [pc, #164]	; (2ba94 <download_thread+0x234>)
   2b9ee:	f047 0003 	orr.w	r0, r7, #3
   2b9f2:	f00d fe6c 	bl	396ce <log_string_sync>
   2b9f6:	e7f0      	b.n	2b9da <download_thread+0x17a>
		if (dl->progress == dl->file_size) {
   2b9f8:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   2b9fc:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   2ba00:	429a      	cmp	r2, r3
   2ba02:	d110      	bne.n	2ba26 <download_thread+0x1c6>
			LOG_INF("Download complete");
   2ba04:	f047 0003 	orr.w	r0, r7, #3
   2ba08:	4923      	ldr	r1, [pc, #140]	; (2ba98 <download_thread+0x238>)
   2ba0a:	f00d fe60 	bl	396ce <log_string_sync>
			const struct download_client_evt evt = {
   2ba0e:	2302      	movs	r3, #2
   2ba10:	e9cd 4403 	strd	r4, r4, [sp, #12]
   2ba14:	f88d 300c 	strb.w	r3, [sp, #12]
			dl->callback(&evt);
   2ba18:	f641 1310 	movw	r3, #6416	; 0x1910
			const struct download_client_evt evt = {
   2ba1c:	9405      	str	r4, [sp, #20]
			dl->callback(&evt);
   2ba1e:	58eb      	ldr	r3, [r5, r3]
   2ba20:	a803      	add	r0, sp, #12
   2ba22:	4798      	blx	r3
			break;
   2ba24:	e72b      	b.n	2b87e <download_thread+0x1e>
		if (dl->http.connection_close) {
   2ba26:	f895 3831 	ldrb.w	r3, [r5, #2097]	; 0x831
   2ba2a:	b123      	cbz	r3, 2ba36 <download_thread+0x1d6>
			dl->http.connection_close = false;
   2ba2c:	f885 0831 	strb.w	r0, [r5, #2097]	; 0x831
			reconnect(dl);
   2ba30:	4628      	mov	r0, r5
   2ba32:	f7ff fef5 	bl	2b820 <reconnect>
		dl->offset = 0;
   2ba36:	f04f 0b00 	mov.w	fp, #0
   2ba3a:	f505 57c8 	add.w	r7, r5, #6400	; 0x1900
   2ba3e:	3710      	adds	r7, #16
			rc = request_send(dl);
   2ba40:	4628      	mov	r0, r5
		dl->offset = 0;
   2ba42:	f8c5 b804 	str.w	fp, [r5, #2052]	; 0x804
			dl->http.has_header = false;
   2ba46:	f885 b830 	strb.w	fp, [r5, #2096]	; 0x830
			rc = request_send(dl);
   2ba4a:	f010 fb88 	bl	3c15e <request_send>
			if (rc) {
   2ba4e:	4604      	mov	r4, r0
   2ba50:	2800      	cmp	r0, #0
   2ba52:	f43f af18 	beq.w	2b886 <download_thread+0x26>
				rc = error_evt_send(dl, ECONNRESET);
   2ba56:	2168      	movs	r1, #104	; 0x68
   2ba58:	4638      	mov	r0, r7
   2ba5a:	f010 fb8b 	bl	3c174 <error_evt_send.isra.0>
				if (rc) {
   2ba5e:	4604      	mov	r4, r0
   2ba60:	2800      	cmp	r0, #0
   2ba62:	f47f af0c 	bne.w	2b87e <download_thread+0x1e>
				rc = reconnect(dl);
   2ba66:	4628      	mov	r0, r5
   2ba68:	f7ff feda 	bl	2b820 <reconnect>
				if (rc) {
   2ba6c:	4604      	mov	r4, r0
   2ba6e:	2800      	cmp	r0, #0
   2ba70:	d0e6      	beq.n	2ba40 <download_thread+0x1e0>
   2ba72:	e777      	b.n	2b964 <download_thread+0x104>
   2ba74:	0003f614 	.word	0x0003f614
   2ba78:	0003f5a4 	.word	0x0003f5a4
   2ba7c:	000442d3 	.word	0x000442d3
   2ba80:	000442e5 	.word	0x000442e5
   2ba84:	00044312 	.word	0x00044312
   2ba88:	00044336 	.word	0x00044336
   2ba8c:	00044350 	.word	0x00044350
   2ba90:	00044368 	.word	0x00044368
   2ba94:	00044386 	.word	0x00044386
   2ba98:	00043a4a 	.word	0x00043a4a
   2ba9c:	00043f4d 	.word	0x00043f4d
   2baa0:	000442b6 	.word	0x000442b6
   2baa4:	0004033e 	.word	0x0004033e

0002baa8 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   2baa8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL) {
   2baaa:	4604      	mov	r4, r0
   2baac:	b348      	cbz	r0, 2bb02 <download_client_start+0x5a>
		return -EINVAL;
	}

	if (client->fd < 0) {
   2baae:	6803      	ldr	r3, [r0, #0]
   2bab0:	2b00      	cmp	r3, #0
   2bab2:	db29      	blt.n	2bb08 <download_client_start+0x60>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   2bab4:	2300      	movs	r3, #0
	client->file = file;
   2bab6:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
	client->file_size = 0;
   2baba:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
	client->progress = from;
   2babe:	f8c0 280c 	str.w	r2, [r0, #2060]	; 0x80c

	client->offset = 0;
   2bac2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
	client->http.has_header = false;
   2bac6:	f880 3830 	strb.w	r3, [r0, #2096]	; 0x830
		if (IS_ENABLED(CONFIG_COAP)) {
			coap_block_init(client, from);
		}
	}

	err = request_send(client);
   2baca:	f010 fb48 	bl	3c15e <request_send>
	if (err) {
   2bace:	4606      	mov	r6, r0
   2bad0:	b9a8      	cbnz	r0, 2bafe <download_client_start+0x56>
   2bad2:	4b0f      	ldr	r3, [pc, #60]	; (2bb10 <download_client_start+0x68>)
   2bad4:	4d0f      	ldr	r5, [pc, #60]	; (2bb14 <download_client_start+0x6c>)
   2bad6:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   2bada:	1aed      	subs	r5, r5, r3
   2badc:	f00d fe0a 	bl	396f4 <z_log_strdup>
   2bae0:	08ed      	lsrs	r5, r5, #3
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2bae2:	01ad      	lsls	r5, r5, #6
   2bae4:	f045 0503 	orr.w	r5, r5, #3
   2bae8:	4602      	mov	r2, r0
   2baea:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   2baee:	4628      	mov	r0, r5
   2baf0:	4909      	ldr	r1, [pc, #36]	; (2bb18 <download_client_start+0x70>)
   2baf2:	f00d fdec 	bl	396ce <log_string_sync>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   2baf6:	f8d4 0840 	ldr.w	r0, [r4, #2112]	; 0x840
	z_impl_k_thread_resume(thread);
   2bafa:	f009 fdf3 	bl	356e4 <z_impl_k_thread_resume>

	return 0;
}
   2bafe:	4630      	mov	r0, r6
   2bb00:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2bb02:	f06f 0615 	mvn.w	r6, #21
   2bb06:	e7fa      	b.n	2bafe <download_client_start+0x56>
		return -ENOTCONN;
   2bb08:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   2bb0c:	e7f7      	b.n	2bafe <download_client_start+0x56>
   2bb0e:	bf00      	nop
   2bb10:	0003f5a4 	.word	0x0003f5a4
   2bb14:	0003f614 	.word	0x0003f614
   2bb18:	0004439a 	.word	0x0004439a

0002bb1c <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   2bb1c:	b570      	push	{r4, r5, r6, lr}
   2bb1e:	460d      	mov	r5, r1
   2bb20:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   2bb22:	4915      	ldr	r1, [pc, #84]	; (2bb78 <url_parse_proto+0x5c>)
   2bb24:	2205      	movs	r2, #5
{
   2bb26:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   2bb28:	f012 fbda 	bl	3e2e0 <strncmp>
   2bb2c:	b928      	cbnz	r0, 2bb3a <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   2bb2e:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   2bb32:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   2bb34:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   2bb36:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   2bb38:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   2bb3a:	2204      	movs	r2, #4
   2bb3c:	4630      	mov	r0, r6
   2bb3e:	490f      	ldr	r1, [pc, #60]	; (2bb7c <url_parse_proto+0x60>)
   2bb40:	f012 fbce 	bl	3e2e0 <strncmp>
   2bb44:	b908      	cbnz	r0, 2bb4a <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   2bb46:	2306      	movs	r3, #6
   2bb48:	e7f3      	b.n	2bb32 <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   2bb4a:	2205      	movs	r2, #5
   2bb4c:	4630      	mov	r0, r6
   2bb4e:	490c      	ldr	r1, [pc, #48]	; (2bb80 <url_parse_proto+0x64>)
   2bb50:	f012 fbc6 	bl	3e2e0 <strncmp>
   2bb54:	b920      	cbnz	r0, 2bb60 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   2bb56:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   2bb5a:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   2bb5c:	2302      	movs	r3, #2
   2bb5e:	e7ea      	b.n	2bb36 <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   2bb60:	2204      	movs	r2, #4
   2bb62:	4630      	mov	r0, r6
   2bb64:	4907      	ldr	r1, [pc, #28]	; (2bb84 <url_parse_proto+0x68>)
   2bb66:	f012 fbbb 	bl	3e2e0 <strncmp>
   2bb6a:	b908      	cbnz	r0, 2bb70 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   2bb6c:	2311      	movs	r3, #17
   2bb6e:	e7f4      	b.n	2bb5a <url_parse_proto+0x3e>
		return -EINVAL;
   2bb70:	f06f 0015 	mvn.w	r0, #21
   2bb74:	e7e0      	b.n	2bb38 <url_parse_proto+0x1c>
   2bb76:	bf00      	nop
   2bb78:	000443af 	.word	0x000443af
   2bb7c:	000443b5 	.word	0x000443b5
   2bb80:	000443ba 	.word	0x000443ba
   2bb84:	000443c0 	.word	0x000443c0

0002bb88 <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   2bb88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2bb8a:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   2bb8c:	9001      	str	r0, [sp, #4]
{
   2bb8e:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   2bb90:	a801      	add	r0, sp, #4
   2bb92:	4918      	ldr	r1, [pc, #96]	; (2bbf4 <url_parse_host+0x6c>)
{
   2bb94:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   2bb96:	f010 fb26 	bl	3c1e6 <swallow>

	if (cur[0] == '[') {
   2bb9a:	9801      	ldr	r0, [sp, #4]
   2bb9c:	7803      	ldrb	r3, [r0, #0]
   2bb9e:	2b5b      	cmp	r3, #91	; 0x5b
   2bba0:	d111      	bne.n	2bbc6 <url_parse_host+0x3e>
		/* literal IPv6 address */
		end = strchr(cur, ']');
   2bba2:	215d      	movs	r1, #93	; 0x5d
   2bba4:	f012 fb87 	bl	3e2b6 <strchr>

		if (!end) {
   2bba8:	b1f0      	cbz	r0, 2bbe8 <url_parse_host+0x60>
			return -EINVAL;
		}
		++end;
   2bbaa:	3001      	adds	r0, #1
				end = url + strlen(url) + 1;
			}
		}
	}

	if (end - cur + 1 > len) {
   2bbac:	9901      	ldr	r1, [sp, #4]
   2bbae:	1a44      	subs	r4, r0, r1
   2bbb0:	1c63      	adds	r3, r4, #1
   2bbb2:	42b3      	cmp	r3, r6
   2bbb4:	d81b      	bhi.n	2bbee <url_parse_host+0x66>
   2bbb6:	4622      	mov	r2, r4
   2bbb8:	4628      	mov	r0, r5
   2bbba:	f012 f9d6 	bl	3df6a <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   2bbbe:	2000      	movs	r0, #0
   2bbc0:	5528      	strb	r0, [r5, r4]

	return 0;
}
   2bbc2:	b002      	add	sp, #8
   2bbc4:	bd70      	pop	{r4, r5, r6, pc}
		end = strchr(cur, ':');
   2bbc6:	213a      	movs	r1, #58	; 0x3a
   2bbc8:	f012 fb75 	bl	3e2b6 <strchr>
		if (!end) {
   2bbcc:	2800      	cmp	r0, #0
   2bbce:	d1ed      	bne.n	2bbac <url_parse_host+0x24>
			end = strchr(cur, '/');
   2bbd0:	212f      	movs	r1, #47	; 0x2f
   2bbd2:	9801      	ldr	r0, [sp, #4]
   2bbd4:	f012 fb6f 	bl	3e2b6 <strchr>
			if (!end) {
   2bbd8:	2800      	cmp	r0, #0
   2bbda:	d1e7      	bne.n	2bbac <url_parse_host+0x24>
				end = url + strlen(url) + 1;
   2bbdc:	4620      	mov	r0, r4
   2bbde:	f7f1 fb3d 	bl	1d25c <strlen>
   2bbe2:	1c43      	adds	r3, r0, #1
   2bbe4:	18e0      	adds	r0, r4, r3
   2bbe6:	e7e1      	b.n	2bbac <url_parse_host+0x24>
			return -EINVAL;
   2bbe8:	f06f 0015 	mvn.w	r0, #21
   2bbec:	e7e9      	b.n	2bbc2 <url_parse_host+0x3a>
		return -E2BIG;
   2bbee:	f06f 0006 	mvn.w	r0, #6
   2bbf2:	e7e6      	b.n	2bbc2 <url_parse_host+0x3a>
   2bbf4:	000443c5 	.word	0x000443c5

0002bbf8 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   2bbf8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2bbfa:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   2bbfc:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   2bbfe:	491b      	ldr	r1, [pc, #108]	; (2bc6c <url_parse_port+0x74>)
   2bc00:	a801      	add	r0, sp, #4
   2bc02:	f010 faf0 	bl	3c1e6 <swallow>

	if (cur[0] == '[') {
   2bc06:	9b01      	ldr	r3, [sp, #4]
   2bc08:	781b      	ldrb	r3, [r3, #0]
   2bc0a:	2b5b      	cmp	r3, #91	; 0x5b
   2bc0c:	d103      	bne.n	2bc16 <url_parse_port+0x1e>
		/* literal IPv6 address */
		swallow(&cur, "]");
   2bc0e:	4918      	ldr	r1, [pc, #96]	; (2bc70 <url_parse_port+0x78>)
   2bc10:	a801      	add	r0, sp, #4
   2bc12:	f010 fae8 	bl	3c1e6 <swallow>
	}

	err = swallow(&cur, ":");
   2bc16:	4917      	ldr	r1, [pc, #92]	; (2bc74 <url_parse_port+0x7c>)
   2bc18:	a801      	add	r0, sp, #4
   2bc1a:	f010 fae4 	bl	3c1e6 <swallow>
	if (err) {
   2bc1e:	4605      	mov	r5, r0
   2bc20:	bb08      	cbnz	r0, 2bc66 <url_parse_port+0x6e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   2bc22:	212f      	movs	r1, #47	; 0x2f
   2bc24:	9801      	ldr	r0, [sp, #4]
   2bc26:	f012 fb46 	bl	3e2b6 <strchr>
	if (!end) {
   2bc2a:	4604      	mov	r4, r0
		len = strlen(cur);
   2bc2c:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   2bc2e:	b9c4      	cbnz	r4, 2bc62 <url_parse_port+0x6a>
		len = strlen(cur);
   2bc30:	f7f1 fb14 	bl	1d25c <strlen>
   2bc34:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MIN(len, sizeof(aport) - 1);
   2bc36:	2c07      	cmp	r4, #7
   2bc38:	bf28      	it	cs
   2bc3a:	2407      	movcs	r4, #7

	memcpy(aport, cur, len);
   2bc3c:	2308      	movs	r3, #8
   2bc3e:	4622      	mov	r2, r4
   2bc40:	9901      	ldr	r1, [sp, #4]
   2bc42:	eb0d 0003 	add.w	r0, sp, r3
   2bc46:	f012 f99d 	bl	3df84 <__memcpy_chk>
	aport[len] = '\0';
   2bc4a:	ab04      	add	r3, sp, #16
   2bc4c:	441c      	add	r4, r3
   2bc4e:	2300      	movs	r3, #0

	*port = atoi(aport);
   2bc50:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   2bc52:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   2bc56:	f012 f968 	bl	3df2a <atoi>
   2bc5a:	8030      	strh	r0, [r6, #0]

	return 0;
}
   2bc5c:	4628      	mov	r0, r5
   2bc5e:	b004      	add	sp, #16
   2bc60:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   2bc62:	1a24      	subs	r4, r4, r0
   2bc64:	e7e7      	b.n	2bc36 <url_parse_port+0x3e>
		return -EINVAL;
   2bc66:	f06f 0515 	mvn.w	r5, #21
   2bc6a:	e7f7      	b.n	2bc5c <url_parse_port+0x64>
   2bc6c:	000443c5 	.word	0x000443c5
   2bc70:	00043c0f 	.word	0x00043c0f
   2bc74:	0004590b 	.word	0x0004590b

0002bc78 <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   2bc78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bc7a:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   2bc7c:	4915      	ldr	r1, [pc, #84]	; (2bcd4 <url_parse_file+0x5c>)
{
   2bc7e:	4614      	mov	r4, r2
	cur = url;
   2bc80:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   2bc82:	f012 fb5f 	bl	3e344 <strstr>
   2bc86:	b940      	cbnz	r0, 2bc9a <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   2bc88:	9801      	ldr	r0, [sp, #4]
   2bc8a:	f7f1 fae7 	bl	1d25c <strlen>
   2bc8e:	3001      	adds	r0, #1
   2bc90:	42a0      	cmp	r0, r4
   2bc92:	d912      	bls.n	2bcba <url_parse_file+0x42>
		return -E2BIG;
   2bc94:	f06f 0006 	mvn.w	r0, #6
   2bc98:	e006      	b.n	2bca8 <url_parse_file+0x30>
		err = swallow(&cur, "://");
   2bc9a:	490f      	ldr	r1, [pc, #60]	; (2bcd8 <url_parse_file+0x60>)
   2bc9c:	a801      	add	r0, sp, #4
   2bc9e:	f010 faa2 	bl	3c1e6 <swallow>
		if (err) {
   2bca2:	b118      	cbz	r0, 2bcac <url_parse_file+0x34>
			return -EINVAL;
   2bca4:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   2bca8:	b003      	add	sp, #12
   2bcaa:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   2bcac:	490b      	ldr	r1, [pc, #44]	; (2bcdc <url_parse_file+0x64>)
   2bcae:	a801      	add	r0, sp, #4
   2bcb0:	f010 fa99 	bl	3c1e6 <swallow>
		if (err) {
   2bcb4:	2800      	cmp	r0, #0
   2bcb6:	d0e7      	beq.n	2bc88 <url_parse_file+0x10>
   2bcb8:	e7f4      	b.n	2bca4 <url_parse_file+0x2c>
	len = strlen(cur);
   2bcba:	9801      	ldr	r0, [sp, #4]
   2bcbc:	f7f1 face 	bl	1d25c <strlen>
   2bcc0:	9901      	ldr	r1, [sp, #4]
   2bcc2:	4604      	mov	r4, r0
   2bcc4:	4602      	mov	r2, r0
   2bcc6:	4628      	mov	r0, r5
   2bcc8:	f012 f94f 	bl	3df6a <memcpy>
	file[len] = '\0';
   2bccc:	2300      	movs	r3, #0
	return 0;
   2bcce:	4618      	mov	r0, r3
	file[len] = '\0';
   2bcd0:	552b      	strb	r3, [r5, r4]
	return 0;
   2bcd2:	e7e9      	b.n	2bca8 <url_parse_file+0x30>
   2bcd4:	000443c6 	.word	0x000443c6
   2bcd8:	000443c5 	.word	0x000443c5
   2bcdc:	000443c7 	.word	0x000443c7

0002bce0 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len);

int http_get_request_send(struct download_client *client)
{
   2bce0:	b570      	push	{r4, r5, r6, lr}
	int len;
	size_t off;
	char host[HOSTNAME_SIZE];
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
   2bce2:	f8d0 3810 	ldr.w	r3, [r0, #2064]	; 0x810
{
   2bce6:	4605      	mov	r5, r0
   2bce8:	b0c4      	sub	sp, #272	; 0x110
	__ASSERT_NO_MSG(client->host);
   2bcea:	b94b      	cbnz	r3, 2bd00 <http_get_request_send+0x20>
   2bcec:	492c      	ldr	r1, [pc, #176]	; (2bda0 <http_get_request_send+0xc0>)
   2bcee:	482d      	ldr	r0, [pc, #180]	; (2bda4 <http_get_request_send+0xc4>)
   2bcf0:	232e      	movs	r3, #46	; 0x2e
   2bcf2:	4a2d      	ldr	r2, [pc, #180]	; (2bda8 <http_get_request_send+0xc8>)
   2bcf4:	f00d fa1d 	bl	39132 <printk>
   2bcf8:	212e      	movs	r1, #46	; 0x2e
   2bcfa:	482b      	ldr	r0, [pc, #172]	; (2bda8 <http_get_request_send+0xc8>)
   2bcfc:	f00d fcb8 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   2bd00:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
   2bd04:	b94b      	cbnz	r3, 2bd1a <http_get_request_send+0x3a>
   2bd06:	4929      	ldr	r1, [pc, #164]	; (2bdac <http_get_request_send+0xcc>)
   2bd08:	4826      	ldr	r0, [pc, #152]	; (2bda4 <http_get_request_send+0xc4>)
   2bd0a:	232f      	movs	r3, #47	; 0x2f
   2bd0c:	4a26      	ldr	r2, [pc, #152]	; (2bda8 <http_get_request_send+0xc8>)
   2bd0e:	f00d fa10 	bl	39132 <printk>
   2bd12:	212f      	movs	r1, #47	; 0x2f
   2bd14:	4824      	ldr	r0, [pc, #144]	; (2bda8 <http_get_request_send+0xc8>)
   2bd16:	f00d fcab 	bl	39670 <assert_post_action>

	err = url_parse_host(client->host, host, sizeof(host));
   2bd1a:	ae04      	add	r6, sp, #16
   2bd1c:	2240      	movs	r2, #64	; 0x40
   2bd1e:	4631      	mov	r1, r6
   2bd20:	f8d5 0810 	ldr.w	r0, [r5, #2064]	; 0x810
   2bd24:	f7ff ff30 	bl	2bb88 <url_parse_host>
	if (err) {
   2bd28:	4604      	mov	r4, r0
   2bd2a:	bb90      	cbnz	r0, 2bd92 <http_get_request_send+0xb2>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   2bd2c:	22c0      	movs	r2, #192	; 0xc0
   2bd2e:	f8d5 0814 	ldr.w	r0, [r5, #2068]	; 0x814
   2bd32:	a914      	add	r1, sp, #80	; 0x50
   2bd34:	f7ff ffa0 	bl	2bc78 <url_parse_file>
	if (err) {
   2bd38:	4604      	mov	r4, r0
   2bd3a:	bb50      	cbnz	r0, 2bd92 <http_get_request_send+0xb2>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   2bd3c:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   2bd40:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   2bd44:	b343      	cbz	r3, 2bd98 <http_get_request_send+0xb8>
		off = client->progress + client->config.frag_size_override - 1;
   2bd46:	4413      	add	r3, r2
   2bd48:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   2bd4a:	f8d5 1808 	ldr.w	r1, [r5, #2056]	; 0x808
   2bd4e:	b111      	cbz	r1, 2bd56 <http_get_request_send+0x76>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size);
   2bd50:	428b      	cmp	r3, r1
   2bd52:	bf28      	it	cs
   2bd54:	460b      	movcs	r3, r1
	 * When using HTTP, we request the whole resource to minimize
	 * network usage (only one request/response are sent).
	 */
	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   2bd56:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2bd5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   2bd5e:	4a14      	ldr	r2, [pc, #80]	; (2bdb0 <http_get_request_send+0xd0>)
   2bd60:	ab14      	add	r3, sp, #80	; 0x50
   2bd62:	9600      	str	r6, [sp, #0]
   2bd64:	1d28      	adds	r0, r5, #4
   2bd66:	f00b fe79 	bl	37a5c <sniprintf>
   2bd6a:	4601      	mov	r1, r0

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len);
   2bd6c:	4628      	mov	r0, r5
   2bd6e:	f010 fa10 	bl	3c192 <socket_send>
	if (err) {
   2bd72:	4604      	mov	r4, r0
   2bd74:	b168      	cbz	r0, 2bd92 <http_get_request_send+0xb2>
   2bd76:	4b0f      	ldr	r3, [pc, #60]	; (2bdb4 <http_get_request_send+0xd4>)
   2bd78:	4d0f      	ldr	r5, [pc, #60]	; (2bdb8 <http_get_request_send+0xd8>)
   2bd7a:	1aed      	subs	r5, r5, r3
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   2bd7c:	f00e fc13 	bl	3a5a6 <__errno>
   2bd80:	08ed      	lsrs	r5, r5, #3
   2bd82:	01ad      	lsls	r5, r5, #6
   2bd84:	f045 0501 	orr.w	r5, r5, #1
   2bd88:	6802      	ldr	r2, [r0, #0]
   2bd8a:	490c      	ldr	r1, [pc, #48]	; (2bdbc <http_get_request_send+0xdc>)
   2bd8c:	4628      	mov	r0, r5
   2bd8e:	f00d fc9e 	bl	396ce <log_string_sync>
		return err;
	}

	return 0;
}
   2bd92:	4620      	mov	r0, r4
   2bd94:	b044      	add	sp, #272	; 0x110
   2bd96:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   2bd98:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
   2bd9c:	e7d5      	b.n	2bd4a <http_get_request_send+0x6a>
   2bd9e:	bf00      	nop
   2bda0:	00044403 	.word	0x00044403
   2bda4:	0004033e 	.word	0x0004033e
   2bda8:	000443c9 	.word	0x000443c9
   2bdac:	00044410 	.word	0x00044410
   2bdb0:	0004441d 	.word	0x0004441d
   2bdb4:	0003f5a4 	.word	0x0003f5a4
   2bdb8:	0003f614 	.word	0x0003f614
   2bdbc:	00044468 	.word	0x00044468

0002bdc0 <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   2bdc0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   2bdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	client->offset += len;
   2bdc8:	440b      	add	r3, r1
   2bdca:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

	if (!client->http.has_header) {
   2bdce:	f890 3830 	ldrb.w	r3, [r0, #2096]	; 0x830
{
   2bdd2:	4604      	mov	r4, r0
   2bdd4:	460f      	mov	r7, r1
	if (!client->http.has_header) {
   2bdd6:	2b00      	cmp	r3, #0
   2bdd8:	f040 8089 	bne.w	2beee <http_parse+0x12e>
	p = strstr(client->buf, "\r\n\r\n");
   2bddc:	1d05      	adds	r5, r0, #4
   2bdde:	4628      	mov	r0, r5
   2bde0:	4952      	ldr	r1, [pc, #328]	; (2bf2c <http_parse+0x16c>)
   2bde2:	f012 faaf 	bl	3e344 <strstr>
	if (!p || p > client->buf + client->offset) {
   2bde6:	4606      	mov	r6, r0
   2bde8:	2800      	cmp	r0, #0
   2bdea:	f000 809b 	beq.w	2bf24 <http_parse+0x164>
   2bdee:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   2bdf2:	442b      	add	r3, r5
   2bdf4:	4298      	cmp	r0, r3
   2bdf6:	f200 8095 	bhi.w	2bf24 <http_parse+0x164>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   2bdfa:	484c      	ldr	r0, [pc, #304]	; (2bf2c <http_parse+0x16c>)
   2bdfc:	f7f1 fa2e 	bl	1d25c <strlen>
   2be00:	4406      	add	r6, r0
   2be02:	462b      	mov	r3, r5
   2be04:	4630      	mov	r0, r6
		client->buf[i] = tolower(client->buf[i]);
   2be06:	f8df c158 	ldr.w	ip, [pc, #344]	; 2bf60 <http_parse+0x1a0>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   2be0a:	eba6 0805 	sub.w	r8, r6, r5
	for (size_t i = 0; i < *hdr_len; i++) {
   2be0e:	4298      	cmp	r0, r3
   2be10:	d117      	bne.n	2be42 <http_parse+0x82>
	p = strstr(client->buf, "http/1.1 206");
   2be12:	4628      	mov	r0, r5
   2be14:	4946      	ldr	r1, [pc, #280]	; (2bf30 <http_parse+0x170>)
   2be16:	f012 fa95 	bl	3e344 <strstr>
	if (!p) {
   2be1a:	b9f8      	cbnz	r0, 2be5c <http_parse+0x9c>
		p = strstr(client->buf, "http/1.1 404");
   2be1c:	4628      	mov	r0, r5
   2be1e:	4945      	ldr	r1, [pc, #276]	; (2bf34 <http_parse+0x174>)
   2be20:	f012 fa90 	bl	3e344 <strstr>
		if (p) {
   2be24:	4b44      	ldr	r3, [pc, #272]	; (2bf38 <http_parse+0x178>)
   2be26:	4a45      	ldr	r2, [pc, #276]	; (2bf3c <http_parse+0x17c>)
   2be28:	1a9b      	subs	r3, r3, r2
   2be2a:	08db      	lsrs	r3, r3, #3
   2be2c:	019b      	lsls	r3, r3, #6
   2be2e:	b198      	cbz	r0, 2be58 <http_parse+0x98>
			LOG_ERR("Server response was 404: file not found");
   2be30:	4943      	ldr	r1, [pc, #268]	; (2bf40 <http_parse+0x180>)
			LOG_ERR("Server did not honor partial content request");
   2be32:	f043 0001 	orr.w	r0, r3, #1
   2be36:	f00d fc4a 	bl	396ce <log_string_sync>
			/* Wait for header */
			return 1;
		}
		if (rc < 0) {
			/* Something is wrong with the header */
			return -1;
   2be3a:	f04f 30ff 	mov.w	r0, #4294967295
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   2be3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		client->buf[i] = tolower(client->buf[i]);
   2be42:	781a      	ldrb	r2, [r3, #0]
   2be44:	f812 100c 	ldrb.w	r1, [r2, ip]
   2be48:	f001 0103 	and.w	r1, r1, #3
   2be4c:	2901      	cmp	r1, #1
   2be4e:	bf08      	it	eq
   2be50:	3220      	addeq	r2, #32
   2be52:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   2be56:	e7da      	b.n	2be0e <http_parse+0x4e>
			LOG_ERR("Server did not honor partial content request");
   2be58:	493a      	ldr	r1, [pc, #232]	; (2bf44 <http_parse+0x184>)
   2be5a:	e7ea      	b.n	2be32 <http_parse+0x72>
	if (client->file_size == 0) {
   2be5c:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   2be60:	bb03      	cbnz	r3, 2bea4 <http_parse+0xe4>
			p = strstr(client->buf, "content-range");
   2be62:	4628      	mov	r0, r5
   2be64:	4938      	ldr	r1, [pc, #224]	; (2bf48 <http_parse+0x188>)
   2be66:	f012 fa6d 	bl	3e344 <strstr>
			if (!p) {
   2be6a:	b940      	cbnz	r0, 2be7e <http_parse+0xbe>
   2be6c:	4832      	ldr	r0, [pc, #200]	; (2bf38 <http_parse+0x178>)
   2be6e:	4b33      	ldr	r3, [pc, #204]	; (2bf3c <http_parse+0x17c>)
				LOG_ERR("Server did not send "
   2be70:	4936      	ldr	r1, [pc, #216]	; (2bf4c <http_parse+0x18c>)
   2be72:	1ac0      	subs	r0, r0, r3
   2be74:	08c0      	lsrs	r0, r0, #3
   2be76:	0180      	lsls	r0, r0, #6
				LOG_ERR("No file size in response");
   2be78:	f040 0001 	orr.w	r0, r0, #1
   2be7c:	e7db      	b.n	2be36 <http_parse+0x76>
			p = strstr(p, "/");
   2be7e:	4934      	ldr	r1, [pc, #208]	; (2bf50 <http_parse+0x190>)
   2be80:	f012 fa60 	bl	3e344 <strstr>
			if (!p) {
   2be84:	b930      	cbnz	r0, 2be94 <http_parse+0xd4>
   2be86:	482c      	ldr	r0, [pc, #176]	; (2bf38 <http_parse+0x178>)
   2be88:	4b2c      	ldr	r3, [pc, #176]	; (2bf3c <http_parse+0x17c>)
				LOG_ERR("No file size in response");
   2be8a:	4932      	ldr	r1, [pc, #200]	; (2bf54 <http_parse+0x194>)
   2be8c:	1ac0      	subs	r0, r0, r3
   2be8e:	08c0      	lsrs	r0, r0, #3
   2be90:	0180      	lsls	r0, r0, #6
   2be92:	e7f1      	b.n	2be78 <http_parse+0xb8>
		client->file_size += atoi(p + 1);
   2be94:	3001      	adds	r0, #1
   2be96:	f012 f848 	bl	3df2a <atoi>
   2be9a:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   2be9e:	4418      	add	r0, r3
   2bea0:	f8c4 0808 	str.w	r0, [r4, #2056]	; 0x808
	p = strstr(client->buf, "connection: close");
   2bea4:	4628      	mov	r0, r5
   2bea6:	492c      	ldr	r1, [pc, #176]	; (2bf58 <http_parse+0x198>)
   2bea8:	f012 fa4c 	bl	3e344 <strstr>
	if (p) {
   2beac:	b160      	cbz	r0, 2bec8 <http_parse+0x108>
   2beae:	4b23      	ldr	r3, [pc, #140]	; (2bf3c <http_parse+0x17c>)
   2beb0:	4821      	ldr	r0, [pc, #132]	; (2bf38 <http_parse+0x178>)
		LOG_WRN("Peer closed connection, will re-connect");
   2beb2:	492a      	ldr	r1, [pc, #168]	; (2bf5c <http_parse+0x19c>)
   2beb4:	1ac0      	subs	r0, r0, r3
   2beb6:	08c0      	lsrs	r0, r0, #3
   2beb8:	0180      	lsls	r0, r0, #6
   2beba:	f040 0002 	orr.w	r0, r0, #2
   2bebe:	f00d fc06 	bl	396ce <log_string_sync>
		client->http.connection_close = true;
   2bec2:	2301      	movs	r3, #1
   2bec4:	f884 3831 	strb.w	r3, [r4, #2097]	; 0x831
	client->http.has_header = true;
   2bec8:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   2beca:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
	client->http.has_header = true;
   2bece:	f884 3830 	strb.w	r3, [r4, #2096]	; 0x830
		if (client->offset != hdr_len) {
   2bed2:	4542      	cmp	r2, r8
   2bed4:	d024      	beq.n	2bf20 <http_parse+0x160>
   2bed6:	4631      	mov	r1, r6
   2bed8:	4628      	mov	r0, r5
   2beda:	eba2 0208 	sub.w	r2, r2, r8
   2bede:	f012 f844 	bl	3df6a <memcpy>
			client->offset -= hdr_len;
   2bee2:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   2bee6:	eba3 0308 	sub.w	r3, r3, r8
			client->offset = 0;
   2beea:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
	client->progress += MIN(client->offset, len);
   2beee:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
   2bef2:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
	if (client->progress != client->file_size &&
   2bef6:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
	client->progress += MIN(client->offset, len);
   2befa:	429f      	cmp	r7, r3
   2befc:	bf94      	ite	ls
   2befe:	19cf      	addls	r7, r1, r7
   2bf00:	18cf      	addhi	r7, r1, r3
	if (client->progress != client->file_size &&
   2bf02:	4297      	cmp	r7, r2
	client->progress += MIN(client->offset, len);
   2bf04:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
	if (client->progress != client->file_size &&
   2bf08:	d00e      	beq.n	2bf28 <http_parse+0x168>
	    client->offset < (client->config.frag_size_override != 0 ?
   2bf0a:	f8d4 0824 	ldr.w	r0, [r4, #2084]	; 0x824
			      client->config.frag_size_override :
   2bf0e:	2800      	cmp	r0, #0
   2bf10:	bf08      	it	eq
   2bf12:	f44f 6000 	moveq.w	r0, #2048	; 0x800
	if (client->progress != client->file_size &&
   2bf16:	4298      	cmp	r0, r3
   2bf18:	bf94      	ite	ls
   2bf1a:	2000      	movls	r0, #0
   2bf1c:	2001      	movhi	r0, #1
   2bf1e:	e78e      	b.n	2be3e <http_parse+0x7e>
			client->offset = 0;
   2bf20:	2300      	movs	r3, #0
   2bf22:	e7e2      	b.n	2beea <http_parse+0x12a>
			return 1;
   2bf24:	2001      	movs	r0, #1
   2bf26:	e78a      	b.n	2be3e <http_parse+0x7e>
	return 0;
   2bf28:	2000      	movs	r0, #0
   2bf2a:	e788      	b.n	2be3e <http_parse+0x7e>
   2bf2c:	00044463 	.word	0x00044463
   2bf30:	0004448e 	.word	0x0004448e
   2bf34:	0004449b 	.word	0x0004449b
   2bf38:	0003f614 	.word	0x0003f614
   2bf3c:	0003f5a4 	.word	0x0003f5a4
   2bf40:	000444a8 	.word	0x000444a8
   2bf44:	000444d0 	.word	0x000444d0
   2bf48:	000444fd 	.word	0x000444fd
   2bf4c:	0004450b 	.word	0x0004450b
   2bf50:	000443c7 	.word	0x000443c7
   2bf54:	0004453b 	.word	0x0004453b
   2bf58:	00044554 	.word	0x00044554
   2bf5c:	00044566 	.word	0x00044566
   2bf60:	000462ab 	.word	0x000462ab

0002bf64 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   2bf64:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   2bf66:	a801      	add	r0, sp, #4
   2bf68:	f000 faac 	bl	2c4c4 <dfu_target_offset_get>
	if (err != 0) {
   2bf6c:	4c18      	ldr	r4, [pc, #96]	; (2bfd0 <download_with_offset+0x6c>)
   2bf6e:	4b19      	ldr	r3, [pc, #100]	; (2bfd4 <download_with_offset+0x70>)
   2bf70:	1ae4      	subs	r4, r4, r3
   2bf72:	08e4      	lsrs	r4, r4, #3
   2bf74:	4603      	mov	r3, r0
   2bf76:	01a4      	lsls	r4, r4, #6
   2bf78:	b138      	cbz	r0, 2bf8a <download_with_offset+0x26>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   2bf7a:	4a17      	ldr	r2, [pc, #92]	; (2bfd8 <download_with_offset+0x74>)
   2bf7c:	4917      	ldr	r1, [pc, #92]	; (2bfdc <download_with_offset+0x78>)
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   2bf7e:	f044 0001 	orr.w	r0, r4, #1
   2bf82:	f00d fba4 	bl	396ce <log_string_sync>
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	downloading = true;
	return;
}
   2bf86:	b003      	add	sp, #12
   2bf88:	bd30      	pop	{r4, r5, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   2bf8a:	4d15      	ldr	r5, [pc, #84]	; (2bfe0 <download_with_offset+0x7c>)
   2bf8c:	4628      	mov	r0, r5
   2bf8e:	f8d5 1810 	ldr.w	r1, [r5, #2064]	; 0x810
   2bf92:	f605 0218 	addw	r2, r5, #2072	; 0x818
   2bf96:	f7ff f965 	bl	2b264 <download_client_connect>
	if (err != 0) {
   2bf9a:	4603      	mov	r3, r0
   2bf9c:	b110      	cbz	r0, 2bfa4 <download_with_offset+0x40>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   2bf9e:	4a0e      	ldr	r2, [pc, #56]	; (2bfd8 <download_with_offset+0x74>)
   2bfa0:	4910      	ldr	r1, [pc, #64]	; (2bfe4 <download_with_offset+0x80>)
   2bfa2:	e7ec      	b.n	2bf7e <download_with_offset+0x1a>
	err = download_client_start(&dlc, dlc.file, offset);
   2bfa4:	4628      	mov	r0, r5
   2bfa6:	9a01      	ldr	r2, [sp, #4]
   2bfa8:	f8d5 1814 	ldr.w	r1, [r5, #2068]	; 0x814
   2bfac:	f7ff fd7c 	bl	2baa8 <download_client_start>
	if (err != 0) {
   2bfb0:	4603      	mov	r3, r0
   2bfb2:	b110      	cbz	r0, 2bfba <download_with_offset+0x56>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   2bfb4:	4a08      	ldr	r2, [pc, #32]	; (2bfd8 <download_with_offset+0x74>)
   2bfb6:	490c      	ldr	r1, [pc, #48]	; (2bfe8 <download_with_offset+0x84>)
   2bfb8:	e7e1      	b.n	2bf7e <download_with_offset+0x1a>
	LOG_INF("Downloading from offset: 0x%x", offset);
   2bfba:	9a01      	ldr	r2, [sp, #4]
   2bfbc:	490b      	ldr	r1, [pc, #44]	; (2bfec <download_with_offset+0x88>)
   2bfbe:	f044 0003 	orr.w	r0, r4, #3
   2bfc2:	f00d fb84 	bl	396ce <log_string_sync>
	downloading = true;
   2bfc6:	2201      	movs	r2, #1
   2bfc8:	4b09      	ldr	r3, [pc, #36]	; (2bff0 <download_with_offset+0x8c>)
   2bfca:	701a      	strb	r2, [r3, #0]
	return;
   2bfcc:	e7db      	b.n	2bf86 <download_with_offset+0x22>
   2bfce:	bf00      	nop
   2bfd0:	0003f624 	.word	0x0003f624
   2bfd4:	0003f5a4 	.word	0x0003f5a4
   2bfd8:	000447b8 	.word	0x000447b8
   2bfdc:	0004458e 	.word	0x0004458e
   2bfe0:	200152f8 	.word	0x200152f8
   2bfe4:	000445b4 	.word	0x000445b4
   2bfe8:	000445d7 	.word	0x000445d7
   2bfec:	00044602 	.word	0x00044602
   2bff0:	2001d5d3 	.word	0x2001d5d3

0002bff4 <send_error_evt>:
{
   2bff4:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   2bff6:	2300      	movs	r3, #0
   2bff8:	2204      	movs	r2, #4
   2bffa:	e9cd 3300 	strd	r3, r3, [sp]
   2bffe:	f88d 2000 	strb.w	r2, [sp]
	downloading = false;
   2c002:	4a05      	ldr	r2, [pc, #20]	; (2c018 <send_error_evt+0x24>)
	const struct fota_download_evt evt = {
   2c004:	f88d 0004 	strb.w	r0, [sp, #4]
	downloading = false;
   2c008:	7013      	strb	r3, [r2, #0]
	callback(&evt);
   2c00a:	4b04      	ldr	r3, [pc, #16]	; (2c01c <send_error_evt+0x28>)
   2c00c:	4668      	mov	r0, sp
   2c00e:	681b      	ldr	r3, [r3, #0]
   2c010:	4798      	blx	r3
}
   2c012:	b003      	add	sp, #12
   2c014:	f85d fb04 	ldr.w	pc, [sp], #4
   2c018:	2001d5d3 	.word	0x2001d5d3
   2c01c:	200183a8 	.word	0x200183a8

0002c020 <download_client_callback>:
{
   2c020:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (event == NULL) {
   2c022:	4605      	mov	r5, r0
{
   2c024:	b085      	sub	sp, #20
	if (event == NULL) {
   2c026:	2800      	cmp	r0, #0
   2c028:	f000 811b 	beq.w	2c262 <download_client_callback+0x242>
	switch (event->id) {
   2c02c:	7803      	ldrb	r3, [r0, #0]
   2c02e:	2b01      	cmp	r3, #1
   2c030:	f000 80e1 	beq.w	2c1f6 <download_client_callback+0x1d6>
   2c034:	2b02      	cmp	r3, #2
   2c036:	f000 80b8 	beq.w	2c1aa <download_client_callback+0x18a>
   2c03a:	2b00      	cmp	r3, #0
   2c03c:	f040 80f1 	bne.w	2c222 <download_client_callback+0x202>
		if (first_fragment) {
   2c040:	4e89      	ldr	r6, [pc, #548]	; (2c268 <download_client_callback+0x248>)
   2c042:	7833      	ldrb	r3, [r6, #0]
   2c044:	2b00      	cmp	r3, #0
   2c046:	d071      	beq.n	2c12c <download_client_callback+0x10c>
			err = download_client_file_size_get(&dlc, &file_size);
   2c048:	4988      	ldr	r1, [pc, #544]	; (2c26c <download_client_callback+0x24c>)
   2c04a:	4889      	ldr	r0, [pc, #548]	; (2c270 <download_client_callback+0x250>)
   2c04c:	f010 f8c1 	bl	3c1d2 <download_client_file_size_get>
			if (err != 0) {
   2c050:	4604      	mov	r4, r0
   2c052:	b108      	cbz	r0, 2c058 <download_client_callback+0x38>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2c054:	2001      	movs	r0, #1
   2c056:	e089      	b.n	2c16c <download_client_callback+0x14c>
			first_fragment = false;
   2c058:	7030      	strb	r0, [r6, #0]
			img_type = dfu_target_img_type(event->fragment.buf,
   2c05a:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2c05e:	f000 f9d9 	bl	2c414 <dfu_target_img_type>
   2c062:	4b84      	ldr	r3, [pc, #528]	; (2c274 <download_client_callback+0x254>)
   2c064:	b2c0      	uxtb	r0, r0
   2c066:	7018      	strb	r0, [r3, #0]
			if ((img_type_expected != DFU_TARGET_IMAGE_TYPE_ANY) &&
   2c068:	4b83      	ldr	r3, [pc, #524]	; (2c278 <download_client_callback+0x258>)
   2c06a:	781b      	ldrb	r3, [r3, #0]
   2c06c:	b343      	cbz	r3, 2c0c0 <download_client_callback+0xa0>
   2c06e:	4298      	cmp	r0, r3
   2c070:	d026      	beq.n	2c0c0 <download_client_callback+0xa0>
   2c072:	4a82      	ldr	r2, [pc, #520]	; (2c27c <download_client_callback+0x25c>)
   2c074:	4c82      	ldr	r4, [pc, #520]	; (2c280 <download_client_callback+0x260>)
				LOG_ERR("FOTA image type %d does not match expected type %d",
   2c076:	4983      	ldr	r1, [pc, #524]	; (2c284 <download_client_callback+0x264>)
   2c078:	1aa4      	subs	r4, r4, r2
   2c07a:	08e4      	lsrs	r4, r4, #3
   2c07c:	01a4      	lsls	r4, r4, #6
   2c07e:	4602      	mov	r2, r0
   2c080:	f044 0001 	orr.w	r0, r4, #1
   2c084:	f00d fb23 	bl	396ce <log_string_sync>
				err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH;
   2c088:	2503      	movs	r5, #3
				err = -EPROTOTYPE;
   2c08a:	f06f 046a 	mvn.w	r4, #106	; 0x6a
				(void)download_client_disconnect(&dlc);
   2c08e:	4878      	ldr	r0, [pc, #480]	; (2c270 <download_client_callback+0x250>)
   2c090:	f7ff fb9c 	bl	2b7cc <download_client_disconnect>
				send_error_evt(err_cause);
   2c094:	4628      	mov	r0, r5
   2c096:	f7ff ffad 	bl	2bff4 <send_error_evt>
				int res = dfu_target_reset();
   2c09a:	f000 fa4d 	bl	2c538 <dfu_target_reset>
				if (res != 0) {
   2c09e:	b150      	cbz	r0, 2c0b6 <download_client_callback+0x96>
   2c0a0:	4a76      	ldr	r2, [pc, #472]	; (2c27c <download_client_callback+0x25c>)
   2c0a2:	4b77      	ldr	r3, [pc, #476]	; (2c280 <download_client_callback+0x260>)
					LOG_ERR("Unable to reset DFU target, err: %d",
   2c0a4:	4978      	ldr	r1, [pc, #480]	; (2c288 <download_client_callback+0x268>)
   2c0a6:	1a9b      	subs	r3, r3, r2
   2c0a8:	08db      	lsrs	r3, r3, #3
   2c0aa:	019b      	lsls	r3, r3, #6
   2c0ac:	4602      	mov	r2, r0
   2c0ae:	f043 0001 	orr.w	r0, r3, #1
   2c0b2:	f00d fb0c 	bl	396ce <log_string_sync>
				first_fragment = true;
   2c0b6:	2301      	movs	r3, #1
   2c0b8:	7033      	strb	r3, [r6, #0]
}
   2c0ba:	4620      	mov	r0, r4
   2c0bc:	b005      	add	sp, #20
   2c0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
				err = dfu_target_init(img_type, file_size,
   2c0c0:	4b6a      	ldr	r3, [pc, #424]	; (2c26c <download_client_callback+0x24c>)
   2c0c2:	4a72      	ldr	r2, [pc, #456]	; (2c28c <download_client_callback+0x26c>)
   2c0c4:	6819      	ldr	r1, [r3, #0]
   2c0c6:	f000 f9cb 	bl	2c460 <dfu_target_init>
				if ((err < 0) && (err != -EBUSY)) {
   2c0ca:	1e04      	subs	r4, r0, #0
   2c0cc:	da0f      	bge.n	2c0ee <download_client_callback+0xce>
   2c0ce:	f114 0f10 	cmn.w	r4, #16
   2c0d2:	d00c      	beq.n	2c0ee <download_client_callback+0xce>
   2c0d4:	4b69      	ldr	r3, [pc, #420]	; (2c27c <download_client_callback+0x25c>)
   2c0d6:	486a      	ldr	r0, [pc, #424]	; (2c280 <download_client_callback+0x260>)
					LOG_ERR("dfu_target_init error %d", err);
   2c0d8:	4622      	mov	r2, r4
   2c0da:	1ac0      	subs	r0, r0, r3
   2c0dc:	08c0      	lsrs	r0, r0, #3
   2c0de:	0180      	lsls	r0, r0, #6
   2c0e0:	496b      	ldr	r1, [pc, #428]	; (2c290 <download_client_callback+0x270>)
   2c0e2:	f040 0001 	orr.w	r0, r0, #1
   2c0e6:	f00d faf2 	bl	396ce <log_string_sync>
					err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED;
   2c0ea:	2501      	movs	r5, #1
   2c0ec:	e7cf      	b.n	2c08e <download_client_callback+0x6e>
			err = dfu_target_offset_get(&offset);
   2c0ee:	a801      	add	r0, sp, #4
   2c0f0:	f000 f9e8 	bl	2c4c4 <dfu_target_offset_get>
			if (err != 0) {
   2c0f4:	b110      	cbz	r0, 2c0fc <download_client_callback+0xdc>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2c0f6:	2001      	movs	r0, #1
   2c0f8:	f7ff ff7c 	bl	2bff4 <send_error_evt>
			if (offset != 0) {
   2c0fc:	9b01      	ldr	r3, [sp, #4]
   2c0fe:	b1ab      	cbz	r3, 2c12c <download_client_callback+0x10c>
				(void)download_client_disconnect(&dlc);
   2c100:	485b      	ldr	r0, [pc, #364]	; (2c270 <download_client_callback+0x250>)
   2c102:	f7ff fb63 	bl	2b7cc <download_client_disconnect>
				k_work_schedule(&dlc_with_offset_work,
   2c106:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2c10a:	2300      	movs	r3, #0
   2c10c:	4861      	ldr	r0, [pc, #388]	; (2c294 <download_client_callback+0x274>)
   2c10e:	f008 fd53 	bl	34bb8 <k_work_schedule>
   2c112:	4b5a      	ldr	r3, [pc, #360]	; (2c27c <download_client_callback+0x25c>)
   2c114:	485a      	ldr	r0, [pc, #360]	; (2c280 <download_client_callback+0x260>)
				LOG_INF("Refuse fragment, restart with offset");
   2c116:	4960      	ldr	r1, [pc, #384]	; (2c298 <download_client_callback+0x278>)
   2c118:	1ac0      	subs	r0, r0, r3
   2c11a:	08c0      	lsrs	r0, r0, #3
   2c11c:	0180      	lsls	r0, r0, #6
   2c11e:	f040 0003 	orr.w	r0, r0, #3
   2c122:	f00d fad4 	bl	396ce <log_string_sync>
				return -1;
   2c126:	f04f 34ff 	mov.w	r4, #4294967295
   2c12a:	e7c6      	b.n	2c0ba <download_client_callback+0x9a>
		err = dfu_target_write(event->fragment.buf,
   2c12c:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2c130:	f000 f9d2 	bl	2c4d8 <dfu_target_write>
		if (err != 0) {
   2c134:	4604      	mov	r4, r0
   2c136:	b1e0      	cbz	r0, 2c172 <download_client_callback+0x152>
   2c138:	4b50      	ldr	r3, [pc, #320]	; (2c27c <download_client_callback+0x25c>)
   2c13a:	4d51      	ldr	r5, [pc, #324]	; (2c280 <download_client_callback+0x260>)
			LOG_ERR("dfu_target_write error %d", err);
   2c13c:	4602      	mov	r2, r0
   2c13e:	1aed      	subs	r5, r5, r3
   2c140:	08ed      	lsrs	r5, r5, #3
   2c142:	01ad      	lsls	r5, r5, #6
   2c144:	f045 0501 	orr.w	r5, r5, #1
   2c148:	4628      	mov	r0, r5
   2c14a:	4954      	ldr	r1, [pc, #336]	; (2c29c <download_client_callback+0x27c>)
   2c14c:	f00d fabf 	bl	396ce <log_string_sync>
			int res = dfu_target_done(false);
   2c150:	2000      	movs	r0, #0
   2c152:	f000 f9cd 	bl	2c4f0 <dfu_target_done>
			if (res != 0) {
   2c156:	b118      	cbz	r0, 2c160 <download_client_callback+0x140>
				LOG_ERR("Unable to free DFU target resources");
   2c158:	4628      	mov	r0, r5
   2c15a:	4951      	ldr	r1, [pc, #324]	; (2c2a0 <download_client_callback+0x280>)
   2c15c:	f00d fab7 	bl	396ce <log_string_sync>
			first_fragment = true;
   2c160:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   2c162:	4843      	ldr	r0, [pc, #268]	; (2c270 <download_client_callback+0x250>)
			first_fragment = true;
   2c164:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   2c166:	f7ff fb31 	bl	2b7cc <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   2c16a:	2002      	movs	r0, #2
   2c16c:	f7ff ff42 	bl	2bff4 <send_error_evt>
			return err;
   2c170:	e7a3      	b.n	2c0ba <download_client_callback+0x9a>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   2c172:	7833      	ldrb	r3, [r6, #0]
   2c174:	2b00      	cmp	r3, #0
   2c176:	d1a0      	bne.n	2c0ba <download_client_callback+0x9a>
			err = dfu_target_offset_get(&offset);
   2c178:	a801      	add	r0, sp, #4
   2c17a:	f000 f9a3 	bl	2c4c4 <dfu_target_offset_get>
			if (err != 0) {
   2c17e:	4604      	mov	r4, r0
   2c180:	2800      	cmp	r0, #0
   2c182:	f47f af67 	bne.w	2c054 <download_client_callback+0x34>
			if (file_size == 0) {
   2c186:	4b39      	ldr	r3, [pc, #228]	; (2c26c <download_client_callback+0x24c>)
   2c188:	681a      	ldr	r2, [r3, #0]
   2c18a:	2a00      	cmp	r2, #0
   2c18c:	f43f af62 	beq.w	2c054 <download_client_callback+0x34>
			send_progress((offset * 100) / file_size);
   2c190:	2364      	movs	r3, #100	; 0x64
   2c192:	9901      	ldr	r1, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   2c194:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   2c198:	434b      	muls	r3, r1
   2c19a:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   2c19e:	9303      	str	r3, [sp, #12]
	callback(&evt);
   2c1a0:	4b40      	ldr	r3, [pc, #256]	; (2c2a4 <download_client_callback+0x284>)
   2c1a2:	a802      	add	r0, sp, #8
   2c1a4:	681b      	ldr	r3, [r3, #0]
   2c1a6:	4798      	blx	r3
}
   2c1a8:	e787      	b.n	2c0ba <download_client_callback+0x9a>
		err = dfu_target_done(true);
   2c1aa:	2001      	movs	r0, #1
   2c1ac:	f000 f9a0 	bl	2c4f0 <dfu_target_done>
		if (err != 0) {
   2c1b0:	4604      	mov	r4, r0
   2c1b2:	b158      	cbz	r0, 2c1cc <download_client_callback+0x1ac>
   2c1b4:	4b31      	ldr	r3, [pc, #196]	; (2c27c <download_client_callback+0x25c>)
   2c1b6:	4832      	ldr	r0, [pc, #200]	; (2c280 <download_client_callback+0x260>)
			LOG_ERR("dfu_target_done error: %d", err);
   2c1b8:	4622      	mov	r2, r4
   2c1ba:	1ac0      	subs	r0, r0, r3
   2c1bc:	08c0      	lsrs	r0, r0, #3
   2c1be:	0180      	lsls	r0, r0, #6
   2c1c0:	4939      	ldr	r1, [pc, #228]	; (2c2a8 <download_client_callback+0x288>)
   2c1c2:	f040 0001 	orr.w	r0, r0, #1
   2c1c6:	f00d fa82 	bl	396ce <log_string_sync>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2c1ca:	e743      	b.n	2c054 <download_client_callback+0x34>
		err = download_client_disconnect(&dlc);
   2c1cc:	4828      	ldr	r0, [pc, #160]	; (2c270 <download_client_callback+0x250>)
   2c1ce:	f7ff fafd 	bl	2b7cc <download_client_disconnect>
		if (err != 0) {
   2c1d2:	4604      	mov	r4, r0
   2c1d4:	2800      	cmp	r0, #0
   2c1d6:	f47f af3d 	bne.w	2c054 <download_client_callback+0x34>
	const struct fota_download_evt evt = {
   2c1da:	2501      	movs	r5, #1
	callback(&evt);
   2c1dc:	4b31      	ldr	r3, [pc, #196]	; (2c2a4 <download_client_callback+0x284>)
	const struct fota_download_evt evt = {
   2c1de:	e9cd 0002 	strd	r0, r0, [sp, #8]
	callback(&evt);
   2c1e2:	681b      	ldr	r3, [r3, #0]
	const struct fota_download_evt evt = {
   2c1e4:	f88d 5008 	strb.w	r5, [sp, #8]
	callback(&evt);
   2c1e8:	a802      	add	r0, sp, #8
   2c1ea:	4798      	blx	r3
		first_fragment = true;
   2c1ec:	4b1e      	ldr	r3, [pc, #120]	; (2c268 <download_client_callback+0x248>)
   2c1ee:	701d      	strb	r5, [r3, #0]
		downloading = false;
   2c1f0:	4b2e      	ldr	r3, [pc, #184]	; (2c2ac <download_client_callback+0x28c>)
   2c1f2:	701c      	strb	r4, [r3, #0]
		break;
   2c1f4:	e761      	b.n	2c0ba <download_client_callback+0x9a>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   2c1f6:	4e2e      	ldr	r6, [pc, #184]	; (2c2b0 <download_client_callback+0x290>)
   2c1f8:	4c21      	ldr	r4, [pc, #132]	; (2c280 <download_client_callback+0x260>)
   2c1fa:	6832      	ldr	r2, [r6, #0]
   2c1fc:	4f1f      	ldr	r7, [pc, #124]	; (2c27c <download_client_callback+0x25c>)
   2c1fe:	b192      	cbz	r2, 2c226 <download_client_callback+0x206>
   2c200:	6843      	ldr	r3, [r0, #4]
   2c202:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2c206:	d001      	beq.n	2c20c <download_client_callback+0x1ec>
   2c208:	3368      	adds	r3, #104	; 0x68
   2c20a:	d10c      	bne.n	2c226 <download_client_callback+0x206>
   2c20c:	1be0      	subs	r0, r4, r7
   2c20e:	08c0      	lsrs	r0, r0, #3
			LOG_WRN("Download socket error. %d retries left...",
   2c210:	0180      	lsls	r0, r0, #6
   2c212:	4928      	ldr	r1, [pc, #160]	; (2c2b4 <download_client_callback+0x294>)
   2c214:	f040 0002 	orr.w	r0, r0, #2
   2c218:	f00d fa59 	bl	396ce <log_string_sync>
			socket_retries_left--;
   2c21c:	6833      	ldr	r3, [r6, #0]
   2c21e:	3b01      	subs	r3, #1
   2c220:	6033      	str	r3, [r6, #0]
	switch (event->id) {
   2c222:	2400      	movs	r4, #0
   2c224:	e749      	b.n	2c0ba <download_client_callback+0x9a>
   2c226:	1be4      	subs	r4, r4, r7
   2c228:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("Download client error");
   2c22a:	01a4      	lsls	r4, r4, #6
			download_client_disconnect(&dlc);
   2c22c:	4810      	ldr	r0, [pc, #64]	; (2c270 <download_client_callback+0x250>)
			LOG_ERR("Download client error");
   2c22e:	f044 0401 	orr.w	r4, r4, #1
			download_client_disconnect(&dlc);
   2c232:	f7ff facb 	bl	2b7cc <download_client_disconnect>
			LOG_ERR("Download client error");
   2c236:	4620      	mov	r0, r4
   2c238:	491f      	ldr	r1, [pc, #124]	; (2c2b8 <download_client_callback+0x298>)
   2c23a:	f00d fa48 	bl	396ce <log_string_sync>
			err = dfu_target_done(false);
   2c23e:	2000      	movs	r0, #0
   2c240:	f000 f956 	bl	2c4f0 <dfu_target_done>
			if (err == -EACCES) {
   2c244:	f110 0f0d 	cmn.w	r0, #13
   2c248:	d004      	beq.n	2c254 <download_client_callback+0x234>
			} else if (err != 0) {
   2c24a:	b118      	cbz	r0, 2c254 <download_client_callback+0x234>
				LOG_ERR("Unable to deinitialze resources "
   2c24c:	4620      	mov	r0, r4
   2c24e:	491b      	ldr	r1, [pc, #108]	; (2c2bc <download_client_callback+0x29c>)
   2c250:	f00d fa3d 	bl	396ce <log_string_sync>
			first_fragment = true;
   2c254:	2001      	movs	r0, #1
   2c256:	4b04      	ldr	r3, [pc, #16]	; (2c268 <download_client_callback+0x248>)
   2c258:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2c25a:	f7ff fecb 	bl	2bff4 <send_error_evt>
			return event->error;
   2c25e:	686c      	ldr	r4, [r5, #4]
   2c260:	e72b      	b.n	2c0ba <download_client_callback+0x9a>
		return -EINVAL;
   2c262:	f06f 0415 	mvn.w	r4, #21
   2c266:	e728      	b.n	2c0ba <download_client_callback+0x9a>
   2c268:	2001d694 	.word	0x2001d694
   2c26c:	200183ac 	.word	0x200183ac
   2c270:	200152f8 	.word	0x200152f8
   2c274:	2001d695 	.word	0x2001d695
   2c278:	2001d696 	.word	0x2001d696
   2c27c:	0003f5a4 	.word	0x0003f5a4
   2c280:	0003f624 	.word	0x0003f624
   2c284:	00044620 	.word	0x00044620
   2c288:	0004466c 	.word	0x0004466c
   2c28c:	0002c2c1 	.word	0x0002c2c1
   2c290:	00044653 	.word	0x00044653
   2c294:	20016c10 	.word	0x20016c10
   2c298:	00044690 	.word	0x00044690
   2c29c:	000446b5 	.word	0x000446b5
   2c2a0:	000446cf 	.word	0x000446cf
   2c2a4:	200183a8 	.word	0x200183a8
   2c2a8:	000446f3 	.word	0x000446f3
   2c2ac:	2001d5d3 	.word	0x2001d5d3
   2c2b0:	200185b0 	.word	0x200185b0
   2c2b4:	0004470d 	.word	0x0004470d
   2c2b8:	00044737 	.word	0x00044737
   2c2bc:	0004474d 	.word	0x0004474d

0002c2c0 <dfu_target_callback_handler>:
{
   2c2c0:	b507      	push	{r0, r1, r2, lr}
	switch (evt) {
   2c2c2:	b128      	cbz	r0, 2c2d0 <dfu_target_callback_handler+0x10>
   2c2c4:	2801      	cmp	r0, #1
   2c2c6:	d00f      	beq.n	2c2e8 <dfu_target_callback_handler+0x28>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2c2c8:	2001      	movs	r0, #1
   2c2ca:	f7ff fe93 	bl	2bff4 <send_error_evt>
}
   2c2ce:	e008      	b.n	2c2e2 <dfu_target_callback_handler+0x22>
	const struct fota_download_evt evt = {
   2c2d0:	2302      	movs	r3, #2
   2c2d2:	e9cd 0000 	strd	r0, r0, [sp]
   2c2d6:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   2c2da:	4b06      	ldr	r3, [pc, #24]	; (2c2f4 <dfu_target_callback_handler+0x34>)
   2c2dc:	4668      	mov	r0, sp
   2c2de:	681b      	ldr	r3, [r3, #0]
   2c2e0:	4798      	blx	r3
}
   2c2e2:	b003      	add	sp, #12
   2c2e4:	f85d fb04 	ldr.w	pc, [sp], #4
	const struct fota_download_evt evt = {
   2c2e8:	2300      	movs	r3, #0
   2c2ea:	e9cd 3300 	strd	r3, r3, [sp]
   2c2ee:	2303      	movs	r3, #3
   2c2f0:	e7f1      	b.n	2c2d6 <dfu_target_callback_handler+0x16>
   2c2f2:	bf00      	nop
   2c2f4:	200183a8 	.word	0x200183a8

0002c2f8 <fota_download_start_with_image_type>:
}

int fota_download_start_with_image_type(const char *host, const char *file,
	int sec_tag, const char *apn, size_t fragment_size,
	const enum dfu_target_image_type expected_type)
{
   2c2f8:	b530      	push	{r4, r5, lr}
   2c2fa:	b087      	sub	sp, #28
	 */
	static char file_buf[FILE_BUF_LEN];
	const char *file_buf_ptr = file_buf;
	int err = -1;

	struct download_client_cfg config = {
   2c2fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
		.sec_tag = sec_tag,
		.apn = apn,
		.frag_size_override = fragment_size,
		.set_tls_hostname = (sec_tag != -1),
   2c300:	3201      	adds	r2, #1
	struct download_client_cfg config = {
   2c302:	f04f 0400 	mov.w	r4, #0
		.set_tls_hostname = (sec_tag != -1),
   2c306:	bf18      	it	ne
   2c308:	2201      	movne	r2, #1
	struct download_client_cfg config = {
   2c30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c30c:	9405      	str	r4, [sp, #20]
   2c30e:	9403      	str	r4, [sp, #12]
   2c310:	9304      	str	r3, [sp, #16]
	};

	if (host == NULL || file == NULL || callback == NULL) {
   2c312:	4604      	mov	r4, r0
		.set_tls_hostname = (sec_tag != -1),
   2c314:	f88d 2014 	strb.w	r2, [sp, #20]
	if (host == NULL || file == NULL || callback == NULL) {
   2c318:	b340      	cbz	r0, 2c36c <fota_download_start_with_image_type+0x74>
   2c31a:	b339      	cbz	r1, 2c36c <fota_download_start_with_image_type+0x74>
   2c31c:	4b16      	ldr	r3, [pc, #88]	; (2c378 <fota_download_start_with_image_type+0x80>)
   2c31e:	681b      	ldr	r3, [r3, #0]
   2c320:	b323      	cbz	r3, 2c36c <fota_download_start_with_image_type+0x74>
		return -EINVAL;
	}

	if (downloading) {
   2c322:	4d16      	ldr	r5, [pc, #88]	; (2c37c <fota_download_start_with_image_type+0x84>)
   2c324:	782b      	ldrb	r3, [r5, #0]
   2c326:	bb23      	cbnz	r3, 2c372 <fota_download_start_with_image_type+0x7a>
		return -EALREADY;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   2c328:	2202      	movs	r2, #2
   2c32a:	4b15      	ldr	r3, [pc, #84]	; (2c380 <fota_download_start_with_image_type+0x88>)

	strncpy(file_buf, file, sizeof(file_buf));
   2c32c:	4815      	ldr	r0, [pc, #84]	; (2c384 <fota_download_start_with_image_type+0x8c>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   2c32e:	601a      	str	r2, [r3, #0]
	strncpy(file_buf, file, sizeof(file_buf));
   2c330:	22c0      	movs	r2, #192	; 0xc0
   2c332:	f011 ffe7 	bl	3e304 <strncpy>
		LOG_INF("B1 update, selected file:\n%s", log_strdup(update));
		file_buf_ptr = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   2c336:	4621      	mov	r1, r4
   2c338:	4813      	ldr	r0, [pc, #76]	; (2c388 <fota_download_start_with_image_type+0x90>)
   2c33a:	aa01      	add	r2, sp, #4
   2c33c:	f7fe ff92 	bl	2b264 <download_client_connect>
	if (err != 0) {
   2c340:	4604      	mov	r4, r0
   2c342:	b968      	cbnz	r0, 2c360 <fota_download_start_with_image_type+0x68>
		return err;
	}

	img_type_expected = expected_type;
   2c344:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   2c348:	4b10      	ldr	r3, [pc, #64]	; (2c38c <fota_download_start_with_image_type+0x94>)

	err = download_client_start(&dlc, file_buf_ptr, 0);
   2c34a:	490e      	ldr	r1, [pc, #56]	; (2c384 <fota_download_start_with_image_type+0x8c>)
	img_type_expected = expected_type;
   2c34c:	701a      	strb	r2, [r3, #0]
	err = download_client_start(&dlc, file_buf_ptr, 0);
   2c34e:	4602      	mov	r2, r0
   2c350:	480d      	ldr	r0, [pc, #52]	; (2c388 <fota_download_start_with_image_type+0x90>)
   2c352:	f7ff fba9 	bl	2baa8 <download_client_start>
	if (err != 0) {
   2c356:	4604      	mov	r4, r0
   2c358:	b128      	cbz	r0, 2c366 <fota_download_start_with_image_type+0x6e>
		download_client_disconnect(&dlc);
   2c35a:	480b      	ldr	r0, [pc, #44]	; (2c388 <fota_download_start_with_image_type+0x90>)
   2c35c:	f7ff fa36 	bl	2b7cc <download_client_disconnect>
	}

	downloading = true;

	return 0;
}
   2c360:	4620      	mov	r0, r4
   2c362:	b007      	add	sp, #28
   2c364:	bd30      	pop	{r4, r5, pc}
	downloading = true;
   2c366:	2301      	movs	r3, #1
   2c368:	702b      	strb	r3, [r5, #0]
	return 0;
   2c36a:	e7f9      	b.n	2c360 <fota_download_start_with_image_type+0x68>
		return -EINVAL;
   2c36c:	f06f 0415 	mvn.w	r4, #21
   2c370:	e7f6      	b.n	2c360 <fota_download_start_with_image_type+0x68>
		return -EALREADY;
   2c372:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2c376:	e7f3      	b.n	2c360 <fota_download_start_with_image_type+0x68>
   2c378:	200183a8 	.word	0x200183a8
   2c37c:	2001d5d3 	.word	0x2001d5d3
   2c380:	200185b0 	.word	0x200185b0
   2c384:	2001d5d4 	.word	0x2001d5d4
   2c388:	200152f8 	.word	0x200152f8
   2c38c:	2001d696 	.word	0x2001d696

0002c390 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   2c390:	b510      	push	{r4, lr}
	if (client_callback == NULL) {
   2c392:	b328      	cbz	r0, 2c3e0 <fota_download_init+0x50>
		return -EINVAL;
	}

	int err;

	callback = client_callback;
   2c394:	4b14      	ldr	r3, [pc, #80]	; (2c3e8 <fota_download_init+0x58>)

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	/* Set the required buffer for MCUboot targets */
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   2c396:	f44f 7100 	mov.w	r1, #512	; 0x200
	callback = client_callback;
   2c39a:	6018      	str	r0, [r3, #0]
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   2c39c:	4813      	ldr	r0, [pc, #76]	; (2c3ec <fota_download_init+0x5c>)
   2c39e:	f000 fbab 	bl	2caf8 <dfu_target_mcuboot_set_buf>
	if (err) {
   2c3a2:	4604      	mov	r4, r0
   2c3a4:	b168      	cbz	r0, 2c3c2 <fota_download_init+0x32>
   2c3a6:	4b12      	ldr	r3, [pc, #72]	; (2c3f0 <fota_download_init+0x60>)
   2c3a8:	4812      	ldr	r0, [pc, #72]	; (2c3f4 <fota_download_init+0x64>)
		LOG_ERR("%s failed to set MCUboot flash buffer %d",
   2c3aa:	4a13      	ldr	r2, [pc, #76]	; (2c3f8 <fota_download_init+0x68>)
   2c3ac:	1ac0      	subs	r0, r0, r3
   2c3ae:	08c0      	lsrs	r0, r0, #3
   2c3b0:	0180      	lsls	r0, r0, #6
   2c3b2:	4623      	mov	r3, r4
   2c3b4:	4911      	ldr	r1, [pc, #68]	; (2c3fc <fota_download_init+0x6c>)
   2c3b6:	f040 0001 	orr.w	r0, r0, #1
   2c3ba:	f00d f988 	bl	396ce <log_string_sync>
		return err;
	}

	first_fragment = true;
	return 0;
}
   2c3be:	4620      	mov	r0, r4
   2c3c0:	bd10      	pop	{r4, pc}
	k_work_init_delayable(&dlc_with_offset_work, download_with_offset);
   2c3c2:	490f      	ldr	r1, [pc, #60]	; (2c400 <fota_download_init+0x70>)
   2c3c4:	480f      	ldr	r0, [pc, #60]	; (2c404 <fota_download_init+0x74>)
   2c3c6:	f008 fb4f 	bl	34a68 <k_work_init_delayable>
	err = download_client_init(&dlc, download_client_callback);
   2c3ca:	490f      	ldr	r1, [pc, #60]	; (2c408 <fota_download_init+0x78>)
   2c3cc:	480f      	ldr	r0, [pc, #60]	; (2c40c <fota_download_init+0x7c>)
   2c3ce:	f7fe ff1b 	bl	2b208 <download_client_init>
	if (err != 0) {
   2c3d2:	4604      	mov	r4, r0
   2c3d4:	2800      	cmp	r0, #0
   2c3d6:	d1f2      	bne.n	2c3be <fota_download_init+0x2e>
	first_fragment = true;
   2c3d8:	2201      	movs	r2, #1
   2c3da:	4b0d      	ldr	r3, [pc, #52]	; (2c410 <fota_download_init+0x80>)
   2c3dc:	701a      	strb	r2, [r3, #0]
	return 0;
   2c3de:	e7ee      	b.n	2c3be <fota_download_init+0x2e>
		return -EINVAL;
   2c3e0:	f06f 0415 	mvn.w	r4, #21
   2c3e4:	e7eb      	b.n	2c3be <fota_download_init+0x2e>
   2c3e6:	bf00      	nop
   2c3e8:	200183a8 	.word	0x200183a8
   2c3ec:	200183b0 	.word	0x200183b0
   2c3f0:	0003f5a4 	.word	0x0003f5a4
   2c3f4:	0003f624 	.word	0x0003f624
   2c3f8:	000447cd 	.word	0x000447cd
   2c3fc:	00044781 	.word	0x00044781
   2c400:	0002bf65 	.word	0x0002bf65
   2c404:	20016c10 	.word	0x20016c10
   2c408:	0002c021 	.word	0x0002c021
   2c40c:	200152f8 	.word	0x200152f8
   2c410:	2001d694 	.word	0x2001d694

0002c414 <dfu_target_img_type>:

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   2c414:	291f      	cmp	r1, #31
{
   2c416:	b510      	push	{r4, lr}
   2c418:	4604      	mov	r4, r0
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   2c41a:	d913      	bls.n	2c444 <dfu_target_img_type+0x30>
		return -EAGAIN;
	}
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   2c41c:	f000 fb64 	bl	2cae8 <dfu_target_mcuboot_identify>
   2c420:	b998      	cbnz	r0, 2c44a <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (dfu_target_modem_delta_identify(buf)) {
   2c422:	4620      	mov	r0, r4
   2c424:	f000 f9ce 	bl	2c7c4 <dfu_target_modem_delta_identify>
   2c428:	b988      	cbnz	r0, 2c44e <dfu_target_img_type+0x3a>
   2c42a:	4b0a      	ldr	r3, [pc, #40]	; (2c454 <dfu_target_img_type+0x40>)
   2c42c:	480a      	ldr	r0, [pc, #40]	; (2c458 <dfu_target_img_type+0x44>)
#ifdef CONFIG_DFU_TARGET_FULL_MODEM
	if (dfu_target_full_modem_identify(buf)) {
		return DFU_TARGET_IMAGE_TYPE_FULL_MODEM;
	}
#endif
	LOG_ERR("No supported image type found");
   2c42e:	490b      	ldr	r1, [pc, #44]	; (2c45c <dfu_target_img_type+0x48>)
   2c430:	1ac0      	subs	r0, r0, r3
   2c432:	08c0      	lsrs	r0, r0, #3
   2c434:	0180      	lsls	r0, r0, #6
   2c436:	f040 0001 	orr.w	r0, r0, #1
   2c43a:	f00d f948 	bl	396ce <log_string_sync>
	return -ENOTSUP;
   2c43e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2c442:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   2c444:	f06f 000a 	mvn.w	r0, #10
   2c448:	e7fb      	b.n	2c442 <dfu_target_img_type+0x2e>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2c44a:	2001      	movs	r0, #1
   2c44c:	e7f9      	b.n	2c442 <dfu_target_img_type+0x2e>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   2c44e:	2002      	movs	r0, #2
   2c450:	e7f7      	b.n	2c442 <dfu_target_img_type+0x2e>
   2c452:	bf00      	nop
   2c454:	0003f5a4 	.word	0x0003f5a4
   2c458:	0003f5ec 	.word	0x0003f5ec
   2c45c:	000447e0 	.word	0x000447e0

0002c460 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   2c460:	4603      	mov	r3, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   2c462:	2b01      	cmp	r3, #1
{
   2c464:	4608      	mov	r0, r1
   2c466:	b570      	push	{r4, r5, r6, lr}
   2c468:	4611      	mov	r1, r2
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   2c46a:	d00e      	beq.n	2c48a <dfu_target_init+0x2a>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   2c46c:	2b02      	cmp	r3, #2
   2c46e:	d018      	beq.n	2c4a2 <dfu_target_init+0x42>
   2c470:	4b0e      	ldr	r3, [pc, #56]	; (2c4ac <dfu_target_init+0x4c>)
   2c472:	480f      	ldr	r0, [pc, #60]	; (2c4b0 <dfu_target_init+0x50>)
	if (img_type == DFU_TARGET_IMAGE_TYPE_FULL_MODEM) {
		new_target = &dfu_target_full_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   2c474:	490f      	ldr	r1, [pc, #60]	; (2c4b4 <dfu_target_init+0x54>)
   2c476:	1ac0      	subs	r0, r0, r3
   2c478:	08c0      	lsrs	r0, r0, #3
   2c47a:	0180      	lsls	r0, r0, #6
   2c47c:	f040 0001 	orr.w	r0, r0, #1
   2c480:	f00d f925 	bl	396ce <log_string_sync>
		return -ENOTSUP;
   2c484:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   2c488:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   2c48a:	4c0b      	ldr	r4, [pc, #44]	; (2c4b8 <dfu_target_init+0x58>)
	if (new_target == current_target
   2c48c:	4d0b      	ldr	r5, [pc, #44]	; (2c4bc <dfu_target_init+0x5c>)
   2c48e:	682a      	ldr	r2, [r5, #0]
   2c490:	42a2      	cmp	r2, r4
   2c492:	d101      	bne.n	2c498 <dfu_target_init+0x38>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   2c494:	2b02      	cmp	r3, #2
   2c496:	d106      	bne.n	2c4a6 <dfu_target_init+0x46>
	return current_target->init(file_size, cb);
   2c498:	6823      	ldr	r3, [r4, #0]
	current_target = new_target;
   2c49a:	602c      	str	r4, [r5, #0]
}
   2c49c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, cb);
   2c4a0:	4718      	bx	r3
		new_target = &dfu_target_modem_delta;
   2c4a2:	4c07      	ldr	r4, [pc, #28]	; (2c4c0 <dfu_target_init+0x60>)
   2c4a4:	e7f2      	b.n	2c48c <dfu_target_init+0x2c>
		return 0;
   2c4a6:	2000      	movs	r0, #0
   2c4a8:	e7ee      	b.n	2c488 <dfu_target_init+0x28>
   2c4aa:	bf00      	nop
   2c4ac:	0003f5a4 	.word	0x0003f5a4
   2c4b0:	0003f5ec 	.word	0x0003f5ec
   2c4b4:	000447fe 	.word	0x000447fe
   2c4b8:	0003ffb8 	.word	0x0003ffb8
   2c4bc:	200185b4 	.word	0x200185b4
   2c4c0:	0003ffc8 	.word	0x0003ffc8

0002c4c4 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   2c4c4:	4b03      	ldr	r3, [pc, #12]	; (2c4d4 <dfu_target_offset_get+0x10>)
   2c4c6:	681b      	ldr	r3, [r3, #0]
   2c4c8:	b10b      	cbz	r3, 2c4ce <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   2c4ca:	685b      	ldr	r3, [r3, #4]
   2c4cc:	4718      	bx	r3
}
   2c4ce:	f06f 000c 	mvn.w	r0, #12
   2c4d2:	4770      	bx	lr
   2c4d4:	200185b4 	.word	0x200185b4

0002c4d8 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   2c4d8:	4a04      	ldr	r2, [pc, #16]	; (2c4ec <dfu_target_write+0x14>)
   2c4da:	6812      	ldr	r2, [r2, #0]
   2c4dc:	b112      	cbz	r2, 2c4e4 <dfu_target_write+0xc>
   2c4de:	b108      	cbz	r0, 2c4e4 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   2c4e0:	6893      	ldr	r3, [r2, #8]
   2c4e2:	4718      	bx	r3
}
   2c4e4:	f06f 000c 	mvn.w	r0, #12
   2c4e8:	4770      	bx	lr
   2c4ea:	bf00      	nop
   2c4ec:	200185b4 	.word	0x200185b4

0002c4f0 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   2c4f0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   2c4f2:	4e0d      	ldr	r6, [pc, #52]	; (2c528 <dfu_target_done+0x38>)
{
   2c4f4:	4605      	mov	r5, r0
	if (current_target == NULL) {
   2c4f6:	6833      	ldr	r3, [r6, #0]
   2c4f8:	b19b      	cbz	r3, 2c522 <dfu_target_done+0x32>
		return -EACCES;
	}

	err = current_target->done(successful);
   2c4fa:	68db      	ldr	r3, [r3, #12]
   2c4fc:	4798      	blx	r3
	if (err != 0) {
   2c4fe:	4604      	mov	r4, r0
   2c500:	b158      	cbz	r0, 2c51a <dfu_target_done+0x2a>
   2c502:	480a      	ldr	r0, [pc, #40]	; (2c52c <dfu_target_done+0x3c>)
   2c504:	4b0a      	ldr	r3, [pc, #40]	; (2c530 <dfu_target_done+0x40>)
		LOG_ERR("Unable to clean up dfu_target");
   2c506:	490b      	ldr	r1, [pc, #44]	; (2c534 <dfu_target_done+0x44>)
   2c508:	1a1b      	subs	r3, r3, r0
   2c50a:	08db      	lsrs	r3, r3, #3
   2c50c:	019b      	lsls	r3, r3, #6
   2c50e:	f043 0001 	orr.w	r0, r3, #1
   2c512:	f00d f8dc 	bl	396ce <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   2c516:	4620      	mov	r0, r4
   2c518:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   2c51a:	2d00      	cmp	r5, #0
   2c51c:	d0fb      	beq.n	2c516 <dfu_target_done+0x26>
		current_target = NULL;
   2c51e:	6030      	str	r0, [r6, #0]
   2c520:	e7f9      	b.n	2c516 <dfu_target_done+0x26>
		return -EACCES;
   2c522:	f06f 040c 	mvn.w	r4, #12
   2c526:	e7f6      	b.n	2c516 <dfu_target_done+0x26>
   2c528:	200185b4 	.word	0x200185b4
   2c52c:	0003f5a4 	.word	0x0003f5a4
   2c530:	0003f5ec 	.word	0x0003f5ec
   2c534:	00044811 	.word	0x00044811

0002c538 <dfu_target_reset>:

int dfu_target_reset(void)
{
   2c538:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   2c53a:	4d0b      	ldr	r5, [pc, #44]	; (2c568 <dfu_target_reset+0x30>)
   2c53c:	682a      	ldr	r2, [r5, #0]
   2c53e:	b182      	cbz	r2, 2c562 <dfu_target_reset+0x2a>
		int err = current_target->done(false);
   2c540:	2000      	movs	r0, #0
   2c542:	68d3      	ldr	r3, [r2, #12]
   2c544:	4798      	blx	r3

		if (err != 0) {
   2c546:	4604      	mov	r4, r0
   2c548:	b158      	cbz	r0, 2c562 <dfu_target_reset+0x2a>
   2c54a:	4808      	ldr	r0, [pc, #32]	; (2c56c <dfu_target_reset+0x34>)
   2c54c:	4b08      	ldr	r3, [pc, #32]	; (2c570 <dfu_target_reset+0x38>)
			LOG_ERR("Unable to clean up dfu_target");
   2c54e:	4909      	ldr	r1, [pc, #36]	; (2c574 <dfu_target_reset+0x3c>)
   2c550:	1ac0      	subs	r0, r0, r3
   2c552:	08c0      	lsrs	r0, r0, #3
   2c554:	0180      	lsls	r0, r0, #6
   2c556:	f040 0001 	orr.w	r0, r0, #1
   2c55a:	f00d f8b8 	bl	396ce <log_string_sync>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   2c55e:	4620      	mov	r0, r4
   2c560:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   2c562:	2400      	movs	r4, #0
   2c564:	602c      	str	r4, [r5, #0]
	return 0;
   2c566:	e7fa      	b.n	2c55e <dfu_target_reset+0x26>
   2c568:	200185b4 	.word	0x200185b4
   2c56c:	0003f5ec 	.word	0x0003f5ec
   2c570:	0003f5a4 	.word	0x0003f5a4
   2c574:	00044811 	.word	0x00044811

0002c578 <dfu_target_stream_get_stream>:
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

struct stream_flash_ctx *dfu_target_stream_get_stream(void)
{
	return &stream;
}
   2c578:	4800      	ldr	r0, [pc, #0]	; (2c57c <dfu_target_stream_get_stream+0x4>)
   2c57a:	4770      	bx	lr
   2c57c:	200185bc 	.word	0x200185bc

0002c580 <dfu_target_stream_init>:

int dfu_target_stream_init(const struct dfu_target_stream_init *init)
{
   2c580:	b530      	push	{r4, r5, lr}
	int err;

	if (current_id != NULL) {
   2c582:	4c15      	ldr	r4, [pc, #84]	; (2c5d8 <dfu_target_stream_init+0x58>)
{
   2c584:	b085      	sub	sp, #20
	if (current_id != NULL) {
   2c586:	6823      	ldr	r3, [r4, #0]
   2c588:	bb03      	cbnz	r3, 2c5cc <dfu_target_stream_init+0x4c>
		return -EFAULT;
	}

	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   2c58a:	b310      	cbz	r0, 2c5d2 <dfu_target_stream_init+0x52>
   2c58c:	6805      	ldr	r5, [r0, #0]
   2c58e:	b305      	cbz	r5, 2c5d2 <dfu_target_stream_init+0x52>
   2c590:	6841      	ldr	r1, [r0, #4]
   2c592:	b1f1      	cbz	r1, 2c5d2 <dfu_target_stream_init+0x52>
	    init->buf == NULL) {
   2c594:	6882      	ldr	r2, [r0, #8]
	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   2c596:	b1e2      	cbz	r2, 2c5d2 <dfu_target_stream_init+0x52>
		return -EINVAL;
	}

	current_id = init->id;
   2c598:	6025      	str	r5, [r4, #0]

	err = stream_flash_init(&stream, init->fdev, init->buf, init->len,
   2c59a:	9302      	str	r3, [sp, #8]
   2c59c:	6943      	ldr	r3, [r0, #20]
   2c59e:	9301      	str	r3, [sp, #4]
   2c5a0:	6903      	ldr	r3, [r0, #16]
   2c5a2:	9300      	str	r3, [sp, #0]
   2c5a4:	68c3      	ldr	r3, [r0, #12]
   2c5a6:	480d      	ldr	r0, [pc, #52]	; (2c5dc <dfu_target_stream_init+0x5c>)
   2c5a8:	f7f5 fbe0 	bl	21d6c <stream_flash_init>
				init->offset, init->size, NULL);
	if (err) {
   2c5ac:	4604      	mov	r4, r0
   2c5ae:	b150      	cbz	r0, 2c5c6 <dfu_target_stream_init+0x46>
   2c5b0:	480b      	ldr	r0, [pc, #44]	; (2c5e0 <dfu_target_stream_init+0x60>)
   2c5b2:	4b0c      	ldr	r3, [pc, #48]	; (2c5e4 <dfu_target_stream_init+0x64>)
		LOG_ERR("stream_flash_init failed (err %d)", err);
   2c5b4:	4622      	mov	r2, r4
   2c5b6:	1ac0      	subs	r0, r0, r3
   2c5b8:	08c0      	lsrs	r0, r0, #3
   2c5ba:	0180      	lsls	r0, r0, #6
   2c5bc:	490a      	ldr	r1, [pc, #40]	; (2c5e8 <dfu_target_stream_init+0x68>)
   2c5be:	f040 0001 	orr.w	r0, r0, #1
   2c5c2:	f00d f884 	bl	396ce <log_string_sync>
		return err;
	}
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

	return 0;
}
   2c5c6:	4620      	mov	r0, r4
   2c5c8:	b005      	add	sp, #20
   2c5ca:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   2c5cc:	f06f 040d 	mvn.w	r4, #13
   2c5d0:	e7f9      	b.n	2c5c6 <dfu_target_stream_init+0x46>
		return -EINVAL;
   2c5d2:	f06f 0415 	mvn.w	r4, #21
   2c5d6:	e7f6      	b.n	2c5c6 <dfu_target_stream_init+0x46>
   2c5d8:	200185b8 	.word	0x200185b8
   2c5dc:	200185bc 	.word	0x200185bc
   2c5e0:	0003f604 	.word	0x0003f604
   2c5e4:	0003f5a4 	.word	0x0003f5a4
   2c5e8:	0004482f 	.word	0x0004482f

0002c5ec <dfu_target_stream_offset_get>:

int dfu_target_stream_offset_get(size_t *out)
{
   2c5ec:	b510      	push	{r4, lr}
   2c5ee:	4604      	mov	r4, r0
	*out = stream_flash_bytes_written(&stream);
   2c5f0:	4802      	ldr	r0, [pc, #8]	; (2c5fc <dfu_target_stream_offset_get+0x10>)
   2c5f2:	f00d fe05 	bl	3a200 <stream_flash_bytes_written>
   2c5f6:	6020      	str	r0, [r4, #0]

	return 0;
}
   2c5f8:	2000      	movs	r0, #0
   2c5fa:	bd10      	pop	{r4, pc}
   2c5fc:	200185bc 	.word	0x200185bc

0002c600 <dfu_target_stream_write>:

int dfu_target_stream_write(const uint8_t *buf, size_t len)
{
   2c600:	460a      	mov	r2, r1
   2c602:	b510      	push	{r4, lr}
	int err = stream_flash_buffered_write(&stream, buf, len, false);
   2c604:	4601      	mov	r1, r0
   2c606:	2300      	movs	r3, #0
   2c608:	4808      	ldr	r0, [pc, #32]	; (2c62c <dfu_target_stream_write+0x2c>)
   2c60a:	f00d fdb5 	bl	3a178 <stream_flash_buffered_write>

	if (err != 0) {
   2c60e:	4604      	mov	r4, r0
   2c610:	b150      	cbz	r0, 2c628 <dfu_target_stream_write+0x28>
   2c612:	4807      	ldr	r0, [pc, #28]	; (2c630 <dfu_target_stream_write+0x30>)
   2c614:	4b07      	ldr	r3, [pc, #28]	; (2c634 <dfu_target_stream_write+0x34>)
		LOG_ERR("stream_flash_buffered_write error %d", err);
   2c616:	4622      	mov	r2, r4
   2c618:	1a1b      	subs	r3, r3, r0
   2c61a:	08db      	lsrs	r3, r3, #3
   2c61c:	019b      	lsls	r3, r3, #6
   2c61e:	4906      	ldr	r1, [pc, #24]	; (2c638 <dfu_target_stream_write+0x38>)
   2c620:	f043 0001 	orr.w	r0, r3, #1
   2c624:	f00d f853 	bl	396ce <log_string_sync>
		LOG_WRN("Unable to store write progress: %d", err);
	}
#endif

	return err;
}
   2c628:	4620      	mov	r0, r4
   2c62a:	bd10      	pop	{r4, pc}
   2c62c:	200185bc 	.word	0x200185bc
   2c630:	0003f5a4 	.word	0x0003f5a4
   2c634:	0003f604 	.word	0x0003f604
   2c638:	00044851 	.word	0x00044851

0002c63c <dfu_target_stream_done>:

int dfu_target_stream_done(bool successful)
{
   2c63c:	b510      	push	{r4, lr}
	int err = 0;

	if (successful) {
   2c63e:	b1b8      	cbz	r0, 2c670 <dfu_target_stream_done+0x34>
		err = stream_flash_buffered_write(&stream, NULL, 0, true);
   2c640:	2200      	movs	r2, #0
   2c642:	2301      	movs	r3, #1
   2c644:	4611      	mov	r1, r2
   2c646:	480b      	ldr	r0, [pc, #44]	; (2c674 <dfu_target_stream_done+0x38>)
   2c648:	f00d fd96 	bl	3a178 <stream_flash_buffered_write>
		if (err != 0) {
   2c64c:	4604      	mov	r4, r0
   2c64e:	b150      	cbz	r0, 2c666 <dfu_target_stream_done+0x2a>
   2c650:	4809      	ldr	r0, [pc, #36]	; (2c678 <dfu_target_stream_done+0x3c>)
   2c652:	4b0a      	ldr	r3, [pc, #40]	; (2c67c <dfu_target_stream_done+0x40>)
			LOG_ERR("stream_flash_buffered_write error %d", err);
   2c654:	4622      	mov	r2, r4
   2c656:	1ac0      	subs	r0, r0, r3
   2c658:	08c0      	lsrs	r0, r0, #3
   2c65a:	0180      	lsls	r0, r0, #6
   2c65c:	4908      	ldr	r1, [pc, #32]	; (2c680 <dfu_target_stream_done+0x44>)
   2c65e:	f040 0001 	orr.w	r0, r0, #1
   2c662:	f00d f834 	bl	396ce <log_string_sync>
			LOG_ERR("Unable to reset write progress: %d", err);
		}
#endif
	}

	current_id = NULL;
   2c666:	2200      	movs	r2, #0
   2c668:	4b06      	ldr	r3, [pc, #24]	; (2c684 <dfu_target_stream_done+0x48>)

	return err;
}
   2c66a:	4620      	mov	r0, r4
	current_id = NULL;
   2c66c:	601a      	str	r2, [r3, #0]
}
   2c66e:	bd10      	pop	{r4, pc}
	int err = 0;
   2c670:	4604      	mov	r4, r0
   2c672:	e7f8      	b.n	2c666 <dfu_target_stream_done+0x2a>
   2c674:	200185bc 	.word	0x200185bc
   2c678:	0003f604 	.word	0x0003f604
   2c67c:	0003f5a4 	.word	0x0003f5a4
   2c680:	00044851 	.word	0x00044851
   2c684:	200185b8 	.word	0x200185b8

0002c688 <get_modem_error>:
static int  fd;
static int  offset;
static dfu_target_callback_t callback;

static int get_modem_error(void)
{
   2c688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   2c68a:	2200      	movs	r2, #0
   2c68c:	2304      	movs	r3, #4
   2c68e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   2c692:	4b0e      	ldr	r3, [pc, #56]	; (2c6cc <get_modem_error+0x44>)
   2c694:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   2c696:	ab03      	add	r3, sp, #12
   2c698:	9300      	str	r3, [sp, #0]
   2c69a:	2214      	movs	r2, #20
   2c69c:	f240 2103 	movw	r1, #515	; 0x203
   2c6a0:	ab02      	add	r3, sp, #8
   2c6a2:	f00d fc55 	bl	39f50 <z_impl_zsock_getsockopt>
	if (rc) {
   2c6a6:	b168      	cbz	r0, 2c6c4 <get_modem_error+0x3c>
   2c6a8:	4b09      	ldr	r3, [pc, #36]	; (2c6d0 <get_modem_error+0x48>)
   2c6aa:	4c0a      	ldr	r4, [pc, #40]	; (2c6d4 <get_modem_error+0x4c>)
   2c6ac:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   2c6ae:	f00d ff7a 	bl	3a5a6 <__errno>
   2c6b2:	08e4      	lsrs	r4, r4, #3
   2c6b4:	01a4      	lsls	r4, r4, #6
   2c6b6:	f044 0401 	orr.w	r4, r4, #1
   2c6ba:	6802      	ldr	r2, [r0, #0]
   2c6bc:	4906      	ldr	r1, [pc, #24]	; (2c6d8 <get_modem_error+0x50>)
   2c6be:	4620      	mov	r0, r4
   2c6c0:	f00d f805 	bl	396ce <log_string_sync>
	}

	return err;
}
   2c6c4:	9802      	ldr	r0, [sp, #8]
   2c6c6:	b004      	add	sp, #16
   2c6c8:	bd10      	pop	{r4, pc}
   2c6ca:	bf00      	nop
   2c6cc:	200185e4 	.word	0x200185e4
   2c6d0:	0003f5a4 	.word	0x0003f5a4
   2c6d4:	0003f5fc 	.word	0x0003f5fc
   2c6d8:	00044888 	.word	0x00044888

0002c6dc <delete_banked_modem_delta_fw>:
}
#define SLEEP_TIME 1
static int delete_banked_modem_delta_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   2c6dc:	2304      	movs	r3, #4
{
   2c6de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c6e2:	b085      	sub	sp, #20
	socklen_t len = sizeof(offset);
   2c6e4:	9303      	str	r3, [sp, #12]
   2c6e6:	4c2e      	ldr	r4, [pc, #184]	; (2c7a0 <delete_banked_modem_delta_fw+0xc4>)
   2c6e8:	4b2e      	ldr	r3, [pc, #184]	; (2c7a4 <delete_banked_modem_delta_fw+0xc8>)
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   2c6ea:	4e2f      	ldr	r6, [pc, #188]	; (2c7a8 <delete_banked_modem_delta_fw+0xcc>)
   2c6ec:	1ae4      	subs	r4, r4, r3
   2c6ee:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Deleting firmware image, this can take several minutes");
   2c6f0:	01a4      	lsls	r4, r4, #6
   2c6f2:	f044 0003 	orr.w	r0, r4, #3
   2c6f6:	492d      	ldr	r1, [pc, #180]	; (2c7ac <delete_banked_modem_delta_fw+0xd0>)
   2c6f8:	f00c ffe9 	bl	396ce <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   2c6fc:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2c6fe:	2300      	movs	r3, #0
   2c700:	2206      	movs	r2, #6
   2c702:	f240 2103 	movw	r1, #515	; 0x203
   2c706:	9300      	str	r3, [sp, #0]
   2c708:	f00d fc50 	bl	39fac <z_impl_zsock_setsockopt>
	if (err < 0) {
   2c70c:	2800      	cmp	r0, #0
   2c70e:	da0d      	bge.n	2c72c <delete_banked_modem_delta_fw+0x50>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   2c710:	f00d ff49 	bl	3a5a6 <__errno>
   2c714:	f044 0401 	orr.w	r4, r4, #1
   2c718:	6802      	ldr	r2, [r0, #0]
   2c71a:	4925      	ldr	r1, [pc, #148]	; (2c7b0 <delete_banked_modem_delta_fw+0xd4>)
   2c71c:	4620      	mov	r0, r4
   2c71e:	f00c ffd6 	bl	396ce <log_string_sync>
		return -EFAULT;
   2c722:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   2c726:	b005      	add	sp, #20
   2c728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   2c72c:	253c      	movs	r5, #60	; 0x3c
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   2c72e:	4f21      	ldr	r7, [pc, #132]	; (2c7b4 <delete_banked_modem_delta_fw+0xd8>)
				callback(DFU_TARGET_EVT_TIMEOUT);
   2c730:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2c7b8 <delete_banked_modem_delta_fw+0xdc>
					LOG_ERR("DFU error: %d", err);
   2c734:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2c7c0 <delete_banked_modem_delta_fw+0xe4>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2c738:	6830      	ldr	r0, [r6, #0]
   2c73a:	ab03      	add	r3, sp, #12
   2c73c:	9300      	str	r3, [sp, #0]
   2c73e:	2207      	movs	r2, #7
   2c740:	463b      	mov	r3, r7
   2c742:	f240 2103 	movw	r1, #515	; 0x203
   2c746:	f00d fc03 	bl	39f50 <z_impl_zsock_getsockopt>
		if (err < 0) {
   2c74a:	2800      	cmp	r0, #0
   2c74c:	da1d      	bge.n	2c78a <delete_banked_modem_delta_fw+0xae>
			if (timeout < 0) {
   2c74e:	2d00      	cmp	r5, #0
   2c750:	da04      	bge.n	2c75c <delete_banked_modem_delta_fw+0x80>
				callback(DFU_TARGET_EVT_TIMEOUT);
   2c752:	2000      	movs	r0, #0
   2c754:	f8d8 3000 	ldr.w	r3, [r8]
   2c758:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   2c75a:	253c      	movs	r5, #60	; 0x3c
			if (errno == ENOEXEC) {
   2c75c:	f00d ff23 	bl	3a5a6 <__errno>
   2c760:	6803      	ldr	r3, [r0, #0]
   2c762:	2b08      	cmp	r3, #8
   2c764:	d10f      	bne.n	2c786 <delete_banked_modem_delta_fw+0xaa>
				err = get_modem_error();
   2c766:	f7ff ff8f 	bl	2c688 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   2c76a:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   2c76e:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   2c770:	d004      	beq.n	2c77c <delete_banked_modem_delta_fw+0xa0>
					LOG_ERR("DFU error: %d", err);
   2c772:	4649      	mov	r1, r9
   2c774:	f044 0001 	orr.w	r0, r4, #1
   2c778:	f00c ffa9 	bl	396ce <log_string_sync>
	return z_impl_k_sleep(timeout);
   2c77c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2c780:	2100      	movs	r1, #0
   2c782:	f009 faa9 	bl	35cd8 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   2c786:	3d01      	subs	r5, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2c788:	e7d6      	b.n	2c738 <delete_banked_modem_delta_fw+0x5c>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   2c78a:	4b0b      	ldr	r3, [pc, #44]	; (2c7b8 <delete_banked_modem_delta_fw+0xdc>)
   2c78c:	2001      	movs	r0, #1
   2c78e:	681b      	ldr	r3, [r3, #0]
   2c790:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   2c792:	f044 0003 	orr.w	r0, r4, #3
   2c796:	4909      	ldr	r1, [pc, #36]	; (2c7bc <delete_banked_modem_delta_fw+0xe0>)
   2c798:	f00c ff99 	bl	396ce <log_string_sync>
	return 0;
   2c79c:	2000      	movs	r0, #0
   2c79e:	e7c2      	b.n	2c726 <delete_banked_modem_delta_fw+0x4a>
   2c7a0:	0003f5fc 	.word	0x0003f5fc
   2c7a4:	0003f5a4 	.word	0x0003f5a4
   2c7a8:	200185e4 	.word	0x200185e4
   2c7ac:	000448ae 	.word	0x000448ae
   2c7b0:	000448e5 	.word	0x000448e5
   2c7b4:	200185e8 	.word	0x200185e8
   2c7b8:	200185e0 	.word	0x200185e0
   2c7bc:	00044915 	.word	0x00044915
   2c7c0:	00044907 	.word	0x00044907

0002c7c4 <dfu_target_modem_delta_identify>:
	return err;
}

bool dfu_target_modem_delta_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   2c7c4:	6840      	ldr	r0, [r0, #4]

}
   2c7c6:	4b02      	ldr	r3, [pc, #8]	; (2c7d0 <dfu_target_modem_delta_identify+0xc>)
   2c7c8:	1ac3      	subs	r3, r0, r3
   2c7ca:	4258      	negs	r0, r3
   2c7cc:	4158      	adcs	r0, r3
   2c7ce:	4770      	bx	lr
   2c7d0:	7544656d 	.word	0x7544656d

0002c7d4 <dfu_target_modem_delta_init>:

int dfu_target_modem_delta_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   2c7d4:	2304      	movs	r3, #4
{
   2c7d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c7da:	b099      	sub	sp, #100	; 0x64
	socklen_t len = sizeof(offset);
   2c7dc:	9303      	str	r3, [sp, #12]

	callback = cb;
   2c7de:	4b5d      	ldr	r3, [pc, #372]	; (2c954 <dfu_target_modem_delta_init+0x180>)
{
   2c7e0:	4606      	mov	r6, r0
	callback = cb;
   2c7e2:	6019      	str	r1, [r3, #0]
	return z_impl_zsock_socket(family, type, proto);
   2c7e4:	f240 2203 	movw	r2, #515	; 0x203
   2c7e8:	2101      	movs	r1, #1
   2c7ea:	2006      	movs	r0, #6
   2c7ec:	f7f4 ff66 	bl	216bc <z_impl_zsock_socket>
   2c7f0:	4c59      	ldr	r4, [pc, #356]	; (2c958 <dfu_target_modem_delta_init+0x184>)
   2c7f2:	4b5a      	ldr	r3, [pc, #360]	; (2c95c <dfu_target_modem_delta_init+0x188>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2c7f4:	4f5a      	ldr	r7, [pc, #360]	; (2c960 <dfu_target_modem_delta_init+0x18c>)
   2c7f6:	1ae4      	subs	r4, r4, r3
   2c7f8:	08e4      	lsrs	r4, r4, #3
	if (fd < 0) {
   2c7fa:	2800      	cmp	r0, #0
   2c7fc:	463d      	mov	r5, r7
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   2c7fe:	6038      	str	r0, [r7, #0]
	if (fd < 0) {
   2c800:	ea4f 1484 	mov.w	r4, r4, lsl #6
   2c804:	da2c      	bge.n	2c860 <dfu_target_modem_delta_init+0x8c>
		LOG_ERR("Failed to open Modem DFU socket.");
   2c806:	f044 0001 	orr.w	r0, r4, #1
   2c80a:	4956      	ldr	r1, [pc, #344]	; (2c964 <dfu_target_modem_delta_init+0x190>)
   2c80c:	f00c ff5f 	bl	396ce <log_string_sync>
		return fd;
   2c810:	6838      	ldr	r0, [r7, #0]

	err = modem_delta_dfu_socket_init();
	if (err < 0) {
   2c812:	2800      	cmp	r0, #0
   2c814:	db45      	blt.n	2c8a2 <dfu_target_modem_delta_init+0xce>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   2c816:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   2c818:	af03      	add	r7, sp, #12
   2c81a:	2202      	movs	r2, #2
   2c81c:	f240 2103 	movw	r1, #515	; 0x203
   2c820:	9700      	str	r7, [sp, #0]
   2c822:	ab0e      	add	r3, sp, #56	; 0x38
   2c824:	f00d fb94 	bl	39f50 <z_impl_zsock_getsockopt>
	if (err < 0) {
   2c828:	2800      	cmp	r0, #0
   2c82a:	da0d      	bge.n	2c848 <dfu_target_modem_delta_init+0x74>
		if (errno == ENOEXEC) {
   2c82c:	f00d febb 	bl	3a5a6 <__errno>
   2c830:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2c832:	f044 0801 	orr.w	r8, r4, #1
		if (errno == ENOEXEC) {
   2c836:	2b08      	cmp	r3, #8
   2c838:	d146      	bne.n	2c8c8 <dfu_target_modem_delta_init+0xf4>
			LOG_ERR("Modem error: %d", get_modem_error());
   2c83a:	f7ff ff25 	bl	2c688 <get_modem_error>
   2c83e:	4602      	mov	r2, r0
   2c840:	4949      	ldr	r1, [pc, #292]	; (2c968 <dfu_target_modem_delta_init+0x194>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2c842:	4640      	mov	r0, r8
   2c844:	f00c ff43 	bl	396ce <log_string_sync>
		}
	}

	if (file_size > scratch_space) {
   2c848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c84a:	42b3      	cmp	r3, r6
   2c84c:	d241      	bcs.n	2c8d2 <dfu_target_modem_delta_init+0xfe>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   2c84e:	f044 0001 	orr.w	r0, r4, #1
   2c852:	4632      	mov	r2, r6
   2c854:	4945      	ldr	r1, [pc, #276]	; (2c96c <dfu_target_modem_delta_init+0x198>)
   2c856:	f00c ff3a 	bl	396ce <log_string_sync>
			file_size, scratch_space);
		return -EFBIG;
   2c85a:	f06f 001a 	mvn.w	r0, #26
   2c85e:	e020      	b.n	2c8a2 <dfu_target_modem_delta_init+0xce>
	len = sizeof(version);
   2c860:	f04f 0924 	mov.w	r9, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   2c864:	f044 0803 	orr.w	r8, r4, #3
   2c868:	4640      	mov	r0, r8
   2c86a:	4941      	ldr	r1, [pc, #260]	; (2c970 <dfu_target_modem_delta_init+0x19c>)
   2c86c:	f00c ff2f 	bl	396ce <log_string_sync>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   2c870:	6838      	ldr	r0, [r7, #0]
	len = sizeof(version);
   2c872:	f8cd 9010 	str.w	r9, [sp, #16]
   2c876:	ab04      	add	r3, sp, #16
   2c878:	af05      	add	r7, sp, #20
   2c87a:	9300      	str	r3, [sp, #0]
   2c87c:	2201      	movs	r2, #1
   2c87e:	463b      	mov	r3, r7
   2c880:	f240 2103 	movw	r1, #515	; 0x203
   2c884:	f00d fb64 	bl	39f50 <z_impl_zsock_getsockopt>
	if (err < 0) {
   2c888:	2800      	cmp	r0, #0
   2c88a:	da0d      	bge.n	2c8a8 <dfu_target_modem_delta_init+0xd4>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   2c88c:	f00d fe8b 	bl	3a5a6 <__errno>
   2c890:	f044 0401 	orr.w	r4, r4, #1
   2c894:	6802      	ldr	r2, [r0, #0]
   2c896:	4937      	ldr	r1, [pc, #220]	; (2c974 <dfu_target_modem_delta_init+0x1a0>)
   2c898:	4620      	mov	r0, r4
   2c89a:	f00c ff18 	bl	396ce <log_string_sync>
		return -1;
   2c89e:	f04f 30ff 	mov.w	r0, #4294967295
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   2c8a2:	b019      	add	sp, #100	; 0x64
   2c8a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   2c8a8:	464b      	mov	r3, r9
   2c8aa:	2125      	movs	r1, #37	; 0x25
   2c8ac:	4a32      	ldr	r2, [pc, #200]	; (2c978 <dfu_target_modem_delta_init+0x1a4>)
   2c8ae:	9700      	str	r7, [sp, #0]
   2c8b0:	a80e      	add	r0, sp, #56	; 0x38
   2c8b2:	f00b f8d3 	bl	37a5c <sniprintf>
   2c8b6:	a80e      	add	r0, sp, #56	; 0x38
   2c8b8:	f00c ff1c 	bl	396f4 <z_log_strdup>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   2c8bc:	492f      	ldr	r1, [pc, #188]	; (2c97c <dfu_target_modem_delta_init+0x1a8>)
   2c8be:	4602      	mov	r2, r0
   2c8c0:	4640      	mov	r0, r8
   2c8c2:	f00c ff04 	bl	396ce <log_string_sync>
	if (err < 0) {
   2c8c6:	e7a6      	b.n	2c816 <dfu_target_modem_delta_init+0x42>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2c8c8:	f00d fe6d 	bl	3a5a6 <__errno>
   2c8cc:	492c      	ldr	r1, [pc, #176]	; (2c980 <dfu_target_modem_delta_init+0x1ac>)
   2c8ce:	6802      	ldr	r2, [r0, #0]
   2c8d0:	e7b7      	b.n	2c842 <dfu_target_modem_delta_init+0x6e>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   2c8d2:	6828      	ldr	r0, [r5, #0]
   2c8d4:	2207      	movs	r2, #7
   2c8d6:	f240 2103 	movw	r1, #515	; 0x203
   2c8da:	4b2a      	ldr	r3, [pc, #168]	; (2c984 <dfu_target_modem_delta_init+0x1b0>)
   2c8dc:	9700      	str	r7, [sp, #0]
   2c8de:	f00d fb37 	bl	39f50 <z_impl_zsock_getsockopt>
	if (err < 0) {
   2c8e2:	2800      	cmp	r0, #0
   2c8e4:	da0d      	bge.n	2c902 <dfu_target_modem_delta_init+0x12e>
		if (errno == ENOEXEC) {
   2c8e6:	f00d fe5e 	bl	3a5a6 <__errno>
   2c8ea:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   2c8ec:	f044 0601 	orr.w	r6, r4, #1
		if (errno == ENOEXEC) {
   2c8f0:	2b08      	cmp	r3, #8
   2c8f2:	d10f      	bne.n	2c914 <dfu_target_modem_delta_init+0x140>
			LOG_ERR("Modem error: %d", get_modem_error());
   2c8f4:	f7ff fec8 	bl	2c688 <get_modem_error>
   2c8f8:	4602      	mov	r2, r0
   2c8fa:	491b      	ldr	r1, [pc, #108]	; (2c968 <dfu_target_modem_delta_init+0x194>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2c8fc:	4630      	mov	r0, r6
   2c8fe:	f00c fee6 	bl	396ce <log_string_sync>
	if (offset == DIRTY_IMAGE) {
   2c902:	4e20      	ldr	r6, [pc, #128]	; (2c984 <dfu_target_modem_delta_init+0x1b0>)
   2c904:	6832      	ldr	r2, [r6, #0]
   2c906:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   2c90a:	d108      	bne.n	2c91e <dfu_target_modem_delta_init+0x14a>
		delete_banked_modem_delta_fw();
   2c90c:	f7ff fee6 	bl	2c6dc <delete_banked_modem_delta_fw>
	return 0;
   2c910:	2000      	movs	r0, #0
   2c912:	e7c6      	b.n	2c8a2 <dfu_target_modem_delta_init+0xce>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   2c914:	f00d fe47 	bl	3a5a6 <__errno>
   2c918:	4919      	ldr	r1, [pc, #100]	; (2c980 <dfu_target_modem_delta_init+0x1ac>)
   2c91a:	6802      	ldr	r2, [r0, #0]
   2c91c:	e7ee      	b.n	2c8fc <dfu_target_modem_delta_init+0x128>
	} else if (offset != 0) {
   2c91e:	2a00      	cmp	r2, #0
   2c920:	d0f6      	beq.n	2c910 <dfu_target_modem_delta_init+0x13c>
		LOG_INF("Setting offset to 0x%x", offset);
   2c922:	f044 0403 	orr.w	r4, r4, #3
   2c926:	4620      	mov	r0, r4
   2c928:	4917      	ldr	r1, [pc, #92]	; (2c988 <dfu_target_modem_delta_init+0x1b4>)
   2c92a:	f00c fed0 	bl	396ce <log_string_sync>
		len = sizeof(offset);
   2c92e:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   2c930:	6828      	ldr	r0, [r5, #0]
		len = sizeof(offset);
   2c932:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2c934:	2207      	movs	r2, #7
   2c936:	9300      	str	r3, [sp, #0]
   2c938:	f240 2103 	movw	r1, #515	; 0x203
   2c93c:	4633      	mov	r3, r6
   2c93e:	f00d fb35 	bl	39fac <z_impl_zsock_setsockopt>
		if (err != 0) {
   2c942:	2800      	cmp	r0, #0
   2c944:	d0e4      	beq.n	2c910 <dfu_target_modem_delta_init+0x13c>
			LOG_INF("Error while setting offset: %d", offset);
   2c946:	4620      	mov	r0, r4
   2c948:	6832      	ldr	r2, [r6, #0]
   2c94a:	4910      	ldr	r1, [pc, #64]	; (2c98c <dfu_target_modem_delta_init+0x1b8>)
   2c94c:	f00c febf 	bl	396ce <log_string_sync>
   2c950:	e7de      	b.n	2c910 <dfu_target_modem_delta_init+0x13c>
   2c952:	bf00      	nop
   2c954:	200185e0 	.word	0x200185e0
   2c958:	0003f5fc 	.word	0x0003f5fc
   2c95c:	0003f5a4 	.word	0x0003f5a4
   2c960:	200185e4 	.word	0x200185e4
   2c964:	0004492e 	.word	0x0004492e
   2c968:	000449ad 	.word	0x000449ad
   2c96c:	000449da 	.word	0x000449da
   2c970:	0004494f 	.word	0x0004494f
   2c974:	00044968 	.word	0x00044968
   2c978:	0004348c 	.word	0x0004348c
   2c97c:	00044992 	.word	0x00044992
   2c980:	000449bd 	.word	0x000449bd
   2c984:	200185e8 	.word	0x200185e8
   2c988:	00044a09 	.word	0x00044a09
   2c98c:	00044a20 	.word	0x00044a20

0002c990 <dfu_target_modem_delta_offset_get>:

int dfu_target_modem_delta_offset_get(size_t *out)
{
	*out = offset;
   2c990:	4b02      	ldr	r3, [pc, #8]	; (2c99c <dfu_target_modem_delta_offset_get+0xc>)
   2c992:	681b      	ldr	r3, [r3, #0]
   2c994:	6003      	str	r3, [r0, #0]
	return 0;
}
   2c996:	2000      	movs	r0, #0
   2c998:	4770      	bx	lr
   2c99a:	bf00      	nop
   2c99c:	200185e8 	.word	0x200185e8

0002c9a0 <dfu_target_modem_delta_write>:

int dfu_target_modem_delta_write(const void *const buf, size_t len)
{
   2c9a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int err = 0;
	int sent = 0;
   2c9a4:	2400      	movs	r4, #0
{
   2c9a6:	4607      	mov	r7, r0
   2c9a8:	460d      	mov	r5, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2c9aa:	4626      	mov	r6, r4
	int modem_error = 0;
	int send_result = 0;

	while (send_result >= 0) {
		send_result = send(fd, (((uint8_t *)buf) + sent),
   2c9ac:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2ca50 <dfu_target_modem_delta_write+0xb0>
   2c9b0:	f8d8 0000 	ldr.w	r0, [r8]
   2c9b4:	2300      	movs	r3, #0
   2c9b6:	e9cd 6600 	strd	r6, r6, [sp]
   2c9ba:	1b2a      	subs	r2, r5, r4
   2c9bc:	1939      	adds	r1, r7, r4
   2c9be:	f00d fa40 	bl	39e42 <z_impl_zsock_sendto>
				   (len - sent), 0);
		if (send_result > 0) {
   2c9c2:	2800      	cmp	r0, #0
   2c9c4:	dd0a      	ble.n	2c9dc <dfu_target_modem_delta_write+0x3c>
			sent += send_result;
   2c9c6:	4404      	add	r4, r0
			if (sent >= len) {
   2c9c8:	42ac      	cmp	r4, r5
   2c9ca:	d3f1      	bcc.n	2c9b0 <dfu_target_modem_delta_write+0x10>
				offset += len;
				return 0;
   2c9cc:	2000      	movs	r0, #0
				offset += len;
   2c9ce:	4b1c      	ldr	r3, [pc, #112]	; (2ca40 <dfu_target_modem_delta_write+0xa0>)
   2c9d0:	6819      	ldr	r1, [r3, #0]
   2c9d2:	4429      	add	r1, r5
   2c9d4:	6019      	str	r1, [r3, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   2c9d6:	b002      	add	sp, #8
   2c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (send_result >= 0) {
   2c9dc:	d0e8      	beq.n	2c9b0 <dfu_target_modem_delta_write+0x10>
	if (errno != ENOEXEC) {
   2c9de:	f00d fde2 	bl	3a5a6 <__errno>
   2c9e2:	6803      	ldr	r3, [r0, #0]
   2c9e4:	2b08      	cmp	r3, #8
   2c9e6:	d128      	bne.n	2ca3a <dfu_target_modem_delta_write+0x9a>
	modem_error = get_modem_error();
   2c9e8:	f7ff fe4e 	bl	2c688 <get_modem_error>
   2c9ec:	4c15      	ldr	r4, [pc, #84]	; (2ca44 <dfu_target_modem_delta_write+0xa4>)
   2c9ee:	4b16      	ldr	r3, [pc, #88]	; (2ca48 <dfu_target_modem_delta_write+0xa8>)
   2c9f0:	4606      	mov	r6, r0
   2c9f2:	1ae4      	subs	r4, r4, r3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   2c9f4:	f00d fdd7 	bl	3a5a6 <__errno>
   2c9f8:	08e4      	lsrs	r4, r4, #3
   2c9fa:	01a4      	lsls	r4, r4, #6
   2c9fc:	f044 0401 	orr.w	r4, r4, #1
   2ca00:	6802      	ldr	r2, [r0, #0]
   2ca02:	4633      	mov	r3, r6
   2ca04:	4620      	mov	r0, r4
   2ca06:	4911      	ldr	r1, [pc, #68]	; (2ca4c <dfu_target_modem_delta_write+0xac>)
   2ca08:	f00c fe61 	bl	396ce <log_string_sync>
	switch (modem_error) {
   2ca0c:	f116 0f0b 	cmn.w	r6, #11
   2ca10:	d004      	beq.n	2ca1c <dfu_target_modem_delta_write+0x7c>
   2ca12:	f116 0f09 	cmn.w	r6, #9
   2ca16:	d00d      	beq.n	2ca34 <dfu_target_modem_delta_write+0x94>
   2ca18:	360e      	adds	r6, #14
   2ca1a:	d10e      	bne.n	2ca3a <dfu_target_modem_delta_write+0x9a>
		delete_banked_modem_delta_fw();
   2ca1c:	f7ff fe5e 	bl	2c6dc <delete_banked_modem_delta_fw>
		err = dfu_target_modem_delta_write(buf, len);
   2ca20:	4629      	mov	r1, r5
   2ca22:	4638      	mov	r0, r7
   2ca24:	f7ff ffbc 	bl	2c9a0 <dfu_target_modem_delta_write>
			return 0;
   2ca28:	2800      	cmp	r0, #0
   2ca2a:	bfb4      	ite	lt
   2ca2c:	f06f 0015 	mvnlt.w	r0, #21
   2ca30:	2000      	movge	r0, #0
   2ca32:	e7d0      	b.n	2c9d6 <dfu_target_modem_delta_write+0x36>
		return -EINVAL;
   2ca34:	f06f 0015 	mvn.w	r0, #21
   2ca38:	e7cd      	b.n	2c9d6 <dfu_target_modem_delta_write+0x36>
	switch (modem_error) {
   2ca3a:	f06f 000d 	mvn.w	r0, #13
   2ca3e:	e7ca      	b.n	2c9d6 <dfu_target_modem_delta_write+0x36>
   2ca40:	200185e8 	.word	0x200185e8
   2ca44:	0003f5fc 	.word	0x0003f5fc
   2ca48:	0003f5a4 	.word	0x0003f5a4
   2ca4c:	00044a3f 	.word	0x00044a3f
   2ca50:	200185e4 	.word	0x200185e4

0002ca54 <dfu_target_modem_delta_done>:

int dfu_target_modem_delta_done(bool successful)
{
   2ca54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2ca56:	4c1d      	ldr	r4, [pc, #116]	; (2cacc <dfu_target_modem_delta_done+0x78>)
   2ca58:	4b1d      	ldr	r3, [pc, #116]	; (2cad0 <dfu_target_modem_delta_done+0x7c>)
   2ca5a:	4d1e      	ldr	r5, [pc, #120]	; (2cad4 <dfu_target_modem_delta_done+0x80>)
   2ca5c:	1ae4      	subs	r4, r4, r3
   2ca5e:	08e4      	lsrs	r4, r4, #3
   2ca60:	01a4      	lsls	r4, r4, #6
	int err = 0;

	if (successful) {
   2ca62:	b358      	cbz	r0, 2cabc <dfu_target_modem_delta_done+0x68>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   2ca64:	f044 0003 	orr.w	r0, r4, #3
   2ca68:	491b      	ldr	r1, [pc, #108]	; (2cad8 <dfu_target_modem_delta_done+0x84>)
   2ca6a:	f00c fe30 	bl	396ce <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   2ca6e:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2ca70:	2300      	movs	r3, #0
   2ca72:	2204      	movs	r2, #4
   2ca74:	f240 2103 	movw	r1, #515	; 0x203
   2ca78:	9300      	str	r3, [sp, #0]
   2ca7a:	f00d fa97 	bl	39fac <z_impl_zsock_setsockopt>
	if (err < 0) {
   2ca7e:	1e02      	subs	r2, r0, #0
   2ca80:	da0f      	bge.n	2caa2 <dfu_target_modem_delta_done+0x4e>
   2ca82:	9203      	str	r2, [sp, #12]
		if (errno == ENOEXEC) {
   2ca84:	f00d fd8f 	bl	3a5a6 <__errno>
   2ca88:	6803      	ldr	r3, [r0, #0]
   2ca8a:	9a03      	ldr	r2, [sp, #12]
   2ca8c:	2b08      	cmp	r3, #8
   2ca8e:	f044 0601 	orr.w	r6, r4, #1
   2ca92:	d102      	bne.n	2ca9a <dfu_target_modem_delta_done+0x46>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   2ca94:	f7ff fdf8 	bl	2c688 <get_modem_error>
   2ca98:	4602      	mov	r2, r0
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   2ca9a:	4630      	mov	r0, r6
   2ca9c:	490f      	ldr	r1, [pc, #60]	; (2cadc <dfu_target_modem_delta_done+0x88>)
   2ca9e:	f00c fe16 	bl	396ce <log_string_sync>
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   2caa2:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   2caa4:	f00d f982 	bl	39dac <z_impl_zsock_close>
	if (err < 0) {
   2caa8:	1e05      	subs	r5, r0, #0
   2caaa:	da0d      	bge.n	2cac8 <dfu_target_modem_delta_done+0x74>
		LOG_ERR("Failed to close modem DFU socket.");
   2caac:	490c      	ldr	r1, [pc, #48]	; (2cae0 <dfu_target_modem_delta_done+0x8c>)
   2caae:	f044 0001 	orr.w	r0, r4, #1
   2cab2:	f00c fe0c 	bl	396ce <log_string_sync>
		return err;
	}

	return 0;
}
   2cab6:	4628      	mov	r0, r5
   2cab8:	b004      	add	sp, #16
   2caba:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Modem upgrade aborted.");
   2cabc:	4909      	ldr	r1, [pc, #36]	; (2cae4 <dfu_target_modem_delta_done+0x90>)
   2cabe:	f044 0003 	orr.w	r0, r4, #3
   2cac2:	f00c fe04 	bl	396ce <log_string_sync>
   2cac6:	e7ec      	b.n	2caa2 <dfu_target_modem_delta_done+0x4e>
	return 0;
   2cac8:	2500      	movs	r5, #0
   2caca:	e7f4      	b.n	2cab6 <dfu_target_modem_delta_done+0x62>
   2cacc:	0003f5fc 	.word	0x0003f5fc
   2cad0:	0003f5a4 	.word	0x0003f5a4
   2cad4:	200185e4 	.word	0x200185e4
   2cad8:	00044a67 	.word	0x00044a67
   2cadc:	00044a96 	.word	0x00044a96
   2cae0:	00044ad1 	.word	0x00044ad1
   2cae4:	00044aba 	.word	0x00044aba

0002cae8 <dfu_target_mcuboot_identify>:
}

bool dfu_target_mcuboot_identify(const void *const buf)
{
	/* MCUBoot headers starts with 4 byte magic word */
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   2cae8:	6800      	ldr	r0, [r0, #0]
}
   2caea:	4b02      	ldr	r3, [pc, #8]	; (2caf4 <dfu_target_mcuboot_identify+0xc>)
   2caec:	1ac3      	subs	r3, r0, r3
   2caee:	4258      	negs	r0, r3
   2caf0:	4158      	adcs	r0, r3
   2caf2:	4770      	bx	lr
   2caf4:	96f3b83d 	.word	0x96f3b83d

0002caf8 <dfu_target_mcuboot_set_buf>:

int dfu_target_mcuboot_set_buf(uint8_t *buf, size_t len)
{
	if (buf == NULL) {
   2caf8:	b140      	cbz	r0, 2cb0c <dfu_target_mcuboot_set_buf+0x14>
		return -EINVAL;
	}

	if (!IS_ALIGNED_32(buf)) {
   2cafa:	f010 0303 	ands.w	r3, r0, #3
   2cafe:	d105      	bne.n	2cb0c <dfu_target_mcuboot_set_buf+0x14>
		return -EINVAL;
	}

	stream_buf = buf;
   2cb00:	4a04      	ldr	r2, [pc, #16]	; (2cb14 <dfu_target_mcuboot_set_buf+0x1c>)
   2cb02:	6010      	str	r0, [r2, #0]
	stream_buf_len = len;
   2cb04:	4a04      	ldr	r2, [pc, #16]	; (2cb18 <dfu_target_mcuboot_set_buf+0x20>)

	return 0;
   2cb06:	4618      	mov	r0, r3
	stream_buf_len = len;
   2cb08:	6011      	str	r1, [r2, #0]
	return 0;
   2cb0a:	4770      	bx	lr
		return -EINVAL;
   2cb0c:	f06f 0015 	mvn.w	r0, #21
}
   2cb10:	4770      	bx	lr
   2cb12:	bf00      	nop
   2cb14:	200185ec 	.word	0x200185ec
   2cb18:	200185f0 	.word	0x200185f0

0002cb1c <dfu_target_mcuboot_init>:

int dfu_target_mcuboot_init(size_t file_size, dfu_target_callback_t cb)
{
   2cb1c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(cb);
	const struct device *flash_dev;
	int err;

	if (stream_buf == NULL) {
   2cb1e:	4c2d      	ldr	r4, [pc, #180]	; (2cbd4 <dfu_target_mcuboot_init+0xb8>)
{
   2cb20:	4602      	mov	r2, r0
	if (stream_buf == NULL) {
   2cb22:	6823      	ldr	r3, [r4, #0]
{
   2cb24:	b089      	sub	sp, #36	; 0x24
	if (stream_buf == NULL) {
   2cb26:	b973      	cbnz	r3, 2cb46 <dfu_target_mcuboot_init+0x2a>
   2cb28:	4b2b      	ldr	r3, [pc, #172]	; (2cbd8 <dfu_target_mcuboot_init+0xbc>)
   2cb2a:	482c      	ldr	r0, [pc, #176]	; (2cbdc <dfu_target_mcuboot_init+0xc0>)
		LOG_ERR("Missing stream_buf, call '..set_buf' before '..init");
   2cb2c:	492c      	ldr	r1, [pc, #176]	; (2cbe0 <dfu_target_mcuboot_init+0xc4>)
   2cb2e:	1ac0      	subs	r0, r0, r3
   2cb30:	08c0      	lsrs	r0, r0, #3
   2cb32:	0180      	lsls	r0, r0, #6
   2cb34:	f040 0001 	orr.w	r0, r0, #1
   2cb38:	f00c fdc9 	bl	396ce <log_string_sync>
		return -ENODEV;
   2cb3c:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("dfu_target_stream_init failed %d", err);
		return err;
	}

	return 0;
}
   2cb40:	4620      	mov	r0, r4
   2cb42:	b009      	add	sp, #36	; 0x24
   2cb44:	bd30      	pop	{r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   2cb46:	f5b0 2fe8 	cmp.w	r0, #475136	; 0x74000
   2cb4a:	d90e      	bls.n	2cb6a <dfu_target_mcuboot_init+0x4e>
   2cb4c:	4b22      	ldr	r3, [pc, #136]	; (2cbd8 <dfu_target_mcuboot_init+0xbc>)
   2cb4e:	4c23      	ldr	r4, [pc, #140]	; (2cbdc <dfu_target_mcuboot_init+0xc0>)
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   2cb50:	4924      	ldr	r1, [pc, #144]	; (2cbe4 <dfu_target_mcuboot_init+0xc8>)
   2cb52:	1ae4      	subs	r4, r4, r3
   2cb54:	08e4      	lsrs	r4, r4, #3
   2cb56:	01a4      	lsls	r4, r4, #6
   2cb58:	f044 0001 	orr.w	r0, r4, #1
   2cb5c:	f44f 23e8 	mov.w	r3, #475136	; 0x74000
   2cb60:	f00c fdb5 	bl	396ce <log_string_sync>
		return -EFBIG;
   2cb64:	f06f 041a 	mvn.w	r4, #26
   2cb68:	e7ea      	b.n	2cb40 <dfu_target_mcuboot_init+0x24>
   2cb6a:	481f      	ldr	r0, [pc, #124]	; (2cbe8 <dfu_target_mcuboot_init+0xcc>)
   2cb6c:	f006 fc9a 	bl	334a4 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   2cb70:	b968      	cbnz	r0, 2cb8e <dfu_target_mcuboot_init+0x72>
   2cb72:	4b19      	ldr	r3, [pc, #100]	; (2cbd8 <dfu_target_mcuboot_init+0xbc>)
   2cb74:	4819      	ldr	r0, [pc, #100]	; (2cbdc <dfu_target_mcuboot_init+0xc0>)
		LOG_ERR("Failed to get device '%s'",
   2cb76:	4a1c      	ldr	r2, [pc, #112]	; (2cbe8 <dfu_target_mcuboot_init+0xcc>)
   2cb78:	1ac0      	subs	r0, r0, r3
   2cb7a:	08c0      	lsrs	r0, r0, #3
   2cb7c:	0180      	lsls	r0, r0, #6
   2cb7e:	491b      	ldr	r1, [pc, #108]	; (2cbec <dfu_target_mcuboot_init+0xd0>)
   2cb80:	f040 0001 	orr.w	r0, r0, #1
   2cb84:	f00c fda3 	bl	396ce <log_string_sync>
		return -EFAULT;
   2cb88:	f06f 040d 	mvn.w	r4, #13
   2cb8c:	e7d8      	b.n	2cb40 <dfu_target_mcuboot_init+0x24>
	err = dfu_target_stream_init(&(struct dfu_target_stream_init){
   2cb8e:	4b18      	ldr	r3, [pc, #96]	; (2cbf0 <dfu_target_mcuboot_init+0xd4>)
   2cb90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   2cb94:	e9cd 3001 	strd	r3, r0, [sp, #4]
   2cb98:	6823      	ldr	r3, [r4, #0]
   2cb9a:	2500      	movs	r5, #0
   2cb9c:	9303      	str	r3, [sp, #12]
   2cb9e:	4b15      	ldr	r3, [pc, #84]	; (2cbf4 <dfu_target_mcuboot_init+0xd8>)
   2cba0:	a801      	add	r0, sp, #4
   2cba2:	681b      	ldr	r3, [r3, #0]
   2cba4:	9507      	str	r5, [sp, #28]
   2cba6:	9304      	str	r3, [sp, #16]
   2cba8:	f44f 23e8 	mov.w	r3, #475136	; 0x74000
   2cbac:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2cbb0:	f7ff fce6 	bl	2c580 <dfu_target_stream_init>
	if (err < 0) {
   2cbb4:	1e04      	subs	r4, r0, #0
   2cbb6:	da0b      	bge.n	2cbd0 <dfu_target_mcuboot_init+0xb4>
   2cbb8:	4b07      	ldr	r3, [pc, #28]	; (2cbd8 <dfu_target_mcuboot_init+0xbc>)
   2cbba:	4808      	ldr	r0, [pc, #32]	; (2cbdc <dfu_target_mcuboot_init+0xc0>)
		LOG_ERR("dfu_target_stream_init failed %d", err);
   2cbbc:	4622      	mov	r2, r4
   2cbbe:	1ac0      	subs	r0, r0, r3
   2cbc0:	08c0      	lsrs	r0, r0, #3
   2cbc2:	0180      	lsls	r0, r0, #6
   2cbc4:	490c      	ldr	r1, [pc, #48]	; (2cbf8 <dfu_target_mcuboot_init+0xdc>)
   2cbc6:	f040 0001 	orr.w	r0, r0, #1
   2cbca:	f00c fd80 	bl	396ce <log_string_sync>
		return err;
   2cbce:	e7b7      	b.n	2cb40 <dfu_target_mcuboot_init+0x24>
	return 0;
   2cbd0:	462c      	mov	r4, r5
   2cbd2:	e7b5      	b.n	2cb40 <dfu_target_mcuboot_init+0x24>
   2cbd4:	200185ec 	.word	0x200185ec
   2cbd8:	0003f5a4 	.word	0x0003f5a4
   2cbdc:	0003f5f4 	.word	0x0003f5f4
   2cbe0:	00044b0a 	.word	0x00044b0a
   2cbe4:	00044b3e 	.word	0x00044b3e
   2cbe8:	00040e33 	.word	0x00040e33
   2cbec:	00044b70 	.word	0x00044b70
   2cbf0:	00044b8a 	.word	0x00044b8a
   2cbf4:	200185f0 	.word	0x200185f0
   2cbf8:	00044b92 	.word	0x00044b92

0002cbfc <dfu_target_mcuboot_done>:
{
	return dfu_target_stream_write(buf, len);
}

int dfu_target_mcuboot_done(bool successful)
{
   2cbfc:	b570      	push	{r4, r5, r6, lr}
   2cbfe:	4606      	mov	r6, r0
	int err = 0;

	err = dfu_target_stream_done(successful);
   2cc00:	f7ff fd1c 	bl	2c63c <dfu_target_stream_done>
	if (err != 0) {
   2cc04:	4d14      	ldr	r5, [pc, #80]	; (2cc58 <dfu_target_mcuboot_done+0x5c>)
   2cc06:	4b15      	ldr	r3, [pc, #84]	; (2cc5c <dfu_target_mcuboot_done+0x60>)
   2cc08:	4604      	mov	r4, r0
   2cc0a:	1aed      	subs	r5, r5, r3
   2cc0c:	08ed      	lsrs	r5, r5, #3
   2cc0e:	01ad      	lsls	r5, r5, #6
   2cc10:	b138      	cbz	r0, 2cc22 <dfu_target_mcuboot_done+0x26>
		LOG_ERR("dfu_target_stream_done error %d", err);
   2cc12:	4602      	mov	r2, r0
   2cc14:	4912      	ldr	r1, [pc, #72]	; (2cc60 <dfu_target_mcuboot_done+0x64>)
			LOG_ERR("Unable to delete last page: %d", err);
			return err;
		}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   2cc16:	f045 0001 	orr.w	r0, r5, #1
   2cc1a:	f00c fd58 	bl	396ce <log_string_sync>
	} else {
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	return err;
}
   2cc1e:	4620      	mov	r0, r4
   2cc20:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   2cc22:	b1b6      	cbz	r6, 2cc52 <dfu_target_mcuboot_done+0x56>
		err = stream_flash_erase_page(dfu_target_stream_get_stream(),
   2cc24:	f7ff fca8 	bl	2c578 <dfu_target_stream_get_stream>
   2cc28:	490e      	ldr	r1, [pc, #56]	; (2cc64 <dfu_target_mcuboot_done+0x68>)
   2cc2a:	f7f4 ffaf 	bl	21b8c <stream_flash_erase_page>
		if (err != 0) {
   2cc2e:	4604      	mov	r4, r0
   2cc30:	b110      	cbz	r0, 2cc38 <dfu_target_mcuboot_done+0x3c>
			LOG_ERR("Unable to delete last page: %d", err);
   2cc32:	4602      	mov	r2, r0
   2cc34:	490c      	ldr	r1, [pc, #48]	; (2cc68 <dfu_target_mcuboot_done+0x6c>)
   2cc36:	e7ee      	b.n	2cc16 <dfu_target_mcuboot_done+0x1a>
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   2cc38:	f00d fcb9 	bl	3a5ae <boot_request_upgrade>
		if (err != 0) {
   2cc3c:	4604      	mov	r4, r0
   2cc3e:	b110      	cbz	r0, 2cc46 <dfu_target_mcuboot_done+0x4a>
			LOG_ERR("boot_request_upgrade error %d", err);
   2cc40:	4602      	mov	r2, r0
   2cc42:	490a      	ldr	r1, [pc, #40]	; (2cc6c <dfu_target_mcuboot_done+0x70>)
   2cc44:	e7e7      	b.n	2cc16 <dfu_target_mcuboot_done+0x1a>
		LOG_INF("MCUBoot image upgrade scheduled. "
   2cc46:	490a      	ldr	r1, [pc, #40]	; (2cc70 <dfu_target_mcuboot_done+0x74>)
		LOG_INF("MCUBoot image upgrade aborted.");
   2cc48:	f045 0003 	orr.w	r0, r5, #3
   2cc4c:	f00c fd3f 	bl	396ce <log_string_sync>
   2cc50:	e7e5      	b.n	2cc1e <dfu_target_mcuboot_done+0x22>
   2cc52:	4908      	ldr	r1, [pc, #32]	; (2cc74 <dfu_target_mcuboot_done+0x78>)
   2cc54:	e7f8      	b.n	2cc48 <dfu_target_mcuboot_done+0x4c>
   2cc56:	bf00      	nop
   2cc58:	0003f5f4 	.word	0x0003f5f4
   2cc5c:	0003f5a4 	.word	0x0003f5a4
   2cc60:	00044bb3 	.word	0x00044bb3
   2cc64:	000f3fff 	.word	0x000f3fff
   2cc68:	00044bd3 	.word	0x00044bd3
   2cc6c:	00044bf2 	.word	0x00044bf2
   2cc70:	00044c10 	.word	0x00044c10
   2cc74:	00044c47 	.word	0x00044c47

0002cc78 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   2cc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2cc7c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   2cc7e:	4c21      	ldr	r4, [pc, #132]	; (2cd04 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   2cc80:	4e21      	ldr	r6, [pc, #132]	; (2cd08 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2cc82:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   2cc86:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2cd10 <check_ext_api_requests+0x98>
{
   2cc8a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2cc8c:	45a8      	cmp	r8, r5
   2cc8e:	d803      	bhi.n	2cc98 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   2cc90:	2000      	movs	r0, #0
   2cc92:	b005      	add	sp, #20
   2cc94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   2cc98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cc9a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2cc9e:	681f      	ldr	r7, [r3, #0]
   2cca0:	ab01      	add	r3, sp, #4
   2cca2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   2cca6:	220c      	movs	r2, #12
   2cca8:	4619      	mov	r1, r3
   2ccaa:	4638      	mov	r0, r7
   2ccac:	f011 f94f 	bl	3df4e <memcmp>
   2ccb0:	b990      	cbnz	r0, 2ccd8 <check_ext_api_requests+0x60>
   2ccb2:	b18f      	cbz	r7, 2ccd8 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2ccb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   2ccb6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   2ccb8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   2ccba:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2ccbc:	4291      	cmp	r1, r2
   2ccbe:	d10b      	bne.n	2ccd8 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   2ccc0:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2ccc2:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   2ccc4:	4291      	cmp	r1, r2
   2ccc6:	d807      	bhi.n	2ccd8 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   2ccc8:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   2ccca:	4291      	cmp	r1, r2
   2cccc:	d904      	bls.n	2ccd8 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   2ccce:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2ccd0:	695b      	ldr	r3, [r3, #20]
   2ccd2:	ea32 0303 	bics.w	r3, r2, r3
   2ccd6:	d00a      	beq.n	2ccee <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   2ccd8:	6a27      	ldr	r7, [r4, #32]
   2ccda:	b167      	cbz	r7, 2ccf6 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   2ccdc:	480b      	ldr	r0, [pc, #44]	; (2cd0c <check_ext_api_requests+0x94>)
   2ccde:	f00c fa28 	bl	39132 <printk>
			k_panic();
   2cce2:	4040      	eors	r0, r0
   2cce4:	f380 8811 	msr	BASEPRI, r0
   2cce8:	f04f 0004 	mov.w	r0, #4
   2ccec:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   2ccee:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2ccf0:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2ccf2:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2ccf4:	e7ca      	b.n	2cc8c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   2ccf6:	4648      	mov	r0, r9
   2ccf8:	f00c fa1b 	bl	39132 <printk>
			*ext_api_req->ext_api = NULL;
   2ccfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ccfe:	601f      	str	r7, [r3, #0]
   2cd00:	e7f5      	b.n	2ccee <check_ext_api_requests+0x76>
   2cd02:	bf00      	nop
   2cd04:	0001c43c 	.word	0x0001c43c
   2cd08:	0003f7d8 	.word	0x0003f7d8
   2cd0c:	00044c79 	.word	0x00044c79
   2cd10:	00044ca2 	.word	0x00044ca2

0002cd14 <bh1749_async_init>:
}


static void bh1749_async_init(struct k_work *work)
{
	struct bh1749_data *data = bh1749_dev->data;
   2cd14:	4b23      	ldr	r3, [pc, #140]	; (2cda4 <bh1749_async_init+0x90>)
{
   2cd16:	b570      	push	{r4, r5, r6, lr}
	struct bh1749_data *data = bh1749_dev->data;
   2cd18:	681b      	ldr	r3, [r3, #0]
   2cd1a:	691c      	ldr	r4, [r3, #16]

	ARG_UNUSED(work);

	LOG_DBG("BH1749 async init step %d", data->async_init_step);

	data->err = async_init_fn[data->async_init_step](data);
   2cd1c:	4b22      	ldr	r3, [pc, #136]	; (2cda8 <bh1749_async_init+0x94>)
   2cd1e:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   2cd22:	4620      	mov	r0, r4
   2cd24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2cd28:	4798      	blx	r3
   2cd2a:	6360      	str	r0, [r4, #52]	; 0x34

	if (data->err) {
   2cd2c:	b158      	cbz	r0, 2cd46 <bh1749_async_init+0x32>
   2cd2e:	481f      	ldr	r0, [pc, #124]	; (2cdac <bh1749_async_init+0x98>)
   2cd30:	4b1f      	ldr	r3, [pc, #124]	; (2cdb0 <bh1749_async_init+0x9c>)
		LOG_ERR("BH1749 initialization failed");
   2cd32:	4920      	ldr	r1, [pc, #128]	; (2cdb4 <bh1749_async_init+0xa0>)
   2cd34:	1ac0      	subs	r0, r0, r3
   2cd36:	08c0      	lsrs	r0, r0, #3
   2cd38:	0180      	lsls	r0, r0, #6
   2cd3a:	f040 0001 	orr.w	r0, r0, #1
		} else {
			k_work_schedule(&bh1749_init_work,
					K_MSEC(async_init_delay[data->async_init_step]));
		}
	}
}
   2cd3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_INF("BH1749 initialized");
   2cd42:	f00c bcc4 	b.w	396ce <log_string_sync>
		data->async_init_step++;
   2cd46:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   2cd4a:	3301      	adds	r3, #1
   2cd4c:	b2db      	uxtb	r3, r3
		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
   2cd4e:	2b03      	cmp	r3, #3
		data->async_init_step++;
   2cd50:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
   2cd54:	d10b      	bne.n	2cd6e <bh1749_async_init+0x5a>
			data->ready = true;
   2cd56:	2301      	movs	r3, #1
   2cd58:	4814      	ldr	r0, [pc, #80]	; (2cdac <bh1749_async_init+0x98>)
   2cd5a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   2cd5e:	4b14      	ldr	r3, [pc, #80]	; (2cdb0 <bh1749_async_init+0x9c>)
			LOG_INF("BH1749 initialized");
   2cd60:	4915      	ldr	r1, [pc, #84]	; (2cdb8 <bh1749_async_init+0xa4>)
   2cd62:	1ac0      	subs	r0, r0, r3
   2cd64:	08c0      	lsrs	r0, r0, #3
   2cd66:	0180      	lsls	r0, r0, #6
   2cd68:	f040 0003 	orr.w	r0, r0, #3
   2cd6c:	e7e7      	b.n	2cd3e <bh1749_async_init+0x2a>
   2cd6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2cd72:	f240 34e7 	movw	r4, #999	; 0x3e7
   2cd76:	2500      	movs	r5, #0
					K_MSEC(async_init_delay[data->async_init_step]));
   2cd78:	4a10      	ldr	r2, [pc, #64]	; (2cdbc <bh1749_async_init+0xa8>)
   2cd7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   2cd7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2cd82:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2cd86:	fbc0 4501 	smlal	r4, r5, r0, r1
   2cd8a:	2300      	movs	r3, #0
   2cd8c:	4620      	mov	r0, r4
   2cd8e:	4629      	mov	r1, r5
   2cd90:	f7f0 f88a 	bl	1cea8 <__aeabi_uldivmod>
}
   2cd94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2cd98:	4602      	mov	r2, r0
   2cd9a:	460b      	mov	r3, r1
			k_work_schedule(&bh1749_init_work,
   2cd9c:	4808      	ldr	r0, [pc, #32]	; (2cdc0 <bh1749_async_init+0xac>)
   2cd9e:	f007 bf0b 	b.w	34bb8 <k_work_schedule>
   2cda2:	bf00      	nop
   2cda4:	20018634 	.word	0x20018634
   2cda8:	0003ffe4 	.word	0x0003ffe4
   2cdac:	0003f5ac 	.word	0x0003f5ac
   2cdb0:	0003f5a4 	.word	0x0003f5a4
   2cdb4:	00044cd5 	.word	0x00044cd5
   2cdb8:	00044cf2 	.word	0x00044cf2
   2cdbc:	0003ffd8 	.word	0x0003ffd8
   2cdc0:	20016c40 	.word	0x20016c40

0002cdc4 <bh1749_channel_get>:
{
   2cdc4:	b508      	push	{r3, lr}
	struct bh1749_data *data = dev->data;
   2cdc6:	6903      	ldr	r3, [r0, #16]
	if (unlikely(!data->ready)) {
   2cdc8:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
   2cdcc:	b960      	cbnz	r0, 2cde8 <bh1749_channel_get+0x24>
   2cdce:	4b11      	ldr	r3, [pc, #68]	; (2ce14 <bh1749_channel_get+0x50>)
   2cdd0:	4811      	ldr	r0, [pc, #68]	; (2ce18 <bh1749_channel_get+0x54>)
		LOG_INF("Device is not initialized yet");
   2cdd2:	4912      	ldr	r1, [pc, #72]	; (2ce1c <bh1749_channel_get+0x58>)
   2cdd4:	1ac0      	subs	r0, r0, r3
   2cdd6:	08c0      	lsrs	r0, r0, #3
   2cdd8:	0180      	lsls	r0, r0, #6
   2cdda:	f040 0003 	orr.w	r0, r0, #3
   2cdde:	f00c fc76 	bl	396ce <log_string_sync>
		return -EBUSY;
   2cde2:	f06f 000f 	mvn.w	r0, #15
}
   2cde6:	bd08      	pop	{r3, pc}
	switch (chan) {
   2cde8:	3912      	subs	r1, #18
   2cdea:	2903      	cmp	r1, #3
   2cdec:	d80e      	bhi.n	2ce0c <bh1749_channel_get+0x48>
   2cdee:	e8df f001 	tbb	[pc, r1]
   2cdf2:	020b      	.short	0x020b
   2cdf4:	0907      	.short	0x0907
		val->val1 = sys_le16_to_cpu(
   2cdf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		val->val2 = 0;
   2cdf8:	2000      	movs	r0, #0
		val->val1 = sys_le16_to_cpu(
   2cdfa:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
   2cdfc:	6050      	str	r0, [r2, #4]
		break;
   2cdfe:	e7f2      	b.n	2cde6 <bh1749_channel_get+0x22>
		val->val1 = sys_le16_to_cpu(
   2ce00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   2ce02:	e7f9      	b.n	2cdf8 <bh1749_channel_get+0x34>
		val->val1 = sys_le16_to_cpu(
   2ce04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2ce06:	e7f7      	b.n	2cdf8 <bh1749_channel_get+0x34>
		val->val1 = sys_le16_to_cpu(
   2ce08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2ce0a:	e7f5      	b.n	2cdf8 <bh1749_channel_get+0x34>
	if (unlikely(!data->ready)) {
   2ce0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ce10:	e7e9      	b.n	2cde6 <bh1749_channel_get+0x22>
   2ce12:	bf00      	nop
   2ce14:	0003f5a4 	.word	0x0003f5a4
   2ce18:	0003f5ac 	.word	0x0003f5ac
   2ce1c:	00044d05 	.word	0x00044d05

0002ce20 <bh1749_init>:

	return 0;
}

static int bh1749_init(const struct device *dev)
{
   2ce20:	b538      	push	{r3, r4, r5, lr}
	bh1749_dev = dev;
   2ce22:	4b1b      	ldr	r3, [pc, #108]	; (2ce90 <bh1749_init+0x70>)

	struct bh1749_data *data = bh1749_dev->data;
   2ce24:	6904      	ldr	r4, [r0, #16]
	bh1749_dev = dev;
   2ce26:	6018      	str	r0, [r3, #0]
   2ce28:	481a      	ldr	r0, [pc, #104]	; (2ce94 <bh1749_init+0x74>)
   2ce2a:	f006 fb3b 	bl	334a4 <z_impl_device_get_binding>
	data->i2c = device_get_binding(DT_BUS_LABEL(DT_DRV_INST(0)));
   2ce2e:	6020      	str	r0, [r4, #0]

	if (data->i2c == NULL) {
   2ce30:	b968      	cbnz	r0, 2ce4e <bh1749_init+0x2e>
   2ce32:	4b19      	ldr	r3, [pc, #100]	; (2ce98 <bh1749_init+0x78>)
   2ce34:	4819      	ldr	r0, [pc, #100]	; (2ce9c <bh1749_init+0x7c>)
		LOG_ERR("Failed to get pointer to %s device!",
   2ce36:	4a17      	ldr	r2, [pc, #92]	; (2ce94 <bh1749_init+0x74>)
   2ce38:	1ac0      	subs	r0, r0, r3
   2ce3a:	08c0      	lsrs	r0, r0, #3
   2ce3c:	0180      	lsls	r0, r0, #6
   2ce3e:	f040 0001 	orr.w	r0, r0, #1
   2ce42:	4917      	ldr	r1, [pc, #92]	; (2cea0 <bh1749_init+0x80>)
   2ce44:	f00c fc43 	bl	396ce <log_string_sync>
			DT_BUS_LABEL(DT_DRV_INST(0)));

		return -EINVAL;
   2ce48:	f06f 0015 	mvn.w	r0, #21
	}
	k_work_init_delayable(&bh1749_init_work, bh1749_async_init);
	k_work_schedule(&bh1749_init_work, K_MSEC(async_init_delay[data->async_init_step]));
	return 0;
};
   2ce4c:	bd38      	pop	{r3, r4, r5, pc}
	k_work_init_delayable(&bh1749_init_work, bh1749_async_init);
   2ce4e:	4915      	ldr	r1, [pc, #84]	; (2cea4 <bh1749_init+0x84>)
   2ce50:	4815      	ldr	r0, [pc, #84]	; (2cea8 <bh1749_init+0x88>)
   2ce52:	f007 fe09 	bl	34a68 <k_work_init_delayable>
   2ce56:	2500      	movs	r5, #0
	k_work_schedule(&bh1749_init_work, K_MSEC(async_init_delay[data->async_init_step]));
   2ce58:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   2ce5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2ce60:	f240 34e7 	movw	r4, #999	; 0x3e7
   2ce64:	4b11      	ldr	r3, [pc, #68]	; (2ceac <bh1749_init+0x8c>)
   2ce66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2ce6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ce6e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2ce72:	fbc0 4501 	smlal	r4, r5, r0, r1
   2ce76:	2300      	movs	r3, #0
   2ce78:	4620      	mov	r0, r4
   2ce7a:	4629      	mov	r1, r5
   2ce7c:	f7f0 f814 	bl	1cea8 <__aeabi_uldivmod>
   2ce80:	4602      	mov	r2, r0
   2ce82:	460b      	mov	r3, r1
   2ce84:	4808      	ldr	r0, [pc, #32]	; (2cea8 <bh1749_init+0x88>)
   2ce86:	f007 fe97 	bl	34bb8 <k_work_schedule>
	return 0;
   2ce8a:	2000      	movs	r0, #0
   2ce8c:	e7de      	b.n	2ce4c <bh1749_init+0x2c>
   2ce8e:	bf00      	nop
   2ce90:	20018634 	.word	0x20018634
   2ce94:	00041a92 	.word	0x00041a92
   2ce98:	0003f5a4 	.word	0x0003f5a4
   2ce9c:	0003f5ac 	.word	0x0003f5ac
   2cea0:	00041c69 	.word	0x00041c69
   2cea4:	0002cd15 	.word	0x0002cd15
   2cea8:	20016c40 	.word	0x20016c40
   2ceac:	0003ffd8 	.word	0x0003ffd8

0002ceb0 <bh1749_async_init_rgb_enable>:
{
   2ceb0:	b508      	push	{r3, lr}
	return i2c_reg_update_byte(data->i2c,
   2ceb2:	2310      	movs	r3, #16
   2ceb4:	2142      	movs	r1, #66	; 0x42
   2ceb6:	461a      	mov	r2, r3
   2ceb8:	6800      	ldr	r0, [r0, #0]
   2ceba:	f00f f9a9 	bl	3c210 <i2c_reg_update_byte.constprop.0>
	if (err) {
   2cebe:	b158      	cbz	r0, 2ced8 <bh1749_async_init_rgb_enable+0x28>
   2cec0:	4b06      	ldr	r3, [pc, #24]	; (2cedc <bh1749_async_init_rgb_enable+0x2c>)
   2cec2:	4807      	ldr	r0, [pc, #28]	; (2cee0 <bh1749_async_init_rgb_enable+0x30>)
		LOG_ERR("Could not set measurement mode.");
   2cec4:	4907      	ldr	r1, [pc, #28]	; (2cee4 <bh1749_async_init_rgb_enable+0x34>)
   2cec6:	1ac0      	subs	r0, r0, r3
   2cec8:	08c0      	lsrs	r0, r0, #3
   2ceca:	0180      	lsls	r0, r0, #6
   2cecc:	f040 0001 	orr.w	r0, r0, #1
   2ced0:	f00c fbfd 	bl	396ce <log_string_sync>
		return -EIO;
   2ced4:	f06f 0004 	mvn.w	r0, #4
}
   2ced8:	bd08      	pop	{r3, pc}
   2ceda:	bf00      	nop
   2cedc:	0003f5a4 	.word	0x0003f5a4
   2cee0:	0003f5ac 	.word	0x0003f5ac
   2cee4:	00044d23 	.word	0x00044d23

0002cee8 <bh1749_async_init_configure>:
{
   2cee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   2ceea:	f642 2341 	movw	r3, #10817	; 0x2a41
   2ceee:	f8ad 3000 	strh.w	r3, [sp]
	msg.len = num_bytes;
   2cef2:	2302      	movs	r3, #2
	if (i2c_reg_write_byte(data->i2c, DT_REG_ADDR(DT_DRV_INST(0)),
   2cef4:	6800      	ldr	r0, [r0, #0]
	msg.buf = (uint8_t *)buf;
   2cef6:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   2cefa:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2cefc:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   2cf00:	6883      	ldr	r3, [r0, #8]
   2cf02:	2201      	movs	r2, #1
   2cf04:	685c      	ldr	r4, [r3, #4]
   2cf06:	a901      	add	r1, sp, #4
   2cf08:	2338      	movs	r3, #56	; 0x38
   2cf0a:	47a0      	blx	r4
   2cf0c:	b158      	cbz	r0, 2cf26 <bh1749_async_init_configure+0x3e>
   2cf0e:	4b07      	ldr	r3, [pc, #28]	; (2cf2c <bh1749_async_init_configure+0x44>)
   2cf10:	4807      	ldr	r0, [pc, #28]	; (2cf30 <bh1749_async_init_configure+0x48>)
		LOG_ERR(
   2cf12:	4908      	ldr	r1, [pc, #32]	; (2cf34 <bh1749_async_init_configure+0x4c>)
   2cf14:	1ac0      	subs	r0, r0, r3
   2cf16:	08c0      	lsrs	r0, r0, #3
   2cf18:	0180      	lsls	r0, r0, #6
   2cf1a:	f040 0001 	orr.w	r0, r0, #1
   2cf1e:	f00c fbd6 	bl	396ce <log_string_sync>
		return -EIO;
   2cf22:	f06f 0004 	mvn.w	r0, #4
}
   2cf26:	b004      	add	sp, #16
   2cf28:	bd10      	pop	{r4, pc}
   2cf2a:	bf00      	nop
   2cf2c:	0003f5a4 	.word	0x0003f5a4
   2cf30:	0003f5ac 	.word	0x0003f5ac
   2cf34:	00044d43 	.word	0x00044d43

0002cf38 <bh1749_sample_fetch>:
{
   2cf38:	b570      	push	{r4, r5, r6, lr}
	if (chan != SENSOR_CHAN_ALL) {
   2cf3a:	2938      	cmp	r1, #56	; 0x38
{
   2cf3c:	460d      	mov	r5, r1
	struct bh1749_data *data = dev->data;
   2cf3e:	6904      	ldr	r4, [r0, #16]
{
   2cf40:	b088      	sub	sp, #32
	if (chan != SENSOR_CHAN_ALL) {
   2cf42:	d00d      	beq.n	2cf60 <bh1749_sample_fetch+0x28>
   2cf44:	4b2f      	ldr	r3, [pc, #188]	; (2d004 <bh1749_sample_fetch+0xcc>)
   2cf46:	4830      	ldr	r0, [pc, #192]	; (2d008 <bh1749_sample_fetch+0xd0>)
		LOG_ERR("Unsupported sensor channel");
   2cf48:	4930      	ldr	r1, [pc, #192]	; (2d00c <bh1749_sample_fetch+0xd4>)
   2cf4a:	1ac0      	subs	r0, r0, r3
   2cf4c:	08c0      	lsrs	r0, r0, #3
   2cf4e:	0180      	lsls	r0, r0, #6
   2cf50:	f040 0001 	orr.w	r0, r0, #1
   2cf54:	f00c fbbb 	bl	396ce <log_string_sync>
		return -ENOTSUP;
   2cf58:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2cf5c:	b008      	add	sp, #32
   2cf5e:	bd70      	pop	{r4, r5, r6, pc}
	if (unlikely(!data->ready)) {
   2cf60:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2cf64:	b963      	cbnz	r3, 2cf80 <bh1749_sample_fetch+0x48>
   2cf66:	4b27      	ldr	r3, [pc, #156]	; (2d004 <bh1749_sample_fetch+0xcc>)
   2cf68:	4827      	ldr	r0, [pc, #156]	; (2d008 <bh1749_sample_fetch+0xd0>)
		LOG_INF("Device is not initialized yet");
   2cf6a:	4929      	ldr	r1, [pc, #164]	; (2d010 <bh1749_sample_fetch+0xd8>)
   2cf6c:	1ac0      	subs	r0, r0, r3
   2cf6e:	08c0      	lsrs	r0, r0, #3
   2cf70:	0180      	lsls	r0, r0, #6
   2cf72:	f040 0003 	orr.w	r0, r0, #3
   2cf76:	f00c fbaa 	bl	396ce <log_string_sync>
		return -EBUSY;
   2cf7a:	f06f 000f 	mvn.w	r0, #15
   2cf7e:	e7ed      	b.n	2cf5c <bh1749_sample_fetch+0x24>
	if (i2c_reg_read_byte(data->i2c, DT_REG_ADDR(DT_DRV_INST(0)),
   2cf80:	2242      	movs	r2, #66	; 0x42
   2cf82:	6820      	ldr	r0, [r4, #0]
   2cf84:	f10d 0306 	add.w	r3, sp, #6
   2cf88:	f00f f97f 	bl	3c28a <i2c_reg_read_byte>
   2cf8c:	b160      	cbz	r0, 2cfa8 <bh1749_sample_fetch+0x70>
   2cf8e:	481e      	ldr	r0, [pc, #120]	; (2d008 <bh1749_sample_fetch+0xd0>)
   2cf90:	4b1c      	ldr	r3, [pc, #112]	; (2d004 <bh1749_sample_fetch+0xcc>)
		LOG_ERR("Could not read status register CONTROL2");
   2cf92:	4920      	ldr	r1, [pc, #128]	; (2d014 <bh1749_sample_fetch+0xdc>)
   2cf94:	1ac0      	subs	r0, r0, r3
   2cf96:	08c0      	lsrs	r0, r0, #3
   2cf98:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not read sensor samples");
   2cf9a:	f040 0001 	orr.w	r0, r0, #1
   2cf9e:	f00c fb96 	bl	396ce <log_string_sync>
		return -EIO;
   2cfa2:	f06f 0004 	mvn.w	r0, #4
   2cfa6:	e7d9      	b.n	2cf5c <bh1749_sample_fetch+0x24>
	if ((status & (BH1749_MODE_CONTROL2_VALID_Msk)) == 0) {
   2cfa8:	f99d 3006 	ldrsb.w	r3, [sp, #6]
   2cfac:	2b00      	cmp	r3, #0
   2cfae:	db06      	blt.n	2cfbe <bh1749_sample_fetch+0x86>
   2cfb0:	4815      	ldr	r0, [pc, #84]	; (2d008 <bh1749_sample_fetch+0xd0>)
   2cfb2:	4b14      	ldr	r3, [pc, #80]	; (2d004 <bh1749_sample_fetch+0xcc>)
		LOG_ERR("No valid data to fetch.");
   2cfb4:	4918      	ldr	r1, [pc, #96]	; (2d018 <bh1749_sample_fetch+0xe0>)
   2cfb6:	1ac0      	subs	r0, r0, r3
   2cfb8:	08c0      	lsrs	r0, r0, #3
   2cfba:	0180      	lsls	r0, r0, #6
   2cfbc:	e7ed      	b.n	2cf9a <bh1749_sample_fetch+0x62>
	if (i2c_burst_read(data->i2c, DT_REG_ADDR(DT_DRV_INST(0)),
   2cfbe:	2350      	movs	r3, #80	; 0x50
   2cfc0:	f854 6b28 	ldr.w	r6, [r4], #40
static inline int i2c_burst_read(const struct device *dev,
   2cfc4:	f88d 3007 	strb.w	r3, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   2cfc8:	f10d 0307 	add.w	r3, sp, #7
   2cfcc:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   2cfce:	2301      	movs	r3, #1
   2cfd0:	9303      	str	r3, [sp, #12]
	msg[1].len = num_read;
   2cfd2:	230a      	movs	r3, #10
   2cfd4:	9306      	str	r3, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2cfd6:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   2cfd8:	f88d 0010 	strb.w	r0, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   2cfdc:	9405      	str	r4, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2cfde:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   2cfe2:	68b3      	ldr	r3, [r6, #8]
   2cfe4:	2202      	movs	r2, #2
   2cfe6:	685c      	ldr	r4, [r3, #4]
   2cfe8:	4630      	mov	r0, r6
   2cfea:	462b      	mov	r3, r5
   2cfec:	a902      	add	r1, sp, #8
   2cfee:	47a0      	blx	r4
   2cff0:	2800      	cmp	r0, #0
   2cff2:	d0b3      	beq.n	2cf5c <bh1749_sample_fetch+0x24>
   2cff4:	4804      	ldr	r0, [pc, #16]	; (2d008 <bh1749_sample_fetch+0xd0>)
   2cff6:	4b03      	ldr	r3, [pc, #12]	; (2d004 <bh1749_sample_fetch+0xcc>)
		LOG_ERR("Could not read sensor samples");
   2cff8:	4908      	ldr	r1, [pc, #32]	; (2d01c <bh1749_sample_fetch+0xe4>)
   2cffa:	1ac0      	subs	r0, r0, r3
   2cffc:	08c0      	lsrs	r0, r0, #3
   2cffe:	0180      	lsls	r0, r0, #6
   2d000:	e7cb      	b.n	2cf9a <bh1749_sample_fetch+0x62>
   2d002:	bf00      	nop
   2d004:	0003f5a4 	.word	0x0003f5a4
   2d008:	0003f5ac 	.word	0x0003f5ac
   2d00c:	00044d7a 	.word	0x00044d7a
   2d010:	00044d05 	.word	0x00044d05
   2d014:	00044d95 	.word	0x00044d95
   2d018:	00044dbd 	.word	0x00044dbd
   2d01c:	00044dd5 	.word	0x00044dd5

0002d020 <bh1749_async_init_reset_check>:
__ssp_bos_icheck3(memset, void *, int)
   2d020:	2300      	movs	r3, #0
{
   2d022:	b513      	push	{r0, r1, r4, lr}
   2d024:	6283      	str	r3, [r0, #40]	; 0x28
   2d026:	62c3      	str	r3, [r0, #44]	; 0x2c
   2d028:	8603      	strh	r3, [r0, #48]	; 0x30
	return i2c_reg_update_byte(dev, DT_REG_ADDR(DT_DRV_INST(0)),
   2d02a:	2340      	movs	r3, #64	; 0x40
{
   2d02c:	4604      	mov	r4, r0
	return i2c_reg_update_byte(dev, DT_REG_ADDR(DT_DRV_INST(0)),
   2d02e:	461a      	mov	r2, r3
   2d030:	4619      	mov	r1, r3
   2d032:	6800      	ldr	r0, [r0, #0]
   2d034:	f00f f8ec 	bl	3c210 <i2c_reg_update_byte.constprop.0>
	if (err) {
   2d038:	b168      	cbz	r0, 2d056 <bh1749_async_init_reset_check+0x36>
   2d03a:	482c      	ldr	r0, [pc, #176]	; (2d0ec <bh1749_async_init_reset_check+0xcc>)
   2d03c:	4b2c      	ldr	r3, [pc, #176]	; (2d0f0 <bh1749_async_init_reset_check+0xd0>)
		LOG_ERR("Could not apply software reset.");
   2d03e:	492d      	ldr	r1, [pc, #180]	; (2d0f4 <bh1749_async_init_reset_check+0xd4>)
   2d040:	1ac0      	subs	r0, r0, r3
   2d042:	08c0      	lsrs	r0, r0, #3
   2d044:	0180      	lsls	r0, r0, #6
   2d046:	f040 0001 	orr.w	r0, r0, #1
   2d04a:	f00c fb40 	bl	396ce <log_string_sync>
		return -EIO;
   2d04e:	f06f 0004 	mvn.w	r0, #4
}
   2d052:	b002      	add	sp, #8
   2d054:	bd10      	pop	{r4, pc}
	if (i2c_reg_read_byte(data->i2c, DT_REG_ADDR(DT_DRV_INST(0)),
   2d056:	2292      	movs	r2, #146	; 0x92
   2d058:	2138      	movs	r1, #56	; 0x38
   2d05a:	6820      	ldr	r0, [r4, #0]
   2d05c:	f10d 0306 	add.w	r3, sp, #6
   2d060:	f00f f913 	bl	3c28a <i2c_reg_read_byte>
   2d064:	b1b0      	cbz	r0, 2d094 <bh1749_async_init_reset_check+0x74>
   2d066:	4821      	ldr	r0, [pc, #132]	; (2d0ec <bh1749_async_init_reset_check+0xcc>)
   2d068:	4b21      	ldr	r3, [pc, #132]	; (2d0f0 <bh1749_async_init_reset_check+0xd0>)
		LOG_ERR("Failed when reading manufacturer ID");
   2d06a:	4923      	ldr	r1, [pc, #140]	; (2d0f8 <bh1749_async_init_reset_check+0xd8>)
   2d06c:	1ac0      	subs	r0, r0, r3
   2d06e:	08c0      	lsrs	r0, r0, #3
   2d070:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed when reading part ID");
   2d072:	f040 0001 	orr.w	r0, r0, #1
   2d076:	f00c fb2a 	bl	396ce <log_string_sync>
   2d07a:	4b1d      	ldr	r3, [pc, #116]	; (2d0f0 <bh1749_async_init_reset_check+0xd0>)
   2d07c:	481b      	ldr	r0, [pc, #108]	; (2d0ec <bh1749_async_init_reset_check+0xcc>)
		LOG_ERR("Communication with BH1749 failed with error %d", err);
   2d07e:	f06f 0204 	mvn.w	r2, #4
   2d082:	1ac0      	subs	r0, r0, r3
   2d084:	08c0      	lsrs	r0, r0, #3
   2d086:	0180      	lsls	r0, r0, #6
   2d088:	491c      	ldr	r1, [pc, #112]	; (2d0fc <bh1749_async_init_reset_check+0xdc>)
   2d08a:	f040 0001 	orr.w	r0, r0, #1
   2d08e:	f00c fb1e 	bl	396ce <log_string_sync>
   2d092:	e7dc      	b.n	2d04e <bh1749_async_init_reset_check+0x2e>
	if (manufacturer_id != BH1749_MANUFACTURER_ID_DEFAULT) {
   2d094:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2d098:	2ae0      	cmp	r2, #224	; 0xe0
   2d09a:	d00a      	beq.n	2d0b2 <bh1749_async_init_reset_check+0x92>
   2d09c:	4813      	ldr	r0, [pc, #76]	; (2d0ec <bh1749_async_init_reset_check+0xcc>)
   2d09e:	4b14      	ldr	r3, [pc, #80]	; (2d0f0 <bh1749_async_init_reset_check+0xd0>)
		LOG_ERR("Invalid manufacturer ID: 0x%02x", manufacturer_id);
   2d0a0:	4917      	ldr	r1, [pc, #92]	; (2d100 <bh1749_async_init_reset_check+0xe0>)
   2d0a2:	1ac0      	subs	r0, r0, r3
   2d0a4:	08c0      	lsrs	r0, r0, #3
   2d0a6:	0180      	lsls	r0, r0, #6
		LOG_ERR("Invalid part ID: 0x%02x", part_id);
   2d0a8:	f040 0001 	orr.w	r0, r0, #1
   2d0ac:	f00c fb0f 	bl	396ce <log_string_sync>
	if (err) {
   2d0b0:	e7e3      	b.n	2d07a <bh1749_async_init_reset_check+0x5a>
	if (i2c_reg_read_byte(data->i2c, DT_REG_ADDR(DT_DRV_INST(0)),
   2d0b2:	2240      	movs	r2, #64	; 0x40
   2d0b4:	2138      	movs	r1, #56	; 0x38
   2d0b6:	6820      	ldr	r0, [r4, #0]
   2d0b8:	f10d 0307 	add.w	r3, sp, #7
   2d0bc:	f00f f8e5 	bl	3c28a <i2c_reg_read_byte>
   2d0c0:	b130      	cbz	r0, 2d0d0 <bh1749_async_init_reset_check+0xb0>
   2d0c2:	480a      	ldr	r0, [pc, #40]	; (2d0ec <bh1749_async_init_reset_check+0xcc>)
   2d0c4:	4b0a      	ldr	r3, [pc, #40]	; (2d0f0 <bh1749_async_init_reset_check+0xd0>)
		LOG_ERR("Failed when reading part ID");
   2d0c6:	490f      	ldr	r1, [pc, #60]	; (2d104 <bh1749_async_init_reset_check+0xe4>)
   2d0c8:	1ac0      	subs	r0, r0, r3
   2d0ca:	08c0      	lsrs	r0, r0, #3
   2d0cc:	0180      	lsls	r0, r0, #6
   2d0ce:	e7d0      	b.n	2d072 <bh1749_async_init_reset_check+0x52>
	if ((part_id & BH1749_SYSTEM_CONTROL_PART_ID_Msk) !=
   2d0d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2d0d4:	f002 033f 	and.w	r3, r2, #63	; 0x3f
   2d0d8:	2b0d      	cmp	r3, #13
   2d0da:	d0ba      	beq.n	2d052 <bh1749_async_init_reset_check+0x32>
   2d0dc:	4803      	ldr	r0, [pc, #12]	; (2d0ec <bh1749_async_init_reset_check+0xcc>)
   2d0de:	4b04      	ldr	r3, [pc, #16]	; (2d0f0 <bh1749_async_init_reset_check+0xd0>)
		LOG_ERR("Invalid part ID: 0x%02x", part_id);
   2d0e0:	4909      	ldr	r1, [pc, #36]	; (2d108 <bh1749_async_init_reset_check+0xe8>)
   2d0e2:	1ac0      	subs	r0, r0, r3
   2d0e4:	08c0      	lsrs	r0, r0, #3
   2d0e6:	0180      	lsls	r0, r0, #6
   2d0e8:	e7de      	b.n	2d0a8 <bh1749_async_init_reset_check+0x88>
   2d0ea:	bf00      	nop
   2d0ec:	0003f5ac 	.word	0x0003f5ac
   2d0f0:	0003f5a4 	.word	0x0003f5a4
   2d0f4:	00044df3 	.word	0x00044df3
   2d0f8:	00044e13 	.word	0x00044e13
   2d0fc:	00044e8b 	.word	0x00044e8b
   2d100:	00044e37 	.word	0x00044e37
   2d104:	00044e57 	.word	0x00044e57
   2d108:	00044e73 	.word	0x00044e73

0002d10c <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   2d10c:	6881      	ldr	r1, [r0, #8]
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   2d10e:	b508      	push	{r3, lr}
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   2d110:	4a04      	ldr	r2, [pc, #16]	; (2d124 <boot_write_magic+0x18>)
   2d112:	2310      	movs	r3, #16
   2d114:	3910      	subs	r1, #16
   2d116:	f00c ffb5 	bl	3a084 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   2d11a:	3800      	subs	r0, #0
   2d11c:	bf18      	it	ne
   2d11e:	2001      	movne	r0, #1
   2d120:	bd08      	pop	{r3, pc}
   2d122:	bf00      	nop
   2d124:	00040004 	.word	0x00040004

0002d128 <boot_read_swap_state>:
{
   2d128:	b530      	push	{r4, r5, lr}
   2d12a:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
   2d12c:	6881      	ldr	r1, [r0, #8]
{
   2d12e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   2d130:	2310      	movs	r3, #16
   2d132:	aa02      	add	r2, sp, #8
   2d134:	3910      	subs	r1, #16
{
   2d136:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   2d138:	f00c ff87 	bl	3a04a <flash_area_read>
    if (rc < 0) {
   2d13c:	2800      	cmp	r0, #0
   2d13e:	db11      	blt.n	2d164 <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
   2d140:	2210      	movs	r2, #16
   2d142:	4628      	mov	r0, r5
   2d144:	a902      	add	r1, sp, #8
   2d146:	f00f f8b9 	bl	3c2bc <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   2d14a:	b168      	cbz	r0, 2d168 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
   2d14c:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   2d14e:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
   2d150:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   2d152:	2301      	movs	r3, #1
   2d154:	4628      	mov	r0, r5
   2d156:	f10d 0207 	add.w	r2, sp, #7
   2d15a:	3928      	subs	r1, #40	; 0x28
   2d15c:	f00c ff75 	bl	3a04a <flash_area_read>
    if (rc < 0) {
   2d160:	2800      	cmp	r0, #0
   2d162:	da0b      	bge.n	2d17c <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
   2d164:	2001      	movs	r0, #1
   2d166:	e02a      	b.n	2d1be <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   2d168:	2210      	movs	r2, #16
   2d16a:	4916      	ldr	r1, [pc, #88]	; (2d1c4 <boot_read_swap_state+0x9c>)
   2d16c:	a802      	add	r0, sp, #8
   2d16e:	f010 feee 	bl	3df4e <memcmp>
   2d172:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
   2d174:	bf14      	ite	ne
   2d176:	2302      	movne	r3, #2
   2d178:	2301      	moveq	r3, #1
   2d17a:	e7e8      	b.n	2d14e <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   2d17c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2d180:	4628      	mov	r0, r5
   2d182:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2d186:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   2d188:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2d18a:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   2d18c:	2201      	movs	r2, #1
   2d18e:	f10d 0107 	add.w	r1, sp, #7
   2d192:	f00f f893 	bl	3c2bc <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   2d196:	b910      	cbnz	r0, 2d19e <boot_read_swap_state+0x76>
   2d198:	7863      	ldrb	r3, [r4, #1]
   2d19a:	2b04      	cmp	r3, #4
   2d19c:	d903      	bls.n	2d1a6 <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   2d19e:	2301      	movs	r3, #1
   2d1a0:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   2d1a2:	2300      	movs	r3, #0
   2d1a4:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
   2d1a6:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   2d1a8:	4628      	mov	r0, r5
   2d1aa:	3a20      	subs	r2, #32
   2d1ac:	1ca1      	adds	r1, r4, #2
   2d1ae:	f00f f89c 	bl	3c2ea <boot_read_flag>
    if (rc) {
   2d1b2:	2800      	cmp	r0, #0
   2d1b4:	d1d6      	bne.n	2d164 <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
   2d1b6:	4628      	mov	r0, r5
   2d1b8:	1ce1      	adds	r1, r4, #3
   2d1ba:	f00f f8f0 	bl	3c39e <boot_read_image_ok>
}
   2d1be:	b007      	add	sp, #28
   2d1c0:	bd30      	pop	{r4, r5, pc}
   2d1c2:	bf00      	nop
   2d1c4:	00040004 	.word	0x00040004

0002d1c8 <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2d1c8:	2a0e      	cmp	r2, #14
{
   2d1ca:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2d1cc:	d906      	bls.n	2d1dc <boot_write_swap_info+0x14>
   2d1ce:	4b0c      	ldr	r3, [pc, #48]	; (2d200 <boot_write_swap_info+0x38>)
   2d1d0:	f44f 71c9 	mov.w	r1, #402	; 0x192
   2d1d4:	4a0b      	ldr	r2, [pc, #44]	; (2d204 <boot_write_swap_info+0x3c>)
   2d1d6:	480c      	ldr	r0, [pc, #48]	; (2d208 <boot_write_swap_info+0x40>)
   2d1d8:	f009 fe9a 	bl	36f10 <__assert_func>
   2d1dc:	290e      	cmp	r1, #14
   2d1de:	d901      	bls.n	2d1e4 <boot_write_swap_info+0x1c>
   2d1e0:	4b0a      	ldr	r3, [pc, #40]	; (2d20c <boot_write_swap_info+0x44>)
   2d1e2:	e7f5      	b.n	2d1d0 <boot_write_swap_info+0x8>
   2d1e4:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
   2d1e8:	6881      	ldr	r1, [r0, #8]
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2d1ea:	f88d 2007 	strb.w	r2, [sp, #7]
    off = boot_swap_info_off(fap);
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   2d1ee:	2301      	movs	r3, #1
   2d1f0:	f10d 0207 	add.w	r2, sp, #7
   2d1f4:	3928      	subs	r1, #40	; 0x28
   2d1f6:	f00f f895 	bl	3c324 <boot_write_trailer>
}
   2d1fa:	b003      	add	sp, #12
   2d1fc:	f85d fb04 	ldr.w	pc, [sp], #4
   2d200:	00044ec1 	.word	0x00044ec1
   2d204:	00044f35 	.word	0x00044f35
   2d208:	00044ed3 	.word	0x00044ed3
   2d20c:	00044f16 	.word	0x00044f16

0002d210 <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   2d210:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2d212:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   2d214:	2006      	movs	r0, #6
   2d216:	a902      	add	r1, sp, #8
   2d218:	f00f f8c5 	bl	3c3a6 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   2d21c:	4604      	mov	r4, r0
   2d21e:	b938      	cbnz	r0, 2d230 <boot_set_pending_multi+0x20>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   2d220:	f89d 5008 	ldrb.w	r5, [sp, #8]
   2d224:	2d02      	cmp	r5, #2
   2d226:	d024      	beq.n	2d272 <boot_set_pending_multi+0x62>
   2d228:	2d03      	cmp	r5, #3
   2d22a:	d004      	beq.n	2d236 <boot_set_pending_multi+0x26>
   2d22c:	2d01      	cmp	r5, #1
   2d22e:	d12f      	bne.n	2d290 <boot_set_pending_multi+0x80>

    default:
        assert(0);
        return BOOT_EBADIMAGE;
    }
}
   2d230:	4620      	mov	r0, r4
   2d232:	b004      	add	sp, #16
   2d234:	bd70      	pop	{r4, r5, r6, pc}
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   2d236:	2006      	movs	r0, #6
   2d238:	a901      	add	r1, sp, #4
   2d23a:	f7f4 fc4d 	bl	21ad8 <flash_area_open>
        if (rc != 0) {
   2d23e:	b9b0      	cbnz	r0, 2d26e <boot_set_pending_multi+0x5e>
            rc = boot_write_magic(fap);
   2d240:	9801      	ldr	r0, [sp, #4]
   2d242:	f7ff ff63 	bl	2d10c <boot_write_magic>
        if (rc == 0 && permanent) {
   2d246:	4604      	mov	r4, r0
   2d248:	b928      	cbnz	r0, 2d256 <boot_set_pending_multi+0x46>
   2d24a:	b146      	cbz	r6, 2d25e <boot_set_pending_multi+0x4e>
            rc = boot_write_image_ok(fap);
   2d24c:	9801      	ldr	r0, [sp, #4]
   2d24e:	f00f f8a1 	bl	3c394 <boot_write_image_ok>
        if (rc == 0) {
   2d252:	4604      	mov	r4, r0
   2d254:	b120      	cbz	r0, 2d260 <boot_set_pending_multi+0x50>
        flash_area_close(fap);
   2d256:	9801      	ldr	r0, [sp, #4]
   2d258:	f00c fef6 	bl	3a048 <flash_area_close>
        return rc;
   2d25c:	e7e8      	b.n	2d230 <boot_set_pending_multi+0x20>
                swap_type = BOOT_SWAP_TYPE_TEST;
   2d25e:	2502      	movs	r5, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
   2d260:	2200      	movs	r2, #0
   2d262:	4629      	mov	r1, r5
   2d264:	9801      	ldr	r0, [sp, #4]
   2d266:	f7ff ffaf 	bl	2d1c8 <boot_write_swap_info>
   2d26a:	4604      	mov	r4, r0
   2d26c:	e7f3      	b.n	2d256 <boot_set_pending_multi+0x46>
            rc = BOOT_EFLASH;
   2d26e:	2401      	movs	r4, #1
   2d270:	e7f1      	b.n	2d256 <boot_set_pending_multi+0x46>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   2d272:	2006      	movs	r0, #6
   2d274:	a901      	add	r1, sp, #4
   2d276:	f7f4 fc2f 	bl	21ad8 <flash_area_open>
        if (rc != 0) {
   2d27a:	b980      	cbnz	r0, 2d29e <boot_set_pending_multi+0x8e>
        flash_area_erase(fap, 0, fap->fa_size);
   2d27c:	9801      	ldr	r0, [sp, #4]
   2d27e:	4621      	mov	r1, r4
   2d280:	6882      	ldr	r2, [r0, #8]
   2d282:	f00c ff31 	bl	3a0e8 <flash_area_erase>
        flash_area_close(fap);
   2d286:	9801      	ldr	r0, [sp, #4]
   2d288:	f00c fede 	bl	3a048 <flash_area_close>
        return BOOT_EBADIMAGE;
   2d28c:	2403      	movs	r4, #3
   2d28e:	e7cf      	b.n	2d230 <boot_set_pending_multi+0x20>
        assert(0);
   2d290:	f44f 7108 	mov.w	r1, #544	; 0x220
   2d294:	4b03      	ldr	r3, [pc, #12]	; (2d2a4 <boot_set_pending_multi+0x94>)
   2d296:	4a04      	ldr	r2, [pc, #16]	; (2d2a8 <boot_set_pending_multi+0x98>)
   2d298:	4804      	ldr	r0, [pc, #16]	; (2d2ac <boot_set_pending_multi+0x9c>)
   2d29a:	f009 fe39 	bl	36f10 <__assert_func>
            return BOOT_EFLASH;
   2d29e:	2401      	movs	r4, #1
   2d2a0:	e7c6      	b.n	2d230 <boot_set_pending_multi+0x20>
   2d2a2:	bf00      	nop
   2d2a4:	000451fc 	.word	0x000451fc
   2d2a8:	00044f4a 	.word	0x00044f4a
   2d2ac:	00044ed3 	.word	0x00044ed3

0002d2b0 <parse_string>:
{
   2d2b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   2d2b4:	680a      	ldr	r2, [r1, #0]
   2d2b6:	688b      	ldr	r3, [r1, #8]
{
   2d2b8:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   2d2ba:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   2d2bc:	18d0      	adds	r0, r2, r3
   2d2be:	5cd3      	ldrb	r3, [r2, r3]
{
   2d2c0:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   2d2c2:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   2d2c4:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   2d2c6:	f040 80de 	bne.w	2d486 <parse_string+0x1d6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   2d2ca:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   2d2cc:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   2d2ce:	684c      	ldr	r4, [r1, #4]
   2d2d0:	1ab9      	subs	r1, r7, r2
   2d2d2:	42a1      	cmp	r1, r4
   2d2d4:	f080 80d7 	bcs.w	2d486 <parse_string+0x1d6>
   2d2d8:	7839      	ldrb	r1, [r7, #0]
   2d2da:	2922      	cmp	r1, #34	; 0x22
   2d2dc:	d10e      	bne.n	2d2fc <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   2d2de:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   2d2e2:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   2d2e4:	f8da 2010 	ldr.w	r2, [sl, #16]
   2d2e8:	4418      	add	r0, r3
   2d2ea:	4790      	blx	r2
        if (output == NULL)
   2d2ec:	4683      	mov	fp, r0
   2d2ee:	2800      	cmp	r0, #0
   2d2f0:	f000 80c9 	beq.w	2d486 <parse_string+0x1d6>
   2d2f4:	4604      	mov	r4, r0
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   2d2f6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 2d490 <parse_string+0x1e0>
   2d2fa:	e00f      	b.n	2d31c <parse_string+0x6c>
            if (input_end[0] == '\\')
   2d2fc:	295c      	cmp	r1, #92	; 0x5c
   2d2fe:	d105      	bne.n	2d30c <parse_string+0x5c>
   2d300:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   2d302:	1ab9      	subs	r1, r7, r2
   2d304:	428c      	cmp	r4, r1
   2d306:	f240 80be 	bls.w	2d486 <parse_string+0x1d6>
                skipped_bytes++;
   2d30a:	3301      	adds	r3, #1
            input_end++;
   2d30c:	3701      	adds	r7, #1
   2d30e:	e7df      	b.n	2d2d0 <parse_string+0x20>
        if (*input_pointer != '\\')
   2d310:	782b      	ldrb	r3, [r5, #0]
   2d312:	2b5c      	cmp	r3, #92	; 0x5c
   2d314:	d012      	beq.n	2d33c <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   2d316:	3501      	adds	r5, #1
   2d318:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   2d31c:	42bd      	cmp	r5, r7
   2d31e:	d3f7      	bcc.n	2d310 <parse_string+0x60>
    *output_pointer = '\0';
   2d320:	2300      	movs	r3, #0
   2d322:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   2d324:	2310      	movs	r3, #16
    return true;
   2d326:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   2d328:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   2d32c:	f8da 3000 	ldr.w	r3, [sl]
   2d330:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   2d332:	3701      	adds	r7, #1
   2d334:	f8ca 7008 	str.w	r7, [sl, #8]
}
   2d338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   2d33c:	1b7a      	subs	r2, r7, r5
   2d33e:	2a00      	cmp	r2, #0
   2d340:	dd0d      	ble.n	2d35e <parse_string+0xae>
            switch (input_pointer[1])
   2d342:	786b      	ldrb	r3, [r5, #1]
   2d344:	2b75      	cmp	r3, #117	; 0x75
   2d346:	d80a      	bhi.n	2d35e <parse_string+0xae>
   2d348:	2b6d      	cmp	r3, #109	; 0x6d
   2d34a:	d812      	bhi.n	2d372 <parse_string+0xc2>
   2d34c:	2b62      	cmp	r3, #98	; 0x62
   2d34e:	d02b      	beq.n	2d3a8 <parse_string+0xf8>
   2d350:	d826      	bhi.n	2d3a0 <parse_string+0xf0>
   2d352:	2b2f      	cmp	r3, #47	; 0x2f
   2d354:	d029      	beq.n	2d3aa <parse_string+0xfa>
   2d356:	2b5c      	cmp	r3, #92	; 0x5c
   2d358:	d027      	beq.n	2d3aa <parse_string+0xfa>
   2d35a:	2b22      	cmp	r3, #34	; 0x22
   2d35c:	d025      	beq.n	2d3aa <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   2d35e:	4658      	mov	r0, fp
   2d360:	f8da 3014 	ldr.w	r3, [sl, #20]
   2d364:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   2d366:	f8da 0000 	ldr.w	r0, [sl]
   2d36a:	1a28      	subs	r0, r5, r0
   2d36c:	f8ca 0008 	str.w	r0, [sl, #8]
   2d370:	e08c      	b.n	2d48c <parse_string+0x1dc>
   2d372:	3b6e      	subs	r3, #110	; 0x6e
   2d374:	2b07      	cmp	r3, #7
   2d376:	d8f2      	bhi.n	2d35e <parse_string+0xae>
   2d378:	a101      	add	r1, pc, #4	; (adr r1, 2d380 <parse_string+0xd0>)
   2d37a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2d37e:	bf00      	nop
   2d380:	0002d3b5 	.word	0x0002d3b5
   2d384:	0002d35f 	.word	0x0002d35f
   2d388:	0002d35f 	.word	0x0002d35f
   2d38c:	0002d35f 	.word	0x0002d35f
   2d390:	0002d3b9 	.word	0x0002d3b9
   2d394:	0002d35f 	.word	0x0002d35f
   2d398:	0002d3bd 	.word	0x0002d3bd
   2d39c:	0002d3c1 	.word	0x0002d3c1
            switch (input_pointer[1])
   2d3a0:	2b66      	cmp	r3, #102	; 0x66
   2d3a2:	d1dc      	bne.n	2d35e <parse_string+0xae>
                    *output_pointer++ = '\f';
   2d3a4:	230c      	movs	r3, #12
   2d3a6:	e000      	b.n	2d3aa <parse_string+0xfa>
                    *output_pointer++ = '\b';
   2d3a8:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   2d3aa:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   2d3ae:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   2d3b0:	441d      	add	r5, r3
   2d3b2:	e7b3      	b.n	2d31c <parse_string+0x6c>
                    *output_pointer++ = '\n';
   2d3b4:	230a      	movs	r3, #10
   2d3b6:	e7f8      	b.n	2d3aa <parse_string+0xfa>
                    *output_pointer++ = '\r';
   2d3b8:	230d      	movs	r3, #13
   2d3ba:	e7f6      	b.n	2d3aa <parse_string+0xfa>
                    *output_pointer++ = '\t';
   2d3bc:	2309      	movs	r3, #9
   2d3be:	e7f4      	b.n	2d3aa <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   2d3c0:	2a05      	cmp	r2, #5
   2d3c2:	ddcc      	ble.n	2d35e <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   2d3c4:	1ca8      	adds	r0, r5, #2
   2d3c6:	f00f f82e 	bl	3c426 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   2d3ca:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   2d3ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   2d3d2:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   2d3d4:	d3c3      	bcc.n	2d35e <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   2d3d6:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   2d3da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2d3de:	d22d      	bcs.n	2d43c <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   2d3e0:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   2d3e2:	1afb      	subs	r3, r7, r3
   2d3e4:	2b05      	cmp	r3, #5
   2d3e6:	ddba      	ble.n	2d35e <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   2d3e8:	79ab      	ldrb	r3, [r5, #6]
   2d3ea:	2b5c      	cmp	r3, #92	; 0x5c
   2d3ec:	d1b7      	bne.n	2d35e <parse_string+0xae>
   2d3ee:	79eb      	ldrb	r3, [r5, #7]
   2d3f0:	2b75      	cmp	r3, #117	; 0x75
   2d3f2:	d1b4      	bne.n	2d35e <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   2d3f4:	f105 0008 	add.w	r0, r5, #8
   2d3f8:	f00f f815 	bl	3c426 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   2d3fc:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   2d400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2d404:	d2ab      	bcs.n	2d35e <parse_string+0xae>
        sequence_length = 12; /* \uXXXX\uXXXX */
   2d406:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   2d408:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   2d40c:	f3c0 0009 	ubfx	r0, r0, #0, #10
   2d410:	4330      	orrs	r0, r6
   2d412:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   2d416:	20f0      	movs	r0, #240	; 0xf0
        utf8_length = 4;
   2d418:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   2d41a:	f101 3eff 	add.w	lr, r1, #4294967295
   2d41e:	fa5f fc8e 	uxtb.w	ip, lr
   2d422:	44a6      	add	lr, r4
   2d424:	b2f2      	uxtb	r2, r6
   2d426:	f1bc 0f00 	cmp.w	ip, #0
   2d42a:	d120      	bne.n	2d46e <parse_string+0x1be>
    if (utf8_length > 1)
   2d42c:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   2d42e:	bf14      	ite	ne
   2d430:	4302      	orrne	r2, r0
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   2d432:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   2d436:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   2d438:	440c      	add	r4, r1
                    if (sequence_length == 0)
   2d43a:	e7b9      	b.n	2d3b0 <parse_string+0x100>
    if (codepoint < 0x80)
   2d43c:	287f      	cmp	r0, #127	; 0x7f
   2d43e:	d90a      	bls.n	2d456 <parse_string+0x1a6>
    else if (codepoint < 0x800)
   2d440:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   2d444:	d30b      	bcc.n	2d45e <parse_string+0x1ae>
    else if (codepoint < 0x10000)
   2d446:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2d44a:	d30c      	bcc.n	2d466 <parse_string+0x1b6>
    else if (codepoint <= 0x10FFFF)
   2d44c:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   2d450:	d285      	bcs.n	2d35e <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   2d452:	2306      	movs	r3, #6
   2d454:	e7df      	b.n	2d416 <parse_string+0x166>
   2d456:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   2d458:	2000      	movs	r0, #0
        utf8_length = 1;
   2d45a:	2101      	movs	r1, #1
   2d45c:	e7dd      	b.n	2d41a <parse_string+0x16a>
        sequence_length = 6; /* \uXXXX */
   2d45e:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   2d460:	20c0      	movs	r0, #192	; 0xc0
        utf8_length = 2;
   2d462:	2102      	movs	r1, #2
   2d464:	e7d9      	b.n	2d41a <parse_string+0x16a>
        sequence_length = 6; /* \uXXXX */
   2d466:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   2d468:	20e0      	movs	r0, #224	; 0xe0
        utf8_length = 3;
   2d46a:	2103      	movs	r1, #3
   2d46c:	e7d5      	b.n	2d41a <parse_string+0x16a>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   2d46e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2d472:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   2d476:	f10c 3cff 	add.w	ip, ip, #4294967295
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   2d47a:	f80e 2901 	strb.w	r2, [lr], #-1
        codepoint >>= 6;
   2d47e:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   2d480:	fa5f fc8c 	uxtb.w	ip, ip
   2d484:	e7ce      	b.n	2d424 <parse_string+0x174>
    if (input_pointer != NULL)
   2d486:	2d00      	cmp	r5, #0
   2d488:	f47f af6d 	bne.w	2d366 <parse_string+0xb6>
    return false;
   2d48c:	2000      	movs	r0, #0
   2d48e:	e753      	b.n	2d338 <parse_string+0x88>
   2d490:	000ffc00 	.word	0x000ffc00

0002d494 <compare_double>:
{
   2d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   2d496:	ec41 0b10 	vmov	d0, r0, r1
{
   2d49a:	ed2d 8b04 	vpush	{d8-d9}
   2d49e:	ec41 0b18 	vmov	d8, r0, r1
   2d4a2:	ec43 2b19 	vmov	d9, r2, r3
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   2d4a6:	f009 fd29 	bl	36efc <fabs>
   2d4aa:	ec55 4b10 	vmov	r4, r5, d0
   2d4ae:	eeb0 0a49 	vmov.f32	s0, s18
   2d4b2:	eef0 0a69 	vmov.f32	s1, s19
   2d4b6:	f009 fd21 	bl	36efc <fabs>
   2d4ba:	4620      	mov	r0, r4
   2d4bc:	ec53 2b10 	vmov	r2, r3, d0
   2d4c0:	4629      	mov	r1, r5
   2d4c2:	f7ef fc09 	bl	1ccd8 <__aeabi_dcmpgt>
   2d4c6:	b328      	cbz	r0, 2d514 <compare_double+0x80>
   2d4c8:	eeb0 0a48 	vmov.f32	s0, s16
   2d4cc:	eef0 0a68 	vmov.f32	s1, s17
   2d4d0:	f009 fd14 	bl	36efc <fabs>
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   2d4d4:	ec53 2b19 	vmov	r2, r3, d9
   2d4d8:	ec51 0b18 	vmov	r0, r1, d8
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   2d4dc:	ec55 4b10 	vmov	r4, r5, d0
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   2d4e0:	f7ee ffb2 	bl	1c448 <__aeabi_dsub>
   2d4e4:	ec41 0b10 	vmov	d0, r0, r1
   2d4e8:	f009 fd08 	bl	36efc <fabs>
   2d4ec:	2200      	movs	r2, #0
   2d4ee:	4b0c      	ldr	r3, [pc, #48]	; (2d520 <compare_double+0x8c>)
   2d4f0:	4620      	mov	r0, r4
   2d4f2:	4629      	mov	r1, r5
   2d4f4:	ec57 6b10 	vmov	r6, r7, d0
   2d4f8:	f7ef f95e 	bl	1c7b8 <__aeabi_dmul>
   2d4fc:	4602      	mov	r2, r0
   2d4fe:	460b      	mov	r3, r1
   2d500:	4630      	mov	r0, r6
   2d502:	4639      	mov	r1, r7
   2d504:	f7ef fbd4 	bl	1ccb0 <__aeabi_dcmple>
}
   2d508:	ecbd 8b04 	vpop	{d8-d9}
   2d50c:	3800      	subs	r0, #0
   2d50e:	bf18      	it	ne
   2d510:	2001      	movne	r0, #1
   2d512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   2d514:	eeb0 0a49 	vmov.f32	s0, s18
   2d518:	eef0 0a69 	vmov.f32	s1, s19
   2d51c:	e7d8      	b.n	2d4d0 <compare_double+0x3c>
   2d51e:	bf00      	nop
   2d520:	3cb00000 	.word	0x3cb00000

0002d524 <get_object_item>:
{
   2d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d526:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   2d528:	b360      	cbz	r0, 2d584 <get_object_item+0x60>
   2d52a:	b359      	cbz	r1, 2d584 <get_object_item+0x60>
    current_element = object->child;
   2d52c:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   2d52e:	b9fa      	cbnz	r2, 2d570 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   2d530:	4e17      	ldr	r6, [pc, #92]	; (2d590 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   2d532:	b33c      	cbz	r4, 2d584 <get_object_item+0x60>
   2d534:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   2d536:	b1c3      	cbz	r3, 2d56a <get_object_item+0x46>
    if (string1 == string2)
   2d538:	42ab      	cmp	r3, r5
   2d53a:	d021      	beq.n	2d580 <get_object_item+0x5c>
   2d53c:	f105 3cff 	add.w	ip, r5, #4294967295
   2d540:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   2d542:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   2d546:	460f      	mov	r7, r1
   2d548:	5d8a      	ldrb	r2, [r1, r6]
   2d54a:	f002 0203 	and.w	r2, r2, #3
   2d54e:	2a01      	cmp	r2, #1
   2d550:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2d554:	bf08      	it	eq
   2d556:	f101 0720 	addeq.w	r7, r1, #32
   2d55a:	5cb0      	ldrb	r0, [r6, r2]
   2d55c:	f000 0003 	and.w	r0, r0, #3
   2d560:	2801      	cmp	r0, #1
   2d562:	bf08      	it	eq
   2d564:	3220      	addeq	r2, #32
   2d566:	4297      	cmp	r7, r2
   2d568:	d00f      	beq.n	2d58a <get_object_item+0x66>
            current_element = current_element->next;
   2d56a:	6824      	ldr	r4, [r4, #0]
   2d56c:	e7e1      	b.n	2d532 <get_object_item+0xe>
            current_element = current_element->next;
   2d56e:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   2d570:	b144      	cbz	r4, 2d584 <get_object_item+0x60>
   2d572:	6a21      	ldr	r1, [r4, #32]
   2d574:	b121      	cbz	r1, 2d580 <get_object_item+0x5c>
   2d576:	4628      	mov	r0, r5
   2d578:	f7ef fe66 	bl	1d248 <strcmp>
   2d57c:	2800      	cmp	r0, #0
   2d57e:	d1f6      	bne.n	2d56e <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   2d580:	6a23      	ldr	r3, [r4, #32]
   2d582:	b903      	cbnz	r3, 2d586 <get_object_item+0x62>
        return NULL;
   2d584:	2400      	movs	r4, #0
}
   2d586:	4620      	mov	r0, r4
   2d588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   2d58a:	2900      	cmp	r1, #0
   2d58c:	d1d9      	bne.n	2d542 <get_object_item+0x1e>
   2d58e:	e7f7      	b.n	2d580 <get_object_item+0x5c>
   2d590:	000462ab 	.word	0x000462ab

0002d594 <print_string_ptr>:
{
   2d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char quotes[] = "\"\"";
   2d598:	4b52      	ldr	r3, [pc, #328]	; (2d6e4 <print_string_ptr+0x150>)
{
   2d59a:	b085      	sub	sp, #20
    const char quotes[] = "\"\"";
   2d59c:	881a      	ldrh	r2, [r3, #0]
   2d59e:	789b      	ldrb	r3, [r3, #2]
{
   2d5a0:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   2d5a2:	460f      	mov	r7, r1
    const char quotes[] = "\"\"";
   2d5a4:	f8ad 200c 	strh.w	r2, [sp, #12]
   2d5a8:	f88d 300e 	strb.w	r3, [sp, #14]
    if (output_buffer == NULL)
   2d5ac:	b919      	cbnz	r1, 2d5b6 <print_string_ptr+0x22>
        return false;
   2d5ae:	2000      	movs	r0, #0
}
   2d5b0:	b005      	add	sp, #20
   2d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   2d5b6:	b340      	cbz	r0, 2d60a <print_string_ptr+0x76>
   2d5b8:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   2d5ba:	f04f 0b00 	mov.w	fp, #0
   2d5be:	2001      	movs	r0, #1
   2d5c0:	4c49      	ldr	r4, [pc, #292]	; (2d6e8 <print_string_ptr+0x154>)
   2d5c2:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   2d5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
   2d5c8:	bb6b      	cbnz	r3, 2d626 <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   2d5ca:	ebaa 0a05 	sub.w	sl, sl, r5
   2d5ce:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   2d5d0:	4638      	mov	r0, r7
   2d5d2:	f10a 0103 	add.w	r1, sl, #3
   2d5d6:	f00e ff8c 	bl	3c4f2 <ensure>
    if (output == NULL)
   2d5da:	4606      	mov	r6, r0
   2d5dc:	2800      	cmp	r0, #0
   2d5de:	d0e6      	beq.n	2d5ae <print_string_ptr+0x1a>
    if (escape_characters == 0)
   2d5e0:	2322      	movs	r3, #34	; 0x22
   2d5e2:	1c44      	adds	r4, r0, #1
   2d5e4:	f10a 0901 	add.w	r9, sl, #1
   2d5e8:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   2d5ec:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   2d5ee:	f1bb 0f00 	cmp.w	fp, #0
   2d5f2:	d12e      	bne.n	2d652 <print_string_ptr+0xbe>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d5f4:	4652      	mov	r2, sl
   2d5f6:	4629      	mov	r1, r5
   2d5f8:	4620      	mov	r0, r4
   2d5fa:	f010 fcb6 	bl	3df6a <memcpy>
        output[output_length + 1] = '\"';
   2d5fe:	2322      	movs	r3, #34	; 0x22
   2d600:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   2d604:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   2d608:	e00b      	b.n	2d622 <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   2d60a:	2103      	movs	r1, #3
   2d60c:	4638      	mov	r0, r7
   2d60e:	f00e ff70 	bl	3c4f2 <ensure>
        if (output == NULL)
   2d612:	2800      	cmp	r0, #0
   2d614:	d0cb      	beq.n	2d5ae <print_string_ptr+0x1a>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   2d616:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2d61a:	a903      	add	r1, sp, #12
   2d61c:	1ad2      	subs	r2, r2, r3
   2d61e:	f010 fe71 	bl	3e304 <strncpy>
    return true;
   2d622:	2001      	movs	r0, #1
   2d624:	e7c4      	b.n	2d5b0 <print_string_ptr+0x1c>
        switch (*input_pointer)
   2d626:	2b22      	cmp	r3, #34	; 0x22
   2d628:	d80b      	bhi.n	2d642 <print_string_ptr+0xae>
   2d62a:	2b07      	cmp	r3, #7
   2d62c:	d90c      	bls.n	2d648 <print_string_ptr+0xb4>
   2d62e:	f1a3 0208 	sub.w	r2, r3, #8
   2d632:	b2d2      	uxtb	r2, r2
   2d634:	fa00 f202 	lsl.w	r2, r0, r2
   2d638:	4222      	tst	r2, r4
   2d63a:	d005      	beq.n	2d648 <print_string_ptr+0xb4>
                escape_characters++;
   2d63c:	f10b 0b01 	add.w	fp, fp, #1
                break;
   2d640:	e7bf      	b.n	2d5c2 <print_string_ptr+0x2e>
        switch (*input_pointer)
   2d642:	2b5c      	cmp	r3, #92	; 0x5c
   2d644:	d1bd      	bne.n	2d5c2 <print_string_ptr+0x2e>
   2d646:	e7f9      	b.n	2d63c <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   2d648:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   2d64a:	bf98      	it	ls
   2d64c:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   2d650:	e7b7      	b.n	2d5c2 <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   2d652:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   2d656:	f04f 0b74 	mov.w	fp, #116	; 0x74
   2d65a:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   2d65c:	4a23      	ldr	r2, [pc, #140]	; (2d6ec <print_string_ptr+0x158>)
   2d65e:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   2d660:	9901      	ldr	r1, [sp, #4]
   2d662:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2d666:	9101      	str	r1, [sp, #4]
   2d668:	b92b      	cbnz	r3, 2d676 <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   2d66a:	2222      	movs	r2, #34	; 0x22
   2d66c:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   2d670:	f806 3008 	strb.w	r3, [r6, r8]
   2d674:	e7d5      	b.n	2d622 <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   2d676:	2b1f      	cmp	r3, #31
   2d678:	d907      	bls.n	2d68a <print_string_ptr+0xf6>
   2d67a:	2b22      	cmp	r3, #34	; 0x22
   2d67c:	d005      	beq.n	2d68a <print_string_ptr+0xf6>
   2d67e:	2b5c      	cmp	r3, #92	; 0x5c
   2d680:	d003      	beq.n	2d68a <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   2d682:	4620      	mov	r0, r4
   2d684:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   2d686:	1c44      	adds	r4, r0, #1
   2d688:	e7ea      	b.n	2d660 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   2d68a:	4620      	mov	r0, r4
            switch (*input_pointer)
   2d68c:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   2d68e:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   2d692:	781b      	ldrb	r3, [r3, #0]
   2d694:	2b0d      	cmp	r3, #13
   2d696:	d80a      	bhi.n	2d6ae <print_string_ptr+0x11a>
   2d698:	2b07      	cmp	r3, #7
   2d69a:	d919      	bls.n	2d6d0 <print_string_ptr+0x13c>
   2d69c:	f1a3 0108 	sub.w	r1, r3, #8
   2d6a0:	2905      	cmp	r1, #5
   2d6a2:	d815      	bhi.n	2d6d0 <print_string_ptr+0x13c>
   2d6a4:	e8df f001 	tbb	[pc, r1]
   2d6a8:	140d1109 	.word	0x140d1109
   2d6ac:	0f0b      	.short	0x0f0b
   2d6ae:	2b22      	cmp	r3, #34	; 0x22
   2d6b0:	d001      	beq.n	2d6b6 <print_string_ptr+0x122>
   2d6b2:	2b5c      	cmp	r3, #92	; 0x5c
   2d6b4:	d10c      	bne.n	2d6d0 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   2d6b6:	7063      	strb	r3, [r4, #1]
                    break;
   2d6b8:	e7e5      	b.n	2d686 <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   2d6ba:	2362      	movs	r3, #98	; 0x62
   2d6bc:	e7fb      	b.n	2d6b6 <print_string_ptr+0x122>
                    *output_pointer = 'f';
   2d6be:	2366      	movs	r3, #102	; 0x66
   2d6c0:	e7f9      	b.n	2d6b6 <print_string_ptr+0x122>
                    *output_pointer = 'n';
   2d6c2:	236e      	movs	r3, #110	; 0x6e
   2d6c4:	e7f7      	b.n	2d6b6 <print_string_ptr+0x122>
                    *output_pointer = 'r';
   2d6c6:	2372      	movs	r3, #114	; 0x72
   2d6c8:	e7f5      	b.n	2d6b6 <print_string_ptr+0x122>
                    *output_pointer = 't';
   2d6ca:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   2d6ce:	e7da      	b.n	2d686 <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   2d6d0:	6839      	ldr	r1, [r7, #0]
   2d6d2:	687d      	ldr	r5, [r7, #4]
   2d6d4:	1a41      	subs	r1, r0, r1
   2d6d6:	1a69      	subs	r1, r5, r1
   2d6d8:	f00a f9c0 	bl	37a5c <sniprintf>
                    output_pointer += 4;
   2d6dc:	4a03      	ldr	r2, [pc, #12]	; (2d6ec <print_string_ptr+0x158>)
   2d6de:	1d60      	adds	r0, r4, #5
                    break;
   2d6e0:	e7d1      	b.n	2d686 <print_string_ptr+0xf2>
   2d6e2:	bf00      	nop
   2d6e4:	00044f67 	.word	0x00044f67
   2d6e8:	04000037 	.word	0x04000037
   2d6ec:	00044f61 	.word	0x00044f61

0002d6f0 <print_value>:
{
   2d6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d6f4:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   2d6f6:	4606      	mov	r6, r0
{
   2d6f8:	b08e      	sub	sp, #56	; 0x38
    if ((item == NULL) || (output_buffer == NULL))
   2d6fa:	b908      	cbnz	r0, 2d700 <print_value+0x10>
    switch ((item->type) & 0xFF)
   2d6fc:	2500      	movs	r5, #0
   2d6fe:	e06f      	b.n	2d7e0 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   2d700:	2900      	cmp	r1, #0
   2d702:	d0fb      	beq.n	2d6fc <print_value+0xc>
    switch ((item->type) & 0xFF)
   2d704:	7b05      	ldrb	r5, [r0, #12]
   2d706:	2d10      	cmp	r5, #16
   2d708:	f000 80e8 	beq.w	2d8dc <print_value+0x1ec>
   2d70c:	dc18      	bgt.n	2d740 <print_value+0x50>
   2d70e:	1e6b      	subs	r3, r5, #1
   2d710:	2b07      	cmp	r3, #7
   2d712:	d8f3      	bhi.n	2d6fc <print_value+0xc>
   2d714:	2b07      	cmp	r3, #7
   2d716:	d8f1      	bhi.n	2d6fc <print_value+0xc>
   2d718:	a201      	add	r2, pc, #4	; (adr r2, 2d720 <print_value+0x30>)
   2d71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2d71e:	bf00      	nop
   2d720:	0002d7bd 	.word	0x0002d7bd
   2d724:	0002d7e9 	.word	0x0002d7e9
   2d728:	0002d6fd 	.word	0x0002d6fd
   2d72c:	0002d795 	.word	0x0002d795
   2d730:	0002d6fd 	.word	0x0002d6fd
   2d734:	0002d6fd 	.word	0x0002d6fd
   2d738:	0002d6fd 	.word	0x0002d6fd
   2d73c:	0002d7ed 	.word	0x0002d7ed
   2d740:	2d40      	cmp	r5, #64	; 0x40
   2d742:	f000 80f9 	beq.w	2d938 <print_value+0x248>
   2d746:	2d80      	cmp	r5, #128	; 0x80
   2d748:	f000 80b4 	beq.w	2d8b4 <print_value+0x1c4>
   2d74c:	2d20      	cmp	r5, #32
   2d74e:	d1d5      	bne.n	2d6fc <print_value+0xc>
            return print_array(item, output_buffer);
   2d750:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   2d752:	2101      	movs	r1, #1
   2d754:	4620      	mov	r0, r4
   2d756:	f00e fecc 	bl	3c4f2 <ensure>
    if (output_pointer == NULL)
   2d75a:	2800      	cmp	r0, #0
   2d75c:	d0ce      	beq.n	2d6fc <print_value+0xc>
    *output_pointer = '[';
   2d75e:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   2d760:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   2d762:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   2d766:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   2d768:	68a3      	ldr	r3, [r4, #8]
   2d76a:	3301      	adds	r3, #1
   2d76c:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   2d76e:	68e3      	ldr	r3, [r4, #12]
   2d770:	3301      	adds	r3, #1
   2d772:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   2d774:	2e00      	cmp	r6, #0
   2d776:	f040 80b6 	bne.w	2d8e6 <print_value+0x1f6>
    output_pointer = ensure(output_buffer, 2);
   2d77a:	2102      	movs	r1, #2
   2d77c:	4620      	mov	r0, r4
   2d77e:	f00e feb8 	bl	3c4f2 <ensure>
    if (output_pointer == NULL)
   2d782:	2800      	cmp	r0, #0
   2d784:	d0ba      	beq.n	2d6fc <print_value+0xc>
    *output_pointer++ = ']';
   2d786:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   2d788:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   2d78a:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   2d78c:	68e3      	ldr	r3, [r4, #12]
   2d78e:	3b01      	subs	r3, #1
   2d790:	60e3      	str	r3, [r4, #12]
   2d792:	e011      	b.n	2d7b8 <print_value+0xc8>
            const char buff[] = "null";
   2d794:	4bb1      	ldr	r3, [pc, #708]	; (2da5c <print_value+0x36c>)
            const char buff[] = "true";
   2d796:	6818      	ldr	r0, [r3, #0]
   2d798:	791b      	ldrb	r3, [r3, #4]
   2d79a:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   2d79c:	2105      	movs	r1, #5
   2d79e:	4620      	mov	r0, r4
            const char buff[] = "true";
   2d7a0:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   2d7a4:	f00e fea5 	bl	3c4f2 <ensure>
            if (output == NULL)
   2d7a8:	4605      	mov	r5, r0
   2d7aa:	b1c8      	cbz	r0, 2d7e0 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   2d7ac:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2d7b0:	a907      	add	r1, sp, #28
   2d7b2:	1ad2      	subs	r2, r2, r3
   2d7b4:	f010 fda6 	bl	3e304 <strncpy>
    return true;
   2d7b8:	2501      	movs	r5, #1
   2d7ba:	e011      	b.n	2d7e0 <print_value+0xf0>
            const char buff[] = "false";
   2d7bc:	4ba8      	ldr	r3, [pc, #672]	; (2da60 <print_value+0x370>)
            output = ensure(output_buffer, sizeof(buff));
   2d7be:	2106      	movs	r1, #6
            const char buff[] = "false";
   2d7c0:	6818      	ldr	r0, [r3, #0]
   2d7c2:	889b      	ldrh	r3, [r3, #4]
   2d7c4:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   2d7c6:	4620      	mov	r0, r4
            const char buff[] = "false";
   2d7c8:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   2d7cc:	f00e fe91 	bl	3c4f2 <ensure>
            if (output == NULL)
   2d7d0:	2800      	cmp	r0, #0
   2d7d2:	d093      	beq.n	2d6fc <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   2d7d4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2d7d8:	a907      	add	r1, sp, #28
   2d7da:	1ad2      	subs	r2, r2, r3
   2d7dc:	f010 fd92 	bl	3e304 <strncpy>
}
   2d7e0:	4628      	mov	r0, r5
   2d7e2:	b00e      	add	sp, #56	; 0x38
   2d7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            const char buff[] = "true";
   2d7e8:	4b9e      	ldr	r3, [pc, #632]	; (2da64 <print_value+0x374>)
   2d7ea:	e7d4      	b.n	2d796 <print_value+0xa6>
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   2d7ec:	2100      	movs	r1, #0
    double d = item->valuedouble;
   2d7ee:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   2d7f2:	2216      	movs	r2, #22
   2d7f4:	a808      	add	r0, sp, #32
   2d7f6:	9107      	str	r1, [sp, #28]
   2d7f8:	f010 fbd7 	bl	3dfaa <memset>
    double test = 0.0;
   2d7fc:	2200      	movs	r2, #0
   2d7fe:	2300      	movs	r3, #0
    if (isnan(d) || isinf(d))
   2d800:	4630      	mov	r0, r6
    double test = 0.0;
   2d802:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (isnan(d) || isinf(d))
   2d806:	4639      	mov	r1, r7
   2d808:	4632      	mov	r2, r6
   2d80a:	463b      	mov	r3, r7
   2d80c:	f7ef fa6e 	bl	1ccec <__aeabi_dcmpun>
   2d810:	f10d 0a1c 	add.w	sl, sp, #28
   2d814:	b988      	cbnz	r0, 2d83a <print_value+0x14a>
   2d816:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   2d81a:	f04f 32ff 	mov.w	r2, #4294967295
   2d81e:	4630      	mov	r0, r6
   2d820:	4649      	mov	r1, r9
   2d822:	4b91      	ldr	r3, [pc, #580]	; (2da68 <print_value+0x378>)
   2d824:	f7ef fa62 	bl	1ccec <__aeabi_dcmpun>
   2d828:	bb00      	cbnz	r0, 2d86c <print_value+0x17c>
   2d82a:	f04f 32ff 	mov.w	r2, #4294967295
   2d82e:	4630      	mov	r0, r6
   2d830:	4649      	mov	r1, r9
   2d832:	4b8d      	ldr	r3, [pc, #564]	; (2da68 <print_value+0x378>)
   2d834:	f7ef fa3c 	bl	1ccb0 <__aeabi_dcmple>
   2d838:	b9c0      	cbnz	r0, 2d86c <print_value+0x17c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   2d83a:	4650      	mov	r0, sl
   2d83c:	4987      	ldr	r1, [pc, #540]	; (2da5c <print_value+0x36c>)
   2d83e:	f010 fd47 	bl	3e2d0 <strcpy>
   2d842:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   2d844:	4620      	mov	r0, r4
   2d846:	1c69      	adds	r1, r5, #1
   2d848:	f00e fe53 	bl	3c4f2 <ensure>
    if (output_pointer == NULL)
   2d84c:	2800      	cmp	r0, #0
   2d84e:	f43f af55 	beq.w	2d6fc <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   2d852:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   2d854:	f81a 2003 	ldrb.w	r2, [sl, r3]
        output_pointer[i] = number_buffer[i];
   2d858:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   2d85a:	3301      	adds	r3, #1
   2d85c:	429d      	cmp	r5, r3
   2d85e:	d1f9      	bne.n	2d854 <print_value+0x164>
    output_pointer[i] = '\0';
   2d860:	2300      	movs	r3, #0
   2d862:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   2d864:	68a0      	ldr	r0, [r4, #8]
   2d866:	4428      	add	r0, r5
   2d868:	60a0      	str	r0, [r4, #8]
    return true;
   2d86a:	e7a5      	b.n	2d7b8 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   2d86c:	211a      	movs	r1, #26
   2d86e:	4a7f      	ldr	r2, [pc, #508]	; (2da6c <print_value+0x37c>)
   2d870:	4650      	mov	r0, sl
   2d872:	e9cd 6700 	strd	r6, r7, [sp]
   2d876:	f00a f8f1 	bl	37a5c <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   2d87a:	497d      	ldr	r1, [pc, #500]	; (2da70 <print_value+0x380>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   2d87c:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   2d87e:	aa04      	add	r2, sp, #16
   2d880:	4650      	mov	r0, sl
   2d882:	f00a f91f 	bl	37ac4 <siscanf>
   2d886:	2801      	cmp	r0, #1
   2d888:	d00b      	beq.n	2d8a2 <print_value+0x1b2>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   2d88a:	211a      	movs	r1, #26
   2d88c:	4650      	mov	r0, sl
   2d88e:	e9cd 6700 	strd	r6, r7, [sp]
   2d892:	4a78      	ldr	r2, [pc, #480]	; (2da74 <print_value+0x384>)
   2d894:	f00a f8e2 	bl	37a5c <sniprintf>
   2d898:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   2d89a:	2d19      	cmp	r5, #25
   2d89c:	f73f af2e 	bgt.w	2d6fc <print_value+0xc>
   2d8a0:	e7d0      	b.n	2d844 <print_value+0x154>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   2d8a2:	4632      	mov	r2, r6
   2d8a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2d8a8:	463b      	mov	r3, r7
   2d8aa:	f7ff fdf3 	bl	2d494 <compare_double>
   2d8ae:	2800      	cmp	r0, #0
   2d8b0:	d0eb      	beq.n	2d88a <print_value+0x19a>
   2d8b2:	e7f2      	b.n	2d89a <print_value+0x1aa>
            if (item->valuestring == NULL)
   2d8b4:	6900      	ldr	r0, [r0, #16]
   2d8b6:	2800      	cmp	r0, #0
   2d8b8:	f43f af20 	beq.w	2d6fc <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   2d8bc:	f7ef fcce 	bl	1d25c <strlen>
   2d8c0:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   2d8c2:	4611      	mov	r1, r2
   2d8c4:	4620      	mov	r0, r4
   2d8c6:	9203      	str	r2, [sp, #12]
   2d8c8:	f00e fe13 	bl	3c4f2 <ensure>
            if (output == NULL)
   2d8cc:	2800      	cmp	r0, #0
   2d8ce:	f43f af15 	beq.w	2d6fc <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d8d2:	9a03      	ldr	r2, [sp, #12]
   2d8d4:	6931      	ldr	r1, [r6, #16]
   2d8d6:	f010 fb48 	bl	3df6a <memcpy>
   2d8da:	e76d      	b.n	2d7b8 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   2d8dc:	6900      	ldr	r0, [r0, #16]
   2d8de:	f7ff fe59 	bl	2d594 <print_string_ptr>
   2d8e2:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   2d8e4:	e77c      	b.n	2d7e0 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   2d8e6:	4621      	mov	r1, r4
   2d8e8:	4630      	mov	r0, r6
   2d8ea:	f7ff ff01 	bl	2d6f0 <print_value>
   2d8ee:	2800      	cmp	r0, #0
   2d8f0:	f43f af04 	beq.w	2d6fc <print_value+0xc>
        update_offset(output_buffer);
   2d8f4:	4620      	mov	r0, r4
   2d8f6:	f00e fddb 	bl	3c4b0 <update_offset>
        if (current_element->next)
   2d8fa:	6833      	ldr	r3, [r6, #0]
   2d8fc:	b1bb      	cbz	r3, 2d92e <print_value+0x23e>
            length = (size_t) (output_buffer->format ? 2 : 1);
   2d8fe:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   2d900:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   2d902:	2b00      	cmp	r3, #0
   2d904:	bf14      	ite	ne
   2d906:	f04f 0902 	movne.w	r9, #2
   2d90a:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   2d90e:	f109 0101 	add.w	r1, r9, #1
   2d912:	f00e fdee 	bl	3c4f2 <ensure>
            if (output_pointer == NULL)
   2d916:	2800      	cmp	r0, #0
   2d918:	f43f aef0 	beq.w	2d6fc <print_value+0xc>
            *output_pointer++ = ',';
   2d91c:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   2d91e:	6963      	ldr	r3, [r4, #20]
   2d920:	b93b      	cbnz	r3, 2d932 <print_value+0x242>
            *output_pointer++ = ',';
   2d922:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   2d924:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   2d928:	68a3      	ldr	r3, [r4, #8]
   2d92a:	444b      	add	r3, r9
   2d92c:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   2d92e:	6836      	ldr	r6, [r6, #0]
   2d930:	e720      	b.n	2d774 <print_value+0x84>
                *output_pointer++ = ' ';
   2d932:	1c83      	adds	r3, r0, #2
   2d934:	7045      	strb	r5, [r0, #1]
   2d936:	e7f5      	b.n	2d924 <print_value+0x234>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   2d938:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   2d93a:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   2d93c:	2b00      	cmp	r3, #0
   2d93e:	bf14      	ite	ne
   2d940:	2702      	movne	r7, #2
   2d942:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   2d944:	4620      	mov	r0, r4
   2d946:	1c79      	adds	r1, r7, #1
   2d948:	f00e fdd3 	bl	3c4f2 <ensure>
    if (output_pointer == NULL)
   2d94c:	2800      	cmp	r0, #0
   2d94e:	f43f aed5 	beq.w	2d6fc <print_value+0xc>
    *output_pointer++ = '{';
   2d952:	237b      	movs	r3, #123	; 0x7b
   2d954:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   2d956:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   2d958:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   2d95a:	3201      	adds	r2, #1
   2d95c:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   2d95e:	b10b      	cbz	r3, 2d964 <print_value+0x274>
        *output_pointer++ = '\n';
   2d960:	230a      	movs	r3, #10
   2d962:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   2d964:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   2d966:	2609      	movs	r6, #9
    output_buffer->offset += length;
   2d968:	443b      	add	r3, r7
        *output_pointer++ = ':';
   2d96a:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   2d96c:	60a3      	str	r3, [r4, #8]
    while (current_item)
   2d96e:	6963      	ldr	r3, [r4, #20]
   2d970:	b995      	cbnz	r5, 2d998 <print_value+0x2a8>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   2d972:	2b00      	cmp	r3, #0
   2d974:	d06f      	beq.n	2da56 <print_value+0x366>
   2d976:	68e1      	ldr	r1, [r4, #12]
   2d978:	3101      	adds	r1, #1
   2d97a:	4620      	mov	r0, r4
   2d97c:	f00e fdb9 	bl	3c4f2 <ensure>
    if (output_pointer == NULL)
   2d980:	2800      	cmp	r0, #0
   2d982:	f43f aebb 	beq.w	2d6fc <print_value+0xc>
    if (output_buffer->format)
   2d986:	6963      	ldr	r3, [r4, #20]
   2d988:	2b00      	cmp	r3, #0
   2d98a:	d17d      	bne.n	2da88 <print_value+0x398>
   2d98c:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   2d98e:	227d      	movs	r2, #125	; 0x7d
   2d990:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   2d992:	2200      	movs	r2, #0
   2d994:	705a      	strb	r2, [r3, #1]
   2d996:	e6f9      	b.n	2d78c <print_value+0x9c>
        if (output_buffer->format)
   2d998:	b173      	cbz	r3, 2d9b8 <print_value+0x2c8>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   2d99a:	4620      	mov	r0, r4
   2d99c:	68e1      	ldr	r1, [r4, #12]
   2d99e:	f00e fda8 	bl	3c4f2 <ensure>
            if (output_pointer == NULL)
   2d9a2:	2800      	cmp	r0, #0
   2d9a4:	f43f aeaa 	beq.w	2d6fc <print_value+0xc>
   2d9a8:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   2d9aa:	68e1      	ldr	r1, [r4, #12]
   2d9ac:	1a13      	subs	r3, r2, r0
   2d9ae:	428b      	cmp	r3, r1
   2d9b0:	d34e      	bcc.n	2da50 <print_value+0x360>
            output_buffer->offset += output_buffer->depth;
   2d9b2:	68a3      	ldr	r3, [r4, #8]
   2d9b4:	440b      	add	r3, r1
   2d9b6:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   2d9b8:	4621      	mov	r1, r4
   2d9ba:	6a28      	ldr	r0, [r5, #32]
   2d9bc:	f7ff fdea 	bl	2d594 <print_string_ptr>
   2d9c0:	2800      	cmp	r0, #0
   2d9c2:	f43f ae9b 	beq.w	2d6fc <print_value+0xc>
        update_offset(output_buffer);
   2d9c6:	4620      	mov	r0, r4
   2d9c8:	f00e fd72 	bl	3c4b0 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   2d9cc:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   2d9ce:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   2d9d0:	2b00      	cmp	r3, #0
   2d9d2:	bf14      	ite	ne
   2d9d4:	f04f 0802 	movne.w	r8, #2
   2d9d8:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   2d9dc:	4641      	mov	r1, r8
   2d9de:	f00e fd88 	bl	3c4f2 <ensure>
        if (output_pointer == NULL)
   2d9e2:	2800      	cmp	r0, #0
   2d9e4:	f43f ae8a 	beq.w	2d6fc <print_value+0xc>
        *output_pointer++ = ':';
   2d9e8:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   2d9ea:	6963      	ldr	r3, [r4, #20]
   2d9ec:	b103      	cbz	r3, 2d9f0 <print_value+0x300>
            *output_pointer++ = '\t';
   2d9ee:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   2d9f0:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   2d9f2:	4621      	mov	r1, r4
        output_buffer->offset += length;
   2d9f4:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   2d9f6:	4628      	mov	r0, r5
        output_buffer->offset += length;
   2d9f8:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   2d9fa:	f7ff fe79 	bl	2d6f0 <print_value>
   2d9fe:	2800      	cmp	r0, #0
   2da00:	f43f ae7c 	beq.w	2d6fc <print_value+0xc>
        update_offset(output_buffer);
   2da04:	4620      	mov	r0, r4
   2da06:	f00e fd53 	bl	3c4b0 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   2da0a:	682b      	ldr	r3, [r5, #0]
   2da0c:	6962      	ldr	r2, [r4, #20]
   2da0e:	3b00      	subs	r3, #0
   2da10:	bf18      	it	ne
   2da12:	2301      	movne	r3, #1
   2da14:	2a00      	cmp	r2, #0
   2da16:	bf0c      	ite	eq
   2da18:	4698      	moveq	r8, r3
   2da1a:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   2da1e:	4620      	mov	r0, r4
   2da20:	f108 0101 	add.w	r1, r8, #1
   2da24:	f00e fd65 	bl	3c4f2 <ensure>
        if (output_pointer == NULL)
   2da28:	2800      	cmp	r0, #0
   2da2a:	f43f ae67 	beq.w	2d6fc <print_value+0xc>
        if (current_item->next)
   2da2e:	682b      	ldr	r3, [r5, #0]
   2da30:	b113      	cbz	r3, 2da38 <print_value+0x348>
            *output_pointer++ = ',';
   2da32:	232c      	movs	r3, #44	; 0x2c
   2da34:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   2da38:	6963      	ldr	r3, [r4, #20]
   2da3a:	b113      	cbz	r3, 2da42 <print_value+0x352>
            *output_pointer++ = '\n';
   2da3c:	230a      	movs	r3, #10
   2da3e:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   2da42:	2300      	movs	r3, #0
   2da44:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   2da46:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   2da48:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   2da4a:	4443      	add	r3, r8
   2da4c:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   2da4e:	e78e      	b.n	2d96e <print_value+0x27e>
                *output_pointer++ = '\t';
   2da50:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   2da54:	e7a9      	b.n	2d9aa <print_value+0x2ba>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   2da56:	2102      	movs	r1, #2
   2da58:	e78f      	b.n	2d97a <print_value+0x28a>
   2da5a:	bf00      	nop
   2da5c:	00044f6a 	.word	0x00044f6a
   2da60:	00044f81 	.word	0x00044f81
   2da64:	00044f87 	.word	0x00044f87
   2da68:	7fefffff 	.word	0x7fefffff
   2da6c:	00044f6f 	.word	0x00044f6f
   2da70:	00044f76 	.word	0x00044f76
   2da74:	00044f7a 	.word	0x00044f7a
            *output_pointer++ = '\t';
   2da78:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   2da7c:	68e2      	ldr	r2, [r4, #12]
   2da7e:	1a19      	subs	r1, r3, r0
   2da80:	3a01      	subs	r2, #1
   2da82:	4291      	cmp	r1, r2
   2da84:	d3f8      	bcc.n	2da78 <print_value+0x388>
   2da86:	e782      	b.n	2d98e <print_value+0x29e>
   2da88:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   2da8a:	2509      	movs	r5, #9
   2da8c:	e7f6      	b.n	2da7c <print_value+0x38c>
   2da8e:	bf00      	nop

0002da90 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   2da90:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2da92:	4d24      	ldr	r5, [pc, #144]	; (2db24 <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   2da94:	b08b      	sub	sp, #44	; 0x2c
   2da96:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   2da98:	2224      	movs	r2, #36	; 0x24
   2da9a:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   2da9c:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   2da9e:	a801      	add	r0, sp, #4
   2daa0:	f010 fa83 	bl	3dfaa <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2daa4:	682b      	ldr	r3, [r5, #0]
   2daa6:	f44f 7080 	mov.w	r0, #256	; 0x100
   2daaa:	4798      	blx	r3
    buffer->length = default_buffer_size;
   2daac:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2dab0:	4603      	mov	r3, r0
    buffer->format = format;
   2dab2:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   2dab4:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2dab6:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   2dab8:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   2daba:	462f      	mov	r7, r5
   2dabc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2dac0:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   2dac4:	b17b      	cbz	r3, 2dae6 <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   2dac6:	4620      	mov	r0, r4
   2dac8:	a901      	add	r1, sp, #4
   2daca:	f7ff fe11 	bl	2d6f0 <print_value>
   2dace:	b150      	cbz	r0, 2dae6 <print.constprop.0+0x56>
    update_offset(buffer);
   2dad0:	a801      	add	r0, sp, #4
   2dad2:	f00e fced 	bl	3c4b0 <update_offset>
    if (hooks->reallocate != NULL)
   2dad6:	68ae      	ldr	r6, [r5, #8]
   2dad8:	9903      	ldr	r1, [sp, #12]
   2dada:	b15e      	cbz	r6, 2daf4 <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   2dadc:	9801      	ldr	r0, [sp, #4]
   2dade:	3101      	adds	r1, #1
   2dae0:	47b0      	blx	r6
        if (printed == NULL) {
   2dae2:	4604      	mov	r4, r0
   2dae4:	b9d0      	cbnz	r0, 2db1c <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   2dae6:	9c01      	ldr	r4, [sp, #4]
   2dae8:	b1c4      	cbz	r4, 2db1c <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   2daea:	4620      	mov	r0, r4
   2daec:	687b      	ldr	r3, [r7, #4]
   2daee:	4798      	blx	r3
    return NULL;
   2daf0:	2400      	movs	r4, #0
   2daf2:	e013      	b.n	2db1c <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   2daf4:	682b      	ldr	r3, [r5, #0]
   2daf6:	1c48      	adds	r0, r1, #1
   2daf8:	4798      	blx	r3
        if (printed == NULL)
   2dafa:	4604      	mov	r4, r0
   2dafc:	2800      	cmp	r0, #0
   2dafe:	d0f2      	beq.n	2dae6 <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   2db00:	9a03      	ldr	r2, [sp, #12]
   2db02:	9b02      	ldr	r3, [sp, #8]
   2db04:	3201      	adds	r2, #1
   2db06:	429a      	cmp	r2, r3
   2db08:	bf28      	it	cs
   2db0a:	461a      	movcs	r2, r3
   2db0c:	9901      	ldr	r1, [sp, #4]
   2db0e:	f010 fa2c 	bl	3df6a <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   2db12:	9b03      	ldr	r3, [sp, #12]
   2db14:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   2db16:	686b      	ldr	r3, [r5, #4]
   2db18:	9801      	ldr	r0, [sp, #4]
   2db1a:	4798      	blx	r3
}
   2db1c:	4620      	mov	r0, r4
   2db1e:	b00b      	add	sp, #44	; 0x2c
   2db20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2db22:	bf00      	nop
   2db24:	20014854 	.word	0x20014854

0002db28 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   2db28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   2db2a:	4605      	mov	r5, r0
   2db2c:	b180      	cbz	r0, 2db50 <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   2db2e:	f7ef fb95 	bl	1d25c <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   2db32:	4b08      	ldr	r3, [pc, #32]	; (2db54 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   2db34:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   2db36:	4610      	mov	r0, r2
   2db38:	681b      	ldr	r3, [r3, #0]
   2db3a:	9201      	str	r2, [sp, #4]
   2db3c:	4798      	blx	r3
    if (copy == NULL)
   2db3e:	4604      	mov	r4, r0
   2db40:	b118      	cbz	r0, 2db4a <cJSON_strdup.isra.0.constprop.0+0x22>
   2db42:	4629      	mov	r1, r5
   2db44:	9a01      	ldr	r2, [sp, #4]
   2db46:	f010 fa10 	bl	3df6a <memcpy>
}
   2db4a:	4620      	mov	r0, r4
   2db4c:	b003      	add	sp, #12
   2db4e:	bd30      	pop	{r4, r5, pc}
        return NULL;
   2db50:	4604      	mov	r4, r0
   2db52:	e7fa      	b.n	2db4a <cJSON_strdup.isra.0.constprop.0+0x22>
   2db54:	20014854 	.word	0x20014854

0002db58 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   2db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2db5a:	460d      	mov	r5, r1
   2db5c:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   2db5e:	4607      	mov	r7, r0
   2db60:	b300      	cbz	r0, 2dba4 <add_item_to_object.constprop.0+0x4c>
   2db62:	b1f9      	cbz	r1, 2dba4 <add_item_to_object.constprop.0+0x4c>
   2db64:	b1f2      	cbz	r2, 2dba4 <add_item_to_object.constprop.0+0x4c>
   2db66:	4290      	cmp	r0, r2
   2db68:	d01c      	beq.n	2dba4 <add_item_to_object.constprop.0+0x4c>
    if (constant_key)
   2db6a:	b193      	cbz	r3, 2db92 <add_item_to_object.constprop.0+0x3a>
        new_type = item->type | cJSON_StringIsConst;
   2db6c:	68d6      	ldr	r6, [r2, #12]
   2db6e:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   2db72:	68e3      	ldr	r3, [r4, #12]
   2db74:	059b      	lsls	r3, r3, #22
   2db76:	d404      	bmi.n	2db82 <add_item_to_object.constprop.0+0x2a>
   2db78:	6a20      	ldr	r0, [r4, #32]
   2db7a:	b110      	cbz	r0, 2db82 <add_item_to_object.constprop.0+0x2a>
        hooks->deallocate(item->string);
   2db7c:	4b0a      	ldr	r3, [pc, #40]	; (2dba8 <add_item_to_object.constprop.0+0x50>)
   2db7e:	685b      	ldr	r3, [r3, #4]
   2db80:	4798      	blx	r3
    return add_item_to_array(object, item);
   2db82:	4621      	mov	r1, r4
   2db84:	4638      	mov	r0, r7
    item->string = new_key;
   2db86:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   2db88:	60e6      	str	r6, [r4, #12]
}
   2db8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   2db8e:	f00e bc9c 	b.w	3c4ca <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   2db92:	4608      	mov	r0, r1
   2db94:	f7ff ffc8 	bl	2db28 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   2db98:	4605      	mov	r5, r0
   2db9a:	b118      	cbz	r0, 2dba4 <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
   2db9c:	68e6      	ldr	r6, [r4, #12]
   2db9e:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   2dba2:	e7e6      	b.n	2db72 <add_item_to_object.constprop.0+0x1a>
}
   2dba4:	2000      	movs	r0, #0
   2dba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2dba8:	20014854 	.word	0x20014854

0002dbac <cJSON_InitHooks>:
{
   2dbac:	b530      	push	{r4, r5, lr}
   2dbae:	4b0d      	ldr	r3, [pc, #52]	; (2dbe4 <cJSON_InitHooks+0x38>)
   2dbb0:	4d0d      	ldr	r5, [pc, #52]	; (2dbe8 <cJSON_InitHooks+0x3c>)
   2dbb2:	4c0e      	ldr	r4, [pc, #56]	; (2dbec <cJSON_InitHooks+0x40>)
    if (hooks == NULL)
   2dbb4:	b920      	cbnz	r0, 2dbc0 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   2dbb6:	e9c3 5400 	strd	r5, r4, [r3]
        global_hooks.reallocate = realloc;
   2dbba:	4a0d      	ldr	r2, [pc, #52]	; (2dbf0 <cJSON_InitHooks+0x44>)
   2dbbc:	609a      	str	r2, [r3, #8]
   2dbbe:	e00f      	b.n	2dbe0 <cJSON_InitHooks+0x34>
    if (hooks->malloc_fn != NULL)
   2dbc0:	6801      	ldr	r1, [r0, #0]
    if (hooks->free_fn != NULL)
   2dbc2:	6842      	ldr	r2, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   2dbc4:	2900      	cmp	r1, #0
   2dbc6:	bf08      	it	eq
   2dbc8:	4629      	moveq	r1, r5
        global_hooks.deallocate = hooks->free_fn;
   2dbca:	2a00      	cmp	r2, #0
   2dbcc:	bf08      	it	eq
   2dbce:	4622      	moveq	r2, r4
    global_hooks.reallocate = NULL;
   2dbd0:	2000      	movs	r0, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   2dbd2:	42a9      	cmp	r1, r5
        global_hooks.allocate = hooks->malloc_fn;
   2dbd4:	6019      	str	r1, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   2dbd6:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   2dbd8:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   2dbda:	d101      	bne.n	2dbe0 <cJSON_InitHooks+0x34>
   2dbdc:	42a2      	cmp	r2, r4
   2dbde:	d0ec      	beq.n	2dbba <cJSON_InitHooks+0xe>
}
   2dbe0:	bd30      	pop	{r4, r5, pc}
   2dbe2:	bf00      	nop
   2dbe4:	20014854 	.word	0x20014854
   2dbe8:	00036f71 	.word	0x00036f71
   2dbec:	00036f81 	.word	0x00036f81
   2dbf0:	00037a2d 	.word	0x00037a2d

0002dbf4 <cJSON_Delete>:
{
   2dbf4:	b570      	push	{r4, r5, r6, lr}
   2dbf6:	4604      	mov	r4, r0
   2dbf8:	4d0f      	ldr	r5, [pc, #60]	; (2dc38 <cJSON_Delete+0x44>)
    while (item != NULL)
   2dbfa:	b904      	cbnz	r4, 2dbfe <cJSON_Delete+0xa>
}
   2dbfc:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   2dbfe:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   2dc00:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   2dc02:	05d9      	lsls	r1, r3, #23
   2dc04:	d403      	bmi.n	2dc0e <cJSON_Delete+0x1a>
   2dc06:	68a0      	ldr	r0, [r4, #8]
   2dc08:	b968      	cbnz	r0, 2dc26 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   2dc0a:	6920      	ldr	r0, [r4, #16]
   2dc0c:	b988      	cbnz	r0, 2dc32 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   2dc0e:	68e3      	ldr	r3, [r4, #12]
   2dc10:	059b      	lsls	r3, r3, #22
   2dc12:	d403      	bmi.n	2dc1c <cJSON_Delete+0x28>
   2dc14:	6a20      	ldr	r0, [r4, #32]
   2dc16:	b108      	cbz	r0, 2dc1c <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   2dc18:	686b      	ldr	r3, [r5, #4]
   2dc1a:	4798      	blx	r3
        global_hooks.deallocate(item);
   2dc1c:	4620      	mov	r0, r4
   2dc1e:	686b      	ldr	r3, [r5, #4]
   2dc20:	4798      	blx	r3
        item = next;
   2dc22:	4634      	mov	r4, r6
   2dc24:	e7e9      	b.n	2dbfa <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   2dc26:	f7ff ffe5 	bl	2dbf4 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   2dc2a:	68e3      	ldr	r3, [r4, #12]
   2dc2c:	05da      	lsls	r2, r3, #23
   2dc2e:	d5ec      	bpl.n	2dc0a <cJSON_Delete+0x16>
   2dc30:	e7ed      	b.n	2dc0e <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   2dc32:	686b      	ldr	r3, [r5, #4]
   2dc34:	4798      	blx	r3
   2dc36:	e7ea      	b.n	2dc0e <cJSON_Delete+0x1a>
   2dc38:	20014854 	.word	0x20014854

0002dc3c <cJSON_ParseWithLengthOpts>:
{
   2dc3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2dc40:	4605      	mov	r5, r0
    global_error.json = NULL;
   2dc42:	f04f 0900 	mov.w	r9, #0
{
   2dc46:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   2dc48:	4f30      	ldr	r7, [pc, #192]	; (2dd0c <cJSON_ParseWithLengthOpts+0xd0>)
{
   2dc4a:	460c      	mov	r4, r1
   2dc4c:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   2dc4e:	2100      	movs	r1, #0
   2dc50:	221c      	movs	r2, #28
   2dc52:	a801      	add	r0, sp, #4
{
   2dc54:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   2dc56:	f010 f9a8 	bl	3dfaa <memset>
    global_error.position = 0;
   2dc5a:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
   2dc5e:	2d00      	cmp	r5, #0
   2dc60:	d04a      	beq.n	2dcf8 <cJSON_ParseWithLengthOpts+0xbc>
   2dc62:	2c00      	cmp	r4, #0
   2dc64:	d03d      	beq.n	2dce2 <cJSON_ParseWithLengthOpts+0xa6>
    buffer.hooks = global_hooks;
   2dc66:	4b2a      	ldr	r3, [pc, #168]	; (2dd10 <cJSON_ParseWithLengthOpts+0xd4>)
    buffer.length = buffer_length; 
   2dc68:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
   2dc6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2dc70:	ab08      	add	r3, sp, #32
   2dc72:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   2dc76:	f00e fc7d 	bl	3c574 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   2dc7a:	4604      	mov	r4, r0
   2dc7c:	2800      	cmp	r0, #0
   2dc7e:	d030      	beq.n	2dce2 <cJSON_ParseWithLengthOpts+0xa6>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   2dc80:	9801      	ldr	r0, [sp, #4]
   2dc82:	b128      	cbz	r0, 2dc90 <cJSON_ParseWithLengthOpts+0x54>
   2dc84:	9b03      	ldr	r3, [sp, #12]
   2dc86:	b9e3      	cbnz	r3, 2dcc2 <cJSON_ParseWithLengthOpts+0x86>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   2dc88:	9b02      	ldr	r3, [sp, #8]
   2dc8a:	2b04      	cmp	r3, #4
   2dc8c:	d80f      	bhi.n	2dcae <cJSON_ParseWithLengthOpts+0x72>
    return buffer;
   2dc8e:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   2dc90:	f00e fbee 	bl	3c470 <buffer_skip_whitespace>
   2dc94:	4601      	mov	r1, r0
   2dc96:	4620      	mov	r0, r4
   2dc98:	f7ef fd1e 	bl	1d6d8 <parse_value>
   2dc9c:	b1f0      	cbz	r0, 2dcdc <cJSON_ParseWithLengthOpts+0xa0>
    if (require_null_terminated)
   2dc9e:	f1b8 0f00 	cmp.w	r8, #0
   2dca2:	d110      	bne.n	2dcc6 <cJSON_ParseWithLengthOpts+0x8a>
    if (return_parse_end)
   2dca4:	bb56      	cbnz	r6, 2dcfc <cJSON_ParseWithLengthOpts+0xc0>
}
   2dca6:	4620      	mov	r0, r4
   2dca8:	b009      	add	sp, #36	; 0x24
   2dcaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   2dcae:	2203      	movs	r2, #3
   2dcb0:	4918      	ldr	r1, [pc, #96]	; (2dd14 <cJSON_ParseWithLengthOpts+0xd8>)
   2dcb2:	f010 fb15 	bl	3e2e0 <strncmp>
   2dcb6:	2800      	cmp	r0, #0
   2dcb8:	d1e9      	bne.n	2dc8e <cJSON_ParseWithLengthOpts+0x52>
        buffer->offset += 3;
   2dcba:	9b03      	ldr	r3, [sp, #12]
   2dcbc:	3303      	adds	r3, #3
   2dcbe:	9303      	str	r3, [sp, #12]
   2dcc0:	e7e5      	b.n	2dc8e <cJSON_ParseWithLengthOpts+0x52>
        return NULL;
   2dcc2:	4648      	mov	r0, r9
   2dcc4:	e7e4      	b.n	2dc90 <cJSON_ParseWithLengthOpts+0x54>
        buffer_skip_whitespace(&buffer);
   2dcc6:	a801      	add	r0, sp, #4
   2dcc8:	f00e fbd2 	bl	3c470 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   2dccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2dcd0:	4293      	cmp	r3, r2
   2dcd2:	d203      	bcs.n	2dcdc <cJSON_ParseWithLengthOpts+0xa0>
   2dcd4:	9a01      	ldr	r2, [sp, #4]
   2dcd6:	5cd3      	ldrb	r3, [r2, r3]
   2dcd8:	2b00      	cmp	r3, #0
   2dcda:	d0e3      	beq.n	2dca4 <cJSON_ParseWithLengthOpts+0x68>
        cJSON_Delete(item);
   2dcdc:	4620      	mov	r0, r4
   2dcde:	f7ff ff89 	bl	2dbf4 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   2dce2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2dce6:	429a      	cmp	r2, r3
   2dce8:	d30d      	bcc.n	2dd06 <cJSON_ParseWithLengthOpts+0xca>
        else if (buffer.length > 0)
   2dcea:	b103      	cbz	r3, 2dcee <cJSON_ParseWithLengthOpts+0xb2>
            local_error.position = buffer.length - 1;
   2dcec:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   2dcee:	b10e      	cbz	r6, 2dcf4 <cJSON_ParseWithLengthOpts+0xb8>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   2dcf0:	18ea      	adds	r2, r5, r3
   2dcf2:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   2dcf4:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   2dcf8:	2400      	movs	r4, #0
   2dcfa:	e7d4      	b.n	2dca6 <cJSON_ParseWithLengthOpts+0x6a>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   2dcfc:	9b01      	ldr	r3, [sp, #4]
   2dcfe:	9a03      	ldr	r2, [sp, #12]
   2dd00:	4413      	add	r3, r2
   2dd02:	6033      	str	r3, [r6, #0]
   2dd04:	e7cf      	b.n	2dca6 <cJSON_ParseWithLengthOpts+0x6a>
   2dd06:	4613      	mov	r3, r2
   2dd08:	e7f1      	b.n	2dcee <cJSON_ParseWithLengthOpts+0xb2>
   2dd0a:	bf00      	nop
   2dd0c:	20018638 	.word	0x20018638
   2dd10:	20014854 	.word	0x20014854
   2dd14:	00044f8c 	.word	0x00044f8c

0002dd18 <cJSON_CreateNull>:
{
   2dd18:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2dd1a:	4b04      	ldr	r3, [pc, #16]	; (2dd2c <cJSON_CreateNull+0x14>)
   2dd1c:	6818      	ldr	r0, [r3, #0]
   2dd1e:	f00e fc29 	bl	3c574 <cJSON_New_Item.isra.0>
    if(item)
   2dd22:	b108      	cbz	r0, 2dd28 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   2dd24:	2304      	movs	r3, #4
   2dd26:	60c3      	str	r3, [r0, #12]
}
   2dd28:	bd08      	pop	{r3, pc}
   2dd2a:	bf00      	nop
   2dd2c:	20014854 	.word	0x20014854

0002dd30 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   2dd30:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2dd32:	4b0a      	ldr	r3, [pc, #40]	; (2dd5c <cJSON_CreateString+0x2c>)
{
   2dd34:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   2dd36:	6818      	ldr	r0, [r3, #0]
   2dd38:	f00e fc1c 	bl	3c574 <cJSON_New_Item.isra.0>
    if(item)
   2dd3c:	4604      	mov	r4, r0
   2dd3e:	b158      	cbz	r0, 2dd58 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   2dd40:	2310      	movs	r3, #16
   2dd42:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   2dd44:	4628      	mov	r0, r5
   2dd46:	f7ff feef 	bl	2db28 <cJSON_strdup.isra.0.constprop.0>
   2dd4a:	4605      	mov	r5, r0
   2dd4c:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   2dd4e:	b918      	cbnz	r0, 2dd58 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   2dd50:	4620      	mov	r0, r4
   2dd52:	f7ff ff4f 	bl	2dbf4 <cJSON_Delete>
            return NULL;
   2dd56:	462c      	mov	r4, r5
        }
    }

    return item;
}
   2dd58:	4620      	mov	r0, r4
   2dd5a:	bd38      	pop	{r3, r4, r5, pc}
   2dd5c:	20014854 	.word	0x20014854

0002dd60 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   2dd60:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2dd62:	4b04      	ldr	r3, [pc, #16]	; (2dd74 <cJSON_CreateArray+0x14>)
   2dd64:	6818      	ldr	r0, [r3, #0]
   2dd66:	f00e fc05 	bl	3c574 <cJSON_New_Item.isra.0>
    if(item)
   2dd6a:	b108      	cbz	r0, 2dd70 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   2dd6c:	2320      	movs	r3, #32
   2dd6e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   2dd70:	bd08      	pop	{r3, pc}
   2dd72:	bf00      	nop
   2dd74:	20014854 	.word	0x20014854

0002dd78 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   2dd78:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2dd7a:	4b04      	ldr	r3, [pc, #16]	; (2dd8c <cJSON_CreateObject+0x14>)
   2dd7c:	6818      	ldr	r0, [r3, #0]
   2dd7e:	f00e fbf9 	bl	3c574 <cJSON_New_Item.isra.0>
    if (item)
   2dd82:	b108      	cbz	r0, 2dd88 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   2dd84:	2340      	movs	r3, #64	; 0x40
   2dd86:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   2dd88:	bd08      	pop	{r3, pc}
   2dd8a:	bf00      	nop
   2dd8c:	20014854 	.word	0x20014854

0002dd90 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   2dd90:	4803      	ldr	r0, [pc, #12]	; (2dda0 <cJSON_Init+0x10>)
   2dd92:	4b04      	ldr	r3, [pc, #16]	; (2dda4 <cJSON_Init+0x14>)
   2dd94:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   2dd96:	4b04      	ldr	r3, [pc, #16]	; (2dda8 <cJSON_Init+0x18>)
   2dd98:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   2dd9a:	f7ff bf07 	b.w	2dbac <cJSON_InitHooks>
   2dd9e:	bf00      	nop
   2dda0:	20018640 	.word	0x20018640
   2dda4:	0003c68d 	.word	0x0003c68d
   2dda8:	0003c689 	.word	0x0003c689

0002ddac <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   2ddac:	4a07      	ldr	r2, [pc, #28]	; (2ddcc <SystemInit+0x20>)
   2ddae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2ddb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   2ddb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   2ddba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2ddbe:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   2ddc2:	4b03      	ldr	r3, [pc, #12]	; (2ddd0 <SystemInit+0x24>)
   2ddc4:	4a03      	ldr	r2, [pc, #12]	; (2ddd4 <SystemInit+0x28>)
   2ddc6:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   2ddc8:	4770      	bx	lr
   2ddca:	bf00      	nop
   2ddcc:	e000ed00 	.word	0xe000ed00
   2ddd0:	20014860 	.word	0x20014860
   2ddd4:	03d09000 	.word	0x03d09000

0002ddd8 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   2ddd8:	b508      	push	{r3, lr}
    switch (domain)
   2ddda:	b178      	cbz	r0, 2ddfc <nrf_clock_is_running.constprop.0+0x24>
   2dddc:	2801      	cmp	r0, #1
   2ddde:	d019      	beq.n	2de14 <nrf_clock_is_running.constprop.0+0x3c>
            NRFX_ASSERT(0);
   2dde0:	f44f 734f 	mov.w	r3, #828	; 0x33c
   2dde4:	4a10      	ldr	r2, [pc, #64]	; (2de28 <nrf_clock_is_running.constprop.0+0x50>)
   2dde6:	4911      	ldr	r1, [pc, #68]	; (2de2c <nrf_clock_is_running.constprop.0+0x54>)
   2dde8:	4811      	ldr	r0, [pc, #68]	; (2de30 <nrf_clock_is_running.constprop.0+0x58>)
   2ddea:	f00b f9a2 	bl	39132 <printk>
   2ddee:	480e      	ldr	r0, [pc, #56]	; (2de28 <nrf_clock_is_running.constprop.0+0x50>)
   2ddf0:	f44f 714f 	mov.w	r1, #828	; 0x33c
   2ddf4:	f00b fc3c 	bl	39670 <assert_post_action>
            return false;
   2ddf8:	2000      	movs	r0, #0
   2ddfa:	e00a      	b.n	2de12 <nrf_clock_is_running.constprop.0+0x3a>
            if (p_clk_src != NULL)
   2ddfc:	4a0d      	ldr	r2, [pc, #52]	; (2de34 <nrf_clock_is_running.constprop.0+0x5c>)
   2ddfe:	b121      	cbz	r1, 2de0a <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2de00:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   2de04:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2de08:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2de0a:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2de0e:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   2de12:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   2de14:	4a07      	ldr	r2, [pc, #28]	; (2de34 <nrf_clock_is_running.constprop.0+0x5c>)
   2de16:	b121      	cbz	r1, 2de22 <nrf_clock_is_running.constprop.0+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2de18:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   2de1c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2de20:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2de22:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   2de26:	e7f2      	b.n	2de0e <nrf_clock_is_running.constprop.0+0x36>
   2de28:	00044f90 	.word	0x00044f90
   2de2c:	000451fc 	.word	0x000451fc
   2de30:	0004033e 	.word	0x0004033e
   2de34:	40005000 	.word	0x40005000

0002de38 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   2de38:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   2de3a:	4604      	mov	r4, r0
   2de3c:	b948      	cbnz	r0, 2de52 <nrfx_clock_init+0x1a>
   2de3e:	490a      	ldr	r1, [pc, #40]	; (2de68 <nrfx_clock_init+0x30>)
   2de40:	480a      	ldr	r0, [pc, #40]	; (2de6c <nrfx_clock_init+0x34>)
   2de42:	23b5      	movs	r3, #181	; 0xb5
   2de44:	4a0a      	ldr	r2, [pc, #40]	; (2de70 <nrfx_clock_init+0x38>)
   2de46:	f00b f974 	bl	39132 <printk>
   2de4a:	21b5      	movs	r1, #181	; 0xb5
   2de4c:	4808      	ldr	r0, [pc, #32]	; (2de70 <nrfx_clock_init+0x38>)
   2de4e:	f00b fc0f 	bl	39670 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2de52:	4b08      	ldr	r3, [pc, #32]	; (2de74 <nrfx_clock_init+0x3c>)
   2de54:	791a      	ldrb	r2, [r3, #4]
   2de56:	b922      	cbnz	r2, 2de62 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2de58:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   2de5a:	4807      	ldr	r0, [pc, #28]	; (2de78 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   2de5c:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   2de5e:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2de60:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2de62:	4806      	ldr	r0, [pc, #24]	; (2de7c <nrfx_clock_init+0x44>)
    return err_code;
   2de64:	e7fc      	b.n	2de60 <nrfx_clock_init+0x28>
   2de66:	bf00      	nop
   2de68:	00045001 	.word	0x00045001
   2de6c:	0004033e 	.word	0x0004033e
   2de70:	00044fc4 	.word	0x00044fc4
   2de74:	20018648 	.word	0x20018648
   2de78:	0bad0000 	.word	0x0bad0000
   2de7c:	0bad000c 	.word	0x0bad000c

0002de80 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   2de80:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2de82:	4b0b      	ldr	r3, [pc, #44]	; (2deb0 <nrfx_clock_enable+0x30>)
   2de84:	791b      	ldrb	r3, [r3, #4]
   2de86:	b94b      	cbnz	r3, 2de9c <nrfx_clock_enable+0x1c>
   2de88:	490a      	ldr	r1, [pc, #40]	; (2deb4 <nrfx_clock_enable+0x34>)
   2de8a:	480b      	ldr	r0, [pc, #44]	; (2deb8 <nrfx_clock_enable+0x38>)
   2de8c:	23ce      	movs	r3, #206	; 0xce
   2de8e:	4a0b      	ldr	r2, [pc, #44]	; (2debc <nrfx_clock_enable+0x3c>)
   2de90:	f00b f94f 	bl	39132 <printk>
   2de94:	21ce      	movs	r1, #206	; 0xce
   2de96:	4809      	ldr	r0, [pc, #36]	; (2debc <nrfx_clock_enable+0x3c>)
   2de98:	f00b fbea 	bl	39670 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2de9c:	2005      	movs	r0, #5
   2de9e:	f7f5 f9a5 	bl	231ec <arch_irq_is_enabled>
   2dea2:	b920      	cbnz	r0, 2deae <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   2dea4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2dea8:	2005      	movs	r0, #5
   2deaa:	f7f5 b98f 	b.w	231cc <arch_irq_enable>
   2deae:	bd08      	pop	{r3, pc}
   2deb0:	20018648 	.word	0x20018648
   2deb4:	0004500f 	.word	0x0004500f
   2deb8:	0004033e 	.word	0x0004033e
   2debc:	00044fc4 	.word	0x00044fc4

0002dec0 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2dec0:	4b22      	ldr	r3, [pc, #136]	; (2df4c <nrfx_clock_start+0x8c>)
{
   2dec2:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2dec4:	791b      	ldrb	r3, [r3, #4]
{
   2dec6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2dec8:	b95b      	cbnz	r3, 2dee2 <nrfx_clock_start+0x22>
   2deca:	4921      	ldr	r1, [pc, #132]	; (2df50 <nrfx_clock_start+0x90>)
   2decc:	4821      	ldr	r0, [pc, #132]	; (2df54 <nrfx_clock_start+0x94>)
   2dece:	f44f 7385 	mov.w	r3, #266	; 0x10a
   2ded2:	4a21      	ldr	r2, [pc, #132]	; (2df58 <nrfx_clock_start+0x98>)
   2ded4:	f00b f92d 	bl	39132 <printk>
   2ded8:	f44f 7185 	mov.w	r1, #266	; 0x10a
   2dedc:	481e      	ldr	r0, [pc, #120]	; (2df58 <nrfx_clock_start+0x98>)
   2dede:	f00b fbc7 	bl	39670 <assert_post_action>
    switch (domain)
   2dee2:	b174      	cbz	r4, 2df02 <nrfx_clock_start+0x42>
   2dee4:	2c01      	cmp	r4, #1
   2dee6:	d027      	beq.n	2df38 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   2dee8:	f44f 739e 	mov.w	r3, #316	; 0x13c
   2deec:	4a1a      	ldr	r2, [pc, #104]	; (2df58 <nrfx_clock_start+0x98>)
   2deee:	491b      	ldr	r1, [pc, #108]	; (2df5c <nrfx_clock_start+0x9c>)
   2def0:	4818      	ldr	r0, [pc, #96]	; (2df54 <nrfx_clock_start+0x94>)
   2def2:	f00b f91e 	bl	39132 <printk>
   2def6:	f44f 719e 	mov.w	r1, #316	; 0x13c
   2defa:	4817      	ldr	r0, [pc, #92]	; (2df58 <nrfx_clock_start+0x98>)
   2defc:	f00b fbb8 	bl	39670 <assert_post_action>
            break;
    }
}
   2df00:	e016      	b.n	2df30 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2df02:	4620      	mov	r0, r4
   2df04:	f10d 0107 	add.w	r1, sp, #7
   2df08:	f7ff ff66 	bl	2ddd8 <nrf_clock_is_running.constprop.0>
   2df0c:	4b14      	ldr	r3, [pc, #80]	; (2df60 <nrfx_clock_start+0xa0>)
   2df0e:	b188      	cbz	r0, 2df34 <nrfx_clock_start+0x74>
   2df10:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2df14:	2a02      	cmp	r2, #2
   2df16:	d10d      	bne.n	2df34 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2df18:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2df1c:	2200      	movs	r2, #0
   2df1e:	4b11      	ldr	r3, [pc, #68]	; (2df64 <nrfx_clock_start+0xa4>)
   2df20:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   2df22:	2202      	movs	r2, #2
   2df24:	681b      	ldr	r3, [r3, #0]
   2df26:	4b0e      	ldr	r3, [pc, #56]	; (2df60 <nrfx_clock_start+0xa0>)
   2df28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2df2c:	2201      	movs	r2, #1
   2df2e:	609a      	str	r2, [r3, #8]
}
   2df30:	b002      	add	sp, #8
   2df32:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   2df34:	2201      	movs	r2, #1
   2df36:	e7ef      	b.n	2df18 <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2df38:	2200      	movs	r2, #0
   2df3a:	4b0b      	ldr	r3, [pc, #44]	; (2df68 <nrfx_clock_start+0xa8>)
   2df3c:	601a      	str	r2, [r3, #0]
   2df3e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2df40:	4b07      	ldr	r3, [pc, #28]	; (2df60 <nrfx_clock_start+0xa0>)
   2df42:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2df46:	601c      	str	r4, [r3, #0]
}
   2df48:	e7f2      	b.n	2df30 <nrfx_clock_start+0x70>
   2df4a:	bf00      	nop
   2df4c:	20018648 	.word	0x20018648
   2df50:	0004500f 	.word	0x0004500f
   2df54:	0004033e 	.word	0x0004033e
   2df58:	00044fc4 	.word	0x00044fc4
   2df5c:	000451fc 	.word	0x000451fc
   2df60:	40005000 	.word	0x40005000
   2df64:	40005104 	.word	0x40005104
   2df68:	40005100 	.word	0x40005100

0002df6c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2df6c:	4b2d      	ldr	r3, [pc, #180]	; (2e024 <nrfx_clock_stop+0xb8>)
{
   2df6e:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2df70:	791b      	ldrb	r3, [r3, #4]
{
   2df72:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2df74:	b95b      	cbnz	r3, 2df8e <nrfx_clock_stop+0x22>
   2df76:	492c      	ldr	r1, [pc, #176]	; (2e028 <nrfx_clock_stop+0xbc>)
   2df78:	482c      	ldr	r0, [pc, #176]	; (2e02c <nrfx_clock_stop+0xc0>)
   2df7a:	f240 1343 	movw	r3, #323	; 0x143
   2df7e:	4a2c      	ldr	r2, [pc, #176]	; (2e030 <nrfx_clock_stop+0xc4>)
   2df80:	f00b f8d7 	bl	39132 <printk>
   2df84:	f240 1143 	movw	r1, #323	; 0x143
   2df88:	4829      	ldr	r0, [pc, #164]	; (2e030 <nrfx_clock_stop+0xc4>)
   2df8a:	f00b fb71 	bl	39670 <assert_post_action>
    switch (domain)
   2df8e:	b17c      	cbz	r4, 2dfb0 <nrfx_clock_stop+0x44>
   2df90:	2c01      	cmp	r4, #1
   2df92:	d027      	beq.n	2dfe4 <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   2df94:	4927      	ldr	r1, [pc, #156]	; (2e034 <nrfx_clock_stop+0xc8>)
   2df96:	4825      	ldr	r0, [pc, #148]	; (2e02c <nrfx_clock_stop+0xc0>)
   2df98:	f240 135f 	movw	r3, #351	; 0x15f
   2df9c:	4a24      	ldr	r2, [pc, #144]	; (2e030 <nrfx_clock_stop+0xc4>)
   2df9e:	f00b f8c8 	bl	39132 <printk>
   2dfa2:	f240 115f 	movw	r1, #351	; 0x15f
   2dfa6:	4822      	ldr	r0, [pc, #136]	; (2e030 <nrfx_clock_stop+0xc4>)
   2dfa8:	f00b fb62 	bl	39670 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2dfac:	b002      	add	sp, #8
   2dfae:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   2dfb0:	2202      	movs	r2, #2
   2dfb2:	4b21      	ldr	r3, [pc, #132]	; (2e038 <nrfx_clock_stop+0xcc>)
   2dfb4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dfb8:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dfba:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dfbe:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dfc2:	f503 7382 	add.w	r3, r3, #260	; 0x104
   2dfc6:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dfc8:	4b1c      	ldr	r3, [pc, #112]	; (2e03c <nrfx_clock_stop+0xd0>)
   2dfca:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   2dfcc:	2100      	movs	r1, #0
   2dfce:	4608      	mov	r0, r1
   2dfd0:	f7ff ff02 	bl	2ddd8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   2dfd4:	2800      	cmp	r0, #0
   2dfd6:	d0e9      	beq.n	2dfac <nrfx_clock_stop+0x40>
   2dfd8:	2001      	movs	r0, #1
   2dfda:	f00e fb5c 	bl	3c696 <nrfx_busy_wait>
   2dfde:	3c01      	subs	r4, #1
   2dfe0:	d1f4      	bne.n	2dfcc <nrfx_clock_stop+0x60>
   2dfe2:	e7e3      	b.n	2dfac <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dfe4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   2dfe6:	4b14      	ldr	r3, [pc, #80]	; (2e038 <nrfx_clock_stop+0xcc>)
   2dfe8:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2dfec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2dff0:	f503 7380 	add.w	r3, r3, #256	; 0x100
   2dff4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2dff6:	4b12      	ldr	r3, [pc, #72]	; (2e040 <nrfx_clock_stop+0xd4>)
   2dff8:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2dffa:	f88d 4007 	strb.w	r4, [sp, #7]
   2dffe:	f242 7410 	movw	r4, #10000	; 0x2710
   2e002:	2001      	movs	r0, #1
   2e004:	f10d 0107 	add.w	r1, sp, #7
   2e008:	f7ff fee6 	bl	2ddd8 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   2e00c:	2800      	cmp	r0, #0
   2e00e:	d0cd      	beq.n	2dfac <nrfx_clock_stop+0x40>
   2e010:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e014:	2801      	cmp	r0, #1
   2e016:	d1c9      	bne.n	2dfac <nrfx_clock_stop+0x40>
   2e018:	f00e fb3d 	bl	3c696 <nrfx_busy_wait>
   2e01c:	3c01      	subs	r4, #1
   2e01e:	d1f0      	bne.n	2e002 <nrfx_clock_stop+0x96>
   2e020:	e7c4      	b.n	2dfac <nrfx_clock_stop+0x40>
   2e022:	bf00      	nop
   2e024:	20018648 	.word	0x20018648
   2e028:	0004500f 	.word	0x0004500f
   2e02c:	0004033e 	.word	0x0004033e
   2e030:	00044fc4 	.word	0x00044fc4
   2e034:	000451fc 	.word	0x000451fc
   2e038:	40005000 	.word	0x40005000
   2e03c:	4000500c 	.word	0x4000500c
   2e040:	40005004 	.word	0x40005004

0002e044 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2e044:	4b15      	ldr	r3, [pc, #84]	; (2e09c <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2e046:	b507      	push	{r0, r1, r2, lr}
   2e048:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2e04a:	b14a      	cbz	r2, 2e060 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e04c:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   2e04e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e050:	6018      	str	r0, [r3, #0]
   2e052:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2e054:	4b12      	ldr	r3, [pc, #72]	; (2e0a0 <nrfx_power_clock_irq_handler+0x5c>)
   2e056:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2e05a:	4b12      	ldr	r3, [pc, #72]	; (2e0a4 <nrfx_power_clock_irq_handler+0x60>)
   2e05c:	681b      	ldr	r3, [r3, #0]
   2e05e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2e060:	4b11      	ldr	r3, [pc, #68]	; (2e0a8 <nrfx_power_clock_irq_handler+0x64>)
   2e062:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2e064:	b17a      	cbz	r2, 2e086 <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e066:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   2e068:	f10d 0107 	add.w	r1, sp, #7
   2e06c:	6018      	str	r0, [r3, #0]
   2e06e:	681b      	ldr	r3, [r3, #0]
   2e070:	f7ff feb2 	bl	2ddd8 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2e074:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2e078:	2202      	movs	r2, #2
   2e07a:	2901      	cmp	r1, #1
   2e07c:	4b08      	ldr	r3, [pc, #32]	; (2e0a0 <nrfx_power_clock_irq_handler+0x5c>)
   2e07e:	d105      	bne.n	2e08c <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2e080:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e084:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   2e086:	b003      	add	sp, #12
   2e088:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   2e08c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2e090:	4b04      	ldr	r3, [pc, #16]	; (2e0a4 <nrfx_power_clock_irq_handler+0x60>)
   2e092:	2001      	movs	r0, #1
   2e094:	681b      	ldr	r3, [r3, #0]
   2e096:	4798      	blx	r3
}
   2e098:	e7f5      	b.n	2e086 <nrfx_power_clock_irq_handler+0x42>
   2e09a:	bf00      	nop
   2e09c:	40005100 	.word	0x40005100
   2e0a0:	40005000 	.word	0x40005000
   2e0a4:	20018648 	.word	0x20018648
   2e0a8:	40005104 	.word	0x40005104

0002e0ac <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   2e0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   2e0ae:	f04f 0320 	mov.w	r3, #32
   2e0b2:	f3ef 8711 	mrs	r7, BASEPRI
   2e0b6:	f383 8811 	msr	BASEPRI, r3
   2e0ba:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   2e0be:	4a0d      	ldr	r2, [pc, #52]	; (2e0f4 <nrfx_dppi_channel_alloc+0x48>)
   2e0c0:	6816      	ldr	r6, [r2, #0]
   2e0c2:	43f1      	mvns	r1, r6
   2e0c4:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   2e0c6:	b191      	cbz	r1, 2e0ee <nrfx_dppi_channel_alloc+0x42>
   2e0c8:	2500      	movs	r5, #0
   2e0ca:	b2ec      	uxtb	r4, r5
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
   2e0cc:	fa21 f304 	lsr.w	r3, r1, r4
   2e0d0:	07db      	lsls	r3, r3, #31
   2e0d2:	f105 0501 	add.w	r5, r5, #1
   2e0d6:	d5f8      	bpl.n	2e0ca <nrfx_dppi_channel_alloc+0x1e>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
   2e0d8:	2301      	movs	r3, #1
   2e0da:	40a3      	lsls	r3, r4
   2e0dc:	4333      	orrs	r3, r6
        *p_channel = channel;
   2e0de:	7004      	strb	r4, [r0, #0]

        err_code = NRFX_SUCCESS;
   2e0e0:	4805      	ldr	r0, [pc, #20]	; (2e0f8 <nrfx_dppi_channel_alloc+0x4c>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
   2e0e2:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   2e0e4:	f387 8811 	msr	BASEPRI, r7
   2e0e8:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
   2e0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
   2e0ee:	4803      	ldr	r0, [pc, #12]	; (2e0fc <nrfx_dppi_channel_alloc+0x50>)
   2e0f0:	e7f8      	b.n	2e0e4 <nrfx_dppi_channel_alloc+0x38>
   2e0f2:	bf00      	nop
   2e0f4:	20018650 	.word	0x20018650
   2e0f8:	0bad0000 	.word	0x0bad0000
   2e0fc:	0bad0002 	.word	0x0bad0002

0002e100 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   2e100:	2301      	movs	r3, #1
   2e102:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   2e106:	f010 0fff 	tst.w	r0, #255	; 0xff
   2e10a:	d012      	beq.n	2e132 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   2e10c:	f04f 0320 	mov.w	r3, #32
   2e110:	f3ef 8111 	mrs	r1, BASEPRI
   2e114:	f383 8811 	msr	BASEPRI, r3
   2e118:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   2e11c:	4a06      	ldr	r2, [pc, #24]	; (2e138 <nrfx_gpiote_channel_free+0x38>)
   2e11e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   2e120:	ea23 0000 	bic.w	r0, r3, r0
   2e124:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   2e126:	f381 8811 	msr	BASEPRI, r1
   2e12a:	f3bf 8f6f 	isb	sy
   2e12e:	4803      	ldr	r0, [pc, #12]	; (2e13c <nrfx_gpiote_channel_free+0x3c>)
   2e130:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   2e132:	4803      	ldr	r0, [pc, #12]	; (2e140 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2e134:	4770      	bx	lr
   2e136:	bf00      	nop
   2e138:	20018654 	.word	0x20018654
   2e13c:	0bad0000 	.word	0x0bad0000
   2e140:	0bad0004 	.word	0x0bad0004

0002e144 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   2e144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   2e148:	22ff      	movs	r2, #255	; 0xff
{
   2e14a:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   2e14c:	2601      	movs	r6, #1
{
   2e14e:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   2e150:	f8df e058 	ldr.w	lr, [pc, #88]	; 2e1ac <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   2e154:	4814      	ldr	r0, [pc, #80]	; (2e1a8 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   2e156:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2e1b0 <nrfx_gpiote_channel_alloc+0x6c>
   2e15a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   2e15c:	f04f 0120 	mov.w	r1, #32
   2e160:	f3ef 8c11 	mrs	ip, BASEPRI
   2e164:	f381 8811 	msr	BASEPRI, r1
   2e168:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   2e16c:	fa22 f103 	lsr.w	r1, r2, r3
   2e170:	07c9      	lsls	r1, r1, #31
   2e172:	d50a      	bpl.n	2e18a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   2e174:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   2e178:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   2e17c:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   2e17e:	bf01      	itttt	eq
   2e180:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   2e182:	4339      	orreq	r1, r7
   2e184:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
   2e188:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   2e18a:	f38c 8811 	msr	BASEPRI, ip
   2e18e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   2e192:	4540      	cmp	r0, r8
   2e194:	d005      	beq.n	2e1a2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   2e196:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   2e19a:	439a      	bics	r2, r3
   2e19c:	f104 0401 	add.w	r4, r4, #1
   2e1a0:	d1db      	bne.n	2e15a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2e1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e1a6:	bf00      	nop
   2e1a8:	0bad0002 	.word	0x0bad0002
   2e1ac:	20018654 	.word	0x20018654
   2e1b0:	0bad0000 	.word	0x0bad0000

0002e1b4 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   2e1b4:	b570      	push	{r4, r5, r6, lr}
   2e1b6:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   2e1b8:	460d      	mov	r5, r1
   2e1ba:	b949      	cbnz	r1, 2e1d0 <nrfx_ipc_init+0x1c>
   2e1bc:	490b      	ldr	r1, [pc, #44]	; (2e1ec <nrfx_ipc_init+0x38>)
   2e1be:	480c      	ldr	r0, [pc, #48]	; (2e1f0 <nrfx_ipc_init+0x3c>)
   2e1c0:	2334      	movs	r3, #52	; 0x34
   2e1c2:	4a0c      	ldr	r2, [pc, #48]	; (2e1f4 <nrfx_ipc_init+0x40>)
   2e1c4:	f00a ffb5 	bl	39132 <printk>
   2e1c8:	2134      	movs	r1, #52	; 0x34
   2e1ca:	480a      	ldr	r0, [pc, #40]	; (2e1f4 <nrfx_ipc_init+0x40>)
   2e1cc:	f00b fa50 	bl	39670 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2e1d0:	4c09      	ldr	r4, [pc, #36]	; (2e1f8 <nrfx_ipc_init+0x44>)
   2e1d2:	7923      	ldrb	r3, [r4, #4]
   2e1d4:	b943      	cbnz	r3, 2e1e8 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   2e1d6:	202a      	movs	r0, #42	; 0x2a
   2e1d8:	f7f4 fff8 	bl	231cc <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2e1dc:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   2e1de:	4807      	ldr	r0, [pc, #28]	; (2e1fc <nrfx_ipc_init+0x48>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2e1e0:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   2e1e2:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   2e1e4:	60a6      	str	r6, [r4, #8]
}
   2e1e6:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   2e1e8:	4805      	ldr	r0, [pc, #20]	; (2e200 <nrfx_ipc_init+0x4c>)
   2e1ea:	e7fc      	b.n	2e1e6 <nrfx_ipc_init+0x32>
   2e1ec:	0004550d 	.word	0x0004550d
   2e1f0:	0004033e 	.word	0x0004033e
   2e1f4:	0004502d 	.word	0x0004502d
   2e1f8:	200186a4 	.word	0x200186a4
   2e1fc:	0bad0000 	.word	0x0bad0000
   2e200:	0bad000c 	.word	0x0bad000c

0002e204 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   2e204:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   2e206:	4604      	mov	r4, r0
   2e208:	b948      	cbnz	r0, 2e21e <nrfx_ipc_config_load+0x1a>
   2e20a:	491a      	ldr	r1, [pc, #104]	; (2e274 <nrfx_ipc_config_load+0x70>)
   2e20c:	481a      	ldr	r0, [pc, #104]	; (2e278 <nrfx_ipc_config_load+0x74>)
   2e20e:	2346      	movs	r3, #70	; 0x46
   2e210:	4a1a      	ldr	r2, [pc, #104]	; (2e27c <nrfx_ipc_config_load+0x78>)
   2e212:	f00a ff8e 	bl	39132 <printk>
   2e216:	2146      	movs	r1, #70	; 0x46
   2e218:	4818      	ldr	r0, [pc, #96]	; (2e27c <nrfx_ipc_config_load+0x78>)
   2e21a:	f00b fa29 	bl	39670 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2e21e:	4b18      	ldr	r3, [pc, #96]	; (2e280 <nrfx_ipc_config_load+0x7c>)
   2e220:	791b      	ldrb	r3, [r3, #4]
   2e222:	2b01      	cmp	r3, #1
   2e224:	d009      	beq.n	2e23a <nrfx_ipc_config_load+0x36>
   2e226:	4917      	ldr	r1, [pc, #92]	; (2e284 <nrfx_ipc_config_load+0x80>)
   2e228:	4813      	ldr	r0, [pc, #76]	; (2e278 <nrfx_ipc_config_load+0x74>)
   2e22a:	2347      	movs	r3, #71	; 0x47
   2e22c:	4a13      	ldr	r2, [pc, #76]	; (2e27c <nrfx_ipc_config_load+0x78>)
   2e22e:	f00a ff80 	bl	39132 <printk>
   2e232:	2147      	movs	r1, #71	; 0x47
   2e234:	4811      	ldr	r0, [pc, #68]	; (2e27c <nrfx_ipc_config_load+0x78>)
   2e236:	f00b fa1b 	bl	39670 <assert_post_action>
{
   2e23a:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   2e23c:	4a12      	ldr	r2, [pc, #72]	; (2e288 <nrfx_ipc_config_load+0x84>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   2e23e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   2e242:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2e246:	3301      	adds	r3, #1
   2e248:	2b08      	cmp	r3, #8
   2e24a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   2e24e:	d1f6      	bne.n	2e23e <nrfx_ipc_config_load+0x3a>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   2e250:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2e252:	4a0d      	ldr	r2, [pc, #52]	; (2e288 <nrfx_ipc_config_load+0x84>)
   2e254:	f104 0120 	add.w	r1, r4, #32
   2e258:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   2e25c:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2e260:	3301      	adds	r3, #1
   2e262:	2b08      	cmp	r3, #8
   2e264:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   2e268:	d1f6      	bne.n	2e258 <nrfx_ipc_config_load+0x54>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   2e26a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   2e26c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2e270:	bd38      	pop	{r3, r4, r5, pc}
   2e272:	bf00      	nop
   2e274:	00045068 	.word	0x00045068
   2e278:	0004033e 	.word	0x0004033e
   2e27c:	0004502d 	.word	0x0004502d
   2e280:	200186a4 	.word	0x200186a4
   2e284:	00045071 	.word	0x00045071
   2e288:	4002a000 	.word	0x4002a000

0002e28c <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   2e28c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2e28e:	4c1b      	ldr	r4, [pc, #108]	; (2e2fc <nrfx_ipc_uninit+0x70>)
   2e290:	7922      	ldrb	r2, [r4, #4]
   2e292:	2a01      	cmp	r2, #1
   2e294:	d009      	beq.n	2e2aa <nrfx_ipc_uninit+0x1e>
   2e296:	491a      	ldr	r1, [pc, #104]	; (2e300 <nrfx_ipc_uninit+0x74>)
   2e298:	481a      	ldr	r0, [pc, #104]	; (2e304 <nrfx_ipc_uninit+0x78>)
   2e29a:	2359      	movs	r3, #89	; 0x59
   2e29c:	4a1a      	ldr	r2, [pc, #104]	; (2e308 <nrfx_ipc_uninit+0x7c>)
   2e29e:	f00a ff48 	bl	39132 <printk>
   2e2a2:	2159      	movs	r1, #89	; 0x59
   2e2a4:	4818      	ldr	r0, [pc, #96]	; (2e308 <nrfx_ipc_uninit+0x7c>)
   2e2a6:	f00b f9e3 	bl	39670 <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   2e2aa:	2300      	movs	r3, #0
   2e2ac:	4a17      	ldr	r2, [pc, #92]	; (2e30c <nrfx_ipc_uninit+0x80>)
   2e2ae:	4918      	ldr	r1, [pc, #96]	; (2e310 <nrfx_ipc_uninit+0x84>)
   2e2b0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2e2b4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   2e2b8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   2e2bc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   2e2c0:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   2e2c4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   2e2c8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   2e2cc:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2e2d0:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   2e2d4:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   2e2d8:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   2e2dc:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   2e2e0:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   2e2e4:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   2e2e8:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   2e2ec:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   2e2f0:	f04f 32ff 	mov.w	r2, #4294967295
   2e2f4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   2e2f8:	7123      	strb	r3, [r4, #4]
}
   2e2fa:	bd10      	pop	{r4, pc}
   2e2fc:	200186a4 	.word	0x200186a4
   2e300:	00045071 	.word	0x00045071
   2e304:	0004033e 	.word	0x0004033e
   2e308:	0004502d 	.word	0x0004502d
   2e30c:	4002a004 	.word	0x4002a004
   2e310:	4002a000 	.word	0x4002a000

0002e314 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   2e314:	4b16      	ldr	r3, [pc, #88]	; (2e370 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   2e316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e31a:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   2e31e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2e380 <nrfx_ipc_irq_handler+0x6c>
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   2e322:	4635      	mov	r5, r6
   2e324:	4f13      	ldr	r7, [pc, #76]	; (2e374 <nrfx_ipc_irq_handler+0x60>)
   2e326:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2e384 <nrfx_ipc_irq_handler+0x70>
    while (bitmask)
   2e32a:	b935      	cbnz	r5, 2e33a <nrfx_ipc_irq_handler+0x26>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   2e32c:	4b12      	ldr	r3, [pc, #72]	; (2e378 <nrfx_ipc_irq_handler+0x64>)
   2e32e:	4630      	mov	r0, r6
}
   2e330:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   2e334:	681a      	ldr	r2, [r3, #0]
   2e336:	6899      	ldr	r1, [r3, #8]
   2e338:	4710      	bx	r2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   2e33a:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   2e33e:	2301      	movs	r3, #1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
   2e340:	fab4 f484 	clz	r4, r4
   2e344:	40a3      	lsls	r3, r4
   2e346:	2c07      	cmp	r4, #7
   2e348:	ea25 0503 	bic.w	r5, r5, r3
   2e34c:	d90b      	bls.n	2e366 <nrfx_ipc_irq_handler+0x52>
   2e34e:	4639      	mov	r1, r7
   2e350:	4640      	mov	r0, r8
   2e352:	f240 13e7 	movw	r3, #487	; 0x1e7
   2e356:	464a      	mov	r2, r9
   2e358:	f00a feeb 	bl	39132 <printk>
   2e35c:	f240 11e7 	movw	r1, #487	; 0x1e7
   2e360:	4648      	mov	r0, r9
   2e362:	f00b f985 	bl	39670 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e366:	2200      	movs	r2, #0
   2e368:	4b04      	ldr	r3, [pc, #16]	; (2e37c <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   2e36a:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e36c:	511a      	str	r2, [r3, r4]
}
   2e36e:	e7dc      	b.n	2e32a <nrfx_ipc_irq_handler+0x16>
   2e370:	4002a000 	.word	0x4002a000
   2e374:	000450d0 	.word	0x000450d0
   2e378:	200186a4 	.word	0x200186a4
   2e37c:	4002a100 	.word	0x4002a100
   2e380:	0004509e 	.word	0x0004509e
   2e384:	0004033e 	.word	0x0004033e

0002e388 <nrfx_nvmc_page_erase>:
    return ((addr & 0x1u) == 0u);
}

__STATIC_INLINE bool is_valid_address(uint32_t addr, bool uicr_allowed)
{
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2e388:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   2e38c:	b510      	push	{r4, lr}
   2e38e:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2e390:	d30b      	bcc.n	2e3aa <nrfx_nvmc_page_erase+0x22>
    NRFX_ASSERT(is_valid_address(addr, false));
   2e392:	4910      	ldr	r1, [pc, #64]	; (2e3d4 <nrfx_nvmc_page_erase+0x4c>)
   2e394:	4810      	ldr	r0, [pc, #64]	; (2e3d8 <nrfx_nvmc_page_erase+0x50>)
   2e396:	f44f 7383 	mov.w	r3, #262	; 0x106
   2e39a:	4a10      	ldr	r2, [pc, #64]	; (2e3dc <nrfx_nvmc_page_erase+0x54>)
   2e39c:	f00a fec9 	bl	39132 <printk>
   2e3a0:	f44f 7183 	mov.w	r1, #262	; 0x106
   2e3a4:	480d      	ldr	r0, [pc, #52]	; (2e3dc <nrfx_nvmc_page_erase+0x54>)
   2e3a6:	f00b f963 	bl	39670 <assert_post_action>
    return !(addr % flash_page_size_get());
   2e3aa:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   2e3ae:	b97b      	cbnz	r3, 2e3d0 <nrfx_nvmc_page_erase+0x48>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   2e3b0:	2202      	movs	r2, #2
   2e3b2:	4b0b      	ldr	r3, [pc, #44]	; (2e3e0 <nrfx_nvmc_page_erase+0x58>)
   2e3b4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   2e3b8:	f04f 32ff 	mov.w	r2, #4294967295
   2e3bc:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2e3be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2e3c2:	07d2      	lsls	r2, r2, #31
   2e3c4:	d5fb      	bpl.n	2e3be <nrfx_nvmc_page_erase+0x36>
    p_reg->CONFIGNS = (uint32_t)mode;
   2e3c6:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   2e3c8:	4806      	ldr	r0, [pc, #24]	; (2e3e4 <nrfx_nvmc_page_erase+0x5c>)
   2e3ca:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   2e3ce:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   2e3d0:	4805      	ldr	r0, [pc, #20]	; (2e3e8 <nrfx_nvmc_page_erase+0x60>)
   2e3d2:	e7fc      	b.n	2e3ce <nrfx_nvmc_page_erase+0x46>
   2e3d4:	00045136 	.word	0x00045136
   2e3d8:	0004033e 	.word	0x0004033e
   2e3dc:	000450da 	.word	0x000450da
   2e3e0:	40039000 	.word	0x40039000
   2e3e4:	0bad0000 	.word	0x0bad0000
   2e3e8:	0bad000a 	.word	0x0bad000a

0002e3ec <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2e3ec:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   2e3f0:	b538      	push	{r3, r4, r5, lr}
   2e3f2:	4604      	mov	r4, r0
   2e3f4:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2e3f6:	d30b      	bcc.n	2e410 <nrfx_nvmc_word_write+0x24>
    NRFX_ASSERT(is_valid_address(addr, true));
   2e3f8:	4914      	ldr	r1, [pc, #80]	; (2e44c <nrfx_nvmc_word_write+0x60>)
   2e3fa:	4815      	ldr	r0, [pc, #84]	; (2e450 <nrfx_nvmc_word_write+0x64>)
   2e3fc:	f44f 73ca 	mov.w	r3, #404	; 0x194
   2e400:	4a14      	ldr	r2, [pc, #80]	; (2e454 <nrfx_nvmc_word_write+0x68>)
   2e402:	f00a fe96 	bl	39132 <printk>
   2e406:	f44f 71ca 	mov.w	r1, #404	; 0x194
   2e40a:	4812      	ldr	r0, [pc, #72]	; (2e454 <nrfx_nvmc_word_write+0x68>)
   2e40c:	f00b f930 	bl	39670 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   2e410:	07a1      	lsls	r1, r4, #30
   2e412:	d00b      	beq.n	2e42c <nrfx_nvmc_word_write+0x40>
   2e414:	4910      	ldr	r1, [pc, #64]	; (2e458 <nrfx_nvmc_word_write+0x6c>)
   2e416:	480e      	ldr	r0, [pc, #56]	; (2e450 <nrfx_nvmc_word_write+0x64>)
   2e418:	f240 1395 	movw	r3, #405	; 0x195
   2e41c:	4a0d      	ldr	r2, [pc, #52]	; (2e454 <nrfx_nvmc_word_write+0x68>)
   2e41e:	f00a fe88 	bl	39132 <printk>
   2e422:	f240 1195 	movw	r1, #405	; 0x195
   2e426:	480b      	ldr	r0, [pc, #44]	; (2e454 <nrfx_nvmc_word_write+0x68>)
   2e428:	f00b f922 	bl	39670 <assert_post_action>
   2e42c:	2201      	movs	r2, #1
   2e42e:	4b0b      	ldr	r3, [pc, #44]	; (2e45c <nrfx_nvmc_word_write+0x70>)
   2e430:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   2e434:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   2e438:	07d2      	lsls	r2, r2, #31
   2e43a:	d5fb      	bpl.n	2e434 <nrfx_nvmc_word_write+0x48>
    *(volatile uint32_t *)addr = value;
   2e43c:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   2e43e:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIGNS = (uint32_t)mode;
   2e442:	2200      	movs	r2, #0
   2e444:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   2e448:	bd38      	pop	{r3, r4, r5, pc}
   2e44a:	bf00      	nop
   2e44c:	00045150 	.word	0x00045150
   2e450:	0004033e 	.word	0x0004033e
   2e454:	000450da 	.word	0x000450da
   2e458:	0004516a 	.word	0x0004516a
   2e45c:	40039000 	.word	0x40039000

0002e460 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
   2e460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e464:	4604      	mov	r4, r0
   2e466:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
   2e468:	4615      	mov	r5, r2
   2e46a:	b95a      	cbnz	r2, 2e484 <nrf_pwm_sequence_set+0x24>
   2e46c:	4932      	ldr	r1, [pc, #200]	; (2e538 <nrf_pwm_sequence_set+0xd8>)
   2e46e:	4833      	ldr	r0, [pc, #204]	; (2e53c <nrf_pwm_sequence_set+0xdc>)
   2e470:	f240 23a7 	movw	r3, #679	; 0x2a7
   2e474:	4a32      	ldr	r2, [pc, #200]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e476:	f00a fe5c 	bl	39132 <printk>
   2e47a:	f240 21a7 	movw	r1, #679	; 0x2a7
   2e47e:	4830      	ldr	r0, [pc, #192]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e480:	f00b f8f6 	bl	39670 <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
   2e484:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
   2e486:	b95f      	cbnz	r7, 2e4a0 <nrf_pwm_sequence_set+0x40>
   2e488:	492e      	ldr	r1, [pc, #184]	; (2e544 <nrf_pwm_sequence_set+0xe4>)
   2e48a:	482c      	ldr	r0, [pc, #176]	; (2e53c <nrf_pwm_sequence_set+0xdc>)
   2e48c:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   2e490:	4a2b      	ldr	r2, [pc, #172]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e492:	f00a fe4e 	bl	39132 <printk>
   2e496:	f44f 712d 	mov.w	r1, #692	; 0x2b4
   2e49a:	4829      	ldr	r0, [pc, #164]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e49c:	f00b f8e8 	bl	39670 <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   2e4a0:	eb04 1846 	add.w	r8, r4, r6, lsl #5
   2e4a4:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
   2e4a8:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
   2e4aa:	2f00      	cmp	r7, #0
   2e4ac:	d138      	bne.n	2e520 <nrf_pwm_sequence_set+0xc0>
   2e4ae:	4926      	ldr	r1, [pc, #152]	; (2e548 <nrf_pwm_sequence_set+0xe8>)
   2e4b0:	f240 23bd 	movw	r3, #701	; 0x2bd
   2e4b4:	4a22      	ldr	r2, [pc, #136]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e4b6:	4821      	ldr	r0, [pc, #132]	; (2e53c <nrf_pwm_sequence_set+0xdc>)
   2e4b8:	f00a fe3b 	bl	39132 <printk>
   2e4bc:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   2e4c0:	481f      	ldr	r0, [pc, #124]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e4c2:	f00b f8d5 	bl	39670 <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
   2e4c6:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   2e4ca:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
   2e4cc:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
   2e4d0:	d30b      	bcc.n	2e4ea <nrf_pwm_sequence_set+0x8a>
   2e4d2:	491e      	ldr	r1, [pc, #120]	; (2e54c <nrf_pwm_sequence_set+0xec>)
   2e4d4:	4819      	ldr	r0, [pc, #100]	; (2e53c <nrf_pwm_sequence_set+0xdc>)
   2e4d6:	f240 23c7 	movw	r3, #711	; 0x2c7
   2e4da:	4a19      	ldr	r2, [pc, #100]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e4dc:	f00a fe29 	bl	39132 <printk>
   2e4e0:	f240 21c7 	movw	r1, #711	; 0x2c7
   2e4e4:	4816      	ldr	r0, [pc, #88]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e4e6:	f00b f8c3 	bl	39670 <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   2e4ea:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   2e4ec:	ea4f 1846 	mov.w	r8, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   2e4f0:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   2e4f4:	eb04 1646 	add.w	r6, r4, r6, lsl #5
   2e4f8:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
   2e4fc:	d30b      	bcc.n	2e516 <nrf_pwm_sequence_set+0xb6>
   2e4fe:	4914      	ldr	r1, [pc, #80]	; (2e550 <nrf_pwm_sequence_set+0xf0>)
   2e500:	480e      	ldr	r0, [pc, #56]	; (2e53c <nrf_pwm_sequence_set+0xdc>)
   2e502:	f44f 7334 	mov.w	r3, #720	; 0x2d0
   2e506:	4a0e      	ldr	r2, [pc, #56]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e508:	f00a fe13 	bl	39132 <printk>
   2e50c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
   2e510:	480b      	ldr	r0, [pc, #44]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e512:	f00b f8ad 	bl	39670 <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   2e516:	4444      	add	r4, r8
   2e518:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
   2e51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
   2e520:	043b      	lsls	r3, r7, #16
   2e522:	d5d0      	bpl.n	2e4c6 <nrf_pwm_sequence_set+0x66>
   2e524:	490b      	ldr	r1, [pc, #44]	; (2e554 <nrf_pwm_sequence_set+0xf4>)
   2e526:	f240 23be 	movw	r3, #702	; 0x2be
   2e52a:	4a05      	ldr	r2, [pc, #20]	; (2e540 <nrf_pwm_sequence_set+0xe0>)
   2e52c:	4803      	ldr	r0, [pc, #12]	; (2e53c <nrf_pwm_sequence_set+0xdc>)
   2e52e:	f00a fe00 	bl	39132 <printk>
   2e532:	f240 21be 	movw	r1, #702	; 0x2be
   2e536:	e7c3      	b.n	2e4c0 <nrf_pwm_sequence_set+0x60>
   2e538:	000451c5 	.word	0x000451c5
   2e53c:	0004033e 	.word	0x0004033e
   2e540:	00045193 	.word	0x00045193
   2e544:	000451da 	.word	0x000451da
   2e548:	000451f2 	.word	0x000451f2
   2e54c:	0004521c 	.word	0x0004521c
   2e550:	0004523d 	.word	0x0004523d
   2e554:	000451fe 	.word	0x000451fe

0002e558 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e558:	6803      	ldr	r3, [r0, #0]
{
   2e55a:	b510      	push	{r4, lr}
    switch (port)
   2e55c:	095a      	lsrs	r2, r3, #5
   2e55e:	bf0c      	ite	eq
   2e560:	f04f 32ff 	moveq.w	r2, #4294967295
   2e564:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   2e566:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2e56a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e56e:	07db      	lsls	r3, r3, #31
{
   2e570:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e572:	d40b      	bmi.n	2e58c <nrf_gpio_pin_port_decode+0x34>
   2e574:	490f      	ldr	r1, [pc, #60]	; (2e5b4 <nrf_gpio_pin_port_decode+0x5c>)
   2e576:	4810      	ldr	r0, [pc, #64]	; (2e5b8 <nrf_gpio_pin_port_decode+0x60>)
   2e578:	f44f 7305 	mov.w	r3, #532	; 0x214
   2e57c:	4a0f      	ldr	r2, [pc, #60]	; (2e5bc <nrf_gpio_pin_port_decode+0x64>)
   2e57e:	f00a fdd8 	bl	39132 <printk>
   2e582:	f44f 7105 	mov.w	r1, #532	; 0x214
   2e586:	480d      	ldr	r0, [pc, #52]	; (2e5bc <nrf_gpio_pin_port_decode+0x64>)
   2e588:	f00b f872 	bl	39670 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2e58c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2e58e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2e592:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2e594:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2e596:	d00b      	beq.n	2e5b0 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   2e598:	4909      	ldr	r1, [pc, #36]	; (2e5c0 <nrf_gpio_pin_port_decode+0x68>)
   2e59a:	4807      	ldr	r0, [pc, #28]	; (2e5b8 <nrf_gpio_pin_port_decode+0x60>)
   2e59c:	f240 2319 	movw	r3, #537	; 0x219
   2e5a0:	4a06      	ldr	r2, [pc, #24]	; (2e5bc <nrf_gpio_pin_port_decode+0x64>)
   2e5a2:	f00a fdc6 	bl	39132 <printk>
   2e5a6:	f240 2119 	movw	r1, #537	; 0x219
   2e5aa:	4804      	ldr	r0, [pc, #16]	; (2e5bc <nrf_gpio_pin_port_decode+0x64>)
   2e5ac:	f00b f860 	bl	39670 <assert_post_action>
}
   2e5b0:	4804      	ldr	r0, [pc, #16]	; (2e5c4 <nrf_gpio_pin_port_decode+0x6c>)
   2e5b2:	bd10      	pop	{r4, pc}
   2e5b4:	000419c8 	.word	0x000419c8
   2e5b8:	0004033e 	.word	0x0004033e
   2e5bc:	00041995 	.word	0x00041995
   2e5c0:	000451fc 	.word	0x000451fc
   2e5c4:	40842500 	.word	0x40842500

0002e5c8 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   2e5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e5cc:	4607      	mov	r7, r0
   2e5ce:	4691      	mov	r9, r2
   2e5d0:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   2e5d2:	460c      	mov	r4, r1
{
   2e5d4:	b087      	sub	sp, #28
    NRFX_ASSERT(p_config);
   2e5d6:	b949      	cbnz	r1, 2e5ec <nrfx_pwm_init+0x24>
   2e5d8:	4952      	ldr	r1, [pc, #328]	; (2e724 <nrfx_pwm_init+0x15c>)
   2e5da:	4853      	ldr	r0, [pc, #332]	; (2e728 <nrfx_pwm_init+0x160>)
   2e5dc:	2389      	movs	r3, #137	; 0x89
   2e5de:	4a53      	ldr	r2, [pc, #332]	; (2e72c <nrfx_pwm_init+0x164>)
   2e5e0:	f00a fda7 	bl	39132 <printk>
   2e5e4:	2189      	movs	r1, #137	; 0x89
   2e5e6:	4851      	ldr	r0, [pc, #324]	; (2e72c <nrfx_pwm_init+0x164>)
   2e5e8:	f00b f842 	bl	39670 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2e5ec:	210c      	movs	r1, #12
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2e5ee:	793e      	ldrb	r6, [r7, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2e5f0:	4d4f      	ldr	r5, [pc, #316]	; (2e730 <nrfx_pwm_init+0x168>)
   2e5f2:	4371      	muls	r1, r6
   2e5f4:	186b      	adds	r3, r5, r1
   2e5f6:	7a1a      	ldrb	r2, [r3, #8]
   2e5f8:	2a00      	cmp	r2, #0
   2e5fa:	f040 8090 	bne.w	2e71e <nrfx_pwm_init+0x156>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
   2e5fe:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
   2e602:	f8c3 8004 	str.w	r8, [r3, #4]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   2e606:	f104 39ff 	add.w	r9, r4, #4294967295
   2e60a:	f10d 0808 	add.w	r8, sp, #8
   2e60e:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
   2e612:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   2e616:	2aff      	cmp	r2, #255	; 0xff
   2e618:	d07c      	beq.n	2e714 <nrfx_pwm_init+0x14c>
            if (!p_config->skip_gpio_cfg)
   2e61a:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   2e61c:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
   2e620:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
   2e624:	b9a1      	cbnz	r1, 2e650 <nrfx_pwm_init+0x88>
                if (inverted)
   2e626:	0613      	lsls	r3, r2, #24
   2e628:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e62c:	a801      	add	r0, sp, #4
   2e62e:	d56a      	bpl.n	2e706 <nrfx_pwm_init+0x13e>
   2e630:	f7ff ff92 	bl	2e558 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e634:	2201      	movs	r2, #1
   2e636:	9901      	ldr	r1, [sp, #4]
   2e638:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   2e63a:	6082      	str	r2, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e63c:	a801      	add	r0, sp, #4
   2e63e:	f8cd b004 	str.w	fp, [sp, #4]
   2e642:	f7ff ff89 	bl	2e558 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2e646:	2203      	movs	r2, #3
   2e648:	9b01      	ldr	r3, [sp, #4]
   2e64a:	3380      	adds	r3, #128	; 0x80
   2e64c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   2e650:	45d1      	cmp	r9, sl
   2e652:	f108 0804 	add.w	r8, r8, #4
   2e656:	d1dc      	bne.n	2e612 <nrfx_pwm_init+0x4a>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   2e658:	f8d7 8000 	ldr.w	r8, [r7]
        p_reg->PSEL.OUT[i] = out_pins[i];
   2e65c:	9b02      	ldr	r3, [sp, #8]

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
   2e65e:	f8b4 9008 	ldrh.w	r9, [r4, #8]
   2e662:	f8c8 3560 	str.w	r3, [r8, #1376]	; 0x560
   2e666:	9b03      	ldr	r3, [sp, #12]
   2e668:	f8c8 3564 	str.w	r3, [r8, #1380]	; 0x564
   2e66c:	9b04      	ldr	r3, [sp, #16]
   2e66e:	f8c8 3568 	str.w	r3, [r8, #1384]	; 0x568
   2e672:	9b05      	ldr	r3, [sp, #20]
   2e674:	f8c8 356c 	str.w	r3, [r8, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   2e678:	2301      	movs	r3, #1
   2e67a:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
   2e67e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   2e682:	f894 b005 	ldrb.w	fp, [r4, #5]
   2e686:	2b00      	cmp	r3, #0
   2e688:	f894 a006 	ldrb.w	sl, [r4, #6]
   2e68c:	da0b      	bge.n	2e6a6 <nrfx_pwm_init+0xde>
   2e68e:	4929      	ldr	r1, [pc, #164]	; (2e734 <nrfx_pwm_init+0x16c>)
   2e690:	4825      	ldr	r0, [pc, #148]	; (2e728 <nrfx_pwm_init+0x160>)
   2e692:	f44f 7327 	mov.w	r3, #668	; 0x29c
   2e696:	4a28      	ldr	r2, [pc, #160]	; (2e738 <nrfx_pwm_init+0x170>)
   2e698:	f00a fd4b 	bl	39132 <printk>
   2e69c:	f44f 7127 	mov.w	r1, #668	; 0x29c
   2e6a0:	4825      	ldr	r0, [pc, #148]	; (2e738 <nrfx_pwm_init+0x170>)
   2e6a2:	f00a ffe5 	bl	39670 <assert_post_action>
    p_reg->PRESCALER  = base_clock;
   2e6a6:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
    p_reg->MODE       = mode;
   2e6aa:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   2e6ae:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
   2e6b2:	6838      	ldr	r0, [r7, #0]

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   2e6b4:	8963      	ldrh	r3, [r4, #10]
   2e6b6:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
   2e6ba:	2300      	movs	r3, #0
   2e6bc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
   2e6c0:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e6c4:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   2e6c8:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   2e6cc:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   2e6d0:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
   2e6d4:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   2e6d8:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   2e6dc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   2e6e0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   2e6e4:	230c      	movs	r3, #12
   2e6e6:	4373      	muls	r3, r6
   2e6e8:	58eb      	ldr	r3, [r5, r3]
   2e6ea:	b11b      	cbz	r3, 2e6f4 <nrfx_pwm_init+0x12c>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   2e6ec:	f340 3007 	sbfx	r0, r0, #12, #8
   2e6f0:	f7f4 fd6c 	bl	231cc <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2e6f4:	230c      	movs	r3, #12
   2e6f6:	fb03 5506 	mla	r5, r3, r6, r5
   2e6fa:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2e6fc:	480f      	ldr	r0, [pc, #60]	; (2e73c <nrfx_pwm_init+0x174>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2e6fe:	722b      	strb	r3, [r5, #8]
}
   2e700:	b007      	add	sp, #28
   2e702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e706:	f7ff ff27 	bl	2e558 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2e70a:	2201      	movs	r2, #1
   2e70c:	9901      	ldr	r1, [sp, #4]
   2e70e:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   2e710:	60c2      	str	r2, [r0, #12]
   2e712:	e793      	b.n	2e63c <nrfx_pwm_init+0x74>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   2e714:	f04f 33ff 	mov.w	r3, #4294967295
   2e718:	f8c8 3000 	str.w	r3, [r8]
   2e71c:	e798      	b.n	2e650 <nrfx_pwm_init+0x88>
        return err_code;
   2e71e:	4808      	ldr	r0, [pc, #32]	; (2e740 <nrfx_pwm_init+0x178>)
   2e720:	e7ee      	b.n	2e700 <nrfx_pwm_init+0x138>
   2e722:	bf00      	nop
   2e724:	00045068 	.word	0x00045068
   2e728:	0004033e 	.word	0x0004033e
   2e72c:	00045260 	.word	0x00045260
   2e730:	200186b0 	.word	0x200186b0
   2e734:	0004529b 	.word	0x0004529b
   2e738:	00045193 	.word	0x00045193
   2e73c:	0bad0000 	.word	0x0bad0000
   2e740:	0bad0005 	.word	0x0bad0005

0002e744 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   2e744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e748:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2e74a:	7903      	ldrb	r3, [r0, #4]
{
   2e74c:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2e74e:	4a31      	ldr	r2, [pc, #196]	; (2e814 <nrfx_pwm_simple_playback+0xd0>)
{
   2e750:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2e752:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   2e756:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2e75a:	210c      	movs	r1, #12
   2e75c:	fb01 2303 	mla	r3, r1, r3, r2
   2e760:	7a1b      	ldrb	r3, [r3, #8]
{
   2e762:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2e764:	b95b      	cbnz	r3, 2e77e <nrfx_pwm_simple_playback+0x3a>
   2e766:	492c      	ldr	r1, [pc, #176]	; (2e818 <nrfx_pwm_simple_playback+0xd4>)
   2e768:	482c      	ldr	r0, [pc, #176]	; (2e81c <nrfx_pwm_simple_playback+0xd8>)
   2e76a:	f240 1325 	movw	r3, #293	; 0x125
   2e76e:	4a2c      	ldr	r2, [pc, #176]	; (2e820 <nrfx_pwm_simple_playback+0xdc>)
   2e770:	f00a fcdf 	bl	39132 <printk>
   2e774:	f240 1125 	movw	r1, #293	; 0x125
   2e778:	4829      	ldr	r0, [pc, #164]	; (2e820 <nrfx_pwm_simple_playback+0xdc>)
   2e77a:	f00a ff79 	bl	39670 <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
   2e77e:	b95c      	cbnz	r4, 2e798 <nrfx_pwm_simple_playback+0x54>
   2e780:	4928      	ldr	r1, [pc, #160]	; (2e824 <nrfx_pwm_simple_playback+0xe0>)
   2e782:	4826      	ldr	r0, [pc, #152]	; (2e81c <nrfx_pwm_simple_playback+0xd8>)
   2e784:	f44f 7393 	mov.w	r3, #294	; 0x126
   2e788:	4a25      	ldr	r2, [pc, #148]	; (2e820 <nrfx_pwm_simple_playback+0xdc>)
   2e78a:	f00a fcd2 	bl	39132 <printk>
   2e78e:	f44f 7193 	mov.w	r1, #294	; 0x126
   2e792:	4823      	ldr	r0, [pc, #140]	; (2e820 <nrfx_pwm_simple_playback+0xdc>)
   2e794:	f00a ff6c 	bl	39670 <assert_post_action>
   2e798:	6833      	ldr	r3, [r6, #0]
   2e79a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
   2e79e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2e7a2:	d00b      	beq.n	2e7bc <nrfx_pwm_simple_playback+0x78>
   2e7a4:	4920      	ldr	r1, [pc, #128]	; (2e828 <nrfx_pwm_simple_playback+0xe4>)
   2e7a6:	481d      	ldr	r0, [pc, #116]	; (2e81c <nrfx_pwm_simple_playback+0xd8>)
   2e7a8:	f240 1327 	movw	r3, #295	; 0x127
   2e7ac:	4a1c      	ldr	r2, [pc, #112]	; (2e820 <nrfx_pwm_simple_playback+0xdc>)
   2e7ae:	f00a fcc0 	bl	39132 <printk>
   2e7b2:	f240 1127 	movw	r1, #295	; 0x127
   2e7b6:	481a      	ldr	r0, [pc, #104]	; (2e820 <nrfx_pwm_simple_playback+0xdc>)
   2e7b8:	f00a ff5a 	bl	39670 <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   2e7bc:	4632      	mov	r2, r6
   2e7be:	2100      	movs	r1, #0
   2e7c0:	6828      	ldr	r0, [r5, #0]
   2e7c2:	f7ff fe4d 	bl	2e460 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
   2e7c6:	6828      	ldr	r0, [r5, #0]
   2e7c8:	4632      	mov	r2, r6
   2e7ca:	2101      	movs	r1, #1
   2e7cc:	f7ff fe48 	bl	2e460 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
   2e7d0:	6828      	ldr	r0, [r5, #0]
   2e7d2:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   2e7d6:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   2e7da:	f018 0f01 	tst.w	r8, #1
   2e7de:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
   2e7e2:	d114      	bne.n	2e80e <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   2e7e4:	f018 0202 	ands.w	r2, r8, #2
   2e7e8:	d003      	beq.n	2e7f2 <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   2e7ea:	2b00      	cmp	r3, #0
   2e7ec:	bf14      	ite	ne
   2e7ee:	2208      	movne	r2, #8
   2e7f0:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   2e7f2:	2b00      	cmp	r3, #0
   2e7f4:	4639      	mov	r1, r7
    p_reg->SHORTS = mask;
   2e7f6:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   2e7fa:	bf18      	it	ne
   2e7fc:	230c      	movne	r3, #12
   2e7fe:	fa5f f288 	uxtb.w	r2, r8
   2e802:	bf08      	it	eq
   2e804:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   2e806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
   2e80a:	f00d bf4f 	b.w	3c6ac <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   2e80e:	2210      	movs	r2, #16
   2e810:	e7ef      	b.n	2e7f2 <nrfx_pwm_simple_playback+0xae>
   2e812:	bf00      	nop
   2e814:	200186b0 	.word	0x200186b0
   2e818:	000452bc 	.word	0x000452bc
   2e81c:	0004033e 	.word	0x0004033e
   2e820:	00045260 	.word	0x00045260
   2e824:	000452e8 	.word	0x000452e8
   2e828:	000452fb 	.word	0x000452fb

0002e82c <nrfx_pwm_is_stopped>:


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2e82c:	220c      	movs	r2, #12
{
   2e82e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2e830:	4e11      	ldr	r6, [pc, #68]	; (2e878 <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2e832:	7904      	ldrb	r4, [r0, #4]
{
   2e834:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2e836:	fb02 6204 	mla	r2, r2, r4, r6
   2e83a:	7a12      	ldrb	r2, [r2, #8]
   2e83c:	b95a      	cbnz	r2, 2e856 <nrfx_pwm_is_stopped+0x2a>
   2e83e:	490f      	ldr	r1, [pc, #60]	; (2e87c <nrfx_pwm_is_stopped+0x50>)
   2e840:	480f      	ldr	r0, [pc, #60]	; (2e880 <nrfx_pwm_is_stopped+0x54>)
   2e842:	f240 13a3 	movw	r3, #419	; 0x1a3
   2e846:	4a0f      	ldr	r2, [pc, #60]	; (2e884 <nrfx_pwm_is_stopped+0x58>)
   2e848:	f00a fc73 	bl	39132 <printk>
   2e84c:	f240 11a3 	movw	r1, #419	; 0x1a3
   2e850:	480c      	ldr	r0, [pc, #48]	; (2e884 <nrfx_pwm_is_stopped+0x58>)
   2e852:	f00a ff0d 	bl	39670 <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   2e856:	230c      	movs	r3, #12
   2e858:	fb03 6404 	mla	r4, r3, r4, r6
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   2e85c:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   2e85e:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e860:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
   2e864:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   2e866:	b91a      	cbnz	r2, 2e870 <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   2e868:	1e98      	subs	r0, r3, #2
   2e86a:	bf18      	it	ne
   2e86c:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   2e86e:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2e870:	2001      	movs	r0, #1
   2e872:	7220      	strb	r0, [r4, #8]
        ret_val = true;
   2e874:	e7fb      	b.n	2e86e <nrfx_pwm_is_stopped+0x42>
   2e876:	bf00      	nop
   2e878:	200186b0 	.word	0x200186b0
   2e87c:	000452bc 	.word	0x000452bc
   2e880:	0004033e 	.word	0x0004033e
   2e884:	00045260 	.word	0x00045260

0002e888 <nrfx_pwm_stop>:
{
   2e888:	b538      	push	{r3, r4, r5, lr}
   2e88a:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   2e88c:	210c      	movs	r1, #12
   2e88e:	7903      	ldrb	r3, [r0, #4]
   2e890:	4a12      	ldr	r2, [pc, #72]	; (2e8dc <nrfx_pwm_stop+0x54>)
{
   2e892:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
   2e894:	fb01 2303 	mla	r3, r1, r3, r2
   2e898:	7a1b      	ldrb	r3, [r3, #8]
   2e89a:	b95b      	cbnz	r3, 2e8b4 <nrfx_pwm_stop+0x2c>
   2e89c:	4910      	ldr	r1, [pc, #64]	; (2e8e0 <nrfx_pwm_stop+0x58>)
   2e89e:	4811      	ldr	r0, [pc, #68]	; (2e8e4 <nrfx_pwm_stop+0x5c>)
   2e8a0:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   2e8a4:	4a10      	ldr	r2, [pc, #64]	; (2e8e8 <nrfx_pwm_stop+0x60>)
   2e8a6:	f00a fc44 	bl	39132 <printk>
   2e8aa:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   2e8ae:	480e      	ldr	r0, [pc, #56]	; (2e8e8 <nrfx_pwm_stop+0x60>)
   2e8b0:	f00a fede 	bl	39670 <assert_post_action>
    p_reg->SHORTS = mask;
   2e8b4:	2200      	movs	r2, #0
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   2e8b6:	6823      	ldr	r3, [r4, #0]
    if (nrfx_pwm_is_stopped(p_instance))
   2e8b8:	4620      	mov	r0, r4
   2e8ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e8be:	2201      	movs	r2, #1
   2e8c0:	605a      	str	r2, [r3, #4]
   2e8c2:	f7ff ffb3 	bl	2e82c <nrfx_pwm_is_stopped>
   2e8c6:	b938      	cbnz	r0, 2e8d8 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
   2e8c8:	4620      	mov	r0, r4
   2e8ca:	f7ff ffaf 	bl	2e82c <nrfx_pwm_is_stopped>
   2e8ce:	b918      	cbnz	r0, 2e8d8 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
   2e8d0:	2d00      	cmp	r5, #0
   2e8d2:	d1f9      	bne.n	2e8c8 <nrfx_pwm_stop+0x40>
}
   2e8d4:	4628      	mov	r0, r5
   2e8d6:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   2e8d8:	2501      	movs	r5, #1
   2e8da:	e7fb      	b.n	2e8d4 <nrfx_pwm_stop+0x4c>
   2e8dc:	200186b0 	.word	0x200186b0
   2e8e0:	00045324 	.word	0x00045324
   2e8e4:	0004033e 	.word	0x0004033e
   2e8e8:	00045260 	.word	0x00045260

0002e8ec <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e8ec:	6803      	ldr	r3, [r0, #0]
{
   2e8ee:	b510      	push	{r4, lr}
    switch (port)
   2e8f0:	095a      	lsrs	r2, r3, #5
   2e8f2:	bf0c      	ite	eq
   2e8f4:	f04f 32ff 	moveq.w	r2, #4294967295
   2e8f8:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   2e8fa:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2e8fe:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e902:	07db      	lsls	r3, r3, #31
{
   2e904:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e906:	d40b      	bmi.n	2e920 <nrf_gpio_pin_port_decode+0x34>
   2e908:	490f      	ldr	r1, [pc, #60]	; (2e948 <nrf_gpio_pin_port_decode+0x5c>)
   2e90a:	4810      	ldr	r0, [pc, #64]	; (2e94c <nrf_gpio_pin_port_decode+0x60>)
   2e90c:	f44f 7305 	mov.w	r3, #532	; 0x214
   2e910:	4a0f      	ldr	r2, [pc, #60]	; (2e950 <nrf_gpio_pin_port_decode+0x64>)
   2e912:	f00a fc0e 	bl	39132 <printk>
   2e916:	f44f 7105 	mov.w	r1, #532	; 0x214
   2e91a:	480d      	ldr	r0, [pc, #52]	; (2e950 <nrf_gpio_pin_port_decode+0x64>)
   2e91c:	f00a fea8 	bl	39670 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2e920:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2e922:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2e926:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2e928:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2e92a:	d00b      	beq.n	2e944 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   2e92c:	4909      	ldr	r1, [pc, #36]	; (2e954 <nrf_gpio_pin_port_decode+0x68>)
   2e92e:	4807      	ldr	r0, [pc, #28]	; (2e94c <nrf_gpio_pin_port_decode+0x60>)
   2e930:	f240 2319 	movw	r3, #537	; 0x219
   2e934:	4a06      	ldr	r2, [pc, #24]	; (2e950 <nrf_gpio_pin_port_decode+0x64>)
   2e936:	f00a fbfc 	bl	39132 <printk>
   2e93a:	f240 2119 	movw	r1, #537	; 0x219
   2e93e:	4804      	ldr	r0, [pc, #16]	; (2e950 <nrf_gpio_pin_port_decode+0x64>)
   2e940:	f00a fe96 	bl	39670 <assert_post_action>
}
   2e944:	4804      	ldr	r0, [pc, #16]	; (2e958 <nrf_gpio_pin_port_decode+0x6c>)
   2e946:	bd10      	pop	{r4, pc}
   2e948:	000419c8 	.word	0x000419c8
   2e94c:	0004033e 	.word	0x0004033e
   2e950:	00041995 	.word	0x00041995
   2e954:	000451fc 	.word	0x000451fc
   2e958:	40842500 	.word	0x40842500

0002e95c <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   2e95c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e960:	4681      	mov	r9, r0
   2e962:	4692      	mov	sl, r2
   2e964:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
   2e966:	460c      	mov	r4, r1
   2e968:	b959      	cbnz	r1, 2e982 <nrfx_spim_init+0x26>
   2e96a:	4959      	ldr	r1, [pc, #356]	; (2ead0 <nrfx_spim_init+0x174>)
   2e96c:	4859      	ldr	r0, [pc, #356]	; (2ead4 <nrfx_spim_init+0x178>)
   2e96e:	f44f 7383 	mov.w	r3, #262	; 0x106
   2e972:	4a59      	ldr	r2, [pc, #356]	; (2ead8 <nrfx_spim_init+0x17c>)
   2e974:	f00a fbdd 	bl	39132 <printk>
   2e978:	f44f 7183 	mov.w	r1, #262	; 0x106
   2e97c:	4856      	ldr	r0, [pc, #344]	; (2ead8 <nrfx_spim_init+0x17c>)
   2e97e:	f00a fe77 	bl	39670 <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2e982:	2124      	movs	r1, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2e984:	f899 5004 	ldrb.w	r5, [r9, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2e988:	4e54      	ldr	r6, [pc, #336]	; (2eadc <nrfx_spim_init+0x180>)
   2e98a:	4369      	muls	r1, r5
   2e98c:	1873      	adds	r3, r6, r1
   2e98e:	7f1a      	ldrb	r2, [r3, #28]
   2e990:	2a00      	cmp	r2, #0
   2e992:	f040 809b 	bne.w	2eacc <nrfx_spim_init+0x170>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   2e996:	f8d9 7000 	ldr.w	r7, [r9]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   2e99a:	f846 a001 	str.w	sl, [r6, r1]
    p_cb->p_context = p_context;
   2e99e:	f8c3 8004 	str.w	r8, [r3, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
   2e9a2:	7b23      	ldrb	r3, [r4, #12]
   2e9a4:	7820      	ldrb	r0, [r4, #0]
   2e9a6:	2b01      	cmp	r3, #1
   2e9a8:	d87e      	bhi.n	2eaa8 <nrfx_spim_init+0x14c>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   2e9aa:	f00d fea2 	bl	3c6f2 <nrf_gpio_pin_clear>
    pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M) ? NRF_GPIO_PIN_H0H1 : NRF_GPIO_PIN_S0S1;
#else
    pin_drive = NRF_GPIO_PIN_S0S1;
#endif

    nrf_gpio_cfg(p_config->sck_pin,
   2e9ae:	7823      	ldrb	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e9b0:	a801      	add	r0, sp, #4
   2e9b2:	9301      	str	r3, [sp, #4]
   2e9b4:	f7ff ff9a 	bl	2e8ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2e9b8:	2201      	movs	r2, #1
   2e9ba:	9b01      	ldr	r3, [sp, #4]
   2e9bc:	3380      	adds	r3, #128	; 0x80
   2e9be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 pin_drive,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   2e9c2:	f894 8001 	ldrb.w	r8, [r4, #1]
   2e9c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   2e9ca:	d070      	beq.n	2eaae <nrfx_spim_init+0x152>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   2e9cc:	4640      	mov	r0, r8
   2e9ce:	f00d fe90 	bl	3c6f2 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e9d2:	a801      	add	r0, sp, #4
   2e9d4:	f8cd 8004 	str.w	r8, [sp, #4]
   2e9d8:	f7ff ff88 	bl	2e8ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2e9dc:	2203      	movs	r2, #3
   2e9de:	9b01      	ldr	r3, [sp, #4]
   2e9e0:	3380      	adds	r3, #128	; 0x80
   2e9e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   2e9e6:	f894 a002 	ldrb.w	sl, [r4, #2]
   2e9ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   2e9ee:	d061      	beq.n	2eab4 <nrfx_spim_init+0x158>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e9f0:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg(miso_pin,
   2e9f2:	f894 b00e 	ldrb.w	fp, [r4, #14]
   2e9f6:	f8cd a004 	str.w	sl, [sp, #4]
   2e9fa:	f7ff ff77 	bl	2e8ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2e9fe:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ea00:	ea4f 028b 	mov.w	r2, fp, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   2ea04:	3380      	adds	r3, #128	; 0x80
   2ea06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
   2ea0a:	2324      	movs	r3, #36	; 0x24
   2ea0c:	fb03 6305 	mla	r3, r3, r5, r6
   2ea10:	78e0      	ldrb	r0, [r4, #3]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ea12:	28ff      	cmp	r0, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
   2ea14:	77d8      	strb	r0, [r3, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ea16:	d013      	beq.n	2ea40 <nrfx_spim_init+0xe4>
    {
        if (p_config->ss_active_high)
   2ea18:	7923      	ldrb	r3, [r4, #4]
   2ea1a:	2b00      	cmp	r3, #0
   2ea1c:	d04d      	beq.n	2eaba <nrfx_spim_init+0x15e>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
   2ea1e:	f00d fe68 	bl	3c6f2 <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg(p_config->ss_pin,
   2ea22:	78e3      	ldrb	r3, [r4, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ea24:	a801      	add	r0, sp, #4
   2ea26:	9301      	str	r3, [sp, #4]
   2ea28:	f7ff ff60 	bl	2e8ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2ea2c:	2203      	movs	r2, #3
   2ea2e:	9b01      	ldr	r3, [sp, #4]
   2ea30:	3380      	adds	r3, #128	; 0x80
   2ea32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
   2ea36:	2324      	movs	r3, #36	; 0x24
   2ea38:	fb03 6305 	mla	r3, r3, r5, r6
   2ea3c:	7922      	ldrb	r2, [r4, #4]
   2ea3e:	779a      	strb	r2, [r3, #30]

    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   2ea40:	7823      	ldrb	r3, [r4, #0]
    p_reg->PSEL.SCK  = sck_pin;
   2ea42:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   2ea46:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   2ea48:	f8c7 850c 	str.w	r8, [r7, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   2ea4c:	f8c7 a510 	str.w	sl, [r7, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   2ea50:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   2ea54:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   2ea56:	7b22      	ldrb	r2, [r4, #12]
   2ea58:	3b00      	subs	r3, #0
   2ea5a:	bf18      	it	ne
   2ea5c:	2301      	movne	r3, #1
    switch (spi_mode)
   2ea5e:	2a02      	cmp	r2, #2
   2ea60:	d02e      	beq.n	2eac0 <nrfx_spim_init+0x164>
   2ea62:	2a03      	cmp	r2, #3
   2ea64:	d02f      	beq.n	2eac6 <nrfx_spim_init+0x16a>
   2ea66:	2a01      	cmp	r2, #1
   2ea68:	d101      	bne.n	2ea6e <nrfx_spim_init+0x112>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   2ea6a:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   2ea6e:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   2ea72:	79a3      	ldrb	r3, [r4, #6]
   2ea74:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   2ea78:	2307      	movs	r3, #7
   2ea7a:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   2ea7e:	2324      	movs	r3, #36	; 0x24
   2ea80:	436b      	muls	r3, r5
   2ea82:	58f3      	ldr	r3, [r6, r3]
   2ea84:	b12b      	cbz	r3, 2ea92 <nrfx_spim_init+0x136>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2ea86:	f8d9 0000 	ldr.w	r0, [r9]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2ea8a:	f340 3007 	sbfx	r0, r0, #12, #8
   2ea8e:	f7f4 fb9d 	bl	231cc <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   2ea92:	2324      	movs	r3, #36	; 0x24
   2ea94:	fb03 6505 	mla	r5, r3, r5, r6
   2ea98:	2300      	movs	r3, #0
   2ea9a:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2ea9c:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2ea9e:	4810      	ldr	r0, [pc, #64]	; (2eae0 <nrfx_spim_init+0x184>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2eaa0:	772b      	strb	r3, [r5, #28]
}
   2eaa2:	b003      	add	sp, #12
   2eaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   2eaa8:	f00d fe2f 	bl	3c70a <nrf_gpio_pin_set>
   2eaac:	e77f      	b.n	2e9ae <nrfx_spim_init+0x52>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   2eaae:	f04f 38ff 	mov.w	r8, #4294967295
   2eab2:	e798      	b.n	2e9e6 <nrfx_spim_init+0x8a>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   2eab4:	f04f 3aff 	mov.w	sl, #4294967295
   2eab8:	e7a7      	b.n	2ea0a <nrfx_spim_init+0xae>
            nrf_gpio_pin_set(p_config->ss_pin);
   2eaba:	f00d fe26 	bl	3c70a <nrf_gpio_pin_set>
   2eabe:	e7b0      	b.n	2ea22 <nrfx_spim_init+0xc6>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2eac0:	f043 0304 	orr.w	r3, r3, #4
        break;
   2eac4:	e7d3      	b.n	2ea6e <nrfx_spim_init+0x112>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   2eac6:	f043 0306 	orr.w	r3, r3, #6
        break;
   2eaca:	e7d0      	b.n	2ea6e <nrfx_spim_init+0x112>
        return err_code;
   2eacc:	4805      	ldr	r0, [pc, #20]	; (2eae4 <nrfx_spim_init+0x188>)
   2eace:	e7e8      	b.n	2eaa2 <nrfx_spim_init+0x146>
   2ead0:	00045068 	.word	0x00045068
   2ead4:	0004033e 	.word	0x0004033e
   2ead8:	00045369 	.word	0x00045369
   2eadc:	200186e0 	.word	0x200186e0
   2eae0:	0bad0000 	.word	0x0bad0000
   2eae4:	0bad0005 	.word	0x0bad0005

0002eae8 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2eae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2eaec:	2324      	movs	r3, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2eaee:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2eaf0:	4f6f      	ldr	r7, [pc, #444]	; (2ecb0 <nrfx_spim_xfer+0x1c8>)
{
   2eaf2:	4680      	mov	r8, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2eaf4:	fb03 7306 	mla	r3, r3, r6, r7
   2eaf8:	7f1b      	ldrb	r3, [r3, #28]
{
   2eafa:	460c      	mov	r4, r1
   2eafc:	4615      	mov	r5, r2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2eafe:	b95b      	cbnz	r3, 2eb18 <nrfx_spim_xfer+0x30>
   2eb00:	496c      	ldr	r1, [pc, #432]	; (2ecb4 <nrfx_spim_xfer+0x1cc>)
   2eb02:	486d      	ldr	r0, [pc, #436]	; (2ecb8 <nrfx_spim_xfer+0x1d0>)
   2eb04:	f240 23d5 	movw	r3, #725	; 0x2d5
   2eb08:	4a6c      	ldr	r2, [pc, #432]	; (2ecbc <nrfx_spim_xfer+0x1d4>)
   2eb0a:	f00a fb12 	bl	39132 <printk>
   2eb0e:	f240 21d5 	movw	r1, #725	; 0x2d5
   2eb12:	486a      	ldr	r0, [pc, #424]	; (2ecbc <nrfx_spim_xfer+0x1d4>)
   2eb14:	f00a fdac 	bl	39670 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   2eb18:	6823      	ldr	r3, [r4, #0]
   2eb1a:	b96b      	cbnz	r3, 2eb38 <nrfx_spim_xfer+0x50>
   2eb1c:	6863      	ldr	r3, [r4, #4]
   2eb1e:	b15b      	cbz	r3, 2eb38 <nrfx_spim_xfer+0x50>
   2eb20:	4967      	ldr	r1, [pc, #412]	; (2ecc0 <nrfx_spim_xfer+0x1d8>)
   2eb22:	4865      	ldr	r0, [pc, #404]	; (2ecb8 <nrfx_spim_xfer+0x1d0>)
   2eb24:	f240 23d6 	movw	r3, #726	; 0x2d6
   2eb28:	4a64      	ldr	r2, [pc, #400]	; (2ecbc <nrfx_spim_xfer+0x1d4>)
   2eb2a:	f00a fb02 	bl	39132 <printk>
   2eb2e:	f240 21d6 	movw	r1, #726	; 0x2d6
   2eb32:	4862      	ldr	r0, [pc, #392]	; (2ecbc <nrfx_spim_xfer+0x1d4>)
   2eb34:	f00a fd9c 	bl	39670 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   2eb38:	68a3      	ldr	r3, [r4, #8]
   2eb3a:	b96b      	cbnz	r3, 2eb58 <nrfx_spim_xfer+0x70>
   2eb3c:	68e3      	ldr	r3, [r4, #12]
   2eb3e:	b15b      	cbz	r3, 2eb58 <nrfx_spim_xfer+0x70>
   2eb40:	4960      	ldr	r1, [pc, #384]	; (2ecc4 <nrfx_spim_xfer+0x1dc>)
   2eb42:	485d      	ldr	r0, [pc, #372]	; (2ecb8 <nrfx_spim_xfer+0x1d0>)
   2eb44:	f240 23d7 	movw	r3, #727	; 0x2d7
   2eb48:	4a5c      	ldr	r2, [pc, #368]	; (2ecbc <nrfx_spim_xfer+0x1d4>)
   2eb4a:	f00a faf2 	bl	39132 <printk>
   2eb4e:	f240 21d7 	movw	r1, #727	; 0x2d7
   2eb52:	485a      	ldr	r0, [pc, #360]	; (2ecbc <nrfx_spim_xfer+0x1d4>)
   2eb54:	f00a fd8c 	bl	39670 <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2eb58:	f898 3004 	ldrb.w	r3, [r8, #4]
   2eb5c:	b93b      	cbnz	r3, 2eb6e <nrfx_spim_xfer+0x86>
   2eb5e:	68e3      	ldr	r3, [r4, #12]
   2eb60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2eb64:	d203      	bcs.n	2eb6e <nrfx_spim_xfer+0x86>
   2eb66:	6863      	ldr	r3, [r4, #4]
   2eb68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2eb6c:	d30b      	bcc.n	2eb86 <nrfx_spim_xfer+0x9e>
   2eb6e:	4956      	ldr	r1, [pc, #344]	; (2ecc8 <nrfx_spim_xfer+0x1e0>)
   2eb70:	4851      	ldr	r0, [pc, #324]	; (2ecb8 <nrfx_spim_xfer+0x1d0>)
   2eb72:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   2eb76:	4a51      	ldr	r2, [pc, #324]	; (2ecbc <nrfx_spim_xfer+0x1d4>)
   2eb78:	f00a fadb 	bl	39132 <printk>
   2eb7c:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   2eb80:	484e      	ldr	r0, [pc, #312]	; (2ecbc <nrfx_spim_xfer+0x1d4>)
   2eb82:	f00a fd75 	bl	39670 <assert_post_action>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   2eb86:	f015 0908 	ands.w	r9, r5, #8
   2eb8a:	d011      	beq.n	2ebb0 <nrfx_spim_xfer+0xc8>
   2eb8c:	2324      	movs	r3, #36	; 0x24
   2eb8e:	fb03 7306 	mla	r3, r3, r6, r7
   2eb92:	7fdb      	ldrb	r3, [r3, #31]
   2eb94:	2bff      	cmp	r3, #255	; 0xff
   2eb96:	d00b      	beq.n	2ebb0 <nrfx_spim_xfer+0xc8>
   2eb98:	494c      	ldr	r1, [pc, #304]	; (2eccc <nrfx_spim_xfer+0x1e4>)
   2eb9a:	4847      	ldr	r0, [pc, #284]	; (2ecb8 <nrfx_spim_xfer+0x1d0>)
   2eb9c:	f240 23db 	movw	r3, #731	; 0x2db
   2eba0:	4a46      	ldr	r2, [pc, #280]	; (2ecbc <nrfx_spim_xfer+0x1d4>)
   2eba2:	f00a fac6 	bl	39132 <printk>
   2eba6:	f240 21db 	movw	r1, #731	; 0x2db
   2ebaa:	4844      	ldr	r0, [pc, #272]	; (2ecbc <nrfx_spim_xfer+0x1d4>)
   2ebac:	f00a fd60 	bl	39670 <assert_post_action>
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   2ebb0:	2324      	movs	r3, #36	; 0x24
   2ebb2:	4373      	muls	r3, r6
   2ebb4:	18fa      	adds	r2, r7, r3
   2ebb6:	7f51      	ldrb	r1, [r2, #29]
   2ebb8:	2900      	cmp	r1, #0
   2ebba:	d177      	bne.n	2ecac <nrfx_spim_xfer+0x1c4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   2ebbc:	58fb      	ldr	r3, [r7, r3]
   2ebbe:	b123      	cbz	r3, 2ebca <nrfx_spim_xfer+0xe2>
   2ebc0:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   2ebc4:	bf04      	itt	eq
   2ebc6:	2301      	moveq	r3, #1
   2ebc8:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   2ebca:	f04f 0c24 	mov.w	ip, #36	; 0x24
   2ebce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2ebd2:	fb0c 7c06 	mla	ip, ip, r6, r7
   2ebd6:	f10c 0e0c 	add.w	lr, ip, #12
   2ebda:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ebde:	f89c 001f 	ldrb.w	r0, [ip, #31]
   2ebe2:	28ff      	cmp	r0, #255	; 0xff
   2ebe4:	d004      	beq.n	2ebf0 <nrfx_spim_xfer+0x108>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   2ebe6:	f89c 301e 	ldrb.w	r3, [ip, #30]
   2ebea:	b1bb      	cbz	r3, 2ec1c <nrfx_spim_xfer+0x134>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
   2ebec:	f00d fd8d 	bl	3c70a <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2ebf0:	6821      	ldr	r1, [r4, #0]
   2ebf2:	b121      	cbz	r1, 2ebfe <nrfx_spim_xfer+0x116>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2ebf4:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   2ebf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2ebfc:	d106      	bne.n	2ec0c <nrfx_spim_xfer+0x124>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2ebfe:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2ec00:	b17a      	cbz	r2, 2ec22 <nrfx_spim_xfer+0x13a>
   2ec02:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2ec06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2ec0a:	d00a      	beq.n	2ec22 <nrfx_spim_xfer+0x13a>
        p_cb->transfer_in_progress = false;
   2ec0c:	2324      	movs	r3, #36	; 0x24
   2ec0e:	fb03 7606 	mla	r6, r3, r6, r7
   2ec12:	2300      	movs	r3, #0
        return err_code;
   2ec14:	482e      	ldr	r0, [pc, #184]	; (2ecd0 <nrfx_spim_xfer+0x1e8>)
        p_cb->transfer_in_progress = false;
   2ec16:	7773      	strb	r3, [r6, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   2ec18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
   2ec1c:	f00d fd69 	bl	3c6f2 <nrf_gpio_pin_clear>
   2ec20:	e7e6      	b.n	2ebf0 <nrfx_spim_xfer+0x108>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   2ec22:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   2ec26:	6860      	ldr	r0, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2ec28:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2ec2c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   2ec30:	68e1      	ldr	r1, [r4, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2ec32:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ec36:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   2ec38:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ec3c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2ec40:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   2ec44:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   2ec48:	bf18      	it	ne
   2ec4a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   2ec4c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   2ec50:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   2ec54:	bf18      	it	ne
   2ec56:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   2ec58:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2ec5c:	f1b9 0f00 	cmp.w	r9, #0
   2ec60:	d101      	bne.n	2ec66 <nrfx_spim_xfer+0x17e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ec62:	2201      	movs	r2, #1
   2ec64:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   2ec66:	2224      	movs	r2, #36	; 0x24
   2ec68:	4372      	muls	r2, r6
   2ec6a:	58ba      	ldr	r2, [r7, r2]
   2ec6c:	b9aa      	cbnz	r2, 2ec9a <nrfx_spim_xfer+0x1b2>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2ec6e:	f1b9 0f00 	cmp.w	r9, #0
   2ec72:	d103      	bne.n	2ec7c <nrfx_spim_xfer+0x194>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ec74:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2ec78:	2a00      	cmp	r2, #0
   2ec7a:	d0fb      	beq.n	2ec74 <nrfx_spim_xfer+0x18c>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ec7c:	2324      	movs	r3, #36	; 0x24
   2ec7e:	fb03 7606 	mla	r6, r3, r6, r7
   2ec82:	7ff0      	ldrb	r0, [r6, #31]
   2ec84:	28ff      	cmp	r0, #255	; 0xff
   2ec86:	d003      	beq.n	2ec90 <nrfx_spim_xfer+0x1a8>
                if (p_cb->ss_active_high)
   2ec88:	7fb3      	ldrb	r3, [r6, #30]
   2ec8a:	b11b      	cbz	r3, 2ec94 <nrfx_spim_xfer+0x1ac>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
   2ec8c:	f00d fd31 	bl	3c6f2 <nrf_gpio_pin_clear>
    return err_code;
   2ec90:	4810      	ldr	r0, [pc, #64]	; (2ecd4 <nrfx_spim_xfer+0x1ec>)
   2ec92:	e7c1      	b.n	2ec18 <nrfx_spim_xfer+0x130>
                    nrf_gpio_pin_set(p_cb->ss_pin);
   2ec94:	f00d fd39 	bl	3c70a <nrf_gpio_pin_set>
   2ec98:	e7fa      	b.n	2ec90 <nrfx_spim_xfer+0x1a8>
    if (!enable)
   2ec9a:	2240      	movs	r2, #64	; 0x40
   2ec9c:	f015 0f04 	tst.w	r5, #4
    p_reg->INTENCLR = mask;
   2eca0:	bf14      	ite	ne
   2eca2:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   2eca6:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   2ecaa:	e7f1      	b.n	2ec90 <nrfx_spim_xfer+0x1a8>
        return err_code;
   2ecac:	480a      	ldr	r0, [pc, #40]	; (2ecd8 <nrfx_spim_xfer+0x1f0>)
   2ecae:	e7b3      	b.n	2ec18 <nrfx_spim_xfer+0x130>
   2ecb0:	200186e0 	.word	0x200186e0
   2ecb4:	000452bc 	.word	0x000452bc
   2ecb8:	0004033e 	.word	0x0004033e
   2ecbc:	00045369 	.word	0x00045369
   2ecc0:	000453a5 	.word	0x000453a5
   2ecc4:	000453ec 	.word	0x000453ec
   2ecc8:	00045433 	.word	0x00045433
   2eccc:	000454d7 	.word	0x000454d7
   2ecd0:	0bad000a 	.word	0x0bad000a
   2ecd4:	0bad0000 	.word	0x0bad0000
   2ecd8:	0bad000b 	.word	0x0bad000b

0002ecdc <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ecdc:	4b16      	ldr	r3, [pc, #88]	; (2ed38 <nrfx_spim_3_irq_handler+0x5c>)
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   2ecde:	b510      	push	{r4, lr}
   2ece0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2ece4:	b332      	cbz	r2, 2ed34 <nrfx_spim_3_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ece6:	2200      	movs	r2, #0
        NRFX_ASSERT(p_cb->handler);
   2ece8:	4c14      	ldr	r4, [pc, #80]	; (2ed3c <nrfx_spim_3_irq_handler+0x60>)
   2ecea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2ecee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   2ecf2:	6823      	ldr	r3, [r4, #0]
   2ecf4:	b95b      	cbnz	r3, 2ed0e <nrfx_spim_3_irq_handler+0x32>
   2ecf6:	4912      	ldr	r1, [pc, #72]	; (2ed40 <nrfx_spim_3_irq_handler+0x64>)
   2ecf8:	4812      	ldr	r0, [pc, #72]	; (2ed44 <nrfx_spim_3_irq_handler+0x68>)
   2ecfa:	f240 333e 	movw	r3, #830	; 0x33e
   2ecfe:	4a12      	ldr	r2, [pc, #72]	; (2ed48 <nrfx_spim_3_irq_handler+0x6c>)
   2ed00:	f00a fa17 	bl	39132 <printk>
   2ed04:	f240 313e 	movw	r1, #830	; 0x33e
   2ed08:	480f      	ldr	r0, [pc, #60]	; (2ed48 <nrfx_spim_3_irq_handler+0x6c>)
   2ed0a:	f00a fcb1 	bl	39670 <assert_post_action>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ed0e:	7fe0      	ldrb	r0, [r4, #31]
   2ed10:	28ff      	cmp	r0, #255	; 0xff
   2ed12:	d003      	beq.n	2ed1c <nrfx_spim_3_irq_handler+0x40>
            if (p_cb->ss_active_high)
   2ed14:	7fa3      	ldrb	r3, [r4, #30]
   2ed16:	b153      	cbz	r3, 2ed2e <nrfx_spim_3_irq_handler+0x52>
                nrf_gpio_pin_clear(p_cb->ss_pin);
   2ed18:	f00d fceb 	bl	3c6f2 <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
   2ed1c:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2ed1e:	480b      	ldr	r0, [pc, #44]	; (2ed4c <nrfx_spim_3_irq_handler+0x70>)
    p_cb->transfer_in_progress = false;
   2ed20:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   2ed22:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2ed24:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   2ed28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2ed2c:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
   2ed2e:	f00d fcec 	bl	3c70a <nrf_gpio_pin_set>
   2ed32:	e7f3      	b.n	2ed1c <nrfx_spim_3_irq_handler+0x40>
}
   2ed34:	bd10      	pop	{r4, pc}
   2ed36:	bf00      	nop
   2ed38:	4000b000 	.word	0x4000b000
   2ed3c:	200186e0 	.word	0x200186e0
   2ed40:	00045507 	.word	0x00045507
   2ed44:	0004033e 	.word	0x0004033e
   2ed48:	00045369 	.word	0x00045369
   2ed4c:	200186e8 	.word	0x200186e8

0002ed50 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2ed50:	6803      	ldr	r3, [r0, #0]
{
   2ed52:	b510      	push	{r4, lr}
    switch (port)
   2ed54:	095a      	lsrs	r2, r3, #5
   2ed56:	bf0c      	ite	eq
   2ed58:	f04f 32ff 	moveq.w	r2, #4294967295
   2ed5c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   2ed5e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2ed62:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2ed66:	07db      	lsls	r3, r3, #31
{
   2ed68:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2ed6a:	d40b      	bmi.n	2ed84 <nrf_gpio_pin_port_decode+0x34>
   2ed6c:	490f      	ldr	r1, [pc, #60]	; (2edac <nrf_gpio_pin_port_decode+0x5c>)
   2ed6e:	4810      	ldr	r0, [pc, #64]	; (2edb0 <nrf_gpio_pin_port_decode+0x60>)
   2ed70:	f44f 7305 	mov.w	r3, #532	; 0x214
   2ed74:	4a0f      	ldr	r2, [pc, #60]	; (2edb4 <nrf_gpio_pin_port_decode+0x64>)
   2ed76:	f00a f9dc 	bl	39132 <printk>
   2ed7a:	f44f 7105 	mov.w	r1, #532	; 0x214
   2ed7e:	480d      	ldr	r0, [pc, #52]	; (2edb4 <nrf_gpio_pin_port_decode+0x64>)
   2ed80:	f00a fc76 	bl	39670 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2ed84:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2ed86:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ed8a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2ed8c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2ed8e:	d00b      	beq.n	2eda8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   2ed90:	4909      	ldr	r1, [pc, #36]	; (2edb8 <nrf_gpio_pin_port_decode+0x68>)
   2ed92:	4807      	ldr	r0, [pc, #28]	; (2edb0 <nrf_gpio_pin_port_decode+0x60>)
   2ed94:	f240 2319 	movw	r3, #537	; 0x219
   2ed98:	4a06      	ldr	r2, [pc, #24]	; (2edb4 <nrf_gpio_pin_port_decode+0x64>)
   2ed9a:	f00a f9ca 	bl	39132 <printk>
   2ed9e:	f240 2119 	movw	r1, #537	; 0x219
   2eda2:	4804      	ldr	r0, [pc, #16]	; (2edb4 <nrf_gpio_pin_port_decode+0x64>)
   2eda4:	f00a fc64 	bl	39670 <assert_post_action>
}
   2eda8:	4804      	ldr	r0, [pc, #16]	; (2edbc <nrf_gpio_pin_port_decode+0x6c>)
   2edaa:	bd10      	pop	{r4, pc}
   2edac:	000419c8 	.word	0x000419c8
   2edb0:	0004033e 	.word	0x0004033e
   2edb4:	00041995 	.word	0x00041995
   2edb8:	000451fc 	.word	0x000451fc
   2edbc:	40842500 	.word	0x40842500

0002edc0 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   2edc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2edc4:	4606      	mov	r6, r0
   2edc6:	4692      	mov	sl, r2
   2edc8:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   2edca:	460c      	mov	r4, r1
   2edcc:	b959      	cbnz	r1, 2ede6 <nrfx_twim_init+0x26>
   2edce:	4932      	ldr	r1, [pc, #200]	; (2ee98 <nrfx_twim_init+0xd8>)
   2edd0:	4832      	ldr	r0, [pc, #200]	; (2ee9c <nrfx_twim_init+0xdc>)
   2edd2:	f44f 7383 	mov.w	r3, #262	; 0x106
   2edd6:	4a32      	ldr	r2, [pc, #200]	; (2eea0 <nrfx_twim_init+0xe0>)
   2edd8:	f00a f9ab 	bl	39132 <printk>
   2eddc:	f44f 7183 	mov.w	r1, #262	; 0x106
   2ede0:	482f      	ldr	r0, [pc, #188]	; (2eea0 <nrfx_twim_init+0xe0>)
   2ede2:	f00a fc45 	bl	39670 <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
   2ede6:	e9d4 2300 	ldrd	r2, r3, [r4]
   2edea:	429a      	cmp	r2, r3
   2edec:	d10b      	bne.n	2ee06 <nrfx_twim_init+0x46>
   2edee:	492d      	ldr	r1, [pc, #180]	; (2eea4 <nrfx_twim_init+0xe4>)
   2edf0:	482a      	ldr	r0, [pc, #168]	; (2ee9c <nrfx_twim_init+0xdc>)
   2edf2:	f240 1307 	movw	r3, #263	; 0x107
   2edf6:	4a2a      	ldr	r2, [pc, #168]	; (2eea0 <nrfx_twim_init+0xe0>)
   2edf8:	f00a f99b 	bl	39132 <printk>
   2edfc:	f240 1107 	movw	r1, #263	; 0x107
   2ee00:	4827      	ldr	r0, [pc, #156]	; (2eea0 <nrfx_twim_init+0xe0>)
   2ee02:	f00a fc35 	bl	39670 <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2ee06:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2ee08:	f896 8004 	ldrb.w	r8, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2ee0c:	4d26      	ldr	r5, [pc, #152]	; (2eea8 <nrfx_twim_init+0xe8>)
   2ee0e:	fb07 f708 	mul.w	r7, r7, r8
   2ee12:	19e9      	adds	r1, r5, r7
   2ee14:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   2ee18:	2b00      	cmp	r3, #0
   2ee1a:	d13b      	bne.n	2ee94 <nrfx_twim_init+0xd4>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   2ee1c:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
   2ee1e:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
   2ee22:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2ee26:	7b63      	ldrb	r3, [r4, #13]
    p_cb->p_context       = p_context;
   2ee28:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2ee2c:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
   2ee30:	6823      	ldr	r3, [r4, #0]
    p_cb->handler         = event_handler;
   2ee32:	f845 a007 	str.w	sl, [r5, r7]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ee36:	a801      	add	r0, sp, #4
#if NRFX_CHECK(NRFX_TWIM_NRF52_ANOMALY_109_WORKAROUND_ENABLED)
    p_cb->bus_frequency   = (nrf_twim_frequency_t)p_config->frequency;
#endif

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2ee38:	f8d6 9000 	ldr.w	r9, [r6]
    reg->PIN_CNF[pin_number] = cnf;
   2ee3c:	f240 6a0c 	movw	sl, #1548	; 0x60c
   2ee40:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ee42:	f7ff ff85 	bl	2ed50 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2ee46:	9b01      	ldr	r3, [sp, #4]
   2ee48:	3380      	adds	r3, #128	; 0x80
   2ee4a:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda, drive);
   2ee4e:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ee50:	a801      	add	r0, sp, #4
   2ee52:	9301      	str	r3, [sp, #4]
   2ee54:	f7ff ff7c 	bl	2ed50 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2ee58:	9b01      	ldr	r3, [sp, #4]
   2ee5a:	3380      	adds	r3, #128	; 0x80
   2ee5c:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   2ee60:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSEL.SCL = scl_pin;
   2ee64:	f8c9 2508 	str.w	r2, [r9, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   2ee68:	f8c9 350c 	str.w	r3, [r9, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   2ee6c:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
   2ee6e:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524

    if (p_cb->handler)
   2ee72:	59eb      	ldr	r3, [r5, r7]
   2ee74:	b123      	cbz	r3, 2ee80 <nrfx_twim_init+0xc0>
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2ee76:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   2ee78:	f340 3007 	sbfx	r0, r0, #12, #8
   2ee7c:	f7f4 f9a6 	bl	231cc <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2ee80:	2334      	movs	r3, #52	; 0x34
   2ee82:	fb03 5508 	mla	r5, r3, r8, r5
   2ee86:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2ee88:	4808      	ldr	r0, [pc, #32]	; (2eeac <nrfx_twim_init+0xec>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2ee8a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   2ee8e:	b002      	add	sp, #8
   2ee90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   2ee94:	4806      	ldr	r0, [pc, #24]	; (2eeb0 <nrfx_twim_init+0xf0>)
   2ee96:	e7fa      	b.n	2ee8e <nrfx_twim_init+0xce>
   2ee98:	00045068 	.word	0x00045068
   2ee9c:	0004033e 	.word	0x0004033e
   2eea0:	00045515 	.word	0x00045515
   2eea4:	00045551 	.word	0x00045551
   2eea8:	20018704 	.word	0x20018704
   2eeac:	0bad0000 	.word	0x0bad0000
   2eeb0:	0bad0005 	.word	0x0bad0005

0002eeb4 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2eeb4:	2234      	movs	r2, #52	; 0x34
{
   2eeb6:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2eeb8:	4d0f      	ldr	r5, [pc, #60]	; (2eef8 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2eeba:	7904      	ldrb	r4, [r0, #4]
{
   2eebc:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2eebe:	fb02 5204 	mla	r2, r2, r4, r5
   2eec2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   2eec6:	2a01      	cmp	r2, #1
   2eec8:	d00b      	beq.n	2eee2 <nrfx_twim_enable+0x2e>
   2eeca:	490c      	ldr	r1, [pc, #48]	; (2eefc <nrfx_twim_enable+0x48>)
   2eecc:	480c      	ldr	r0, [pc, #48]	; (2ef00 <nrfx_twim_enable+0x4c>)
   2eece:	f44f 73b5 	mov.w	r3, #362	; 0x16a
   2eed2:	4a0c      	ldr	r2, [pc, #48]	; (2ef04 <nrfx_twim_enable+0x50>)
   2eed4:	f00a f92d 	bl	39132 <printk>
   2eed8:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   2eedc:	4809      	ldr	r0, [pc, #36]	; (2ef04 <nrfx_twim_enable+0x50>)
   2eede:	f00a fbc7 	bl	39670 <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2eee2:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   2eee4:	6833      	ldr	r3, [r6, #0]
   2eee6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2eeea:	2334      	movs	r3, #52	; 0x34
   2eeec:	fb03 5404 	mla	r4, r3, r4, r5
   2eef0:	2302      	movs	r3, #2
   2eef2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   2eef6:	bd70      	pop	{r4, r5, r6, pc}
   2eef8:	20018704 	.word	0x20018704
   2eefc:	00045570 	.word	0x00045570
   2ef00:	0004033e 	.word	0x0004033e
   2ef04:	00045515 	.word	0x00045515

0002ef08 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2ef08:	2234      	movs	r2, #52	; 0x34
{
   2ef0a:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2ef0c:	4d15      	ldr	r5, [pc, #84]	; (2ef64 <nrfx_twim_disable+0x5c>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2ef0e:	7904      	ldrb	r4, [r0, #4]
{
   2ef10:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2ef12:	fb02 5204 	mla	r2, r2, r4, r5
   2ef16:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
   2ef1a:	b95a      	cbnz	r2, 2ef34 <nrfx_twim_disable+0x2c>
   2ef1c:	4912      	ldr	r1, [pc, #72]	; (2ef68 <nrfx_twim_disable+0x60>)
   2ef1e:	4813      	ldr	r0, [pc, #76]	; (2ef6c <nrfx_twim_disable+0x64>)
   2ef20:	f240 1375 	movw	r3, #373	; 0x175
   2ef24:	4a12      	ldr	r2, [pc, #72]	; (2ef70 <nrfx_twim_disable+0x68>)
   2ef26:	f00a f904 	bl	39132 <printk>
   2ef2a:	f240 1175 	movw	r1, #373	; 0x175
   2ef2e:	4810      	ldr	r0, [pc, #64]	; (2ef70 <nrfx_twim_disable+0x68>)
   2ef30:	f00a fb9e 	bl	39670 <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   2ef34:	2334      	movs	r3, #52	; 0x34
   2ef36:	2100      	movs	r1, #0
   2ef38:	fb03 5304 	mla	r3, r3, r4, r5
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2ef3c:	6832      	ldr	r2, [r6, #0]
    p_reg->INTENCLR = mask;
   2ef3e:	480d      	ldr	r0, [pc, #52]	; (2ef74 <nrfx_twim_disable+0x6c>)
    p_cb->int_mask = 0;
   2ef40:	6099      	str	r1, [r3, #8]
   2ef42:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   2ef46:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   2ef4a:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   2ef4e:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2ef52:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2ef56:	2201      	movs	r2, #1
    p_cb->busy = false;
   2ef58:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2ef5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   2ef60:	bd70      	pop	{r4, r5, r6, pc}
   2ef62:	bf00      	nop
   2ef64:	20018704 	.word	0x20018704
   2ef68:	000452bc 	.word	0x000452bc
   2ef6c:	0004033e 	.word	0x0004033e
   2ef70:	00045515 	.word	0x00045515
   2ef74:	019c0202 	.word	0x019c0202

0002ef78 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   2ef78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2ef7c:	7903      	ldrb	r3, [r0, #4]
{
   2ef7e:	4604      	mov	r4, r0
   2ef80:	460d      	mov	r5, r1
   2ef82:	4617      	mov	r7, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2ef84:	b93b      	cbnz	r3, 2ef96 <nrfx_twim_xfer+0x1e>
   2ef86:	684b      	ldr	r3, [r1, #4]
   2ef88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2ef8c:	d203      	bcs.n	2ef96 <nrfx_twim_xfer+0x1e>
   2ef8e:	688b      	ldr	r3, [r1, #8]
   2ef90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2ef94:	d30b      	bcc.n	2efae <nrfx_twim_xfer+0x36>
   2ef96:	49c0      	ldr	r1, [pc, #768]	; (2f298 <nrfx_twim_xfer+0x320>)
   2ef98:	48c0      	ldr	r0, [pc, #768]	; (2f29c <nrfx_twim_xfer+0x324>)
   2ef9a:	f240 238a 	movw	r3, #650	; 0x28a
   2ef9e:	4ac0      	ldr	r2, [pc, #768]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2efa0:	f00a f8c7 	bl	39132 <printk>
   2efa4:	f240 218a 	movw	r1, #650	; 0x28a
   2efa8:	48bd      	ldr	r0, [pc, #756]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2efaa:	f00a fb61 	bl	39670 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2efae:	f04f 0834 	mov.w	r8, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2efb2:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2efb6:	4ebb      	ldr	r6, [pc, #748]	; (2f2a4 <nrfx_twim_xfer+0x32c>)
   2efb8:	fb08 f809 	mul.w	r8, r8, r9
   2efbc:	f856 3008 	ldr.w	r3, [r6, r8]
   2efc0:	bb13      	cbnz	r3, 2f008 <nrfx_twim_xfer+0x90>
   2efc2:	782b      	ldrb	r3, [r5, #0]
   2efc4:	2b02      	cmp	r3, #2
   2efc6:	d00f      	beq.n	2efe8 <nrfx_twim_xfer+0x70>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   2efc8:	782b      	ldrb	r3, [r5, #0]
   2efca:	2b03      	cmp	r3, #3
   2efcc:	d11c      	bne.n	2f008 <nrfx_twim_xfer+0x90>
   2efce:	f240 2393 	movw	r3, #659	; 0x293
   2efd2:	4ab3      	ldr	r2, [pc, #716]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2efd4:	49b4      	ldr	r1, [pc, #720]	; (2f2a8 <nrfx_twim_xfer+0x330>)
   2efd6:	48b1      	ldr	r0, [pc, #708]	; (2f29c <nrfx_twim_xfer+0x324>)
   2efd8:	f00a f8ab 	bl	39132 <printk>
   2efdc:	f240 2193 	movw	r1, #659	; 0x293
   2efe0:	48af      	ldr	r0, [pc, #700]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2efe2:	f00a fb45 	bl	39670 <assert_post_action>
   2efe6:	e00f      	b.n	2f008 <nrfx_twim_xfer+0x90>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   2efe8:	f240 2392 	movw	r3, #658	; 0x292
   2efec:	4aac      	ldr	r2, [pc, #688]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2efee:	49af      	ldr	r1, [pc, #700]	; (2f2ac <nrfx_twim_xfer+0x334>)
   2eff0:	48aa      	ldr	r0, [pc, #680]	; (2f29c <nrfx_twim_xfer+0x324>)
   2eff2:	f00a f89e 	bl	39132 <printk>
   2eff6:	f240 2192 	movw	r1, #658	; 0x292
   2effa:	48a9      	ldr	r0, [pc, #676]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2effc:	f00a fb38 	bl	39670 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   2f000:	f856 3008 	ldr.w	r3, [r6, r8]
   2f004:	2b00      	cmp	r3, #0
   2f006:	d0df      	beq.n	2efc8 <nrfx_twim_xfer+0x50>
    p_cb->error = false;
   2f008:	2334      	movs	r3, #52	; 0x34
   2f00a:	2200      	movs	r2, #0
   2f00c:	fb03 6309 	mla	r3, r3, r9, r6
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   2f010:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
   2f012:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   2f016:	686b      	ldr	r3, [r5, #4]
   2f018:	b153      	cbz	r3, 2f030 <nrfx_twim_xfer+0xb8>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2f01a:	68eb      	ldr	r3, [r5, #12]
   2f01c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   2f020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2f024:	d004      	beq.n	2f030 <nrfx_twim_xfer+0xb8>
        return err_code;
   2f026:	f8df 8298 	ldr.w	r8, [pc, #664]	; 2f2c0 <nrfx_twim_xfer+0x348>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2f02a:	4640      	mov	r0, r8
   2f02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   2f030:	f04f 0c34 	mov.w	ip, #52	; 0x34
   2f034:	fb0c 6c09 	mla	ip, ip, r9, r6
    p_reg->INTENCLR = mask;
   2f038:	4b9d      	ldr	r3, [pc, #628]	; (2f2b0 <nrfx_twim_xfer+0x338>)
   2f03a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   2f03e:	f89c 302f 	ldrb.w	r3, [ip, #47]	; 0x2f
   2f042:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   2f046:	b133      	cbz	r3, 2f056 <nrfx_twim_xfer+0xde>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2f048:	f8dc 3008 	ldr.w	r3, [ip, #8]
        return err_code;
   2f04c:	f8df 8274 	ldr.w	r8, [pc, #628]	; 2f2c4 <nrfx_twim_xfer+0x34c>
    p_reg->INTENSET = mask;
   2f050:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   2f054:	e7e9      	b.n	2f02a <nrfx_twim_xfer+0xb2>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   2f056:	f017 0f14 	tst.w	r7, #20
   2f05a:	bf0c      	ite	eq
   2f05c:	2301      	moveq	r3, #1
   2f05e:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   2f060:	46a8      	mov	r8, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   2f062:	f88c 302f 	strb.w	r3, [ip, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   2f066:	f10c 0e0c 	add.w	lr, ip, #12
   2f06a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   2f06e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   2f072:	f8d8 3000 	ldr.w	r3, [r8]
    p_cb->flags = flags;
   2f076:	f8cc 7020 	str.w	r7, [ip, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   2f07a:	f8ce 3000 	str.w	r3, [lr]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   2f07e:	f3c7 1300 	ubfx	r3, r7, #4, #1
   2f082:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   2f086:	786b      	ldrb	r3, [r5, #1]
   2f088:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f08c:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   2f090:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2f094:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   2f098:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2f09c:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   2f0a0:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   2f0a4:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   2f0a8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   2f0ac:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   2f0b0:	bf18      	it	ne
   2f0b2:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   2f0b4:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   2f0b8:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   2f0bc:	bf18      	it	ne
   2f0be:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   2f0c0:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   2f0c4:	782b      	ldrb	r3, [r5, #0]
   2f0c6:	2b03      	cmp	r3, #3
   2f0c8:	f200 80e2 	bhi.w	2f290 <nrfx_twim_xfer+0x318>
   2f0cc:	e8df f003 	tbb	[pc, r3]
   2f0d0:	0296cdb1 	.word	0x0296cdb1
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   2f0d4:	06f9      	lsls	r1, r7, #27
   2f0d6:	d50b      	bpl.n	2f0f0 <nrfx_twim_xfer+0x178>
   2f0d8:	4976      	ldr	r1, [pc, #472]	; (2f2b4 <nrfx_twim_xfer+0x33c>)
   2f0da:	4870      	ldr	r0, [pc, #448]	; (2f29c <nrfx_twim_xfer+0x324>)
   2f0dc:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   2f0e0:	4a6f      	ldr	r2, [pc, #444]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2f0e2:	f00a f826 	bl	39132 <printk>
   2f0e6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   2f0ea:	486d      	ldr	r0, [pc, #436]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2f0ec:	f00a fac0 	bl	39670 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   2f0f0:	073a      	lsls	r2, r7, #28
   2f0f2:	d50b      	bpl.n	2f10c <nrfx_twim_xfer+0x194>
   2f0f4:	4970      	ldr	r1, [pc, #448]	; (2f2b8 <nrfx_twim_xfer+0x340>)
   2f0f6:	4869      	ldr	r0, [pc, #420]	; (2f29c <nrfx_twim_xfer+0x324>)
   2f0f8:	f240 13cf 	movw	r3, #463	; 0x1cf
   2f0fc:	4a68      	ldr	r2, [pc, #416]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2f0fe:	f00a f818 	bl	39132 <printk>
   2f102:	f240 11cf 	movw	r1, #463	; 0x1cf
   2f106:	4866      	ldr	r0, [pc, #408]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2f108:	f00a fab2 	bl	39670 <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   2f10c:	077b      	lsls	r3, r7, #29
   2f10e:	d50b      	bpl.n	2f128 <nrfx_twim_xfer+0x1b0>
   2f110:	496a      	ldr	r1, [pc, #424]	; (2f2bc <nrfx_twim_xfer+0x344>)
   2f112:	4862      	ldr	r0, [pc, #392]	; (2f29c <nrfx_twim_xfer+0x324>)
   2f114:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   2f118:	4a61      	ldr	r2, [pc, #388]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2f11a:	f00a f80a 	bl	39132 <printk>
   2f11e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   2f122:	485f      	ldr	r0, [pc, #380]	; (2f2a0 <nrfx_twim_xfer+0x328>)
   2f124:	f00a faa4 	bl	39670 <assert_post_action>
   2f128:	692a      	ldr	r2, [r5, #16]
   2f12a:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2f12e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2f132:	f47f af78 	bne.w	2f026 <nrfx_twim_xfer+0xae>
    p_reg->SHORTS = mask;
   2f136:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f13a:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   2f13c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2f140:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f142:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f146:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f14a:	2300      	movs	r3, #0
   2f14c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   2f150:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f154:	2101      	movs	r1, #1
   2f156:	6221      	str	r1, [r4, #32]
   2f158:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f15a:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   2f15e:	2900      	cmp	r1, #0
   2f160:	d0fb      	beq.n	2f15a <nrfx_twim_xfer+0x1e2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f162:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   2f166:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   2f16a:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f16c:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f170:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   2f174:	2334      	movs	r3, #52	; 0x34
   2f176:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   2f17a:	fb03 6309 	mla	r3, r3, r9, r6
   2f17e:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   2f180:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   2f182:	f8df 8144 	ldr.w	r8, [pc, #324]	; 2f2c8 <nrfx_twim_xfer+0x350>
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   2f186:	0738      	lsls	r0, r7, #28
   2f188:	d407      	bmi.n	2f19a <nrfx_twim_xfer+0x222>
   2f18a:	782a      	ldrb	r2, [r5, #0]
   2f18c:	2a03      	cmp	r2, #3
   2f18e:	d004      	beq.n	2f19a <nrfx_twim_xfer+0x222>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f190:	2201      	movs	r2, #1
   2f192:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   2f194:	686b      	ldr	r3, [r5, #4]
   2f196:	b903      	cbnz	r3, 2f19a <nrfx_twim_xfer+0x222>
   2f198:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   2f19a:	2334      	movs	r3, #52	; 0x34
   2f19c:	fb03 f309 	mul.w	r3, r3, r9
   2f1a0:	18f2      	adds	r2, r6, r3
   2f1a2:	58f3      	ldr	r3, [r6, r3]
   2f1a4:	2b00      	cmp	r3, #0
   2f1a6:	f040 8093 	bne.w	2f2d0 <nrfx_twim_xfer+0x358>
                transmission_finished = true;
   2f1aa:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f1ac:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   2f1b0:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2f1b4:	2900      	cmp	r1, #0
   2f1b6:	f040 80a3 	bne.w	2f300 <nrfx_twim_xfer+0x388>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   2f1ba:	3a00      	subs	r2, #0
   2f1bc:	bf18      	it	ne
   2f1be:	2201      	movne	r2, #1
   2f1c0:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2f1c4:	2900      	cmp	r1, #0
   2f1c6:	f000 80a1 	beq.w	2f30c <nrfx_twim_xfer+0x394>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f1ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2f1ce:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f1d2:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   2f1d6:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   2f1da:	b110      	cbz	r0, 2f1e2 <nrfx_twim_xfer+0x26a>
   2f1dc:	f411 7f00 	tst.w	r1, #512	; 0x200
   2f1e0:	d104      	bne.n	2f1ec <nrfx_twim_xfer+0x274>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f1e2:	6225      	str	r5, [r4, #32]
   2f1e4:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   2f1e6:	2800      	cmp	r0, #0
   2f1e8:	d0e0      	beq.n	2f1ac <nrfx_twim_xfer+0x234>
                    transmission_finished = false;
   2f1ea:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   2f1ec:	05c9      	lsls	r1, r1, #23
   2f1ee:	f140 808d 	bpl.w	2f30c <nrfx_twim_xfer+0x394>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f1f2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   2f1f6:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   2f1fa:	e7d7      	b.n	2f1ac <nrfx_twim_xfer+0x234>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2f1fc:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f1fe:	68ea      	ldr	r2, [r5, #12]
   2f200:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f204:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   2f208:	692b      	ldr	r3, [r5, #16]
   2f20a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2f20e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   2f212:	f47f af08 	bne.w	2f026 <nrfx_twim_xfer+0xae>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   2f216:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2f218:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   2f21c:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   2f220:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   2f224:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2f228:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2f22a:	2202      	movs	r2, #2
   2f22c:	fb03 6309 	mla	r3, r3, r9, r6
   2f230:	e012      	b.n	2f258 <nrfx_twim_xfer+0x2e0>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2f232:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f234:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   2f236:	f017 0f20 	tst.w	r7, #32
   2f23a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f23e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   2f242:	f04f 0334 	mov.w	r3, #52	; 0x34
   2f246:	d00b      	beq.n	2f260 <nrfx_twim_xfer+0x2e8>
    p_reg->SHORTS = mask;
   2f248:	f44f 7280 	mov.w	r2, #256	; 0x100
   2f24c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   2f250:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   2f254:	fb03 6309 	mla	r3, r3, r9, r6
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2f258:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f25a:	2301      	movs	r3, #1
   2f25c:	6223      	str	r3, [r4, #32]
   2f25e:	e78f      	b.n	2f180 <nrfx_twim_xfer+0x208>
    p_reg->SHORTS = mask;
   2f260:	f44f 7200 	mov.w	r2, #512	; 0x200
   2f264:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   2f268:	e7df      	b.n	2f22a <nrfx_twim_xfer+0x2b2>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   2f26a:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2f26c:	68ea      	ldr	r2, [r5, #12]
   2f26e:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2f272:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   2f276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2f27a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2f27e:	2334      	movs	r3, #52	; 0x34
   2f280:	2202      	movs	r2, #2
   2f282:	fb03 6309 	mla	r3, r3, r9, r6
   2f286:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f288:	2301      	movs	r3, #1
   2f28a:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   2f28c:	2300      	movs	r3, #0
   2f28e:	e778      	b.n	2f182 <nrfx_twim_xfer+0x20a>
    switch (p_xfer_desc->type)
   2f290:	2308      	movs	r3, #8
   2f292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2f2cc <nrfx_twim_xfer+0x354>
   2f296:	e776      	b.n	2f186 <nrfx_twim_xfer+0x20e>
   2f298:	0004559a 	.word	0x0004559a
   2f29c:	0004033e 	.word	0x0004033e
   2f2a0:	00045515 	.word	0x00045515
   2f2a4:	20018704 	.word	0x20018704
   2f2a8:	00045695 	.word	0x00045695
   2f2ac:	00045645 	.word	0x00045645
   2f2b0:	019c0202 	.word	0x019c0202
   2f2b4:	000456e5 	.word	0x000456e5
   2f2b8:	000456fb 	.word	0x000456fb
   2f2bc:	00045711 	.word	0x00045711
   2f2c0:	0bad000a 	.word	0x0bad000a
   2f2c4:	0bad000b 	.word	0x0bad000b
   2f2c8:	0bad0000 	.word	0x0bad0000
   2f2cc:	0bad0004 	.word	0x0bad0004
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   2f2d0:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
   2f2d2:	bf44      	itt	mi
   2f2d4:	2300      	movmi	r3, #0
   2f2d6:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   2f2d8:	067b      	lsls	r3, r7, #25
   2f2da:	d406      	bmi.n	2f2ea <nrfx_twim_xfer+0x372>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   2f2dc:	2334      	movs	r3, #52	; 0x34
   2f2de:	fb03 6309 	mla	r3, r3, r9, r6
   2f2e2:	689a      	ldr	r2, [r3, #8]
   2f2e4:	f042 0202 	orr.w	r2, r2, #2
   2f2e8:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   2f2ea:	2334      	movs	r3, #52	; 0x34
   2f2ec:	fb03 6609 	mla	r6, r3, r9, r6
   2f2f0:	68b3      	ldr	r3, [r6, #8]
   2f2f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2f2f6:	60b3      	str	r3, [r6, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2f2f8:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   2f2fa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2f2fe:	e694      	b.n	2f02a <nrfx_twim_xfer+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f300:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   2f304:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   2f308:	2201      	movs	r2, #1
   2f30a:	e759      	b.n	2f1c0 <nrfx_twim_xfer+0x248>
        } while (!transmission_finished);
   2f30c:	2a00      	cmp	r2, #0
   2f30e:	f43f af4d 	beq.w	2f1ac <nrfx_twim_xfer+0x234>
        p_cb->busy = false;
   2f312:	2134      	movs	r1, #52	; 0x34
   2f314:	2000      	movs	r0, #0
   2f316:	fb01 6209 	mla	r2, r1, r9, r6
    uint32_t error_source = p_reg->ERRORSRC;
   2f31a:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   2f31e:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   2f322:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   2f326:	b18b      	cbz	r3, 2f34c <nrfx_twim_xfer+0x3d4>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   2f328:	4a0f      	ldr	r2, [pc, #60]	; (2f368 <nrfx_twim_xfer+0x3f0>)
   2f32a:	4910      	ldr	r1, [pc, #64]	; (2f36c <nrfx_twim_xfer+0x3f4>)
   2f32c:	f013 0f01 	tst.w	r3, #1
   2f330:	bf14      	ite	ne
   2f332:	4690      	movne	r8, r2
   2f334:	4688      	moveq	r8, r1
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   2f336:	3201      	adds	r2, #1
   2f338:	f013 0f02 	tst.w	r3, #2
   2f33c:	bf18      	it	ne
   2f33e:	4690      	movne	r8, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   2f340:	f013 0f04 	tst.w	r3, #4
   2f344:	4b0a      	ldr	r3, [pc, #40]	; (2f370 <nrfx_twim_xfer+0x3f8>)
   2f346:	bf18      	it	ne
   2f348:	4698      	movne	r8, r3
   2f34a:	e66e      	b.n	2f02a <nrfx_twim_xfer+0xb2>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   2f34c:	067b      	lsls	r3, r7, #25
   2f34e:	f53f ae6c 	bmi.w	2f02a <nrfx_twim_xfer+0xb2>
                !xfer_completeness_check(p_twim, p_cb))
   2f352:	4620      	mov	r0, r4
   2f354:	fb09 6101 	mla	r1, r9, r1, r6
   2f358:	f00d f9e3 	bl	3c722 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   2f35c:	4b03      	ldr	r3, [pc, #12]	; (2f36c <nrfx_twim_xfer+0x3f4>)
   2f35e:	2800      	cmp	r0, #0
   2f360:	bf08      	it	eq
   2f362:	4698      	moveq	r8, r3
   2f364:	e661      	b.n	2f02a <nrfx_twim_xfer+0xb2>
   2f366:	bf00      	nop
   2f368:	0bae0000 	.word	0x0bae0000
   2f36c:	0bad0001 	.word	0x0bad0001
   2f370:	0bae0002 	.word	0x0bae0002

0002f374 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   2f374:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   2f376:	4c62      	ldr	r4, [pc, #392]	; (2f500 <nrfx_twim_2_irq_handler+0x18c>)
{
   2f378:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   2f37a:	6823      	ldr	r3, [r4, #0]
   2f37c:	b95b      	cbnz	r3, 2f396 <nrfx_twim_2_irq_handler+0x22>
   2f37e:	4961      	ldr	r1, [pc, #388]	; (2f504 <nrfx_twim_2_irq_handler+0x190>)
   2f380:	4861      	ldr	r0, [pc, #388]	; (2f508 <nrfx_twim_2_irq_handler+0x194>)
   2f382:	f240 23cd 	movw	r3, #717	; 0x2cd
   2f386:	4a61      	ldr	r2, [pc, #388]	; (2f50c <nrfx_twim_2_irq_handler+0x198>)
   2f388:	f009 fed3 	bl	39132 <printk>
   2f38c:	f240 21cd 	movw	r1, #717	; 0x2cd
   2f390:	485e      	ldr	r0, [pc, #376]	; (2f50c <nrfx_twim_2_irq_handler+0x198>)
   2f392:	f00a f96d 	bl	39670 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f396:	4b5e      	ldr	r3, [pc, #376]	; (2f510 <nrfx_twim_2_irq_handler+0x19c>)
   2f398:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   2f39c:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   2f39e:	b1fa      	cbz	r2, 2f3e0 <nrfx_twim_2_irq_handler+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f3a0:	2200      	movs	r2, #0
   2f3a2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   2f3a6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f3aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2f3ae:	b9ba      	cbnz	r2, 2f3e0 <nrfx_twim_2_irq_handler+0x6c>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   2f3b0:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   2f3b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   2f3b6:	2202      	movs	r2, #2
   2f3b8:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2f3ba:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   2f3bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f3c0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   2f3c4:	b11a      	cbz	r2, 2f3ce <nrfx_twim_2_irq_handler+0x5a>
    return p_reg->SHORTS;
   2f3c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2f3ca:	059e      	lsls	r6, r3, #22
   2f3cc:	d403      	bmi.n	2f3d6 <nrfx_twim_2_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f3ce:	2201      	movs	r2, #1
   2f3d0:	4b4f      	ldr	r3, [pc, #316]	; (2f510 <nrfx_twim_2_irq_handler+0x19c>)
   2f3d2:	621a      	str	r2, [r3, #32]
   2f3d4:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   2f3d6:	2301      	movs	r3, #1
   2f3d8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   2f3dc:	b007      	add	sp, #28
   2f3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f3e0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   2f3e4:	2b00      	cmp	r3, #0
   2f3e6:	d054      	beq.n	2f492 <nrfx_twim_2_irq_handler+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f3e8:	2300      	movs	r3, #0
   2f3ea:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   2f3ee:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   2f3f2:	6a23      	ldr	r3, [r4, #32]
   2f3f4:	065d      	lsls	r5, r3, #25
   2f3f6:	d40a      	bmi.n	2f40e <nrfx_twim_2_irq_handler+0x9a>
   2f3f8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2f3fc:	b93b      	cbnz	r3, 2f40e <nrfx_twim_2_irq_handler+0x9a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   2f3fe:	4940      	ldr	r1, [pc, #256]	; (2f500 <nrfx_twim_2_irq_handler+0x18c>)
   2f400:	4843      	ldr	r0, [pc, #268]	; (2f510 <nrfx_twim_2_irq_handler+0x19c>)
   2f402:	f00d f98e 	bl	3c722 <xfer_completeness_check>
   2f406:	f080 0001 	eor.w	r0, r0, #1
   2f40a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   2f40e:	6a23      	ldr	r3, [r4, #32]
   2f410:	f013 0704 	ands.w	r7, r3, #4
   2f414:	d122      	bne.n	2f45c <nrfx_twim_2_irq_handler+0xe8>
            event.xfer_desc = p_cb->xfer_desc;
   2f416:	4e3f      	ldr	r6, [pc, #252]	; (2f514 <nrfx_twim_2_irq_handler+0x1a0>)
   2f418:	ad01      	add	r5, sp, #4
   2f41a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2f41c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2f41e:	6833      	ldr	r3, [r6, #0]
   2f420:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   2f424:	602b      	str	r3, [r5, #0]
   2f426:	4b3a      	ldr	r3, [pc, #232]	; (2f510 <nrfx_twim_2_irq_handler+0x19c>)
   2f428:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   2f42c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   2f430:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   2f434:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   2f438:	f1bc 0f00 	cmp.w	ip, #0
   2f43c:	d002      	beq.n	2f444 <nrfx_twim_2_irq_handler+0xd0>
   2f43e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   2f442:	b15a      	cbz	r2, 2f45c <nrfx_twim_2_irq_handler+0xe8>
    p_reg->SHORTS = mask;
   2f444:	2200      	movs	r2, #0
   2f446:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   2f44a:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   2f44c:	4a32      	ldr	r2, [pc, #200]	; (2f518 <nrfx_twim_2_irq_handler+0x1a4>)
   2f44e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   2f452:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2f456:	4b31      	ldr	r3, [pc, #196]	; (2f51c <nrfx_twim_2_irq_handler+0x1a8>)
   2f458:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   2f45c:	4a2c      	ldr	r2, [pc, #176]	; (2f510 <nrfx_twim_2_irq_handler+0x19c>)
   2f45e:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   2f462:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   2f464:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   2f468:	d53c      	bpl.n	2f4e4 <nrfx_twim_2_irq_handler+0x170>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   2f46a:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   2f46c:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   2f470:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2f474:	b90b      	cbnz	r3, 2f47a <nrfx_twim_2_irq_handler+0x106>
        p_cb->busy = false;
   2f476:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   2f47a:	6a23      	ldr	r3, [r4, #32]
   2f47c:	075b      	lsls	r3, r3, #29
   2f47e:	d503      	bpl.n	2f488 <nrfx_twim_2_irq_handler+0x114>
   2f480:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2f484:	2b00      	cmp	r3, #0
   2f486:	d0a9      	beq.n	2f3dc <nrfx_twim_2_irq_handler+0x68>
        p_cb->handler(&event, p_cb->p_context);
   2f488:	e9d4 3100 	ldrd	r3, r1, [r4]
   2f48c:	4668      	mov	r0, sp
   2f48e:	4798      	blx	r3
}
   2f490:	e7a4      	b.n	2f3dc <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f492:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   2f496:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   2f49a:	7b23      	ldrb	r3, [r4, #12]
   2f49c:	b983      	cbnz	r3, 2f4c0 <nrfx_twim_2_irq_handler+0x14c>
            event.xfer_desc = p_cb->xfer_desc;
   2f49e:	4f1d      	ldr	r7, [pc, #116]	; (2f514 <nrfx_twim_2_irq_handler+0x1a0>)
   2f4a0:	ae01      	add	r6, sp, #4
   2f4a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2f4a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2f4a6:	683b      	ldr	r3, [r7, #0]
   2f4a8:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   2f4aa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2f4ae:	2b00      	cmp	r3, #0
   2f4b0:	d1d4      	bne.n	2f45c <nrfx_twim_2_irq_handler+0xe8>
    p_reg->SHORTS = mask;
   2f4b2:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   2f4b6:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2f4b8:	4b17      	ldr	r3, [pc, #92]	; (2f518 <nrfx_twim_2_irq_handler+0x1a4>)
   2f4ba:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   2f4be:	e7c8      	b.n	2f452 <nrfx_twim_2_irq_handler+0xde>
    p_reg->SHORTS = mask;
   2f4c0:	f44f 7300 	mov.w	r3, #512	; 0x200
   2f4c4:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   2f4c8:	f240 2302 	movw	r3, #514	; 0x202
   2f4cc:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   2f4ce:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   2f4d2:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2f4d6:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   2f4d8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f4dc:	2301      	movs	r3, #1
   2f4de:	60ab      	str	r3, [r5, #8]
   2f4e0:	622b      	str	r3, [r5, #32]
            return;
   2f4e2:	e77b      	b.n	2f3dc <nrfx_twim_2_irq_handler+0x68>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   2f4e4:	0759      	lsls	r1, r3, #29
   2f4e6:	d501      	bpl.n	2f4ec <nrfx_twim_2_irq_handler+0x178>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   2f4e8:	2302      	movs	r3, #2
   2f4ea:	e7bf      	b.n	2f46c <nrfx_twim_2_irq_handler+0xf8>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   2f4ec:	07da      	lsls	r2, r3, #31
   2f4ee:	d501      	bpl.n	2f4f4 <nrfx_twim_2_irq_handler+0x180>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   2f4f0:	2303      	movs	r3, #3
   2f4f2:	e7bb      	b.n	2f46c <nrfx_twim_2_irq_handler+0xf8>
    else if (p_cb->error)
   2f4f4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   2f4f8:	2b00      	cmp	r3, #0
   2f4fa:	d0b7      	beq.n	2f46c <nrfx_twim_2_irq_handler+0xf8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   2f4fc:	2304      	movs	r3, #4
   2f4fe:	e7b5      	b.n	2f46c <nrfx_twim_2_irq_handler+0xf8>
   2f500:	20018704 	.word	0x20018704
   2f504:	00045507 	.word	0x00045507
   2f508:	0004033e 	.word	0x0004033e
   2f50c:	00045515 	.word	0x00045515
   2f510:	4000a000 	.word	0x4000a000
   2f514:	20018710 	.word	0x20018710
   2f518:	019c0202 	.word	0x019c0202
   2f51c:	e000e100 	.word	0xe000e100

0002f520 <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   2f520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f524:	4604      	mov	r4, r0
   2f526:	4690      	mov	r8, r2
    NRFX_ASSERT(p_config);
   2f528:	460d      	mov	r5, r1
   2f52a:	b949      	cbnz	r1, 2f540 <nrfx_wdt_init+0x20>
   2f52c:	4922      	ldr	r1, [pc, #136]	; (2f5b8 <nrfx_wdt_init+0x98>)
   2f52e:	4823      	ldr	r0, [pc, #140]	; (2f5bc <nrfx_wdt_init+0x9c>)
   2f530:	233f      	movs	r3, #63	; 0x3f
   2f532:	4a23      	ldr	r2, [pc, #140]	; (2f5c0 <nrfx_wdt_init+0xa0>)
   2f534:	f009 fdfd 	bl	39132 <printk>
   2f538:	213f      	movs	r1, #63	; 0x3f
   2f53a:	4821      	ldr	r0, [pc, #132]	; (2f5c0 <nrfx_wdt_init+0xa0>)
   2f53c:	f00a f898 	bl	39670 <assert_post_action>
    nrfx_err_t err_code;

    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2f540:	7922      	ldrb	r2, [r4, #4]

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   2f542:	4b20      	ldr	r3, [pc, #128]	; (2f5c4 <nrfx_wdt_init+0xa4>)
   2f544:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   2f548:	f8c1 8004 	str.w	r8, [r1, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   2f54c:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   2f550:	bb79      	cbnz	r1, 2f5b2 <nrfx_wdt_init+0x92>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2f552:	2001      	movs	r0, #1
   2f554:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
    p_reg->CONFIG = behaviour;
   2f558:	782a      	ldrb	r2, [r5, #0]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   2f55a:	6823      	ldr	r3, [r4, #0]
   2f55c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   2f560:	686b      	ldr	r3, [r5, #4]
   2f562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f566:	0c5f      	lsrs	r7, r3, #17
   2f568:	03de      	lsls	r6, r3, #15
   2f56a:	4630      	mov	r0, r6
   2f56c:	2300      	movs	r3, #0
   2f56e:	4639      	mov	r1, r7
   2f570:	f7ed fc9a 	bl	1cea8 <__aeabi_uldivmod>
    NRFX_ASSERT(ticks <= UINT32_MAX);
   2f574:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   2f578:	bf08      	it	eq
   2f57a:	2e00      	cmpeq	r6, #0
    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   2f57c:	4605      	mov	r5, r0
    NRFX_ASSERT(ticks <= UINT32_MAX);
   2f57e:	d309      	bcc.n	2f594 <nrfx_wdt_init+0x74>
   2f580:	4911      	ldr	r1, [pc, #68]	; (2f5c8 <nrfx_wdt_init+0xa8>)
   2f582:	480e      	ldr	r0, [pc, #56]	; (2f5bc <nrfx_wdt_init+0x9c>)
   2f584:	235a      	movs	r3, #90	; 0x5a
   2f586:	4a0e      	ldr	r2, [pc, #56]	; (2f5c0 <nrfx_wdt_init+0xa0>)
   2f588:	f009 fdd3 	bl	39132 <printk>
   2f58c:	215a      	movs	r1, #90	; 0x5a
   2f58e:	480c      	ldr	r0, [pc, #48]	; (2f5c0 <nrfx_wdt_init+0xa0>)
   2f590:	f00a f86e 	bl	39670 <assert_post_action>

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);
   2f594:	6820      	ldr	r0, [r4, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   2f596:	f8c0 5504 	str.w	r5, [r0, #1284]	; 0x504

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   2f59a:	f1b8 0f00 	cmp.w	r8, #0
   2f59e:	d006      	beq.n	2f5ae <nrfx_wdt_init+0x8e>
    p_reg->INTENSET = mask;
   2f5a0:	2201      	movs	r2, #1
   2f5a2:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2f5a6:	f340 3007 	sbfx	r0, r0, #12, #8
   2f5aa:	f7f3 fe0f 	bl	231cc <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   2f5ae:	4807      	ldr	r0, [pc, #28]	; (2f5cc <nrfx_wdt_init+0xac>)
   2f5b0:	e000      	b.n	2f5b4 <nrfx_wdt_init+0x94>
        return err_code;
   2f5b2:	4807      	ldr	r0, [pc, #28]	; (2f5d0 <nrfx_wdt_init+0xb0>)
}
   2f5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f5b8:	00045068 	.word	0x00045068
   2f5bc:	0004033e 	.word	0x0004033e
   2f5c0:	00045727 	.word	0x00045727
   2f5c4:	20018738 	.word	0x20018738
   2f5c8:	00045762 	.word	0x00045762
   2f5cc:	0bad0000 	.word	0x0bad0000
   2f5d0:	0bad0005 	.word	0x0bad0005

0002f5d4 <nrfx_wdt_enable>:


void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
   2f5d4:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
   2f5d6:	4c13      	ldr	r4, [pc, #76]	; (2f624 <nrfx_wdt_enable+0x50>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2f5d8:	7906      	ldrb	r6, [r0, #4]
{
   2f5da:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->alloc_index != 0);
   2f5dc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   2f5e0:	785b      	ldrb	r3, [r3, #1]
   2f5e2:	b94b      	cbnz	r3, 2f5f8 <nrfx_wdt_enable+0x24>
   2f5e4:	4910      	ldr	r1, [pc, #64]	; (2f628 <nrfx_wdt_enable+0x54>)
   2f5e6:	4811      	ldr	r0, [pc, #68]	; (2f62c <nrfx_wdt_enable+0x58>)
   2f5e8:	2370      	movs	r3, #112	; 0x70
   2f5ea:	4a11      	ldr	r2, [pc, #68]	; (2f630 <nrfx_wdt_enable+0x5c>)
   2f5ec:	f009 fda1 	bl	39132 <printk>
   2f5f0:	2170      	movs	r1, #112	; 0x70
   2f5f2:	480f      	ldr	r0, [pc, #60]	; (2f630 <nrfx_wdt_enable+0x5c>)
   2f5f4:	f00a f83c 	bl	39670 <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2f5f8:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   2f5fc:	2b01      	cmp	r3, #1
   2f5fe:	d009      	beq.n	2f614 <nrfx_wdt_enable+0x40>
   2f600:	490c      	ldr	r1, [pc, #48]	; (2f634 <nrfx_wdt_enable+0x60>)
   2f602:	480a      	ldr	r0, [pc, #40]	; (2f62c <nrfx_wdt_enable+0x58>)
   2f604:	2371      	movs	r3, #113	; 0x71
   2f606:	4a0a      	ldr	r2, [pc, #40]	; (2f630 <nrfx_wdt_enable+0x5c>)
   2f608:	f009 fd93 	bl	39132 <printk>
   2f60c:	2171      	movs	r1, #113	; 0x71
   2f60e:	4808      	ldr	r0, [pc, #32]	; (2f630 <nrfx_wdt_enable+0x5c>)
   2f610:	f00a f82e 	bl	39670 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   2f614:	2201      	movs	r2, #1
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   2f616:	682b      	ldr	r3, [r5, #0]
   2f618:	601a      	str	r2, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2f61a:	2302      	movs	r3, #2
   2f61c:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   2f620:	bd70      	pop	{r4, r5, r6, pc}
   2f622:	bf00      	nop
   2f624:	20018738 	.word	0x20018738
   2f628:	00045778 	.word	0x00045778
   2f62c:	0004033e 	.word	0x0004033e
   2f630:	00045727 	.word	0x00045727
   2f634:	00045570 	.word	0x00045570

0002f638 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   2f638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f63a:	4605      	mov	r5, r0
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    NRFX_ASSERT(p_channel_id);
   2f63c:	460e      	mov	r6, r1
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2f63e:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_channel_id);
   2f640:	b949      	cbnz	r1, 2f656 <nrfx_wdt_channel_alloc+0x1e>
   2f642:	491c      	ldr	r1, [pc, #112]	; (2f6b4 <nrfx_wdt_channel_alloc+0x7c>)
   2f644:	481c      	ldr	r0, [pc, #112]	; (2f6b8 <nrfx_wdt_channel_alloc+0x80>)
   2f646:	2387      	movs	r3, #135	; 0x87
   2f648:	4a1c      	ldr	r2, [pc, #112]	; (2f6bc <nrfx_wdt_channel_alloc+0x84>)
   2f64a:	f009 fd72 	bl	39132 <printk>
   2f64e:	2187      	movs	r1, #135	; 0x87
   2f650:	481a      	ldr	r0, [pc, #104]	; (2f6bc <nrfx_wdt_channel_alloc+0x84>)
   2f652:	f00a f80d 	bl	39670 <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   2f656:	4c1a      	ldr	r4, [pc, #104]	; (2f6c0 <nrfx_wdt_channel_alloc+0x88>)
   2f658:	f814 2037 	ldrb.w	r2, [r4, r7, lsl #3]
   2f65c:	2a01      	cmp	r2, #1
   2f65e:	d009      	beq.n	2f674 <nrfx_wdt_channel_alloc+0x3c>
   2f660:	4918      	ldr	r1, [pc, #96]	; (2f6c4 <nrfx_wdt_channel_alloc+0x8c>)
   2f662:	4815      	ldr	r0, [pc, #84]	; (2f6b8 <nrfx_wdt_channel_alloc+0x80>)
   2f664:	2388      	movs	r3, #136	; 0x88
   2f666:	4a15      	ldr	r2, [pc, #84]	; (2f6bc <nrfx_wdt_channel_alloc+0x84>)
   2f668:	f009 fd63 	bl	39132 <printk>
   2f66c:	2188      	movs	r1, #136	; 0x88
   2f66e:	4813      	ldr	r0, [pc, #76]	; (2f6bc <nrfx_wdt_channel_alloc+0x84>)
   2f670:	f009 fffe 	bl	39670 <assert_post_action>
	__asm__ volatile(
   2f674:	f04f 0320 	mov.w	r3, #32
   2f678:	f3ef 8c11 	mrs	ip, BASEPRI
   2f67c:	f383 8811 	msr	BASEPRI, r3
   2f680:	f3bf 8f6f 	isb	sy

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   2f684:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
   2f688:	785a      	ldrb	r2, [r3, #1]
   2f68a:	2a07      	cmp	r2, #7
   2f68c:	d810      	bhi.n	2f6b0 <nrfx_wdt_channel_alloc+0x78>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
        p_cb->alloc_index++;
   2f68e:	1c51      	adds	r1, r2, #1
   2f690:	7059      	strb	r1, [r3, #1]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   2f692:	2301      	movs	r3, #1
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   2f694:	7032      	strb	r2, [r6, #0]
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   2f696:	6829      	ldr	r1, [r5, #0]
   2f698:	4093      	lsls	r3, r2
   2f69a:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
   2f69e:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   2f6a0:	4809      	ldr	r0, [pc, #36]	; (2f6c8 <nrfx_wdt_channel_alloc+0x90>)
   2f6a2:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   2f6a6:	f38c 8811 	msr	BASEPRI, ip
   2f6aa:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   2f6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result = NRFX_ERROR_NO_MEM;
   2f6b0:	4806      	ldr	r0, [pc, #24]	; (2f6cc <nrfx_wdt_channel_alloc+0x94>)
   2f6b2:	e7f8      	b.n	2f6a6 <nrfx_wdt_channel_alloc+0x6e>
   2f6b4:	0004578f 	.word	0x0004578f
   2f6b8:	0004033e 	.word	0x0004033e
   2f6bc:	00045727 	.word	0x00045727
   2f6c0:	20018738 	.word	0x20018738
   2f6c4:	00045570 	.word	0x00045570
   2f6c8:	0bad0000 	.word	0x0bad0000
   2f6cc:	0bad0002 	.word	0x0bad0002

0002f6d0 <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
   2f6d0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   2f6d2:	4b0c      	ldr	r3, [pc, #48]	; (2f704 <nrfx_wdt_channel_feed+0x34>)
   2f6d4:	7902      	ldrb	r2, [r0, #4]
{
   2f6d6:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   2f6d8:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
{
   2f6dc:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   2f6de:	2b02      	cmp	r3, #2
   2f6e0:	d009      	beq.n	2f6f6 <nrfx_wdt_channel_feed+0x26>
   2f6e2:	4909      	ldr	r1, [pc, #36]	; (2f708 <nrfx_wdt_channel_feed+0x38>)
   2f6e4:	4809      	ldr	r0, [pc, #36]	; (2f70c <nrfx_wdt_channel_feed+0x3c>)
   2f6e6:	239d      	movs	r3, #157	; 0x9d
   2f6e8:	4a09      	ldr	r2, [pc, #36]	; (2f710 <nrfx_wdt_channel_feed+0x40>)
   2f6ea:	f009 fd22 	bl	39132 <printk>
   2f6ee:	219d      	movs	r1, #157	; 0x9d
   2f6f0:	4807      	ldr	r0, [pc, #28]	; (2f710 <nrfx_wdt_channel_feed+0x40>)
   2f6f2:	f009 ffbd 	bl	39670 <assert_post_action>
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   2f6f6:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   2f6f8:	4a06      	ldr	r2, [pc, #24]	; (2f714 <nrfx_wdt_channel_feed+0x44>)
   2f6fa:	f504 74c0 	add.w	r4, r4, #384	; 0x180
   2f6fe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   2f702:	bd38      	pop	{r3, r4, r5, pc}
   2f704:	20018738 	.word	0x20018738
   2f708:	0004579c 	.word	0x0004579c
   2f70c:	0004033e 	.word	0x0004033e
   2f710:	00045727 	.word	0x00045727
   2f714:	6e524635 	.word	0x6e524635

0002f718 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   2f718:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   2f71a:	4c05      	ldr	r4, [pc, #20]	; (2f730 <nrfx_wdt_0_irq_handler+0x18>)
   2f71c:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   2f71e:	b12b      	cbz	r3, 2f72c <nrfx_wdt_0_irq_handler+0x14>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   2f720:	4b04      	ldr	r3, [pc, #16]	; (2f734 <nrfx_wdt_0_irq_handler+0x1c>)
   2f722:	685b      	ldr	r3, [r3, #4]
   2f724:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f726:	2300      	movs	r3, #0
   2f728:	6023      	str	r3, [r4, #0]
   2f72a:	6823      	ldr	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   2f72c:	bd10      	pop	{r4, pc}
   2f72e:	bf00      	nop
   2f730:	40018100 	.word	0x40018100
   2f734:	20018738 	.word	0x20018738

0002f738 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2f738:	6803      	ldr	r3, [r0, #0]
{
   2f73a:	b510      	push	{r4, lr}
    switch (port)
   2f73c:	095a      	lsrs	r2, r3, #5
   2f73e:	bf0c      	ite	eq
   2f740:	f04f 32ff 	moveq.w	r2, #4294967295
   2f744:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   2f746:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2f74a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2f74e:	07db      	lsls	r3, r3, #31
{
   2f750:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2f752:	d40b      	bmi.n	2f76c <nrf_gpio_pin_port_decode+0x34>
   2f754:	490f      	ldr	r1, [pc, #60]	; (2f794 <nrf_gpio_pin_port_decode+0x5c>)
   2f756:	4810      	ldr	r0, [pc, #64]	; (2f798 <nrf_gpio_pin_port_decode+0x60>)
   2f758:	f44f 7305 	mov.w	r3, #532	; 0x214
   2f75c:	4a0f      	ldr	r2, [pc, #60]	; (2f79c <nrf_gpio_pin_port_decode+0x64>)
   2f75e:	f009 fce8 	bl	39132 <printk>
   2f762:	f44f 7105 	mov.w	r1, #532	; 0x214
   2f766:	480d      	ldr	r0, [pc, #52]	; (2f79c <nrf_gpio_pin_port_decode+0x64>)
   2f768:	f009 ff82 	bl	39670 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2f76c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2f76e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f772:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2f774:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f776:	d00b      	beq.n	2f790 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   2f778:	4909      	ldr	r1, [pc, #36]	; (2f7a0 <nrf_gpio_pin_port_decode+0x68>)
   2f77a:	4807      	ldr	r0, [pc, #28]	; (2f798 <nrf_gpio_pin_port_decode+0x60>)
   2f77c:	f240 2319 	movw	r3, #537	; 0x219
   2f780:	4a06      	ldr	r2, [pc, #24]	; (2f79c <nrf_gpio_pin_port_decode+0x64>)
   2f782:	f009 fcd6 	bl	39132 <printk>
   2f786:	f240 2119 	movw	r1, #537	; 0x219
   2f78a:	4804      	ldr	r0, [pc, #16]	; (2f79c <nrf_gpio_pin_port_decode+0x64>)
   2f78c:	f009 ff70 	bl	39670 <assert_post_action>
}
   2f790:	4804      	ldr	r0, [pc, #16]	; (2f7a4 <nrf_gpio_pin_port_decode+0x6c>)
   2f792:	bd10      	pop	{r4, pc}
   2f794:	000419c8 	.word	0x000419c8
   2f798:	0004033e 	.word	0x0004033e
   2f79c:	00041995 	.word	0x00041995
   2f7a0:	000451fc 	.word	0x000451fc
   2f7a4:	40842500 	.word	0x40842500

0002f7a8 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   2f7a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2f7aa:	460c      	mov	r4, r1
   2f7ac:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   2f7ae:	f00c ffe8 	bl	3c782 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   2f7b2:	4620      	mov	r0, r4
   2f7b4:	f00c ffe5 	bl	3c782 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f7b8:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   2f7ba:	f240 650d 	movw	r5, #1549	; 0x60d
   2f7be:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f7c0:	f7ff ffba 	bl	2f738 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2f7c4:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2f7c6:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   2f7c8:	3380      	adds	r3, #128	; 0x80
   2f7ca:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f7ce:	a801      	add	r0, sp, #4
   2f7d0:	9401      	str	r4, [sp, #4]
   2f7d2:	f7ff ffb1 	bl	2f738 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2f7d6:	9b01      	ldr	r3, [sp, #4]
   2f7d8:	3380      	adds	r3, #128	; 0x80
   2f7da:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   2f7de:	2004      	movs	r0, #4
   2f7e0:	f00c ff59 	bl	3c696 <nrfx_busy_wait>
   2f7e4:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f7e6:	a801      	add	r0, sp, #4
   2f7e8:	9401      	str	r4, [sp, #4]
   2f7ea:	f7ff ffa5 	bl	2f738 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2f7ee:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   2f7f0:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2f7f2:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   2f7f4:	07db      	lsls	r3, r3, #31
   2f7f6:	d414      	bmi.n	2f822 <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f7f8:	a801      	add	r0, sp, #4
   2f7fa:	9601      	str	r6, [sp, #4]
   2f7fc:	f7ff ff9c 	bl	2f738 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2f800:	9b01      	ldr	r3, [sp, #4]
   2f802:	3d01      	subs	r5, #1
   2f804:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   2f808:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   2f80a:	2004      	movs	r0, #4
   2f80c:	f00c ff43 	bl	3c696 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   2f810:	4630      	mov	r0, r6
   2f812:	f00c ffb6 	bl	3c782 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   2f816:	2004      	movs	r0, #4
   2f818:	f00c ff3d 	bl	3c696 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   2f81c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   2f820:	d1e1      	bne.n	2f7e6 <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f822:	a801      	add	r0, sp, #4
   2f824:	9401      	str	r4, [sp, #4]
   2f826:	f7ff ff87 	bl	2f738 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2f82a:	2301      	movs	r3, #1
   2f82c:	9a01      	ldr	r2, [sp, #4]
   2f82e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2f830:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   2f832:	2004      	movs	r0, #4
   2f834:	f00c ff2f 	bl	3c696 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   2f838:	4620      	mov	r0, r4
   2f83a:	f00c ffa2 	bl	3c782 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   2f83e:	2004      	movs	r0, #4
   2f840:	f00c ff29 	bl	3c696 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f844:	a801      	add	r0, sp, #4
   2f846:	9401      	str	r4, [sp, #4]
   2f848:	f7ff ff76 	bl	2f738 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2f84c:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   2f84e:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   2f850:	4803      	ldr	r0, [pc, #12]	; (2f860 <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2f852:	40d3      	lsrs	r3, r2
   2f854:	f003 0301 	and.w	r3, r3, #1
   2f858:	1ac0      	subs	r0, r0, r3
   2f85a:	b003      	add	sp, #12
   2f85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f85e:	bf00      	nop
   2f860:	0bad0001 	.word	0x0bad0001

0002f864 <rpc_handle_data_message>:
   2f864:	6803      	ldr	r3, [r0, #0]
   2f866:	b510      	push	{r4, lr}
   2f868:	b29b      	uxth	r3, r3
   2f86a:	2b04      	cmp	r3, #4
   2f86c:	d009      	beq.n	2f882 <rpc_handle_data_message+0x1e>
   2f86e:	2b03      	cmp	r3, #3
   2f870:	d010      	beq.n	2f894 <rpc_handle_data_message+0x30>
   2f872:	2b06      	cmp	r3, #6
   2f874:	d010      	beq.n	2f898 <rpc_handle_data_message+0x34>
   2f876:	2b07      	cmp	r3, #7
   2f878:	d010      	beq.n	2f89c <rpc_handle_data_message+0x38>
   2f87a:	6880      	ldr	r0, [r0, #8]
   2f87c:	b980      	cbnz	r0, 2f8a0 <rpc_handle_data_message+0x3c>
   2f87e:	2000      	movs	r0, #0
   2f880:	bd10      	pop	{r4, pc}
   2f882:	2300      	movs	r3, #0
   2f884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f888:	4a07      	ldr	r2, [pc, #28]	; (2f8a8 <rpc_handle_data_message+0x44>)
   2f88a:	2100      	movs	r1, #0
   2f88c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   2f890:	685b      	ldr	r3, [r3, #4]
   2f892:	4718      	bx	r3
   2f894:	2301      	movs	r3, #1
   2f896:	e7f5      	b.n	2f884 <rpc_handle_data_message+0x20>
   2f898:	2302      	movs	r3, #2
   2f89a:	e7f3      	b.n	2f884 <rpc_handle_data_message+0x20>
   2f89c:	2303      	movs	r3, #3
   2f89e:	e7f1      	b.n	2f884 <rpc_handle_data_message+0x20>
   2f8a0:	f00c ffc5 	bl	3c82e <rpc_transport_data_free>
   2f8a4:	e7eb      	b.n	2f87e <rpc_handle_data_message+0x1a>
   2f8a6:	bf00      	nop
   2f8a8:	00040014 	.word	0x00040014

0002f8ac <ipc_trace_init>:
   2f8ac:	4b01      	ldr	r3, [pc, #4]	; (2f8b4 <ipc_trace_init+0x8>)
   2f8ae:	6018      	str	r0, [r3, #0]
   2f8b0:	4770      	bx	lr
   2f8b2:	bf00      	nop
   2f8b4:	2001874c 	.word	0x2001874c

0002f8b8 <nrf_modem_os_trace_irq_handler>:
   2f8b8:	b508      	push	{r3, lr}
   2f8ba:	4b11      	ldr	r3, [pc, #68]	; (2f900 <nrf_modem_os_trace_irq_handler+0x48>)
   2f8bc:	781b      	ldrb	r3, [r3, #0]
   2f8be:	b90b      	cbnz	r3, 2f8c4 <nrf_modem_os_trace_irq_handler+0xc>
   2f8c0:	f7f7 fc88 	bl	271d4 <nrf_modem_os_trace_irq_clear>
   2f8c4:	4b0f      	ldr	r3, [pc, #60]	; (2f904 <nrf_modem_os_trace_irq_handler+0x4c>)
   2f8c6:	6818      	ldr	r0, [r3, #0]
   2f8c8:	b128      	cbz	r0, 2f8d6 <nrf_modem_os_trace_irq_handler+0x1e>
   2f8ca:	6882      	ldr	r2, [r0, #8]
   2f8cc:	6843      	ldr	r3, [r0, #4]
   2f8ce:	429a      	cmp	r2, r3
   2f8d0:	d001      	beq.n	2f8d6 <nrf_modem_os_trace_irq_handler+0x1e>
   2f8d2:	f00c ffb0 	bl	3c836 <trace_write>
   2f8d6:	4b0c      	ldr	r3, [pc, #48]	; (2f908 <nrf_modem_os_trace_irq_handler+0x50>)
   2f8d8:	6818      	ldr	r0, [r3, #0]
   2f8da:	b128      	cbz	r0, 2f8e8 <nrf_modem_os_trace_irq_handler+0x30>
   2f8dc:	6882      	ldr	r2, [r0, #8]
   2f8de:	6843      	ldr	r3, [r0, #4]
   2f8e0:	429a      	cmp	r2, r3
   2f8e2:	d001      	beq.n	2f8e8 <nrf_modem_os_trace_irq_handler+0x30>
   2f8e4:	f00c ffa7 	bl	3c836 <trace_write>
   2f8e8:	4b08      	ldr	r3, [pc, #32]	; (2f90c <nrf_modem_os_trace_irq_handler+0x54>)
   2f8ea:	6818      	ldr	r0, [r3, #0]
   2f8ec:	b138      	cbz	r0, 2f8fe <nrf_modem_os_trace_irq_handler+0x46>
   2f8ee:	6882      	ldr	r2, [r0, #8]
   2f8f0:	6843      	ldr	r3, [r0, #4]
   2f8f2:	429a      	cmp	r2, r3
   2f8f4:	d003      	beq.n	2f8fe <nrf_modem_os_trace_irq_handler+0x46>
   2f8f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2f8fa:	f00c bf9c 	b.w	3c836 <trace_write>
   2f8fe:	bd08      	pop	{r3, pc}
   2f900:	2001d697 	.word	0x2001d697
   2f904:	20018748 	.word	0x20018748
   2f908:	20018740 	.word	0x20018740
   2f90c:	20018744 	.word	0x20018744

0002f910 <ipc_trace_handle>:
   2f910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f914:	4b43      	ldr	r3, [pc, #268]	; (2fa24 <ipc_trace_handle+0x114>)
   2f916:	681b      	ldr	r3, [r3, #0]
   2f918:	6919      	ldr	r1, [r3, #16]
   2f91a:	f8d3 b014 	ldr.w	fp, [r3, #20]
   2f91e:	7c1a      	ldrb	r2, [r3, #16]
   2f920:	2200      	movs	r2, #0
   2f922:	741a      	strb	r2, [r3, #16]
   2f924:	7c58      	ldrb	r0, [r3, #17]
   2f926:	745a      	strb	r2, [r3, #17]
   2f928:	7c98      	ldrb	r0, [r3, #18]
   2f92a:	749a      	strb	r2, [r3, #18]
   2f92c:	7cd8      	ldrb	r0, [r3, #19]
   2f92e:	74da      	strb	r2, [r3, #19]
   2f930:	7d18      	ldrb	r0, [r3, #20]
   2f932:	751a      	strb	r2, [r3, #20]
   2f934:	7d58      	ldrb	r0, [r3, #21]
   2f936:	755a      	strb	r2, [r3, #21]
   2f938:	7d98      	ldrb	r0, [r3, #22]
   2f93a:	759a      	strb	r2, [r3, #22]
   2f93c:	7dd8      	ldrb	r0, [r3, #23]
   2f93e:	75da      	strb	r2, [r3, #23]
   2f940:	2900      	cmp	r1, #0
   2f942:	d037      	beq.n	2f9b4 <ipc_trace_handle+0xa4>
   2f944:	3901      	subs	r1, #1
   2f946:	2903      	cmp	r1, #3
   2f948:	d834      	bhi.n	2f9b4 <ipc_trace_handle+0xa4>
   2f94a:	e8df f001 	tbb	[pc, r1]
   2f94e:	6502      	.short	0x6502
   2f950:	534c      	.short	0x534c
   2f952:	4a35      	ldr	r2, [pc, #212]	; (2fa28 <ipc_trace_handle+0x118>)
   2f954:	7811      	ldrb	r1, [r2, #0]
   2f956:	b109      	cbz	r1, 2f95c <ipc_trace_handle+0x4c>
   2f958:	2100      	movs	r1, #0
   2f95a:	7011      	strb	r1, [r2, #0]
   2f95c:	f8db 2008 	ldr.w	r2, [fp, #8]
   2f960:	4f32      	ldr	r7, [pc, #200]	; (2fa2c <ipc_trace_handle+0x11c>)
   2f962:	9201      	str	r2, [sp, #4]
   2f964:	2200      	movs	r2, #0
   2f966:	4691      	mov	r9, r2
   2f968:	4615      	mov	r5, r2
   2f96a:	4611      	mov	r1, r2
   2f96c:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 2fa30 <ipc_trace_handle+0x120>
   2f970:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 2fa34 <ipc_trace_handle+0x124>
   2f974:	f8d7 c000 	ldr.w	ip, [r7]
   2f978:	f8de 8000 	ldr.w	r8, [lr]
   2f97c:	f8da 4000 	ldr.w	r4, [sl]
   2f980:	9801      	ldr	r0, [sp, #4]
   2f982:	4288      	cmp	r0, r1
   2f984:	d119      	bne.n	2f9ba <ipc_trace_handle+0xaa>
   2f986:	b10d      	cbz	r5, 2f98c <ipc_trace_handle+0x7c>
   2f988:	f8ca 4000 	str.w	r4, [sl]
   2f98c:	f1b9 0f00 	cmp.w	r9, #0
   2f990:	d001      	beq.n	2f996 <ipc_trace_handle+0x86>
   2f992:	f8ce 8000 	str.w	r8, [lr]
   2f996:	b10a      	cbz	r2, 2f99c <ipc_trace_handle+0x8c>
   2f998:	f8c7 c000 	str.w	ip, [r7]
   2f99c:	7a1a      	ldrb	r2, [r3, #8]
   2f99e:	2101      	movs	r1, #1
   2f9a0:	2200      	movs	r2, #0
   2f9a2:	7219      	strb	r1, [r3, #8]
   2f9a4:	7a59      	ldrb	r1, [r3, #9]
   2f9a6:	725a      	strb	r2, [r3, #9]
   2f9a8:	7a99      	ldrb	r1, [r3, #10]
   2f9aa:	729a      	strb	r2, [r3, #10]
   2f9ac:	7ada      	ldrb	r2, [r3, #11]
   2f9ae:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   2f9b2:	72da      	strb	r2, [r3, #11]
   2f9b4:	b003      	add	sp, #12
   2f9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f9ba:	1c88      	adds	r0, r1, #2
   2f9bc:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   2f9c0:	6840      	ldr	r0, [r0, #4]
   2f9c2:	7806      	ldrb	r6, [r0, #0]
   2f9c4:	2e62      	cmp	r6, #98	; 0x62
   2f9c6:	d007      	beq.n	2f9d8 <ipc_trace_handle+0xc8>
   2f9c8:	2e63      	cmp	r6, #99	; 0x63
   2f9ca:	d009      	beq.n	2f9e0 <ipc_trace_handle+0xd0>
   2f9cc:	2e61      	cmp	r6, #97	; 0x61
   2f9ce:	bf04      	itt	eq
   2f9d0:	4604      	moveq	r4, r0
   2f9d2:	2501      	moveq	r5, #1
   2f9d4:	3101      	adds	r1, #1
   2f9d6:	e7d3      	b.n	2f980 <ipc_trace_handle+0x70>
   2f9d8:	4680      	mov	r8, r0
   2f9da:	f04f 0901 	mov.w	r9, #1
   2f9de:	e7f9      	b.n	2f9d4 <ipc_trace_handle+0xc4>
   2f9e0:	4684      	mov	ip, r0
   2f9e2:	2201      	movs	r2, #1
   2f9e4:	e7f6      	b.n	2f9d4 <ipc_trace_handle+0xc4>
   2f9e6:	2101      	movs	r1, #1
   2f9e8:	4a0f      	ldr	r2, [pc, #60]	; (2fa28 <ipc_trace_handle+0x118>)
   2f9ea:	7011      	strb	r1, [r2, #0]
   2f9ec:	7a1a      	ldrb	r2, [r3, #8]
   2f9ee:	2103      	movs	r1, #3
   2f9f0:	2200      	movs	r2, #0
   2f9f2:	e7d6      	b.n	2f9a2 <ipc_trace_handle+0x92>
   2f9f4:	7a19      	ldrb	r1, [r3, #8]
   2f9f6:	2104      	movs	r1, #4
   2f9f8:	7219      	strb	r1, [r3, #8]
   2f9fa:	7a59      	ldrb	r1, [r3, #9]
   2f9fc:	725a      	strb	r2, [r3, #9]
   2f9fe:	7a99      	ldrb	r1, [r3, #10]
   2fa00:	729a      	strb	r2, [r3, #10]
   2fa02:	7ad9      	ldrb	r1, [r3, #11]
   2fa04:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   2fa08:	72d9      	strb	r1, [r3, #11]
   2fa0a:	4b07      	ldr	r3, [pc, #28]	; (2fa28 <ipc_trace_handle+0x118>)
   2fa0c:	701a      	strb	r2, [r3, #0]
   2fa0e:	b003      	add	sp, #12
   2fa10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fa14:	f7ff bf50 	b.w	2f8b8 <nrf_modem_os_trace_irq_handler>
   2fa18:	b003      	add	sp, #12
   2fa1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fa1e:	f7f7 bbd1 	b.w	271c4 <nrf_modem_os_trace_irq_set>
   2fa22:	bf00      	nop
   2fa24:	2001874c 	.word	0x2001874c
   2fa28:	2001d697 	.word	0x2001d697
   2fa2c:	20018744 	.word	0x20018744
   2fa30:	20018740 	.word	0x20018740
   2fa34:	20018748 	.word	0x20018748

0002fa38 <rpc_trace_coredump_in_progress>:
   2fa38:	4b01      	ldr	r3, [pc, #4]	; (2fa40 <rpc_trace_coredump_in_progress+0x8>)
   2fa3a:	7818      	ldrb	r0, [r3, #0]
   2fa3c:	4770      	bx	lr
   2fa3e:	bf00      	nop
   2fa40:	2001d697 	.word	0x2001d697

0002fa44 <handle_modem_rpc_msg>:
   2fa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fa48:	4606      	mov	r6, r0
   2fa4a:	460f      	mov	r7, r1
   2fa4c:	2500      	movs	r5, #0
   2fa4e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2fac4 <handle_modem_rpc_msg+0x80>
   2fa52:	6833      	ldr	r3, [r6, #0]
   2fa54:	42ab      	cmp	r3, r5
   2fa56:	d801      	bhi.n	2fa5c <handle_modem_rpc_msg+0x18>
   2fa58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fa5c:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   2fa60:	68a3      	ldr	r3, [r4, #8]
   2fa62:	b1fb      	cbz	r3, 2faa4 <handle_modem_rpc_msg+0x60>
   2fa64:	6863      	ldr	r3, [r4, #4]
   2fa66:	b2db      	uxtb	r3, r3
   2fa68:	2b01      	cmp	r3, #1
   2fa6a:	d11b      	bne.n	2faa4 <handle_modem_rpc_msg+0x60>
   2fa6c:	6862      	ldr	r2, [r4, #4]
   2fa6e:	f8b8 3000 	ldrh.w	r3, [r8]
   2fa72:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2fa76:	d115      	bne.n	2faa4 <handle_modem_rpc_msg+0x60>
   2fa78:	2f02      	cmp	r7, #2
   2fa7a:	68a0      	ldr	r0, [r4, #8]
   2fa7c:	d114      	bne.n	2faa8 <handle_modem_rpc_msg+0x64>
   2fa7e:	f7ff fef1 	bl	2f864 <rpc_handle_data_message>
   2fa82:	2802      	cmp	r0, #2
   2fa84:	d00e      	beq.n	2faa4 <handle_modem_rpc_msg+0x60>
   2fa86:	2801      	cmp	r0, #1
   2fa88:	d113      	bne.n	2fab2 <handle_modem_rpc_msg+0x6e>
   2fa8a:	6863      	ldr	r3, [r4, #4]
   2fa8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2fa90:	f043 0302 	orr.w	r3, r3, #2
   2fa94:	6063      	str	r3, [r4, #4]
   2fa96:	f8b8 3000 	ldrh.w	r3, [r8]
   2fa9a:	3301      	adds	r3, #1
   2fa9c:	f8a8 3000 	strh.w	r3, [r8]
   2faa0:	f7f7 fb80 	bl	271a4 <nrf_modem_os_application_irq_set>
   2faa4:	3501      	adds	r5, #1
   2faa6:	e7d4      	b.n	2fa52 <handle_modem_rpc_msg+0xe>
   2faa8:	6801      	ldr	r1, [r0, #0]
   2faaa:	0c09      	lsrs	r1, r1, #16
   2faac:	f00c fe75 	bl	3c79a <rpc_handle_ctrl_message>
   2fab0:	e7e7      	b.n	2fa82 <handle_modem_rpc_msg+0x3e>
   2fab2:	2800      	cmp	r0, #0
   2fab4:	d1ef      	bne.n	2fa96 <handle_modem_rpc_msg+0x52>
   2fab6:	6863      	ldr	r3, [r4, #4]
   2fab8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2fabc:	f043 0303 	orr.w	r3, r3, #3
   2fac0:	e7e8      	b.n	2fa94 <handle_modem_rpc_msg+0x50>
   2fac2:	bf00      	nop
   2fac4:	2001ca48 	.word	0x2001ca48

0002fac8 <rpc_transport_ipc_data_msg_send>:
   2fac8:	4b11      	ldr	r3, [pc, #68]	; (2fb10 <rpc_transport_ipc_data_msg_send+0x48>)
   2faca:	b530      	push	{r4, r5, lr}
   2facc:	7819      	ldrb	r1, [r3, #0]
   2face:	b9e1      	cbnz	r1, 2fb0a <rpc_transport_ipc_data_msg_send+0x42>
   2fad0:	4b10      	ldr	r3, [pc, #64]	; (2fb14 <rpc_transport_ipc_data_msg_send+0x4c>)
   2fad2:	4a11      	ldr	r2, [pc, #68]	; (2fb18 <rpc_transport_ipc_data_msg_send+0x50>)
   2fad4:	681b      	ldr	r3, [r3, #0]
   2fad6:	6812      	ldr	r2, [r2, #0]
   2fad8:	1ac3      	subs	r3, r0, r3
   2fada:	f3c3 1389 	ubfx	r3, r3, #6, #10
   2fade:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2fae2:	4d0e      	ldr	r5, [pc, #56]	; (2fb1c <rpc_transport_ipc_data_msg_send+0x54>)
   2fae4:	685a      	ldr	r2, [r3, #4]
   2fae6:	882c      	ldrh	r4, [r5, #0]
   2fae8:	b292      	uxth	r2, r2
   2faea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   2faee:	605a      	str	r2, [r3, #4]
   2faf0:	685a      	ldr	r2, [r3, #4]
   2faf2:	4608      	mov	r0, r1
   2faf4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2faf8:	f042 0201 	orr.w	r2, r2, #1
   2fafc:	605a      	str	r2, [r3, #4]
   2fafe:	2201      	movs	r2, #1
   2fb00:	4b07      	ldr	r3, [pc, #28]	; (2fb20 <rpc_transport_ipc_data_msg_send+0x58>)
   2fb02:	3401      	adds	r4, #1
   2fb04:	802c      	strh	r4, [r5, #0]
   2fb06:	60da      	str	r2, [r3, #12]
   2fb08:	bd30      	pop	{r4, r5, pc}
   2fb0a:	f04f 30ff 	mov.w	r0, #4294967295
   2fb0e:	e7fb      	b.n	2fb08 <rpc_transport_ipc_data_msg_send+0x40>
   2fb10:	2001d699 	.word	0x2001d699
   2fb14:	20018768 	.word	0x20018768
   2fb18:	2001876c 	.word	0x2001876c
   2fb1c:	2001ca4a 	.word	0x2001ca4a
   2fb20:	4002a000 	.word	0x4002a000

0002fb24 <rpc_transport_ipc_ctrl_msg_send>:
   2fb24:	4b0e      	ldr	r3, [pc, #56]	; (2fb60 <rpc_transport_ipc_ctrl_msg_send+0x3c>)
   2fb26:	490f      	ldr	r1, [pc, #60]	; (2fb64 <rpc_transport_ipc_ctrl_msg_send+0x40>)
   2fb28:	681b      	ldr	r3, [r3, #0]
   2fb2a:	880a      	ldrh	r2, [r1, #0]
   2fb2c:	1ac0      	subs	r0, r0, r3
   2fb2e:	f3c0 1389 	ubfx	r3, r0, #6, #10
   2fb32:	480d      	ldr	r0, [pc, #52]	; (2fb68 <rpc_transport_ipc_ctrl_msg_send+0x44>)
   2fb34:	6800      	ldr	r0, [r0, #0]
   2fb36:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2fb3a:	6843      	ldr	r3, [r0, #4]
   2fb3c:	b29b      	uxth	r3, r3
   2fb3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2fb42:	3201      	adds	r2, #1
   2fb44:	800a      	strh	r2, [r1, #0]
   2fb46:	2201      	movs	r2, #1
   2fb48:	6043      	str	r3, [r0, #4]
   2fb4a:	6843      	ldr	r3, [r0, #4]
   2fb4c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2fb50:	f043 0301 	orr.w	r3, r3, #1
   2fb54:	6043      	str	r3, [r0, #4]
   2fb56:	4b05      	ldr	r3, [pc, #20]	; (2fb6c <rpc_transport_ipc_ctrl_msg_send+0x48>)
   2fb58:	2000      	movs	r0, #0
   2fb5a:	605a      	str	r2, [r3, #4]
   2fb5c:	4770      	bx	lr
   2fb5e:	bf00      	nop
   2fb60:	20018760 	.word	0x20018760
   2fb64:	2001ca4a 	.word	0x2001ca4a
   2fb68:	20018764 	.word	0x20018764
   2fb6c:	4002a000 	.word	0x4002a000

0002fb70 <rpc_transport_ipc_data_msg_alloc>:
   2fb70:	4b05      	ldr	r3, [pc, #20]	; (2fb88 <rpc_transport_ipc_data_msg_alloc+0x18>)
   2fb72:	781b      	ldrb	r3, [r3, #0]
   2fb74:	b933      	cbnz	r3, 2fb84 <rpc_transport_ipc_data_msg_alloc+0x14>
   2fb76:	4b05      	ldr	r3, [pc, #20]	; (2fb8c <rpc_transport_ipc_data_msg_alloc+0x1c>)
   2fb78:	2202      	movs	r2, #2
   2fb7a:	6819      	ldr	r1, [r3, #0]
   2fb7c:	4b04      	ldr	r3, [pc, #16]	; (2fb90 <rpc_transport_ipc_data_msg_alloc+0x20>)
   2fb7e:	6818      	ldr	r0, [r3, #0]
   2fb80:	f00c be9b 	b.w	3c8ba <rpc_transport_ipc_msg_alloc>
   2fb84:	2000      	movs	r0, #0
   2fb86:	4770      	bx	lr
   2fb88:	2001d699 	.word	0x2001d699
   2fb8c:	20018768 	.word	0x20018768
   2fb90:	2001876c 	.word	0x2001876c

0002fb94 <rpc_transport_ipc_ctrl_msg_alloc>:
   2fb94:	4b03      	ldr	r3, [pc, #12]	; (2fba4 <rpc_transport_ipc_ctrl_msg_alloc+0x10>)
   2fb96:	2201      	movs	r2, #1
   2fb98:	6819      	ldr	r1, [r3, #0]
   2fb9a:	4b03      	ldr	r3, [pc, #12]	; (2fba8 <rpc_transport_ipc_ctrl_msg_alloc+0x14>)
   2fb9c:	6818      	ldr	r0, [r3, #0]
   2fb9e:	f00c be8c 	b.w	3c8ba <rpc_transport_ipc_msg_alloc>
   2fba2:	bf00      	nop
   2fba4:	20018760 	.word	0x20018760
   2fba8:	20018764 	.word	0x20018764

0002fbac <rpc_transport_ipc_data_alloc>:
   2fbac:	4b03      	ldr	r3, [pc, #12]	; (2fbbc <rpc_transport_ipc_data_alloc+0x10>)
   2fbae:	781b      	ldrb	r3, [r3, #0]
   2fbb0:	b90b      	cbnz	r3, 2fbb6 <rpc_transport_ipc_data_alloc+0xa>
   2fbb2:	f7f7 bb25 	b.w	27200 <nrf_modem_os_shm_tx_alloc>
   2fbb6:	2000      	movs	r0, #0
   2fbb8:	4770      	bx	lr
   2fbba:	bf00      	nop
   2fbbc:	2001d699 	.word	0x2001d699

0002fbc0 <nrf_modem_os_application_irq_handler>:
   2fbc0:	b510      	push	{r4, lr}
   2fbc2:	4c06      	ldr	r4, [pc, #24]	; (2fbdc <nrf_modem_os_application_irq_handler+0x1c>)
   2fbc4:	f7f7 faf6 	bl	271b4 <nrf_modem_os_application_irq_clear>
   2fbc8:	6820      	ldr	r0, [r4, #0]
   2fbca:	2101      	movs	r1, #1
   2fbcc:	f7ff ff3a 	bl	2fa44 <handle_modem_rpc_msg>
   2fbd0:	6860      	ldr	r0, [r4, #4]
   2fbd2:	2102      	movs	r1, #2
   2fbd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fbd8:	f7ff bf34 	b.w	2fa44 <handle_modem_rpc_msg>
   2fbdc:	20018754 	.word	0x20018754

0002fbe0 <rpc_transport_ipc_msg_free>:
   2fbe0:	2300      	movs	r3, #0
   2fbe2:	4911      	ldr	r1, [pc, #68]	; (2fc28 <rpc_transport_ipc_msg_free+0x48>)
   2fbe4:	b530      	push	{r4, r5, lr}
   2fbe6:	680a      	ldr	r2, [r1, #0]
   2fbe8:	6814      	ldr	r4, [r2, #0]
   2fbea:	42a3      	cmp	r3, r4
   2fbec:	d10b      	bne.n	2fc06 <rpc_transport_ipc_msg_free+0x26>
   2fbee:	2300      	movs	r3, #0
   2fbf0:	684a      	ldr	r2, [r1, #4]
   2fbf2:	6811      	ldr	r1, [r2, #0]
   2fbf4:	428b      	cmp	r3, r1
   2fbf6:	d015      	beq.n	2fc24 <rpc_transport_ipc_msg_free+0x44>
   2fbf8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   2fbfc:	68a4      	ldr	r4, [r4, #8]
   2fbfe:	42a0      	cmp	r0, r4
   2fc00:	d008      	beq.n	2fc14 <rpc_transport_ipc_msg_free+0x34>
   2fc02:	3301      	adds	r3, #1
   2fc04:	e7f6      	b.n	2fbf4 <rpc_transport_ipc_msg_free+0x14>
   2fc06:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   2fc0a:	68ad      	ldr	r5, [r5, #8]
   2fc0c:	42a8      	cmp	r0, r5
   2fc0e:	d001      	beq.n	2fc14 <rpc_transport_ipc_msg_free+0x34>
   2fc10:	3301      	adds	r3, #1
   2fc12:	e7ea      	b.n	2fbea <rpc_transport_ipc_msg_free+0xa>
   2fc14:	00db      	lsls	r3, r3, #3
   2fc16:	3304      	adds	r3, #4
   2fc18:	58d1      	ldr	r1, [r2, r3]
   2fc1a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   2fc1e:	f041 0103 	orr.w	r1, r1, #3
   2fc22:	50d1      	str	r1, [r2, r3]
   2fc24:	bd30      	pop	{r4, r5, pc}
   2fc26:	bf00      	nop
   2fc28:	20018754 	.word	0x20018754

0002fc2c <rpc_transport_ipc_data_free>:
   2fc2c:	4b0d      	ldr	r3, [pc, #52]	; (2fc64 <rpc_transport_ipc_data_free+0x38>)
   2fc2e:	b510      	push	{r4, lr}
   2fc30:	681b      	ldr	r3, [r3, #0]
   2fc32:	4604      	mov	r4, r0
   2fc34:	4298      	cmp	r0, r3
   2fc36:	d30a      	bcc.n	2fc4e <rpc_transport_ipc_data_free+0x22>
   2fc38:	4b0b      	ldr	r3, [pc, #44]	; (2fc68 <rpc_transport_ipc_data_free+0x3c>)
   2fc3a:	681b      	ldr	r3, [r3, #0]
   2fc3c:	4298      	cmp	r0, r3
   2fc3e:	d206      	bcs.n	2fc4e <rpc_transport_ipc_data_free+0x22>
   2fc40:	f7ff ffa8 	bl	2fb94 <rpc_transport_ipc_ctrl_msg_alloc>
   2fc44:	b938      	cbnz	r0, 2fc56 <rpc_transport_ipc_data_free+0x2a>
   2fc46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fc4a:	f7f7 baab 	b.w	271a4 <nrf_modem_os_application_irq_set>
   2fc4e:	4620      	mov	r0, r4
   2fc50:	f7f7 fade 	bl	27210 <nrf_modem_os_shm_tx_free>
   2fc54:	e7f7      	b.n	2fc46 <rpc_transport_ipc_data_free+0x1a>
   2fc56:	4a05      	ldr	r2, [pc, #20]	; (2fc6c <rpc_transport_ipc_data_free+0x40>)
   2fc58:	6084      	str	r4, [r0, #8]
   2fc5a:	6002      	str	r2, [r0, #0]
   2fc5c:	f7ff ff62 	bl	2fb24 <rpc_transport_ipc_ctrl_msg_send>
   2fc60:	e7f1      	b.n	2fc46 <rpc_transport_ipc_data_free+0x1a>
   2fc62:	bf00      	nop
   2fc64:	20018774 	.word	0x20018774
   2fc68:	20018770 	.word	0x20018770
   2fc6c:	00020001 	.word	0x00020001

0002fc70 <rpc_transport_ipc_init>:
   2fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc74:	2200      	movs	r2, #0
   2fc76:	b095      	sub	sp, #84	; 0x54
   2fc78:	4605      	mov	r5, r0
   2fc7a:	494f      	ldr	r1, [pc, #316]	; (2fdb8 <rpc_transport_ipc_init+0x148>)
   2fc7c:	7900      	ldrb	r0, [r0, #4]
   2fc7e:	f7fe fa99 	bl	2e1b4 <nrfx_ipc_init>
   2fc82:	2238      	movs	r2, #56	; 0x38
   2fc84:	2100      	movs	r1, #0
   2fc86:	a803      	add	r0, sp, #12
   2fc88:	f00e f98f 	bl	3dfaa <memset>
   2fc8c:	2302      	movs	r3, #2
   2fc8e:	9304      	str	r3, [sp, #16]
   2fc90:	2308      	movs	r3, #8
   2fc92:	9306      	str	r3, [sp, #24]
   2fc94:	2320      	movs	r3, #32
   2fc96:	9308      	str	r3, [sp, #32]
   2fc98:	2301      	movs	r3, #1
   2fc9a:	930b      	str	r3, [sp, #44]	; 0x2c
   2fc9c:	2304      	movs	r3, #4
   2fc9e:	930d      	str	r3, [sp, #52]	; 0x34
   2fca0:	2310      	movs	r3, #16
   2fca2:	f04f 0c40 	mov.w	ip, #64	; 0x40
   2fca6:	930f      	str	r3, [sp, #60]	; 0x3c
   2fca8:	2380      	movs	r3, #128	; 0x80
   2fcaa:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   2fcae:	23d5      	movs	r3, #213	; 0xd5
   2fcb0:	a803      	add	r0, sp, #12
   2fcb2:	9313      	str	r3, [sp, #76]	; 0x4c
   2fcb4:	f7fe faa6 	bl	2e204 <nrfx_ipc_config_load>
   2fcb8:	682b      	ldr	r3, [r5, #0]
   2fcba:	2100      	movs	r1, #0
   2fcbc:	685a      	ldr	r2, [r3, #4]
   2fcbe:	6818      	ldr	r0, [r3, #0]
   2fcc0:	f00e f973 	bl	3dfaa <memset>
   2fcc4:	682a      	ldr	r2, [r5, #0]
   2fcc6:	6814      	ldr	r4, [r2, #0]
   2fcc8:	69d3      	ldr	r3, [r2, #28]
   2fcca:	f104 0660 	add.w	r6, r4, #96	; 0x60
   2fcce:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   2fcd2:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   2fcd6:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   2fcda:	f104 0920 	add.w	r9, r4, #32
   2fcde:	2b00      	cmp	r3, #0
   2fce0:	d05c      	beq.n	2fd9c <rpc_transport_ipc_init+0x12c>
   2fce2:	f104 0840 	add.w	r8, r4, #64	; 0x40
   2fce6:	4935      	ldr	r1, [pc, #212]	; (2fdbc <rpc_transport_ipc_init+0x14c>)
   2fce8:	f8c1 9000 	str.w	r9, [r1]
   2fcec:	b13b      	cbz	r3, 2fcfe <rpc_transport_ipc_init+0x8e>
   2fcee:	6992      	ldr	r2, [r2, #24]
   2fcf0:	4640      	mov	r0, r8
   2fcf2:	f8c8 2004 	str.w	r2, [r8, #4]
   2fcf6:	f8c8 3000 	str.w	r3, [r8]
   2fcfa:	f7ff fdd7 	bl	2f8ac <ipc_trace_init>
   2fcfe:	6828      	ldr	r0, [r5, #0]
   2fd00:	4d2f      	ldr	r5, [pc, #188]	; (2fdc0 <rpc_transport_ipc_init+0x150>)
   2fd02:	2300      	movs	r3, #0
   2fd04:	602f      	str	r7, [r5, #0]
   2fd06:	4d2f      	ldr	r5, [pc, #188]	; (2fdc4 <rpc_transport_ipc_init+0x154>)
   2fd08:	2101      	movs	r1, #1
   2fd0a:	602e      	str	r6, [r5, #0]
   2fd0c:	2508      	movs	r5, #8
   2fd0e:	6902      	ldr	r2, [r0, #16]
   2fd10:	6940      	ldr	r0, [r0, #20]
   2fd12:	7023      	strb	r3, [r4, #0]
   2fd14:	7063      	strb	r3, [r4, #1]
   2fd16:	70e3      	strb	r3, [r4, #3]
   2fd18:	70a1      	strb	r1, [r4, #2]
   2fd1a:	6062      	str	r2, [r4, #4]
   2fd1c:	60a0      	str	r0, [r4, #8]
   2fd1e:	60e6      	str	r6, [r4, #12]
   2fd20:	6127      	str	r7, [r4, #16]
   2fd22:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
   2fd26:	f8c4 9014 	str.w	r9, [r4, #20]
   2fd2a:	f8c4 8018 	str.w	r8, [r4, #24]
   2fd2e:	707b      	strb	r3, [r7, #1]
   2fd30:	70bb      	strb	r3, [r7, #2]
   2fd32:	70fb      	strb	r3, [r7, #3]
   2fd34:	2714      	movs	r7, #20
   2fd36:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
   2fd3a:	4d23      	ldr	r5, [pc, #140]	; (2fdc8 <rpc_transport_ipc_init+0x158>)
   2fd3c:	7073      	strb	r3, [r6, #1]
   2fd3e:	f8c5 b000 	str.w	fp, [r5]
   2fd42:	4d22      	ldr	r5, [pc, #136]	; (2fdcc <rpc_transport_ipc_init+0x15c>)
   2fd44:	70b3      	strb	r3, [r6, #2]
   2fd46:	f8c5 a000 	str.w	sl, [r5]
   2fd4a:	4d21      	ldr	r5, [pc, #132]	; (2fdd0 <rpc_transport_ipc_init+0x160>)
   2fd4c:	70f3      	strb	r3, [r6, #3]
   2fd4e:	602a      	str	r2, [r5, #0]
   2fd50:	4402      	add	r2, r0
   2fd52:	4820      	ldr	r0, [pc, #128]	; (2fdd4 <rpc_transport_ipc_init+0x164>)
   2fd54:	4e20      	ldr	r6, [pc, #128]	; (2fdd8 <rpc_transport_ipc_init+0x168>)
   2fd56:	6002      	str	r2, [r0, #0]
   2fd58:	4a20      	ldr	r2, [pc, #128]	; (2fddc <rpc_transport_ipc_init+0x16c>)
   2fd5a:	4d21      	ldr	r5, [pc, #132]	; (2fde0 <rpc_transport_ipc_init+0x170>)
   2fd5c:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   2fd60:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   2fd64:	4c1f      	ldr	r4, [pc, #124]	; (2fde4 <rpc_transport_ipc_init+0x174>)
   2fd66:	4a20      	ldr	r2, [pc, #128]	; (2fde8 <rpc_transport_ipc_init+0x178>)
   2fd68:	6023      	str	r3, [r4, #0]
   2fd6a:	9302      	str	r3, [sp, #8]
   2fd6c:	7031      	strb	r1, [r6, #0]
   2fd6e:	6113      	str	r3, [r2, #16]
   2fd70:	6913      	ldr	r3, [r2, #16]
   2fd72:	9302      	str	r3, [sp, #8]
   2fd74:	9b02      	ldr	r3, [sp, #8]
   2fd76:	7833      	ldrb	r3, [r6, #0]
   2fd78:	2b01      	cmp	r3, #1
   2fd7a:	d103      	bne.n	2fd84 <rpc_transport_ipc_init+0x114>
   2fd7c:	b985      	cbnz	r5, 2fda0 <rpc_transport_ipc_init+0x130>
   2fd7e:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   2fd82:	6023      	str	r3, [r4, #0]
   2fd84:	6824      	ldr	r4, [r4, #0]
   2fd86:	b9a4      	cbnz	r4, 2fdb2 <rpc_transport_ipc_init+0x142>
   2fd88:	4b18      	ldr	r3, [pc, #96]	; (2fdec <rpc_transport_ipc_init+0x17c>)
   2fd8a:	701c      	strb	r4, [r3, #0]
   2fd8c:	4b18      	ldr	r3, [pc, #96]	; (2fdf0 <rpc_transport_ipc_init+0x180>)
   2fd8e:	801c      	strh	r4, [r3, #0]
   2fd90:	4b18      	ldr	r3, [pc, #96]	; (2fdf4 <rpc_transport_ipc_init+0x184>)
   2fd92:	801c      	strh	r4, [r3, #0]
   2fd94:	4620      	mov	r0, r4
   2fd96:	b015      	add	sp, #84	; 0x54
   2fd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd9c:	4698      	mov	r8, r3
   2fd9e:	e7a2      	b.n	2fce6 <rpc_transport_ipc_init+0x76>
   2fda0:	2000      	movs	r0, #0
   2fda2:	a901      	add	r1, sp, #4
   2fda4:	9701      	str	r7, [sp, #4]
   2fda6:	f7f6 ffb3 	bl	26d10 <nrf_modem_os_timedwait>
   2fdaa:	9b01      	ldr	r3, [sp, #4]
   2fdac:	3b14      	subs	r3, #20
   2fdae:	441d      	add	r5, r3
   2fdb0:	e7e1      	b.n	2fd76 <rpc_transport_ipc_init+0x106>
   2fdb2:	f7fe fa6b 	bl	2e28c <nrfx_ipc_uninit>
   2fdb6:	e7ed      	b.n	2fd94 <rpc_transport_ipc_init+0x124>
   2fdb8:	0002fdf9 	.word	0x0002fdf9
   2fdbc:	2001875c 	.word	0x2001875c
   2fdc0:	2001876c 	.word	0x2001876c
   2fdc4:	20018764 	.word	0x20018764
   2fdc8:	20018768 	.word	0x20018768
   2fdcc:	20018760 	.word	0x20018760
   2fdd0:	20018774 	.word	0x20018774
   2fdd4:	20018770 	.word	0x20018770
   2fdd8:	2001d698 	.word	0x2001d698
   2fddc:	4002a000 	.word	0x4002a000
   2fde0:	000249f0 	.word	0x000249f0
   2fde4:	20018750 	.word	0x20018750
   2fde8:	40005600 	.word	0x40005600
   2fdec:	2001d699 	.word	0x2001d699
   2fdf0:	2001ca4a 	.word	0x2001ca4a
   2fdf4:	2001ca48 	.word	0x2001ca48

0002fdf8 <ipc_irq_handler>:
   2fdf8:	b538      	push	{r3, r4, r5, lr}
   2fdfa:	4604      	mov	r4, r0
   2fdfc:	0620      	lsls	r0, r4, #24
   2fdfe:	d50c      	bpl.n	2fe1a <ipc_irq_handler+0x22>
   2fe00:	f7ff fd86 	bl	2f910 <ipc_trace_handle>
   2fe04:	f7ff fe18 	bl	2fa38 <rpc_trace_coredump_in_progress>
   2fe08:	b138      	cbz	r0, 2fe1a <ipc_irq_handler+0x22>
   2fe0a:	22e0      	movs	r2, #224	; 0xe0
   2fe0c:	4b3f      	ldr	r3, [pc, #252]	; (2ff0c <ipc_irq_handler+0x114>)
   2fe0e:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   2fe12:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2fe16:	605a      	str	r2, [r3, #4]
   2fe18:	bd38      	pop	{r3, r4, r5, pc}
   2fe1a:	07e1      	lsls	r1, r4, #31
   2fe1c:	d548      	bpl.n	2feb0 <ipc_irq_handler+0xb8>
   2fe1e:	f248 0202 	movw	r2, #32770	; 0x8002
   2fe22:	4b3b      	ldr	r3, [pc, #236]	; (2ff10 <ipc_irq_handler+0x118>)
   2fe24:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   2fe28:	4293      	cmp	r3, r2
   2fe2a:	d035      	beq.n	2fe98 <ipc_irq_handler+0xa0>
   2fe2c:	d81b      	bhi.n	2fe66 <ipc_irq_handler+0x6e>
   2fe2e:	f243 0232 	movw	r2, #12338	; 0x3032
   2fe32:	4293      	cmp	r3, r2
   2fe34:	d036      	beq.n	2fea4 <ipc_irq_handler+0xac>
   2fe36:	d80b      	bhi.n	2fe50 <ipc_irq_handler+0x58>
   2fe38:	3b01      	subs	r3, #1
   2fe3a:	2b01      	cmp	r3, #1
   2fe3c:	d8ec      	bhi.n	2fe18 <ipc_irq_handler+0x20>
   2fe3e:	2203      	movs	r2, #3
   2fe40:	200e      	movs	r0, #14
   2fe42:	4b34      	ldr	r3, [pc, #208]	; (2ff14 <ipc_irq_handler+0x11c>)
   2fe44:	701a      	strb	r2, [r3, #0]
   2fe46:	4b34      	ldr	r3, [pc, #208]	; (2ff18 <ipc_irq_handler+0x120>)
   2fe48:	6018      	str	r0, [r3, #0]
   2fe4a:	f00d fdaa 	bl	3d9a2 <rpc_transport_ipc_fault_handler>
   2fe4e:	e7e3      	b.n	2fe18 <ipc_irq_handler+0x20>
   2fe50:	f248 0201 	movw	r2, #32769	; 0x8001
   2fe54:	4293      	cmp	r3, r2
   2fe56:	d1df      	bne.n	2fe18 <ipc_irq_handler+0x20>
   2fe58:	2203      	movs	r2, #3
   2fe5a:	4b2e      	ldr	r3, [pc, #184]	; (2ff14 <ipc_irq_handler+0x11c>)
   2fe5c:	701a      	strb	r2, [r3, #0]
   2fe5e:	2216      	movs	r2, #22
   2fe60:	4b2d      	ldr	r3, [pc, #180]	; (2ff18 <ipc_irq_handler+0x120>)
   2fe62:	601a      	str	r2, [r3, #0]
   2fe64:	e7d8      	b.n	2fe18 <ipc_irq_handler+0x20>
   2fe66:	4a2d      	ldr	r2, [pc, #180]	; (2ff1c <ipc_irq_handler+0x124>)
   2fe68:	4293      	cmp	r3, r2
   2fe6a:	d80c      	bhi.n	2fe86 <ipc_irq_handler+0x8e>
   2fe6c:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   2fe70:	d80c      	bhi.n	2fe8c <ipc_irq_handler+0x94>
   2fe72:	f248 0203 	movw	r2, #32771	; 0x8003
   2fe76:	4293      	cmp	r3, r2
   2fe78:	d1ce      	bne.n	2fe18 <ipc_irq_handler+0x20>
   2fe7a:	2203      	movs	r2, #3
   2fe7c:	4b25      	ldr	r3, [pc, #148]	; (2ff14 <ipc_irq_handler+0x11c>)
   2fe7e:	701a      	strb	r2, [r3, #0]
   2fe80:	220c      	movs	r2, #12
   2fe82:	4b25      	ldr	r3, [pc, #148]	; (2ff18 <ipc_irq_handler+0x120>)
   2fe84:	e7ed      	b.n	2fe62 <ipc_irq_handler+0x6a>
   2fe86:	4a26      	ldr	r2, [pc, #152]	; (2ff20 <ipc_irq_handler+0x128>)
   2fe88:	4293      	cmp	r3, r2
   2fe8a:	d1c5      	bne.n	2fe18 <ipc_irq_handler+0x20>
   2fe8c:	2103      	movs	r1, #3
   2fe8e:	4a21      	ldr	r2, [pc, #132]	; (2ff14 <ipc_irq_handler+0x11c>)
   2fe90:	7011      	strb	r1, [r2, #0]
   2fe92:	4a21      	ldr	r2, [pc, #132]	; (2ff18 <ipc_irq_handler+0x120>)
   2fe94:	6013      	str	r3, [r2, #0]
   2fe96:	e7bf      	b.n	2fe18 <ipc_irq_handler+0x20>
   2fe98:	2203      	movs	r2, #3
   2fe9a:	4b1e      	ldr	r3, [pc, #120]	; (2ff14 <ipc_irq_handler+0x11c>)
   2fe9c:	701a      	strb	r2, [r3, #0]
   2fe9e:	222d      	movs	r2, #45	; 0x2d
   2fea0:	4b1d      	ldr	r3, [pc, #116]	; (2ff18 <ipc_irq_handler+0x120>)
   2fea2:	e7de      	b.n	2fe62 <ipc_irq_handler+0x6a>
   2fea4:	2203      	movs	r2, #3
   2fea6:	4b1b      	ldr	r3, [pc, #108]	; (2ff14 <ipc_irq_handler+0x11c>)
   2fea8:	701a      	strb	r2, [r3, #0]
   2feaa:	2205      	movs	r2, #5
   2feac:	4b1a      	ldr	r3, [pc, #104]	; (2ff18 <ipc_irq_handler+0x120>)
   2feae:	e7d8      	b.n	2fe62 <ipc_irq_handler+0x6a>
   2feb0:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   2feb4:	d003      	beq.n	2febe <ipc_irq_handler+0xc6>
   2feb6:	2202      	movs	r2, #2
   2feb8:	4b16      	ldr	r3, [pc, #88]	; (2ff14 <ipc_irq_handler+0x11c>)
   2feba:	701a      	strb	r2, [r3, #0]
   2febc:	e7ac      	b.n	2fe18 <ipc_irq_handler+0x20>
   2febe:	0762      	lsls	r2, r4, #29
   2fec0:	d504      	bpl.n	2fecc <ipc_irq_handler+0xd4>
   2fec2:	4b14      	ldr	r3, [pc, #80]	; (2ff14 <ipc_irq_handler+0x11c>)
   2fec4:	781a      	ldrb	r2, [r3, #0]
   2fec6:	b93a      	cbnz	r2, 2fed8 <ipc_irq_handler+0xe0>
   2fec8:	f7f7 f96c 	bl	271a4 <nrf_modem_os_application_irq_set>
   2fecc:	06e3      	lsls	r3, r4, #27
   2fece:	d5a3      	bpl.n	2fe18 <ipc_irq_handler+0x20>
   2fed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2fed4:	f7f7 b966 	b.w	271a4 <nrf_modem_os_application_irq_set>
   2fed8:	2a01      	cmp	r2, #1
   2feda:	d1f7      	bne.n	2fecc <ipc_irq_handler+0xd4>
   2fedc:	4a11      	ldr	r2, [pc, #68]	; (2ff24 <ipc_irq_handler+0x12c>)
   2fede:	4812      	ldr	r0, [pc, #72]	; (2ff28 <ipc_irq_handler+0x130>)
   2fee0:	6812      	ldr	r2, [r2, #0]
   2fee2:	6891      	ldr	r1, [r2, #8]
   2fee4:	6041      	str	r1, [r0, #4]
   2fee6:	6852      	ldr	r2, [r2, #4]
   2fee8:	6002      	str	r2, [r0, #0]
   2feea:	b101      	cbz	r1, 2feee <ipc_irq_handler+0xf6>
   2feec:	b92a      	cbnz	r2, 2fefa <ipc_irq_handler+0x102>
   2feee:	2203      	movs	r2, #3
   2fef0:	701a      	strb	r2, [r3, #0]
   2fef2:	2216      	movs	r2, #22
   2fef4:	4b08      	ldr	r3, [pc, #32]	; (2ff18 <ipc_irq_handler+0x120>)
   2fef6:	601a      	str	r2, [r3, #0]
   2fef8:	e7e8      	b.n	2fecc <ipc_irq_handler+0xd4>
   2fefa:	6809      	ldr	r1, [r1, #0]
   2fefc:	2910      	cmp	r1, #16
   2fefe:	d8f6      	bhi.n	2feee <ipc_irq_handler+0xf6>
   2ff00:	6812      	ldr	r2, [r2, #0]
   2ff02:	2a10      	cmp	r2, #16
   2ff04:	d8f3      	bhi.n	2feee <ipc_irq_handler+0xf6>
   2ff06:	701d      	strb	r5, [r3, #0]
   2ff08:	e7e0      	b.n	2fecc <ipc_irq_handler+0xd4>
   2ff0a:	bf00      	nop
   2ff0c:	e000e100 	.word	0xe000e100
   2ff10:	4002a000 	.word	0x4002a000
   2ff14:	2001d698 	.word	0x2001d698
   2ff18:	20018750 	.word	0x20018750
   2ff1c:	04400004 	.word	0x04400004
   2ff20:	05500001 	.word	0x05500001
   2ff24:	2001875c 	.word	0x2001875c
   2ff28:	20018754 	.word	0x20018754

0002ff2c <gnss_client_event_handler>:
   2ff2c:	f850 1b08 	ldr.w	r1, [r0], #8
   2ff30:	4b01      	ldr	r3, [pc, #4]	; (2ff38 <gnss_client_event_handler+0xc>)
   2ff32:	0c09      	lsrs	r1, r1, #16
   2ff34:	681b      	ldr	r3, [r3, #0]
   2ff36:	4718      	bx	r3
   2ff38:	20018778 	.word	0x20018778

0002ff3c <rpc_gnss_client_set_handler>:
   2ff3c:	4b01      	ldr	r3, [pc, #4]	; (2ff44 <rpc_gnss_client_set_handler+0x8>)
   2ff3e:	6018      	str	r0, [r3, #0]
   2ff40:	4770      	bx	lr
   2ff42:	bf00      	nop
   2ff44:	20018778 	.word	0x20018778

0002ff48 <interface_init>:
   2ff48:	b508      	push	{r3, lr}
   2ff4a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
   2ff4e:	2100      	movs	r1, #0
   2ff50:	4802      	ldr	r0, [pc, #8]	; (2ff5c <interface_init+0x14>)
   2ff52:	f00e f82a 	bl	3dfaa <memset>
   2ff56:	2000      	movs	r0, #0
   2ff58:	bd08      	pop	{r3, pc}
   2ff5a:	bf00      	nop
   2ff5c:	2001877c 	.word	0x2001877c

0002ff60 <interface_socket_allocate>:
   2ff60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ff62:	4606      	mov	r6, r0
   2ff64:	2400      	movs	r4, #0
   2ff66:	272c      	movs	r7, #44	; 0x2c
   2ff68:	4b0f      	ldr	r3, [pc, #60]	; (2ffa8 <interface_socket_allocate+0x48>)
   2ff6a:	fb07 f004 	mul.w	r0, r7, r4
   2ff6e:	181d      	adds	r5, r3, r0
   2ff70:	5818      	ldr	r0, [r3, r0]
   2ff72:	b988      	cbnz	r0, 2ff98 <interface_socket_allocate+0x38>
   2ff74:	f04f 37ff 	mov.w	r7, #4294967295
   2ff78:	2301      	movs	r3, #1
   2ff7a:	4628      	mov	r0, r5
   2ff7c:	61af      	str	r7, [r5, #24]
   2ff7e:	602b      	str	r3, [r5, #0]
   2ff80:	f00c fe5e 	bl	3cc40 <packet_handler_alloc_and_init>
   2ff84:	b168      	cbz	r0, 2ffa2 <interface_socket_allocate+0x42>
   2ff86:	4628      	mov	r0, r5
   2ff88:	f00c fe71 	bl	3cc6e <socket_free>
   2ff8c:	200c      	movs	r0, #12
   2ff8e:	f7f6 ff77 	bl	26e80 <nrf_modem_os_errno_set>
   2ff92:	f04f 34ff 	mov.w	r4, #4294967295
   2ff96:	e005      	b.n	2ffa4 <interface_socket_allocate+0x44>
   2ff98:	3401      	adds	r4, #1
   2ff9a:	2c09      	cmp	r4, #9
   2ff9c:	d1e5      	bne.n	2ff6a <interface_socket_allocate+0xa>
   2ff9e:	2069      	movs	r0, #105	; 0x69
   2ffa0:	e7f5      	b.n	2ff8e <interface_socket_allocate+0x2e>
   2ffa2:	6035      	str	r5, [r6, #0]
   2ffa4:	4620      	mov	r0, r4
   2ffa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ffa8:	2001877c 	.word	0x2001877c

0002ffac <interface_socket_free>:
   2ffac:	2808      	cmp	r0, #8
   2ffae:	d805      	bhi.n	2ffbc <interface_socket_free+0x10>
   2ffb0:	222c      	movs	r2, #44	; 0x2c
   2ffb2:	4b03      	ldr	r3, [pc, #12]	; (2ffc0 <interface_socket_free+0x14>)
   2ffb4:	fb02 3000 	mla	r0, r2, r0, r3
   2ffb8:	f00c be59 	b.w	3cc6e <socket_free>
   2ffbc:	4770      	bx	lr
   2ffbe:	bf00      	nop
   2ffc0:	2001877c 	.word	0x2001877c

0002ffc4 <interface_socket_packet_handler_update>:
   2ffc4:	2808      	cmp	r0, #8
   2ffc6:	b570      	push	{r4, r5, r6, lr}
   2ffc8:	d812      	bhi.n	2fff0 <interface_socket_packet_handler_update+0x2c>
   2ffca:	242c      	movs	r4, #44	; 0x2c
   2ffcc:	4360      	muls	r0, r4
   2ffce:	4b09      	ldr	r3, [pc, #36]	; (2fff4 <interface_socket_packet_handler_update+0x30>)
   2ffd0:	181d      	adds	r5, r3, r0
   2ffd2:	581b      	ldr	r3, [r3, r0]
   2ffd4:	b163      	cbz	r3, 2fff0 <interface_socket_packet_handler_update+0x2c>
   2ffd6:	4628      	mov	r0, r5
   2ffd8:	69ee      	ldr	r6, [r5, #28]
   2ffda:	f00c fe31 	bl	3cc40 <packet_handler_alloc_and_init>
   2ffde:	4604      	mov	r4, r0
   2ffe0:	b920      	cbnz	r0, 2ffec <interface_socket_packet_handler_update+0x28>
   2ffe2:	4630      	mov	r0, r6
   2ffe4:	f00d fcbf 	bl	3d966 <packet_handler_delete>
   2ffe8:	4620      	mov	r0, r4
   2ffea:	bd70      	pop	{r4, r5, r6, pc}
   2ffec:	61ee      	str	r6, [r5, #28]
   2ffee:	e7fb      	b.n	2ffe8 <interface_socket_packet_handler_update+0x24>
   2fff0:	2402      	movs	r4, #2
   2fff2:	e7f9      	b.n	2ffe8 <interface_socket_packet_handler_update+0x24>
   2fff4:	2001877c 	.word	0x2001877c

0002fff8 <interface_socket_wait>:
   2fff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fffa:	4616      	mov	r6, r2
   2fffc:	222c      	movs	r2, #44	; 0x2c
   2fffe:	4350      	muls	r0, r2
   30000:	461f      	mov	r7, r3
   30002:	4b0d      	ldr	r3, [pc, #52]	; (30038 <interface_socket_wait+0x40>)
   30004:	460d      	mov	r5, r1
   30006:	181c      	adds	r4, r3, r0
   30008:	581b      	ldr	r3, [r3, r0]
   3000a:	4033      	ands	r3, r6
   3000c:	428b      	cmp	r3, r1
   3000e:	d101      	bne.n	30014 <interface_socket_wait+0x1c>
   30010:	2000      	movs	r0, #0
   30012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30014:	6863      	ldr	r3, [r4, #4]
   30016:	2b00      	cmp	r3, #0
   30018:	d1fa      	bne.n	30010 <interface_socket_wait+0x18>
   3001a:	6823      	ldr	r3, [r4, #0]
   3001c:	4033      	ands	r3, r6
   3001e:	42ab      	cmp	r3, r5
   30020:	d0f6      	beq.n	30010 <interface_socket_wait+0x18>
   30022:	6863      	ldr	r3, [r4, #4]
   30024:	2b00      	cmp	r3, #0
   30026:	d1f3      	bne.n	30010 <interface_socket_wait+0x18>
   30028:	4639      	mov	r1, r7
   3002a:	4620      	mov	r0, r4
   3002c:	f7f6 fe70 	bl	26d10 <nrf_modem_os_timedwait>
   30030:	2800      	cmp	r0, #0
   30032:	d0f2      	beq.n	3001a <interface_socket_wait+0x22>
   30034:	e7ed      	b.n	30012 <interface_socket_wait+0x1a>
   30036:	bf00      	nop
   30038:	2001877c 	.word	0x2001877c

0003003c <interface_from_internal_id_search>:
   3003c:	4b0a      	ldr	r3, [pc, #40]	; (30068 <interface_from_internal_id_search+0x2c>)
   3003e:	4602      	mov	r2, r0
   30040:	b530      	push	{r4, r5, lr}
   30042:	2000      	movs	r0, #0
   30044:	461c      	mov	r4, r3
   30046:	212c      	movs	r1, #44	; 0x2c
   30048:	fb01 f500 	mul.w	r5, r1, r0
   3004c:	5965      	ldr	r5, [r4, r5]
   3004e:	b115      	cbz	r5, 30056 <interface_from_internal_id_search+0x1a>
   30050:	699d      	ldr	r5, [r3, #24]
   30052:	4295      	cmp	r5, r2
   30054:	d006      	beq.n	30064 <interface_from_internal_id_search+0x28>
   30056:	3001      	adds	r0, #1
   30058:	2809      	cmp	r0, #9
   3005a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   3005e:	d1f3      	bne.n	30048 <interface_from_internal_id_search+0xc>
   30060:	f04f 30ff 	mov.w	r0, #4294967295
   30064:	bd30      	pop	{r4, r5, pc}
   30066:	bf00      	nop
   30068:	2001877c 	.word	0x2001877c

0003006c <interface_socket_from_handle_get>:
   3006c:	2808      	cmp	r0, #8
   3006e:	d808      	bhi.n	30082 <interface_socket_from_handle_get+0x16>
   30070:	232c      	movs	r3, #44	; 0x2c
   30072:	4343      	muls	r3, r0
   30074:	4a04      	ldr	r2, [pc, #16]	; (30088 <interface_socket_from_handle_get+0x1c>)
   30076:	18d0      	adds	r0, r2, r3
   30078:	58d3      	ldr	r3, [r2, r3]
   3007a:	2b00      	cmp	r3, #0
   3007c:	bf08      	it	eq
   3007e:	2000      	moveq	r0, #0
   30080:	4770      	bx	lr
   30082:	2000      	movs	r0, #0
   30084:	4770      	bx	lr
   30086:	bf00      	nop
   30088:	2001877c 	.word	0x2001877c

0003008c <interface_socket_setopt>:
   3008c:	2808      	cmp	r0, #8
   3008e:	b570      	push	{r4, r5, r6, lr}
   30090:	d82f      	bhi.n	300f2 <interface_socket_setopt+0x66>
   30092:	252c      	movs	r5, #44	; 0x2c
   30094:	4368      	muls	r0, r5
   30096:	4c18      	ldr	r4, [pc, #96]	; (300f8 <interface_socket_setopt+0x6c>)
   30098:	1825      	adds	r5, r4, r0
   3009a:	5820      	ldr	r0, [r4, r0]
   3009c:	b348      	cbz	r0, 300f2 <interface_socket_setopt+0x66>
   3009e:	2901      	cmp	r1, #1
   300a0:	d005      	beq.n	300ae <interface_socket_setopt+0x22>
   300a2:	202a      	movs	r0, #42	; 0x2a
   300a4:	f7f6 feec 	bl	26e80 <nrf_modem_os_errno_set>
   300a8:	f04f 30ff 	mov.w	r0, #4294967295
   300ac:	e01e      	b.n	300ec <interface_socket_setopt+0x60>
   300ae:	f1a2 0114 	sub.w	r1, r2, #20
   300b2:	2901      	cmp	r1, #1
   300b4:	d8f5      	bhi.n	300a2 <interface_socket_setopt+0x16>
   300b6:	9904      	ldr	r1, [sp, #16]
   300b8:	2908      	cmp	r1, #8
   300ba:	d118      	bne.n	300ee <interface_socket_setopt+0x62>
   300bc:	b1bb      	cbz	r3, 300ee <interface_socket_setopt+0x62>
   300be:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   300c2:	6859      	ldr	r1, [r3, #4]
   300c4:	2000      	movs	r0, #0
   300c6:	fbb1 f1f4 	udiv	r1, r1, r4
   300ca:	681e      	ldr	r6, [r3, #0]
   300cc:	460b      	mov	r3, r1
   300ce:	4601      	mov	r1, r0
   300d0:	fbe6 3104 	umlal	r3, r1, r6, r4
   300d4:	f04f 34ff 	mov.w	r4, #4294967295
   300d8:	429c      	cmp	r4, r3
   300da:	eb70 0101 	sbcs.w	r1, r0, r1
   300de:	d201      	bcs.n	300e4 <interface_socket_setopt+0x58>
   300e0:	2025      	movs	r0, #37	; 0x25
   300e2:	e7df      	b.n	300a4 <interface_socket_setopt+0x18>
   300e4:	2a14      	cmp	r2, #20
   300e6:	bf0c      	ite	eq
   300e8:	622b      	streq	r3, [r5, #32]
   300ea:	626b      	strne	r3, [r5, #36]	; 0x24
   300ec:	bd70      	pop	{r4, r5, r6, pc}
   300ee:	2016      	movs	r0, #22
   300f0:	e7d8      	b.n	300a4 <interface_socket_setopt+0x18>
   300f2:	2009      	movs	r0, #9
   300f4:	e7d6      	b.n	300a4 <interface_socket_setopt+0x18>
   300f6:	bf00      	nop
   300f8:	2001877c 	.word	0x2001877c

000300fc <interface_socket_getopt>:
   300fc:	b570      	push	{r4, r5, r6, lr}
   300fe:	2808      	cmp	r0, #8
   30100:	9d04      	ldr	r5, [sp, #16]
   30102:	d832      	bhi.n	3016a <interface_socket_getopt+0x6e>
   30104:	242c      	movs	r4, #44	; 0x2c
   30106:	4360      	muls	r0, r4
   30108:	4e19      	ldr	r6, [pc, #100]	; (30170 <interface_socket_getopt+0x74>)
   3010a:	1834      	adds	r4, r6, r0
   3010c:	5830      	ldr	r0, [r6, r0]
   3010e:	b360      	cbz	r0, 3016a <interface_socket_getopt+0x6e>
   30110:	2901      	cmp	r1, #1
   30112:	d005      	beq.n	30120 <interface_socket_getopt+0x24>
   30114:	202a      	movs	r0, #42	; 0x2a
   30116:	f7f6 feb3 	bl	26e80 <nrf_modem_os_errno_set>
   3011a:	f04f 30ff 	mov.w	r0, #4294967295
   3011e:	e00c      	b.n	3013a <interface_socket_getopt+0x3e>
   30120:	b103      	cbz	r3, 30124 <interface_socket_getopt+0x28>
   30122:	b90d      	cbnz	r5, 30128 <interface_socket_getopt+0x2c>
   30124:	2016      	movs	r0, #22
   30126:	e7f6      	b.n	30116 <interface_socket_getopt+0x1a>
   30128:	2a04      	cmp	r2, #4
   3012a:	d107      	bne.n	3013c <interface_socket_getopt+0x40>
   3012c:	682a      	ldr	r2, [r5, #0]
   3012e:	2a04      	cmp	r2, #4
   30130:	d1f8      	bne.n	30124 <interface_socket_getopt+0x28>
   30132:	2000      	movs	r0, #0
   30134:	6862      	ldr	r2, [r4, #4]
   30136:	601a      	str	r2, [r3, #0]
   30138:	6060      	str	r0, [r4, #4]
   3013a:	bd70      	pop	{r4, r5, r6, pc}
   3013c:	f1a2 0114 	sub.w	r1, r2, #20
   30140:	2901      	cmp	r1, #1
   30142:	d8e7      	bhi.n	30114 <interface_socket_getopt+0x18>
   30144:	6829      	ldr	r1, [r5, #0]
   30146:	2908      	cmp	r1, #8
   30148:	d1ec      	bne.n	30124 <interface_socket_getopt+0x28>
   3014a:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   3014e:	2a14      	cmp	r2, #20
   30150:	bf18      	it	ne
   30152:	4601      	movne	r1, r0
   30154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   30158:	fbb1 f0f2 	udiv	r0, r1, r2
   3015c:	fb02 1110 	mls	r1, r2, r0, r1
   30160:	4351      	muls	r1, r2
   30162:	6018      	str	r0, [r3, #0]
   30164:	6059      	str	r1, [r3, #4]
   30166:	2000      	movs	r0, #0
   30168:	e7e7      	b.n	3013a <interface_socket_getopt+0x3e>
   3016a:	2009      	movs	r0, #9
   3016c:	e7d3      	b.n	30116 <interface_socket_getopt+0x1a>
   3016e:	bf00      	nop
   30170:	2001877c 	.word	0x2001877c

00030174 <interface_socket_fcntl>:
   30174:	2808      	cmp	r0, #8
   30176:	b510      	push	{r4, lr}
   30178:	d82c      	bhi.n	301d4 <interface_socket_fcntl+0x60>
   3017a:	232c      	movs	r3, #44	; 0x2c
   3017c:	4343      	muls	r3, r0
   3017e:	4c16      	ldr	r4, [pc, #88]	; (301d8 <interface_socket_fcntl+0x64>)
   30180:	58e0      	ldr	r0, [r4, r3]
   30182:	b338      	cbz	r0, 301d4 <interface_socket_fcntl+0x60>
   30184:	2901      	cmp	r1, #1
   30186:	d11d      	bne.n	301c4 <interface_socket_fcntl+0x50>
   30188:	f012 0001 	ands.w	r0, r2, #1
   3018c:	58e2      	ldr	r2, [r4, r3]
   3018e:	d004      	beq.n	3019a <interface_socket_fcntl+0x26>
   30190:	2000      	movs	r0, #0
   30192:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   30196:	50e2      	str	r2, [r4, r3]
   30198:	bd10      	pop	{r4, pc}
   3019a:	0092      	lsls	r2, r2, #2
   3019c:	d407      	bmi.n	301ae <interface_socket_fcntl+0x3a>
   3019e:	58e2      	ldr	r2, [r4, r3]
   301a0:	b292      	uxth	r2, r2
   301a2:	2a0a      	cmp	r2, #10
   301a4:	d003      	beq.n	301ae <interface_socket_fcntl+0x3a>
   301a6:	58e2      	ldr	r2, [r4, r3]
   301a8:	b292      	uxth	r2, r2
   301aa:	2a0b      	cmp	r2, #11
   301ac:	d105      	bne.n	301ba <interface_socket_fcntl+0x46>
   301ae:	2023      	movs	r0, #35	; 0x23
   301b0:	f7f6 fe66 	bl	26e80 <nrf_modem_os_errno_set>
   301b4:	f04f 30ff 	mov.w	r0, #4294967295
   301b8:	e7ee      	b.n	30198 <interface_socket_fcntl+0x24>
   301ba:	58e2      	ldr	r2, [r4, r3]
   301bc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   301c0:	50e2      	str	r2, [r4, r3]
   301c2:	e7e9      	b.n	30198 <interface_socket_fcntl+0x24>
   301c4:	2902      	cmp	r1, #2
   301c6:	d103      	bne.n	301d0 <interface_socket_fcntl+0x5c>
   301c8:	58e0      	ldr	r0, [r4, r3]
   301ca:	f3c0 7000 	ubfx	r0, r0, #28, #1
   301ce:	e7e3      	b.n	30198 <interface_socket_fcntl+0x24>
   301d0:	2016      	movs	r0, #22
   301d2:	e7ed      	b.n	301b0 <interface_socket_fcntl+0x3c>
   301d4:	2009      	movs	r0, #9
   301d6:	e7eb      	b.n	301b0 <interface_socket_fcntl+0x3c>
   301d8:	2001877c 	.word	0x2001877c

000301dc <rpc_error_to_nrf_errno>:
   301dc:	286a      	cmp	r0, #106	; 0x6a
   301de:	bf9a      	itte	ls
   301e0:	4b01      	ldrls	r3, [pc, #4]	; (301e8 <rpc_error_to_nrf_errno+0xc>)
   301e2:	5618      	ldrsbls	r0, [r3, r0]
   301e4:	202d      	movhi	r0, #45	; 0x2d
   301e6:	4770      	bx	lr
   301e8:	000457f0 	.word	0x000457f0

000301ec <rpc_error_to_nrf_gai_errno>:
   301ec:	2805      	cmp	r0, #5
   301ee:	b508      	push	{r3, lr}
   301f0:	d012      	beq.n	30218 <rpc_error_to_nrf_gai_errno+0x2c>
   301f2:	d807      	bhi.n	30204 <rpc_error_to_nrf_gai_errno+0x18>
   301f4:	b168      	cbz	r0, 30212 <rpc_error_to_nrf_gai_errno+0x26>
   301f6:	f7ff fff1 	bl	301dc <rpc_error_to_nrf_errno>
   301fa:	4b09      	ldr	r3, [pc, #36]	; (30220 <rpc_error_to_nrf_gai_errno+0x34>)
   301fc:	6018      	str	r0, [r3, #0]
   301fe:	f240 1015 	movw	r0, #277	; 0x115
   30202:	e008      	b.n	30216 <rpc_error_to_nrf_gai_errno+0x2a>
   30204:	2806      	cmp	r0, #6
   30206:	d001      	beq.n	3020c <rpc_error_to_nrf_gai_errno+0x20>
   30208:	280d      	cmp	r0, #13
   3020a:	d1f4      	bne.n	301f6 <rpc_error_to_nrf_gai_errno+0xa>
   3020c:	f240 1011 	movw	r0, #273	; 0x111
   30210:	e001      	b.n	30216 <rpc_error_to_nrf_gai_errno+0x2a>
   30212:	4b03      	ldr	r3, [pc, #12]	; (30220 <rpc_error_to_nrf_gai_errno+0x34>)
   30214:	6018      	str	r0, [r3, #0]
   30216:	bd08      	pop	{r3, pc}
   30218:	f44f 708a 	mov.w	r0, #276	; 0x114
   3021c:	e7fb      	b.n	30216 <rpc_error_to_nrf_gai_errno+0x2a>
   3021e:	bf00      	nop
   30220:	20018910 	.word	0x20018910

00030224 <ip_interface_init>:
   30224:	b510      	push	{r4, lr}
   30226:	2400      	movs	r4, #0
   30228:	4b06      	ldr	r3, [pc, #24]	; (30244 <ip_interface_init+0x20>)
   3022a:	2224      	movs	r2, #36	; 0x24
   3022c:	601c      	str	r4, [r3, #0]
   3022e:	4b06      	ldr	r3, [pc, #24]	; (30248 <ip_interface_init+0x24>)
   30230:	4621      	mov	r1, r4
   30232:	4806      	ldr	r0, [pc, #24]	; (3024c <ip_interface_init+0x28>)
   30234:	601c      	str	r4, [r3, #0]
   30236:	f00d feb8 	bl	3dfaa <memset>
   3023a:	2201      	movs	r2, #1
   3023c:	4b04      	ldr	r3, [pc, #16]	; (30250 <ip_interface_init+0x2c>)
   3023e:	4620      	mov	r0, r4
   30240:	701a      	strb	r2, [r3, #0]
   30242:	bd10      	pop	{r4, pc}
   30244:	2001891c 	.word	0x2001891c
   30248:	20018918 	.word	0x20018918
   3024c:	20018920 	.word	0x20018920
   30250:	2001d69a 	.word	0x2001d69a

00030254 <ip_interface_open>:
   30254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30258:	2302      	movs	r3, #2
   3025a:	460d      	mov	r5, r1
   3025c:	4611      	mov	r1, r2
   3025e:	2200      	movs	r2, #0
   30260:	f04f 38ff 	mov.w	r8, #4294967295
   30264:	b086      	sub	sp, #24
   30266:	e9cd 2303 	strd	r2, r3, [sp, #12]
   3026a:	4b36      	ldr	r3, [pc, #216]	; (30344 <ip_interface_open+0xf0>)
   3026c:	4607      	mov	r7, r0
   3026e:	781b      	ldrb	r3, [r3, #0]
   30270:	f8cd 8014 	str.w	r8, [sp, #20]
   30274:	b943      	cbnz	r3, 30288 <ip_interface_open+0x34>
   30276:	2070      	movs	r0, #112	; 0x70
   30278:	f7f6 fe02 	bl	26e80 <nrf_modem_os_errno_set>
   3027c:	f04f 34ff 	mov.w	r4, #4294967295
   30280:	4620      	mov	r0, r4
   30282:	b006      	add	sp, #24
   30284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30288:	9101      	str	r1, [sp, #4]
   3028a:	f00c fd15 	bl	3ccb8 <address_family_verify>
   3028e:	4604      	mov	r4, r0
   30290:	2800      	cmp	r0, #0
   30292:	d1f5      	bne.n	30280 <ip_interface_open+0x2c>
   30294:	1e6b      	subs	r3, r5, #1
   30296:	2b02      	cmp	r3, #2
   30298:	d815      	bhi.n	302c6 <ip_interface_open+0x72>
   3029a:	4628      	mov	r0, r5
   3029c:	9901      	ldr	r1, [sp, #4]
   3029e:	aa04      	add	r2, sp, #16
   302a0:	f00c fd4e 	bl	3cd40 <protocol_verify>
   302a4:	4606      	mov	r6, r0
   302a6:	2800      	cmp	r0, #0
   302a8:	d149      	bne.n	3033e <ip_interface_open+0xea>
   302aa:	4629      	mov	r1, r5
   302ac:	4a26      	ldr	r2, [pc, #152]	; (30348 <ip_interface_open+0xf4>)
   302ae:	a803      	add	r0, sp, #12
   302b0:	f7ff fe56 	bl	2ff60 <interface_socket_allocate>
   302b4:	9b03      	ldr	r3, [sp, #12]
   302b6:	4604      	mov	r4, r0
   302b8:	b93b      	cbnz	r3, 302ca <ip_interface_open+0x76>
   302ba:	2669      	movs	r6, #105	; 0x69
   302bc:	4620      	mov	r0, r4
   302be:	f7ff fe75 	bl	2ffac <interface_socket_free>
   302c2:	4630      	mov	r0, r6
   302c4:	e7d8      	b.n	30278 <ip_interface_open+0x24>
   302c6:	2016      	movs	r0, #22
   302c8:	e7d6      	b.n	30278 <ip_interface_open+0x24>
   302ca:	9a04      	ldr	r2, [sp, #16]
   302cc:	4641      	mov	r1, r8
   302ce:	615a      	str	r2, [r3, #20]
   302d0:	e9c3 7503 	strd	r7, r5, [r3, #12]
   302d4:	f247 0201 	movw	r2, #28673	; 0x7001
   302d8:	4633      	mov	r3, r6
   302da:	f00c fd4f 	bl	3cd7c <ip_interface_request_create>
   302de:	4601      	mov	r1, r0
   302e0:	2800      	cmp	r0, #0
   302e2:	d0ea      	beq.n	302ba <ip_interface_open+0x66>
   302e4:	6883      	ldr	r3, [r0, #8]
   302e6:	3f02      	subs	r7, #2
   302e8:	330c      	adds	r3, #12
   302ea:	2f08      	cmp	r7, #8
   302ec:	6083      	str	r3, [r0, #8]
   302ee:	bf98      	it	ls
   302f0:	4b16      	ldrls	r3, [pc, #88]	; (3034c <ip_interface_open+0xf8>)
   302f2:	6185      	str	r5, [r0, #24]
   302f4:	bf98      	it	ls
   302f6:	57de      	ldrsbls	r6, [r3, r7]
   302f8:	9b04      	ldr	r3, [sp, #16]
   302fa:	6146      	str	r6, [r0, #20]
   302fc:	61c3      	str	r3, [r0, #28]
   302fe:	f247 0201 	movw	r2, #28673	; 0x7001
   30302:	2301      	movs	r3, #1
   30304:	9803      	ldr	r0, [sp, #12]
   30306:	f00c fd51 	bl	3cdac <ip_interface_request_send>
   3030a:	4606      	mov	r6, r0
   3030c:	2800      	cmp	r0, #0
   3030e:	d1d5      	bne.n	302bc <ip_interface_open+0x68>
   30310:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30314:	2102      	movs	r1, #2
   30316:	4620      	mov	r0, r4
   30318:	ab05      	add	r3, sp, #20
   3031a:	f00c fd5a 	bl	3cdd2 <ip_interface_wait>
   3031e:	4606      	mov	r6, r0
   30320:	2800      	cmp	r0, #0
   30322:	d1cb      	bne.n	302bc <ip_interface_open+0x68>
   30324:	3d02      	subs	r5, #2
   30326:	2d01      	cmp	r5, #1
   30328:	d8aa      	bhi.n	30280 <ip_interface_open+0x2c>
   3032a:	9b03      	ldr	r3, [sp, #12]
   3032c:	681a      	ldr	r2, [r3, #0]
   3032e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   30332:	601a      	str	r2, [r3, #0]
   30334:	681a      	ldr	r2, [r3, #0]
   30336:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   3033a:	601a      	str	r2, [r3, #0]
   3033c:	e7a0      	b.n	30280 <ip_interface_open+0x2c>
   3033e:	4604      	mov	r4, r0
   30340:	e79e      	b.n	30280 <ip_interface_open+0x2c>
   30342:	bf00      	nop
   30344:	2001d69a 	.word	0x2001d69a
   30348:	0003ccdf 	.word	0x0003ccdf
   3034c:	000457e2 	.word	0x000457e2

00030350 <ip_interface_close>:
   30350:	f04f 33ff 	mov.w	r3, #4294967295
   30354:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30356:	4605      	mov	r5, r0
   30358:	9301      	str	r3, [sp, #4]
   3035a:	f7ff fe87 	bl	3006c <interface_socket_from_handle_get>
   3035e:	4604      	mov	r4, r0
   30360:	b3a0      	cbz	r0, 303cc <ip_interface_close+0x7c>
   30362:	6981      	ldr	r1, [r0, #24]
   30364:	6806      	ldr	r6, [r0, #0]
   30366:	2300      	movs	r3, #0
   30368:	f247 0209 	movw	r2, #28681	; 0x7009
   3036c:	4628      	mov	r0, r5
   3036e:	f00c fd05 	bl	3cd7c <ip_interface_request_create>
   30372:	4601      	mov	r1, r0
   30374:	b388      	cbz	r0, 303da <ip_interface_close+0x8a>
   30376:	6823      	ldr	r3, [r4, #0]
   30378:	4620      	mov	r0, r4
   3037a:	0c1b      	lsrs	r3, r3, #16
   3037c:	041b      	lsls	r3, r3, #16
   3037e:	f043 030d 	orr.w	r3, r3, #13
   30382:	6023      	str	r3, [r4, #0]
   30384:	6823      	ldr	r3, [r4, #0]
   30386:	f247 0209 	movw	r2, #28681	; 0x7009
   3038a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3038e:	6023      	str	r3, [r4, #0]
   30390:	6823      	ldr	r3, [r4, #0]
   30392:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   30396:	6023      	str	r3, [r4, #0]
   30398:	4633      	mov	r3, r6
   3039a:	f00c fd07 	bl	3cdac <ip_interface_request_send>
   3039e:	4604      	mov	r4, r0
   303a0:	b9a8      	cbnz	r0, 303ce <ip_interface_close+0x7e>
   303a2:	4e0f      	ldr	r6, [pc, #60]	; (303e0 <ip_interface_close+0x90>)
   303a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   303a8:	210e      	movs	r1, #14
   303aa:	4628      	mov	r0, r5
   303ac:	ab01      	add	r3, sp, #4
   303ae:	f00c fd10 	bl	3cdd2 <ip_interface_wait>
   303b2:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
   303b6:	b118      	cbz	r0, 303c0 <ip_interface_close+0x70>
   303b8:	f00c fae5 	bl	3c986 <rpc_ip_client_message_free>
   303bc:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
   303c0:	4628      	mov	r0, r5
   303c2:	f7ff fdf3 	bl	2ffac <interface_socket_free>
   303c6:	4620      	mov	r0, r4
   303c8:	b002      	add	sp, #8
   303ca:	bd70      	pop	{r4, r5, r6, pc}
   303cc:	2409      	movs	r4, #9
   303ce:	4620      	mov	r0, r4
   303d0:	f7f6 fd56 	bl	26e80 <nrf_modem_os_errno_set>
   303d4:	f04f 34ff 	mov.w	r4, #4294967295
   303d8:	e7f5      	b.n	303c6 <ip_interface_close+0x76>
   303da:	240c      	movs	r4, #12
   303dc:	e7f7      	b.n	303ce <ip_interface_close+0x7e>
   303de:	bf00      	nop
   303e0:	20018920 	.word	0x20018920

000303e4 <ip_interface_sendto>:
   303e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   303e8:	461d      	mov	r5, r3
   303ea:	2300      	movs	r3, #0
   303ec:	b089      	sub	sp, #36	; 0x24
   303ee:	4606      	mov	r6, r0
   303f0:	4690      	mov	r8, r2
   303f2:	9102      	str	r1, [sp, #8]
   303f4:	9305      	str	r3, [sp, #20]
   303f6:	f7ff fe39 	bl	3006c <interface_socket_from_handle_get>
   303fa:	4604      	mov	r4, r0
   303fc:	2800      	cmp	r0, #0
   303fe:	f000 8084 	beq.w	3050a <ip_interface_sendto+0x126>
   30402:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
   30406:	f300 8082 	bgt.w	3050e <ip_interface_sendto+0x12a>
   3040a:	6903      	ldr	r3, [r0, #16]
   3040c:	2b01      	cmp	r3, #1
   3040e:	d102      	bne.n	30416 <ip_interface_sendto+0x32>
   30410:	9a12      	ldr	r2, [sp, #72]	; 0x48
   30412:	2a00      	cmp	r2, #0
   30414:	d17d      	bne.n	30512 <ip_interface_sendto+0x12e>
   30416:	6822      	ldr	r2, [r4, #0]
   30418:	0391      	lsls	r1, r2, #14
   3041a:	d424      	bmi.n	30466 <ip_interface_sendto+0x82>
   3041c:	6822      	ldr	r2, [r4, #0]
   3041e:	0092      	lsls	r2, r2, #2
   30420:	d408      	bmi.n	30434 <ip_interface_sendto+0x50>
   30422:	2b01      	cmp	r3, #1
   30424:	d103      	bne.n	3042e <ip_interface_sendto+0x4a>
   30426:	6823      	ldr	r3, [r4, #0]
   30428:	b29b      	uxth	r3, r3
   3042a:	2b05      	cmp	r3, #5
   3042c:	d102      	bne.n	30434 <ip_interface_sendto+0x50>
   3042e:	6823      	ldr	r3, [r4, #0]
   30430:	031f      	lsls	r7, r3, #12
   30432:	d570      	bpl.n	30516 <ip_interface_sendto+0x132>
   30434:	6823      	ldr	r3, [r4, #0]
   30436:	031d      	lsls	r5, r3, #12
   30438:	d56f      	bpl.n	3051a <ip_interface_sendto+0x136>
   3043a:	2500      	movs	r5, #0
   3043c:	68a7      	ldr	r7, [r4, #8]
   3043e:	2f00      	cmp	r7, #0
   30440:	d06f      	beq.n	30522 <ip_interface_sendto+0x13e>
   30442:	4638      	mov	r0, r7
   30444:	f7f6 fd1c 	bl	26e80 <nrf_modem_os_errno_set>
   30448:	f04f 35ff 	mov.w	r5, #4294967295
   3044c:	4c74      	ldr	r4, [pc, #464]	; (30620 <ip_interface_sendto+0x23c>)
   3044e:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   30452:	b120      	cbz	r0, 3045e <ip_interface_sendto+0x7a>
   30454:	f00c fa97 	bl	3c986 <rpc_ip_client_message_free>
   30458:	2300      	movs	r3, #0
   3045a:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   3045e:	4628      	mov	r0, r5
   30460:	b009      	add	sp, #36	; 0x24
   30462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30466:	2d00      	cmp	r5, #0
   30468:	d03c      	beq.n	304e4 <ip_interface_sendto+0x100>
   3046a:	07a8      	lsls	r0, r5, #30
   3046c:	d557      	bpl.n	3051e <ip_interface_sendto+0x13a>
   3046e:	f04f 0b00 	mov.w	fp, #0
   30472:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30474:	2500      	movs	r5, #0
   30476:	2b00      	cmp	r3, #0
   30478:	bf08      	it	eq
   3047a:	f04f 33ff 	moveq.w	r3, #4294967295
   3047e:	f247 0a06 	movw	sl, #28678	; 0x7006
   30482:	270c      	movs	r7, #12
   30484:	9306      	str	r3, [sp, #24]
   30486:	0433      	lsls	r3, r6, #16
   30488:	9303      	str	r3, [sp, #12]
   3048a:	eba8 0905 	sub.w	r9, r8, r5
   3048e:	4649      	mov	r1, r9
   30490:	a805      	add	r0, sp, #20
   30492:	f00c fa58 	bl	3c946 <rpc_ip_client_request_alloc>
   30496:	280c      	cmp	r0, #12
   30498:	d154      	bne.n	30544 <ip_interface_sendto+0x160>
   3049a:	f1bb 0f00 	cmp.w	fp, #0
   3049e:	f000 80bc 	beq.w	3061a <ip_interface_sendto+0x236>
   304a2:	9a06      	ldr	r2, [sp, #24]
   304a4:	3201      	adds	r2, #1
   304a6:	d0f0      	beq.n	3048a <ip_interface_sendto+0xa6>
   304a8:	220a      	movs	r2, #10
   304aa:	a907      	add	r1, sp, #28
   304ac:	2000      	movs	r0, #0
   304ae:	9207      	str	r2, [sp, #28]
   304b0:	f7f6 fc2e 	bl	26d10 <nrf_modem_os_timedwait>
   304b4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   304b8:	440a      	add	r2, r1
   304ba:	3a0a      	subs	r2, #10
   304bc:	2a00      	cmp	r2, #0
   304be:	9206      	str	r2, [sp, #24]
   304c0:	dce3      	bgt.n	3048a <ip_interface_sendto+0xa6>
   304c2:	273c      	movs	r7, #60	; 0x3c
   304c4:	6822      	ldr	r2, [r4, #0]
   304c6:	0313      	lsls	r3, r2, #12
   304c8:	d4b9      	bmi.n	3043e <ip_interface_sendto+0x5a>
   304ca:	6822      	ldr	r2, [r4, #0]
   304cc:	b292      	uxth	r2, r2
   304ce:	2a0d      	cmp	r2, #13
   304d0:	d0b5      	beq.n	3043e <ip_interface_sendto+0x5a>
   304d2:	6822      	ldr	r2, [r4, #0]
   304d4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   304d8:	6022      	str	r2, [r4, #0]
   304da:	6822      	ldr	r2, [r4, #0]
   304dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   304e0:	6022      	str	r2, [r4, #0]
   304e2:	e7ac      	b.n	3043e <ip_interface_sendto+0x5a>
   304e4:	6827      	ldr	r7, [r4, #0]
   304e6:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   304ea:	f3c7 7b00 	ubfx	fp, r7, #28, #1
   304ee:	e7c0      	b.n	30472 <ip_interface_sendto+0x8e>
   304f0:	68a7      	ldr	r7, [r4, #8]
   304f2:	e7e7      	b.n	304c4 <ip_interface_sendto+0xe0>
   304f4:	4b4a      	ldr	r3, [pc, #296]	; (30620 <ip_interface_sendto+0x23c>)
   304f6:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
   304fa:	6992      	ldr	r2, [r2, #24]
   304fc:	4415      	add	r5, r2
   304fe:	f1bb 0f00 	cmp.w	fp, #0
   30502:	d0df      	beq.n	304c4 <ip_interface_sendto+0xe0>
   30504:	45a8      	cmp	r8, r5
   30506:	d1c0      	bne.n	3048a <ip_interface_sendto+0xa6>
   30508:	e7dc      	b.n	304c4 <ip_interface_sendto+0xe0>
   3050a:	2709      	movs	r7, #9
   3050c:	e799      	b.n	30442 <ip_interface_sendto+0x5e>
   3050e:	2728      	movs	r7, #40	; 0x28
   30510:	e797      	b.n	30442 <ip_interface_sendto+0x5e>
   30512:	2738      	movs	r7, #56	; 0x38
   30514:	e795      	b.n	30442 <ip_interface_sendto+0x5e>
   30516:	2723      	movs	r7, #35	; 0x23
   30518:	e793      	b.n	30442 <ip_interface_sendto+0x5e>
   3051a:	2739      	movs	r7, #57	; 0x39
   3051c:	e791      	b.n	30442 <ip_interface_sendto+0x5e>
   3051e:	272d      	movs	r7, #45	; 0x2d
   30520:	e78f      	b.n	30442 <ip_interface_sendto+0x5e>
   30522:	6823      	ldr	r3, [r4, #0]
   30524:	011a      	lsls	r2, r3, #4
   30526:	bf41      	itttt	mi
   30528:	6823      	ldrmi	r3, [r4, #0]
   3052a:	4645      	movmi	r5, r8
   3052c:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   30530:	6023      	strmi	r3, [r4, #0]
   30532:	e78b      	b.n	3044c <ip_interface_sendto+0x68>
   30534:	6810      	ldr	r0, [r2, #0]
   30536:	b108      	cbz	r0, 3053c <ip_interface_sendto+0x158>
   30538:	f00c fa28 	bl	3c98c <rpc_ip_client_data_free>
   3053c:	9805      	ldr	r0, [sp, #20]
   3053e:	f00c fa22 	bl	3c986 <rpc_ip_client_message_free>
   30542:	e7bf      	b.n	304c4 <ip_interface_sendto+0xe0>
   30544:	2800      	cmp	r0, #0
   30546:	d1bd      	bne.n	304c4 <ip_interface_sendto+0xe0>
   30548:	f04f 020c 	mov.w	r2, #12
   3054c:	9b05      	ldr	r3, [sp, #20]
   3054e:	721a      	strb	r2, [r3, #8]
   30550:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   30552:	7258      	strb	r0, [r3, #9]
   30554:	7298      	strb	r0, [r3, #10]
   30556:	72d8      	strb	r0, [r3, #11]
   30558:	7518      	strb	r0, [r3, #20]
   3055a:	7558      	strb	r0, [r3, #21]
   3055c:	7598      	strb	r0, [r3, #22]
   3055e:	75d8      	strb	r0, [r3, #23]
   30560:	b10a      	cbz	r2, 30566 <ip_interface_sendto+0x182>
   30562:	615a      	str	r2, [r3, #20]
   30564:	62a0      	str	r0, [r4, #40]	; 0x28
   30566:	9a12      	ldr	r2, [sp, #72]	; 0x48
   30568:	b1b2      	cbz	r2, 30598 <ip_interface_sendto+0x1b4>
   3056a:	f103 021c 	add.w	r2, r3, #28
   3056e:	9201      	str	r2, [sp, #4]
   30570:	f103 0218 	add.w	r2, r3, #24
   30574:	9200      	str	r2, [sp, #0]
   30576:	68e0      	ldr	r0, [r4, #12]
   30578:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   3057c:	331a      	adds	r3, #26
   3057e:	f00c fbba 	bl	3ccf6 <ip_addr_parse>
   30582:	9a05      	ldr	r2, [sp, #20]
   30584:	4607      	mov	r7, r0
   30586:	2800      	cmp	r0, #0
   30588:	d1d4      	bne.n	30534 <ip_interface_sendto+0x150>
   3058a:	f247 0a07 	movw	sl, #28679	; 0x7007
   3058e:	6893      	ldr	r3, [r2, #8]
   30590:	8b51      	ldrh	r1, [r2, #26]
   30592:	3304      	adds	r3, #4
   30594:	440b      	add	r3, r1
   30596:	6093      	str	r3, [r2, #8]
   30598:	69a2      	ldr	r2, [r4, #24]
   3059a:	9b05      	ldr	r3, [sp, #20]
   3059c:	611a      	str	r2, [r3, #16]
   3059e:	9a03      	ldr	r2, [sp, #12]
   305a0:	f8c3 9004 	str.w	r9, [r3, #4]
   305a4:	ea4a 0202 	orr.w	r2, sl, r2
   305a8:	60da      	str	r2, [r3, #12]
   305aa:	9a02      	ldr	r2, [sp, #8]
   305ac:	b12a      	cbz	r2, 305ba <ip_interface_sendto+0x1d6>
   305ae:	9902      	ldr	r1, [sp, #8]
   305b0:	464a      	mov	r2, r9
   305b2:	6818      	ldr	r0, [r3, #0]
   305b4:	4429      	add	r1, r5
   305b6:	f00d fcd8 	bl	3df6a <memcpy>
   305ba:	6823      	ldr	r3, [r4, #0]
   305bc:	6822      	ldr	r2, [r4, #0]
   305be:	4620      	mov	r0, r4
   305c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   305c4:	6022      	str	r2, [r4, #0]
   305c6:	6822      	ldr	r2, [r4, #0]
   305c8:	9905      	ldr	r1, [sp, #20]
   305ca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   305ce:	6022      	str	r2, [r4, #0]
   305d0:	4652      	mov	r2, sl
   305d2:	f00c fbeb 	bl	3cdac <ip_interface_request_send>
   305d6:	4607      	mov	r7, r0
   305d8:	2800      	cmp	r0, #0
   305da:	f47f af73 	bne.w	304c4 <ip_interface_sendto+0xe0>
   305de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   305e2:	4630      	mov	r0, r6
   305e4:	4611      	mov	r1, r2
   305e6:	ab06      	add	r3, sp, #24
   305e8:	f00c fbf3 	bl	3cdd2 <ip_interface_wait>
   305ec:	4607      	mov	r7, r0
   305ee:	2800      	cmp	r0, #0
   305f0:	d080      	beq.n	304f4 <ip_interface_sendto+0x110>
   305f2:	6822      	ldr	r2, [r4, #0]
   305f4:	0311      	lsls	r1, r2, #12
   305f6:	f53f af7b 	bmi.w	304f0 <ip_interface_sendto+0x10c>
   305fa:	283c      	cmp	r0, #60	; 0x3c
   305fc:	f43f af62 	beq.w	304c4 <ip_interface_sendto+0xe0>
   30600:	280c      	cmp	r0, #12
   30602:	f47f af5f 	bne.w	304c4 <ip_interface_sendto+0xe0>
   30606:	4b06      	ldr	r3, [pc, #24]	; (30620 <ip_interface_sendto+0x23c>)
   30608:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   3060c:	b108      	cbz	r0, 30612 <ip_interface_sendto+0x22e>
   3060e:	f00c f9ba 	bl	3c986 <rpc_ip_client_message_free>
   30612:	f1bb 0f00 	cmp.w	fp, #0
   30616:	f47f af38 	bne.w	3048a <ip_interface_sendto+0xa6>
   3061a:	2723      	movs	r7, #35	; 0x23
   3061c:	e752      	b.n	304c4 <ip_interface_sendto+0xe0>
   3061e:	bf00      	nop
   30620:	20018920 	.word	0x20018920

00030624 <ip_interface_socketoption_get>:
   30624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30628:	461c      	mov	r4, r3
   3062a:	f04f 33ff 	mov.w	r3, #4294967295
   3062e:	9301      	str	r3, [sp, #4]
   30630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30632:	4607      	mov	r7, r0
   30634:	460d      	mov	r5, r1
   30636:	4693      	mov	fp, r2
   30638:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   3063c:	2b00      	cmp	r3, #0
   3063e:	d06a      	beq.n	30716 <ip_interface_socketoption_get+0xf2>
   30640:	f8d8 3000 	ldr.w	r3, [r8]
   30644:	2b00      	cmp	r3, #0
   30646:	d066      	beq.n	30716 <ip_interface_socketoption_get+0xf2>
   30648:	680b      	ldr	r3, [r1, #0]
   3064a:	025e      	lsls	r6, r3, #9
   3064c:	d465      	bmi.n	3071a <ip_interface_socketoption_get+0xf6>
   3064e:	680b      	ldr	r3, [r1, #0]
   30650:	0219      	lsls	r1, r3, #8
   30652:	d462      	bmi.n	3071a <ip_interface_socketoption_get+0xf6>
   30654:	682b      	ldr	r3, [r5, #0]
   30656:	01da      	lsls	r2, r3, #7
   30658:	d45f      	bmi.n	3071a <ip_interface_socketoption_get+0xf6>
   3065a:	682b      	ldr	r3, [r5, #0]
   3065c:	019b      	lsls	r3, r3, #6
   3065e:	d45c      	bmi.n	3071a <ip_interface_socketoption_get+0xf6>
   30660:	f8d5 a000 	ldr.w	sl, [r5]
   30664:	682b      	ldr	r3, [r5, #0]
   30666:	f247 0204 	movw	r2, #28676	; 0x7004
   3066a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3066e:	602b      	str	r3, [r5, #0]
   30670:	f8d8 3000 	ldr.w	r3, [r8]
   30674:	69a9      	ldr	r1, [r5, #24]
   30676:	f00c fb81 	bl	3cd7c <ip_interface_request_create>
   3067a:	4606      	mov	r6, r0
   3067c:	2800      	cmp	r0, #0
   3067e:	d048      	beq.n	30712 <ip_interface_socketoption_get+0xee>
   30680:	6883      	ldr	r3, [r0, #8]
   30682:	f8c0 b014 	str.w	fp, [r0, #20]
   30686:	3308      	adds	r3, #8
   30688:	6083      	str	r3, [r0, #8]
   3068a:	6184      	str	r4, [r0, #24]
   3068c:	4601      	mov	r1, r0
   3068e:	f8d0 b000 	ldr.w	fp, [r0]
   30692:	4653      	mov	r3, sl
   30694:	f247 0204 	movw	r2, #28676	; 0x7004
   30698:	4628      	mov	r0, r5
   3069a:	f00c fb87 	bl	3cdac <ip_interface_request_send>
   3069e:	4604      	mov	r4, r0
   306a0:	bb20      	cbnz	r0, 306ec <ip_interface_socketoption_get+0xc8>
   306a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   306a6:	4638      	mov	r0, r7
   306a8:	4611      	mov	r1, r2
   306aa:	ab01      	add	r3, sp, #4
   306ac:	f00c fb91 	bl	3cdd2 <ip_interface_wait>
   306b0:	4604      	mov	r4, r0
   306b2:	b9d8      	cbnz	r0, 306ec <ip_interface_socketoption_get+0xc8>
   306b4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 30720 <ip_interface_socketoption_get+0xfc>
   306b8:	f8d8 2000 	ldr.w	r2, [r8]
   306bc:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
   306c0:	b1f9      	cbz	r1, 30702 <ip_interface_socketoption_get+0xde>
   306c2:	6848      	ldr	r0, [r1, #4]
   306c4:	4290      	cmp	r0, r2
   306c6:	d81a      	bhi.n	306fe <ip_interface_socketoption_get+0xda>
   306c8:	6809      	ldr	r1, [r1, #0]
   306ca:	b1c1      	cbz	r1, 306fe <ip_interface_socketoption_get+0xda>
   306cc:	4602      	mov	r2, r0
   306ce:	980c      	ldr	r0, [sp, #48]	; 0x30
   306d0:	f00d fc4b 	bl	3df6a <memcpy>
   306d4:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
   306d8:	6852      	ldr	r2, [r2, #4]
   306da:	f8c8 2000 	str.w	r2, [r8]
   306de:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   306e2:	f00c f950 	bl	3c986 <rpc_ip_client_message_free>
   306e6:	2200      	movs	r2, #0
   306e8:	f849 2027 	str.w	r2, [r9, r7, lsl #2]
   306ec:	4658      	mov	r0, fp
   306ee:	f00c f94d 	bl	3c98c <rpc_ip_client_data_free>
   306f2:	f8c5 a000 	str.w	sl, [r5]
   306f6:	4620      	mov	r0, r4
   306f8:	b003      	add	sp, #12
   306fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   306fe:	2416      	movs	r4, #22
   30700:	e7ed      	b.n	306de <ip_interface_socketoption_get+0xba>
   30702:	4659      	mov	r1, fp
   30704:	980c      	ldr	r0, [sp, #48]	; 0x30
   30706:	f00d fc30 	bl	3df6a <memcpy>
   3070a:	6873      	ldr	r3, [r6, #4]
   3070c:	f8c8 3000 	str.w	r3, [r8]
   30710:	e7ec      	b.n	306ec <ip_interface_socketoption_get+0xc8>
   30712:	240c      	movs	r4, #12
   30714:	e7ed      	b.n	306f2 <ip_interface_socketoption_get+0xce>
   30716:	2416      	movs	r4, #22
   30718:	e7ed      	b.n	306f6 <ip_interface_socketoption_get+0xd2>
   3071a:	2423      	movs	r4, #35	; 0x23
   3071c:	e7eb      	b.n	306f6 <ip_interface_socketoption_get+0xd2>
   3071e:	bf00      	nop
   30720:	20018920 	.word	0x20018920

00030724 <ip_interface_bind>:
   30724:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30728:	f04f 33ff 	mov.w	r3, #4294967295
   3072c:	4607      	mov	r7, r0
   3072e:	4690      	mov	r8, r2
   30730:	460e      	mov	r6, r1
   30732:	9303      	str	r3, [sp, #12]
   30734:	2900      	cmp	r1, #0
   30736:	d04e      	beq.n	307d6 <ip_interface_bind+0xb2>
   30738:	2a00      	cmp	r2, #0
   3073a:	d04c      	beq.n	307d6 <ip_interface_bind+0xb2>
   3073c:	f7ff fc96 	bl	3006c <interface_socket_from_handle_get>
   30740:	4604      	mov	r4, r0
   30742:	2800      	cmp	r0, #0
   30744:	d049      	beq.n	307da <ip_interface_bind+0xb6>
   30746:	6803      	ldr	r3, [r0, #0]
   30748:	b29b      	uxth	r3, r3
   3074a:	2b02      	cmp	r3, #2
   3074c:	d145      	bne.n	307da <ip_interface_bind+0xb6>
   3074e:	6981      	ldr	r1, [r0, #24]
   30750:	2300      	movs	r3, #0
   30752:	f247 0205 	movw	r2, #28677	; 0x7005
   30756:	4638      	mov	r0, r7
   30758:	f00c fb10 	bl	3cd7c <ip_interface_request_create>
   3075c:	4605      	mov	r5, r0
   3075e:	2800      	cmp	r0, #0
   30760:	d03d      	beq.n	307de <ip_interface_bind+0xba>
   30762:	6883      	ldr	r3, [r0, #8]
   30764:	4642      	mov	r2, r8
   30766:	3304      	adds	r3, #4
   30768:	6083      	str	r3, [r0, #8]
   3076a:	f100 0318 	add.w	r3, r0, #24
   3076e:	9301      	str	r3, [sp, #4]
   30770:	f100 0314 	add.w	r3, r0, #20
   30774:	9300      	str	r3, [sp, #0]
   30776:	4631      	mov	r1, r6
   30778:	f100 0316 	add.w	r3, r0, #22
   3077c:	68e0      	ldr	r0, [r4, #12]
   3077e:	f00c faba 	bl	3ccf6 <ip_addr_parse>
   30782:	bb08      	cbnz	r0, 307c8 <ip_interface_bind+0xa4>
   30784:	68ab      	ldr	r3, [r5, #8]
   30786:	8aea      	ldrh	r2, [r5, #22]
   30788:	4e16      	ldr	r6, [pc, #88]	; (307e4 <ip_interface_bind+0xc0>)
   3078a:	4413      	add	r3, r2
   3078c:	60ab      	str	r3, [r5, #8]
   3078e:	6823      	ldr	r3, [r4, #0]
   30790:	f247 0205 	movw	r2, #28677	; 0x7005
   30794:	4033      	ands	r3, r6
   30796:	f043 0303 	orr.w	r3, r3, #3
   3079a:	6023      	str	r3, [r4, #0]
   3079c:	6823      	ldr	r3, [r4, #0]
   3079e:	4629      	mov	r1, r5
   307a0:	4033      	ands	r3, r6
   307a2:	4620      	mov	r0, r4
   307a4:	f043 0302 	orr.w	r3, r3, #2
   307a8:	f00c fb00 	bl	3cdac <ip_interface_request_send>
   307ac:	b960      	cbnz	r0, 307c8 <ip_interface_bind+0xa4>
   307ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   307b2:	2104      	movs	r1, #4
   307b4:	4638      	mov	r0, r7
   307b6:	ab03      	add	r3, sp, #12
   307b8:	f00c fb0b 	bl	3cdd2 <ip_interface_wait>
   307bc:	b140      	cbz	r0, 307d0 <ip_interface_bind+0xac>
   307be:	6823      	ldr	r3, [r4, #0]
   307c0:	4033      	ands	r3, r6
   307c2:	f043 0302 	orr.w	r3, r3, #2
   307c6:	6023      	str	r3, [r4, #0]
   307c8:	f7f6 fb5a 	bl	26e80 <nrf_modem_os_errno_set>
   307cc:	f04f 30ff 	mov.w	r0, #4294967295
   307d0:	b004      	add	sp, #16
   307d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   307d6:	2016      	movs	r0, #22
   307d8:	e7f6      	b.n	307c8 <ip_interface_bind+0xa4>
   307da:	2009      	movs	r0, #9
   307dc:	e7f4      	b.n	307c8 <ip_interface_bind+0xa4>
   307de:	200c      	movs	r0, #12
   307e0:	e7f2      	b.n	307c8 <ip_interface_bind+0xa4>
   307e2:	bf00      	nop
   307e4:	ffff0000 	.word	0xffff0000

000307e8 <ip_interface_listen>:
   307e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   307ea:	4605      	mov	r5, r0
   307ec:	f7ff fc3e 	bl	3006c <interface_socket_from_handle_get>
   307f0:	4604      	mov	r4, r0
   307f2:	2800      	cmp	r0, #0
   307f4:	d03f      	beq.n	30876 <ip_interface_listen+0x8e>
   307f6:	6803      	ldr	r3, [r0, #0]
   307f8:	b29b      	uxth	r3, r3
   307fa:	2b04      	cmp	r3, #4
   307fc:	d003      	beq.n	30806 <ip_interface_listen+0x1e>
   307fe:	6803      	ldr	r3, [r0, #0]
   30800:	b29b      	uxth	r3, r3
   30802:	2b0b      	cmp	r3, #11
   30804:	d139      	bne.n	3087a <ip_interface_listen+0x92>
   30806:	2100      	movs	r1, #0
   30808:	4628      	mov	r0, r5
   3080a:	4a1f      	ldr	r2, [pc, #124]	; (30888 <ip_interface_listen+0xa0>)
   3080c:	f7ff fbda 	bl	2ffc4 <interface_socket_packet_handler_update>
   30810:	4603      	mov	r3, r0
   30812:	bba0      	cbnz	r0, 3087e <ip_interface_listen+0x96>
   30814:	69a1      	ldr	r1, [r4, #24]
   30816:	f247 0208 	movw	r2, #28680	; 0x7008
   3081a:	4628      	mov	r0, r5
   3081c:	f00c faae 	bl	3cd7c <ip_interface_request_create>
   30820:	4601      	mov	r1, r0
   30822:	b370      	cbz	r0, 30882 <ip_interface_listen+0x9a>
   30824:	6883      	ldr	r3, [r0, #8]
   30826:	4e19      	ldr	r6, [pc, #100]	; (3088c <ip_interface_listen+0xa4>)
   30828:	3304      	adds	r3, #4
   3082a:	6083      	str	r3, [r0, #8]
   3082c:	6823      	ldr	r3, [r4, #0]
   3082e:	f247 0208 	movw	r2, #28680	; 0x7008
   30832:	4033      	ands	r3, r6
   30834:	f043 0306 	orr.w	r3, r3, #6
   30838:	6023      	str	r3, [r4, #0]
   3083a:	6823      	ldr	r3, [r4, #0]
   3083c:	4620      	mov	r0, r4
   3083e:	4033      	ands	r3, r6
   30840:	f043 0304 	orr.w	r3, r3, #4
   30844:	f00c fab2 	bl	3cdac <ip_interface_request_send>
   30848:	b978      	cbnz	r0, 3086a <ip_interface_listen+0x82>
   3084a:	f04f 33ff 	mov.w	r3, #4294967295
   3084e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   30852:	9301      	str	r3, [sp, #4]
   30854:	2107      	movs	r1, #7
   30856:	4628      	mov	r0, r5
   30858:	ab01      	add	r3, sp, #4
   3085a:	f00c faba 	bl	3cdd2 <ip_interface_wait>
   3085e:	b140      	cbz	r0, 30872 <ip_interface_listen+0x8a>
   30860:	6823      	ldr	r3, [r4, #0]
   30862:	4033      	ands	r3, r6
   30864:	f043 0304 	orr.w	r3, r3, #4
   30868:	6023      	str	r3, [r4, #0]
   3086a:	f7f6 fb09 	bl	26e80 <nrf_modem_os_errno_set>
   3086e:	f04f 30ff 	mov.w	r0, #4294967295
   30872:	b002      	add	sp, #8
   30874:	bd70      	pop	{r4, r5, r6, pc}
   30876:	2009      	movs	r0, #9
   30878:	e7f7      	b.n	3086a <ip_interface_listen+0x82>
   3087a:	2016      	movs	r0, #22
   3087c:	e7f5      	b.n	3086a <ip_interface_listen+0x82>
   3087e:	2023      	movs	r0, #35	; 0x23
   30880:	e7f3      	b.n	3086a <ip_interface_listen+0x82>
   30882:	200c      	movs	r0, #12
   30884:	e7f1      	b.n	3086a <ip_interface_listen+0x82>
   30886:	bf00      	nop
   30888:	0003ccdf 	.word	0x0003ccdf
   3088c:	ffff0000 	.word	0xffff0000

00030890 <ip_interface_accept>:
   30890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30894:	2600      	movs	r6, #0
   30896:	4680      	mov	r8, r0
   30898:	460f      	mov	r7, r1
   3089a:	4692      	mov	sl, r2
   3089c:	9600      	str	r6, [sp, #0]
   3089e:	f7ff fbe5 	bl	3006c <interface_socket_from_handle_get>
   308a2:	4604      	mov	r4, r0
   308a4:	2800      	cmp	r0, #0
   308a6:	f000 80cb 	beq.w	30a40 <ip_interface_accept+0x1b0>
   308aa:	6903      	ldr	r3, [r0, #16]
   308ac:	2b01      	cmp	r3, #1
   308ae:	f040 80ca 	bne.w	30a46 <ip_interface_accept+0x1b6>
   308b2:	6803      	ldr	r3, [r0, #0]
   308b4:	b29b      	uxth	r3, r3
   308b6:	2b07      	cmp	r3, #7
   308b8:	f040 80c7 	bne.w	30a4a <ip_interface_accept+0x1ba>
   308bc:	f04f 33ff 	mov.w	r3, #4294967295
   308c0:	9301      	str	r3, [sp, #4]
   308c2:	6803      	ldr	r3, [r0, #0]
   308c4:	f013 5980 	ands.w	r9, r3, #268435456	; 0x10000000
   308c8:	d163      	bne.n	30992 <ip_interface_accept+0x102>
   308ca:	6803      	ldr	r3, [r0, #0]
   308cc:	03db      	lsls	r3, r3, #15
   308ce:	d464      	bmi.n	3099a <ip_interface_accept+0x10a>
   308d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   308d4:	4640      	mov	r0, r8
   308d6:	4611      	mov	r1, r2
   308d8:	ab01      	add	r3, sp, #4
   308da:	f00c fa7a 	bl	3cdd2 <ip_interface_wait>
   308de:	4605      	mov	r5, r0
   308e0:	6826      	ldr	r6, [r4, #0]
   308e2:	f416 3680 	ands.w	r6, r6, #65536	; 0x10000
   308e6:	d05a      	beq.n	3099e <ip_interface_accept+0x10e>
   308e8:	4668      	mov	r0, sp
   308ea:	4a5a      	ldr	r2, [pc, #360]	; (30a54 <ip_interface_accept+0x1c4>)
   308ec:	6921      	ldr	r1, [r4, #16]
   308ee:	f7ff fb37 	bl	2ff60 <interface_socket_allocate>
   308f2:	9b00      	ldr	r3, [sp, #0]
   308f4:	4606      	mov	r6, r0
   308f6:	2b00      	cmp	r3, #0
   308f8:	f000 80a9 	beq.w	30a4e <ip_interface_accept+0x1be>
   308fc:	6962      	ldr	r2, [r4, #20]
   308fe:	69a1      	ldr	r1, [r4, #24]
   30900:	615a      	str	r2, [r3, #20]
   30902:	68e2      	ldr	r2, [r4, #12]
   30904:	4640      	mov	r0, r8
   30906:	60da      	str	r2, [r3, #12]
   30908:	6922      	ldr	r2, [r4, #16]
   3090a:	611a      	str	r2, [r3, #16]
   3090c:	2300      	movs	r3, #0
   3090e:	f247 020c 	movw	r2, #28684	; 0x700c
   30912:	f00c fa33 	bl	3cd7c <ip_interface_request_create>
   30916:	4601      	mov	r1, r0
   30918:	2800      	cmp	r0, #0
   3091a:	f000 8098 	beq.w	30a4e <ip_interface_accept+0x1be>
   3091e:	6823      	ldr	r3, [r4, #0]
   30920:	f8df b138 	ldr.w	fp, [pc, #312]	; 30a5c <ip_interface_accept+0x1cc>
   30924:	f247 020c 	movw	r2, #28684	; 0x700c
   30928:	ea03 030b 	and.w	r3, r3, fp
   3092c:	f043 0308 	orr.w	r3, r3, #8
   30930:	6023      	str	r3, [r4, #0]
   30932:	6823      	ldr	r3, [r4, #0]
   30934:	4620      	mov	r0, r4
   30936:	ea03 030b 	and.w	r3, r3, fp
   3093a:	f043 0307 	orr.w	r3, r3, #7
   3093e:	f00c fa35 	bl	3cdac <ip_interface_request_send>
   30942:	4605      	mov	r5, r0
   30944:	b9d0      	cbnz	r0, 3097c <ip_interface_accept+0xec>
   30946:	6823      	ldr	r3, [r4, #0]
   30948:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3094c:	ea23 0309 	bic.w	r3, r3, r9
   30950:	6023      	str	r3, [r4, #0]
   30952:	2109      	movs	r1, #9
   30954:	ab01      	add	r3, sp, #4
   30956:	4640      	mov	r0, r8
   30958:	f00c fa3b 	bl	3cdd2 <ip_interface_wait>
   3095c:	6823      	ldr	r3, [r4, #0]
   3095e:	4605      	mov	r5, r0
   30960:	ea43 0309 	orr.w	r3, r3, r9
   30964:	6023      	str	r3, [r4, #0]
   30966:	b1e0      	cbz	r0, 309a2 <ip_interface_accept+0x112>
   30968:	6823      	ldr	r3, [r4, #0]
   3096a:	ea03 030b 	and.w	r3, r3, fp
   3096e:	f043 0307 	orr.w	r3, r3, #7
   30972:	6023      	str	r3, [r4, #0]
   30974:	6823      	ldr	r3, [r4, #0]
   30976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3097a:	6023      	str	r3, [r4, #0]
   3097c:	9b00      	ldr	r3, [sp, #0]
   3097e:	b113      	cbz	r3, 30986 <ip_interface_accept+0xf6>
   30980:	4630      	mov	r0, r6
   30982:	f7ff fb13 	bl	2ffac <interface_socket_free>
   30986:	4628      	mov	r0, r5
   30988:	f7f6 fa7a 	bl	26e80 <nrf_modem_os_errno_set>
   3098c:	f04f 30ff 	mov.w	r0, #4294967295
   30990:	e041      	b.n	30a16 <ip_interface_accept+0x186>
   30992:	2523      	movs	r5, #35	; 0x23
   30994:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
   30998:	e7a2      	b.n	308e0 <ip_interface_accept+0x50>
   3099a:	2516      	movs	r5, #22
   3099c:	e7a0      	b.n	308e0 <ip_interface_accept+0x50>
   3099e:	2d00      	cmp	r5, #0
   309a0:	d1ec      	bne.n	3097c <ip_interface_accept+0xec>
   309a2:	4d2d      	ldr	r5, [pc, #180]	; (30a58 <ip_interface_accept+0x1c8>)
   309a4:	9b00      	ldr	r3, [sp, #0]
   309a6:	f855 1028 	ldr.w	r1, [r5, r8, lsl #2]
   309aa:	698a      	ldr	r2, [r1, #24]
   309ac:	619a      	str	r2, [r3, #24]
   309ae:	b197      	cbz	r7, 309d6 <ip_interface_accept+0x146>
   309b0:	68db      	ldr	r3, [r3, #12]
   309b2:	2b0a      	cmp	r3, #10
   309b4:	d132      	bne.n	30a1c <ip_interface_accept+0x18c>
   309b6:	f8da 2000 	ldr.w	r2, [sl]
   309ba:	2a24      	cmp	r2, #36	; 0x24
   309bc:	d10b      	bne.n	309d6 <ip_interface_accept+0x146>
   309be:	703a      	strb	r2, [r7, #0]
   309c0:	607b      	str	r3, [r7, #4]
   309c2:	7f4a      	ldrb	r2, [r1, #29]
   309c4:	7f0b      	ldrb	r3, [r1, #28]
   309c6:	3120      	adds	r1, #32
   309c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   309cc:	2210      	movs	r2, #16
   309ce:	813b      	strh	r3, [r7, #8]
   309d0:	18b8      	adds	r0, r7, r2
   309d2:	f00d faca 	bl	3df6a <memcpy>
   309d6:	9b00      	ldr	r3, [sp, #0]
   309d8:	4920      	ldr	r1, [pc, #128]	; (30a5c <ip_interface_accept+0x1cc>)
   309da:	681a      	ldr	r2, [r3, #0]
   309dc:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
   309e0:	400a      	ands	r2, r1
   309e2:	f042 0205 	orr.w	r2, r2, #5
   309e6:	601a      	str	r2, [r3, #0]
   309e8:	681a      	ldr	r2, [r3, #0]
   309ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   309ee:	601a      	str	r2, [r3, #0]
   309f0:	681a      	ldr	r2, [r3, #0]
   309f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   309f6:	601a      	str	r2, [r3, #0]
   309f8:	6823      	ldr	r3, [r4, #0]
   309fa:	400b      	ands	r3, r1
   309fc:	f043 0307 	orr.w	r3, r3, #7
   30a00:	6023      	str	r3, [r4, #0]
   30a02:	6823      	ldr	r3, [r4, #0]
   30a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   30a08:	6023      	str	r3, [r4, #0]
   30a0a:	f00b ffbc 	bl	3c986 <rpc_ip_client_message_free>
   30a0e:	2300      	movs	r3, #0
   30a10:	4630      	mov	r0, r6
   30a12:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
   30a16:	b003      	add	sp, #12
   30a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a1c:	2b02      	cmp	r3, #2
   30a1e:	d1da      	bne.n	309d6 <ip_interface_accept+0x146>
   30a20:	f8da 2000 	ldr.w	r2, [sl]
   30a24:	2a10      	cmp	r2, #16
   30a26:	d1d6      	bne.n	309d6 <ip_interface_accept+0x146>
   30a28:	703a      	strb	r2, [r7, #0]
   30a2a:	607b      	str	r3, [r7, #4]
   30a2c:	7f4a      	ldrb	r2, [r1, #29]
   30a2e:	7f0b      	ldrb	r3, [r1, #28]
   30a30:	f107 000c 	add.w	r0, r7, #12
   30a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   30a38:	813b      	strh	r3, [r7, #8]
   30a3a:	2204      	movs	r2, #4
   30a3c:	3120      	adds	r1, #32
   30a3e:	e7c8      	b.n	309d2 <ip_interface_accept+0x142>
   30a40:	2509      	movs	r5, #9
   30a42:	4606      	mov	r6, r0
   30a44:	e79a      	b.n	3097c <ip_interface_accept+0xec>
   30a46:	252d      	movs	r5, #45	; 0x2d
   30a48:	e798      	b.n	3097c <ip_interface_accept+0xec>
   30a4a:	2516      	movs	r5, #22
   30a4c:	e796      	b.n	3097c <ip_interface_accept+0xec>
   30a4e:	250c      	movs	r5, #12
   30a50:	e794      	b.n	3097c <ip_interface_accept+0xec>
   30a52:	bf00      	nop
   30a54:	0003ccdf 	.word	0x0003ccdf
   30a58:	20018920 	.word	0x20018920
   30a5c:	ffff0000 	.word	0xffff0000

00030a60 <ip_interface_setopt>:
   30a60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30a64:	2901      	cmp	r1, #1
   30a66:	4606      	mov	r6, r0
   30a68:	4690      	mov	r8, r2
   30a6a:	461d      	mov	r5, r3
   30a6c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   30a6e:	d008      	beq.n	30a82 <ip_interface_setopt+0x22>
   30a70:	202a      	movs	r0, #42	; 0x2a
   30a72:	f7f6 fa05 	bl	26e80 <nrf_modem_os_errno_set>
   30a76:	f04f 34ff 	mov.w	r4, #4294967295
   30a7a:	4620      	mov	r0, r4
   30a7c:	b004      	add	sp, #16
   30a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30a82:	f7ff faf3 	bl	3006c <interface_socket_from_handle_get>
   30a86:	4604      	mov	r4, r0
   30a88:	b908      	cbnz	r0, 30a8e <ip_interface_setopt+0x2e>
   30a8a:	2009      	movs	r0, #9
   30a8c:	e7f1      	b.n	30a72 <ip_interface_setopt+0x12>
   30a8e:	f1a8 0319 	sub.w	r3, r8, #25
   30a92:	2b1e      	cmp	r3, #30
   30a94:	f200 8092 	bhi.w	30bbc <ip_interface_setopt+0x15c>
   30a98:	e8df f003 	tbb	[pc, r3]
   30a9c:	90909010 	.word	0x90909010
   30aa0:	58504490 	.word	0x58504490
   30aa4:	90909090 	.word	0x90909090
   30aa8:	60909090 	.word	0x60909090
   30aac:	90909090 	.word	0x90909090
   30ab0:	90909090 	.word	0x90909090
   30ab4:	7a6d6890 	.word	0x7a6d6890
   30ab8:	807d      	.short	0x807d
   30aba:	83          	.byte	0x83
   30abb:	00          	.byte	0x00
   30abc:	b90d      	cbnz	r5, 30ac2 <ip_interface_setopt+0x62>
   30abe:	200e      	movs	r0, #14
   30ac0:	e7d7      	b.n	30a72 <ip_interface_setopt+0x12>
   30ac2:	4628      	mov	r0, r5
   30ac4:	f7ec fbca 	bl	1d25c <strlen>
   30ac8:	42b8      	cmp	r0, r7
   30aca:	d1f8      	bne.n	30abe <ip_interface_setopt+0x5e>
   30acc:	6823      	ldr	r3, [r4, #0]
   30ace:	b29b      	uxth	r3, r3
   30ad0:	2b02      	cmp	r3, #2
   30ad2:	d1da      	bne.n	30a8a <ip_interface_setopt+0x2a>
   30ad4:	4629      	mov	r1, r5
   30ad6:	68e0      	ldr	r0, [r4, #12]
   30ad8:	f002 fac6 	bl	33068 <pdn_interface_pdn_id_get>
   30adc:	9003      	str	r0, [sp, #12]
   30ade:	3001      	adds	r0, #1
   30ae0:	d111      	bne.n	30b06 <ip_interface_setopt+0xa6>
   30ae2:	4628      	mov	r0, r5
   30ae4:	493a      	ldr	r1, [pc, #232]	; (30bd0 <ip_interface_setopt+0x170>)
   30ae6:	f00d fc2d 	bl	3e344 <strstr>
   30aea:	b108      	cbz	r0, 30af0 <ip_interface_setopt+0x90>
   30aec:	4285      	cmp	r5, r0
   30aee:	d001      	beq.n	30af4 <ip_interface_setopt+0x94>
   30af0:	2016      	movs	r0, #22
   30af2:	e7be      	b.n	30a72 <ip_interface_setopt+0x12>
   30af4:	4836      	ldr	r0, [pc, #216]	; (30bd0 <ip_interface_setopt+0x170>)
   30af6:	f7ec fbb1 	bl	1d25c <strlen>
   30afa:	220a      	movs	r2, #10
   30afc:	2100      	movs	r1, #0
   30afe:	4428      	add	r0, r5
   30b00:	f007 f914 	bl	37d2c <strtoul>
   30b04:	9003      	str	r0, [sp, #12]
   30b06:	2304      	movs	r3, #4
   30b08:	9301      	str	r3, [sp, #4]
   30b0a:	ab03      	add	r3, sp, #12
   30b0c:	4621      	mov	r1, r4
   30b0e:	9300      	str	r3, [sp, #0]
   30b10:	2208      	movs	r2, #8
   30b12:	f243 0310 	movw	r3, #12304	; 0x3010
   30b16:	4630      	mov	r0, r6
   30b18:	f00c fafd 	bl	3d116 <ip_interface_socketoption_send>
   30b1c:	4604      	mov	r4, r0
   30b1e:	2800      	cmp	r0, #0
   30b20:	d0ab      	beq.n	30a7a <ip_interface_setopt+0x1a>
   30b22:	e7a6      	b.n	30a72 <ip_interface_setopt+0x12>
   30b24:	4602      	mov	r2, r0
   30b26:	4633      	mov	r3, r6
   30b28:	f248 0101 	movw	r1, #32769	; 0x8001
   30b2c:	f44f 7000 	mov.w	r0, #512	; 0x200
   30b30:	e9cd 5700 	strd	r5, r7, [sp]
   30b34:	f00c fb3c 	bl	3d1b0 <setopt_check_and_send_int>
   30b38:	4604      	mov	r4, r0
   30b3a:	e79e      	b.n	30a7a <ip_interface_setopt+0x1a>
   30b3c:	4602      	mov	r2, r0
   30b3e:	4633      	mov	r3, r6
   30b40:	f244 0110 	movw	r1, #16400	; 0x4010
   30b44:	2004      	movs	r0, #4
   30b46:	e9cd 5700 	strd	r5, r7, [sp]
   30b4a:	e7f3      	b.n	30b34 <ip_interface_setopt+0xd4>
   30b4c:	4602      	mov	r2, r0
   30b4e:	4633      	mov	r3, r6
   30b50:	f246 0110 	movw	r1, #24592	; 0x6010
   30b54:	2006      	movs	r0, #6
   30b56:	e9cd 5700 	strd	r5, r7, [sp]
   30b5a:	e7eb      	b.n	30b34 <ip_interface_setopt+0xd4>
   30b5c:	4602      	mov	r2, r0
   30b5e:	4633      	mov	r3, r6
   30b60:	f241 0104 	movw	r1, #4100	; 0x1004
   30b64:	2008      	movs	r0, #8
   30b66:	e9cd 5700 	strd	r5, r7, [sp]
   30b6a:	e7e3      	b.n	30b34 <ip_interface_setopt+0xd4>
   30b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   30b70:	62a3      	str	r3, [r4, #40]	; 0x28
   30b72:	2400      	movs	r4, #0
   30b74:	e781      	b.n	30a7a <ip_interface_setopt+0x1a>
   30b76:	2400      	movs	r4, #0
   30b78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   30b7c:	4622      	mov	r2, r4
   30b7e:	6283      	str	r3, [r0, #40]	; 0x28
   30b80:	4621      	mov	r1, r4
   30b82:	4623      	mov	r3, r4
   30b84:	4630      	mov	r0, r6
   30b86:	e9cd 4400 	strd	r4, r4, [sp]
   30b8a:	f7ff fc2b 	bl	303e4 <ip_interface_sendto>
   30b8e:	e774      	b.n	30a7a <ip_interface_setopt+0x1a>
   30b90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   30b94:	e7ec      	b.n	30b70 <ip_interface_setopt+0x110>
   30b96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   30b9a:	e7e9      	b.n	30b70 <ip_interface_setopt+0x110>
   30b9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   30ba0:	e7e6      	b.n	30b70 <ip_interface_setopt+0x110>
   30ba2:	2f04      	cmp	r7, #4
   30ba4:	d102      	bne.n	30bac <ip_interface_setopt+0x14c>
   30ba6:	682b      	ldr	r3, [r5, #0]
   30ba8:	2b87      	cmp	r3, #135	; 0x87
   30baa:	d8a1      	bhi.n	30af0 <ip_interface_setopt+0x90>
   30bac:	4633      	mov	r3, r6
   30bae:	4622      	mov	r2, r4
   30bb0:	f245 0106 	movw	r1, #20486	; 0x5006
   30bb4:	2001      	movs	r0, #1
   30bb6:	e9cd 5700 	strd	r5, r7, [sp]
   30bba:	e7bb      	b.n	30b34 <ip_interface_setopt+0xd4>
   30bbc:	462b      	mov	r3, r5
   30bbe:	4642      	mov	r2, r8
   30bc0:	2101      	movs	r1, #1
   30bc2:	4630      	mov	r0, r6
   30bc4:	970a      	str	r7, [sp, #40]	; 0x28
   30bc6:	b004      	add	sp, #16
   30bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   30bcc:	f7ff ba5e 	b.w	3008c <interface_socket_setopt>
   30bd0:	000457de 	.word	0x000457de

00030bd4 <ip_interface_getaddrinfo>:
   30bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30bd8:	b085      	sub	sp, #20
   30bda:	9300      	str	r3, [sp, #0]
   30bdc:	2300      	movs	r3, #0
   30bde:	4f7a      	ldr	r7, [pc, #488]	; (30dc8 <ip_interface_getaddrinfo+0x1f4>)
   30be0:	4614      	mov	r4, r2
   30be2:	803b      	strh	r3, [r7, #0]
   30be4:	2301      	movs	r3, #1
   30be6:	4a79      	ldr	r2, [pc, #484]	; (30dcc <ip_interface_getaddrinfo+0x1f8>)
   30be8:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 30de4 <ip_interface_getaddrinfo+0x210>
   30bec:	6013      	str	r3, [r2, #0]
   30bee:	f8ca 3000 	str.w	r3, [sl]
   30bf2:	4b77      	ldr	r3, [pc, #476]	; (30dd0 <ip_interface_getaddrinfo+0x1fc>)
   30bf4:	4605      	mov	r5, r0
   30bf6:	781b      	ldrb	r3, [r3, #0]
   30bf8:	460e      	mov	r6, r1
   30bfa:	b93b      	cbnz	r3, 30c0c <ip_interface_getaddrinfo+0x38>
   30bfc:	2070      	movs	r0, #112	; 0x70
   30bfe:	f7f6 f93f 	bl	26e80 <nrf_modem_os_errno_set>
   30c02:	f240 1015 	movw	r0, #277	; 0x115
   30c06:	b005      	add	sp, #20
   30c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30c0c:	b1c9      	cbz	r1, 30c42 <ip_interface_getaddrinfo+0x6e>
   30c0e:	b154      	cbz	r4, 30c26 <ip_interface_getaddrinfo+0x52>
   30c10:	6823      	ldr	r3, [r4, #0]
   30c12:	04d8      	lsls	r0, r3, #19
   30c14:	d507      	bpl.n	30c26 <ip_interface_getaddrinfo+0x52>
   30c16:	0559      	lsls	r1, r3, #21
   30c18:	d405      	bmi.n	30c26 <ip_interface_getaddrinfo+0x52>
   30c1a:	68a3      	ldr	r3, [r4, #8]
   30c1c:	2b03      	cmp	r3, #3
   30c1e:	d137      	bne.n	30c90 <ip_interface_getaddrinfo+0xbc>
   30c20:	f44f 7089 	mov.w	r0, #274	; 0x112
   30c24:	e7ef      	b.n	30c06 <ip_interface_getaddrinfo+0x32>
   30c26:	220a      	movs	r2, #10
   30c28:	2100      	movs	r1, #0
   30c2a:	4630      	mov	r0, r6
   30c2c:	f006 fffa 	bl	37c24 <strtol>
   30c30:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   30c34:	1e42      	subs	r2, r0, #1
   30c36:	429a      	cmp	r2, r3
   30c38:	d8f2      	bhi.n	30c20 <ip_interface_getaddrinfo+0x4c>
   30c3a:	0203      	lsls	r3, r0, #8
   30c3c:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   30c40:	8038      	strh	r0, [r7, #0]
   30c42:	2c00      	cmp	r4, #0
   30c44:	d1e9      	bne.n	30c1a <ip_interface_getaddrinfo+0x46>
   30c46:	2300      	movs	r3, #0
   30c48:	f8df b19c 	ldr.w	fp, [pc, #412]	; 30de8 <ip_interface_getaddrinfo+0x214>
   30c4c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 30dec <ip_interface_getaddrinfo+0x218>
   30c50:	f8cb 3000 	str.w	r3, [fp]
   30c54:	f8c9 3000 	str.w	r3, [r9]
   30c58:	b36d      	cbz	r5, 30cb6 <ip_interface_getaddrinfo+0xe2>
   30c5a:	4628      	mov	r0, r5
   30c5c:	f7ec fafe 	bl	1d25c <strlen>
   30c60:	4680      	mov	r8, r0
   30c62:	bb54      	cbnz	r4, 30cba <ip_interface_getaddrinfo+0xe6>
   30c64:	f04f 30ff 	mov.w	r0, #4294967295
   30c68:	4e5a      	ldr	r6, [pc, #360]	; (30dd4 <ip_interface_getaddrinfo+0x200>)
   30c6a:	6833      	ldr	r3, [r6, #0]
   30c6c:	2b00      	cmp	r3, #0
   30c6e:	f040 8095 	bne.w	30d9c <ip_interface_getaddrinfo+0x1c8>
   30c72:	2301      	movs	r3, #1
   30c74:	f247 020d 	movw	r2, #28685	; 0x700d
   30c78:	6033      	str	r3, [r6, #0]
   30c7a:	4601      	mov	r1, r0
   30c7c:	4643      	mov	r3, r8
   30c7e:	f00c f87d 	bl	3cd7c <ip_interface_request_create>
   30c82:	4607      	mov	r7, r0
   30c84:	2800      	cmp	r0, #0
   30c86:	d139      	bne.n	30cfc <ip_interface_getaddrinfo+0x128>
   30c88:	6030      	str	r0, [r6, #0]
   30c8a:	f240 100f 	movw	r0, #271	; 0x10f
   30c8e:	e7ba      	b.n	30c06 <ip_interface_getaddrinfo+0x32>
   30c90:	6860      	ldr	r0, [r4, #4]
   30c92:	f00c f811 	bl	3ccb8 <address_family_verify>
   30c96:	b958      	cbnz	r0, 30cb0 <ip_interface_getaddrinfo+0xdc>
   30c98:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   30c9c:	2301      	movs	r3, #1
   30c9e:	aa03      	add	r2, sp, #12
   30ca0:	9303      	str	r3, [sp, #12]
   30ca2:	f00c f84d 	bl	3cd40 <protocol_verify>
   30ca6:	2800      	cmp	r0, #0
   30ca8:	d0cd      	beq.n	30c46 <ip_interface_getaddrinfo+0x72>
   30caa:	f240 1013 	movw	r0, #275	; 0x113
   30cae:	e7aa      	b.n	30c06 <ip_interface_getaddrinfo+0x32>
   30cb0:	f44f 7087 	mov.w	r0, #270	; 0x10e
   30cb4:	e7a7      	b.n	30c06 <ip_interface_getaddrinfo+0x32>
   30cb6:	46a8      	mov	r8, r5
   30cb8:	e7d3      	b.n	30c62 <ip_interface_getaddrinfo+0x8e>
   30cba:	69e7      	ldr	r7, [r4, #28]
   30cbc:	2f00      	cmp	r7, #0
   30cbe:	d070      	beq.n	30da2 <ip_interface_getaddrinfo+0x1ce>
   30cc0:	687b      	ldr	r3, [r7, #4]
   30cc2:	2b66      	cmp	r3, #102	; 0x66
   30cc4:	d1ce      	bne.n	30c64 <ip_interface_getaddrinfo+0x90>
   30cc6:	68bb      	ldr	r3, [r7, #8]
   30cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   30ccc:	d1ca      	bne.n	30c64 <ip_interface_getaddrinfo+0x90>
   30cce:	f240 2302 	movw	r3, #514	; 0x202
   30cd2:	68fa      	ldr	r2, [r7, #12]
   30cd4:	429a      	cmp	r2, r3
   30cd6:	d1c5      	bne.n	30c64 <ip_interface_getaddrinfo+0x90>
   30cd8:	69b9      	ldr	r1, [r7, #24]
   30cda:	2900      	cmp	r1, #0
   30cdc:	d0c2      	beq.n	30c64 <ip_interface_getaddrinfo+0x90>
   30cde:	6860      	ldr	r0, [r4, #4]
   30ce0:	f002 f9c2 	bl	33068 <pdn_interface_pdn_id_get>
   30ce4:	1c42      	adds	r2, r0, #1
   30ce6:	d1bf      	bne.n	30c68 <ip_interface_getaddrinfo+0x94>
   30ce8:	e7bc      	b.n	30c64 <ip_interface_getaddrinfo+0x90>
   30cea:	9001      	str	r0, [sp, #4]
   30cec:	483a      	ldr	r0, [pc, #232]	; (30dd8 <ip_interface_getaddrinfo+0x204>)
   30cee:	f7ec fab5 	bl	1d25c <strlen>
   30cf2:	9b01      	ldr	r3, [sp, #4]
   30cf4:	220a      	movs	r2, #10
   30cf6:	4639      	mov	r1, r7
   30cf8:	4418      	add	r0, r3
   30cfa:	e062      	b.n	30dc2 <ip_interface_getaddrinfo+0x1ee>
   30cfc:	b364      	cbz	r4, 30d58 <ip_interface_getaddrinfo+0x184>
   30cfe:	68a3      	ldr	r3, [r4, #8]
   30d00:	2b02      	cmp	r3, #2
   30d02:	bf08      	it	eq
   30d04:	4a31      	ldreq	r2, [pc, #196]	; (30dcc <ip_interface_getaddrinfo+0x1f8>)
   30d06:	f8ca 3000 	str.w	r3, [sl]
   30d0a:	bf08      	it	eq
   30d0c:	6013      	streq	r3, [r2, #0]
   30d0e:	6862      	ldr	r2, [r4, #4]
   30d10:	3a02      	subs	r2, #2
   30d12:	2a08      	cmp	r2, #8
   30d14:	bf8e      	itee	hi
   30d16:	2200      	movhi	r2, #0
   30d18:	4930      	ldrls	r1, [pc, #192]	; (30ddc <ip_interface_getaddrinfo+0x208>)
   30d1a:	568a      	ldrsbls	r2, [r1, r2]
   30d1c:	6182      	str	r2, [r0, #24]
   30d1e:	68e2      	ldr	r2, [r4, #12]
   30d20:	61c3      	str	r3, [r0, #28]
   30d22:	2300      	movs	r3, #0
   30d24:	6202      	str	r2, [r0, #32]
   30d26:	7503      	strb	r3, [r0, #20]
   30d28:	7543      	strb	r3, [r0, #21]
   30d2a:	7583      	strb	r3, [r0, #22]
   30d2c:	75c3      	strb	r3, [r0, #23]
   30d2e:	68bb      	ldr	r3, [r7, #8]
   30d30:	3310      	adds	r3, #16
   30d32:	60bb      	str	r3, [r7, #8]
   30d34:	b12d      	cbz	r5, 30d42 <ip_interface_getaddrinfo+0x16e>
   30d36:	6838      	ldr	r0, [r7, #0]
   30d38:	b118      	cbz	r0, 30d42 <ip_interface_getaddrinfo+0x16e>
   30d3a:	4642      	mov	r2, r8
   30d3c:	4629      	mov	r1, r5
   30d3e:	f00d f914 	bl	3df6a <memcpy>
   30d42:	f247 010d 	movw	r1, #28685	; 0x700d
   30d46:	4638      	mov	r0, r7
   30d48:	f00b fe0c 	bl	3c964 <rpc_ip_client_request_send>
   30d4c:	b150      	cbz	r0, 30d64 <ip_interface_getaddrinfo+0x190>
   30d4e:	2300      	movs	r3, #0
   30d50:	f44f 7081 	mov.w	r0, #258	; 0x102
   30d54:	6033      	str	r3, [r6, #0]
   30d56:	e756      	b.n	30c06 <ip_interface_getaddrinfo+0x32>
   30d58:	2210      	movs	r2, #16
   30d5a:	4621      	mov	r1, r4
   30d5c:	3014      	adds	r0, #20
   30d5e:	f00d f924 	bl	3dfaa <memset>
   30d62:	e7e4      	b.n	30d2e <ip_interface_getaddrinfo+0x15a>
   30d64:	f04f 33ff 	mov.w	r3, #4294967295
   30d68:	9303      	str	r3, [sp, #12]
   30d6a:	4638      	mov	r0, r7
   30d6c:	a903      	add	r1, sp, #12
   30d6e:	f7f5 ffcf 	bl	26d10 <nrf_modem_os_timedwait>
   30d72:	6833      	ldr	r3, [r6, #0]
   30d74:	2b01      	cmp	r3, #1
   30d76:	d0f8      	beq.n	30d6a <ip_interface_getaddrinfo+0x196>
   30d78:	f8d9 0000 	ldr.w	r0, [r9]
   30d7c:	b920      	cbnz	r0, 30d88 <ip_interface_getaddrinfo+0x1b4>
   30d7e:	f8db 3000 	ldr.w	r3, [fp]
   30d82:	9a00      	ldr	r2, [sp, #0]
   30d84:	6013      	str	r3, [r2, #0]
   30d86:	e73e      	b.n	30c06 <ip_interface_getaddrinfo+0x32>
   30d88:	2300      	movs	r3, #0
   30d8a:	6033      	str	r3, [r6, #0]
   30d8c:	4b14      	ldr	r3, [pc, #80]	; (30de0 <ip_interface_getaddrinfo+0x20c>)
   30d8e:	6818      	ldr	r0, [r3, #0]
   30d90:	b108      	cbz	r0, 30d96 <ip_interface_getaddrinfo+0x1c2>
   30d92:	f7f6 f875 	bl	26e80 <nrf_modem_os_errno_set>
   30d96:	f8d9 0000 	ldr.w	r0, [r9]
   30d9a:	e734      	b.n	30c06 <ip_interface_getaddrinfo+0x32>
   30d9c:	f44f 708a 	mov.w	r0, #276	; 0x114
   30da0:	e731      	b.n	30c06 <ip_interface_getaddrinfo+0x32>
   30da2:	2e00      	cmp	r6, #0
   30da4:	f43f af5e 	beq.w	30c64 <ip_interface_getaddrinfo+0x90>
   30da8:	6823      	ldr	r3, [r4, #0]
   30daa:	04db      	lsls	r3, r3, #19
   30dac:	f57f af5a 	bpl.w	30c64 <ip_interface_getaddrinfo+0x90>
   30db0:	213a      	movs	r1, #58	; 0x3a
   30db2:	4630      	mov	r0, r6
   30db4:	f00d fa7f 	bl	3e2b6 <strchr>
   30db8:	2800      	cmp	r0, #0
   30dba:	d196      	bne.n	30cea <ip_interface_getaddrinfo+0x116>
   30dbc:	4601      	mov	r1, r0
   30dbe:	220a      	movs	r2, #10
   30dc0:	4630      	mov	r0, r6
   30dc2:	f006 ffb3 	bl	37d2c <strtoul>
   30dc6:	e74f      	b.n	30c68 <ip_interface_getaddrinfo+0x94>
   30dc8:	2001ca4c 	.word	0x2001ca4c
   30dcc:	20018908 	.word	0x20018908
   30dd0:	2001d69a 	.word	0x2001d69a
   30dd4:	20018918 	.word	0x20018918
   30dd8:	0004590b 	.word	0x0004590b
   30ddc:	000457e2 	.word	0x000457e2
   30de0:	20018910 	.word	0x20018910
   30de4:	2001890c 	.word	0x2001890c
   30de8:	2001891c 	.word	0x2001891c
   30dec:	20018914 	.word	0x20018914

00030df0 <ip_interface_freeaddrinfo>:
   30df0:	b538      	push	{r3, r4, r5, lr}
   30df2:	4d0a      	ldr	r5, [pc, #40]	; (30e1c <ip_interface_freeaddrinfo+0x2c>)
   30df4:	4604      	mov	r4, r0
   30df6:	682b      	ldr	r3, [r5, #0]
   30df8:	2b02      	cmp	r3, #2
   30dfa:	d10e      	bne.n	30e1a <ip_interface_freeaddrinfo+0x2a>
   30dfc:	b148      	cbz	r0, 30e12 <ip_interface_freeaddrinfo+0x22>
   30dfe:	6940      	ldr	r0, [r0, #20]
   30e00:	f7f6 f9f8 	bl	271f4 <nrf_modem_os_free>
   30e04:	69a0      	ldr	r0, [r4, #24]
   30e06:	b108      	cbz	r0, 30e0c <ip_interface_freeaddrinfo+0x1c>
   30e08:	f7f6 f9f4 	bl	271f4 <nrf_modem_os_free>
   30e0c:	4620      	mov	r0, r4
   30e0e:	f7f6 f9f1 	bl	271f4 <nrf_modem_os_free>
   30e12:	2300      	movs	r3, #0
   30e14:	4a02      	ldr	r2, [pc, #8]	; (30e20 <ip_interface_freeaddrinfo+0x30>)
   30e16:	602b      	str	r3, [r5, #0]
   30e18:	6013      	str	r3, [r2, #0]
   30e1a:	bd38      	pop	{r3, r4, r5, pc}
   30e1c:	20018918 	.word	0x20018918
   30e20:	20018914 	.word	0x20018914

00030e24 <rpc_ip_event_handler>:
   30e24:	f248 030d 	movw	r3, #32781	; 0x800d
   30e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30e2c:	4299      	cmp	r1, r3
   30e2e:	4604      	mov	r4, r0
   30e30:	460e      	mov	r6, r1
   30e32:	b087      	sub	sp, #28
   30e34:	d038      	beq.n	30ea8 <rpc_ip_event_handler+0x84>
   30e36:	f248 030f 	movw	r3, #32783	; 0x800f
   30e3a:	4299      	cmp	r1, r3
   30e3c:	f000 80d2 	beq.w	30fe4 <rpc_ip_event_handler+0x1c0>
   30e40:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   30e44:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   30e48:	68c0      	ldr	r0, [r0, #12]
   30e4a:	f040 80d5 	bne.w	30ff8 <rpc_ip_event_handler+0x1d4>
   30e4e:	f7ff f8f5 	bl	3003c <interface_from_internal_id_search>
   30e52:	4607      	mov	r7, r0
   30e54:	4638      	mov	r0, r7
   30e56:	f7ff f909 	bl	3006c <interface_socket_from_handle_get>
   30e5a:	4605      	mov	r5, r0
   30e5c:	2800      	cmp	r0, #0
   30e5e:	d056      	beq.n	30f0e <rpc_ip_event_handler+0xea>
   30e60:	4601      	mov	r1, r0
   30e62:	4633      	mov	r3, r6
   30e64:	4622      	mov	r2, r4
   30e66:	4638      	mov	r0, r7
   30e68:	f000 fdc6 	bl	319f8 <tls_rpc_ip_event_handler>
   30e6c:	2800      	cmp	r0, #0
   30e6e:	f000 80c1 	beq.w	30ff4 <rpc_ip_event_handler+0x1d0>
   30e72:	f248 030c 	movw	r3, #32780	; 0x800c
   30e76:	429e      	cmp	r6, r3
   30e78:	f200 80c0 	bhi.w	30ffc <rpc_ip_event_handler+0x1d8>
   30e7c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   30e80:	d945      	bls.n	30f0e <rpc_ip_event_handler+0xea>
   30e82:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   30e86:	3e01      	subs	r6, #1
   30e88:	2e0b      	cmp	r6, #11
   30e8a:	d840      	bhi.n	30f0e <rpc_ip_event_handler+0xea>
   30e8c:	e8df f016 	tbh	[pc, r6, lsl #1]
   30e90:	013f00f7 	.word	0x013f00f7
   30e94:	01ee01e4 	.word	0x01ee01e4
   30e98:	01ba0130 	.word	0x01ba0130
   30e9c:	015901ba 	.word	0x015901ba
   30ea0:	003f0105 	.word	0x003f0105
   30ea4:	0184003f 	.word	0x0184003f
   30ea8:	4bb2      	ldr	r3, [pc, #712]	; (31174 <rpc_ip_event_handler+0x350>)
   30eaa:	681b      	ldr	r3, [r3, #0]
   30eac:	2b01      	cmp	r3, #1
   30eae:	d12e      	bne.n	30f0e <rpc_ip_event_handler+0xea>
   30eb0:	f8d0 8014 	ldr.w	r8, [r0, #20]
   30eb4:	f1b8 0f00 	cmp.w	r8, #0
   30eb8:	f040 808e 	bne.w	30fd8 <rpc_ip_event_handler+0x1b4>
   30ebc:	f8d0 a018 	ldr.w	sl, [r0, #24]
   30ec0:	f8d0 9000 	ldr.w	r9, [r0]
   30ec4:	ea4f 134a 	mov.w	r3, sl, lsl #5
   30ec8:	4618      	mov	r0, r3
   30eca:	9301      	str	r3, [sp, #4]
   30ecc:	f7f6 f98a 	bl	271e4 <nrf_modem_os_alloc>
   30ed0:	9000      	str	r0, [sp, #0]
   30ed2:	b308      	cbz	r0, 30f18 <rpc_ip_event_handler+0xf4>
   30ed4:	2024      	movs	r0, #36	; 0x24
   30ed6:	fb00 f00a 	mul.w	r0, r0, sl
   30eda:	f7f6 f983 	bl	271e4 <nrf_modem_os_alloc>
   30ede:	b1e8      	cbz	r0, 30f1c <rpc_ip_event_handler+0xf8>
   30ee0:	2704      	movs	r7, #4
   30ee2:	9b00      	ldr	r3, [sp, #0]
   30ee4:	f100 050c 	add.w	r5, r0, #12
   30ee8:	f103 0620 	add.w	r6, r3, #32
   30eec:	45c2      	cmp	sl, r8
   30eee:	d119      	bne.n	30f24 <rpc_ip_event_handler+0x100>
   30ef0:	f1ba 0f00 	cmp.w	sl, #0
   30ef4:	d005      	beq.n	30f02 <rpc_ip_event_handler+0xde>
   30ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
   30efa:	4413      	add	r3, r2
   30efc:	2200      	movs	r2, #0
   30efe:	f843 2c04 	str.w	r2, [r3, #-4]
   30f02:	4b9d      	ldr	r3, [pc, #628]	; (31178 <rpc_ip_event_handler+0x354>)
   30f04:	9a00      	ldr	r2, [sp, #0]
   30f06:	601a      	str	r2, [r3, #0]
   30f08:	2302      	movs	r3, #2
   30f0a:	4a9a      	ldr	r2, [pc, #616]	; (31174 <rpc_ip_event_handler+0x350>)
   30f0c:	6013      	str	r3, [r2, #0]
   30f0e:	6820      	ldr	r0, [r4, #0]
   30f10:	2800      	cmp	r0, #0
   30f12:	f040 8174 	bne.w	311fe <rpc_ip_event_handler+0x3da>
   30f16:	e06d      	b.n	30ff4 <rpc_ip_event_handler+0x1d0>
   30f18:	f7f6 f96c 	bl	271f4 <nrf_modem_os_free>
   30f1c:	220c      	movs	r2, #12
   30f1e:	4b97      	ldr	r3, [pc, #604]	; (3117c <rpc_ip_event_handler+0x358>)
   30f20:	601a      	str	r2, [r3, #0]
   30f22:	e7ee      	b.n	30f02 <rpc_ip_event_handler+0xde>
   30f24:	f859 3007 	ldr.w	r3, [r9, r7]
   30f28:	f1a5 010c 	sub.w	r1, r5, #12
   30f2c:	f846 3c20 	str.w	r3, [r6, #-32]
   30f30:	eb09 0307 	add.w	r3, r9, r7
   30f34:	685b      	ldr	r3, [r3, #4]
   30f36:	3b01      	subs	r3, #1
   30f38:	2b04      	cmp	r3, #4
   30f3a:	bf8e      	itee	hi
   30f3c:	2300      	movhi	r3, #0
   30f3e:	4a90      	ldrls	r2, [pc, #576]	; (31180 <rpc_ip_event_handler+0x35c>)
   30f40:	56d3      	ldrsbls	r3, [r2, r3]
   30f42:	f846 3c1c 	str.w	r3, [r6, #-28]
   30f46:	4b8f      	ldr	r3, [pc, #572]	; (31184 <rpc_ip_event_handler+0x360>)
   30f48:	681b      	ldr	r3, [r3, #0]
   30f4a:	f846 3c18 	str.w	r3, [r6, #-24]
   30f4e:	4b8e      	ldr	r3, [pc, #568]	; (31188 <rpc_ip_event_handler+0x364>)
   30f50:	681b      	ldr	r3, [r3, #0]
   30f52:	f846 3c14 	str.w	r3, [r6, #-20]
   30f56:	eb09 0307 	add.w	r3, r9, r7
   30f5a:	8a1a      	ldrh	r2, [r3, #16]
   30f5c:	f8b3 b012 	ldrh.w	fp, [r3, #18]
   30f60:	4b8a      	ldr	r3, [pc, #552]	; (3118c <rpc_ip_event_handler+0x368>)
   30f62:	3714      	adds	r7, #20
   30f64:	2a04      	cmp	r2, #4
   30f66:	f846 1c0c 	str.w	r1, [r6, #-12]
   30f6a:	881b      	ldrh	r3, [r3, #0]
   30f6c:	f846 2c10 	str.w	r2, [r6, #-16]
   30f70:	eb09 0107 	add.w	r1, r9, r7
   30f74:	d126      	bne.n	30fc4 <rpc_ip_event_handler+0x1a0>
   30f76:	2002      	movs	r0, #2
   30f78:	f845 0c08 	str.w	r0, [r5, #-8]
   30f7c:	2010      	movs	r0, #16
   30f7e:	f805 0c0c 	strb.w	r0, [r5, #-12]
   30f82:	4628      	mov	r0, r5
   30f84:	f825 3c04 	strh.w	r3, [r5, #-4]
   30f88:	f00c ffef 	bl	3df6a <memcpy>
   30f8c:	f856 3c10 	ldr.w	r3, [r6, #-16]
   30f90:	f10b 0001 	add.w	r0, fp, #1
   30f94:	441f      	add	r7, r3
   30f96:	f7f6 f925 	bl	271e4 <nrf_modem_os_alloc>
   30f9a:	f846 0c08 	str.w	r0, [r6, #-8]
   30f9e:	b148      	cbz	r0, 30fb4 <rpc_ip_event_handler+0x190>
   30fa0:	465a      	mov	r2, fp
   30fa2:	eb09 0107 	add.w	r1, r9, r7
   30fa6:	f00c ffe0 	bl	3df6a <memcpy>
   30faa:	2200      	movs	r2, #0
   30fac:	f856 3c08 	ldr.w	r3, [r6, #-8]
   30fb0:	f803 200b 	strb.w	r2, [r3, fp]
   30fb4:	f846 6c04 	str.w	r6, [r6, #-4]
   30fb8:	445f      	add	r7, fp
   30fba:	f108 0801 	add.w	r8, r8, #1
   30fbe:	3620      	adds	r6, #32
   30fc0:	3508      	adds	r5, #8
   30fc2:	e793      	b.n	30eec <rpc_ip_event_handler+0xc8>
   30fc4:	200a      	movs	r0, #10
   30fc6:	f845 0c08 	str.w	r0, [r5, #-8]
   30fca:	2024      	movs	r0, #36	; 0x24
   30fcc:	f825 3c04 	strh.w	r3, [r5, #-4]
   30fd0:	f805 0c0c 	strb.w	r0, [r5, #-12]
   30fd4:	1d28      	adds	r0, r5, #4
   30fd6:	e7d7      	b.n	30f88 <rpc_ip_event_handler+0x164>
   30fd8:	4640      	mov	r0, r8
   30fda:	f7ff f907 	bl	301ec <rpc_error_to_nrf_gai_errno>
   30fde:	4b67      	ldr	r3, [pc, #412]	; (3117c <rpc_ip_event_handler+0x358>)
   30fe0:	6018      	str	r0, [r3, #0]
   30fe2:	e791      	b.n	30f08 <rpc_ip_event_handler+0xe4>
   30fe4:	6940      	ldr	r0, [r0, #20]
   30fe6:	f7ff f8f9 	bl	301dc <rpc_error_to_nrf_errno>
   30fea:	2201      	movs	r2, #1
   30fec:	4b68      	ldr	r3, [pc, #416]	; (31190 <rpc_ip_event_handler+0x36c>)
   30fee:	6018      	str	r0, [r3, #0]
   30ff0:	4b68      	ldr	r3, [pc, #416]	; (31194 <rpc_ip_event_handler+0x370>)
   30ff2:	701a      	strb	r2, [r3, #0]
   30ff4:	2000      	movs	r0, #0
   30ff6:	e04d      	b.n	31094 <rpc_ip_event_handler+0x270>
   30ff8:	0c07      	lsrs	r7, r0, #16
   30ffa:	e72b      	b.n	30e54 <rpc_ip_event_handler+0x30>
   30ffc:	f249 0302 	movw	r3, #36866	; 0x9002
   31000:	429e      	cmp	r6, r3
   31002:	f000 80ad 	beq.w	31160 <rpc_ip_event_handler+0x33c>
   31006:	f249 0303 	movw	r3, #36867	; 0x9003
   3100a:	429e      	cmp	r6, r3
   3100c:	d054      	beq.n	310b8 <rpc_ip_event_handler+0x294>
   3100e:	f249 0301 	movw	r3, #36865	; 0x9001
   31012:	429e      	cmp	r6, r3
   31014:	f47f af7b 	bne.w	30f0e <rpc_ip_event_handler+0xea>
   31018:	682e      	ldr	r6, [r5, #0]
   3101a:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   3101e:	f000 80ed 	beq.w	311fc <rpc_ip_event_handler+0x3d8>
   31022:	68a3      	ldr	r3, [r4, #8]
   31024:	2b04      	cmp	r3, #4
   31026:	f240 80e6 	bls.w	311f6 <rpc_ip_event_handler+0x3d2>
   3102a:	8a67      	ldrh	r7, [r4, #18]
   3102c:	2f00      	cmp	r7, #0
   3102e:	f000 80e3 	beq.w	311f8 <rpc_ip_event_handler+0x3d4>
   31032:	2f10      	cmp	r7, #16
   31034:	f040 80c3 	bne.w	311be <rpc_ip_event_handler+0x39a>
   31038:	2024      	movs	r0, #36	; 0x24
   3103a:	f7f6 f8d3 	bl	271e4 <nrf_modem_os_alloc>
   3103e:	4606      	mov	r6, r0
   31040:	b1d8      	cbz	r0, 3107a <rpc_ip_event_handler+0x256>
   31042:	230a      	movs	r3, #10
   31044:	2724      	movs	r7, #36	; 0x24
   31046:	6043      	str	r3, [r0, #4]
   31048:	7007      	strb	r7, [r0, #0]
   3104a:	7c62      	ldrb	r2, [r4, #17]
   3104c:	7c23      	ldrb	r3, [r4, #16]
   3104e:	f104 0114 	add.w	r1, r4, #20
   31052:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   31056:	2210      	movs	r2, #16
   31058:	8103      	strh	r3, [r0, #8]
   3105a:	4410      	add	r0, r2
   3105c:	f00c ff85 	bl	3df6a <memcpy>
   31060:	6823      	ldr	r3, [r4, #0]
   31062:	69e8      	ldr	r0, [r5, #28]
   31064:	9302      	str	r3, [sp, #8]
   31066:	6863      	ldr	r3, [r4, #4]
   31068:	9705      	str	r7, [sp, #20]
   3106a:	e9cd 3603 	strd	r3, r6, [sp, #12]
   3106e:	6803      	ldr	r3, [r0, #0]
   31070:	a902      	add	r1, sp, #8
   31072:	685b      	ldr	r3, [r3, #4]
   31074:	4798      	blx	r3
   31076:	3001      	adds	r0, #1
   31078:	d177      	bne.n	3116a <rpc_ip_event_handler+0x346>
   3107a:	2002      	movs	r0, #2
   3107c:	e00a      	b.n	31094 <rpc_ip_event_handler+0x270>
   3107e:	682b      	ldr	r3, [r5, #0]
   31080:	2b01      	cmp	r3, #1
   31082:	d1b7      	bne.n	30ff4 <rpc_ip_event_handler+0x1d0>
   31084:	6960      	ldr	r0, [r4, #20]
   31086:	2800      	cmp	r0, #0
   31088:	f040 8100 	bne.w	3128c <rpc_ip_event_handler+0x468>
   3108c:	2302      	movs	r3, #2
   3108e:	602b      	str	r3, [r5, #0]
   31090:	69a3      	ldr	r3, [r4, #24]
   31092:	61ab      	str	r3, [r5, #24]
   31094:	b007      	add	sp, #28
   31096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3109a:	682b      	ldr	r3, [r5, #0]
   3109c:	b29b      	uxth	r3, r3
   3109e:	2b0d      	cmp	r3, #13
   310a0:	d1a8      	bne.n	30ff4 <rpc_ip_event_handler+0x1d0>
   310a2:	6960      	ldr	r0, [r4, #20]
   310a4:	2800      	cmp	r0, #0
   310a6:	f040 80f1 	bne.w	3128c <rpc_ip_event_handler+0x468>
   310aa:	682b      	ldr	r3, [r5, #0]
   310ac:	0c1b      	lsrs	r3, r3, #16
   310ae:	041b      	lsls	r3, r3, #16
   310b0:	f043 030e 	orr.w	r3, r3, #14
   310b4:	602b      	str	r3, [r5, #0]
   310b6:	e7ed      	b.n	31094 <rpc_ip_event_handler+0x270>
   310b8:	682b      	ldr	r3, [r5, #0]
   310ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   310be:	602b      	str	r3, [r5, #0]
   310c0:	682b      	ldr	r3, [r5, #0]
   310c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   310c6:	602b      	str	r3, [r5, #0]
   310c8:	682b      	ldr	r3, [r5, #0]
   310ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   310ce:	602b      	str	r3, [r5, #0]
   310d0:	6920      	ldr	r0, [r4, #16]
   310d2:	286c      	cmp	r0, #108	; 0x6c
   310d4:	d107      	bne.n	310e6 <rpc_ip_event_handler+0x2c2>
   310d6:	682b      	ldr	r3, [r5, #0]
   310d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   310dc:	602b      	str	r3, [r5, #0]
   310de:	2339      	movs	r3, #57	; 0x39
   310e0:	606b      	str	r3, [r5, #4]
   310e2:	60ab      	str	r3, [r5, #8]
   310e4:	e786      	b.n	30ff4 <rpc_ip_event_handler+0x1d0>
   310e6:	f7ff f879 	bl	301dc <rpc_error_to_nrf_errno>
   310ea:	6068      	str	r0, [r5, #4]
   310ec:	60a8      	str	r0, [r5, #8]
   310ee:	e781      	b.n	30ff4 <rpc_ip_event_handler+0x1d0>
   310f0:	682b      	ldr	r3, [r5, #0]
   310f2:	b29b      	uxth	r3, r3
   310f4:	2b03      	cmp	r3, #3
   310f6:	f47f af7d 	bne.w	30ff4 <rpc_ip_event_handler+0x1d0>
   310fa:	6960      	ldr	r0, [r4, #20]
   310fc:	2800      	cmp	r0, #0
   310fe:	f040 80c5 	bne.w	3128c <rpc_ip_event_handler+0x468>
   31102:	682b      	ldr	r3, [r5, #0]
   31104:	0c1b      	lsrs	r3, r3, #16
   31106:	041b      	lsls	r3, r3, #16
   31108:	f043 0304 	orr.w	r3, r3, #4
   3110c:	e7d2      	b.n	310b4 <rpc_ip_event_handler+0x290>
   3110e:	682b      	ldr	r3, [r5, #0]
   31110:	0098      	lsls	r0, r3, #2
   31112:	f57f af6f 	bpl.w	30ff4 <rpc_ip_event_handler+0x1d0>
   31116:	682b      	ldr	r3, [r5, #0]
   31118:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   3111c:	602b      	str	r3, [r5, #0]
   3111e:	6960      	ldr	r0, [r4, #20]
   31120:	2800      	cmp	r0, #0
   31122:	f040 8095 	bne.w	31250 <rpc_ip_event_handler+0x42c>
   31126:	682b      	ldr	r3, [r5, #0]
   31128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3112c:	602b      	str	r3, [r5, #0]
   3112e:	682b      	ldr	r3, [r5, #0]
   31130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   31134:	602b      	str	r3, [r5, #0]
   31136:	682b      	ldr	r3, [r5, #0]
   31138:	0c1b      	lsrs	r3, r3, #16
   3113a:	041b      	lsls	r3, r3, #16
   3113c:	f043 0305 	orr.w	r3, r3, #5
   31140:	e7b8      	b.n	310b4 <rpc_ip_event_handler+0x290>
   31142:	682b      	ldr	r3, [r5, #0]
   31144:	b29b      	uxth	r3, r3
   31146:	2b06      	cmp	r3, #6
   31148:	f47f af54 	bne.w	30ff4 <rpc_ip_event_handler+0x1d0>
   3114c:	6960      	ldr	r0, [r4, #20]
   3114e:	2800      	cmp	r0, #0
   31150:	f040 809c 	bne.w	3128c <rpc_ip_event_handler+0x468>
   31154:	682b      	ldr	r3, [r5, #0]
   31156:	0c1b      	lsrs	r3, r3, #16
   31158:	041b      	lsls	r3, r3, #16
   3115a:	f043 0307 	orr.w	r3, r3, #7
   3115e:	e7a9      	b.n	310b4 <rpc_ip_event_handler+0x290>
   31160:	682b      	ldr	r3, [r5, #0]
   31162:	b29b      	uxth	r3, r3
   31164:	2b07      	cmp	r3, #7
   31166:	f47f af45 	bne.w	30ff4 <rpc_ip_event_handler+0x1d0>
   3116a:	682b      	ldr	r3, [r5, #0]
   3116c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   31170:	602b      	str	r3, [r5, #0]
   31172:	e73f      	b.n	30ff4 <rpc_ip_event_handler+0x1d0>
   31174:	20018918 	.word	0x20018918
   31178:	2001891c 	.word	0x2001891c
   3117c:	20018914 	.word	0x20018914
   31180:	000457eb 	.word	0x000457eb
   31184:	2001890c 	.word	0x2001890c
   31188:	20018908 	.word	0x20018908
   3118c:	2001ca4c 	.word	0x2001ca4c
   31190:	20018944 	.word	0x20018944
   31194:	2001d69b 	.word	0x2001d69b
   31198:	682b      	ldr	r3, [r5, #0]
   3119a:	b29b      	uxth	r3, r3
   3119c:	2b08      	cmp	r3, #8
   3119e:	f47f af29 	bne.w	30ff4 <rpc_ip_event_handler+0x1d0>
   311a2:	6960      	ldr	r0, [r4, #20]
   311a4:	2800      	cmp	r0, #0
   311a6:	d171      	bne.n	3128c <rpc_ip_event_handler+0x468>
   311a8:	4b3a      	ldr	r3, [pc, #232]	; (31294 <rpc_ip_event_handler+0x470>)
   311aa:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   311ae:	682b      	ldr	r3, [r5, #0]
   311b0:	0c1b      	lsrs	r3, r3, #16
   311b2:	041b      	lsls	r3, r3, #16
   311b4:	f043 0309 	orr.w	r3, r3, #9
   311b8:	602b      	str	r3, [r5, #0]
   311ba:	2001      	movs	r0, #1
   311bc:	e76a      	b.n	31094 <rpc_ip_event_handler+0x270>
   311be:	2f04      	cmp	r7, #4
   311c0:	d11c      	bne.n	311fc <rpc_ip_event_handler+0x3d8>
   311c2:	2010      	movs	r0, #16
   311c4:	f7f6 f80e 	bl	271e4 <nrf_modem_os_alloc>
   311c8:	4606      	mov	r6, r0
   311ca:	2800      	cmp	r0, #0
   311cc:	f43f af55 	beq.w	3107a <rpc_ip_event_handler+0x256>
   311d0:	2302      	movs	r3, #2
   311d2:	f04f 0810 	mov.w	r8, #16
   311d6:	6043      	str	r3, [r0, #4]
   311d8:	f880 8000 	strb.w	r8, [r0]
   311dc:	7c62      	ldrb	r2, [r4, #17]
   311de:	7c23      	ldrb	r3, [r4, #16]
   311e0:	f104 0114 	add.w	r1, r4, #20
   311e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   311e8:	8103      	strh	r3, [r0, #8]
   311ea:	463a      	mov	r2, r7
   311ec:	300c      	adds	r0, #12
   311ee:	f00c febc 	bl	3df6a <memcpy>
   311f2:	4647      	mov	r7, r8
   311f4:	e734      	b.n	31060 <rpc_ip_event_handler+0x23c>
   311f6:	2700      	movs	r7, #0
   311f8:	463e      	mov	r6, r7
   311fa:	e731      	b.n	31060 <rpc_ip_event_handler+0x23c>
   311fc:	6820      	ldr	r0, [r4, #0]
   311fe:	f00b fbc5 	bl	3c98c <rpc_ip_client_data_free>
   31202:	e6f7      	b.n	30ff4 <rpc_ip_event_handler+0x1d0>
   31204:	682b      	ldr	r3, [r5, #0]
   31206:	0299      	lsls	r1, r3, #10
   31208:	f57f aef4 	bpl.w	30ff4 <rpc_ip_event_handler+0x1d0>
   3120c:	6960      	ldr	r0, [r4, #20]
   3120e:	b938      	cbnz	r0, 31220 <rpc_ip_event_handler+0x3fc>
   31210:	682b      	ldr	r3, [r5, #0]
   31212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   31216:	602b      	str	r3, [r5, #0]
   31218:	4b1e      	ldr	r3, [pc, #120]	; (31294 <rpc_ip_event_handler+0x470>)
   3121a:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   3121e:	e7cc      	b.n	311ba <rpc_ip_event_handler+0x396>
   31220:	286b      	cmp	r0, #107	; 0x6b
   31222:	d10e      	bne.n	31242 <rpc_ip_event_handler+0x41e>
   31224:	692b      	ldr	r3, [r5, #16]
   31226:	220c      	movs	r2, #12
   31228:	2b01      	cmp	r3, #1
   3122a:	d105      	bne.n	31238 <rpc_ip_event_handler+0x414>
   3122c:	682b      	ldr	r3, [r5, #0]
   3122e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   31232:	602b      	str	r3, [r5, #0]
   31234:	606a      	str	r2, [r5, #4]
   31236:	e6dd      	b.n	30ff4 <rpc_ip_event_handler+0x1d0>
   31238:	606a      	str	r2, [r5, #4]
   3123a:	682b      	ldr	r3, [r5, #0]
   3123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   31240:	e796      	b.n	31170 <rpc_ip_event_handler+0x34c>
   31242:	f020 0302 	bic.w	r3, r0, #2
   31246:	2b01      	cmp	r3, #1
   31248:	d102      	bne.n	31250 <rpc_ip_event_handler+0x42c>
   3124a:	230c      	movs	r3, #12
   3124c:	606b      	str	r3, [r5, #4]
   3124e:	e6d1      	b.n	30ff4 <rpc_ip_event_handler+0x1d0>
   31250:	f7fe ffc4 	bl	301dc <rpc_error_to_nrf_errno>
   31254:	6068      	str	r0, [r5, #4]
   31256:	e7f0      	b.n	3123a <rpc_ip_event_handler+0x416>
   31258:	682b      	ldr	r3, [r5, #0]
   3125a:	025a      	lsls	r2, r3, #9
   3125c:	f57f aeca 	bpl.w	30ff4 <rpc_ip_event_handler+0x1d0>
   31260:	6960      	ldr	r0, [r4, #20]
   31262:	b998      	cbnz	r0, 3128c <rpc_ip_event_handler+0x468>
   31264:	682b      	ldr	r3, [r5, #0]
   31266:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   3126a:	e723      	b.n	310b4 <rpc_ip_event_handler+0x290>
   3126c:	682b      	ldr	r3, [r5, #0]
   3126e:	01db      	lsls	r3, r3, #7
   31270:	f57f aec0 	bpl.w	30ff4 <rpc_ip_event_handler+0x1d0>
   31274:	6960      	ldr	r0, [r4, #20]
   31276:	b948      	cbnz	r0, 3128c <rpc_ip_event_handler+0x468>
   31278:	6820      	ldr	r0, [r4, #0]
   3127a:	b118      	cbz	r0, 31284 <rpc_ip_event_handler+0x460>
   3127c:	2001      	movs	r0, #1
   3127e:	4b05      	ldr	r3, [pc, #20]	; (31294 <rpc_ip_event_handler+0x470>)
   31280:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   31284:	682b      	ldr	r3, [r5, #0]
   31286:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   3128a:	e713      	b.n	310b4 <rpc_ip_event_handler+0x290>
   3128c:	f7fe ffa6 	bl	301dc <rpc_error_to_nrf_errno>
   31290:	6068      	str	r0, [r5, #4]
   31292:	e6af      	b.n	30ff4 <rpc_ip_event_handler+0x1d0>
   31294:	20018920 	.word	0x20018920

00031298 <secure_socket_dtls_timeout_check>:
   31298:	281f      	cmp	r0, #31
   3129a:	dc0b      	bgt.n	312b4 <secure_socket_dtls_timeout_check+0x1c>
   3129c:	2800      	cmp	r0, #0
   3129e:	dd10      	ble.n	312c2 <secure_socket_dtls_timeout_check+0x2a>
   312a0:	2301      	movs	r3, #1
   312a2:	fa03 f000 	lsl.w	r0, r3, r0
   312a6:	4b09      	ldr	r3, [pc, #36]	; (312cc <secure_socket_dtls_timeout_check+0x34>)
   312a8:	4003      	ands	r3, r0
   312aa:	2b00      	cmp	r3, #0
   312ac:	bf0c      	ite	eq
   312ae:	2016      	moveq	r0, #22
   312b0:	2000      	movne	r0, #0
   312b2:	4770      	bx	lr
   312b4:	283f      	cmp	r0, #63	; 0x3f
   312b6:	d006      	beq.n	312c6 <secure_socket_dtls_timeout_check+0x2e>
   312b8:	287b      	cmp	r0, #123	; 0x7b
   312ba:	bf14      	ite	ne
   312bc:	2016      	movne	r0, #22
   312be:	2000      	moveq	r0, #0
   312c0:	4770      	bx	lr
   312c2:	2016      	movs	r0, #22
   312c4:	4770      	bx	lr
   312c6:	2000      	movs	r0, #0
   312c8:	4770      	bx	lr
   312ca:	bf00      	nop
   312cc:	8000808a 	.word	0x8000808a

000312d0 <hostname_free>:
   312d0:	b538      	push	{r3, r4, r5, lr}
   312d2:	4c07      	ldr	r4, [pc, #28]	; (312f0 <hostname_free+0x20>)
   312d4:	4605      	mov	r5, r0
   312d6:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   312da:	b138      	cbz	r0, 312ec <hostname_free+0x1c>
   312dc:	f7f5 ff8a 	bl	271f4 <nrf_modem_os_free>
   312e0:	2300      	movs	r3, #0
   312e2:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   312e6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   312ea:	6063      	str	r3, [r4, #4]
   312ec:	bd38      	pop	{r3, r4, r5, pc}
   312ee:	bf00      	nop
   312f0:	20018948 	.word	0x20018948

000312f4 <secure_socket_attach_initiate>:
   312f4:	f04f 33ff 	mov.w	r3, #4294967295
   312f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   312fc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3138c <secure_socket_attach_initiate+0x98>
   31300:	9301      	str	r3, [sp, #4]
   31302:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   31306:	460c      	mov	r4, r1
   31308:	4616      	mov	r6, r2
   3130a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3130e:	f247 0281 	movw	r2, #28801	; 0x7081
   31312:	6989      	ldr	r1, [r1, #24]
   31314:	4607      	mov	r7, r0
   31316:	f00b fd31 	bl	3cd7c <ip_interface_request_create>
   3131a:	4605      	mov	r5, r0
   3131c:	b378      	cbz	r0, 3137e <secure_socket_attach_initiate+0x8a>
   3131e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   31322:	b122      	cbz	r2, 3132e <secure_socket_attach_initiate+0x3a>
   31324:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   31328:	6800      	ldr	r0, [r0, #0]
   3132a:	f00c fe1e 	bl	3df6a <memcpy>
   3132e:	2224      	movs	r2, #36	; 0x24
   31330:	4915      	ldr	r1, [pc, #84]	; (31388 <secure_socket_attach_initiate+0x94>)
   31332:	f105 0014 	add.w	r0, r5, #20
   31336:	fb02 1107 	mla	r1, r2, r7, r1
   3133a:	f00c fe16 	bl	3df6a <memcpy>
   3133e:	6821      	ldr	r1, [r4, #0]
   31340:	68ab      	ldr	r3, [r5, #8]
   31342:	0c09      	lsrs	r1, r1, #16
   31344:	0409      	lsls	r1, r1, #16
   31346:	3324      	adds	r3, #36	; 0x24
   31348:	f041 010a 	orr.w	r1, r1, #10
   3134c:	60ab      	str	r3, [r5, #8]
   3134e:	f247 0281 	movw	r2, #28801	; 0x7081
   31352:	6021      	str	r1, [r4, #0]
   31354:	4633      	mov	r3, r6
   31356:	4629      	mov	r1, r5
   31358:	4620      	mov	r0, r4
   3135a:	f00b fd27 	bl	3cdac <ip_interface_request_send>
   3135e:	b958      	cbnz	r0, 31378 <secure_socket_attach_initiate+0x84>
   31360:	6823      	ldr	r3, [r4, #0]
   31362:	00db      	lsls	r3, r3, #3
   31364:	d40d      	bmi.n	31382 <secure_socket_attach_initiate+0x8e>
   31366:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3136a:	210b      	movs	r1, #11
   3136c:	4638      	mov	r0, r7
   3136e:	ab01      	add	r3, sp, #4
   31370:	f00b fd2f 	bl	3cdd2 <ip_interface_wait>
   31374:	b100      	cbz	r0, 31378 <secure_socket_attach_initiate+0x84>
   31376:	6026      	str	r6, [r4, #0]
   31378:	b003      	add	sp, #12
   3137a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3137e:	200c      	movs	r0, #12
   31380:	e7fa      	b.n	31378 <secure_socket_attach_initiate+0x84>
   31382:	2073      	movs	r0, #115	; 0x73
   31384:	e7f8      	b.n	31378 <secure_socket_attach_initiate+0x84>
   31386:	bf00      	nop
   31388:	2001d69d 	.word	0x2001d69d
   3138c:	20018948 	.word	0x20018948

00031390 <tls_interface_init>:
   31390:	2201      	movs	r2, #1
   31392:	4b02      	ldr	r3, [pc, #8]	; (3139c <tls_interface_init+0xc>)
   31394:	2000      	movs	r0, #0
   31396:	701a      	strb	r2, [r3, #0]
   31398:	4770      	bx	lr
   3139a:	bf00      	nop
   3139c:	2001d69c 	.word	0x2001d69c

000313a0 <tls_interface_open>:
   313a0:	b538      	push	{r3, r4, r5, lr}
   313a2:	4b1e      	ldr	r3, [pc, #120]	; (3141c <tls_interface_open+0x7c>)
   313a4:	4615      	mov	r5, r2
   313a6:	781b      	ldrb	r3, [r3, #0]
   313a8:	b92b      	cbnz	r3, 313b6 <tls_interface_open+0x16>
   313aa:	2070      	movs	r0, #112	; 0x70
   313ac:	f7f5 fd68 	bl	26e80 <nrf_modem_os_errno_set>
   313b0:	f04f 34ff 	mov.w	r4, #4294967295
   313b4:	e02b      	b.n	3140e <tls_interface_open+0x6e>
   313b6:	1e4b      	subs	r3, r1, #1
   313b8:	2b01      	cmp	r3, #1
   313ba:	d809      	bhi.n	313d0 <tls_interface_open+0x30>
   313bc:	b952      	cbnz	r2, 313d4 <tls_interface_open+0x34>
   313be:	2901      	cmp	r1, #1
   313c0:	bf0b      	itete	eq
   313c2:	2201      	moveq	r2, #1
   313c4:	2202      	movne	r2, #2
   313c6:	f44f 7582 	moveq.w	r5, #260	; 0x104
   313ca:	f44f 7587 	movne.w	r5, #270	; 0x10e
   313ce:	e007      	b.n	313e0 <tls_interface_open+0x40>
   313d0:	2029      	movs	r0, #41	; 0x29
   313d2:	e7eb      	b.n	313ac <tls_interface_open+0xc>
   313d4:	2901      	cmp	r1, #1
   313d6:	d11c      	bne.n	31412 <tls_interface_open+0x72>
   313d8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   313dc:	d1f8      	bne.n	313d0 <tls_interface_open+0x30>
   313de:	460a      	mov	r2, r1
   313e0:	f7fe ff38 	bl	30254 <ip_interface_open>
   313e4:	1e04      	subs	r4, r0, #0
   313e6:	dbe3      	blt.n	313b0 <tls_interface_open+0x10>
   313e8:	2224      	movs	r2, #36	; 0x24
   313ea:	480d      	ldr	r0, [pc, #52]	; (31420 <tls_interface_open+0x80>)
   313ec:	490d      	ldr	r1, [pc, #52]	; (31424 <tls_interface_open+0x84>)
   313ee:	fb02 0004 	mla	r0, r2, r4, r0
   313f2:	f00c fdba 	bl	3df6a <memcpy>
   313f6:	4620      	mov	r0, r4
   313f8:	f7fe fe38 	bl	3006c <interface_socket_from_handle_get>
   313fc:	6803      	ldr	r3, [r0, #0]
   313fe:	6145      	str	r5, [r0, #20]
   31400:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   31404:	6003      	str	r3, [r0, #0]
   31406:	6803      	ldr	r3, [r0, #0]
   31408:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3140c:	6003      	str	r3, [r0, #0]
   3140e:	4620      	mov	r0, r4
   31410:	bd38      	pop	{r3, r4, r5, pc}
   31412:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   31416:	d1db      	bne.n	313d0 <tls_interface_open+0x30>
   31418:	2202      	movs	r2, #2
   3141a:	e7e1      	b.n	313e0 <tls_interface_open+0x40>
   3141c:	2001d69c 	.word	0x2001d69c
   31420:	2001d69d 	.word	0x2001d69d
   31424:	0004585b 	.word	0x0004585b

00031428 <tls_interface_sendto>:
   31428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3142c:	b087      	sub	sp, #28
   3142e:	4607      	mov	r7, r0
   31430:	4698      	mov	r8, r3
   31432:	e9cd 1204 	strd	r1, r2, [sp, #16]
   31436:	f7fe fe19 	bl	3006c <interface_socket_from_handle_get>
   3143a:	4606      	mov	r6, r0
   3143c:	2800      	cmp	r0, #0
   3143e:	d068      	beq.n	31512 <tls_interface_sendto+0xea>
   31440:	2500      	movs	r5, #0
   31442:	f04f 0a24 	mov.w	sl, #36	; 0x24
   31446:	f018 0f02 	tst.w	r8, #2
   3144a:	bf18      	it	ne
   3144c:	2300      	movne	r3, #0
   3144e:	f04f 3bff 	mov.w	fp, #4294967295
   31452:	462c      	mov	r4, r5
   31454:	bf08      	it	eq
   31456:	6803      	ldreq	r3, [r0, #0]
   31458:	fb0a fa07 	mul.w	sl, sl, r7
   3145c:	bf04      	itt	eq
   3145e:	f083 5380 	eoreq.w	r3, r3, #268435456	; 0x10000000
   31462:	f3c3 7300 	ubfxeq	r3, r3, #28, #1
   31466:	9303      	str	r3, [sp, #12]
   31468:	9b05      	ldr	r3, [sp, #20]
   3146a:	6831      	ldr	r1, [r6, #0]
   3146c:	eba3 0905 	sub.w	r9, r3, r5
   31470:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
   31474:	b289      	uxth	r1, r1
   31476:	bfa8      	it	ge
   31478:	f44f 6900 	movge.w	r9, #2048	; 0x800
   3147c:	290c      	cmp	r1, #12
   3147e:	d110      	bne.n	314a2 <tls_interface_sendto+0x7a>
   31480:	9b11      	ldr	r3, [sp, #68]	; 0x44
   31482:	9904      	ldr	r1, [sp, #16]
   31484:	9301      	str	r3, [sp, #4]
   31486:	9b10      	ldr	r3, [sp, #64]	; 0x40
   31488:	464a      	mov	r2, r9
   3148a:	9300      	str	r3, [sp, #0]
   3148c:	4638      	mov	r0, r7
   3148e:	4643      	mov	r3, r8
   31490:	4429      	add	r1, r5
   31492:	f7fe ffa7 	bl	303e4 <ip_interface_sendto>
   31496:	f1b0 0b00 	subs.w	fp, r0, #0
   3149a:	da30      	bge.n	314fe <tls_interface_sendto+0xd6>
   3149c:	f04f 35ff 	mov.w	r5, #4294967295
   314a0:	e033      	b.n	3150a <tls_interface_sendto+0xe2>
   314a2:	6831      	ldr	r1, [r6, #0]
   314a4:	b289      	uxth	r1, r1
   314a6:	290b      	cmp	r1, #11
   314a8:	d109      	bne.n	314be <tls_interface_sendto+0x96>
   314aa:	4b23      	ldr	r3, [pc, #140]	; (31538 <tls_interface_sendto+0x110>)
   314ac:	f813 200a 	ldrb.w	r2, [r3, sl]
   314b0:	2a02      	cmp	r2, #2
   314b2:	d030      	beq.n	31516 <tls_interface_sendto+0xee>
   314b4:	6932      	ldr	r2, [r6, #16]
   314b6:	2a01      	cmp	r2, #1
   314b8:	d131      	bne.n	3151e <tls_interface_sendto+0xf6>
   314ba:	242a      	movs	r4, #42	; 0x2a
   314bc:	e038      	b.n	31530 <tls_interface_sendto+0x108>
   314be:	4630      	mov	r0, r6
   314c0:	f00b feec 	bl	3d29c <attach_trigger_condition_verify>
   314c4:	b348      	cbz	r0, 3151a <tls_interface_sendto+0xf2>
   314c6:	4b1c      	ldr	r3, [pc, #112]	; (31538 <tls_interface_sendto+0x110>)
   314c8:	f813 100a 	ldrb.w	r1, [r3, sl]
   314cc:	2902      	cmp	r1, #2
   314ce:	d12a      	bne.n	31526 <tls_interface_sendto+0xfe>
   314d0:	4631      	mov	r1, r6
   314d2:	4638      	mov	r0, r7
   314d4:	f00b fef9 	bl	3d2ca <secure_client_socket>
   314d8:	4604      	mov	r4, r0
   314da:	b958      	cbnz	r0, 314f4 <tls_interface_sendto+0xcc>
   314dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   314de:	9904      	ldr	r1, [sp, #16]
   314e0:	9301      	str	r3, [sp, #4]
   314e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   314e4:	464a      	mov	r2, r9
   314e6:	9300      	str	r3, [sp, #0]
   314e8:	4638      	mov	r0, r7
   314ea:	4643      	mov	r3, r8
   314ec:	4429      	add	r1, r5
   314ee:	f7fe ff79 	bl	303e4 <ip_interface_sendto>
   314f2:	4683      	mov	fp, r0
   314f4:	f1bb 0f00 	cmp.w	fp, #0
   314f8:	db18      	blt.n	3152c <tls_interface_sendto+0x104>
   314fa:	2c00      	cmp	r4, #0
   314fc:	dc18      	bgt.n	31530 <tls_interface_sendto+0x108>
   314fe:	9b03      	ldr	r3, [sp, #12]
   31500:	445d      	add	r5, fp
   31502:	b113      	cbz	r3, 3150a <tls_interface_sendto+0xe2>
   31504:	9b05      	ldr	r3, [sp, #20]
   31506:	42ab      	cmp	r3, r5
   31508:	dcae      	bgt.n	31468 <tls_interface_sendto+0x40>
   3150a:	4628      	mov	r0, r5
   3150c:	b007      	add	sp, #28
   3150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31512:	2409      	movs	r4, #9
   31514:	e00c      	b.n	31530 <tls_interface_sendto+0x108>
   31516:	2423      	movs	r4, #35	; 0x23
   31518:	e00a      	b.n	31530 <tls_interface_sendto+0x108>
   3151a:	2439      	movs	r4, #57	; 0x39
   3151c:	e008      	b.n	31530 <tls_interface_sendto+0x108>
   3151e:	f1bb 3fff 	cmp.w	fp, #4294967295
   31522:	d1ec      	bne.n	314fe <tls_interface_sendto+0xd6>
   31524:	e7ba      	b.n	3149c <tls_interface_sendto+0x74>
   31526:	f1bb 0f00 	cmp.w	fp, #0
   3152a:	dae8      	bge.n	314fe <tls_interface_sendto+0xd6>
   3152c:	2c00      	cmp	r4, #0
   3152e:	ddb5      	ble.n	3149c <tls_interface_sendto+0x74>
   31530:	4620      	mov	r0, r4
   31532:	f7f5 fca5 	bl	26e80 <nrf_modem_os_errno_set>
   31536:	e7b1      	b.n	3149c <tls_interface_sendto+0x74>
   31538:	2001d69d 	.word	0x2001d69d

0003153c <tls_interface_recvfrom>:
   3153c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   31540:	4604      	mov	r4, r0
   31542:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
   31546:	460e      	mov	r6, r1
   31548:	e9cd 3200 	strd	r3, r2, [sp]
   3154c:	f7fe fd8e 	bl	3006c <interface_socket_from_handle_get>
   31550:	4605      	mov	r5, r0
   31552:	b368      	cbz	r0, 315b0 <tls_interface_recvfrom+0x74>
   31554:	e9dd 3200 	ldrd	r3, r2, [sp]
   31558:	6801      	ldr	r1, [r0, #0]
   3155a:	b289      	uxth	r1, r1
   3155c:	290c      	cmp	r1, #12
   3155e:	d003      	beq.n	31568 <tls_interface_recvfrom+0x2c>
   31560:	6801      	ldr	r1, [r0, #0]
   31562:	b289      	uxth	r1, r1
   31564:	290d      	cmp	r1, #13
   31566:	d108      	bne.n	3157a <tls_interface_recvfrom+0x3e>
   31568:	4631      	mov	r1, r6
   3156a:	4620      	mov	r0, r4
   3156c:	e9cd 7808 	strd	r7, r8, [sp, #32]
   31570:	b002      	add	sp, #8
   31572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   31576:	f00b bc3c 	b.w	3cdf2 <ip_interface_recvfrom>
   3157a:	9300      	str	r3, [sp, #0]
   3157c:	f00b fe8e 	bl	3d29c <attach_trigger_condition_verify>
   31580:	b1d0      	cbz	r0, 315b8 <tls_interface_recvfrom+0x7c>
   31582:	2124      	movs	r1, #36	; 0x24
   31584:	4361      	muls	r1, r4
   31586:	480d      	ldr	r0, [pc, #52]	; (315bc <tls_interface_recvfrom+0x80>)
   31588:	9b00      	ldr	r3, [sp, #0]
   3158a:	5c41      	ldrb	r1, [r0, r1]
   3158c:	2902      	cmp	r1, #2
   3158e:	d113      	bne.n	315b8 <tls_interface_recvfrom+0x7c>
   31590:	4629      	mov	r1, r5
   31592:	4620      	mov	r0, r4
   31594:	e9cd 2300 	strd	r2, r3, [sp]
   31598:	f00b fe97 	bl	3d2ca <secure_client_socket>
   3159c:	e9dd 2300 	ldrd	r2, r3, [sp]
   315a0:	2800      	cmp	r0, #0
   315a2:	d0e1      	beq.n	31568 <tls_interface_recvfrom+0x2c>
   315a4:	dc05      	bgt.n	315b2 <tls_interface_recvfrom+0x76>
   315a6:	f04f 30ff 	mov.w	r0, #4294967295
   315aa:	b002      	add	sp, #8
   315ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   315b0:	2009      	movs	r0, #9
   315b2:	f7f5 fc65 	bl	26e80 <nrf_modem_os_errno_set>
   315b6:	e7f6      	b.n	315a6 <tls_interface_recvfrom+0x6a>
   315b8:	2023      	movs	r0, #35	; 0x23
   315ba:	e7fa      	b.n	315b2 <tls_interface_recvfrom+0x76>
   315bc:	2001d69d 	.word	0x2001d69d

000315c0 <tls_interface_bind>:
   315c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   315c2:	4604      	mov	r4, r0
   315c4:	e9cd 2100 	strd	r2, r1, [sp]
   315c8:	f7fe fd50 	bl	3006c <interface_socket_from_handle_get>
   315cc:	4605      	mov	r5, r0
   315ce:	b1e0      	cbz	r0, 3160a <tls_interface_bind+0x4a>
   315d0:	6803      	ldr	r3, [r0, #0]
   315d2:	b29b      	uxth	r3, r3
   315d4:	2b02      	cmp	r3, #2
   315d6:	d11a      	bne.n	3160e <tls_interface_bind+0x4e>
   315d8:	e9dd 2100 	ldrd	r2, r1, [sp]
   315dc:	4620      	mov	r0, r4
   315de:	f7ff f8a1 	bl	30724 <ip_interface_bind>
   315e2:	b950      	cbnz	r0, 315fa <tls_interface_bind+0x3a>
   315e4:	2324      	movs	r3, #36	; 0x24
   315e6:	4363      	muls	r3, r4
   315e8:	4a0a      	ldr	r2, [pc, #40]	; (31614 <tls_interface_bind+0x54>)
   315ea:	5cd3      	ldrb	r3, [r2, r3]
   315ec:	2b01      	cmp	r3, #1
   315ee:	d10a      	bne.n	31606 <tls_interface_bind+0x46>
   315f0:	2204      	movs	r2, #4
   315f2:	4629      	mov	r1, r5
   315f4:	4620      	mov	r0, r4
   315f6:	f7ff fe7d 	bl	312f4 <secure_socket_attach_initiate>
   315fa:	2800      	cmp	r0, #0
   315fc:	dd03      	ble.n	31606 <tls_interface_bind+0x46>
   315fe:	f7f5 fc3f 	bl	26e80 <nrf_modem_os_errno_set>
   31602:	f04f 30ff 	mov.w	r0, #4294967295
   31606:	b003      	add	sp, #12
   31608:	bd30      	pop	{r4, r5, pc}
   3160a:	2009      	movs	r0, #9
   3160c:	e7f7      	b.n	315fe <tls_interface_bind+0x3e>
   3160e:	202d      	movs	r0, #45	; 0x2d
   31610:	e7f5      	b.n	315fe <tls_interface_bind+0x3e>
   31612:	bf00      	nop
   31614:	2001d69d 	.word	0x2001d69d

00031618 <tls_interface_connect>:
   31618:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3161a:	4605      	mov	r5, r0
   3161c:	e9cd 2100 	strd	r2, r1, [sp]
   31620:	f7fe fd24 	bl	3006c <interface_socket_from_handle_get>
   31624:	4604      	mov	r4, r0
   31626:	b1f8      	cbz	r0, 31668 <tls_interface_connect+0x50>
   31628:	2324      	movs	r3, #36	; 0x24
   3162a:	436b      	muls	r3, r5
   3162c:	4810      	ldr	r0, [pc, #64]	; (31670 <tls_interface_connect+0x58>)
   3162e:	5cc3      	ldrb	r3, [r0, r3]
   31630:	2b02      	cmp	r3, #2
   31632:	d11b      	bne.n	3166c <tls_interface_connect+0x54>
   31634:	e9dd 2100 	ldrd	r2, r1, [sp]
   31638:	6823      	ldr	r3, [r4, #0]
   3163a:	b29b      	uxth	r3, r3
   3163c:	2b02      	cmp	r3, #2
   3163e:	d003      	beq.n	31648 <tls_interface_connect+0x30>
   31640:	6823      	ldr	r3, [r4, #0]
   31642:	b29b      	uxth	r3, r3
   31644:	2b04      	cmp	r3, #4
   31646:	d111      	bne.n	3166c <tls_interface_connect+0x54>
   31648:	4628      	mov	r0, r5
   3164a:	f00b fccf 	bl	3cfec <ip_interface_connect>
   3164e:	b918      	cbnz	r0, 31658 <tls_interface_connect+0x40>
   31650:	4621      	mov	r1, r4
   31652:	4628      	mov	r0, r5
   31654:	f00b fe39 	bl	3d2ca <secure_client_socket>
   31658:	2800      	cmp	r0, #0
   3165a:	dd03      	ble.n	31664 <tls_interface_connect+0x4c>
   3165c:	f7f5 fc10 	bl	26e80 <nrf_modem_os_errno_set>
   31660:	f04f 30ff 	mov.w	r0, #4294967295
   31664:	b003      	add	sp, #12
   31666:	bd30      	pop	{r4, r5, pc}
   31668:	2009      	movs	r0, #9
   3166a:	e7f7      	b.n	3165c <tls_interface_connect+0x44>
   3166c:	202d      	movs	r0, #45	; 0x2d
   3166e:	e7f5      	b.n	3165c <tls_interface_connect+0x44>
   31670:	2001d69d 	.word	0x2001d69d

00031674 <tls_interface_listen>:
   31674:	b538      	push	{r3, r4, r5, lr}
   31676:	4604      	mov	r4, r0
   31678:	460d      	mov	r5, r1
   3167a:	f7fe fcf7 	bl	3006c <interface_socket_from_handle_get>
   3167e:	2800      	cmp	r0, #0
   31680:	d034      	beq.n	316ec <tls_interface_listen+0x78>
   31682:	6803      	ldr	r3, [r0, #0]
   31684:	00db      	lsls	r3, r3, #3
   31686:	d433      	bmi.n	316f0 <tls_interface_listen+0x7c>
   31688:	6903      	ldr	r3, [r0, #16]
   3168a:	2b01      	cmp	r3, #1
   3168c:	d130      	bne.n	316f0 <tls_interface_listen+0x7c>
   3168e:	6803      	ldr	r3, [r0, #0]
   31690:	b29b      	uxth	r3, r3
   31692:	2b04      	cmp	r3, #4
   31694:	d105      	bne.n	316a2 <tls_interface_listen+0x2e>
   31696:	2324      	movs	r3, #36	; 0x24
   31698:	4363      	muls	r3, r4
   3169a:	4a16      	ldr	r2, [pc, #88]	; (316f4 <tls_interface_listen+0x80>)
   3169c:	5cd3      	ldrb	r3, [r2, r3]
   3169e:	2b02      	cmp	r3, #2
   316a0:	d009      	beq.n	316b6 <tls_interface_listen+0x42>
   316a2:	6803      	ldr	r3, [r0, #0]
   316a4:	b29b      	uxth	r3, r3
   316a6:	2b0b      	cmp	r3, #11
   316a8:	d122      	bne.n	316f0 <tls_interface_listen+0x7c>
   316aa:	2324      	movs	r3, #36	; 0x24
   316ac:	4363      	muls	r3, r4
   316ae:	4a11      	ldr	r2, [pc, #68]	; (316f4 <tls_interface_listen+0x80>)
   316b0:	5cd3      	ldrb	r3, [r2, r3]
   316b2:	2b01      	cmp	r3, #1
   316b4:	d11c      	bne.n	316f0 <tls_interface_listen+0x7c>
   316b6:	2324      	movs	r3, #36	; 0x24
   316b8:	2101      	movs	r1, #1
   316ba:	4363      	muls	r3, r4
   316bc:	4a0d      	ldr	r2, [pc, #52]	; (316f4 <tls_interface_listen+0x80>)
   316be:	54d1      	strb	r1, [r2, r3]
   316c0:	6803      	ldr	r3, [r0, #0]
   316c2:	2b0b      	cmp	r3, #11
   316c4:	d10a      	bne.n	316dc <tls_interface_listen+0x68>
   316c6:	4629      	mov	r1, r5
   316c8:	4620      	mov	r0, r4
   316ca:	f7ff f88d 	bl	307e8 <ip_interface_listen>
   316ce:	2800      	cmp	r0, #0
   316d0:	dd03      	ble.n	316da <tls_interface_listen+0x66>
   316d2:	f7f5 fbd5 	bl	26e80 <nrf_modem_os_errno_set>
   316d6:	f04f 30ff 	mov.w	r0, #4294967295
   316da:	bd38      	pop	{r3, r4, r5, pc}
   316dc:	4601      	mov	r1, r0
   316de:	6802      	ldr	r2, [r0, #0]
   316e0:	4620      	mov	r0, r4
   316e2:	f7ff fe07 	bl	312f4 <secure_socket_attach_initiate>
   316e6:	2800      	cmp	r0, #0
   316e8:	d0ed      	beq.n	316c6 <tls_interface_listen+0x52>
   316ea:	e7f0      	b.n	316ce <tls_interface_listen+0x5a>
   316ec:	2009      	movs	r0, #9
   316ee:	e7f0      	b.n	316d2 <tls_interface_listen+0x5e>
   316f0:	202d      	movs	r0, #45	; 0x2d
   316f2:	e7ee      	b.n	316d2 <tls_interface_listen+0x5e>
   316f4:	2001d69d 	.word	0x2001d69d

000316f8 <tls_interface_accept>:
   316f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   316fc:	b086      	sub	sp, #24
   316fe:	4606      	mov	r6, r0
   31700:	f04f 34ff 	mov.w	r4, #4294967295
   31704:	e9cd 2102 	strd	r2, r1, [sp, #8]
   31708:	9301      	str	r3, [sp, #4]
   3170a:	f7fe fcaf 	bl	3006c <interface_socket_from_handle_get>
   3170e:	9405      	str	r4, [sp, #20]
   31710:	2800      	cmp	r0, #0
   31712:	d048      	beq.n	317a6 <tls_interface_accept+0xae>
   31714:	6805      	ldr	r5, [r0, #0]
   31716:	b2ad      	uxth	r5, r5
   31718:	2d07      	cmp	r5, #7
   3171a:	d144      	bne.n	317a6 <tls_interface_accept+0xae>
   3171c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   31720:	6800      	ldr	r0, [r0, #0]
   31722:	9903      	ldr	r1, [sp, #12]
   31724:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   31728:	d006      	beq.n	31738 <tls_interface_accept+0x40>
   3172a:	202d      	movs	r0, #45	; 0x2d
   3172c:	f7f5 fba8 	bl	26e80 <nrf_modem_os_errno_set>
   31730:	4620      	mov	r0, r4
   31732:	b006      	add	sp, #24
   31734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31738:	4630      	mov	r0, r6
   3173a:	f7ff f8a9 	bl	30890 <ip_interface_accept>
   3173e:	1e04      	subs	r4, r0, #0
   31740:	db2b      	blt.n	3179a <tls_interface_accept+0xa2>
   31742:	f7fe fc93 	bl	3006c <interface_socket_from_handle_get>
   31746:	2224      	movs	r2, #36	; 0x24
   31748:	6803      	ldr	r3, [r0, #0]
   3174a:	fb02 f804 	mul.w	r8, r2, r4
   3174e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   31752:	6003      	str	r3, [r0, #0]
   31754:	6803      	ldr	r3, [r0, #0]
   31756:	4f15      	ldr	r7, [pc, #84]	; (317ac <tls_interface_accept+0xb4>)
   31758:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3175c:	4605      	mov	r5, r0
   3175e:	fb02 7106 	mla	r1, r2, r6, r7
   31762:	6003      	str	r3, [r0, #0]
   31764:	eb07 0008 	add.w	r0, r7, r8
   31768:	f00c fbff 	bl	3df6a <memcpy>
   3176c:	2302      	movs	r3, #2
   3176e:	f807 3008 	strb.w	r3, [r7, r8]
   31772:	682b      	ldr	r3, [r5, #0]
   31774:	f64f 72ff 	movw	r2, #65535	; 0xffff
   31778:	0c1b      	lsrs	r3, r3, #16
   3177a:	041b      	lsls	r3, r3, #16
   3177c:	f043 030b 	orr.w	r3, r3, #11
   31780:	602b      	str	r3, [r5, #0]
   31782:	210c      	movs	r1, #12
   31784:	4620      	mov	r0, r4
   31786:	ab05      	add	r3, sp, #20
   31788:	f00b fb23 	bl	3cdd2 <ip_interface_wait>
   3178c:	4605      	mov	r5, r0
   3178e:	2800      	cmp	r0, #0
   31790:	d0ce      	beq.n	31730 <tls_interface_accept+0x38>
   31792:	4620      	mov	r0, r4
   31794:	f7fe fddc 	bl	30350 <ip_interface_close>
   31798:	462c      	mov	r4, r5
   3179a:	4620      	mov	r0, r4
   3179c:	f7f5 fb70 	bl	26e80 <nrf_modem_os_errno_set>
   317a0:	f04f 34ff 	mov.w	r4, #4294967295
   317a4:	e7c4      	b.n	31730 <tls_interface_accept+0x38>
   317a6:	2409      	movs	r4, #9
   317a8:	e7f7      	b.n	3179a <tls_interface_accept+0xa2>
   317aa:	bf00      	nop
   317ac:	2001d69d 	.word	0x2001d69d

000317b0 <tls_interface_setopt>:
   317b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   317b2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   317b6:	4606      	mov	r6, r0
   317b8:	4615      	mov	r5, r2
   317ba:	461f      	mov	r7, r3
   317bc:	9c08      	ldr	r4, [sp, #32]
   317be:	d004      	beq.n	317ca <tls_interface_setopt+0x1a>
   317c0:	b003      	add	sp, #12
   317c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   317c6:	f7ff b94b 	b.w	30a60 <ip_interface_setopt>
   317ca:	b92b      	cbnz	r3, 317d8 <tls_interface_setopt+0x28>
   317cc:	200e      	movs	r0, #14
   317ce:	f7f5 fb57 	bl	26e80 <nrf_modem_os_errno_set>
   317d2:	f04f 30ff 	mov.w	r0, #4294967295
   317d6:	e024      	b.n	31822 <tls_interface_setopt+0x72>
   317d8:	f7fe fc48 	bl	3006c <interface_socket_from_handle_get>
   317dc:	4601      	mov	r1, r0
   317de:	2800      	cmp	r0, #0
   317e0:	f000 8082 	beq.w	318e8 <tls_interface_setopt+0x138>
   317e4:	6803      	ldr	r3, [r0, #0]
   317e6:	b29b      	uxth	r3, r3
   317e8:	2b02      	cmp	r3, #2
   317ea:	d007      	beq.n	317fc <tls_interface_setopt+0x4c>
   317ec:	6803      	ldr	r3, [r0, #0]
   317ee:	b29b      	uxth	r3, r3
   317f0:	2b04      	cmp	r3, #4
   317f2:	d003      	beq.n	317fc <tls_interface_setopt+0x4c>
   317f4:	6803      	ldr	r3, [r0, #0]
   317f6:	b29b      	uxth	r3, r3
   317f8:	2b05      	cmp	r3, #5
   317fa:	d175      	bne.n	318e8 <tls_interface_setopt+0x138>
   317fc:	1e6a      	subs	r2, r5, #1
   317fe:	2a08      	cmp	r2, #8
   31800:	d874      	bhi.n	318ec <tls_interface_setopt+0x13c>
   31802:	e8df f002 	tbb	[pc, r2]
   31806:	2405      	.short	0x2405
   31808:	53413618 	.word	0x53413618
   3180c:	5f73      	.short	0x5f73
   3180e:	6c          	.byte	0x6c
   3180f:	00          	.byte	0x00
   31810:	2c04      	cmp	r4, #4
   31812:	d16f      	bne.n	318f4 <tls_interface_setopt+0x144>
   31814:	6838      	ldr	r0, [r7, #0]
   31816:	b930      	cbnz	r0, 31826 <tls_interface_setopt+0x76>
   31818:	2324      	movs	r3, #36	; 0x24
   3181a:	2202      	movs	r2, #2
   3181c:	435e      	muls	r6, r3
   3181e:	4b36      	ldr	r3, [pc, #216]	; (318f8 <tls_interface_setopt+0x148>)
   31820:	559a      	strb	r2, [r3, r6]
   31822:	b003      	add	sp, #12
   31824:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31826:	2801      	cmp	r0, #1
   31828:	d164      	bne.n	318f4 <tls_interface_setopt+0x144>
   3182a:	2324      	movs	r3, #36	; 0x24
   3182c:	435e      	muls	r6, r3
   3182e:	4b32      	ldr	r3, [pc, #200]	; (318f8 <tls_interface_setopt+0x148>)
   31830:	5598      	strb	r0, [r3, r6]
   31832:	2000      	movs	r0, #0
   31834:	e7f5      	b.n	31822 <tls_interface_setopt+0x72>
   31836:	2c01      	cmp	r4, #1
   31838:	d15c      	bne.n	318f4 <tls_interface_setopt+0x144>
   3183a:	2224      	movs	r2, #36	; 0x24
   3183c:	783b      	ldrb	r3, [r7, #0]
   3183e:	482e      	ldr	r0, [pc, #184]	; (318f8 <tls_interface_setopt+0x148>)
   31840:	3b00      	subs	r3, #0
   31842:	bf18      	it	ne
   31844:	2301      	movne	r3, #1
   31846:	fb02 0606 	mla	r6, r2, r6, r0
   3184a:	7073      	strb	r3, [r6, #1]
   3184c:	e7f1      	b.n	31832 <tls_interface_setopt+0x82>
   3184e:	2c03      	cmp	r4, #3
   31850:	d950      	bls.n	318f4 <tls_interface_setopt+0x144>
   31852:	f014 0503 	ands.w	r5, r4, #3
   31856:	d14d      	bne.n	318f4 <tls_interface_setopt+0x144>
   31858:	2324      	movs	r3, #36	; 0x24
   3185a:	435e      	muls	r6, r3
   3185c:	4826      	ldr	r0, [pc, #152]	; (318f8 <tls_interface_setopt+0x148>)
   3185e:	08a2      	lsrs	r2, r4, #2
   31860:	1983      	adds	r3, r0, r6
   31862:	70da      	strb	r2, [r3, #3]
   31864:	4639      	mov	r1, r7
   31866:	4622      	mov	r2, r4
   31868:	3604      	adds	r6, #4
   3186a:	4430      	add	r0, r6
   3186c:	f00c fb7d 	bl	3df6a <memcpy>
   31870:	e7df      	b.n	31832 <tls_interface_setopt+0x82>
   31872:	2c04      	cmp	r4, #4
   31874:	d13e      	bne.n	318f4 <tls_interface_setopt+0x144>
   31876:	683b      	ldr	r3, [r7, #0]
   31878:	2b02      	cmp	r3, #2
   3187a:	d83b      	bhi.n	318f4 <tls_interface_setopt+0x144>
   3187c:	2224      	movs	r2, #36	; 0x24
   3187e:	481e      	ldr	r0, [pc, #120]	; (318f8 <tls_interface_setopt+0x148>)
   31880:	fb02 0606 	mla	r6, r2, r6, r0
   31884:	70b3      	strb	r3, [r6, #2]
   31886:	e7d4      	b.n	31832 <tls_interface_setopt+0x82>
   31888:	4630      	mov	r0, r6
   3188a:	f7ff fd21 	bl	312d0 <hostname_free>
   3188e:	2c00      	cmp	r4, #0
   31890:	d0cf      	beq.n	31832 <tls_interface_setopt+0x82>
   31892:	4620      	mov	r0, r4
   31894:	f7f5 fca6 	bl	271e4 <nrf_modem_os_alloc>
   31898:	4b18      	ldr	r3, [pc, #96]	; (318fc <tls_interface_setopt+0x14c>)
   3189a:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   3189e:	b338      	cbz	r0, 318f0 <tls_interface_setopt+0x140>
   318a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   318a4:	4622      	mov	r2, r4
   318a6:	4639      	mov	r1, r7
   318a8:	605c      	str	r4, [r3, #4]
   318aa:	e7df      	b.n	3186c <tls_interface_setopt+0xbc>
   318ac:	f247 0301 	movw	r3, #28673	; 0x7001
   318b0:	e9cd 7400 	strd	r7, r4, [sp]
   318b4:	f44f 7280 	mov.w	r2, #256	; 0x100
   318b8:	4630      	mov	r0, r6
   318ba:	f00b fc2c 	bl	3d116 <ip_interface_socketoption_send>
   318be:	2800      	cmp	r0, #0
   318c0:	d0b7      	beq.n	31832 <tls_interface_setopt+0x82>
   318c2:	e784      	b.n	317ce <tls_interface_setopt+0x1e>
   318c4:	2c04      	cmp	r4, #4
   318c6:	d115      	bne.n	318f4 <tls_interface_setopt+0x144>
   318c8:	6838      	ldr	r0, [r7, #0]
   318ca:	f7ff fce5 	bl	31298 <secure_socket_dtls_timeout_check>
   318ce:	2800      	cmp	r0, #0
   318d0:	f47f af7d 	bne.w	317ce <tls_interface_setopt+0x1e>
   318d4:	f247 0302 	movw	r3, #28674	; 0x7002
   318d8:	e9cd 7400 	strd	r7, r4, [sp]
   318dc:	e7ea      	b.n	318b4 <tls_interface_setopt+0x104>
   318de:	f247 0303 	movw	r3, #28675	; 0x7003
   318e2:	e9cd 7400 	strd	r7, r4, [sp]
   318e6:	e7e5      	b.n	318b4 <tls_interface_setopt+0x104>
   318e8:	2009      	movs	r0, #9
   318ea:	e770      	b.n	317ce <tls_interface_setopt+0x1e>
   318ec:	202a      	movs	r0, #42	; 0x2a
   318ee:	e76e      	b.n	317ce <tls_interface_setopt+0x1e>
   318f0:	200c      	movs	r0, #12
   318f2:	e76c      	b.n	317ce <tls_interface_setopt+0x1e>
   318f4:	2016      	movs	r0, #22
   318f6:	e76a      	b.n	317ce <tls_interface_setopt+0x1e>
   318f8:	2001d69d 	.word	0x2001d69d
   318fc:	20018948 	.word	0x20018948

00031900 <tls_interface_getopt>:
   31900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   31902:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   31906:	4606      	mov	r6, r0
   31908:	4617      	mov	r7, r2
   3190a:	461d      	mov	r5, r3
   3190c:	9c08      	ldr	r4, [sp, #32]
   3190e:	d004      	beq.n	3191a <tls_interface_getopt+0x1a>
   31910:	b003      	add	sp, #12
   31912:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   31916:	f00b bc66 	b.w	3d1e6 <ip_interface_getopt>
   3191a:	2b00      	cmp	r3, #0
   3191c:	d062      	beq.n	319e4 <tls_interface_getopt+0xe4>
   3191e:	2c00      	cmp	r4, #0
   31920:	d060      	beq.n	319e4 <tls_interface_getopt+0xe4>
   31922:	f7fe fba3 	bl	3006c <interface_socket_from_handle_get>
   31926:	4601      	mov	r1, r0
   31928:	2800      	cmp	r0, #0
   3192a:	d05d      	beq.n	319e8 <tls_interface_getopt+0xe8>
   3192c:	1e7a      	subs	r2, r7, #1
   3192e:	2a07      	cmp	r2, #7
   31930:	d85c      	bhi.n	319ec <tls_interface_getopt+0xec>
   31932:	e8df f002 	tbb	[pc, r2]
   31936:	1c04      	.short	0x1c04
   31938:	405b3710 	.word	0x405b3710
   3193c:	4a5b      	.short	0x4a5b
   3193e:	6823      	ldr	r3, [r4, #0]
   31940:	2b04      	cmp	r3, #4
   31942:	d155      	bne.n	319f0 <tls_interface_getopt+0xf0>
   31944:	2124      	movs	r1, #36	; 0x24
   31946:	434e      	muls	r6, r1
   31948:	4b2a      	ldr	r3, [pc, #168]	; (319f4 <tls_interface_getopt+0xf4>)
   3194a:	5d9b      	ldrb	r3, [r3, r6]
   3194c:	1e59      	subs	r1, r3, #1
   3194e:	424b      	negs	r3, r1
   31950:	414b      	adcs	r3, r1
   31952:	602b      	str	r3, [r5, #0]
   31954:	e008      	b.n	31968 <tls_interface_getopt+0x68>
   31956:	6823      	ldr	r3, [r4, #0]
   31958:	2b01      	cmp	r3, #1
   3195a:	d149      	bne.n	319f0 <tls_interface_getopt+0xf0>
   3195c:	2024      	movs	r0, #36	; 0x24
   3195e:	4925      	ldr	r1, [pc, #148]	; (319f4 <tls_interface_getopt+0xf4>)
   31960:	fb00 1606 	mla	r6, r0, r6, r1
   31964:	7873      	ldrb	r3, [r6, #1]
   31966:	702b      	strb	r3, [r5, #0]
   31968:	2000      	movs	r0, #0
   3196a:	b003      	add	sp, #12
   3196c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3196e:	2224      	movs	r2, #36	; 0x24
   31970:	4920      	ldr	r1, [pc, #128]	; (319f4 <tls_interface_getopt+0xf4>)
   31972:	6823      	ldr	r3, [r4, #0]
   31974:	fb02 1206 	mla	r2, r2, r6, r1
   31978:	78d0      	ldrb	r0, [r2, #3]
   3197a:	079a      	lsls	r2, r3, #30
   3197c:	bf14      	ite	ne
   3197e:	2300      	movne	r3, #0
   31980:	089b      	lsreq	r3, r3, #2
   31982:	4283      	cmp	r3, r0
   31984:	bf28      	it	cs
   31986:	4603      	movcs	r3, r0
   31988:	009a      	lsls	r2, r3, #2
   3198a:	b143      	cbz	r3, 3199e <tls_interface_getopt+0x9e>
   3198c:	2024      	movs	r0, #36	; 0x24
   3198e:	fb00 1106 	mla	r1, r0, r6, r1
   31992:	6022      	str	r2, [r4, #0]
   31994:	4628      	mov	r0, r5
   31996:	3104      	adds	r1, #4
   31998:	f00c fae7 	bl	3df6a <memcpy>
   3199c:	e7e4      	b.n	31968 <tls_interface_getopt+0x68>
   3199e:	bb38      	cbnz	r0, 319f0 <tls_interface_getopt+0xf0>
   319a0:	6020      	str	r0, [r4, #0]
   319a2:	e7e2      	b.n	3196a <tls_interface_getopt+0x6a>
   319a4:	6823      	ldr	r3, [r4, #0]
   319a6:	2b04      	cmp	r3, #4
   319a8:	d122      	bne.n	319f0 <tls_interface_getopt+0xf0>
   319aa:	2024      	movs	r0, #36	; 0x24
   319ac:	4911      	ldr	r1, [pc, #68]	; (319f4 <tls_interface_getopt+0xf4>)
   319ae:	fb00 1606 	mla	r6, r0, r6, r1
   319b2:	78b3      	ldrb	r3, [r6, #2]
   319b4:	e7cd      	b.n	31952 <tls_interface_getopt+0x52>
   319b6:	f247 0301 	movw	r3, #28673	; 0x7001
   319ba:	e9cd 5400 	strd	r5, r4, [sp]
   319be:	f44f 7280 	mov.w	r2, #256	; 0x100
   319c2:	4630      	mov	r0, r6
   319c4:	f7fe fe2e 	bl	30624 <ip_interface_socketoption_get>
   319c8:	e7cf      	b.n	3196a <tls_interface_getopt+0x6a>
   319ca:	6823      	ldr	r3, [r4, #0]
   319cc:	2b04      	cmp	r3, #4
   319ce:	d10f      	bne.n	319f0 <tls_interface_getopt+0xf0>
   319d0:	6828      	ldr	r0, [r5, #0]
   319d2:	f7ff fc61 	bl	31298 <secure_socket_dtls_timeout_check>
   319d6:	2800      	cmp	r0, #0
   319d8:	d1c7      	bne.n	3196a <tls_interface_getopt+0x6a>
   319da:	f247 0302 	movw	r3, #28674	; 0x7002
   319de:	e9cd 5400 	strd	r5, r4, [sp]
   319e2:	e7ec      	b.n	319be <tls_interface_getopt+0xbe>
   319e4:	200e      	movs	r0, #14
   319e6:	e7c0      	b.n	3196a <tls_interface_getopt+0x6a>
   319e8:	2009      	movs	r0, #9
   319ea:	e7be      	b.n	3196a <tls_interface_getopt+0x6a>
   319ec:	202a      	movs	r0, #42	; 0x2a
   319ee:	e7bc      	b.n	3196a <tls_interface_getopt+0x6a>
   319f0:	2016      	movs	r0, #22
   319f2:	e7ba      	b.n	3196a <tls_interface_getopt+0x6a>
   319f4:	2001d69d 	.word	0x2001d69d

000319f8 <tls_rpc_ip_event_handler>:
   319f8:	b570      	push	{r4, r5, r6, lr}
   319fa:	460c      	mov	r4, r1
   319fc:	f248 0181 	movw	r1, #32897	; 0x8081
   31a00:	428b      	cmp	r3, r1
   31a02:	4606      	mov	r6, r0
   31a04:	d035      	beq.n	31a72 <tls_rpc_ip_event_handler+0x7a>
   31a06:	f249 0182 	movw	r1, #36994	; 0x9082
   31a0a:	428b      	cmp	r3, r1
   31a0c:	d040      	beq.n	31a90 <tls_rpc_ip_event_handler+0x98>
   31a0e:	f248 0102 	movw	r1, #32770	; 0x8002
   31a12:	428b      	cmp	r3, r1
   31a14:	d161      	bne.n	31ada <tls_rpc_ip_event_handler+0xe2>
   31a16:	2c00      	cmp	r4, #0
   31a18:	d05f      	beq.n	31ada <tls_rpc_ip_event_handler+0xe2>
   31a1a:	6963      	ldr	r3, [r4, #20]
   31a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   31a20:	d002      	beq.n	31a28 <tls_rpc_ip_event_handler+0x30>
   31a22:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   31a26:	d158      	bne.n	31ada <tls_rpc_ip_event_handler+0xe2>
   31a28:	6823      	ldr	r3, [r4, #0]
   31a2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   31a2e:	6023      	str	r3, [r4, #0]
   31a30:	6955      	ldr	r5, [r2, #20]
   31a32:	2d00      	cmp	r5, #0
   31a34:	d14d      	bne.n	31ad2 <tls_rpc_ip_event_handler+0xda>
   31a36:	6823      	ldr	r3, [r4, #0]
   31a38:	0c1b      	lsrs	r3, r3, #16
   31a3a:	041b      	lsls	r3, r3, #16
   31a3c:	f043 0305 	orr.w	r3, r3, #5
   31a40:	6023      	str	r3, [r4, #0]
   31a42:	6823      	ldr	r3, [r4, #0]
   31a44:	00db      	lsls	r3, r3, #3
   31a46:	d401      	bmi.n	31a4c <tls_rpc_ip_event_handler+0x54>
   31a48:	2000      	movs	r0, #0
   31a4a:	e020      	b.n	31a8e <tls_rpc_ip_event_handler+0x96>
   31a4c:	2324      	movs	r3, #36	; 0x24
   31a4e:	4373      	muls	r3, r6
   31a50:	4a23      	ldr	r2, [pc, #140]	; (31ae0 <tls_rpc_ip_event_handler+0xe8>)
   31a52:	5cd3      	ldrb	r3, [r2, r3]
   31a54:	2b02      	cmp	r3, #2
   31a56:	d1f7      	bne.n	31a48 <tls_rpc_ip_event_handler+0x50>
   31a58:	4621      	mov	r1, r4
   31a5a:	4630      	mov	r0, r6
   31a5c:	f00b fc35 	bl	3d2ca <secure_client_socket>
   31a60:	2800      	cmp	r0, #0
   31a62:	d0f1      	beq.n	31a48 <tls_rpc_ip_event_handler+0x50>
   31a64:	2873      	cmp	r0, #115	; 0x73
   31a66:	d0ef      	beq.n	31a48 <tls_rpc_ip_event_handler+0x50>
   31a68:	6060      	str	r0, [r4, #4]
   31a6a:	6823      	ldr	r3, [r4, #0]
   31a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   31a70:	e02d      	b.n	31ace <tls_rpc_ip_event_handler+0xd6>
   31a72:	2c00      	cmp	r4, #0
   31a74:	d0e8      	beq.n	31a48 <tls_rpc_ip_event_handler+0x50>
   31a76:	6823      	ldr	r3, [r4, #0]
   31a78:	b29b      	uxth	r3, r3
   31a7a:	2b0a      	cmp	r3, #10
   31a7c:	d1e4      	bne.n	31a48 <tls_rpc_ip_event_handler+0x50>
   31a7e:	6950      	ldr	r0, [r2, #20]
   31a80:	bb40      	cbnz	r0, 31ad4 <tls_rpc_ip_event_handler+0xdc>
   31a82:	6823      	ldr	r3, [r4, #0]
   31a84:	0c1b      	lsrs	r3, r3, #16
   31a86:	041b      	lsls	r3, r3, #16
   31a88:	f043 030b 	orr.w	r3, r3, #11
   31a8c:	6023      	str	r3, [r4, #0]
   31a8e:	bd70      	pop	{r4, r5, r6, pc}
   31a90:	2c00      	cmp	r4, #0
   31a92:	d0d9      	beq.n	31a48 <tls_rpc_ip_event_handler+0x50>
   31a94:	6823      	ldr	r3, [r4, #0]
   31a96:	b29b      	uxth	r3, r3
   31a98:	2b0b      	cmp	r3, #11
   31a9a:	d1d5      	bne.n	31a48 <tls_rpc_ip_event_handler+0x50>
   31a9c:	6915      	ldr	r5, [r2, #16]
   31a9e:	b9c5      	cbnz	r5, 31ad2 <tls_rpc_ip_event_handler+0xda>
   31aa0:	6823      	ldr	r3, [r4, #0]
   31aa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   31aa6:	6023      	str	r3, [r4, #0]
   31aa8:	f7ff fc12 	bl	312d0 <hostname_free>
   31aac:	6823      	ldr	r3, [r4, #0]
   31aae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   31ab2:	6023      	str	r3, [r4, #0]
   31ab4:	6823      	ldr	r3, [r4, #0]
   31ab6:	0c1b      	lsrs	r3, r3, #16
   31ab8:	041b      	lsls	r3, r3, #16
   31aba:	f043 030c 	orr.w	r3, r3, #12
   31abe:	6023      	str	r3, [r4, #0]
   31ac0:	6823      	ldr	r3, [r4, #0]
   31ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   31ac6:	6023      	str	r3, [r4, #0]
   31ac8:	6823      	ldr	r3, [r4, #0]
   31aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   31ace:	6023      	str	r3, [r4, #0]
   31ad0:	e7ba      	b.n	31a48 <tls_rpc_ip_event_handler+0x50>
   31ad2:	4628      	mov	r0, r5
   31ad4:	f7fe fb82 	bl	301dc <rpc_error_to_nrf_errno>
   31ad8:	e7c6      	b.n	31a68 <tls_rpc_ip_event_handler+0x70>
   31ada:	2001      	movs	r0, #1
   31adc:	e7d7      	b.n	31a8e <tls_rpc_ip_event_handler+0x96>
   31ade:	bf00      	nop
   31ae0:	2001d69d 	.word	0x2001d69d

00031ae4 <at_interface_init>:
   31ae4:	2201      	movs	r2, #1
   31ae6:	4b02      	ldr	r3, [pc, #8]	; (31af0 <at_interface_init+0xc>)
   31ae8:	2000      	movs	r0, #0
   31aea:	701a      	strb	r2, [r3, #0]
   31aec:	4770      	bx	lr
   31aee:	bf00      	nop
   31af0:	2001d7e1 	.word	0x2001d7e1

00031af4 <at_interface_open>:
   31af4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   31af8:	f04f 0800 	mov.w	r8, #0
   31afc:	4b19      	ldr	r3, [pc, #100]	; (31b64 <at_interface_open+0x70>)
   31afe:	4607      	mov	r7, r0
   31b00:	781b      	ldrb	r3, [r3, #0]
   31b02:	460d      	mov	r5, r1
   31b04:	4616      	mov	r6, r2
   31b06:	f8cd 800c 	str.w	r8, [sp, #12]
   31b0a:	b943      	cbnz	r3, 31b1e <at_interface_open+0x2a>
   31b0c:	2070      	movs	r0, #112	; 0x70
   31b0e:	f7f5 f9b7 	bl	26e80 <nrf_modem_os_errno_set>
   31b12:	f04f 34ff 	mov.w	r4, #4294967295
   31b16:	4620      	mov	r0, r4
   31b18:	b004      	add	sp, #16
   31b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   31b1e:	2902      	cmp	r1, #2
   31b20:	d001      	beq.n	31b26 <at_interface_open+0x32>
   31b22:	2029      	movs	r0, #41	; 0x29
   31b24:	e7f3      	b.n	31b0e <at_interface_open+0x1a>
   31b26:	4a10      	ldr	r2, [pc, #64]	; (31b68 <at_interface_open+0x74>)
   31b28:	a803      	add	r0, sp, #12
   31b2a:	f7fe fa19 	bl	2ff60 <interface_socket_allocate>
   31b2e:	9b03      	ldr	r3, [sp, #12]
   31b30:	4604      	mov	r4, r0
   31b32:	2b00      	cmp	r3, #0
   31b34:	d0ef      	beq.n	31b16 <at_interface_open+0x22>
   31b36:	e9c3 7503 	strd	r7, r5, [r3, #12]
   31b3a:	615e      	str	r6, [r3, #20]
   31b3c:	4642      	mov	r2, r8
   31b3e:	9500      	str	r5, [sp, #0]
   31b40:	2305      	movs	r3, #5
   31b42:	4641      	mov	r1, r8
   31b44:	f00b fc1f 	bl	3d386 <send_message>
   31b48:	4605      	mov	r5, r0
   31b4a:	b120      	cbz	r0, 31b56 <at_interface_open+0x62>
   31b4c:	4620      	mov	r0, r4
   31b4e:	f7fe fa2d 	bl	2ffac <interface_socket_free>
   31b52:	4628      	mov	r0, r5
   31b54:	e7db      	b.n	31b0e <at_interface_open+0x1a>
   31b56:	9a03      	ldr	r2, [sp, #12]
   31b58:	6813      	ldr	r3, [r2, #0]
   31b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   31b5e:	6013      	str	r3, [r2, #0]
   31b60:	e7d9      	b.n	31b16 <at_interface_open+0x22>
   31b62:	bf00      	nop
   31b64:	2001d7e1 	.word	0x2001d7e1
   31b68:	0003d361 	.word	0x0003d361

00031b6c <rpc_dfu_message_send>:
   31b6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   31b6e:	4605      	mov	r5, r0
   31b70:	460e      	mov	r6, r1
   31b72:	4668      	mov	r0, sp
   31b74:	4611      	mov	r1, r2
   31b76:	4614      	mov	r4, r2
   31b78:	f00a ff0f 	bl	3c99a <rpc_dfu_client_request_alloc>
   31b7c:	b138      	cbz	r0, 31b8e <rpc_dfu_message_send+0x22>
   31b7e:	200c      	movs	r0, #12
   31b80:	f7f5 f97e 	bl	26e80 <nrf_modem_os_errno_set>
   31b84:	f04f 34ff 	mov.w	r4, #4294967295
   31b88:	4620      	mov	r0, r4
   31b8a:	b002      	add	sp, #8
   31b8c:	bd70      	pop	{r4, r5, r6, pc}
   31b8e:	b12c      	cbz	r4, 31b9c <rpc_dfu_message_send+0x30>
   31b90:	9b00      	ldr	r3, [sp, #0]
   31b92:	4622      	mov	r2, r4
   31b94:	4631      	mov	r1, r6
   31b96:	6818      	ldr	r0, [r3, #0]
   31b98:	f00c f9e7 	bl	3df6a <memcpy>
   31b9c:	4a1c      	ldr	r2, [pc, #112]	; (31c10 <rpc_dfu_message_send+0xa4>)
   31b9e:	9800      	ldr	r0, [sp, #0]
   31ba0:	8813      	ldrh	r3, [r2, #0]
   31ba2:	2d03      	cmp	r5, #3
   31ba4:	f103 0301 	add.w	r3, r3, #1
   31ba8:	b29b      	uxth	r3, r3
   31baa:	8013      	strh	r3, [r2, #0]
   31bac:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   31bb0:	60c3      	str	r3, [r0, #12]
   31bb2:	f04f 0300 	mov.w	r3, #0
   31bb6:	bf0a      	itet	eq
   31bb8:	4a16      	ldreq	r2, [pc, #88]	; (31c14 <rpc_dfu_message_send+0xa8>)
   31bba:	2204      	movne	r2, #4
   31bbc:	6812      	ldreq	r2, [r2, #0]
   31bbe:	7243      	strb	r3, [r0, #9]
   31bc0:	bf04      	itt	eq
   31bc2:	6102      	streq	r2, [r0, #16]
   31bc4:	2208      	moveq	r2, #8
   31bc6:	7283      	strb	r3, [r0, #10]
   31bc8:	72c3      	strb	r3, [r0, #11]
   31bca:	2300      	movs	r3, #0
   31bcc:	4e12      	ldr	r6, [pc, #72]	; (31c18 <rpc_dfu_message_send+0xac>)
   31bce:	6044      	str	r4, [r0, #4]
   31bd0:	4629      	mov	r1, r5
   31bd2:	7202      	strb	r2, [r0, #8]
   31bd4:	6033      	str	r3, [r6, #0]
   31bd6:	f00a feef 	bl	3c9b8 <rpc_dfu_client_request_send>
   31bda:	4604      	mov	r4, r0
   31bdc:	b140      	cbz	r0, 31bf0 <rpc_dfu_message_send+0x84>
   31bde:	9b00      	ldr	r3, [sp, #0]
   31be0:	6818      	ldr	r0, [r3, #0]
   31be2:	b108      	cbz	r0, 31be8 <rpc_dfu_message_send+0x7c>
   31be4:	f00a fefa 	bl	3c9dc <rpc_dfu_client_data_free>
   31be8:	9800      	ldr	r0, [sp, #0]
   31bea:	f00a fef4 	bl	3c9d6 <rpc_dfu_client_message_free>
   31bee:	e7c6      	b.n	31b7e <rpc_dfu_message_send+0x12>
   31bf0:	f04f 33ff 	mov.w	r3, #4294967295
   31bf4:	4d09      	ldr	r5, [pc, #36]	; (31c1c <rpc_dfu_message_send+0xb0>)
   31bf6:	9301      	str	r3, [sp, #4]
   31bf8:	6833      	ldr	r3, [r6, #0]
   31bfa:	2b00      	cmp	r3, #0
   31bfc:	d1c4      	bne.n	31b88 <rpc_dfu_message_send+0x1c>
   31bfe:	4628      	mov	r0, r5
   31c00:	a901      	add	r1, sp, #4
   31c02:	f7f5 f885 	bl	26d10 <nrf_modem_os_timedwait>
   31c06:	2800      	cmp	r0, #0
   31c08:	d0f6      	beq.n	31bf8 <rpc_dfu_message_send+0x8c>
   31c0a:	203c      	movs	r0, #60	; 0x3c
   31c0c:	e7b8      	b.n	31b80 <rpc_dfu_message_send+0x14>
   31c0e:	bf00      	nop
   31c10:	2001ca4e 	.word	0x2001ca4e
   31c14:	20018990 	.word	0x20018990
   31c18:	20018994 	.word	0x20018994
   31c1c:	20018988 	.word	0x20018988

00031c20 <rpc_dfu_event_handler>:
   31c20:	b508      	push	{r3, lr}
   31c22:	4b08      	ldr	r3, [pc, #32]	; (31c44 <rpc_dfu_event_handler+0x24>)
   31c24:	68c2      	ldr	r2, [r0, #12]
   31c26:	881b      	ldrh	r3, [r3, #0]
   31c28:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   31c2c:	d103      	bne.n	31c36 <rpc_dfu_event_handler+0x16>
   31c2e:	4b06      	ldr	r3, [pc, #24]	; (31c48 <rpc_dfu_event_handler+0x28>)
   31c30:	6018      	str	r0, [r3, #0]
   31c32:	2001      	movs	r0, #1
   31c34:	bd08      	pop	{r3, pc}
   31c36:	6800      	ldr	r0, [r0, #0]
   31c38:	2800      	cmp	r0, #0
   31c3a:	d0fb      	beq.n	31c34 <rpc_dfu_event_handler+0x14>
   31c3c:	f00a fece 	bl	3c9dc <rpc_dfu_client_data_free>
   31c40:	2000      	movs	r0, #0
   31c42:	e7f7      	b.n	31c34 <rpc_dfu_event_handler+0x14>
   31c44:	2001ca4e 	.word	0x2001ca4e
   31c48:	20018994 	.word	0x20018994

00031c4c <mfu_interface_init>:
   31c4c:	2000      	movs	r0, #0
   31c4e:	2201      	movs	r2, #1
   31c50:	4b04      	ldr	r3, [pc, #16]	; (31c64 <mfu_interface_init+0x18>)
   31c52:	8018      	strh	r0, [r3, #0]
   31c54:	4b04      	ldr	r3, [pc, #16]	; (31c68 <mfu_interface_init+0x1c>)
   31c56:	6018      	str	r0, [r3, #0]
   31c58:	4b04      	ldr	r3, [pc, #16]	; (31c6c <mfu_interface_init+0x20>)
   31c5a:	6018      	str	r0, [r3, #0]
   31c5c:	4b04      	ldr	r3, [pc, #16]	; (31c70 <mfu_interface_init+0x24>)
   31c5e:	601a      	str	r2, [r3, #0]
   31c60:	4770      	bx	lr
   31c62:	bf00      	nop
   31c64:	2001ca4e 	.word	0x2001ca4e
   31c68:	20018994 	.word	0x20018994
   31c6c:	20018990 	.word	0x20018990
   31c70:	20018988 	.word	0x20018988

00031c74 <mfu_interface_open>:
   31c74:	b508      	push	{r3, lr}
   31c76:	4b07      	ldr	r3, [pc, #28]	; (31c94 <mfu_interface_open+0x20>)
   31c78:	681a      	ldr	r2, [r3, #0]
   31c7a:	2a01      	cmp	r2, #1
   31c7c:	d005      	beq.n	31c8a <mfu_interface_open+0x16>
   31c7e:	2001      	movs	r0, #1
   31c80:	f7f5 f8fe 	bl	26e80 <nrf_modem_os_errno_set>
   31c84:	f04f 30ff 	mov.w	r0, #4294967295
   31c88:	bd08      	pop	{r3, pc}
   31c8a:	2202      	movs	r2, #2
   31c8c:	4802      	ldr	r0, [pc, #8]	; (31c98 <mfu_interface_open+0x24>)
   31c8e:	601a      	str	r2, [r3, #0]
   31c90:	e7fa      	b.n	31c88 <mfu_interface_open+0x14>
   31c92:	bf00      	nop
   31c94:	20018988 	.word	0x20018988
   31c98:	49765432 	.word	0x49765432

00031c9c <mfu_interface_close>:
   31c9c:	b538      	push	{r3, r4, r5, lr}
   31c9e:	4c11      	ldr	r4, [pc, #68]	; (31ce4 <mfu_interface_close+0x48>)
   31ca0:	6823      	ldr	r3, [r4, #0]
   31ca2:	1e9a      	subs	r2, r3, #2
   31ca4:	2a01      	cmp	r2, #1
   31ca6:	d905      	bls.n	31cb4 <mfu_interface_close+0x18>
   31ca8:	2001      	movs	r0, #1
   31caa:	f7f5 f8e9 	bl	26e80 <nrf_modem_os_errno_set>
   31cae:	f04f 30ff 	mov.w	r0, #4294967295
   31cb2:	e015      	b.n	31ce0 <mfu_interface_close+0x44>
   31cb4:	2b03      	cmp	r3, #3
   31cb6:	d110      	bne.n	31cda <mfu_interface_close+0x3e>
   31cb8:	2200      	movs	r2, #0
   31cba:	2006      	movs	r0, #6
   31cbc:	4611      	mov	r1, r2
   31cbe:	f7ff ff55 	bl	31b6c <rpc_dfu_message_send>
   31cc2:	2800      	cmp	r0, #0
   31cc4:	d1f3      	bne.n	31cae <mfu_interface_close+0x12>
   31cc6:	4b08      	ldr	r3, [pc, #32]	; (31ce8 <mfu_interface_close+0x4c>)
   31cc8:	6818      	ldr	r0, [r3, #0]
   31cca:	6905      	ldr	r5, [r0, #16]
   31ccc:	f00a fe83 	bl	3c9d6 <rpc_dfu_client_message_free>
   31cd0:	b11d      	cbz	r5, 31cda <mfu_interface_close+0x3e>
   31cd2:	4b06      	ldr	r3, [pc, #24]	; (31cec <mfu_interface_close+0x50>)
   31cd4:	2008      	movs	r0, #8
   31cd6:	601d      	str	r5, [r3, #0]
   31cd8:	e7e7      	b.n	31caa <mfu_interface_close+0xe>
   31cda:	2301      	movs	r3, #1
   31cdc:	2000      	movs	r0, #0
   31cde:	6023      	str	r3, [r4, #0]
   31ce0:	bd38      	pop	{r3, r4, r5, pc}
   31ce2:	bf00      	nop
   31ce4:	20018988 	.word	0x20018988
   31ce8:	20018994 	.word	0x20018994
   31cec:	2001898c 	.word	0x2001898c

00031cf0 <mfu_interface_sendto>:
   31cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31cf2:	4e1f      	ldr	r6, [pc, #124]	; (31d70 <mfu_interface_sendto+0x80>)
   31cf4:	460d      	mov	r5, r1
   31cf6:	6831      	ldr	r1, [r6, #0]
   31cf8:	4614      	mov	r4, r2
   31cfa:	1e88      	subs	r0, r1, #2
   31cfc:	2801      	cmp	r0, #1
   31cfe:	9a06      	ldr	r2, [sp, #24]
   31d00:	d903      	bls.n	31d0a <mfu_interface_sendto+0x1a>
   31d02:	2001      	movs	r0, #1
   31d04:	f7f5 f8bc 	bl	26e80 <nrf_modem_os_errno_set>
   31d08:	e010      	b.n	31d2c <mfu_interface_sendto+0x3c>
   31d0a:	b105      	cbz	r5, 31d0e <mfu_interface_sendto+0x1e>
   31d0c:	b90c      	cbnz	r4, 31d12 <mfu_interface_sendto+0x22>
   31d0e:	2016      	movs	r0, #22
   31d10:	e7f8      	b.n	31d04 <mfu_interface_sendto+0x14>
   31d12:	b10b      	cbz	r3, 31d18 <mfu_interface_sendto+0x28>
   31d14:	202d      	movs	r0, #45	; 0x2d
   31d16:	e7f5      	b.n	31d04 <mfu_interface_sendto+0x14>
   31d18:	b10a      	cbz	r2, 31d1e <mfu_interface_sendto+0x2e>
   31d1a:	2038      	movs	r0, #56	; 0x38
   31d1c:	e7f2      	b.n	31d04 <mfu_interface_sendto+0x14>
   31d1e:	2902      	cmp	r1, #2
   31d20:	d114      	bne.n	31d4c <mfu_interface_sendto+0x5c>
   31d22:	4611      	mov	r1, r2
   31d24:	2003      	movs	r0, #3
   31d26:	f7ff ff21 	bl	31b6c <rpc_dfu_message_send>
   31d2a:	b118      	cbz	r0, 31d34 <mfu_interface_sendto+0x44>
   31d2c:	f04f 34ff 	mov.w	r4, #4294967295
   31d30:	4620      	mov	r0, r4
   31d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31d34:	4b0f      	ldr	r3, [pc, #60]	; (31d74 <mfu_interface_sendto+0x84>)
   31d36:	6818      	ldr	r0, [r3, #0]
   31d38:	6907      	ldr	r7, [r0, #16]
   31d3a:	f00a fe4c 	bl	3c9d6 <rpc_dfu_client_message_free>
   31d3e:	b11f      	cbz	r7, 31d48 <mfu_interface_sendto+0x58>
   31d40:	4b0d      	ldr	r3, [pc, #52]	; (31d78 <mfu_interface_sendto+0x88>)
   31d42:	601f      	str	r7, [r3, #0]
   31d44:	2008      	movs	r0, #8
   31d46:	e7dd      	b.n	31d04 <mfu_interface_sendto+0x14>
   31d48:	2303      	movs	r3, #3
   31d4a:	6033      	str	r3, [r6, #0]
   31d4c:	4622      	mov	r2, r4
   31d4e:	4629      	mov	r1, r5
   31d50:	2004      	movs	r0, #4
   31d52:	f7ff ff0b 	bl	31b6c <rpc_dfu_message_send>
   31d56:	2800      	cmp	r0, #0
   31d58:	d1e8      	bne.n	31d2c <mfu_interface_sendto+0x3c>
   31d5a:	4b06      	ldr	r3, [pc, #24]	; (31d74 <mfu_interface_sendto+0x84>)
   31d5c:	6818      	ldr	r0, [r3, #0]
   31d5e:	6905      	ldr	r5, [r0, #16]
   31d60:	f00a fe39 	bl	3c9d6 <rpc_dfu_client_message_free>
   31d64:	2d00      	cmp	r5, #0
   31d66:	d0e3      	beq.n	31d30 <mfu_interface_sendto+0x40>
   31d68:	4b03      	ldr	r3, [pc, #12]	; (31d78 <mfu_interface_sendto+0x88>)
   31d6a:	601d      	str	r5, [r3, #0]
   31d6c:	e7ea      	b.n	31d44 <mfu_interface_sendto+0x54>
   31d6e:	bf00      	nop
   31d70:	20018988 	.word	0x20018988
   31d74:	20018994 	.word	0x20018994
   31d78:	2001898c 	.word	0x2001898c

00031d7c <mfu_interface_setopt>:
   31d7c:	481d      	ldr	r0, [pc, #116]	; (31df4 <mfu_interface_setopt+0x78>)
   31d7e:	b510      	push	{r4, lr}
   31d80:	6800      	ldr	r0, [r0, #0]
   31d82:	3802      	subs	r0, #2
   31d84:	2801      	cmp	r0, #1
   31d86:	d905      	bls.n	31d94 <mfu_interface_setopt+0x18>
   31d88:	2001      	movs	r0, #1
   31d8a:	f7f5 f879 	bl	26e80 <nrf_modem_os_errno_set>
   31d8e:	f04f 30ff 	mov.w	r0, #4294967295
   31d92:	e026      	b.n	31de2 <mfu_interface_setopt+0x66>
   31d94:	f240 2003 	movw	r0, #515	; 0x203
   31d98:	4281      	cmp	r1, r0
   31d9a:	d001      	beq.n	31da0 <mfu_interface_setopt+0x24>
   31d9c:	2016      	movs	r0, #22
   31d9e:	e7f4      	b.n	31d8a <mfu_interface_setopt+0xe>
   31da0:	3a04      	subs	r2, #4
   31da2:	2a03      	cmp	r2, #3
   31da4:	d81e      	bhi.n	31de4 <mfu_interface_setopt+0x68>
   31da6:	e8df f002 	tbb	[pc, r2]
   31daa:	021f      	.short	0x021f
   31dac:	1321      	.short	0x1321
   31dae:	2007      	movs	r0, #7
   31db0:	2200      	movs	r2, #0
   31db2:	4611      	mov	r1, r2
   31db4:	f7ff feda 	bl	31b6c <rpc_dfu_message_send>
   31db8:	2800      	cmp	r0, #0
   31dba:	d1e8      	bne.n	31d8e <mfu_interface_setopt+0x12>
   31dbc:	4b0e      	ldr	r3, [pc, #56]	; (31df8 <mfu_interface_setopt+0x7c>)
   31dbe:	6818      	ldr	r0, [r3, #0]
   31dc0:	6904      	ldr	r4, [r0, #16]
   31dc2:	f00a fe08 	bl	3c9d6 <rpc_dfu_client_message_free>
   31dc6:	b19c      	cbz	r4, 31df0 <mfu_interface_setopt+0x74>
   31dc8:	4b0c      	ldr	r3, [pc, #48]	; (31dfc <mfu_interface_setopt+0x80>)
   31dca:	2008      	movs	r0, #8
   31dcc:	601c      	str	r4, [r3, #0]
   31dce:	e7dc      	b.n	31d8a <mfu_interface_setopt+0xe>
   31dd0:	2b00      	cmp	r3, #0
   31dd2:	d0e3      	beq.n	31d9c <mfu_interface_setopt+0x20>
   31dd4:	9a02      	ldr	r2, [sp, #8]
   31dd6:	2a04      	cmp	r2, #4
   31dd8:	d1e0      	bne.n	31d9c <mfu_interface_setopt+0x20>
   31dda:	2000      	movs	r0, #0
   31ddc:	681a      	ldr	r2, [r3, #0]
   31dde:	4b08      	ldr	r3, [pc, #32]	; (31e00 <mfu_interface_setopt+0x84>)
   31de0:	601a      	str	r2, [r3, #0]
   31de2:	bd10      	pop	{r4, pc}
   31de4:	202a      	movs	r0, #42	; 0x2a
   31de6:	e7d0      	b.n	31d8a <mfu_interface_setopt+0xe>
   31de8:	2005      	movs	r0, #5
   31dea:	e7e1      	b.n	31db0 <mfu_interface_setopt+0x34>
   31dec:	2008      	movs	r0, #8
   31dee:	e7df      	b.n	31db0 <mfu_interface_setopt+0x34>
   31df0:	4620      	mov	r0, r4
   31df2:	e7f6      	b.n	31de2 <mfu_interface_setopt+0x66>
   31df4:	20018988 	.word	0x20018988
   31df8:	20018994 	.word	0x20018994
   31dfc:	2001898c 	.word	0x2001898c
   31e00:	20018990 	.word	0x20018990

00031e04 <mfu_interface_getopt>:
   31e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31e06:	461e      	mov	r6, r3
   31e08:	f240 2303 	movw	r3, #515	; 0x203
   31e0c:	4299      	cmp	r1, r3
   31e0e:	9d06      	ldr	r5, [sp, #24]
   31e10:	d101      	bne.n	31e16 <mfu_interface_getopt+0x12>
   31e12:	b106      	cbz	r6, 31e16 <mfu_interface_getopt+0x12>
   31e14:	b92d      	cbnz	r5, 31e22 <mfu_interface_getopt+0x1e>
   31e16:	2016      	movs	r0, #22
   31e18:	f7f5 f832 	bl	26e80 <nrf_modem_os_errno_set>
   31e1c:	f04f 30ff 	mov.w	r0, #4294967295
   31e20:	e019      	b.n	31e56 <mfu_interface_getopt+0x52>
   31e22:	4b22      	ldr	r3, [pc, #136]	; (31eac <mfu_interface_getopt+0xa8>)
   31e24:	681b      	ldr	r3, [r3, #0]
   31e26:	3b02      	subs	r3, #2
   31e28:	2b01      	cmp	r3, #1
   31e2a:	d901      	bls.n	31e30 <mfu_interface_getopt+0x2c>
   31e2c:	2001      	movs	r0, #1
   31e2e:	e7f3      	b.n	31e18 <mfu_interface_getopt+0x14>
   31e30:	2a07      	cmp	r2, #7
   31e32:	d02b      	beq.n	31e8c <mfu_interface_getopt+0x88>
   31e34:	dc05      	bgt.n	31e42 <mfu_interface_getopt+0x3e>
   31e36:	2a01      	cmp	r2, #1
   31e38:	d00e      	beq.n	31e58 <mfu_interface_getopt+0x54>
   31e3a:	2a02      	cmp	r2, #2
   31e3c:	d023      	beq.n	31e86 <mfu_interface_getopt+0x82>
   31e3e:	202a      	movs	r0, #42	; 0x2a
   31e40:	e7ea      	b.n	31e18 <mfu_interface_getopt+0x14>
   31e42:	2a14      	cmp	r2, #20
   31e44:	d1fb      	bne.n	31e3e <mfu_interface_getopt+0x3a>
   31e46:	682b      	ldr	r3, [r5, #0]
   31e48:	2b04      	cmp	r3, #4
   31e4a:	d1e4      	bne.n	31e16 <mfu_interface_getopt+0x12>
   31e4c:	2000      	movs	r0, #0
   31e4e:	4b18      	ldr	r3, [pc, #96]	; (31eb0 <mfu_interface_getopt+0xac>)
   31e50:	681a      	ldr	r2, [r3, #0]
   31e52:	6018      	str	r0, [r3, #0]
   31e54:	6032      	str	r2, [r6, #0]
   31e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31e58:	682b      	ldr	r3, [r5, #0]
   31e5a:	2b24      	cmp	r3, #36	; 0x24
   31e5c:	d1db      	bne.n	31e16 <mfu_interface_getopt+0x12>
   31e5e:	4610      	mov	r0, r2
   31e60:	2200      	movs	r2, #0
   31e62:	4611      	mov	r1, r2
   31e64:	f7ff fe82 	bl	31b6c <rpc_dfu_message_send>
   31e68:	2800      	cmp	r0, #0
   31e6a:	d1d7      	bne.n	31e1c <mfu_interface_getopt+0x18>
   31e6c:	4f11      	ldr	r7, [pc, #68]	; (31eb4 <mfu_interface_getopt+0xb0>)
   31e6e:	6839      	ldr	r1, [r7, #0]
   31e70:	690c      	ldr	r4, [r1, #16]
   31e72:	b184      	cbz	r4, 31e96 <mfu_interface_getopt+0x92>
   31e74:	4b0e      	ldr	r3, [pc, #56]	; (31eb0 <mfu_interface_getopt+0xac>)
   31e76:	2008      	movs	r0, #8
   31e78:	601c      	str	r4, [r3, #0]
   31e7a:	f7f5 f801 	bl	26e80 <nrf_modem_os_errno_set>
   31e7e:	6838      	ldr	r0, [r7, #0]
   31e80:	f00a fda9 	bl	3c9d6 <rpc_dfu_client_message_free>
   31e84:	e7ca      	b.n	31e1c <mfu_interface_getopt+0x18>
   31e86:	682b      	ldr	r3, [r5, #0]
   31e88:	2b04      	cmp	r3, #4
   31e8a:	e7e7      	b.n	31e5c <mfu_interface_getopt+0x58>
   31e8c:	682b      	ldr	r3, [r5, #0]
   31e8e:	2b04      	cmp	r3, #4
   31e90:	d1c1      	bne.n	31e16 <mfu_interface_getopt+0x12>
   31e92:	2009      	movs	r0, #9
   31e94:	e7e4      	b.n	31e60 <mfu_interface_getopt+0x5c>
   31e96:	682a      	ldr	r2, [r5, #0]
   31e98:	3114      	adds	r1, #20
   31e9a:	4630      	mov	r0, r6
   31e9c:	f00c f865 	bl	3df6a <memcpy>
   31ea0:	6838      	ldr	r0, [r7, #0]
   31ea2:	f00a fd98 	bl	3c9d6 <rpc_dfu_client_message_free>
   31ea6:	4620      	mov	r0, r4
   31ea8:	e7d5      	b.n	31e56 <mfu_interface_getopt+0x52>
   31eaa:	bf00      	nop
   31eac:	20018988 	.word	0x20018988
   31eb0:	2001898c 	.word	0x2001898c
   31eb4:	20018994 	.word	0x20018994

00031eb8 <rpc_gnss_event_handler>:
   31eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   31eba:	4b5b      	ldr	r3, [pc, #364]	; (32028 <rpc_gnss_event_handler+0x170>)
   31ebc:	4605      	mov	r5, r0
   31ebe:	6800      	ldr	r0, [r0, #0]
   31ec0:	881b      	ldrh	r3, [r3, #0]
   31ec2:	6802      	ldr	r2, [r0, #0]
   31ec4:	460c      	mov	r4, r1
   31ec6:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   31eca:	b085      	sub	sp, #20
   31ecc:	d134      	bne.n	31f38 <rpc_gnss_event_handler+0x80>
   31ece:	4b57      	ldr	r3, [pc, #348]	; (3202c <rpc_gnss_event_handler+0x174>)
   31ed0:	4e57      	ldr	r6, [pc, #348]	; (32030 <rpc_gnss_event_handler+0x178>)
   31ed2:	681a      	ldr	r2, [r3, #0]
   31ed4:	6030      	str	r0, [r6, #0]
   31ed6:	01d2      	lsls	r2, r2, #7
   31ed8:	d50d      	bpl.n	31ef6 <rpc_gnss_event_handler+0x3e>
   31eda:	f242 1202 	movw	r2, #8450	; 0x2102
   31ede:	4291      	cmp	r1, r2
   31ee0:	d109      	bne.n	31ef6 <rpc_gnss_event_handler+0x3e>
   31ee2:	6842      	ldr	r2, [r0, #4]
   31ee4:	b91a      	cbnz	r2, 31eee <rpc_gnss_event_handler+0x36>
   31ee6:	681a      	ldr	r2, [r3, #0]
   31ee8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   31eec:	601a      	str	r2, [r3, #0]
   31eee:	681a      	ldr	r2, [r3, #0]
   31ef0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   31ef4:	601a      	str	r2, [r3, #0]
   31ef6:	681a      	ldr	r2, [r3, #0]
   31ef8:	0257      	lsls	r7, r2, #9
   31efa:	d50d      	bpl.n	31f18 <rpc_gnss_event_handler+0x60>
   31efc:	f242 1203 	movw	r2, #8451	; 0x2103
   31f00:	4294      	cmp	r4, r2
   31f02:	d109      	bne.n	31f18 <rpc_gnss_event_handler+0x60>
   31f04:	6842      	ldr	r2, [r0, #4]
   31f06:	b91a      	cbnz	r2, 31f10 <rpc_gnss_event_handler+0x58>
   31f08:	681a      	ldr	r2, [r3, #0]
   31f0a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   31f0e:	601a      	str	r2, [r3, #0]
   31f10:	681a      	ldr	r2, [r3, #0]
   31f12:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   31f16:	e04a      	b.n	31fae <rpc_gnss_event_handler+0xf6>
   31f18:	f242 0201 	movw	r2, #8193	; 0x2001
   31f1c:	4294      	cmp	r4, r2
   31f1e:	d03e      	beq.n	31f9e <rpc_gnss_event_handler+0xe6>
   31f20:	f242 0204 	movw	r2, #8196	; 0x2004
   31f24:	4294      	cmp	r4, r2
   31f26:	d044      	beq.n	31fb2 <rpc_gnss_event_handler+0xfa>
   31f28:	f242 0205 	movw	r2, #8197	; 0x2005
   31f2c:	4294      	cmp	r4, r2
   31f2e:	d05d      	beq.n	31fec <rpc_gnss_event_handler+0x134>
   31f30:	f00a fd72 	bl	3ca18 <rpc_gnss_client_data_free>
   31f34:	2300      	movs	r3, #0
   31f36:	6033      	str	r3, [r6, #0]
   31f38:	f504 433f 	add.w	r3, r4, #48896	; 0xbf00
   31f3c:	33ff      	adds	r3, #255	; 0xff
   31f3e:	b29b      	uxth	r3, r3
   31f40:	2b02      	cmp	r3, #2
   31f42:	d869      	bhi.n	32018 <rpc_gnss_event_handler+0x160>
   31f44:	4f39      	ldr	r7, [pc, #228]	; (3202c <rpc_gnss_event_handler+0x174>)
   31f46:	683b      	ldr	r3, [r7, #0]
   31f48:	075a      	lsls	r2, r3, #29
   31f4a:	d406      	bmi.n	31f5a <rpc_gnss_event_handler+0xa2>
   31f4c:	683b      	ldr	r3, [r7, #0]
   31f4e:	079b      	lsls	r3, r3, #30
   31f50:	d51c      	bpl.n	31f8c <rpc_gnss_event_handler+0xd4>
   31f52:	f244 0303 	movw	r3, #16387	; 0x4003
   31f56:	429c      	cmp	r4, r3
   31f58:	d118      	bne.n	31f8c <rpc_gnss_event_handler+0xd4>
   31f5a:	2002      	movs	r0, #2
   31f5c:	f7f5 f942 	bl	271e4 <nrf_modem_os_alloc>
   31f60:	4606      	mov	r6, r0
   31f62:	6828      	ldr	r0, [r5, #0]
   31f64:	2e00      	cmp	r6, #0
   31f66:	d052      	beq.n	3200e <rpc_gnss_event_handler+0x156>
   31f68:	8034      	strh	r4, [r6, #0]
   31f6a:	686b      	ldr	r3, [r5, #4]
   31f6c:	9000      	str	r0, [sp, #0]
   31f6e:	e9cd 3601 	strd	r3, r6, [sp, #4]
   31f72:	2302      	movs	r3, #2
   31f74:	9303      	str	r3, [sp, #12]
   31f76:	4b2f      	ldr	r3, [pc, #188]	; (32034 <rpc_gnss_event_handler+0x17c>)
   31f78:	4669      	mov	r1, sp
   31f7a:	6818      	ldr	r0, [r3, #0]
   31f7c:	6803      	ldr	r3, [r0, #0]
   31f7e:	685b      	ldr	r3, [r3, #4]
   31f80:	4798      	blx	r3
   31f82:	3001      	adds	r0, #1
   31f84:	d14b      	bne.n	3201e <rpc_gnss_event_handler+0x166>
   31f86:	4630      	mov	r0, r6
   31f88:	f7f5 f934 	bl	271f4 <nrf_modem_os_free>
   31f8c:	6828      	ldr	r0, [r5, #0]
   31f8e:	2800      	cmp	r0, #0
   31f90:	d042      	beq.n	32018 <rpc_gnss_event_handler+0x160>
   31f92:	f00a fd41 	bl	3ca18 <rpc_gnss_client_data_free>
   31f96:	2200      	movs	r2, #0
   31f98:	4b25      	ldr	r3, [pc, #148]	; (32030 <rpc_gnss_event_handler+0x178>)
   31f9a:	601a      	str	r2, [r3, #0]
   31f9c:	e03c      	b.n	32018 <rpc_gnss_event_handler+0x160>
   31f9e:	6842      	ldr	r2, [r0, #4]
   31fa0:	2a00      	cmp	r2, #0
   31fa2:	d1c5      	bne.n	31f30 <rpc_gnss_event_handler+0x78>
   31fa4:	681a      	ldr	r2, [r3, #0]
   31fa6:	0c12      	lsrs	r2, r2, #16
   31fa8:	0412      	lsls	r2, r2, #16
   31faa:	f042 0202 	orr.w	r2, r2, #2
   31fae:	601a      	str	r2, [r3, #0]
   31fb0:	e7be      	b.n	31f30 <rpc_gnss_event_handler+0x78>
   31fb2:	6842      	ldr	r2, [r0, #4]
   31fb4:	b9b2      	cbnz	r2, 31fe4 <rpc_gnss_event_handler+0x12c>
   31fb6:	681a      	ldr	r2, [r3, #0]
   31fb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   31fbc:	601a      	str	r2, [r3, #0]
   31fbe:	681a      	ldr	r2, [r3, #0]
   31fc0:	b292      	uxth	r2, r2
   31fc2:	2a03      	cmp	r2, #3
   31fc4:	681a      	ldr	r2, [r3, #0]
   31fc6:	d104      	bne.n	31fd2 <rpc_gnss_event_handler+0x11a>
   31fc8:	0c12      	lsrs	r2, r2, #16
   31fca:	0412      	lsls	r2, r2, #16
   31fcc:	f042 0204 	orr.w	r2, r2, #4
   31fd0:	e79d      	b.n	31f0e <rpc_gnss_event_handler+0x56>
   31fd2:	b292      	uxth	r2, r2
   31fd4:	2a04      	cmp	r2, #4
   31fd6:	d19b      	bne.n	31f10 <rpc_gnss_event_handler+0x58>
   31fd8:	681a      	ldr	r2, [r3, #0]
   31fda:	0c12      	lsrs	r2, r2, #16
   31fdc:	0412      	lsls	r2, r2, #16
   31fde:	f042 0202 	orr.w	r2, r2, #2
   31fe2:	e794      	b.n	31f0e <rpc_gnss_event_handler+0x56>
   31fe4:	681a      	ldr	r2, [r3, #0]
   31fe6:	b292      	uxth	r2, r2
   31fe8:	2a03      	cmp	r2, #3
   31fea:	e7f4      	b.n	31fd6 <rpc_gnss_event_handler+0x11e>
   31fec:	681a      	ldr	r2, [r3, #0]
   31fee:	0291      	lsls	r1, r2, #10
   31ff0:	d59e      	bpl.n	31f30 <rpc_gnss_event_handler+0x78>
   31ff2:	6842      	ldr	r2, [r0, #4]
   31ff4:	b93a      	cbnz	r2, 32006 <rpc_gnss_event_handler+0x14e>
   31ff6:	681a      	ldr	r2, [r3, #0]
   31ff8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   31ffc:	601a      	str	r2, [r3, #0]
   31ffe:	681a      	ldr	r2, [r3, #0]
   32000:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   32004:	e7d3      	b.n	31fae <rpc_gnss_event_handler+0xf6>
   32006:	681a      	ldr	r2, [r3, #0]
   32008:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   3200c:	e7cf      	b.n	31fae <rpc_gnss_event_handler+0xf6>
   3200e:	b118      	cbz	r0, 32018 <rpc_gnss_event_handler+0x160>
   32010:	f00a fd02 	bl	3ca18 <rpc_gnss_client_data_free>
   32014:	4b06      	ldr	r3, [pc, #24]	; (32030 <rpc_gnss_event_handler+0x178>)
   32016:	601e      	str	r6, [r3, #0]
   32018:	2000      	movs	r0, #0
   3201a:	b005      	add	sp, #20
   3201c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3201e:	683b      	ldr	r3, [r7, #0]
   32020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   32024:	603b      	str	r3, [r7, #0]
   32026:	e7f7      	b.n	32018 <rpc_gnss_event_handler+0x160>
   32028:	2001ca50 	.word	0x2001ca50
   3202c:	20018998 	.word	0x20018998
   32030:	2001899c 	.word	0x2001899c
   32034:	200189a0 	.word	0x200189a0

00032038 <send_message>:
   32038:	b5f0      	push	{r4, r5, r6, r7, lr}
   3203a:	b085      	sub	sp, #20
   3203c:	4606      	mov	r6, r0
   3203e:	460f      	mov	r7, r1
   32040:	a803      	add	r0, sp, #12
   32042:	4611      	mov	r1, r2
   32044:	9201      	str	r2, [sp, #4]
   32046:	f00a fccb 	bl	3c9e0 <rpc_gnss_client_request_alloc>
   3204a:	9b03      	ldr	r3, [sp, #12]
   3204c:	4604      	mov	r4, r0
   3204e:	b958      	cbnz	r0, 32068 <send_message+0x30>
   32050:	9a01      	ldr	r2, [sp, #4]
   32052:	b98b      	cbnz	r3, 32078 <send_message+0x40>
   32054:	9803      	ldr	r0, [sp, #12]
   32056:	f00a fcdc 	bl	3ca12 <rpc_gnss_client_message_free>
   3205a:	2023      	movs	r0, #35	; 0x23
   3205c:	f7f4 ff10 	bl	26e80 <nrf_modem_os_errno_set>
   32060:	f04f 30ff 	mov.w	r0, #4294967295
   32064:	b005      	add	sp, #20
   32066:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32068:	2b00      	cmp	r3, #0
   3206a:	d0f3      	beq.n	32054 <send_message+0x1c>
   3206c:	6818      	ldr	r0, [r3, #0]
   3206e:	2800      	cmp	r0, #0
   32070:	d0f0      	beq.n	32054 <send_message+0x1c>
   32072:	f00a fcd1 	bl	3ca18 <rpc_gnss_client_data_free>
   32076:	e7ed      	b.n	32054 <send_message+0x1c>
   32078:	490f      	ldr	r1, [pc, #60]	; (320b8 <send_message+0x80>)
   3207a:	880d      	ldrh	r5, [r1, #0]
   3207c:	3501      	adds	r5, #1
   3207e:	b2ad      	uxth	r5, r5
   32080:	800d      	strh	r5, [r1, #0]
   32082:	2143      	movs	r1, #67	; 0x43
   32084:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
   32088:	603d      	str	r5, [r7, #0]
   3208a:	7319      	strb	r1, [r3, #12]
   3208c:	2154      	movs	r1, #84	; 0x54
   3208e:	7359      	strb	r1, [r3, #13]
   32090:	2176      	movs	r1, #118	; 0x76
   32092:	7399      	strb	r1, [r3, #14]
   32094:	2149      	movs	r1, #73	; 0x49
   32096:	605a      	str	r2, [r3, #4]
   32098:	7218      	strb	r0, [r3, #8]
   3209a:	7258      	strb	r0, [r3, #9]
   3209c:	7298      	strb	r0, [r3, #10]
   3209e:	72d8      	strb	r0, [r3, #11]
   320a0:	73d9      	strb	r1, [r3, #15]
   320a2:	6818      	ldr	r0, [r3, #0]
   320a4:	4639      	mov	r1, r7
   320a6:	f00b ff60 	bl	3df6a <memcpy>
   320aa:	4b04      	ldr	r3, [pc, #16]	; (320bc <send_message+0x84>)
   320ac:	4631      	mov	r1, r6
   320ae:	9803      	ldr	r0, [sp, #12]
   320b0:	601c      	str	r4, [r3, #0]
   320b2:	f00a fca4 	bl	3c9fe <rpc_gnss_client_request_send>
   320b6:	e7d5      	b.n	32064 <send_message+0x2c>
   320b8:	2001ca50 	.word	0x2001ca50
   320bc:	2001899c 	.word	0x2001899c

000320c0 <gnss_interface_write>:
   320c0:	b570      	push	{r4, r5, r6, lr}
   320c2:	4604      	mov	r4, r0
   320c4:	4a40      	ldr	r2, [pc, #256]	; (321c8 <gnss_interface_write+0x108>)
   320c6:	b09e      	sub	sp, #120	; 0x78
   320c8:	4294      	cmp	r4, r2
   320ca:	4608      	mov	r0, r1
   320cc:	9922      	ldr	r1, [sp, #136]	; 0x88
   320ce:	d005      	beq.n	320dc <gnss_interface_write+0x1c>
   320d0:	2009      	movs	r0, #9
   320d2:	f7f4 fed5 	bl	26e80 <nrf_modem_os_errno_set>
   320d6:	f04f 33ff 	mov.w	r3, #4294967295
   320da:	e060      	b.n	3219e <gnss_interface_write+0xde>
   320dc:	b118      	cbz	r0, 320e6 <gnss_interface_write+0x26>
   320de:	b111      	cbz	r1, 320e6 <gnss_interface_write+0x26>
   320e0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   320e2:	2a02      	cmp	r2, #2
   320e4:	d001      	beq.n	320ea <gnss_interface_write+0x2a>
   320e6:	2016      	movs	r0, #22
   320e8:	e7f3      	b.n	320d2 <gnss_interface_write+0x12>
   320ea:	4c38      	ldr	r4, [pc, #224]	; (321cc <gnss_interface_write+0x10c>)
   320ec:	6822      	ldr	r2, [r4, #0]
   320ee:	b292      	uxth	r2, r2
   320f0:	2a02      	cmp	r2, #2
   320f2:	d005      	beq.n	32100 <gnss_interface_write+0x40>
   320f4:	6822      	ldr	r2, [r4, #0]
   320f6:	b292      	uxth	r2, r2
   320f8:	2a04      	cmp	r2, #4
   320fa:	d001      	beq.n	32100 <gnss_interface_write+0x40>
   320fc:	2039      	movs	r0, #57	; 0x39
   320fe:	e7e8      	b.n	320d2 <gnss_interface_write+0x12>
   32100:	b10b      	cbz	r3, 32106 <gnss_interface_write+0x46>
   32102:	202d      	movs	r0, #45	; 0x2d
   32104:	e7e5      	b.n	320d2 <gnss_interface_write+0x12>
   32106:	6822      	ldr	r2, [r4, #0]
   32108:	0395      	lsls	r5, r2, #14
   3210a:	d548      	bpl.n	3219e <gnss_interface_write+0xde>
   3210c:	6823      	ldr	r3, [r4, #0]
   3210e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   32112:	6023      	str	r3, [r4, #0]
   32114:	6823      	ldr	r3, [r4, #0]
   32116:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   3211a:	6023      	str	r3, [r4, #0]
   3211c:	880b      	ldrh	r3, [r1, #0]
   3211e:	3b01      	subs	r3, #1
   32120:	2b07      	cmp	r3, #7
   32122:	d8e0      	bhi.n	320e6 <gnss_interface_write+0x26>
   32124:	e8df f003 	tbb	[pc, r3]
   32128:	1f1b1704 	.word	0x1f1b1704
   3212c:	2f2b2723 	.word	0x2f2b2723
   32130:	a902      	add	r1, sp, #8
   32132:	f00a fc73 	bl	3ca1c <rpc_gnss_serialize_utc>
   32136:	2272      	movs	r2, #114	; 0x72
   32138:	f241 0005 	movw	r0, #4101	; 0x1005
   3213c:	a901      	add	r1, sp, #4
   3213e:	f7ff ff7b 	bl	32038 <send_message>
   32142:	4603      	mov	r3, r0
   32144:	bb18      	cbnz	r0, 3218e <gnss_interface_write+0xce>
   32146:	4d22      	ldr	r5, [pc, #136]	; (321d0 <gnss_interface_write+0x110>)
   32148:	4e1f      	ldr	r6, [pc, #124]	; (321c8 <gnss_interface_write+0x108>)
   3214a:	6822      	ldr	r2, [r4, #0]
   3214c:	0291      	lsls	r1, r2, #10
   3214e:	d52f      	bpl.n	321b0 <gnss_interface_write+0xf0>
   32150:	b343      	cbz	r3, 321a4 <gnss_interface_write+0xe4>
   32152:	4618      	mov	r0, r3
   32154:	e7bd      	b.n	320d2 <gnss_interface_write+0x12>
   32156:	a902      	add	r1, sp, #8
   32158:	f00a fc7d 	bl	3ca56 <rpc_gnss_serialize_ephe>
   3215c:	e7eb      	b.n	32136 <gnss_interface_write+0x76>
   3215e:	a902      	add	r1, sp, #8
   32160:	f00a fcc3 	bl	3caea <rpc_gnss_serialize_alm>
   32164:	e7e7      	b.n	32136 <gnss_interface_write+0x76>
   32166:	a902      	add	r1, sp, #8
   32168:	f00a fcec 	bl	3cb44 <rpc_gnss_serialize_klob>
   3216c:	e7e3      	b.n	32136 <gnss_interface_write+0x76>
   3216e:	a902      	add	r1, sp, #8
   32170:	f00a fd03 	bl	3cb7a <rpc_gnss_serialize_nequick>
   32174:	e7df      	b.n	32136 <gnss_interface_write+0x76>
   32176:	a902      	add	r1, sp, #8
   32178:	f00a fd14 	bl	3cba4 <rpc_gnss_serialize_time_and_sv_tow>
   3217c:	e7db      	b.n	32136 <gnss_interface_write+0x76>
   3217e:	a902      	add	r1, sp, #8
   32180:	f00a fd33 	bl	3cbea <rpc_gnss_serialize_location>
   32184:	e7d7      	b.n	32136 <gnss_interface_write+0x76>
   32186:	a902      	add	r1, sp, #8
   32188:	f00a fd4c 	bl	3cc24 <rpc_gnss_serialize_integrity>
   3218c:	e7d3      	b.n	32136 <gnss_interface_write+0x76>
   3218e:	6822      	ldr	r2, [r4, #0]
   32190:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   32194:	6022      	str	r2, [r4, #0]
   32196:	6822      	ldr	r2, [r4, #0]
   32198:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   3219c:	6022      	str	r2, [r4, #0]
   3219e:	4618      	mov	r0, r3
   321a0:	b01e      	add	sp, #120	; 0x78
   321a2:	bd70      	pop	{r4, r5, r6, pc}
   321a4:	4629      	mov	r1, r5
   321a6:	4630      	mov	r0, r6
   321a8:	f7f4 fdb2 	bl	26d10 <nrf_modem_os_timedwait>
   321ac:	4603      	mov	r3, r0
   321ae:	e7cc      	b.n	3214a <gnss_interface_write+0x8a>
   321b0:	2b00      	cmp	r3, #0
   321b2:	d1ce      	bne.n	32152 <gnss_interface_write+0x92>
   321b4:	6822      	ldr	r2, [r4, #0]
   321b6:	0392      	lsls	r2, r2, #14
   321b8:	d4f1      	bmi.n	3219e <gnss_interface_write+0xde>
   321ba:	6823      	ldr	r3, [r4, #0]
   321bc:	2005      	movs	r0, #5
   321be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   321c2:	6023      	str	r3, [r4, #0]
   321c4:	e785      	b.n	320d2 <gnss_interface_write+0x12>
   321c6:	bf00      	nop
   321c8:	49765443 	.word	0x49765443
   321cc:	20018998 	.word	0x20018998
   321d0:	20014864 	.word	0x20014864

000321d4 <gnss_interface_read>:
   321d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   321d8:	469a      	mov	sl, r3
   321da:	4b86      	ldr	r3, [pc, #536]	; (323f4 <gnss_interface_read+0x220>)
   321dc:	460c      	mov	r4, r1
   321de:	4298      	cmp	r0, r3
   321e0:	b0b5      	sub	sp, #212	; 0xd4
   321e2:	d005      	beq.n	321f0 <gnss_interface_read+0x1c>
   321e4:	2009      	movs	r0, #9
   321e6:	f7f4 fe4b 	bl	26e80 <nrf_modem_os_errno_set>
   321ea:	f04f 35ff 	mov.w	r5, #4294967295
   321ee:	e054      	b.n	3229a <gnss_interface_read+0xc6>
   321f0:	b109      	cbz	r1, 321f6 <gnss_interface_read+0x22>
   321f2:	2ad7      	cmp	r2, #215	; 0xd7
   321f4:	d801      	bhi.n	321fa <gnss_interface_read+0x26>
   321f6:	2016      	movs	r0, #22
   321f8:	e7f5      	b.n	321e6 <gnss_interface_read+0x12>
   321fa:	4f7f      	ldr	r7, [pc, #508]	; (323f8 <gnss_interface_read+0x224>)
   321fc:	683b      	ldr	r3, [r7, #0]
   321fe:	b29b      	uxth	r3, r3
   32200:	2b04      	cmp	r3, #4
   32202:	d005      	beq.n	32210 <gnss_interface_read+0x3c>
   32204:	683b      	ldr	r3, [r7, #0]
   32206:	b29b      	uxth	r3, r3
   32208:	2b02      	cmp	r3, #2
   3220a:	d001      	beq.n	32210 <gnss_interface_read+0x3c>
   3220c:	2039      	movs	r0, #57	; 0x39
   3220e:	e7ea      	b.n	321e6 <gnss_interface_read+0x12>
   32210:	f1ba 0f00 	cmp.w	sl, #0
   32214:	d004      	beq.n	32220 <gnss_interface_read+0x4c>
   32216:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   3221a:	d101      	bne.n	32220 <gnss_interface_read+0x4c>
   3221c:	202d      	movs	r0, #45	; 0x2d
   3221e:	e7e2      	b.n	321e6 <gnss_interface_read+0x12>
   32220:	683b      	ldr	r3, [r7, #0]
   32222:	f04f 0900 	mov.w	r9, #0
   32226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3222a:	603b      	str	r3, [r7, #0]
   3222c:	23ba      	movs	r3, #186	; 0xba
   3222e:	9302      	str	r3, [sp, #8]
   32230:	f10d 0302 	add.w	r3, sp, #2
   32234:	9303      	str	r3, [sp, #12]
   32236:	2302      	movs	r3, #2
   32238:	f10d 0814 	add.w	r8, sp, #20
   3223c:	4e6f      	ldr	r6, [pc, #444]	; (323fc <gnss_interface_read+0x228>)
   3223e:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 323f4 <gnss_interface_read+0x220>
   32242:	f8cd 8004 	str.w	r8, [sp, #4]
   32246:	9304      	str	r3, [sp, #16]
   32248:	6830      	ldr	r0, [r6, #0]
   3224a:	4652      	mov	r2, sl
   3224c:	6803      	ldr	r3, [r0, #0]
   3224e:	a901      	add	r1, sp, #4
   32250:	689b      	ldr	r3, [r3, #8]
   32252:	4798      	blx	r3
   32254:	1e05      	subs	r5, r0, #0
   32256:	f280 80ac 	bge.w	323b2 <gnss_interface_read+0x1de>
   3225a:	f01a 0f02 	tst.w	sl, #2
   3225e:	f040 80a5 	bne.w	323ac <gnss_interface_read+0x1d8>
   32262:	4d67      	ldr	r5, [pc, #412]	; (32400 <gnss_interface_read+0x22c>)
   32264:	683b      	ldr	r3, [r7, #0]
   32266:	4967      	ldr	r1, [pc, #412]	; (32404 <gnss_interface_read+0x230>)
   32268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   3226c:	ea53 0309 	orrs.w	r3, r3, r9
   32270:	782a      	ldrb	r2, [r5, #0]
   32272:	d109      	bne.n	32288 <gnss_interface_read+0xb4>
   32274:	b91a      	cbnz	r2, 3227e <gnss_interface_read+0xaa>
   32276:	f04f 0970 	mov.w	r9, #112	; 0x70
   3227a:	4648      	mov	r0, r9
   3227c:	e7b3      	b.n	321e6 <gnss_interface_read+0x12>
   3227e:	4658      	mov	r0, fp
   32280:	f7f4 fd46 	bl	26d10 <nrf_modem_os_timedwait>
   32284:	4681      	mov	r9, r0
   32286:	e7ed      	b.n	32264 <gnss_interface_read+0x90>
   32288:	2a00      	cmp	r2, #0
   3228a:	d1dd      	bne.n	32248 <gnss_interface_read+0x74>
   3228c:	e7f3      	b.n	32276 <gnss_interface_read+0xa2>
   3228e:	f1b9 0f00 	cmp.w	r9, #0
   32292:	d1f2      	bne.n	3227a <gnss_interface_read+0xa6>
   32294:	2023      	movs	r0, #35	; 0x23
   32296:	f7f4 fdf3 	bl	26e80 <nrf_modem_os_errno_set>
   3229a:	4628      	mov	r0, r5
   3229c:	b035      	add	sp, #212	; 0xd4
   3229e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   322a2:	f244 0201 	movw	r2, #16385	; 0x4001
   322a6:	4293      	cmp	r3, r2
   322a8:	d170      	bne.n	3238c <gnss_interface_read+0x1b8>
   322aa:	2301      	movs	r3, #1
   322ac:	7023      	strb	r3, [r4, #0]
   322ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   322b2:	e9c4 2302 	strd	r2, r3, [r4, #8]
   322b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   322ba:	e9c4 2304 	strd	r2, r3, [r4, #16]
   322be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   322c0:	200a      	movs	r0, #10
   322c2:	61a3      	str	r3, [r4, #24]
   322c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   322c6:	61e3      	str	r3, [r4, #28]
   322c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   322ca:	6223      	str	r3, [r4, #32]
   322cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   322ce:	6263      	str	r3, [r4, #36]	; 0x24
   322d0:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   322d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   322d8:	f8dd 3041 	ldr.w	r3, [sp, #65]	; 0x41
   322dc:	6363      	str	r3, [r4, #52]	; 0x34
   322de:	f8dd 3045 	ldr.w	r3, [sp, #69]	; 0x45
   322e2:	63a3      	str	r3, [r4, #56]	; 0x38
   322e4:	f8dd 3049 	ldr.w	r3, [sp, #73]	; 0x49
   322e8:	63e3      	str	r3, [r4, #60]	; 0x3c
   322ea:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   322ee:	6423      	str	r3, [r4, #64]	; 0x40
   322f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   322f4:	8523      	strh	r3, [r4, #40]	; 0x28
   322f6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   322fa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
   322fe:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   32302:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   32306:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   3230a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   3230e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
   32312:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   32316:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   3231a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   3231e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
   32322:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   32326:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3232a:	2200      	movs	r2, #0
   3232c:	8623      	strh	r3, [r4, #48]	; 0x30
   3232e:	ab34      	add	r3, sp, #208	; 0xd0
   32330:	fb00 3302 	mla	r3, r0, r2, r3
   32334:	f833 1c7e 	ldrh.w	r1, [r3, #-126]
   32338:	3201      	adds	r2, #1
   3233a:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
   3233e:	f898 1040 	ldrb.w	r1, [r8, #64]	; 0x40
   32342:	2a0c      	cmp	r2, #12
   32344:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
   32348:	f813 5c7a 	ldrb.w	r5, [r3, #-122]
   3234c:	f813 1c7b 	ldrb.w	r1, [r3, #-123]
   32350:	f104 040c 	add.w	r4, r4, #12
   32354:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   32358:	87e1      	strh	r1, [r4, #62]	; 0x3e
   3235a:	f813 1c79 	ldrb.w	r1, [r3, #-121]
   3235e:	f813 5c78 	ldrb.w	r5, [r3, #-120]
   32362:	f108 080a 	add.w	r8, r8, #10
   32366:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   3236a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
   3236e:	f813 1c77 	ldrb.w	r1, [r3, #-119]
   32372:	f813 3c76 	ldrb.w	r3, [r3, #-118]
   32376:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
   3237a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   3237e:	f898 303d 	ldrb.w	r3, [r8, #61]	; 0x3d
   32382:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   32386:	d1d2      	bne.n	3232e <gnss_interface_read+0x15a>
   32388:	25d8      	movs	r5, #216	; 0xd8
   3238a:	e027      	b.n	323dc <gnss_interface_read+0x208>
   3238c:	f244 0203 	movw	r2, #16387	; 0x4003
   32390:	4293      	cmp	r3, r2
   32392:	f47f af30 	bne.w	321f6 <gnss_interface_read+0x22>
   32396:	2303      	movs	r3, #3
   32398:	7023      	strb	r3, [r4, #0]
   3239a:	9b05      	ldr	r3, [sp, #20]
   3239c:	2514      	movs	r5, #20
   3239e:	60a3      	str	r3, [r4, #8]
   323a0:	9b06      	ldr	r3, [sp, #24]
   323a2:	60e3      	str	r3, [r4, #12]
   323a4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   323a8:	6123      	str	r3, [r4, #16]
   323aa:	e017      	b.n	323dc <gnss_interface_read+0x208>
   323ac:	1c6b      	adds	r3, r5, #1
   323ae:	f43f af6e 	beq.w	3228e <gnss_interface_read+0xba>
   323b2:	f244 0202 	movw	r2, #16386	; 0x4002
   323b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   323ba:	4293      	cmp	r3, r2
   323bc:	f47f af71 	bne.w	322a2 <gnss_interface_read+0xce>
   323c0:	4640      	mov	r0, r8
   323c2:	f7ea ff4b 	bl	1d25c <strlen>
   323c6:	2302      	movs	r3, #2
   323c8:	1c45      	adds	r5, r0, #1
   323ca:	f804 3b08 	strb.w	r3, [r4], #8
   323ce:	b2ad      	uxth	r5, r5
   323d0:	462a      	mov	r2, r5
   323d2:	4641      	mov	r1, r8
   323d4:	4620      	mov	r0, r4
   323d6:	f00b fdc8 	bl	3df6a <memcpy>
   323da:	3508      	adds	r5, #8
   323dc:	6830      	ldr	r0, [r6, #0]
   323de:	6803      	ldr	r3, [r0, #0]
   323e0:	68db      	ldr	r3, [r3, #12]
   323e2:	4798      	blx	r3
   323e4:	2800      	cmp	r0, #0
   323e6:	f77f af58 	ble.w	3229a <gnss_interface_read+0xc6>
   323ea:	683b      	ldr	r3, [r7, #0]
   323ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   323f0:	603b      	str	r3, [r7, #0]
   323f2:	e752      	b.n	3229a <gnss_interface_read+0xc6>
   323f4:	49765443 	.word	0x49765443
   323f8:	20018998 	.word	0x20018998
   323fc:	200189a0 	.word	0x200189a0
   32400:	2001d7e2 	.word	0x2001d7e2
   32404:	20014864 	.word	0x20014864

00032408 <gnss_interface_setopt>:
   32408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3240c:	4c75      	ldr	r4, [pc, #468]	; (325e4 <gnss_interface_setopt+0x1dc>)
   3240e:	4616      	mov	r6, r2
   32410:	6822      	ldr	r2, [r4, #0]
   32412:	b087      	sub	sp, #28
   32414:	b292      	uxth	r2, r2
   32416:	2a02      	cmp	r2, #2
   32418:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   3241a:	d007      	beq.n	3242c <gnss_interface_setopt+0x24>
   3241c:	2e08      	cmp	r6, #8
   3241e:	d005      	beq.n	3242c <gnss_interface_setopt+0x24>
   32420:	f1a6 020a 	sub.w	r2, r6, #10
   32424:	2a01      	cmp	r2, #1
   32426:	d901      	bls.n	3242c <gnss_interface_setopt+0x24>
   32428:	200e      	movs	r0, #14
   3242a:	e003      	b.n	32434 <gnss_interface_setopt+0x2c>
   3242c:	6822      	ldr	r2, [r4, #0]
   3242e:	0252      	lsls	r2, r2, #9
   32430:	d508      	bpl.n	32444 <gnss_interface_setopt+0x3c>
   32432:	2073      	movs	r0, #115	; 0x73
   32434:	f7f4 fd24 	bl	26e80 <nrf_modem_os_errno_set>
   32438:	f04f 35ff 	mov.w	r5, #4294967295
   3243c:	4628      	mov	r0, r5
   3243e:	b007      	add	sp, #28
   32440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32444:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   32448:	d001      	beq.n	3244e <gnss_interface_setopt+0x46>
   3244a:	202a      	movs	r0, #42	; 0x2a
   3244c:	e7f2      	b.n	32434 <gnss_interface_setopt+0x2c>
   3244e:	4a66      	ldr	r2, [pc, #408]	; (325e8 <gnss_interface_setopt+0x1e0>)
   32450:	4290      	cmp	r0, r2
   32452:	d001      	beq.n	32458 <gnss_interface_setopt+0x50>
   32454:	2009      	movs	r0, #9
   32456:	e7ed      	b.n	32434 <gnss_interface_setopt+0x2c>
   32458:	f1a6 020a 	sub.w	r2, r6, #10
   3245c:	2a01      	cmp	r2, #1
   3245e:	d902      	bls.n	32466 <gnss_interface_setopt+0x5e>
   32460:	b90b      	cbnz	r3, 32466 <gnss_interface_setopt+0x5e>
   32462:	2016      	movs	r0, #22
   32464:	e7e6      	b.n	32434 <gnss_interface_setopt+0x2c>
   32466:	1e72      	subs	r2, r6, #1
   32468:	2a0a      	cmp	r2, #10
   3246a:	d8fa      	bhi.n	32462 <gnss_interface_setopt+0x5a>
   3246c:	e8df f002 	tbb	[pc, r2]
   32470:	4b45063d 	.word	0x4b45063d
   32474:	806a5a53 	.word	0x806a5a53
   32478:	9362      	.short	0x9362
   3247a:	a5          	.byte	0xa5
   3247b:	00          	.byte	0x00
   3247c:	2d02      	cmp	r5, #2
   3247e:	d1f0      	bne.n	32462 <gnss_interface_setopt+0x5a>
   32480:	2210      	movs	r2, #16
   32482:	881b      	ldrh	r3, [r3, #0]
   32484:	9202      	str	r2, [sp, #8]
   32486:	f8ad 3011 	strh.w	r3, [sp, #17]
   3248a:	f241 1003 	movw	r0, #4355	; 0x1103
   3248e:	6823      	ldr	r3, [r4, #0]
   32490:	2214      	movs	r2, #20
   32492:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   32496:	a901      	add	r1, sp, #4
   32498:	6023      	str	r3, [r4, #0]
   3249a:	f7ff fdcd 	bl	32038 <send_message>
   3249e:	4605      	mov	r5, r0
   324a0:	2800      	cmp	r0, #0
   324a2:	f040 8091 	bne.w	325c8 <gnss_interface_setopt+0x1c0>
   324a6:	f8df 9148 	ldr.w	r9, [pc, #328]	; 325f0 <gnss_interface_setopt+0x1e8>
   324aa:	f8df 813c 	ldr.w	r8, [pc, #316]	; 325e8 <gnss_interface_setopt+0x1e0>
   324ae:	4649      	mov	r1, r9
   324b0:	4640      	mov	r0, r8
   324b2:	f7f4 fc2d 	bl	26d10 <nrf_modem_os_timedwait>
   324b6:	6827      	ldr	r7, [r4, #0]
   324b8:	f417 0780 	ands.w	r7, r7, #4194304	; 0x400000
   324bc:	d1f7      	bne.n	324ae <gnss_interface_setopt+0xa6>
   324be:	f8df 8134 	ldr.w	r8, [pc, #308]	; 325f4 <gnss_interface_setopt+0x1ec>
   324c2:	f8d8 0000 	ldr.w	r0, [r8]
   324c6:	b118      	cbz	r0, 324d0 <gnss_interface_setopt+0xc8>
   324c8:	f00a faa6 	bl	3ca18 <rpc_gnss_client_data_free>
   324cc:	f8c8 7000 	str.w	r7, [r8]
   324d0:	6823      	ldr	r3, [r4, #0]
   324d2:	021b      	lsls	r3, r3, #8
   324d4:	d47d      	bmi.n	325d2 <gnss_interface_setopt+0x1ca>
   324d6:	200e      	movs	r0, #14
   324d8:	f7f4 fcd2 	bl	26e80 <nrf_modem_os_errno_set>
   324dc:	f04f 35ff 	mov.w	r5, #4294967295
   324e0:	6823      	ldr	r3, [r4, #0]
   324e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   324e6:	6023      	str	r3, [r4, #0]
   324e8:	e7a8      	b.n	3243c <gnss_interface_setopt+0x34>
   324ea:	2d02      	cmp	r5, #2
   324ec:	d1b9      	bne.n	32462 <gnss_interface_setopt+0x5a>
   324ee:	2208      	movs	r2, #8
   324f0:	881b      	ldrh	r3, [r3, #0]
   324f2:	9202      	str	r2, [sp, #8]
   324f4:	f8ad 300f 	strh.w	r3, [sp, #15]
   324f8:	e7c7      	b.n	3248a <gnss_interface_setopt+0x82>
   324fa:	2d01      	cmp	r5, #1
   324fc:	d1b1      	bne.n	32462 <gnss_interface_setopt+0x5a>
   324fe:	781b      	ldrb	r3, [r3, #0]
   32500:	2b01      	cmp	r3, #1
   32502:	d0c2      	beq.n	3248a <gnss_interface_setopt+0x82>
   32504:	e7ad      	b.n	32462 <gnss_interface_setopt+0x5a>
   32506:	2d02      	cmp	r5, #2
   32508:	d1ab      	bne.n	32462 <gnss_interface_setopt+0x5a>
   3250a:	2220      	movs	r2, #32
   3250c:	881b      	ldrh	r3, [r3, #0]
   3250e:	9202      	str	r2, [sp, #8]
   32510:	f8ad 3013 	strh.w	r3, [sp, #19]
   32514:	e7b9      	b.n	3248a <gnss_interface_setopt+0x82>
   32516:	2d01      	cmp	r5, #1
   32518:	d1a3      	bne.n	32462 <gnss_interface_setopt+0x5a>
   3251a:	781b      	ldrb	r3, [r3, #0]
   3251c:	9502      	str	r5, [sp, #8]
   3251e:	f88d 300c 	strb.w	r3, [sp, #12]
   32522:	e7b2      	b.n	3248a <gnss_interface_setopt+0x82>
   32524:	2d01      	cmp	r5, #1
   32526:	d19c      	bne.n	32462 <gnss_interface_setopt+0x5a>
   32528:	2202      	movs	r2, #2
   3252a:	781b      	ldrb	r3, [r3, #0]
   3252c:	9202      	str	r2, [sp, #8]
   3252e:	f88d 300d 	strb.w	r3, [sp, #13]
   32532:	e7aa      	b.n	3248a <gnss_interface_setopt+0x82>
   32534:	2d01      	cmp	r5, #1
   32536:	d194      	bne.n	32462 <gnss_interface_setopt+0x5a>
   32538:	2240      	movs	r2, #64	; 0x40
   3253a:	781b      	ldrb	r3, [r3, #0]
   3253c:	9202      	str	r2, [sp, #8]
   3253e:	f88d 3015 	strb.w	r3, [sp, #21]
   32542:	e7a2      	b.n	3248a <gnss_interface_setopt+0x82>
   32544:	6822      	ldr	r2, [r4, #0]
   32546:	b292      	uxth	r2, r2
   32548:	2a02      	cmp	r2, #2
   3254a:	f47f af6d 	bne.w	32428 <gnss_interface_setopt+0x20>
   3254e:	2d04      	cmp	r5, #4
   32550:	d187      	bne.n	32462 <gnss_interface_setopt+0x5a>
   32552:	2201      	movs	r2, #1
   32554:	681b      	ldr	r3, [r3, #0]
   32556:	f88d 2008 	strb.w	r2, [sp, #8]
   3255a:	f8cd 3009 	str.w	r3, [sp, #9]
   3255e:	6823      	ldr	r3, [r4, #0]
   32560:	0c1b      	lsrs	r3, r3, #16
   32562:	041b      	lsls	r3, r3, #16
   32564:	f043 0303 	orr.w	r3, r3, #3
   32568:	6023      	str	r3, [r4, #0]
   3256a:	f241 0004 	movw	r0, #4100	; 0x1004
   3256e:	e78e      	b.n	3248e <gnss_interface_setopt+0x86>
   32570:	6822      	ldr	r2, [r4, #0]
   32572:	b292      	uxth	r2, r2
   32574:	2a04      	cmp	r2, #4
   32576:	d004      	beq.n	32582 <gnss_interface_setopt+0x17a>
   32578:	6822      	ldr	r2, [r4, #0]
   3257a:	b292      	uxth	r2, r2
   3257c:	2a02      	cmp	r2, #2
   3257e:	f47f af53 	bne.w	32428 <gnss_interface_setopt+0x20>
   32582:	2200      	movs	r2, #0
   32584:	2d04      	cmp	r5, #4
   32586:	f88d 2008 	strb.w	r2, [sp, #8]
   3258a:	f47f af6a 	bne.w	32462 <gnss_interface_setopt+0x5a>
   3258e:	681b      	ldr	r3, [r3, #0]
   32590:	f8cd 3009 	str.w	r3, [sp, #9]
   32594:	e7e9      	b.n	3256a <gnss_interface_setopt+0x162>
   32596:	6823      	ldr	r3, [r4, #0]
   32598:	b29b      	uxth	r3, r3
   3259a:	2b04      	cmp	r3, #4
   3259c:	f47f af44 	bne.w	32428 <gnss_interface_setopt+0x20>
   325a0:	2302      	movs	r3, #2
   325a2:	f88d 3008 	strb.w	r3, [sp, #8]
   325a6:	2300      	movs	r3, #0
   325a8:	f88d 3009 	strb.w	r3, [sp, #9]
   325ac:	f88d 300a 	strb.w	r3, [sp, #10]
   325b0:	f88d 300b 	strb.w	r3, [sp, #11]
   325b4:	f88d 300c 	strb.w	r3, [sp, #12]
   325b8:	e7d7      	b.n	3256a <gnss_interface_setopt+0x162>
   325ba:	6823      	ldr	r3, [r4, #0]
   325bc:	b29b      	uxth	r3, r3
   325be:	2b04      	cmp	r3, #4
   325c0:	f47f af32 	bne.w	32428 <gnss_interface_setopt+0x20>
   325c4:	2303      	movs	r3, #3
   325c6:	e7ec      	b.n	325a2 <gnss_interface_setopt+0x19a>
   325c8:	6823      	ldr	r3, [r4, #0]
   325ca:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   325ce:	6023      	str	r3, [r4, #0]
   325d0:	e72a      	b.n	32428 <gnss_interface_setopt+0x20>
   325d2:	2e08      	cmp	r6, #8
   325d4:	d184      	bne.n	324e0 <gnss_interface_setopt+0xd8>
   325d6:	4b05      	ldr	r3, [pc, #20]	; (325ec <gnss_interface_setopt+0x1e4>)
   325d8:	6818      	ldr	r0, [r3, #0]
   325da:	6803      	ldr	r3, [r0, #0]
   325dc:	691b      	ldr	r3, [r3, #16]
   325de:	4798      	blx	r3
   325e0:	e77e      	b.n	324e0 <gnss_interface_setopt+0xd8>
   325e2:	bf00      	nop
   325e4:	20018998 	.word	0x20018998
   325e8:	49765443 	.word	0x49765443
   325ec:	200189a0 	.word	0x200189a0
   325f0:	20014864 	.word	0x20014864
   325f4:	2001899c 	.word	0x2001899c

000325f8 <gnss_interface_getopt>:
   325f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   325fc:	4d44      	ldr	r5, [pc, #272]	; (32710 <gnss_interface_getopt+0x118>)
   325fe:	b087      	sub	sp, #28
   32600:	682c      	ldr	r4, [r5, #0]
   32602:	461e      	mov	r6, r3
   32604:	b2a4      	uxth	r4, r4
   32606:	2c02      	cmp	r4, #2
   32608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3260a:	d001      	beq.n	32610 <gnss_interface_getopt+0x18>
   3260c:	200e      	movs	r0, #14
   3260e:	e003      	b.n	32618 <gnss_interface_getopt+0x20>
   32610:	682c      	ldr	r4, [r5, #0]
   32612:	03e7      	lsls	r7, r4, #15
   32614:	d508      	bpl.n	32628 <gnss_interface_getopt+0x30>
   32616:	2005      	movs	r0, #5
   32618:	f7f4 fc32 	bl	26e80 <nrf_modem_os_errno_set>
   3261c:	f04f 34ff 	mov.w	r4, #4294967295
   32620:	4620      	mov	r0, r4
   32622:	b007      	add	sp, #28
   32624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32628:	682c      	ldr	r4, [r5, #0]
   3262a:	01e4      	lsls	r4, r4, #7
   3262c:	d501      	bpl.n	32632 <gnss_interface_getopt+0x3a>
   3262e:	2073      	movs	r0, #115	; 0x73
   32630:	e7f2      	b.n	32618 <gnss_interface_getopt+0x20>
   32632:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   32636:	d001      	beq.n	3263c <gnss_interface_getopt+0x44>
   32638:	202a      	movs	r0, #42	; 0x2a
   3263a:	e7ed      	b.n	32618 <gnss_interface_getopt+0x20>
   3263c:	4935      	ldr	r1, [pc, #212]	; (32714 <gnss_interface_getopt+0x11c>)
   3263e:	4288      	cmp	r0, r1
   32640:	d001      	beq.n	32646 <gnss_interface_getopt+0x4e>
   32642:	2009      	movs	r0, #9
   32644:	e7e8      	b.n	32618 <gnss_interface_getopt+0x20>
   32646:	b106      	cbz	r6, 3264a <gnss_interface_getopt+0x52>
   32648:	b90b      	cbnz	r3, 3264e <gnss_interface_getopt+0x56>
   3264a:	2016      	movs	r0, #22
   3264c:	e7e4      	b.n	32618 <gnss_interface_getopt+0x20>
   3264e:	1e57      	subs	r7, r2, #1
   32650:	2f05      	cmp	r7, #5
   32652:	d8fa      	bhi.n	3264a <gnss_interface_getopt+0x52>
   32654:	e8df f007 	tbb	[pc, r7]
   32658:	03310303 	.word	0x03310303
   3265c:	3131      	.short	0x3131
   3265e:	681b      	ldr	r3, [r3, #0]
   32660:	2b02      	cmp	r3, #2
   32662:	d1f2      	bne.n	3264a <gnss_interface_getopt+0x52>
   32664:	682b      	ldr	r3, [r5, #0]
   32666:	2214      	movs	r2, #20
   32668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3266c:	2100      	movs	r1, #0
   3266e:	a801      	add	r0, sp, #4
   32670:	602b      	str	r3, [r5, #0]
   32672:	f00b fc9a 	bl	3dfaa <memset>
   32676:	2214      	movs	r2, #20
   32678:	f241 1002 	movw	r0, #4354	; 0x1102
   3267c:	a901      	add	r1, sp, #4
   3267e:	f7ff fcdb 	bl	32038 <send_message>
   32682:	4604      	mov	r4, r0
   32684:	b9e0      	cbnz	r0, 326c0 <gnss_interface_getopt+0xc8>
   32686:	f8df 9090 	ldr.w	r9, [pc, #144]	; 32718 <gnss_interface_getopt+0x120>
   3268a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 32714 <gnss_interface_getopt+0x11c>
   3268e:	4649      	mov	r1, r9
   32690:	4640      	mov	r0, r8
   32692:	f7f4 fb3d 	bl	26d10 <nrf_modem_os_timedwait>
   32696:	682b      	ldr	r3, [r5, #0]
   32698:	01d9      	lsls	r1, r3, #7
   3269a:	d4f8      	bmi.n	3268e <gnss_interface_getopt+0x96>
   3269c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3271c <gnss_interface_getopt+0x124>
   326a0:	f8d8 3000 	ldr.w	r3, [r8]
   326a4:	b1db      	cbz	r3, 326de <gnss_interface_getopt+0xe6>
   326a6:	682a      	ldr	r2, [r5, #0]
   326a8:	0192      	lsls	r2, r2, #6
   326aa:	d518      	bpl.n	326de <gnss_interface_getopt+0xe6>
   326ac:	2f05      	cmp	r7, #5
   326ae:	d828      	bhi.n	32702 <gnss_interface_getopt+0x10a>
   326b0:	e8df f007 	tbb	[pc, r7]
   326b4:	201d1a0b 	.word	0x201d1a0b
   326b8:	2523      	.short	0x2523
   326ba:	681b      	ldr	r3, [r3, #0]
   326bc:	2b01      	cmp	r3, #1
   326be:	e7d0      	b.n	32662 <gnss_interface_getopt+0x6a>
   326c0:	682b      	ldr	r3, [r5, #0]
   326c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   326c6:	602b      	str	r3, [r5, #0]
   326c8:	e7a0      	b.n	3260c <gnss_interface_getopt+0x14>
   326ca:	f8b3 300f 	ldrh.w	r3, [r3, #15]
   326ce:	8033      	strh	r3, [r6, #0]
   326d0:	f8d8 0000 	ldr.w	r0, [r8]
   326d4:	f00a f9a0 	bl	3ca18 <rpc_gnss_client_data_free>
   326d8:	2300      	movs	r3, #0
   326da:	f8c8 3000 	str.w	r3, [r8]
   326de:	682b      	ldr	r3, [r5, #0]
   326e0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   326e4:	602b      	str	r3, [r5, #0]
   326e6:	e79b      	b.n	32620 <gnss_interface_getopt+0x28>
   326e8:	f8b3 3011 	ldrh.w	r3, [r3, #17]
   326ec:	e7ef      	b.n	326ce <gnss_interface_getopt+0xd6>
   326ee:	7b9b      	ldrb	r3, [r3, #14]
   326f0:	7033      	strb	r3, [r6, #0]
   326f2:	e7ed      	b.n	326d0 <gnss_interface_getopt+0xd8>
   326f4:	f8b3 3013 	ldrh.w	r3, [r3, #19]
   326f8:	e7e9      	b.n	326ce <gnss_interface_getopt+0xd6>
   326fa:	7b1b      	ldrb	r3, [r3, #12]
   326fc:	e7f8      	b.n	326f0 <gnss_interface_getopt+0xf8>
   326fe:	7b5b      	ldrb	r3, [r3, #13]
   32700:	e7f6      	b.n	326f0 <gnss_interface_getopt+0xf8>
   32702:	2016      	movs	r0, #22
   32704:	f7f4 fbbc 	bl	26e80 <nrf_modem_os_errno_set>
   32708:	f04f 34ff 	mov.w	r4, #4294967295
   3270c:	e7e0      	b.n	326d0 <gnss_interface_getopt+0xd8>
   3270e:	bf00      	nop
   32710:	20018998 	.word	0x20018998
   32714:	49765443 	.word	0x49765443
   32718:	20014864 	.word	0x20014864
   3271c:	2001899c 	.word	0x2001899c

00032720 <gnss_interface_init>:
   32720:	b510      	push	{r4, lr}
   32722:	2400      	movs	r4, #0
   32724:	4a0a      	ldr	r2, [pc, #40]	; (32750 <gnss_interface_init+0x30>)
   32726:	480b      	ldr	r0, [pc, #44]	; (32754 <gnss_interface_init+0x34>)
   32728:	6811      	ldr	r1, [r2, #0]
   3272a:	4b0b      	ldr	r3, [pc, #44]	; (32758 <gnss_interface_init+0x38>)
   3272c:	4001      	ands	r1, r0
   3272e:	801c      	strh	r4, [r3, #0]
   32730:	4b0a      	ldr	r3, [pc, #40]	; (3275c <gnss_interface_init+0x3c>)
   32732:	6011      	str	r1, [r2, #0]
   32734:	601c      	str	r4, [r3, #0]
   32736:	6813      	ldr	r3, [r2, #0]
   32738:	4003      	ands	r3, r0
   3273a:	f043 0301 	orr.w	r3, r3, #1
   3273e:	6013      	str	r3, [r2, #0]
   32740:	2201      	movs	r2, #1
   32742:	4b07      	ldr	r3, [pc, #28]	; (32760 <gnss_interface_init+0x40>)
   32744:	4807      	ldr	r0, [pc, #28]	; (32764 <gnss_interface_init+0x44>)
   32746:	701a      	strb	r2, [r3, #0]
   32748:	f7fd fbf8 	bl	2ff3c <rpc_gnss_client_set_handler>
   3274c:	4620      	mov	r0, r4
   3274e:	bd10      	pop	{r4, pc}
   32750:	20018998 	.word	0x20018998
   32754:	ffff0000 	.word	0xffff0000
   32758:	2001ca50 	.word	0x2001ca50
   3275c:	2001899c 	.word	0x2001899c
   32760:	2001d7e2 	.word	0x2001d7e2
   32764:	00031eb9 	.word	0x00031eb9

00032768 <gnss_interface_open>:
   32768:	4b16      	ldr	r3, [pc, #88]	; (327c4 <gnss_interface_open+0x5c>)
   3276a:	4608      	mov	r0, r1
   3276c:	781b      	ldrb	r3, [r3, #0]
   3276e:	b510      	push	{r4, lr}
   32770:	b92b      	cbnz	r3, 3277e <gnss_interface_open+0x16>
   32772:	2070      	movs	r0, #112	; 0x70
   32774:	f7f4 fb84 	bl	26e80 <nrf_modem_os_errno_set>
   32778:	f04f 30ff 	mov.w	r0, #4294967295
   3277c:	e01f      	b.n	327be <gnss_interface_open+0x56>
   3277e:	2902      	cmp	r1, #2
   32780:	d001      	beq.n	32786 <gnss_interface_open+0x1e>
   32782:	2029      	movs	r0, #41	; 0x29
   32784:	e7f6      	b.n	32774 <gnss_interface_open+0xc>
   32786:	4c10      	ldr	r4, [pc, #64]	; (327c8 <gnss_interface_open+0x60>)
   32788:	6823      	ldr	r3, [r4, #0]
   3278a:	b29b      	uxth	r3, r3
   3278c:	2b01      	cmp	r3, #1
   3278e:	d001      	beq.n	32794 <gnss_interface_open+0x2c>
   32790:	2005      	movs	r0, #5
   32792:	e7ef      	b.n	32774 <gnss_interface_open+0xc>
   32794:	6823      	ldr	r3, [r4, #0]
   32796:	2200      	movs	r2, #0
   32798:	0c1b      	lsrs	r3, r3, #16
   3279a:	041b      	lsls	r3, r3, #16
   3279c:	f043 0302 	orr.w	r3, r3, #2
   327a0:	490a      	ldr	r1, [pc, #40]	; (327cc <gnss_interface_open+0x64>)
   327a2:	6023      	str	r3, [r4, #0]
   327a4:	f000 fd4a 	bl	3323c <packet_handler_create>
   327a8:	4a09      	ldr	r2, [pc, #36]	; (327d0 <gnss_interface_open+0x68>)
   327aa:	6010      	str	r0, [r2, #0]
   327ac:	b140      	cbz	r0, 327c0 <gnss_interface_open+0x58>
   327ae:	6822      	ldr	r2, [r4, #0]
   327b0:	6803      	ldr	r3, [r0, #0]
   327b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   327b6:	681b      	ldr	r3, [r3, #0]
   327b8:	6022      	str	r2, [r4, #0]
   327ba:	4798      	blx	r3
   327bc:	4805      	ldr	r0, [pc, #20]	; (327d4 <gnss_interface_open+0x6c>)
   327be:	bd10      	pop	{r4, pc}
   327c0:	200e      	movs	r0, #14
   327c2:	e7d7      	b.n	32774 <gnss_interface_open+0xc>
   327c4:	2001d7e2 	.word	0x2001d7e2
   327c8:	20018998 	.word	0x20018998
   327cc:	0003d619 	.word	0x0003d619
   327d0:	200189a0 	.word	0x200189a0
   327d4:	49765443 	.word	0x49765443

000327d8 <gnss_interface_close>:
   327d8:	b530      	push	{r4, r5, lr}
   327da:	4b14      	ldr	r3, [pc, #80]	; (3282c <gnss_interface_close+0x54>)
   327dc:	b085      	sub	sp, #20
   327de:	4298      	cmp	r0, r3
   327e0:	d006      	beq.n	327f0 <gnss_interface_close+0x18>
   327e2:	2009      	movs	r0, #9
   327e4:	f7f4 fb4c 	bl	26e80 <nrf_modem_os_errno_set>
   327e8:	f04f 30ff 	mov.w	r0, #4294967295
   327ec:	b005      	add	sp, #20
   327ee:	bd30      	pop	{r4, r5, pc}
   327f0:	4c0f      	ldr	r4, [pc, #60]	; (32830 <gnss_interface_close+0x58>)
   327f2:	6823      	ldr	r3, [r4, #0]
   327f4:	b29b      	uxth	r3, r3
   327f6:	2b04      	cmp	r3, #4
   327f8:	d108      	bne.n	3280c <gnss_interface_close+0x34>
   327fa:	2200      	movs	r2, #0
   327fc:	9300      	str	r3, [sp, #0]
   327fe:	9203      	str	r2, [sp, #12]
   32800:	f44f 7101 	mov.w	r1, #516	; 0x204
   32804:	2208      	movs	r2, #8
   32806:	ab03      	add	r3, sp, #12
   32808:	f00b f9f9 	bl	3dbfe <nrf_setsockopt>
   3280c:	4d09      	ldr	r5, [pc, #36]	; (32834 <gnss_interface_close+0x5c>)
   3280e:	6828      	ldr	r0, [r5, #0]
   32810:	b118      	cbz	r0, 3281a <gnss_interface_close+0x42>
   32812:	f00b f8a8 	bl	3d966 <packet_handler_delete>
   32816:	2300      	movs	r3, #0
   32818:	602b      	str	r3, [r5, #0]
   3281a:	6823      	ldr	r3, [r4, #0]
   3281c:	2000      	movs	r0, #0
   3281e:	0c1b      	lsrs	r3, r3, #16
   32820:	041b      	lsls	r3, r3, #16
   32822:	f043 0301 	orr.w	r3, r3, #1
   32826:	6023      	str	r3, [r4, #0]
   32828:	e7e0      	b.n	327ec <gnss_interface_close+0x14>
   3282a:	bf00      	nop
   3282c:	49765443 	.word	0x49765443
   32830:	20018998 	.word	0x20018998
   32834:	200189a0 	.word	0x200189a0

00032838 <handle_verify_and_covert>:
   32838:	4a0b      	ldr	r2, [pc, #44]	; (32868 <handle_verify_and_covert+0x30>)
   3283a:	0c03      	lsrs	r3, r0, #16
   3283c:	041b      	lsls	r3, r3, #16
   3283e:	4293      	cmp	r3, r2
   32840:	d10f      	bne.n	32862 <handle_verify_and_covert+0x2a>
   32842:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   32846:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   3284a:	2809      	cmp	r0, #9
   3284c:	dc09      	bgt.n	32862 <handle_verify_and_covert+0x2a>
   3284e:	4b07      	ldr	r3, [pc, #28]	; (3286c <handle_verify_and_covert+0x34>)
   32850:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   32854:	b12b      	cbz	r3, 32862 <handle_verify_and_covert+0x2a>
   32856:	689b      	ldr	r3, [r3, #8]
   32858:	2b00      	cmp	r3, #0
   3285a:	bf08      	it	eq
   3285c:	f06f 0008 	mvneq.w	r0, #8
   32860:	4770      	bx	lr
   32862:	f06f 0008 	mvn.w	r0, #8
   32866:	4770      	bx	lr
   32868:	789a0000 	.word	0x789a0000
   3286c:	200189a8 	.word	0x200189a8

00032870 <command_write>:
   32870:	4b0c      	ldr	r3, [pc, #48]	; (328a4 <command_write+0x34>)
   32872:	b513      	push	{r0, r1, r4, lr}
   32874:	480c      	ldr	r0, [pc, #48]	; (328a8 <command_write+0x38>)
   32876:	681c      	ldr	r4, [r3, #0]
   32878:	f7ea fcf0 	bl	1d25c <strlen>
   3287c:	2300      	movs	r3, #0
   3287e:	4602      	mov	r2, r0
   32880:	e9cd 3300 	strd	r3, r3, [sp]
   32884:	4908      	ldr	r1, [pc, #32]	; (328a8 <command_write+0x38>)
   32886:	4620      	mov	r0, r4
   32888:	f00a fdba 	bl	3d400 <at_interface_write>
   3288c:	4604      	mov	r4, r0
   3288e:	4806      	ldr	r0, [pc, #24]	; (328a8 <command_write+0x38>)
   32890:	f7ea fce4 	bl	1d25c <strlen>
   32894:	42a0      	cmp	r0, r4
   32896:	bf14      	ite	ne
   32898:	f06f 0004 	mvnne.w	r0, #4
   3289c:	2000      	moveq	r0, #0
   3289e:	b002      	add	sp, #8
   328a0:	bd10      	pop	{r4, pc}
   328a2:	bf00      	nop
   328a4:	200189a4 	.word	0x200189a4
   328a8:	2001d7e4 	.word	0x2001d7e4

000328ac <event_wait>:
   328ac:	2300      	movs	r3, #0
   328ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   328b2:	e9cd 3300 	strd	r3, r3, [sp]
   328b6:	4606      	mov	r6, r0
   328b8:	4818      	ldr	r0, [pc, #96]	; (3291c <event_wait+0x70>)
   328ba:	460d      	mov	r5, r1
   328bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   328c0:	4917      	ldr	r1, [pc, #92]	; (32920 <event_wait+0x74>)
   328c2:	6800      	ldr	r0, [r0, #0]
   328c4:	f00a fe06 	bl	3d4d4 <at_interface_read>
   328c8:	4c16      	ldr	r4, [pc, #88]	; (32924 <event_wait+0x78>)
   328ca:	4607      	mov	r7, r0
   328cc:	f854 8035 	ldr.w	r8, [r4, r5, lsl #3]
   328d0:	4640      	mov	r0, r8
   328d2:	f7ea fcc3 	bl	1d25c <strlen>
   328d6:	4287      	cmp	r7, r0
   328d8:	4602      	mov	r2, r0
   328da:	db0d      	blt.n	328f8 <event_wait+0x4c>
   328dc:	4640      	mov	r0, r8
   328de:	4910      	ldr	r1, [pc, #64]	; (32920 <event_wait+0x74>)
   328e0:	f00b fcfe 	bl	3e2e0 <strncmp>
   328e4:	b940      	cbnz	r0, 328f8 <event_wait+0x4c>
   328e6:	4630      	mov	r0, r6
   328e8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   328ec:	6863      	ldr	r3, [r4, #4]
   328ee:	490c      	ldr	r1, [pc, #48]	; (32920 <event_wait+0x74>)
   328f0:	b002      	add	sp, #8
   328f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   328f6:	4718      	bx	r3
   328f8:	480b      	ldr	r0, [pc, #44]	; (32928 <event_wait+0x7c>)
   328fa:	f7ea fcaf 	bl	1d25c <strlen>
   328fe:	4908      	ldr	r1, [pc, #32]	; (32920 <event_wait+0x74>)
   32900:	4602      	mov	r2, r0
   32902:	4809      	ldr	r0, [pc, #36]	; (32928 <event_wait+0x7c>)
   32904:	f00b fcec 	bl	3e2e0 <strncmp>
   32908:	2800      	cmp	r0, #0
   3290a:	bf14      	ite	ne
   3290c:	f06f 0004 	mvnne.w	r0, #4
   32910:	f06f 0007 	mvneq.w	r0, #7
   32914:	b002      	add	sp, #8
   32916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3291a:	bf00      	nop
   3291c:	200189a4 	.word	0x200189a4
   32920:	2001d7e4 	.word	0x2001d7e4
   32924:	00040054 	.word	0x00040054
   32928:	000431be 	.word	0x000431be

0003292c <pdn_state_get_parser>:
   3292c:	2300      	movs	r3, #0
   3292e:	b530      	push	{r4, r5, lr}
   32930:	4605      	mov	r5, r0
   32932:	460c      	mov	r4, r1
   32934:	b085      	sub	sp, #20
   32936:	4608      	mov	r0, r1
   32938:	e9cd 3300 	strd	r3, r3, [sp]
   3293c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   32940:	f00a fe78 	bl	3d634 <spaces_remove>
   32944:	4b08      	ldr	r3, [pc, #32]	; (32968 <pdn_state_get_parser+0x3c>)
   32946:	4a09      	ldr	r2, [pc, #36]	; (3296c <pdn_state_get_parser+0x40>)
   32948:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   3294c:	2110      	movs	r1, #16
   3294e:	681b      	ldr	r3, [r3, #0]
   32950:	4668      	mov	r0, sp
   32952:	f005 f883 	bl	37a5c <sniprintf>
   32956:	4669      	mov	r1, sp
   32958:	4620      	mov	r0, r4
   3295a:	f00b fcf3 	bl	3e344 <strstr>
   3295e:	3800      	subs	r0, #0
   32960:	bf18      	it	ne
   32962:	2001      	movne	r0, #1
   32964:	b005      	add	sp, #20
   32966:	bd30      	pop	{r4, r5, pc}
   32968:	200189a8 	.word	0x200189a8
   3296c:	0004587f 	.word	0x0004587f

00032970 <pdn_id_get_parser>:
   32970:	b510      	push	{r4, lr}
   32972:	4604      	mov	r4, r0
   32974:	4608      	mov	r0, r1
   32976:	f00a fe5d 	bl	3d634 <spaces_remove>
   3297a:	213a      	movs	r1, #58	; 0x3a
   3297c:	f00b fc9b 	bl	3e2b6 <strchr>
   32980:	b130      	cbz	r0, 32990 <pdn_id_get_parser+0x20>
   32982:	3001      	adds	r0, #1
   32984:	f00b fad1 	bl	3df2a <atoi>
   32988:	4b02      	ldr	r3, [pc, #8]	; (32994 <pdn_id_get_parser+0x24>)
   3298a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   3298e:	6058      	str	r0, [r3, #4]
   32990:	2000      	movs	r0, #0
   32992:	bd10      	pop	{r4, pc}
   32994:	200189a8 	.word	0x200189a8

00032998 <context_create_parser>:
   32998:	b510      	push	{r4, lr}
   3299a:	4604      	mov	r4, r0
   3299c:	4608      	mov	r0, r1
   3299e:	f00a fe49 	bl	3d634 <spaces_remove>
   329a2:	213a      	movs	r1, #58	; 0x3a
   329a4:	f00b fc87 	bl	3e2b6 <strchr>
   329a8:	b130      	cbz	r0, 329b8 <context_create_parser+0x20>
   329aa:	4b04      	ldr	r3, [pc, #16]	; (329bc <context_create_parser+0x24>)
   329ac:	3001      	adds	r0, #1
   329ae:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   329b2:	f00b faba 	bl	3df2a <atoi>
   329b6:	6020      	str	r0, [r4, #0]
   329b8:	2000      	movs	r0, #0
   329ba:	bd10      	pop	{r4, pc}
   329bc:	200189a8 	.word	0x200189a8

000329c0 <connection_free>:
   329c0:	b538      	push	{r3, r4, r5, lr}
   329c2:	4d05      	ldr	r5, [pc, #20]	; (329d8 <connection_free+0x18>)
   329c4:	4604      	mov	r4, r0
   329c6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   329ca:	f7f4 fc13 	bl	271f4 <nrf_modem_os_free>
   329ce:	2300      	movs	r3, #0
   329d0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   329d4:	bd38      	pop	{r3, r4, r5, pc}
   329d6:	bf00      	nop
   329d8:	200189a8 	.word	0x200189a8

000329dc <pdn_id_get>:
   329dc:	b538      	push	{r3, r4, r5, lr}
   329de:	4d0e      	ldr	r5, [pc, #56]	; (32a18 <pdn_id_get+0x3c>)
   329e0:	4604      	mov	r4, r0
   329e2:	f44f 7180 	mov.w	r1, #256	; 0x100
   329e6:	4b0d      	ldr	r3, [pc, #52]	; (32a1c <pdn_id_get+0x40>)
   329e8:	4a0d      	ldr	r2, [pc, #52]	; (32a20 <pdn_id_get+0x44>)
   329ea:	4628      	mov	r0, r5
   329ec:	f005 f836 	bl	37a5c <sniprintf>
   329f0:	4b0c      	ldr	r3, [pc, #48]	; (32a24 <pdn_id_get+0x48>)
   329f2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   329f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   329fa:	4a0b      	ldr	r2, [pc, #44]	; (32a28 <pdn_id_get+0x4c>)
   329fc:	681b      	ldr	r3, [r3, #0]
   329fe:	4428      	add	r0, r5
   32a00:	f005 f82c 	bl	37a5c <sniprintf>
   32a04:	f7ff ff34 	bl	32870 <command_write>
   32a08:	b928      	cbnz	r0, 32a16 <pdn_id_get+0x3a>
   32a0a:	4620      	mov	r0, r4
   32a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   32a10:	2102      	movs	r1, #2
   32a12:	f7ff bf4b 	b.w	328ac <event_wait>
   32a16:	bd38      	pop	{r3, r4, r5, pc}
   32a18:	2001d7e4 	.word	0x2001d7e4
   32a1c:	0004588b 	.word	0x0004588b
   32a20:	00043968 	.word	0x00043968
   32a24:	200189a8 	.word	0x200189a8
   32a28:	00043263 	.word	0x00043263

00032a2c <pdn_interface_init>:
   32a2c:	b538      	push	{r3, r4, r5, lr}
   32a2e:	f04f 34ff 	mov.w	r4, #4294967295
   32a32:	4d0b      	ldr	r5, [pc, #44]	; (32a60 <pdn_interface_init+0x34>)
   32a34:	2228      	movs	r2, #40	; 0x28
   32a36:	2100      	movs	r1, #0
   32a38:	480a      	ldr	r0, [pc, #40]	; (32a64 <pdn_interface_init+0x38>)
   32a3a:	602c      	str	r4, [r5, #0]
   32a3c:	f00b fab5 	bl	3dfaa <memset>
   32a40:	f240 2201 	movw	r2, #513	; 0x201
   32a44:	2102      	movs	r1, #2
   32a46:	2066      	movs	r0, #102	; 0x66
   32a48:	f7ff f854 	bl	31af4 <at_interface_open>
   32a4c:	2800      	cmp	r0, #0
   32a4e:	bfa4      	itt	ge
   32a50:	2201      	movge	r2, #1
   32a52:	4b05      	ldrge	r3, [pc, #20]	; (32a68 <pdn_interface_init+0x3c>)
   32a54:	6028      	str	r0, [r5, #0]
   32a56:	bfa6      	itte	ge
   32a58:	701a      	strbge	r2, [r3, #0]
   32a5a:	2000      	movge	r0, #0
   32a5c:	4620      	movlt	r0, r4
   32a5e:	bd38      	pop	{r3, r4, r5, pc}
   32a60:	200189a4 	.word	0x200189a4
   32a64:	200189a8 	.word	0x200189a8
   32a68:	2001d7e3 	.word	0x2001d7e3

00032a6c <pdn_interface_open>:
   32a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32a6e:	4b28      	ldr	r3, [pc, #160]	; (32b10 <pdn_interface_open+0xa4>)
   32a70:	781b      	ldrb	r3, [r3, #0]
   32a72:	b92b      	cbnz	r3, 32a80 <pdn_interface_open+0x14>
   32a74:	2070      	movs	r0, #112	; 0x70
   32a76:	f7f4 fa03 	bl	26e80 <nrf_modem_os_errno_set>
   32a7a:	f04f 30ff 	mov.w	r0, #4294967295
   32a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32a80:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   32a84:	d141      	bne.n	32b0a <pdn_interface_open+0x9e>
   32a86:	4b23      	ldr	r3, [pc, #140]	; (32b14 <pdn_interface_open+0xa8>)
   32a88:	2500      	movs	r5, #0
   32a8a:	461e      	mov	r6, r3
   32a8c:	f853 4b04 	ldr.w	r4, [r3], #4
   32a90:	bb24      	cbnz	r4, 32adc <pdn_interface_open+0x70>
   32a92:	2020      	movs	r0, #32
   32a94:	f7f4 fba6 	bl	271e4 <nrf_modem_os_alloc>
   32a98:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
   32a9c:	b308      	cbz	r0, 32ae2 <pdn_interface_open+0x76>
   32a9e:	4621      	mov	r1, r4
   32aa0:	2220      	movs	r2, #32
   32aa2:	f00b fa82 	bl	3dfaa <memset>
   32aa6:	2203      	movs	r2, #3
   32aa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   32aac:	2701      	movs	r7, #1
   32aae:	60da      	str	r2, [r3, #12]
   32ab0:	f04f 32ff 	mov.w	r2, #4294967295
   32ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
   32ab8:	605a      	str	r2, [r3, #4]
   32aba:	609f      	str	r7, [r3, #8]
   32abc:	4a16      	ldr	r2, [pc, #88]	; (32b18 <pdn_interface_open+0xac>)
   32abe:	4b17      	ldr	r3, [pc, #92]	; (32b1c <pdn_interface_open+0xb0>)
   32ac0:	4817      	ldr	r0, [pc, #92]	; (32b20 <pdn_interface_open+0xb4>)
   32ac2:	f004 ffcb 	bl	37a5c <sniprintf>
   32ac6:	f7ff fed3 	bl	32870 <command_write>
   32aca:	4604      	mov	r4, r0
   32acc:	b160      	cbz	r0, 32ae8 <pdn_interface_open+0x7c>
   32ace:	4628      	mov	r0, r5
   32ad0:	f7ff ff76 	bl	329c0 <connection_free>
   32ad4:	2c00      	cmp	r4, #0
   32ad6:	da13      	bge.n	32b00 <pdn_interface_open+0x94>
   32ad8:	4260      	negs	r0, r4
   32ada:	e7cc      	b.n	32a76 <pdn_interface_open+0xa>
   32adc:	3501      	adds	r5, #1
   32ade:	2d0a      	cmp	r5, #10
   32ae0:	d1d4      	bne.n	32a8c <pdn_interface_open+0x20>
   32ae2:	f06f 040b 	mvn.w	r4, #11
   32ae6:	e7f7      	b.n	32ad8 <pdn_interface_open+0x6c>
   32ae8:	4639      	mov	r1, r7
   32aea:	4628      	mov	r0, r5
   32aec:	f7ff fede 	bl	328ac <event_wait>
   32af0:	4604      	mov	r4, r0
   32af2:	2800      	cmp	r0, #0
   32af4:	d1eb      	bne.n	32ace <pdn_interface_open+0x62>
   32af6:	2202      	movs	r2, #2
   32af8:	462c      	mov	r4, r5
   32afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   32afe:	609a      	str	r2, [r3, #8]
   32b00:	f044 40f1 	orr.w	r0, r4, #2021654528	; 0x78800000
   32b04:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   32b08:	e7b9      	b.n	32a7e <pdn_interface_open+0x12>
   32b0a:	2029      	movs	r0, #41	; 0x29
   32b0c:	e7b3      	b.n	32a76 <pdn_interface_open+0xa>
   32b0e:	bf00      	nop
   32b10:	2001d7e3 	.word	0x2001d7e3
   32b14:	200189a8 	.word	0x200189a8
   32b18:	00043968 	.word	0x00043968
   32b1c:	00045899 	.word	0x00045899
   32b20:	2001d7e4 	.word	0x2001d7e4

00032b24 <pdn_interface_connect>:
   32b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32b28:	4690      	mov	r8, r2
   32b2a:	4689      	mov	r9, r1
   32b2c:	b109      	cbz	r1, 32b32 <pdn_interface_connect+0xe>
   32b2e:	2a64      	cmp	r2, #100	; 0x64
   32b30:	d905      	bls.n	32b3e <pdn_interface_connect+0x1a>
   32b32:	2016      	movs	r0, #22
   32b34:	f7f4 f9a4 	bl	26e80 <nrf_modem_os_errno_set>
   32b38:	f04f 30ff 	mov.w	r0, #4294967295
   32b3c:	e0f1      	b.n	32d22 <pdn_interface_connect+0x1fe>
   32b3e:	f7ff fe7b 	bl	32838 <handle_verify_and_covert>
   32b42:	1e04      	subs	r4, r0, #0
   32b44:	da01      	bge.n	32b4a <pdn_interface_connect+0x26>
   32b46:	4260      	negs	r0, r4
   32b48:	e7f4      	b.n	32b34 <pdn_interface_connect+0x10>
   32b4a:	4e78      	ldr	r6, [pc, #480]	; (32d2c <pdn_interface_connect+0x208>)
   32b4c:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32b50:	689b      	ldr	r3, [r3, #8]
   32b52:	2b02      	cmp	r3, #2
   32b54:	d001      	beq.n	32b5a <pdn_interface_connect+0x36>
   32b56:	2009      	movs	r0, #9
   32b58:	e7ec      	b.n	32b34 <pdn_interface_connect+0x10>
   32b5a:	4f75      	ldr	r7, [pc, #468]	; (32d30 <pdn_interface_connect+0x20c>)
   32b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
   32b60:	4b74      	ldr	r3, [pc, #464]	; (32d34 <pdn_interface_connect+0x210>)
   32b62:	4a75      	ldr	r2, [pc, #468]	; (32d38 <pdn_interface_connect+0x214>)
   32b64:	4638      	mov	r0, r7
   32b66:	f004 ff79 	bl	37a5c <sniprintf>
   32b6a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32b6e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   32b72:	4605      	mov	r5, r0
   32b74:	681b      	ldr	r3, [r3, #0]
   32b76:	4a71      	ldr	r2, [pc, #452]	; (32d3c <pdn_interface_connect+0x218>)
   32b78:	1838      	adds	r0, r7, r0
   32b7a:	f004 ff6f 	bl	37a5c <sniprintf>
   32b7e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32b82:	4405      	add	r5, r0
   32b84:	68db      	ldr	r3, [r3, #12]
   32b86:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   32b8a:	f003 0203 	and.w	r2, r3, #3
   32b8e:	2a03      	cmp	r2, #3
   32b90:	eb07 0005 	add.w	r0, r7, r5
   32b94:	d159      	bne.n	32c4a <pdn_interface_connect+0x126>
   32b96:	4b6a      	ldr	r3, [pc, #424]	; (32d40 <pdn_interface_connect+0x21c>)
   32b98:	4a6a      	ldr	r2, [pc, #424]	; (32d44 <pdn_interface_connect+0x220>)
   32b9a:	f004 ff5f 	bl	37a5c <sniprintf>
   32b9e:	f108 0303 	add.w	r3, r8, #3
   32ba2:	4428      	add	r0, r5
   32ba4:	4403      	add	r3, r0
   32ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   32baa:	f300 80bc 	bgt.w	32d26 <pdn_interface_connect+0x202>
   32bae:	f04f 0a22 	mov.w	sl, #34	; 0x22
   32bb2:	1c45      	adds	r5, r0, #1
   32bb4:	4642      	mov	r2, r8
   32bb6:	f807 a000 	strb.w	sl, [r7, r0]
   32bba:	4649      	mov	r1, r9
   32bbc:	1978      	adds	r0, r7, r5
   32bbe:	f00b fba1 	bl	3e304 <strncpy>
   32bc2:	eb08 0305 	add.w	r3, r8, r5
   32bc6:	18fa      	adds	r2, r7, r3
   32bc8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   32bcc:	b902      	cbnz	r2, 32bd0 <pdn_interface_connect+0xac>
   32bce:	3b01      	subs	r3, #1
   32bd0:	2200      	movs	r2, #0
   32bd2:	f807 a003 	strb.w	sl, [r7, r3]
   32bd6:	443b      	add	r3, r7
   32bd8:	705a      	strb	r2, [r3, #1]
   32bda:	f7ff fe49 	bl	32870 <command_write>
   32bde:	2800      	cmp	r0, #0
   32be0:	d17d      	bne.n	32cde <pdn_interface_connect+0x1ba>
   32be2:	4601      	mov	r1, r0
   32be4:	4620      	mov	r0, r4
   32be6:	f7ff fe61 	bl	328ac <event_wait>
   32bea:	2800      	cmp	r0, #0
   32bec:	d177      	bne.n	32cde <pdn_interface_connect+0x1ba>
   32bee:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32bf2:	7c1b      	ldrb	r3, [r3, #16]
   32bf4:	2b00      	cmp	r3, #0
   32bf6:	d133      	bne.n	32c60 <pdn_interface_connect+0x13c>
   32bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
   32bfc:	4b52      	ldr	r3, [pc, #328]	; (32d48 <pdn_interface_connect+0x224>)
   32bfe:	4a4e      	ldr	r2, [pc, #312]	; (32d38 <pdn_interface_connect+0x214>)
   32c00:	484b      	ldr	r0, [pc, #300]	; (32d30 <pdn_interface_connect+0x20c>)
   32c02:	f004 ff2b 	bl	37a5c <sniprintf>
   32c06:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32c0a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   32c0e:	681b      	ldr	r3, [r3, #0]
   32c10:	4a4e      	ldr	r2, [pc, #312]	; (32d4c <pdn_interface_connect+0x228>)
   32c12:	4438      	add	r0, r7
   32c14:	f004 ff22 	bl	37a5c <sniprintf>
   32c18:	f7ff fe2a 	bl	32870 <command_write>
   32c1c:	2800      	cmp	r0, #0
   32c1e:	d15e      	bne.n	32cde <pdn_interface_connect+0x1ba>
   32c20:	4601      	mov	r1, r0
   32c22:	4620      	mov	r0, r4
   32c24:	f7ff fe42 	bl	328ac <event_wait>
   32c28:	2800      	cmp	r0, #0
   32c2a:	d158      	bne.n	32cde <pdn_interface_connect+0x1ba>
   32c2c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   32c30:	f108 0320 	add.w	r3, r8, #32
   32c34:	6950      	ldr	r0, [r2, #20]
   32c36:	4403      	add	r3, r0
   32c38:	6990      	ldr	r0, [r2, #24]
   32c3a:	4418      	add	r0, r3
   32c3c:	f7f4 fad2 	bl	271e4 <nrf_modem_os_alloc>
   32c40:	4605      	mov	r5, r0
   32c42:	2800      	cmp	r0, #0
   32c44:	d14d      	bne.n	32ce2 <pdn_interface_connect+0x1be>
   32c46:	200c      	movs	r0, #12
   32c48:	e774      	b.n	32b34 <pdn_interface_connect+0x10>
   32c4a:	f003 0205 	and.w	r2, r3, #5
   32c4e:	2a05      	cmp	r2, #5
   32c50:	d101      	bne.n	32c56 <pdn_interface_connect+0x132>
   32c52:	4b3f      	ldr	r3, [pc, #252]	; (32d50 <pdn_interface_connect+0x22c>)
   32c54:	e7a0      	b.n	32b98 <pdn_interface_connect+0x74>
   32c56:	079b      	lsls	r3, r3, #30
   32c58:	bf4c      	ite	mi
   32c5a:	4b3e      	ldrmi	r3, [pc, #248]	; (32d54 <pdn_interface_connect+0x230>)
   32c5c:	4b3e      	ldrpl	r3, [pc, #248]	; (32d58 <pdn_interface_connect+0x234>)
   32c5e:	e79b      	b.n	32b98 <pdn_interface_connect+0x74>
   32c60:	f44f 7180 	mov.w	r1, #256	; 0x100
   32c64:	4b3d      	ldr	r3, [pc, #244]	; (32d5c <pdn_interface_connect+0x238>)
   32c66:	4a34      	ldr	r2, [pc, #208]	; (32d38 <pdn_interface_connect+0x214>)
   32c68:	4831      	ldr	r0, [pc, #196]	; (32d30 <pdn_interface_connect+0x20c>)
   32c6a:	f004 fef7 	bl	37a5c <sniprintf>
   32c6e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32c72:	4a32      	ldr	r2, [pc, #200]	; (32d3c <pdn_interface_connect+0x218>)
   32c74:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   32c78:	4682      	mov	sl, r0
   32c7a:	681b      	ldr	r3, [r3, #0]
   32c7c:	1838      	adds	r0, r7, r0
   32c7e:	f004 feed 	bl	37a5c <sniprintf>
   32c82:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32c86:	4482      	add	sl, r0
   32c88:	7c1b      	ldrb	r3, [r3, #16]
   32c8a:	f5ca 7180 	rsb	r1, sl, #256	; 0x100
   32c8e:	2b01      	cmp	r3, #1
   32c90:	bf0c      	ite	eq
   32c92:	4a33      	ldreq	r2, [pc, #204]	; (32d60 <pdn_interface_connect+0x23c>)
   32c94:	4a33      	ldrne	r2, [pc, #204]	; (32d64 <pdn_interface_connect+0x240>)
   32c96:	eb07 000a 	add.w	r0, r7, sl
   32c9a:	f004 fedf 	bl	37a5c <sniprintf>
   32c9e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32ca2:	4482      	add	sl, r0
   32ca4:	4a27      	ldr	r2, [pc, #156]	; (32d44 <pdn_interface_connect+0x220>)
   32ca6:	3320      	adds	r3, #32
   32ca8:	f5ca 7180 	rsb	r1, sl, #256	; 0x100
   32cac:	eb07 000a 	add.w	r0, r7, sl
   32cb0:	f004 fed4 	bl	37a5c <sniprintf>
   32cb4:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   32cb8:	4450      	add	r0, sl
   32cba:	695a      	ldr	r2, [r3, #20]
   32cbc:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   32cc0:	3220      	adds	r2, #32
   32cc2:	4413      	add	r3, r2
   32cc4:	4438      	add	r0, r7
   32cc6:	4a28      	ldr	r2, [pc, #160]	; (32d68 <pdn_interface_connect+0x244>)
   32cc8:	f004 fec8 	bl	37a5c <sniprintf>
   32ccc:	f7ff fdd0 	bl	32870 <command_write>
   32cd0:	b928      	cbnz	r0, 32cde <pdn_interface_connect+0x1ba>
   32cd2:	4601      	mov	r1, r0
   32cd4:	4620      	mov	r0, r4
   32cd6:	f7ff fde9 	bl	328ac <event_wait>
   32cda:	2800      	cmp	r0, #0
   32cdc:	d08c      	beq.n	32bf8 <pdn_interface_connect+0xd4>
   32cde:	4240      	negs	r0, r0
   32ce0:	e728      	b.n	32b34 <pdn_interface_connect+0x10>
   32ce2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   32ce6:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   32cea:	441a      	add	r2, r3
   32cec:	3220      	adds	r2, #32
   32cee:	f00b f93c 	bl	3df6a <memcpy>
   32cf2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   32cf6:	f7f4 fa7d 	bl	271f4 <nrf_modem_os_free>
   32cfa:	2303      	movs	r3, #3
   32cfc:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
   32d00:	60ab      	str	r3, [r5, #8]
   32d02:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   32d06:	4403      	add	r3, r0
   32d08:	3320      	adds	r3, #32
   32d0a:	4642      	mov	r2, r8
   32d0c:	4649      	mov	r1, r9
   32d0e:	f8c5 801c 	str.w	r8, [r5, #28]
   32d12:	18e8      	adds	r0, r5, r3
   32d14:	f00b f929 	bl	3df6a <memcpy>
   32d18:	4620      	mov	r0, r4
   32d1a:	f7ff fe5f 	bl	329dc <pdn_id_get>
   32d1e:	2800      	cmp	r0, #0
   32d20:	d1dd      	bne.n	32cde <pdn_interface_connect+0x1ba>
   32d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32d26:	f04f 30ff 	mov.w	r0, #4294967295
   32d2a:	e7d8      	b.n	32cde <pdn_interface_connect+0x1ba>
   32d2c:	200189a8 	.word	0x200189a8
   32d30:	2001d7e4 	.word	0x2001d7e4
   32d34:	000458a5 	.word	0x000458a5
   32d38:	00043968 	.word	0x00043968
   32d3c:	000458b1 	.word	0x000458b1
   32d40:	000458b5 	.word	0x000458b5
   32d44:	000458bc 	.word	0x000458bc
   32d48:	000458ce 	.word	0x000458ce
   32d4c:	00043263 	.word	0x00043263
   32d50:	000458c2 	.word	0x000458c2
   32d54:	000458c9 	.word	0x000458c9
   32d58:	000458c6 	.word	0x000458c6
   32d5c:	000458da 	.word	0x000458da
   32d60:	000458d7 	.word	0x000458d7
   32d64:	000458e5 	.word	0x000458e5
   32d68:	000458e8 	.word	0x000458e8

00032d6c <pdn_interface_close>:
   32d6c:	b570      	push	{r4, r5, r6, lr}
   32d6e:	f7ff fd63 	bl	32838 <handle_verify_and_covert>
   32d72:	1e04      	subs	r4, r0, #0
   32d74:	da05      	bge.n	32d82 <pdn_interface_close+0x16>
   32d76:	4260      	negs	r0, r4
   32d78:	f7f4 f882 	bl	26e80 <nrf_modem_os_errno_set>
   32d7c:	f04f 30ff 	mov.w	r0, #4294967295
   32d80:	bd70      	pop	{r4, r5, r6, pc}
   32d82:	4d22      	ldr	r5, [pc, #136]	; (32e0c <pdn_interface_close+0xa0>)
   32d84:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   32d88:	689b      	ldr	r3, [r3, #8]
   32d8a:	2b03      	cmp	r3, #3
   32d8c:	d11b      	bne.n	32dc6 <pdn_interface_close+0x5a>
   32d8e:	4e20      	ldr	r6, [pc, #128]	; (32e10 <pdn_interface_close+0xa4>)
   32d90:	f44f 7180 	mov.w	r1, #256	; 0x100
   32d94:	4b1f      	ldr	r3, [pc, #124]	; (32e14 <pdn_interface_close+0xa8>)
   32d96:	4a20      	ldr	r2, [pc, #128]	; (32e18 <pdn_interface_close+0xac>)
   32d98:	4630      	mov	r0, r6
   32d9a:	f004 fe5f 	bl	37a5c <sniprintf>
   32d9e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   32da2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   32da6:	681b      	ldr	r3, [r3, #0]
   32da8:	4a1c      	ldr	r2, [pc, #112]	; (32e1c <pdn_interface_close+0xb0>)
   32daa:	4430      	add	r0, r6
   32dac:	f004 fe56 	bl	37a5c <sniprintf>
   32db0:	f7ff fd5e 	bl	32870 <command_write>
   32db4:	4601      	mov	r1, r0
   32db6:	b910      	cbnz	r0, 32dbe <pdn_interface_close+0x52>
   32db8:	4620      	mov	r0, r4
   32dba:	f7ff fd77 	bl	328ac <event_wait>
   32dbe:	2202      	movs	r2, #2
   32dc0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   32dc4:	609a      	str	r2, [r3, #8]
   32dc6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   32dca:	689b      	ldr	r3, [r3, #8]
   32dcc:	2b02      	cmp	r3, #2
   32dce:	d117      	bne.n	32e00 <pdn_interface_close+0x94>
   32dd0:	4e0f      	ldr	r6, [pc, #60]	; (32e10 <pdn_interface_close+0xa4>)
   32dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
   32dd6:	4b12      	ldr	r3, [pc, #72]	; (32e20 <pdn_interface_close+0xb4>)
   32dd8:	4a0f      	ldr	r2, [pc, #60]	; (32e18 <pdn_interface_close+0xac>)
   32dda:	4630      	mov	r0, r6
   32ddc:	f004 fe3e 	bl	37a5c <sniprintf>
   32de0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   32de4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   32de8:	681b      	ldr	r3, [r3, #0]
   32dea:	4a0c      	ldr	r2, [pc, #48]	; (32e1c <pdn_interface_close+0xb0>)
   32dec:	4430      	add	r0, r6
   32dee:	f004 fe35 	bl	37a5c <sniprintf>
   32df2:	f7ff fd3d 	bl	32870 <command_write>
   32df6:	4601      	mov	r1, r0
   32df8:	b910      	cbnz	r0, 32e00 <pdn_interface_close+0x94>
   32dfa:	4620      	mov	r0, r4
   32dfc:	f7ff fd56 	bl	328ac <event_wait>
   32e00:	4620      	mov	r0, r4
   32e02:	f7ff fddd 	bl	329c0 <connection_free>
   32e06:	2000      	movs	r0, #0
   32e08:	e7ba      	b.n	32d80 <pdn_interface_close+0x14>
   32e0a:	bf00      	nop
   32e0c:	200189a8 	.word	0x200189a8
   32e10:	2001d7e4 	.word	0x2001d7e4
   32e14:	000458ed 	.word	0x000458ed
   32e18:	00043968 	.word	0x00043968
   32e1c:	00043263 	.word	0x00043263
   32e20:	000458a5 	.word	0x000458a5

00032e24 <pdn_interface_setopt>:
   32e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32e28:	461c      	mov	r4, r3
   32e2a:	f240 2302 	movw	r3, #514	; 0x202
   32e2e:	4299      	cmp	r1, r3
   32e30:	4617      	mov	r7, r2
   32e32:	9d08      	ldr	r5, [sp, #32]
   32e34:	d101      	bne.n	32e3a <pdn_interface_setopt+0x16>
   32e36:	b104      	cbz	r4, 32e3a <pdn_interface_setopt+0x16>
   32e38:	b92d      	cbnz	r5, 32e46 <pdn_interface_setopt+0x22>
   32e3a:	2016      	movs	r0, #22
   32e3c:	f7f4 f820 	bl	26e80 <nrf_modem_os_errno_set>
   32e40:	f04f 30ff 	mov.w	r0, #4294967295
   32e44:	e02a      	b.n	32e9c <pdn_interface_setopt+0x78>
   32e46:	f7ff fcf7 	bl	32838 <handle_verify_and_covert>
   32e4a:	1e06      	subs	r6, r0, #0
   32e4c:	da01      	bge.n	32e52 <pdn_interface_setopt+0x2e>
   32e4e:	4270      	negs	r0, r6
   32e50:	e7f4      	b.n	32e3c <pdn_interface_setopt+0x18>
   32e52:	2f01      	cmp	r7, #1
   32e54:	d005      	beq.n	32e62 <pdn_interface_setopt+0x3e>
   32e56:	2f04      	cmp	r7, #4
   32e58:	d033      	beq.n	32ec2 <pdn_interface_setopt+0x9e>
   32e5a:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   32e5e:	4240      	negs	r0, r0
   32e60:	e7ec      	b.n	32e3c <pdn_interface_setopt+0x18>
   32e62:	4b3f      	ldr	r3, [pc, #252]	; (32f60 <pdn_interface_setopt+0x13c>)
   32e64:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   32e68:	688b      	ldr	r3, [r1, #8]
   32e6a:	2b00      	cmp	r3, #0
   32e6c:	d071      	beq.n	32f52 <pdn_interface_setopt+0x12e>
   32e6e:	688b      	ldr	r3, [r1, #8]
   32e70:	2b03      	cmp	r3, #3
   32e72:	d06e      	beq.n	32f52 <pdn_interface_setopt+0x12e>
   32e74:	688b      	ldr	r3, [r1, #8]
   32e76:	2b04      	cmp	r3, #4
   32e78:	d06b      	beq.n	32f52 <pdn_interface_setopt+0x12e>
   32e7a:	08a8      	lsrs	r0, r5, #2
   32e7c:	1e43      	subs	r3, r0, #1
   32e7e:	2b01      	cmp	r3, #1
   32e80:	f005 0503 	and.w	r5, r5, #3
   32e84:	d902      	bls.n	32e8c <pdn_interface_setopt+0x68>
   32e86:	f06f 0015 	mvn.w	r0, #21
   32e8a:	e7e8      	b.n	32e5e <pdn_interface_setopt+0x3a>
   32e8c:	2d00      	cmp	r5, #0
   32e8e:	d1fa      	bne.n	32e86 <pdn_interface_setopt+0x62>
   32e90:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   32e94:	4284      	cmp	r4, r0
   32e96:	d103      	bne.n	32ea0 <pdn_interface_setopt+0x7c>
   32e98:	60cd      	str	r5, [r1, #12]
   32e9a:	2000      	movs	r0, #0
   32e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32ea0:	f854 3b04 	ldr.w	r3, [r4], #4
   32ea4:	2b02      	cmp	r3, #2
   32ea6:	d102      	bne.n	32eae <pdn_interface_setopt+0x8a>
   32ea8:	f045 0501 	orr.w	r5, r5, #1
   32eac:	e7f2      	b.n	32e94 <pdn_interface_setopt+0x70>
   32eae:	2b0a      	cmp	r3, #10
   32eb0:	d102      	bne.n	32eb8 <pdn_interface_setopt+0x94>
   32eb2:	f045 0502 	orr.w	r5, r5, #2
   32eb6:	e7ed      	b.n	32e94 <pdn_interface_setopt+0x70>
   32eb8:	2b05      	cmp	r3, #5
   32eba:	d1e4      	bne.n	32e86 <pdn_interface_setopt+0x62>
   32ebc:	f045 0505 	orr.w	r5, r5, #5
   32ec0:	e7e8      	b.n	32e94 <pdn_interface_setopt+0x70>
   32ec2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 32f60 <pdn_interface_setopt+0x13c>
   32ec6:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
   32eca:	689a      	ldr	r2, [r3, #8]
   32ecc:	2a00      	cmp	r2, #0
   32ece:	d040      	beq.n	32f52 <pdn_interface_setopt+0x12e>
   32ed0:	689a      	ldr	r2, [r3, #8]
   32ed2:	2a03      	cmp	r2, #3
   32ed4:	d03d      	beq.n	32f52 <pdn_interface_setopt+0x12e>
   32ed6:	689b      	ldr	r3, [r3, #8]
   32ed8:	2b04      	cmp	r3, #4
   32eda:	d03a      	beq.n	32f52 <pdn_interface_setopt+0x12e>
   32edc:	4620      	mov	r0, r4
   32ede:	f7ea f9bd 	bl	1d25c <strlen>
   32ee2:	f104 0a64 	add.w	sl, r4, #100	; 0x64
   32ee6:	1c47      	adds	r7, r0, #1
   32ee8:	4650      	mov	r0, sl
   32eea:	f7ea f9b7 	bl	1d25c <strlen>
   32eee:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   32ef2:	f100 0801 	add.w	r8, r0, #1
   32ef6:	3b01      	subs	r3, #1
   32ef8:	2b01      	cmp	r3, #1
   32efa:	d8c4      	bhi.n	32e86 <pdn_interface_setopt+0x62>
   32efc:	2f63      	cmp	r7, #99	; 0x63
   32efe:	d8c2      	bhi.n	32e86 <pdn_interface_setopt+0x62>
   32f00:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   32f04:	d8bf      	bhi.n	32e86 <pdn_interface_setopt+0x62>
   32f06:	eb07 0008 	add.w	r0, r7, r8
   32f0a:	3020      	adds	r0, #32
   32f0c:	f7f4 f96a 	bl	271e4 <nrf_modem_os_alloc>
   32f10:	4605      	mov	r5, r0
   32f12:	b308      	cbz	r0, 32f58 <pdn_interface_setopt+0x134>
   32f14:	2220      	movs	r2, #32
   32f16:	f859 1026 	ldr.w	r1, [r9, r6, lsl #2]
   32f1a:	f00b f826 	bl	3df6a <memcpy>
   32f1e:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   32f22:	f7f4 f967 	bl	271f4 <nrf_modem_os_free>
   32f26:	e9c5 7805 	strd	r7, r8, [r5, #20]
   32f2a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   32f2e:	4639      	mov	r1, r7
   32f30:	4a0c      	ldr	r2, [pc, #48]	; (32f64 <pdn_interface_setopt+0x140>)
   32f32:	742b      	strb	r3, [r5, #16]
   32f34:	f105 0020 	add.w	r0, r5, #32
   32f38:	4623      	mov	r3, r4
   32f3a:	f004 fd8f 	bl	37a5c <sniprintf>
   32f3e:	3021      	adds	r0, #33	; 0x21
   32f40:	4653      	mov	r3, sl
   32f42:	4a08      	ldr	r2, [pc, #32]	; (32f64 <pdn_interface_setopt+0x140>)
   32f44:	69a9      	ldr	r1, [r5, #24]
   32f46:	4428      	add	r0, r5
   32f48:	f004 fd88 	bl	37a5c <sniprintf>
   32f4c:	f849 5026 	str.w	r5, [r9, r6, lsl #2]
   32f50:	e7a3      	b.n	32e9a <pdn_interface_setopt+0x76>
   32f52:	f06f 000d 	mvn.w	r0, #13
   32f56:	e782      	b.n	32e5e <pdn_interface_setopt+0x3a>
   32f58:	f06f 000b 	mvn.w	r0, #11
   32f5c:	e77f      	b.n	32e5e <pdn_interface_setopt+0x3a>
   32f5e:	bf00      	nop
   32f60:	200189a8 	.word	0x200189a8
   32f64:	00043968 	.word	0x00043968

00032f68 <pdn_interface_getopt>:
   32f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32f6c:	461d      	mov	r5, r3
   32f6e:	f240 2302 	movw	r3, #514	; 0x202
   32f72:	4299      	cmp	r1, r3
   32f74:	4690      	mov	r8, r2
   32f76:	9e06      	ldr	r6, [sp, #24]
   32f78:	d101      	bne.n	32f7e <pdn_interface_getopt+0x16>
   32f7a:	b105      	cbz	r5, 32f7e <pdn_interface_getopt+0x16>
   32f7c:	b92e      	cbnz	r6, 32f8a <pdn_interface_getopt+0x22>
   32f7e:	2016      	movs	r0, #22
   32f80:	f7f3 ff7e 	bl	26e80 <nrf_modem_os_errno_set>
   32f84:	f04f 34ff 	mov.w	r4, #4294967295
   32f88:	e034      	b.n	32ff4 <pdn_interface_getopt+0x8c>
   32f8a:	f7ff fc55 	bl	32838 <handle_verify_and_covert>
   32f8e:	1e07      	subs	r7, r0, #0
   32f90:	da01      	bge.n	32f96 <pdn_interface_getopt+0x2e>
   32f92:	4278      	negs	r0, r7
   32f94:	e7f4      	b.n	32f80 <pdn_interface_getopt+0x18>
   32f96:	f1b8 0f02 	cmp.w	r8, #2
   32f9a:	d02e      	beq.n	32ffa <pdn_interface_getopt+0x92>
   32f9c:	f1b8 0f03 	cmp.w	r8, #3
   32fa0:	d035      	beq.n	3300e <pdn_interface_getopt+0xa6>
   32fa2:	f1b8 0f01 	cmp.w	r8, #1
   32fa6:	d149      	bne.n	3303c <pdn_interface_getopt+0xd4>
   32fa8:	4b2b      	ldr	r3, [pc, #172]	; (33058 <pdn_interface_getopt+0xf0>)
   32faa:	6831      	ldr	r1, [r6, #0]
   32fac:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   32fb0:	689a      	ldr	r2, [r3, #8]
   32fb2:	2a00      	cmp	r2, #0
   32fb4:	d046      	beq.n	33044 <pdn_interface_getopt+0xdc>
   32fb6:	689a      	ldr	r2, [r3, #8]
   32fb8:	2a04      	cmp	r2, #4
   32fba:	d043      	beq.n	33044 <pdn_interface_getopt+0xdc>
   32fbc:	2907      	cmp	r1, #7
   32fbe:	f001 0203 	and.w	r2, r1, #3
   32fc2:	d942      	bls.n	3304a <pdn_interface_getopt+0xe2>
   32fc4:	2a00      	cmp	r2, #0
   32fc6:	d140      	bne.n	3304a <pdn_interface_getopt+0xe2>
   32fc8:	68db      	ldr	r3, [r3, #12]
   32fca:	0798      	lsls	r0, r3, #30
   32fcc:	bf42      	ittt	mi
   32fce:	220a      	movmi	r2, #10
   32fd0:	602a      	strmi	r2, [r5, #0]
   32fd2:	2201      	movmi	r2, #1
   32fd4:	07d9      	lsls	r1, r3, #31
   32fd6:	bf42      	ittt	mi
   32fd8:	2102      	movmi	r1, #2
   32fda:	f845 1022 	strmi.w	r1, [r5, r2, lsl #2]
   32fde:	3201      	addmi	r2, #1
   32fe0:	f013 0f05 	tst.w	r3, #5
   32fe4:	bf1e      	ittt	ne
   32fe6:	2305      	movne	r3, #5
   32fe8:	f845 3022 	strne.w	r3, [r5, r2, lsl #2]
   32fec:	3201      	addne	r2, #1
   32fee:	0092      	lsls	r2, r2, #2
   32ff0:	6032      	str	r2, [r6, #0]
   32ff2:	2400      	movs	r4, #0
   32ff4:	4620      	mov	r0, r4
   32ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32ffa:	6833      	ldr	r3, [r6, #0]
   32ffc:	b343      	cbz	r3, 33050 <pdn_interface_getopt+0xe8>
   32ffe:	4b16      	ldr	r3, [pc, #88]	; (33058 <pdn_interface_getopt+0xf0>)
   33000:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   33004:	681b      	ldr	r3, [r3, #0]
   33006:	702b      	strb	r3, [r5, #0]
   33008:	2301      	movs	r3, #1
   3300a:	6033      	str	r3, [r6, #0]
   3300c:	e7f1      	b.n	32ff2 <pdn_interface_getopt+0x8a>
   3300e:	6833      	ldr	r3, [r6, #0]
   33010:	b1f3      	cbz	r3, 33050 <pdn_interface_getopt+0xe8>
   33012:	f44f 7180 	mov.w	r1, #256	; 0x100
   33016:	4b11      	ldr	r3, [pc, #68]	; (3305c <pdn_interface_getopt+0xf4>)
   33018:	4a11      	ldr	r2, [pc, #68]	; (33060 <pdn_interface_getopt+0xf8>)
   3301a:	4812      	ldr	r0, [pc, #72]	; (33064 <pdn_interface_getopt+0xfc>)
   3301c:	f004 fd1e 	bl	37a5c <sniprintf>
   33020:	f7ff fc26 	bl	32870 <command_write>
   33024:	4604      	mov	r4, r0
   33026:	b958      	cbnz	r0, 33040 <pdn_interface_getopt+0xd8>
   33028:	4641      	mov	r1, r8
   3302a:	4638      	mov	r0, r7
   3302c:	f7ff fc3e 	bl	328ac <event_wait>
   33030:	2800      	cmp	r0, #0
   33032:	db0f      	blt.n	33054 <pdn_interface_getopt+0xec>
   33034:	2301      	movs	r3, #1
   33036:	7028      	strb	r0, [r5, #0]
   33038:	6033      	str	r3, [r6, #0]
   3303a:	e7db      	b.n	32ff4 <pdn_interface_getopt+0x8c>
   3303c:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   33040:	4260      	negs	r0, r4
   33042:	e79d      	b.n	32f80 <pdn_interface_getopt+0x18>
   33044:	f06f 040d 	mvn.w	r4, #13
   33048:	e7fa      	b.n	33040 <pdn_interface_getopt+0xd8>
   3304a:	f06f 0415 	mvn.w	r4, #21
   3304e:	e7f7      	b.n	33040 <pdn_interface_getopt+0xd8>
   33050:	2416      	movs	r4, #22
   33052:	e7f5      	b.n	33040 <pdn_interface_getopt+0xd8>
   33054:	4604      	mov	r4, r0
   33056:	e7f3      	b.n	33040 <pdn_interface_getopt+0xd8>
   33058:	200189a8 	.word	0x200189a8
   3305c:	000458f9 	.word	0x000458f9
   33060:	00043968 	.word	0x00043968
   33064:	2001d7e4 	.word	0x2001d7e4

00033068 <pdn_interface_pdn_id_get>:
   33068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3306c:	4606      	mov	r6, r0
   3306e:	4688      	mov	r8, r1
   33070:	b321      	cbz	r1, 330bc <pdn_interface_pdn_id_get+0x54>
   33072:	4c25      	ldr	r4, [pc, #148]	; (33108 <pdn_interface_pdn_id_get+0xa0>)
   33074:	2500      	movs	r5, #0
   33076:	4627      	mov	r7, r4
   33078:	f854 3b04 	ldr.w	r3, [r4], #4
   3307c:	b1db      	cbz	r3, 330b6 <pdn_interface_pdn_id_get+0x4e>
   3307e:	689b      	ldr	r3, [r3, #8]
   33080:	2b03      	cmp	r3, #3
   33082:	d118      	bne.n	330b6 <pdn_interface_pdn_id_get+0x4e>
   33084:	4640      	mov	r0, r8
   33086:	f7ea f8e9 	bl	1d25c <strlen>
   3308a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   3308e:	69ca      	ldr	r2, [r1, #28]
   33090:	4282      	cmp	r2, r0
   33092:	d110      	bne.n	330b6 <pdn_interface_pdn_id_get+0x4e>
   33094:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
   33098:	4403      	add	r3, r0
   3309a:	3320      	adds	r3, #32
   3309c:	4640      	mov	r0, r8
   3309e:	4419      	add	r1, r3
   330a0:	f00b f91e 	bl	3e2e0 <strncmp>
   330a4:	b938      	cbnz	r0, 330b6 <pdn_interface_pdn_id_get+0x4e>
   330a6:	2e0a      	cmp	r6, #10
   330a8:	d10a      	bne.n	330c0 <pdn_interface_pdn_id_get+0x58>
   330aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   330ae:	68db      	ldr	r3, [r3, #12]
   330b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   330b4:	b95b      	cbnz	r3, 330ce <pdn_interface_pdn_id_get+0x66>
   330b6:	3501      	adds	r5, #1
   330b8:	2d0a      	cmp	r5, #10
   330ba:	d1dd      	bne.n	33078 <pdn_interface_pdn_id_get+0x10>
   330bc:	2016      	movs	r0, #22
   330be:	e010      	b.n	330e2 <pdn_interface_pdn_id_get+0x7a>
   330c0:	2e02      	cmp	r6, #2
   330c2:	d113      	bne.n	330ec <pdn_interface_pdn_id_get+0x84>
   330c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   330c8:	68db      	ldr	r3, [r3, #12]
   330ca:	07db      	lsls	r3, r3, #31
   330cc:	d5f3      	bpl.n	330b6 <pdn_interface_pdn_id_get+0x4e>
   330ce:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   330d2:	685c      	ldr	r4, [r3, #4]
   330d4:	3401      	adds	r4, #1
   330d6:	d112      	bne.n	330fe <pdn_interface_pdn_id_get+0x96>
   330d8:	4628      	mov	r0, r5
   330da:	f7ff fc7f 	bl	329dc <pdn_id_get>
   330de:	b170      	cbz	r0, 330fe <pdn_interface_pdn_id_get+0x96>
   330e0:	4240      	negs	r0, r0
   330e2:	f7f3 fecd 	bl	26e80 <nrf_modem_os_errno_set>
   330e6:	f04f 30ff 	mov.w	r0, #4294967295
   330ea:	e00b      	b.n	33104 <pdn_interface_pdn_id_get+0x9c>
   330ec:	2e05      	cmp	r6, #5
   330ee:	d1e2      	bne.n	330b6 <pdn_interface_pdn_id_get+0x4e>
   330f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   330f4:	68db      	ldr	r3, [r3, #12]
   330f6:	3b00      	subs	r3, #0
   330f8:	bf18      	it	ne
   330fa:	2301      	movne	r3, #1
   330fc:	e7da      	b.n	330b4 <pdn_interface_pdn_id_get+0x4c>
   330fe:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   33102:	6858      	ldr	r0, [r3, #4]
   33104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33108:	200189a8 	.word	0x200189a8

0003310c <full_dfu_ipc_irq_handler>:
   3310c:	2301      	movs	r3, #1
   3310e:	4a03      	ldr	r2, [pc, #12]	; (3311c <full_dfu_ipc_irq_handler+0x10>)
   33110:	6013      	str	r3, [r2, #0]
   33112:	07c2      	lsls	r2, r0, #31
   33114:	bf44      	itt	mi
   33116:	4a02      	ldrmi	r2, [pc, #8]	; (33120 <full_dfu_ipc_irq_handler+0x14>)
   33118:	7013      	strbmi	r3, [r2, #0]
   3311a:	4770      	bx	lr
   3311c:	200189d0 	.word	0x200189d0
   33120:	2001d8e4 	.word	0x2001d8e4

00033124 <modem_ipc_wait_for_event>:
   33124:	b538      	push	{r3, r4, r5, lr}
   33126:	2300      	movs	r3, #0
   33128:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   3312c:	4c0a      	ldr	r4, [pc, #40]	; (33158 <modem_ipc_wait_for_event+0x34>)
   3312e:	6023      	str	r3, [r4, #0]
   33130:	6823      	ldr	r3, [r4, #0]
   33132:	b92b      	cbnz	r3, 33140 <modem_ipc_wait_for_event+0x1c>
   33134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   33138:	f000 f976 	bl	33428 <nrf_modem_busy_wait_us>
   3313c:	3d01      	subs	r5, #1
   3313e:	d1f7      	bne.n	33130 <modem_ipc_wait_for_event+0xc>
   33140:	6823      	ldr	r3, [r4, #0]
   33142:	b90b      	cbnz	r3, 33148 <modem_ipc_wait_for_event+0x24>
   33144:	203c      	movs	r0, #60	; 0x3c
   33146:	e005      	b.n	33154 <modem_ipc_wait_for_event+0x30>
   33148:	4b04      	ldr	r3, [pc, #16]	; (3315c <modem_ipc_wait_for_event+0x38>)
   3314a:	781b      	ldrb	r3, [r3, #0]
   3314c:	2b01      	cmp	r3, #1
   3314e:	bf14      	ite	ne
   33150:	2000      	movne	r0, #0
   33152:	2005      	moveq	r0, #5
   33154:	bd38      	pop	{r3, r4, r5, pc}
   33156:	bf00      	nop
   33158:	200189d0 	.word	0x200189d0
   3315c:	2001d8e4 	.word	0x2001d8e4

00033160 <nrf_modem_full_dfu_setup>:
   33160:	2200      	movs	r2, #0
   33162:	2300      	movs	r3, #0
   33164:	b5f0      	push	{r4, r5, r6, r7, lr}
   33166:	4d2d      	ldr	r5, [pc, #180]	; (3321c <nrf_modem_full_dfu_setup+0xbc>)
   33168:	4f2d      	ldr	r7, [pc, #180]	; (33220 <nrf_modem_full_dfu_setup+0xc0>)
   3316a:	e9c5 2302 	strd	r2, r3, [r5, #8]
   3316e:	e9c5 2304 	strd	r2, r3, [r5, #16]
   33172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   33176:	4b2b      	ldr	r3, [pc, #172]	; (33224 <nrf_modem_full_dfu_setup+0xc4>)
   33178:	2400      	movs	r4, #0
   3317a:	601a      	str	r2, [r3, #0]
   3317c:	f100 031c 	add.w	r3, r0, #28
   33180:	603b      	str	r3, [r7, #0]
   33182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   33186:	6043      	str	r3, [r0, #4]
   33188:	231c      	movs	r3, #28
   3318a:	7203      	strb	r3, [r0, #8]
   3318c:	2320      	movs	r3, #32
   3318e:	2601      	movs	r6, #1
   33190:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   33194:	7243      	strb	r3, [r0, #9]
   33196:	4b24      	ldr	r3, [pc, #144]	; (33228 <nrf_modem_full_dfu_setup+0xc8>)
   33198:	7086      	strb	r6, [r0, #2]
   3319a:	70c2      	strb	r2, [r0, #3]
   3319c:	7004      	strb	r4, [r0, #0]
   3319e:	7044      	strb	r4, [r0, #1]
   331a0:	7284      	strb	r4, [r0, #10]
   331a2:	72c4      	strb	r4, [r0, #11]
   331a4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   331a8:	702c      	strb	r4, [r5, #0]
   331aa:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   331ae:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   331b2:	4b1e      	ldr	r3, [pc, #120]	; (3322c <nrf_modem_full_dfu_setup+0xcc>)
   331b4:	b093      	sub	sp, #76	; 0x4c
   331b6:	4622      	mov	r2, r4
   331b8:	491d      	ldr	r1, [pc, #116]	; (33230 <nrf_modem_full_dfu_setup+0xd0>)
   331ba:	4620      	mov	r0, r4
   331bc:	701c      	strb	r4, [r3, #0]
   331be:	f7fa fff9 	bl	2e1b4 <nrfx_ipc_init>
   331c2:	2240      	movs	r2, #64	; 0x40
   331c4:	4621      	mov	r1, r4
   331c6:	a801      	add	r0, sp, #4
   331c8:	f00a feef 	bl	3dfaa <memset>
   331cc:	2302      	movs	r3, #2
   331ce:	9302      	str	r3, [sp, #8]
   331d0:	2304      	movs	r3, #4
   331d2:	9609      	str	r6, [sp, #36]	; 0x24
   331d4:	2605      	movs	r6, #5
   331d6:	eb0d 0003 	add.w	r0, sp, r3
   331da:	930b      	str	r3, [sp, #44]	; 0x2c
   331dc:	9611      	str	r6, [sp, #68]	; 0x44
   331de:	f7fb f811 	bl	2e204 <nrfx_ipc_config_load>
   331e2:	4b14      	ldr	r3, [pc, #80]	; (33234 <nrf_modem_full_dfu_setup+0xd4>)
   331e4:	9400      	str	r4, [sp, #0]
   331e6:	683f      	ldr	r7, [r7, #0]
   331e8:	611c      	str	r4, [r3, #16]
   331ea:	691b      	ldr	r3, [r3, #16]
   331ec:	9300      	str	r3, [sp, #0]
   331ee:	9b00      	ldr	r3, [sp, #0]
   331f0:	f7ff ff98 	bl	33124 <modem_ipc_wait_for_event>
   331f4:	4603      	mov	r3, r0
   331f6:	b150      	cbz	r0, 3320e <nrf_modem_full_dfu_setup+0xae>
   331f8:	2303      	movs	r3, #3
   331fa:	702b      	strb	r3, [r5, #0]
   331fc:	f7f3 fe40 	bl	26e80 <nrf_modem_os_errno_set>
   33200:	f7fb f844 	bl	2e28c <nrfx_ipc_uninit>
   33204:	f04f 33ff 	mov.w	r3, #4294967295
   33208:	4618      	mov	r0, r3
   3320a:	b013      	add	sp, #76	; 0x4c
   3320c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3320e:	6839      	ldr	r1, [r7, #0]
   33210:	4a09      	ldr	r2, [pc, #36]	; (33238 <nrf_modem_full_dfu_setup+0xd8>)
   33212:	4291      	cmp	r1, r2
   33214:	d0f8      	beq.n	33208 <nrf_modem_full_dfu_setup+0xa8>
   33216:	4630      	mov	r0, r6
   33218:	e7f0      	b.n	331fc <nrf_modem_full_dfu_setup+0x9c>
   3321a:	bf00      	nop
   3321c:	20016c70 	.word	0x20016c70
   33220:	200189d4 	.word	0x200189d4
   33224:	200189d8 	.word	0x200189d8
   33228:	4002a000 	.word	0x4002a000
   3322c:	2001d8e4 	.word	0x2001d8e4
   33230:	0003310d 	.word	0x0003310d
   33234:	40005600 	.word	0x40005600
   33238:	a5000001 	.word	0xa5000001

0003323c <packet_handler_create>:
   3323c:	2801      	cmp	r0, #1
   3323e:	b570      	push	{r4, r5, r6, lr}
   33240:	4604      	mov	r4, r0
   33242:	460e      	mov	r6, r1
   33244:	4615      	mov	r5, r2
   33246:	d00f      	beq.n	33268 <packet_handler_create+0x2c>
   33248:	1e84      	subs	r4, r0, #2
   3324a:	2c01      	cmp	r4, #1
   3324c:	d810      	bhi.n	33270 <packet_handler_create+0x34>
   3324e:	2010      	movs	r0, #16
   33250:	f7f3 ffc8 	bl	271e4 <nrf_modem_os_alloc>
   33254:	2400      	movs	r4, #0
   33256:	b130      	cbz	r0, 33266 <packet_handler_create+0x2a>
   33258:	2218      	movs	r2, #24
   3325a:	4b08      	ldr	r3, [pc, #32]	; (3327c <packet_handler_create+0x40>)
   3325c:	6085      	str	r5, [r0, #8]
   3325e:	fb02 3404 	mla	r4, r2, r4, r3
   33262:	e9c0 4600 	strd	r4, r6, [r0]
   33266:	bd70      	pop	{r4, r5, r6, pc}
   33268:	2014      	movs	r0, #20
   3326a:	f7f3 ffbb 	bl	271e4 <nrf_modem_os_alloc>
   3326e:	e7f2      	b.n	33256 <packet_handler_create+0x1a>
   33270:	200c      	movs	r0, #12
   33272:	f7f3 ffb7 	bl	271e4 <nrf_modem_os_alloc>
   33276:	2402      	movs	r4, #2
   33278:	e7ed      	b.n	33256 <packet_handler_create+0x1a>
   3327a:	bf00      	nop
   3327c:	0004007c 	.word	0x0004007c

00033280 <modem_off>:
   33280:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33282:	2501      	movs	r5, #1
   33284:	4c07      	ldr	r4, [pc, #28]	; (332a4 <modem_off+0x24>)
   33286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   3328a:	6165      	str	r5, [r4, #20]
   3328c:	f000 f8cc 	bl	33428 <nrf_modem_busy_wait_us>
   33290:	2300      	movs	r3, #0
   33292:	6163      	str	r3, [r4, #20]
   33294:	9301      	str	r3, [sp, #4]
   33296:	6125      	str	r5, [r4, #16]
   33298:	6923      	ldr	r3, [r4, #16]
   3329a:	9301      	str	r3, [sp, #4]
   3329c:	9b01      	ldr	r3, [sp, #4]
   3329e:	b003      	add	sp, #12
   332a0:	bd30      	pop	{r4, r5, pc}
   332a2:	bf00      	nop
   332a4:	40005600 	.word	0x40005600

000332a8 <nrf_modem_init>:
   332a8:	b570      	push	{r4, r5, r6, lr}
   332aa:	460d      	mov	r5, r1
   332ac:	b300      	cbz	r0, 332f0 <nrf_modem_init+0x48>
   332ae:	4e13      	ldr	r6, [pc, #76]	; (332fc <nrf_modem_init+0x54>)
   332b0:	7832      	ldrb	r2, [r6, #0]
   332b2:	b9ea      	cbnz	r2, 332f0 <nrf_modem_init+0x48>
   332b4:	2901      	cmp	r1, #1
   332b6:	d113      	bne.n	332e0 <nrf_modem_init+0x38>
   332b8:	68c1      	ldr	r1, [r0, #12]
   332ba:	6842      	ldr	r2, [r0, #4]
   332bc:	440a      	add	r2, r1
   332be:	6941      	ldr	r1, [r0, #20]
   332c0:	440a      	add	r2, r1
   332c2:	69c1      	ldr	r1, [r0, #28]
   332c4:	440a      	add	r2, r1
   332c6:	f242 011b 	movw	r1, #8219	; 0x201b
   332ca:	428a      	cmp	r2, r1
   332cc:	d913      	bls.n	332f6 <nrf_modem_init+0x4e>
   332ce:	6800      	ldr	r0, [r0, #0]
   332d0:	f7ff ff46 	bl	33160 <nrf_modem_full_dfu_setup>
   332d4:	4604      	mov	r4, r0
   332d6:	b130      	cbz	r0, 332e6 <nrf_modem_init+0x3e>
   332d8:	f7ff ffd2 	bl	33280 <modem_off>
   332dc:	4620      	mov	r0, r4
   332de:	bd70      	pop	{r4, r5, r6, pc}
   332e0:	f00a fb61 	bl	3d9a6 <nrf_modem_platform_init>
   332e4:	e7f6      	b.n	332d4 <nrf_modem_init+0x2c>
   332e6:	4b06      	ldr	r3, [pc, #24]	; (33300 <nrf_modem_init+0x58>)
   332e8:	701d      	strb	r5, [r3, #0]
   332ea:	2301      	movs	r3, #1
   332ec:	7033      	strb	r3, [r6, #0]
   332ee:	e7f5      	b.n	332dc <nrf_modem_init+0x34>
   332f0:	f04f 34ff 	mov.w	r4, #4294967295
   332f4:	e7f2      	b.n	332dc <nrf_modem_init+0x34>
   332f6:	240c      	movs	r4, #12
   332f8:	e7f0      	b.n	332dc <nrf_modem_init+0x34>
   332fa:	bf00      	nop
   332fc:	2001d8e5 	.word	0x2001d8e5
   33300:	2001d8e6 	.word	0x2001d8e6

00033304 <nrf_modem_platform_af_method_table_get>:
   33304:	280a      	cmp	r0, #10
   33306:	b508      	push	{r3, lr}
   33308:	d80b      	bhi.n	33322 <nrf_modem_platform_af_method_table_get+0x1e>
   3330a:	2800      	cmp	r0, #0
   3330c:	d036      	beq.n	3337c <nrf_modem_platform_af_method_table_get+0x78>
   3330e:	3801      	subs	r0, #1
   33310:	2809      	cmp	r0, #9
   33312:	d833      	bhi.n	3337c <nrf_modem_platform_af_method_table_get+0x78>
   33314:	e8df f000 	tbb	[pc, r0]
   33318:	32321429 	.word	0x32321429
   3331c:	32323224 	.word	0x32323224
   33320:	1432      	.short	0x1432
   33322:	2866      	cmp	r0, #102	; 0x66
   33324:	d12a      	bne.n	3337c <nrf_modem_platform_af_method_table_get+0x78>
   33326:	f240 2301 	movw	r3, #513	; 0x201
   3332a:	429a      	cmp	r2, r3
   3332c:	d028      	beq.n	33380 <nrf_modem_platform_af_method_table_get+0x7c>
   3332e:	f240 2302 	movw	r3, #514	; 0x202
   33332:	429a      	cmp	r2, r3
   33334:	d026      	beq.n	33384 <nrf_modem_platform_af_method_table_get+0x80>
   33336:	202b      	movs	r0, #43	; 0x2b
   33338:	f7f3 fda2 	bl	26e80 <nrf_modem_os_errno_set>
   3333c:	2000      	movs	r0, #0
   3333e:	e009      	b.n	33354 <nrf_modem_platform_af_method_table_get+0x50>
   33340:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   33344:	d207      	bcs.n	33356 <nrf_modem_platform_af_method_table_get+0x52>
   33346:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   3334a:	d207      	bcs.n	3335c <nrf_modem_platform_af_method_table_get+0x58>
   3334c:	3a01      	subs	r2, #1
   3334e:	2a01      	cmp	r2, #1
   33350:	d8f1      	bhi.n	33336 <nrf_modem_platform_af_method_table_get+0x32>
   33352:	480e      	ldr	r0, [pc, #56]	; (3338c <nrf_modem_platform_af_method_table_get+0x88>)
   33354:	bd08      	pop	{r3, pc}
   33356:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   3335a:	d1ec      	bne.n	33336 <nrf_modem_platform_af_method_table_get+0x32>
   3335c:	480c      	ldr	r0, [pc, #48]	; (33390 <nrf_modem_platform_af_method_table_get+0x8c>)
   3335e:	e7f9      	b.n	33354 <nrf_modem_platform_af_method_table_get+0x50>
   33360:	2903      	cmp	r1, #3
   33362:	480c      	ldr	r0, [pc, #48]	; (33394 <nrf_modem_platform_af_method_table_get+0x90>)
   33364:	bf18      	it	ne
   33366:	2000      	movne	r0, #0
   33368:	e7f4      	b.n	33354 <nrf_modem_platform_af_method_table_get+0x50>
   3336a:	f240 2303 	movw	r3, #515	; 0x203
   3336e:	429a      	cmp	r2, r3
   33370:	d00a      	beq.n	33388 <nrf_modem_platform_af_method_table_get+0x84>
   33372:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   33376:	d1de      	bne.n	33336 <nrf_modem_platform_af_method_table_get+0x32>
   33378:	4807      	ldr	r0, [pc, #28]	; (33398 <nrf_modem_platform_af_method_table_get+0x94>)
   3337a:	e7eb      	b.n	33354 <nrf_modem_platform_af_method_table_get+0x50>
   3337c:	2016      	movs	r0, #22
   3337e:	e7db      	b.n	33338 <nrf_modem_platform_af_method_table_get+0x34>
   33380:	4806      	ldr	r0, [pc, #24]	; (3339c <nrf_modem_platform_af_method_table_get+0x98>)
   33382:	e7e7      	b.n	33354 <nrf_modem_platform_af_method_table_get+0x50>
   33384:	4806      	ldr	r0, [pc, #24]	; (333a0 <nrf_modem_platform_af_method_table_get+0x9c>)
   33386:	e7e5      	b.n	33354 <nrf_modem_platform_af_method_table_get+0x50>
   33388:	4806      	ldr	r0, [pc, #24]	; (333a4 <nrf_modem_platform_af_method_table_get+0xa0>)
   3338a:	e7e3      	b.n	33354 <nrf_modem_platform_af_method_table_get+0x50>
   3338c:	000400ec 	.word	0x000400ec
   33390:	00040114 	.word	0x00040114
   33394:	000401b4 	.word	0x000401b4
   33398:	0004018c 	.word	0x0004018c
   3339c:	000400c4 	.word	0x000400c4
   333a0:	00040164 	.word	0x00040164
   333a4:	0004013c 	.word	0x0004013c

000333a8 <nrf_modem_platform_fd_method_table_get>:
   333a8:	b538      	push	{r3, r4, r5, lr}
   333aa:	4605      	mov	r5, r0
   333ac:	f7fc fe5e 	bl	3006c <interface_socket_from_handle_get>
   333b0:	4604      	mov	r4, r0
   333b2:	b130      	cbz	r0, 333c2 <nrf_modem_platform_fd_method_table_get+0x1a>
   333b4:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   333b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   333bc:	68c0      	ldr	r0, [r0, #12]
   333be:	f7ff bfa1 	b.w	33304 <nrf_modem_platform_af_method_table_get>
   333c2:	4b0b      	ldr	r3, [pc, #44]	; (333f0 <nrf_modem_platform_fd_method_table_get+0x48>)
   333c4:	429d      	cmp	r5, r3
   333c6:	d00c      	beq.n	333e2 <nrf_modem_platform_fd_method_table_get+0x3a>
   333c8:	4a0a      	ldr	r2, [pc, #40]	; (333f4 <nrf_modem_platform_fd_method_table_get+0x4c>)
   333ca:	0c2b      	lsrs	r3, r5, #16
   333cc:	041b      	lsls	r3, r3, #16
   333ce:	4293      	cmp	r3, r2
   333d0:	d009      	beq.n	333e6 <nrf_modem_platform_fd_method_table_get+0x3e>
   333d2:	4b09      	ldr	r3, [pc, #36]	; (333f8 <nrf_modem_platform_fd_method_table_get+0x50>)
   333d4:	429d      	cmp	r5, r3
   333d6:	d008      	beq.n	333ea <nrf_modem_platform_fd_method_table_get+0x42>
   333d8:	2009      	movs	r0, #9
   333da:	f7f3 fd51 	bl	26e80 <nrf_modem_os_errno_set>
   333de:	4620      	mov	r0, r4
   333e0:	bd38      	pop	{r3, r4, r5, pc}
   333e2:	4c06      	ldr	r4, [pc, #24]	; (333fc <nrf_modem_platform_fd_method_table_get+0x54>)
   333e4:	e7fb      	b.n	333de <nrf_modem_platform_fd_method_table_get+0x36>
   333e6:	4c06      	ldr	r4, [pc, #24]	; (33400 <nrf_modem_platform_fd_method_table_get+0x58>)
   333e8:	e7f9      	b.n	333de <nrf_modem_platform_fd_method_table_get+0x36>
   333ea:	4c06      	ldr	r4, [pc, #24]	; (33404 <nrf_modem_platform_fd_method_table_get+0x5c>)
   333ec:	e7f7      	b.n	333de <nrf_modem_platform_fd_method_table_get+0x36>
   333ee:	bf00      	nop
   333f0:	49765432 	.word	0x49765432
   333f4:	789a0000 	.word	0x789a0000
   333f8:	49765443 	.word	0x49765443
   333fc:	0004013c 	.word	0x0004013c
   33400:	00040164 	.word	0x00040164
   33404:	0004018c 	.word	0x0004018c

00033408 <nrf_modem_platform_fcntl>:
   33408:	b508      	push	{r3, lr}
   3340a:	4b06      	ldr	r3, [pc, #24]	; (33424 <nrf_modem_platform_fcntl+0x1c>)
   3340c:	4298      	cmp	r0, r3
   3340e:	d003      	beq.n	33418 <nrf_modem_platform_fcntl+0x10>
   33410:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33414:	f7fc beae 	b.w	30174 <interface_socket_fcntl>
   33418:	202d      	movs	r0, #45	; 0x2d
   3341a:	f7f3 fd31 	bl	26e80 <nrf_modem_os_errno_set>
   3341e:	f04f 30ff 	mov.w	r0, #4294967295
   33422:	bd08      	pop	{r3, pc}
   33424:	49765432 	.word	0x49765432

00033428 <nrf_modem_busy_wait_us>:
   33428:	b508      	push	{r3, lr}
   3342a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3342e:	4358      	muls	r0, r3
   33430:	f7e9 f948 	bl	1c6c4 <__aeabi_ui2d>
   33434:	4b0a      	ldr	r3, [pc, #40]	; (33460 <nrf_modem_busy_wait_us+0x38>)
   33436:	2200      	movs	r2, #0
   33438:	f7e9 fae8 	bl	1ca0c <__aeabi_ddiv>
   3343c:	f7e9 fc94 	bl	1cd68 <__aeabi_d2f>
   33440:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
   33444:	ee07 0a90 	vmov	s15, r0
   33448:	eec7 7a87 	vdiv.f32	s15, s15, s14
   3344c:	2300      	movs	r3, #0
   3344e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   33452:	ee17 2a90 	vmov	r2, s15
   33456:	4293      	cmp	r3, r2
   33458:	d100      	bne.n	3345c <nrf_modem_busy_wait_us+0x34>
   3345a:	bd08      	pop	{r3, pc}
   3345c:	3301      	adds	r3, #1
   3345e:	e7f8      	b.n	33452 <nrf_modem_busy_wait_us+0x2a>
   33460:	402f4000 	.word	0x402f4000

00033464 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   33464:	4b0e      	ldr	r3, [pc, #56]	; (334a0 <z_sys_init_run_level+0x3c>)
{
   33466:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   33468:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   3346c:	3001      	adds	r0, #1
   3346e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   33472:	42a6      	cmp	r6, r4
   33474:	d800      	bhi.n	33478 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   33476:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   33478:	e9d4 3500 	ldrd	r3, r5, [r4]
   3347c:	4628      	mov	r0, r5
   3347e:	4798      	blx	r3
		if (dev != NULL) {
   33480:	b165      	cbz	r5, 3349c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   33482:	68eb      	ldr	r3, [r5, #12]
   33484:	b130      	cbz	r0, 33494 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   33486:	2800      	cmp	r0, #0
   33488:	bfb8      	it	lt
   3348a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   3348c:	28ff      	cmp	r0, #255	; 0xff
   3348e:	bfa8      	it	ge
   33490:	20ff      	movge	r0, #255	; 0xff
   33492:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   33494:	785a      	ldrb	r2, [r3, #1]
   33496:	f042 0201 	orr.w	r2, r2, #1
   3349a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3349c:	3408      	adds	r4, #8
   3349e:	e7e8      	b.n	33472 <z_sys_init_run_level+0xe>
   334a0:	000401dc 	.word	0x000401dc

000334a4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   334a4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   334a6:	4605      	mov	r5, r0
   334a8:	b910      	cbnz	r0, 334b0 <z_impl_device_get_binding+0xc>
		return NULL;
   334aa:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   334ac:	4620      	mov	r0, r4
   334ae:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   334b0:	7803      	ldrb	r3, [r0, #0]
   334b2:	2b00      	cmp	r3, #0
   334b4:	d0f9      	beq.n	334aa <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   334b6:	4a0f      	ldr	r2, [pc, #60]	; (334f4 <z_impl_device_get_binding+0x50>)
   334b8:	4c0f      	ldr	r4, [pc, #60]	; (334f8 <z_impl_device_get_binding+0x54>)
   334ba:	4616      	mov	r6, r2
   334bc:	4294      	cmp	r4, r2
   334be:	d108      	bne.n	334d2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   334c0:	4c0d      	ldr	r4, [pc, #52]	; (334f8 <z_impl_device_get_binding+0x54>)
   334c2:	42b4      	cmp	r4, r6
   334c4:	d0f1      	beq.n	334aa <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   334c6:	4620      	mov	r0, r4
   334c8:	f00a fc04 	bl	3dcd4 <z_device_ready>
   334cc:	b950      	cbnz	r0, 334e4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   334ce:	3418      	adds	r4, #24
   334d0:	e7f7      	b.n	334c2 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   334d2:	4620      	mov	r0, r4
   334d4:	f00a fbfe 	bl	3dcd4 <z_device_ready>
   334d8:	b110      	cbz	r0, 334e0 <z_impl_device_get_binding+0x3c>
   334da:	6823      	ldr	r3, [r4, #0]
   334dc:	42ab      	cmp	r3, r5
   334de:	d0e5      	beq.n	334ac <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   334e0:	3418      	adds	r4, #24
   334e2:	e7eb      	b.n	334bc <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   334e4:	4628      	mov	r0, r5
   334e6:	6821      	ldr	r1, [r4, #0]
   334e8:	f7e9 feae 	bl	1d248 <strcmp>
   334ec:	2800      	cmp	r0, #0
   334ee:	d1ee      	bne.n	334ce <z_impl_device_get_binding+0x2a>
   334f0:	e7dc      	b.n	334ac <z_impl_device_get_binding+0x8>
   334f2:	bf00      	nop
   334f4:	20014c24 	.word	0x20014c24
   334f8:	20014a74 	.word	0x20014a74

000334fc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   334fc:	4b01      	ldr	r3, [pc, #4]	; (33504 <z_impl_z_errno+0x8>)
   334fe:	6898      	ldr	r0, [r3, #8]
}
   33500:	3064      	adds	r0, #100	; 0x64
   33502:	4770      	bx	lr
   33504:	200189dc 	.word	0x200189dc

00033508 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   33508:	b510      	push	{r4, lr}
   3350a:	4604      	mov	r4, r0
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   3350c:	f7ed fe0e 	bl	2112c <z_impl_log_panic>
   33510:	4806      	ldr	r0, [pc, #24]	; (3352c <k_sys_fatal_error_handler+0x24>)
   33512:	4b07      	ldr	r3, [pc, #28]	; (33530 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   33514:	4907      	ldr	r1, [pc, #28]	; (33534 <k_sys_fatal_error_handler+0x2c>)
   33516:	1a1b      	subs	r3, r3, r0
   33518:	08db      	lsrs	r3, r3, #3
   3351a:	019b      	lsls	r3, r3, #6
   3351c:	f043 0001 	orr.w	r0, r3, #1
   33520:	f006 f8d5 	bl	396ce <log_string_sync>
	arch_system_halt(reason);
   33524:	4620      	mov	r0, r4
   33526:	f00a fbde 	bl	3dce6 <arch_system_halt>
   3352a:	bf00      	nop
   3352c:	0003f5a4 	.word	0x0003f5a4
   33530:	0003f6b4 	.word	0x0003f6b4
   33534:	0004592b 	.word	0x0004592b

00033538 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   33538:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3353c:	4605      	mov	r5, r0
   3353e:	460f      	mov	r7, r1
	__asm__ volatile(
   33540:	f04f 0320 	mov.w	r3, #32
   33544:	f3ef 8811 	mrs	r8, BASEPRI
   33548:	f383 8811 	msr	BASEPRI, r3
   3354c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   33550:	f002 fbfa 	bl	35d48 <z_impl_k_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   33554:	2200      	movs	r2, #0
   33556:	4b28      	ldr	r3, [pc, #160]	; (335f8 <z_fatal_error+0xc0>)
   33558:	4c28      	ldr	r4, [pc, #160]	; (335fc <z_fatal_error+0xc4>)
   3355a:	2d04      	cmp	r5, #4
   3355c:	eba4 0403 	sub.w	r4, r4, r3
   33560:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   33564:	bf98      	it	ls
   33566:	4b26      	ldrls	r3, [pc, #152]	; (33600 <z_fatal_error+0xc8>)
   33568:	ea4f 1484 	mov.w	r4, r4, lsl #6
   3356c:	4606      	mov	r6, r0
   3356e:	bf94      	ite	ls
   33570:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   33574:	4b23      	ldrhi	r3, [pc, #140]	; (33604 <z_fatal_error+0xcc>)
   33576:	9200      	str	r2, [sp, #0]
   33578:	4923      	ldr	r1, [pc, #140]	; (33608 <z_fatal_error+0xd0>)
   3357a:	462a      	mov	r2, r5
   3357c:	f044 0001 	orr.w	r0, r4, #1
   33580:	f006 f8a5 	bl	396ce <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   33584:	b147      	cbz	r7, 33598 <z_fatal_error+0x60>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   33586:	69fb      	ldr	r3, [r7, #28]
   33588:	f3c3 0308 	ubfx	r3, r3, #0, #9
   3358c:	b123      	cbz	r3, 33598 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   3358e:	491f      	ldr	r1, [pc, #124]	; (3360c <z_fatal_error+0xd4>)
   33590:	f044 0001 	orr.w	r0, r4, #1
   33594:	f006 f89b 	bl	396ce <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   33598:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   3359c:	b12e      	cbz	r6, 335aa <z_fatal_error+0x72>
   3359e:	4630      	mov	r0, r6
   335a0:	f00a fbc8 	bl	3dd34 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   335a4:	b108      	cbz	r0, 335aa <z_fatal_error+0x72>
   335a6:	7803      	ldrb	r3, [r0, #0]
   335a8:	b903      	cbnz	r3, 335ac <z_fatal_error+0x74>
		thread_name = "unknown";
   335aa:	4819      	ldr	r0, [pc, #100]	; (33610 <z_fatal_error+0xd8>)
   335ac:	f006 f8a2 	bl	396f4 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   335b0:	4632      	mov	r2, r6
   335b2:	4603      	mov	r3, r0
   335b4:	4917      	ldr	r1, [pc, #92]	; (33614 <z_fatal_error+0xdc>)
   335b6:	4620      	mov	r0, r4
   335b8:	f006 f889 	bl	396ce <log_string_sync>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   335bc:	4639      	mov	r1, r7
   335be:	4628      	mov	r0, r5
   335c0:	f7ff ffa2 	bl	33508 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   335c4:	2d04      	cmp	r5, #4
   335c6:	d10c      	bne.n	335e2 <z_fatal_error+0xaa>
   335c8:	4913      	ldr	r1, [pc, #76]	; (33618 <z_fatal_error+0xe0>)
   335ca:	238f      	movs	r3, #143	; 0x8f
   335cc:	4a13      	ldr	r2, [pc, #76]	; (3361c <z_fatal_error+0xe4>)
   335ce:	4814      	ldr	r0, [pc, #80]	; (33620 <z_fatal_error+0xe8>)
   335d0:	f005 fdaf 	bl	39132 <printk>
   335d4:	4813      	ldr	r0, [pc, #76]	; (33624 <z_fatal_error+0xec>)
   335d6:	f005 fdac 	bl	39132 <printk>
   335da:	218f      	movs	r1, #143	; 0x8f
   335dc:	480f      	ldr	r0, [pc, #60]	; (3361c <z_fatal_error+0xe4>)
   335de:	f006 f847 	bl	39670 <assert_post_action>
	__asm__ volatile(
   335e2:	f388 8811 	msr	BASEPRI, r8
   335e6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   335ea:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   335ec:	b002      	add	sp, #8
   335ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   335f2:	f7f0 ba83 	b.w	23afc <z_impl_k_thread_abort>
   335f6:	bf00      	nop
   335f8:	0003f5a4 	.word	0x0003f5a4
   335fc:	0003f6b4 	.word	0x0003f6b4
   33600:	000401f4 	.word	0x000401f4
   33604:	0004593a 	.word	0x0004593a
   33608:	00045950 	.word	0x00045950
   3360c:	00045978 	.word	0x00045978
   33610:	00045948 	.word	0x00045948
   33614:	00045999 	.word	0x00045999
   33618:	000459d3 	.word	0x000459d3
   3361c:	000459b1 	.word	0x000459b1
   33620:	0004033e 	.word	0x0004033e
   33624:	000459f0 	.word	0x000459f0

00033628 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   33628:	4802      	ldr	r0, [pc, #8]	; (33634 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   3362a:	4a03      	ldr	r2, [pc, #12]	; (33638 <z_bss_zero+0x10>)
   3362c:	2100      	movs	r1, #0
   3362e:	1a12      	subs	r2, r2, r0
   33630:	f00a bcbb 	b.w	3dfaa <memset>
   33634:	20014ec0 	.word	0x20014ec0
   33638:	2001d8f8 	.word	0x2001d8f8

0003363c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   3363c:	2201      	movs	r2, #1
{
   3363e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   33640:	4b09      	ldr	r3, [pc, #36]	; (33668 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   33642:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   33644:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   33646:	f7ff ff0d 	bl	33464 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   3364a:	f003 fc31 	bl	36eb0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   3364e:	2003      	movs	r0, #3
   33650:	f7ff ff08 	bl	33464 <z_sys_init_run_level>

	z_init_static_threads();
   33654:	f000 faac 	bl	33bb0 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   33658:	f00a fb4e 	bl	3dcf8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   3365c:	4a03      	ldr	r2, [pc, #12]	; (3366c <bg_thread_main+0x30>)
   3365e:	7b13      	ldrb	r3, [r2, #12]
   33660:	f023 0301 	bic.w	r3, r3, #1
   33664:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   33666:	bd08      	pop	{r3, pc}
   33668:	2001d8e7 	.word	0x2001d8e7
   3366c:	20016d50 	.word	0x20016d50

00033670 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   33670:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   33674:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   33676:	f7ed fcd7 	bl	21028 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   3367a:	4b37      	ldr	r3, [pc, #220]	; (33758 <z_cstart+0xe8>)
	uint32_t msp =
   3367c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   33680:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   33684:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   33688:	2400      	movs	r4, #0
   3368a:	23e0      	movs	r3, #224	; 0xe0
   3368c:	4d33      	ldr	r5, [pc, #204]	; (3375c <z_cstart+0xec>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3368e:	f04f 0b01 	mov.w	fp, #1
   33692:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   33696:	77ec      	strb	r4, [r5, #31]
   33698:	762c      	strb	r4, [r5, #24]
   3369a:	766c      	strb	r4, [r5, #25]
   3369c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   3369e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   336a0:	4e2f      	ldr	r6, [pc, #188]	; (33760 <z_cstart+0xf0>)
   336a2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   336a6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   336a8:	f7f0 f990 	bl	239cc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   336ac:	f7ef fe2c 	bl	23308 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   336b0:	f04f 33ff 	mov.w	r3, #4294967295
   336b4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   336b6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   336b8:	f7f0 fbe6 	bl	23e88 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   336bc:	f7f0 fa30 	bl	23b20 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   336c0:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   336c4:	4d27      	ldr	r5, [pc, #156]	; (33764 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   336c6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   336ca:	ab06      	add	r3, sp, #24
   336cc:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   336ce:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   336d2:	f00a fafe 	bl	3dcd2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   336d6:	4620      	mov	r0, r4
   336d8:	f7ff fec4 	bl	33464 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   336dc:	2001      	movs	r0, #1
   336de:	f7ff fec1 	bl	33464 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   336e2:	f8df a098 	ldr.w	sl, [pc, #152]	; 3377c <z_cstart+0x10c>
	z_sched_init();
   336e6:	f002 f99b 	bl	35a20 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   336ea:	4b1f      	ldr	r3, [pc, #124]	; (33768 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   336ec:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   336ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   336f2:	491e      	ldr	r1, [pc, #120]	; (3376c <z_cstart+0xfc>)
   336f4:	9305      	str	r3, [sp, #20]
   336f6:	4630      	mov	r0, r6
   336f8:	4653      	mov	r3, sl
   336fa:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   336fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   33702:	9400      	str	r4, [sp, #0]
   33704:	f000 f9a6 	bl	33a54 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   33708:	7b73      	ldrb	r3, [r6, #13]
   3370a:	4680      	mov	r8, r0
   3370c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   33710:	4630      	mov	r0, r6
   33712:	7373      	strb	r3, [r6, #13]
   33714:	f001 ff4a 	bl	355ac <z_ready_thread>
	z_setup_new_thread(thread, stack,
   33718:	230f      	movs	r3, #15
   3371a:	4f15      	ldr	r7, [pc, #84]	; (33770 <z_cstart+0x100>)
   3371c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   33720:	e9cd 4302 	strd	r4, r3, [sp, #8]
   33724:	4913      	ldr	r1, [pc, #76]	; (33774 <z_cstart+0x104>)
   33726:	4b14      	ldr	r3, [pc, #80]	; (33778 <z_cstart+0x108>)
   33728:	4638      	mov	r0, r7
   3372a:	e9cd b404 	strd	fp, r4, [sp, #16]
   3372e:	e9cd 5400 	strd	r5, r4, [sp]
   33732:	f000 f98f 	bl	33a54 <z_setup_new_thread>
   33736:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   33738:	4652      	mov	r2, sl
   3373a:	f023 0304 	bic.w	r3, r3, #4
   3373e:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   33740:	f105 0318 	add.w	r3, r5, #24
   33744:	4641      	mov	r1, r8
   33746:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   33748:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   3374c:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   3374e:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   33750:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   33754:	f7ef fdb8 	bl	232c8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   33758:	200213e8 	.word	0x200213e8
   3375c:	e000ed00 	.word	0xe000ed00
   33760:	20016d50 	.word	0x20016d50
   33764:	200189dc 	.word	0x200189dc
   33768:	00045a6f 	.word	0x00045a6f
   3376c:	2001f2a8 	.word	0x2001f2a8
   33770:	20016c88 	.word	0x20016c88
   33774:	200212a8 	.word	0x200212a8
   33778:	00033d1d 	.word	0x00033d1d
   3377c:	0003363d 	.word	0x0003363d

00033780 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   33780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   33782:	4d0f      	ldr	r5, [pc, #60]	; (337c0 <statics_init+0x40>)
   33784:	4c0f      	ldr	r4, [pc, #60]	; (337c4 <statics_init+0x44>)
   33786:	462f      	mov	r7, r5
   33788:	4e0f      	ldr	r6, [pc, #60]	; (337c8 <statics_init+0x48>)
   3378a:	42ac      	cmp	r4, r5
   3378c:	d90c      	bls.n	337a8 <statics_init+0x28>
   3378e:	490f      	ldr	r1, [pc, #60]	; (337cc <statics_init+0x4c>)
   33790:	2317      	movs	r3, #23
   33792:	4632      	mov	r2, r6
   33794:	480e      	ldr	r0, [pc, #56]	; (337d0 <statics_init+0x50>)
   33796:	f005 fccc 	bl	39132 <printk>
   3379a:	480e      	ldr	r0, [pc, #56]	; (337d4 <statics_init+0x54>)
   3379c:	f005 fcc9 	bl	39132 <printk>
   337a0:	2117      	movs	r1, #23
   337a2:	4630      	mov	r0, r6
   337a4:	f005 ff64 	bl	39670 <assert_post_action>
   337a8:	42bc      	cmp	r4, r7
   337aa:	d301      	bcc.n	337b0 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   337ac:	2000      	movs	r0, #0
   337ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   337b0:	4620      	mov	r0, r4
   337b2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   337b6:	f00a faa1 	bl	3dcfc <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   337ba:	3418      	adds	r4, #24
   337bc:	e7e5      	b.n	3378a <statics_init+0xa>
   337be:	bf00      	nop
   337c0:	20014d14 	.word	0x20014d14
   337c4:	20014ce4 	.word	0x20014ce4
   337c8:	00045a77 	.word	0x00045a77
   337cc:	00045a99 	.word	0x00045a99
   337d0:	0004033e 	.word	0x0004033e
   337d4:	00040966 	.word	0x00040966

000337d8 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   337d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   337dc:	b087      	sub	sp, #28
   337de:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   337e2:	4606      	mov	r6, r0
   337e4:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   337e6:	4640      	mov	r0, r8
   337e8:	4649      	mov	r1, r9
{
   337ea:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   337ec:	f00a fb0e 	bl	3de0c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   337f0:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   337f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   337f8:	f04f 0320 	mov.w	r3, #32
   337fc:	f3ef 8511 	mrs	r5, BASEPRI
   33800:	f383 8811 	msr	BASEPRI, r3
   33804:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33808:	4620      	mov	r0, r4
   3380a:	f000 fa61 	bl	33cd0 <z_spin_lock_valid>
   3380e:	b968      	cbnz	r0, 3382c <k_heap_aligned_alloc+0x54>
   33810:	2381      	movs	r3, #129	; 0x81
   33812:	4a3f      	ldr	r2, [pc, #252]	; (33910 <k_heap_aligned_alloc+0x138>)
   33814:	493f      	ldr	r1, [pc, #252]	; (33914 <k_heap_aligned_alloc+0x13c>)
   33816:	4840      	ldr	r0, [pc, #256]	; (33918 <k_heap_aligned_alloc+0x140>)
   33818:	f005 fc8b 	bl	39132 <printk>
   3381c:	4621      	mov	r1, r4
   3381e:	483f      	ldr	r0, [pc, #252]	; (3391c <k_heap_aligned_alloc+0x144>)
   33820:	f005 fc87 	bl	39132 <printk>
   33824:	2181      	movs	r1, #129	; 0x81
   33826:	483a      	ldr	r0, [pc, #232]	; (33910 <k_heap_aligned_alloc+0x138>)
   33828:	f005 ff22 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   3382c:	4620      	mov	r0, r4
   3382e:	f000 fa6d 	bl	33d0c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   33832:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   33836:	b17b      	cbz	r3, 33858 <k_heap_aligned_alloc+0x80>
   33838:	ea58 0309 	orrs.w	r3, r8, r9
   3383c:	d00c      	beq.n	33858 <k_heap_aligned_alloc+0x80>
   3383e:	4938      	ldr	r1, [pc, #224]	; (33920 <k_heap_aligned_alloc+0x148>)
   33840:	2328      	movs	r3, #40	; 0x28
   33842:	4a38      	ldr	r2, [pc, #224]	; (33924 <k_heap_aligned_alloc+0x14c>)
   33844:	4834      	ldr	r0, [pc, #208]	; (33918 <k_heap_aligned_alloc+0x140>)
   33846:	f005 fc74 	bl	39132 <printk>
   3384a:	4837      	ldr	r0, [pc, #220]	; (33928 <k_heap_aligned_alloc+0x150>)
   3384c:	f005 fc71 	bl	39132 <printk>
   33850:	2128      	movs	r1, #40	; 0x28
   33852:	4834      	ldr	r0, [pc, #208]	; (33924 <k_heap_aligned_alloc+0x14c>)
   33854:	f005 ff0c 	bl	39670 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33858:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 33910 <k_heap_aligned_alloc+0x138>
   3385c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 33914 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   33860:	4652      	mov	r2, sl
   33862:	4659      	mov	r1, fp
   33864:	4630      	mov	r0, r6
   33866:	f7ec fb55 	bl	1ff14 <sys_heap_aligned_alloc>
   3386a:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   3386c:	f002 fe8e 	bl	3658c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   33870:	b1cf      	cbz	r7, 338a6 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33872:	4620      	mov	r0, r4
   33874:	f000 fa3a 	bl	33cec <z_spin_unlock_valid>
   33878:	b968      	cbnz	r0, 33896 <k_heap_aligned_alloc+0xbe>
   3387a:	23ac      	movs	r3, #172	; 0xac
   3387c:	4a24      	ldr	r2, [pc, #144]	; (33910 <k_heap_aligned_alloc+0x138>)
   3387e:	492b      	ldr	r1, [pc, #172]	; (3392c <k_heap_aligned_alloc+0x154>)
   33880:	4825      	ldr	r0, [pc, #148]	; (33918 <k_heap_aligned_alloc+0x140>)
   33882:	f005 fc56 	bl	39132 <printk>
   33886:	4621      	mov	r1, r4
   33888:	4829      	ldr	r0, [pc, #164]	; (33930 <k_heap_aligned_alloc+0x158>)
   3388a:	f005 fc52 	bl	39132 <printk>
   3388e:	21ac      	movs	r1, #172	; 0xac
   33890:	481f      	ldr	r0, [pc, #124]	; (33910 <k_heap_aligned_alloc+0x138>)
   33892:	f005 feed 	bl	39670 <assert_post_action>
	__asm__ volatile(
   33896:	f385 8811 	msr	BASEPRI, r5
   3389a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3389e:	4638      	mov	r0, r7
   338a0:	b007      	add	sp, #28
   338a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   338a6:	9b04      	ldr	r3, [sp, #16]
   338a8:	1a1b      	subs	r3, r3, r0
   338aa:	9302      	str	r3, [sp, #8]
   338ac:	9b05      	ldr	r3, [sp, #20]
   338ae:	eb63 0301 	sbc.w	r3, r3, r1
   338b2:	9303      	str	r3, [sp, #12]
   338b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   338b8:	2a01      	cmp	r2, #1
   338ba:	f173 0300 	sbcs.w	r3, r3, #0
   338be:	dbd8      	blt.n	33872 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   338c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   338c4:	4629      	mov	r1, r5
   338c6:	e9cd 2300 	strd	r2, r3, [sp]
   338ca:	4620      	mov	r0, r4
   338cc:	f106 020c 	add.w	r2, r6, #12
   338d0:	f001 fc32 	bl	35138 <z_pend_curr>
	__asm__ volatile(
   338d4:	f04f 0320 	mov.w	r3, #32
   338d8:	f3ef 8511 	mrs	r5, BASEPRI
   338dc:	f383 8811 	msr	BASEPRI, r3
   338e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   338e4:	4620      	mov	r0, r4
   338e6:	f000 f9f3 	bl	33cd0 <z_spin_lock_valid>
   338ea:	b968      	cbnz	r0, 33908 <k_heap_aligned_alloc+0x130>
   338ec:	2381      	movs	r3, #129	; 0x81
   338ee:	4642      	mov	r2, r8
   338f0:	4649      	mov	r1, r9
   338f2:	4809      	ldr	r0, [pc, #36]	; (33918 <k_heap_aligned_alloc+0x140>)
   338f4:	f005 fc1d 	bl	39132 <printk>
   338f8:	4621      	mov	r1, r4
   338fa:	4808      	ldr	r0, [pc, #32]	; (3391c <k_heap_aligned_alloc+0x144>)
   338fc:	f005 fc19 	bl	39132 <printk>
   33900:	2181      	movs	r1, #129	; 0x81
   33902:	4640      	mov	r0, r8
   33904:	f005 feb4 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   33908:	4620      	mov	r0, r4
   3390a:	f000 f9ff 	bl	33d0c <z_spin_lock_set_owner>
	return k;
   3390e:	e7a7      	b.n	33860 <k_heap_aligned_alloc+0x88>
   33910:	00040472 	.word	0x00040472
   33914:	000404c4 	.word	0x000404c4
   33918:	0004033e 	.word	0x0004033e
   3391c:	000404d9 	.word	0x000404d9
   33920:	00045aaf 	.word	0x00045aaf
   33924:	00045a77 	.word	0x00045a77
   33928:	000408e8 	.word	0x000408e8
   3392c:	00040498 	.word	0x00040498
   33930:	000404af 	.word	0x000404af

00033934 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   33934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33936:	4605      	mov	r5, r0
   33938:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3393a:	f100 0414 	add.w	r4, r0, #20
   3393e:	f04f 0320 	mov.w	r3, #32
   33942:	f3ef 8711 	mrs	r7, BASEPRI
   33946:	f383 8811 	msr	BASEPRI, r3
   3394a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3394e:	4620      	mov	r0, r4
   33950:	f000 f9be 	bl	33cd0 <z_spin_lock_valid>
   33954:	b968      	cbnz	r0, 33972 <k_heap_free+0x3e>
   33956:	2381      	movs	r3, #129	; 0x81
   33958:	4a1a      	ldr	r2, [pc, #104]	; (339c4 <k_heap_free+0x90>)
   3395a:	491b      	ldr	r1, [pc, #108]	; (339c8 <k_heap_free+0x94>)
   3395c:	481b      	ldr	r0, [pc, #108]	; (339cc <k_heap_free+0x98>)
   3395e:	f005 fbe8 	bl	39132 <printk>
   33962:	4621      	mov	r1, r4
   33964:	481a      	ldr	r0, [pc, #104]	; (339d0 <k_heap_free+0x9c>)
   33966:	f005 fbe4 	bl	39132 <printk>
   3396a:	2181      	movs	r1, #129	; 0x81
   3396c:	4815      	ldr	r0, [pc, #84]	; (339c4 <k_heap_free+0x90>)
   3396e:	f005 fe7f 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   33972:	4620      	mov	r0, r4
   33974:	f000 f9ca 	bl	33d0c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   33978:	4628      	mov	r0, r5
   3397a:	4631      	mov	r1, r6
   3397c:	f7ec fa74 	bl	1fe68 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   33980:	f105 000c 	add.w	r0, r5, #12
   33984:	f00a fa28 	bl	3ddd8 <z_unpend_all>
   33988:	b128      	cbz	r0, 33996 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   3398a:	4639      	mov	r1, r7
   3398c:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3398e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   33992:	f001 b993 	b.w	34cbc <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33996:	4620      	mov	r0, r4
   33998:	f000 f9a8 	bl	33cec <z_spin_unlock_valid>
   3399c:	b968      	cbnz	r0, 339ba <k_heap_free+0x86>
   3399e:	23ac      	movs	r3, #172	; 0xac
   339a0:	4a08      	ldr	r2, [pc, #32]	; (339c4 <k_heap_free+0x90>)
   339a2:	490c      	ldr	r1, [pc, #48]	; (339d4 <k_heap_free+0xa0>)
   339a4:	4809      	ldr	r0, [pc, #36]	; (339cc <k_heap_free+0x98>)
   339a6:	f005 fbc4 	bl	39132 <printk>
   339aa:	4621      	mov	r1, r4
   339ac:	480a      	ldr	r0, [pc, #40]	; (339d8 <k_heap_free+0xa4>)
   339ae:	f005 fbc0 	bl	39132 <printk>
   339b2:	21ac      	movs	r1, #172	; 0xac
   339b4:	4803      	ldr	r0, [pc, #12]	; (339c4 <k_heap_free+0x90>)
   339b6:	f005 fe5b 	bl	39670 <assert_post_action>
	__asm__ volatile(
   339ba:	f387 8811 	msr	BASEPRI, r7
   339be:	f3bf 8f6f 	isb	sy
}
   339c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   339c4:	00040472 	.word	0x00040472
   339c8:	000404c4 	.word	0x000404c4
   339cc:	0004033e 	.word	0x0004033e
   339d0:	000404d9 	.word	0x000404d9
   339d4:	00040498 	.word	0x00040498
   339d8:	000404af 	.word	0x000404af

000339dc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   339dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   339e0:	4d16      	ldr	r5, [pc, #88]	; (33a3c <init_mem_slab_module+0x60>)
   339e2:	4c17      	ldr	r4, [pc, #92]	; (33a40 <init_mem_slab_module+0x64>)
   339e4:	46a8      	mov	r8, r5
   339e6:	4e17      	ldr	r6, [pc, #92]	; (33a44 <init_mem_slab_module+0x68>)
   339e8:	42ac      	cmp	r4, r5
   339ea:	d90c      	bls.n	33a06 <init_mem_slab_module+0x2a>
   339ec:	4916      	ldr	r1, [pc, #88]	; (33a48 <init_mem_slab_module+0x6c>)
   339ee:	233c      	movs	r3, #60	; 0x3c
   339f0:	4632      	mov	r2, r6
   339f2:	4816      	ldr	r0, [pc, #88]	; (33a4c <init_mem_slab_module+0x70>)
   339f4:	f005 fb9d 	bl	39132 <printk>
   339f8:	4815      	ldr	r0, [pc, #84]	; (33a50 <init_mem_slab_module+0x74>)
   339fa:	f005 fb9a 	bl	39132 <printk>
   339fe:	213c      	movs	r1, #60	; 0x3c
   33a00:	4630      	mov	r0, r6
   33a02:	f005 fe35 	bl	39670 <assert_post_action>
   33a06:	4544      	cmp	r4, r8
   33a08:	d302      	bcc.n	33a10 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   33a0a:	2000      	movs	r0, #0
	return rc;
}
   33a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   33a10:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   33a14:	ea41 0302 	orr.w	r3, r1, r2
   33a18:	f013 0303 	ands.w	r3, r3, #3
   33a1c:	d10b      	bne.n	33a36 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   33a1e:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   33a20:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   33a22:	4283      	cmp	r3, r0
   33a24:	d101      	bne.n	33a2a <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   33a26:	3420      	adds	r4, #32
   33a28:	e7de      	b.n	339e8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   33a2a:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   33a2c:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   33a2e:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   33a30:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   33a32:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   33a34:	e7f5      	b.n	33a22 <init_mem_slab_module+0x46>
		return -EINVAL;
   33a36:	f06f 0015 	mvn.w	r0, #21
	return rc;
   33a3a:	e7e7      	b.n	33a0c <init_mem_slab_module+0x30>
   33a3c:	20014ce4 	.word	0x20014ce4
   33a40:	20014ce4 	.word	0x20014ce4
   33a44:	00045af4 	.word	0x00045af4
   33a48:	00045b19 	.word	0x00045b19
   33a4c:	0004033e 	.word	0x0004033e
   33a50:	00040966 	.word	0x00040966

00033a54 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   33a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33a58:	b085      	sub	sp, #20
   33a5a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   33a5e:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   33a60:	f1b9 0f0f 	cmp.w	r9, #15
{
   33a64:	460f      	mov	r7, r1
   33a66:	4615      	mov	r5, r2
   33a68:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   33a6a:	d12e      	bne.n	33aca <z_setup_new_thread+0x76>
   33a6c:	4b23      	ldr	r3, [pc, #140]	; (33afc <z_setup_new_thread+0xa8>)
   33a6e:	4598      	cmp	r8, r3
   33a70:	d12f      	bne.n	33ad2 <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   33a72:	f104 0358 	add.w	r3, r4, #88	; 0x58
   33a76:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   33a7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   33a7c:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   33a7e:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   33a80:	2304      	movs	r3, #4
   33a82:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   33a86:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33a88:	9302      	str	r3, [sp, #8]
   33a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   33a8c:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33a90:	9301      	str	r3, [sp, #4]
   33a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   33a94:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   33a96:	e9c4 701a 	strd	r7, r0, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33a9a:	9300      	str	r3, [sp, #0]
   33a9c:	462a      	mov	r2, r5
   33a9e:	4643      	mov	r3, r8
   33aa0:	4639      	mov	r1, r7
   33aa2:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   33aa4:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   33aa8:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   33aaa:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   33aae:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   33ab0:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33ab2:	f7ef fbe9 	bl	23288 <arch_new_thread>
	if (!_current) {
   33ab6:	4b12      	ldr	r3, [pc, #72]	; (33b00 <z_setup_new_thread+0xac>)
	new_thread->init_data = NULL;
   33ab8:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   33aba:	689b      	ldr	r3, [r3, #8]
   33abc:	b103      	cbz	r3, 33ac0 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   33abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   33ac0:	4628      	mov	r0, r5
   33ac2:	6763      	str	r3, [r4, #116]	; 0x74
   33ac4:	b005      	add	sp, #20
   33ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   33aca:	f109 0310 	add.w	r3, r9, #16
   33ace:	2b1e      	cmp	r3, #30
   33ad0:	d9cf      	bls.n	33a72 <z_setup_new_thread+0x1e>
   33ad2:	f44f 7302 	mov.w	r3, #520	; 0x208
   33ad6:	4a0b      	ldr	r2, [pc, #44]	; (33b04 <z_setup_new_thread+0xb0>)
   33ad8:	490b      	ldr	r1, [pc, #44]	; (33b08 <z_setup_new_thread+0xb4>)
   33ada:	480c      	ldr	r0, [pc, #48]	; (33b0c <z_setup_new_thread+0xb8>)
   33adc:	f005 fb29 	bl	39132 <printk>
   33ae0:	4649      	mov	r1, r9
   33ae2:	f06f 030f 	mvn.w	r3, #15
   33ae6:	220e      	movs	r2, #14
   33ae8:	4809      	ldr	r0, [pc, #36]	; (33b10 <z_setup_new_thread+0xbc>)
   33aea:	f005 fb22 	bl	39132 <printk>
   33aee:	f44f 7102 	mov.w	r1, #520	; 0x208
   33af2:	4804      	ldr	r0, [pc, #16]	; (33b04 <z_setup_new_thread+0xb0>)
   33af4:	f005 fdbc 	bl	39670 <assert_post_action>
   33af8:	e7bb      	b.n	33a72 <z_setup_new_thread+0x1e>
   33afa:	bf00      	nop
   33afc:	00033d1d 	.word	0x00033d1d
   33b00:	200189dc 	.word	0x200189dc
   33b04:	00045b36 	.word	0x00045b36
   33b08:	00045b59 	.word	0x00045b59
   33b0c:	0004033e 	.word	0x0004033e
   33b10:	00045bd9 	.word	0x00045bd9

00033b14 <z_impl_k_thread_create>:
{
   33b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33b18:	b087      	sub	sp, #28
   33b1a:	4604      	mov	r4, r0
   33b1c:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   33b20:	460d      	mov	r5, r1
   33b22:	4690      	mov	r8, r2
   33b24:	4699      	mov	r9, r3
   33b26:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   33b2a:	b173      	cbz	r3, 33b4a <z_impl_k_thread_create+0x36>
   33b2c:	491b      	ldr	r1, [pc, #108]	; (33b9c <z_impl_k_thread_create+0x88>)
   33b2e:	f240 2371 	movw	r3, #625	; 0x271
   33b32:	4a1b      	ldr	r2, [pc, #108]	; (33ba0 <z_impl_k_thread_create+0x8c>)
   33b34:	481b      	ldr	r0, [pc, #108]	; (33ba4 <z_impl_k_thread_create+0x90>)
   33b36:	f005 fafc 	bl	39132 <printk>
   33b3a:	481b      	ldr	r0, [pc, #108]	; (33ba8 <z_impl_k_thread_create+0x94>)
   33b3c:	f005 faf9 	bl	39132 <printk>
   33b40:	f240 2171 	movw	r1, #625	; 0x271
   33b44:	4816      	ldr	r0, [pc, #88]	; (33ba0 <z_impl_k_thread_create+0x8c>)
   33b46:	f005 fd93 	bl	39670 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   33b4a:	2300      	movs	r3, #0
   33b4c:	9305      	str	r3, [sp, #20]
   33b4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   33b50:	4642      	mov	r2, r8
   33b52:	9304      	str	r3, [sp, #16]
   33b54:	9b11      	ldr	r3, [sp, #68]	; 0x44
   33b56:	4629      	mov	r1, r5
   33b58:	9303      	str	r3, [sp, #12]
   33b5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   33b5c:	4620      	mov	r0, r4
   33b5e:	9302      	str	r3, [sp, #8]
   33b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   33b62:	9301      	str	r3, [sp, #4]
   33b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   33b66:	9300      	str	r3, [sp, #0]
   33b68:	464b      	mov	r3, r9
   33b6a:	f7ff ff73 	bl	33a54 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   33b6e:	1c7b      	adds	r3, r7, #1
   33b70:	bf08      	it	eq
   33b72:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   33b76:	d005      	beq.n	33b84 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   33b78:	ea56 0307 	orrs.w	r3, r6, r7
   33b7c:	d106      	bne.n	33b8c <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   33b7e:	4620      	mov	r0, r4
   33b80:	f001 fd5c 	bl	3563c <z_sched_start>
}
   33b84:	4620      	mov	r0, r4
   33b86:	b007      	add	sp, #28
   33b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   33b8c:	4632      	mov	r2, r6
   33b8e:	463b      	mov	r3, r7
   33b90:	4906      	ldr	r1, [pc, #24]	; (33bac <z_impl_k_thread_create+0x98>)
   33b92:	f104 0018 	add.w	r0, r4, #24
   33b96:	f002 fa75 	bl	36084 <z_add_timeout>
   33b9a:	e7f3      	b.n	33b84 <z_impl_k_thread_create+0x70>
   33b9c:	00045c0a 	.word	0x00045c0a
   33ba0:	00045b36 	.word	0x00045b36
   33ba4:	0004033e 	.word	0x0004033e
   33ba8:	00045c1c 	.word	0x00045c1c
   33bac:	0003578d 	.word	0x0003578d

00033bb0 <z_init_static_threads>:
{
   33bb0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   33bb4:	4f3f      	ldr	r7, [pc, #252]	; (33cb4 <z_init_static_threads+0x104>)
   33bb6:	4d40      	ldr	r5, [pc, #256]	; (33cb8 <z_init_static_threads+0x108>)
   33bb8:	463e      	mov	r6, r7
   33bba:	f8df 810c 	ldr.w	r8, [pc, #268]	; 33cc8 <z_init_static_threads+0x118>
{
   33bbe:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   33bc0:	42bd      	cmp	r5, r7
   33bc2:	d90e      	bls.n	33be2 <z_init_static_threads+0x32>
   33bc4:	493d      	ldr	r1, [pc, #244]	; (33cbc <z_init_static_threads+0x10c>)
   33bc6:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   33bca:	4642      	mov	r2, r8
   33bcc:	483c      	ldr	r0, [pc, #240]	; (33cc0 <z_init_static_threads+0x110>)
   33bce:	f005 fab0 	bl	39132 <printk>
   33bd2:	483c      	ldr	r0, [pc, #240]	; (33cc4 <z_init_static_threads+0x114>)
   33bd4:	f005 faad 	bl	39132 <printk>
   33bd8:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   33bdc:	4640      	mov	r0, r8
   33bde:	f005 fd47 	bl	39670 <assert_post_action>
   33be2:	42b5      	cmp	r5, r6
   33be4:	f105 0430 	add.w	r4, r5, #48	; 0x30
   33be8:	d31f      	bcc.n	33c2a <z_init_static_threads+0x7a>
	k_sched_lock();
   33bea:	f001 f8ab 	bl	34d44 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   33bee:	4c32      	ldr	r4, [pc, #200]	; (33cb8 <z_init_static_threads+0x108>)
   33bf0:	4d35      	ldr	r5, [pc, #212]	; (33cc8 <z_init_static_threads+0x118>)
   33bf2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 33cbc <z_init_static_threads+0x10c>
   33bf6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 33cc0 <z_init_static_threads+0x110>
   33bfa:	42b4      	cmp	r4, r6
   33bfc:	d90e      	bls.n	33c1c <z_init_static_threads+0x6c>
   33bfe:	4641      	mov	r1, r8
   33c00:	f240 23f7 	movw	r3, #759	; 0x2f7
   33c04:	462a      	mov	r2, r5
   33c06:	4648      	mov	r0, r9
   33c08:	f005 fa93 	bl	39132 <printk>
   33c0c:	482d      	ldr	r0, [pc, #180]	; (33cc4 <z_init_static_threads+0x114>)
   33c0e:	f005 fa90 	bl	39132 <printk>
   33c12:	f240 21f7 	movw	r1, #759	; 0x2f7
   33c16:	4628      	mov	r0, r5
   33c18:	f005 fd2a 	bl	39670 <assert_post_action>
   33c1c:	42b4      	cmp	r4, r6
   33c1e:	d321      	bcc.n	33c64 <z_init_static_threads+0xb4>
}
   33c20:	b006      	add	sp, #24
   33c22:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   33c26:	f001 bb21 	b.w	3526c <k_sched_unlock>
		z_setup_new_thread(
   33c2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   33c2e:	9305      	str	r3, [sp, #20]
   33c30:	f854 3c10 	ldr.w	r3, [r4, #-16]
   33c34:	9304      	str	r3, [sp, #16]
   33c36:	f854 3c14 	ldr.w	r3, [r4, #-20]
   33c3a:	9303      	str	r3, [sp, #12]
   33c3c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   33c40:	9302      	str	r3, [sp, #8]
   33c42:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   33c46:	9301      	str	r3, [sp, #4]
   33c48:	f854 3c20 	ldr.w	r3, [r4, #-32]
   33c4c:	9300      	str	r3, [sp, #0]
   33c4e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   33c52:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   33c56:	f7ff fefd 	bl	33a54 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   33c5a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   33c5e:	655d      	str	r5, [r3, #84]	; 0x54
   33c60:	4625      	mov	r5, r4
   33c62:	e7ad      	b.n	33bc0 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   33c64:	6a61      	ldr	r1, [r4, #36]	; 0x24
   33c66:	1c4b      	adds	r3, r1, #1
   33c68:	d014      	beq.n	33c94 <z_init_static_threads+0xe4>
   33c6a:	f240 32e7 	movw	r2, #999	; 0x3e7
   33c6e:	2300      	movs	r3, #0
   33c70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   33c74:	4693      	mov	fp, r2
   33c76:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   33c78:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   33c7c:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   33c80:	459c      	cmp	ip, r3
   33c82:	bf08      	it	eq
   33c84:	4593      	cmpeq	fp, r2
   33c86:	4658      	mov	r0, fp
   33c88:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
   33c8a:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   33c8c:	d104      	bne.n	33c98 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   33c8e:	4638      	mov	r0, r7
   33c90:	f001 fcd4 	bl	3563c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   33c94:	3430      	adds	r4, #48	; 0x30
   33c96:	e7b0      	b.n	33bfa <z_init_static_threads+0x4a>
   33c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   33c9c:	2300      	movs	r3, #0
   33c9e:	f7e9 f903 	bl	1cea8 <__aeabi_uldivmod>
   33ca2:	4602      	mov	r2, r0
   33ca4:	460b      	mov	r3, r1
   33ca6:	f107 0018 	add.w	r0, r7, #24
   33caa:	4908      	ldr	r1, [pc, #32]	; (33ccc <z_init_static_threads+0x11c>)
   33cac:	f002 f9ea 	bl	36084 <z_add_timeout>
   33cb0:	e7f0      	b.n	33c94 <z_init_static_threads+0xe4>
   33cb2:	bf00      	nop
   33cb4:	20014ce4 	.word	0x20014ce4
   33cb8:	20014c24 	.word	0x20014c24
   33cbc:	00045c41 	.word	0x00045c41
   33cc0:	0004033e 	.word	0x0004033e
   33cc4:	00040966 	.word	0x00040966
   33cc8:	00045b36 	.word	0x00045b36
   33ccc:	0003578d 	.word	0x0003578d

00033cd0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   33cd0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   33cd2:	b138      	cbz	r0, 33ce4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   33cd4:	4b04      	ldr	r3, [pc, #16]	; (33ce8 <z_spin_lock_valid+0x18>)
   33cd6:	f000 0003 	and.w	r0, r0, #3
   33cda:	7d1b      	ldrb	r3, [r3, #20]
   33cdc:	1ac0      	subs	r0, r0, r3
   33cde:	bf18      	it	ne
   33ce0:	2001      	movne	r0, #1
   33ce2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   33ce4:	2001      	movs	r0, #1
}
   33ce6:	4770      	bx	lr
   33ce8:	200189dc 	.word	0x200189dc

00033cec <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   33cec:	4a06      	ldr	r2, [pc, #24]	; (33d08 <z_spin_unlock_valid+0x1c>)
   33cee:	7d11      	ldrb	r1, [r2, #20]
   33cf0:	6893      	ldr	r3, [r2, #8]
   33cf2:	6802      	ldr	r2, [r0, #0]
   33cf4:	430b      	orrs	r3, r1
   33cf6:	429a      	cmp	r2, r3
   33cf8:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   33cfc:	bf06      	itte	eq
   33cfe:	6003      	streq	r3, [r0, #0]
	return true;
   33d00:	2001      	moveq	r0, #1
		return false;
   33d02:	4618      	movne	r0, r3
}
   33d04:	4770      	bx	lr
   33d06:	bf00      	nop
   33d08:	200189dc 	.word	0x200189dc

00033d0c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   33d0c:	4a02      	ldr	r2, [pc, #8]	; (33d18 <z_spin_lock_set_owner+0xc>)
   33d0e:	7d11      	ldrb	r1, [r2, #20]
   33d10:	6893      	ldr	r3, [r2, #8]
   33d12:	430b      	orrs	r3, r1
   33d14:	6003      	str	r3, [r0, #0]
}
   33d16:	4770      	bx	lr
   33d18:	200189dc 	.word	0x200189dc

00033d1c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   33d1c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   33d1e:	4c09      	ldr	r4, [pc, #36]	; (33d44 <idle+0x28>)
	__asm__ volatile(
   33d20:	f04f 0220 	mov.w	r2, #32
   33d24:	f3ef 8311 	mrs	r3, BASEPRI
   33d28:	f382 8811 	msr	BASEPRI, r2
   33d2c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   33d30:	f002 faca 	bl	362c8 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   33d34:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   33d36:	f7ee fd61 	bl	227fc <pm_system_suspend>
   33d3a:	2800      	cmp	r0, #0
   33d3c:	d1f0      	bne.n	33d20 <idle+0x4>
	arch_cpu_idle();
   33d3e:	f7ef fae9 	bl	23314 <arch_cpu_idle>
}
   33d42:	e7ed      	b.n	33d20 <idle+0x4>
   33d44:	200189dc 	.word	0x200189dc

00033d48 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   33d48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   33d4c:	4604      	mov	r4, r0
   33d4e:	468a      	mov	sl, r1
   33d50:	4690      	mov	r8, r2
   33d52:	4699      	mov	r9, r3
   33d54:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   33d58:	b17b      	cbz	r3, 33d7a <z_impl_k_msgq_put+0x32>
   33d5a:	ea58 0309 	orrs.w	r3, r8, r9
   33d5e:	d00c      	beq.n	33d7a <z_impl_k_msgq_put+0x32>
   33d60:	4943      	ldr	r1, [pc, #268]	; (33e70 <z_impl_k_msgq_put+0x128>)
   33d62:	2376      	movs	r3, #118	; 0x76
   33d64:	4a43      	ldr	r2, [pc, #268]	; (33e74 <z_impl_k_msgq_put+0x12c>)
   33d66:	4844      	ldr	r0, [pc, #272]	; (33e78 <z_impl_k_msgq_put+0x130>)
   33d68:	f005 f9e3 	bl	39132 <printk>
   33d6c:	4843      	ldr	r0, [pc, #268]	; (33e7c <z_impl_k_msgq_put+0x134>)
   33d6e:	f005 f9e0 	bl	39132 <printk>
   33d72:	2176      	movs	r1, #118	; 0x76
   33d74:	483f      	ldr	r0, [pc, #252]	; (33e74 <z_impl_k_msgq_put+0x12c>)
   33d76:	f005 fc7b 	bl	39670 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   33d7a:	f104 0508 	add.w	r5, r4, #8
   33d7e:	f04f 0320 	mov.w	r3, #32
   33d82:	f3ef 8711 	mrs	r7, BASEPRI
   33d86:	f383 8811 	msr	BASEPRI, r3
   33d8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33d8e:	4628      	mov	r0, r5
   33d90:	f7ff ff9e 	bl	33cd0 <z_spin_lock_valid>
   33d94:	b968      	cbnz	r0, 33db2 <z_impl_k_msgq_put+0x6a>
   33d96:	2381      	movs	r3, #129	; 0x81
   33d98:	4a39      	ldr	r2, [pc, #228]	; (33e80 <z_impl_k_msgq_put+0x138>)
   33d9a:	493a      	ldr	r1, [pc, #232]	; (33e84 <z_impl_k_msgq_put+0x13c>)
   33d9c:	4836      	ldr	r0, [pc, #216]	; (33e78 <z_impl_k_msgq_put+0x130>)
   33d9e:	f005 f9c8 	bl	39132 <printk>
   33da2:	4629      	mov	r1, r5
   33da4:	4838      	ldr	r0, [pc, #224]	; (33e88 <z_impl_k_msgq_put+0x140>)
   33da6:	f005 f9c4 	bl	39132 <printk>
   33daa:	2181      	movs	r1, #129	; 0x81
   33dac:	4834      	ldr	r0, [pc, #208]	; (33e80 <z_impl_k_msgq_put+0x138>)
   33dae:	f005 fc5f 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   33db2:	4628      	mov	r0, r5
   33db4:	f7ff ffaa 	bl	33d0c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   33db8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   33dba:	6923      	ldr	r3, [r4, #16]
   33dbc:	429a      	cmp	r2, r3
   33dbe:	d244      	bcs.n	33e4a <z_impl_k_msgq_put+0x102>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   33dc0:	4620      	mov	r0, r4
   33dc2:	f001 fddd 	bl	35980 <z_unpend_first_thread>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   33dc6:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   33dc8:	4606      	mov	r6, r0
   33dca:	68e2      	ldr	r2, [r4, #12]
   33dcc:	b178      	cbz	r0, 33dee <z_impl_k_msgq_put+0xa6>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   33dce:	2400      	movs	r4, #0
   33dd0:	6940      	ldr	r0, [r0, #20]
   33dd2:	f00a f8ca 	bl	3df6a <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   33dd6:	4630      	mov	r0, r6
   33dd8:	67f4      	str	r4, [r6, #124]	; 0x7c
   33dda:	f001 fbe7 	bl	355ac <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   33dde:	4639      	mov	r1, r7
   33de0:	4628      	mov	r0, r5
   33de2:	f000 ff6b 	bl	34cbc <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   33de6:	4620      	mov	r0, r4
   33de8:	b002      	add	sp, #8
   33dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33dee:	6a20      	ldr	r0, [r4, #32]
   33df0:	f00a f8bb 	bl	3df6a <memcpy>
			msgq->write_ptr += msgq->msg_size;
   33df4:	6a23      	ldr	r3, [r4, #32]
   33df6:	68e2      	ldr	r2, [r4, #12]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   33df8:	f104 0028 	add.w	r0, r4, #40	; 0x28
			msgq->write_ptr += msgq->msg_size;
   33dfc:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   33dfe:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   33e00:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   33e02:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   33e04:	bf08      	it	eq
   33e06:	6963      	ldreq	r3, [r4, #20]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   33e08:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   33e0c:	bf08      	it	eq
   33e0e:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   33e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33e12:	3301      	adds	r3, #1
   33e14:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   33e16:	f00a f857 	bl	3dec8 <z_handle_obj_poll_events>
		result = 0;
   33e1a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33e1c:	4628      	mov	r0, r5
   33e1e:	f7ff ff65 	bl	33cec <z_spin_unlock_valid>
   33e22:	b968      	cbnz	r0, 33e40 <z_impl_k_msgq_put+0xf8>
   33e24:	23ac      	movs	r3, #172	; 0xac
   33e26:	4a16      	ldr	r2, [pc, #88]	; (33e80 <z_impl_k_msgq_put+0x138>)
   33e28:	4918      	ldr	r1, [pc, #96]	; (33e8c <z_impl_k_msgq_put+0x144>)
   33e2a:	4813      	ldr	r0, [pc, #76]	; (33e78 <z_impl_k_msgq_put+0x130>)
   33e2c:	f005 f981 	bl	39132 <printk>
   33e30:	4629      	mov	r1, r5
   33e32:	4817      	ldr	r0, [pc, #92]	; (33e90 <z_impl_k_msgq_put+0x148>)
   33e34:	f005 f97d 	bl	39132 <printk>
   33e38:	21ac      	movs	r1, #172	; 0xac
   33e3a:	4811      	ldr	r0, [pc, #68]	; (33e80 <z_impl_k_msgq_put+0x138>)
   33e3c:	f005 fc18 	bl	39670 <assert_post_action>
	__asm__ volatile(
   33e40:	f387 8811 	msr	BASEPRI, r7
   33e44:	f3bf 8f6f 	isb	sy
	return result;
   33e48:	e7cd      	b.n	33de6 <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   33e4a:	ea58 0309 	orrs.w	r3, r8, r9
   33e4e:	d00c      	beq.n	33e6a <z_impl_k_msgq_put+0x122>
		_current->base.swap_data = (void *) data;
   33e50:	4b10      	ldr	r3, [pc, #64]	; (33e94 <z_impl_k_msgq_put+0x14c>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33e52:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   33e54:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33e56:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   33e58:	f8c3 a014 	str.w	sl, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33e5c:	4628      	mov	r0, r5
   33e5e:	e9cd 8900 	strd	r8, r9, [sp]
   33e62:	f001 f969 	bl	35138 <z_pend_curr>
   33e66:	4604      	mov	r4, r0
		return result;
   33e68:	e7bd      	b.n	33de6 <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   33e6a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   33e6e:	e7d5      	b.n	33e1c <z_impl_k_msgq_put+0xd4>
   33e70:	00045aaf 	.word	0x00045aaf
   33e74:	00045c6e 	.word	0x00045c6e
   33e78:	0004033e 	.word	0x0004033e
   33e7c:	000408e8 	.word	0x000408e8
   33e80:	00040472 	.word	0x00040472
   33e84:	000404c4 	.word	0x000404c4
   33e88:	000404d9 	.word	0x000404d9
   33e8c:	00040498 	.word	0x00040498
   33e90:	000404af 	.word	0x000404af
   33e94:	200189dc 	.word	0x200189dc

00033e98 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   33e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   33e9c:	4604      	mov	r4, r0
   33e9e:	460d      	mov	r5, r1
   33ea0:	4690      	mov	r8, r2
   33ea2:	4699      	mov	r9, r3
   33ea4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   33ea8:	b17b      	cbz	r3, 33eca <z_impl_k_msgq_get+0x32>
   33eaa:	ea58 0309 	orrs.w	r3, r8, r9
   33eae:	d00c      	beq.n	33eca <z_impl_k_msgq_get+0x32>
   33eb0:	4946      	ldr	r1, [pc, #280]	; (33fcc <z_impl_k_msgq_get+0x134>)
   33eb2:	23d0      	movs	r3, #208	; 0xd0
   33eb4:	4a46      	ldr	r2, [pc, #280]	; (33fd0 <z_impl_k_msgq_get+0x138>)
   33eb6:	4847      	ldr	r0, [pc, #284]	; (33fd4 <z_impl_k_msgq_get+0x13c>)
   33eb8:	f005 f93b 	bl	39132 <printk>
   33ebc:	4846      	ldr	r0, [pc, #280]	; (33fd8 <z_impl_k_msgq_get+0x140>)
   33ebe:	f005 f938 	bl	39132 <printk>
   33ec2:	21d0      	movs	r1, #208	; 0xd0
   33ec4:	4842      	ldr	r0, [pc, #264]	; (33fd0 <z_impl_k_msgq_get+0x138>)
   33ec6:	f005 fbd3 	bl	39670 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   33eca:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   33ece:	f04f 0320 	mov.w	r3, #32
   33ed2:	f3ef 8711 	mrs	r7, BASEPRI
   33ed6:	f383 8811 	msr	BASEPRI, r3
   33eda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33ede:	4630      	mov	r0, r6
   33ee0:	f7ff fef6 	bl	33cd0 <z_spin_lock_valid>
   33ee4:	b968      	cbnz	r0, 33f02 <z_impl_k_msgq_get+0x6a>
   33ee6:	2381      	movs	r3, #129	; 0x81
   33ee8:	4a3c      	ldr	r2, [pc, #240]	; (33fdc <z_impl_k_msgq_get+0x144>)
   33eea:	493d      	ldr	r1, [pc, #244]	; (33fe0 <z_impl_k_msgq_get+0x148>)
   33eec:	4839      	ldr	r0, [pc, #228]	; (33fd4 <z_impl_k_msgq_get+0x13c>)
   33eee:	f005 f920 	bl	39132 <printk>
   33ef2:	4631      	mov	r1, r6
   33ef4:	483b      	ldr	r0, [pc, #236]	; (33fe4 <z_impl_k_msgq_get+0x14c>)
   33ef6:	f005 f91c 	bl	39132 <printk>
   33efa:	2181      	movs	r1, #129	; 0x81
   33efc:	4837      	ldr	r0, [pc, #220]	; (33fdc <z_impl_k_msgq_get+0x144>)
   33efe:	f005 fbb7 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   33f02:	4630      	mov	r0, r6
   33f04:	f7ff ff02 	bl	33d0c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   33f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33f0a:	2b00      	cmp	r3, #0
   33f0c:	d035      	beq.n	33f7a <z_impl_k_msgq_get+0xe2>
   33f0e:	4628      	mov	r0, r5
   33f10:	68e2      	ldr	r2, [r4, #12]
   33f12:	69e1      	ldr	r1, [r4, #28]
   33f14:	f00a f829 	bl	3df6a <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   33f18:	69e3      	ldr	r3, [r4, #28]
   33f1a:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   33f1c:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   33f1e:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   33f20:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   33f22:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   33f24:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   33f26:	bf04      	itt	eq
   33f28:	6963      	ldreq	r3, [r4, #20]
   33f2a:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   33f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33f2e:	3b01      	subs	r3, #1
   33f30:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   33f32:	f001 fd25 	bl	35980 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   33f36:	4605      	mov	r5, r0
   33f38:	2800      	cmp	r0, #0
   33f3a:	d02f      	beq.n	33f9c <z_impl_k_msgq_get+0x104>
   33f3c:	6941      	ldr	r1, [r0, #20]
   33f3e:	68e2      	ldr	r2, [r4, #12]
   33f40:	6a20      	ldr	r0, [r4, #32]
   33f42:	f00a f812 	bl	3df6a <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   33f46:	6a23      	ldr	r3, [r4, #32]
   33f48:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   33f4a:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   33f4c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   33f4e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   33f50:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   33f52:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   33f54:	bf04      	itt	eq
   33f56:	6963      	ldreq	r3, [r4, #20]
   33f58:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   33f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33f5c:	3301      	adds	r3, #1
   33f5e:	6263      	str	r3, [r4, #36]	; 0x24
   33f60:	2400      	movs	r4, #0
   33f62:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   33f64:	f001 fb22 	bl	355ac <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   33f68:	4639      	mov	r1, r7
   33f6a:	4630      	mov	r0, r6
   33f6c:	f000 fea6 	bl	34cbc <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   33f70:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   33f72:	4628      	mov	r0, r5
   33f74:	b003      	add	sp, #12
   33f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   33f7a:	ea58 0309 	orrs.w	r3, r8, r9
   33f7e:	d00b      	beq.n	33f98 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
   33f80:	4b19      	ldr	r3, [pc, #100]	; (33fe8 <z_impl_k_msgq_get+0x150>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33f82:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   33f84:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33f86:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   33f88:	615d      	str	r5, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33f8a:	4630      	mov	r0, r6
   33f8c:	e9cd 8900 	strd	r8, r9, [sp]
   33f90:	f001 f8d2 	bl	35138 <z_pend_curr>
   33f94:	4605      	mov	r5, r0
		return result;
   33f96:	e7ec      	b.n	33f72 <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   33f98:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33f9c:	4630      	mov	r0, r6
   33f9e:	f7ff fea5 	bl	33cec <z_spin_unlock_valid>
   33fa2:	b968      	cbnz	r0, 33fc0 <z_impl_k_msgq_get+0x128>
   33fa4:	23ac      	movs	r3, #172	; 0xac
   33fa6:	4a0d      	ldr	r2, [pc, #52]	; (33fdc <z_impl_k_msgq_get+0x144>)
   33fa8:	4910      	ldr	r1, [pc, #64]	; (33fec <z_impl_k_msgq_get+0x154>)
   33faa:	480a      	ldr	r0, [pc, #40]	; (33fd4 <z_impl_k_msgq_get+0x13c>)
   33fac:	f005 f8c1 	bl	39132 <printk>
   33fb0:	4631      	mov	r1, r6
   33fb2:	480f      	ldr	r0, [pc, #60]	; (33ff0 <z_impl_k_msgq_get+0x158>)
   33fb4:	f005 f8bd 	bl	39132 <printk>
   33fb8:	21ac      	movs	r1, #172	; 0xac
   33fba:	4808      	ldr	r0, [pc, #32]	; (33fdc <z_impl_k_msgq_get+0x144>)
   33fbc:	f005 fb58 	bl	39670 <assert_post_action>
	__asm__ volatile(
   33fc0:	f387 8811 	msr	BASEPRI, r7
   33fc4:	f3bf 8f6f 	isb	sy
	return result;
   33fc8:	e7d3      	b.n	33f72 <z_impl_k_msgq_get+0xda>
   33fca:	bf00      	nop
   33fcc:	00045aaf 	.word	0x00045aaf
   33fd0:	00045c6e 	.word	0x00045c6e
   33fd4:	0004033e 	.word	0x0004033e
   33fd8:	000408e8 	.word	0x000408e8
   33fdc:	00040472 	.word	0x00040472
   33fe0:	000404c4 	.word	0x000404c4
   33fe4:	000404d9 	.word	0x000404d9
   33fe8:	200189dc 	.word	0x200189dc
   33fec:	00040498 	.word	0x00040498
   33ff0:	000404af 	.word	0x000404af

00033ff4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   33ff4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   33ff8:	4604      	mov	r4, r0
   33ffa:	4616      	mov	r6, r2
   33ffc:	461f      	mov	r7, r3
   33ffe:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   34002:	b163      	cbz	r3, 3401e <z_impl_k_mutex_lock+0x2a>
   34004:	496d      	ldr	r1, [pc, #436]	; (341bc <z_impl_k_mutex_lock+0x1c8>)
   34006:	2365      	movs	r3, #101	; 0x65
   34008:	4a6d      	ldr	r2, [pc, #436]	; (341c0 <z_impl_k_mutex_lock+0x1cc>)
   3400a:	486e      	ldr	r0, [pc, #440]	; (341c4 <z_impl_k_mutex_lock+0x1d0>)
   3400c:	f005 f891 	bl	39132 <printk>
   34010:	486d      	ldr	r0, [pc, #436]	; (341c8 <z_impl_k_mutex_lock+0x1d4>)
   34012:	f005 f88e 	bl	39132 <printk>
   34016:	2165      	movs	r1, #101	; 0x65
   34018:	4869      	ldr	r0, [pc, #420]	; (341c0 <z_impl_k_mutex_lock+0x1cc>)
   3401a:	f005 fb29 	bl	39670 <assert_post_action>
	__asm__ volatile(
   3401e:	f04f 0320 	mov.w	r3, #32
   34022:	f3ef 8811 	mrs	r8, BASEPRI
   34026:	f383 8811 	msr	BASEPRI, r3
   3402a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3402e:	4867      	ldr	r0, [pc, #412]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   34030:	f7ff fe4e 	bl	33cd0 <z_spin_lock_valid>
   34034:	b968      	cbnz	r0, 34052 <z_impl_k_mutex_lock+0x5e>
   34036:	2381      	movs	r3, #129	; 0x81
   34038:	4a65      	ldr	r2, [pc, #404]	; (341d0 <z_impl_k_mutex_lock+0x1dc>)
   3403a:	4966      	ldr	r1, [pc, #408]	; (341d4 <z_impl_k_mutex_lock+0x1e0>)
   3403c:	4861      	ldr	r0, [pc, #388]	; (341c4 <z_impl_k_mutex_lock+0x1d0>)
   3403e:	f005 f878 	bl	39132 <printk>
   34042:	4962      	ldr	r1, [pc, #392]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   34044:	4864      	ldr	r0, [pc, #400]	; (341d8 <z_impl_k_mutex_lock+0x1e4>)
   34046:	f005 f874 	bl	39132 <printk>
   3404a:	2181      	movs	r1, #129	; 0x81
   3404c:	4860      	ldr	r0, [pc, #384]	; (341d0 <z_impl_k_mutex_lock+0x1dc>)
   3404e:	f005 fb0f 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   34052:	485e      	ldr	r0, [pc, #376]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   34054:	f7ff fe5a 	bl	33d0c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   34058:	68e3      	ldr	r3, [r4, #12]
   3405a:	4a60      	ldr	r2, [pc, #384]	; (341dc <z_impl_k_mutex_lock+0x1e8>)
   3405c:	b1fb      	cbz	r3, 3409e <z_impl_k_mutex_lock+0xaa>
   3405e:	68a0      	ldr	r0, [r4, #8]
   34060:	6891      	ldr	r1, [r2, #8]
   34062:	4288      	cmp	r0, r1
   34064:	d03d      	beq.n	340e2 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   34066:	ea56 0307 	orrs.w	r3, r6, r7
   3406a:	d13c      	bne.n	340e6 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3406c:	4857      	ldr	r0, [pc, #348]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   3406e:	f7ff fe3d 	bl	33cec <z_spin_unlock_valid>
   34072:	b968      	cbnz	r0, 34090 <z_impl_k_mutex_lock+0x9c>
   34074:	23ac      	movs	r3, #172	; 0xac
   34076:	4a56      	ldr	r2, [pc, #344]	; (341d0 <z_impl_k_mutex_lock+0x1dc>)
   34078:	4959      	ldr	r1, [pc, #356]	; (341e0 <z_impl_k_mutex_lock+0x1ec>)
   3407a:	4852      	ldr	r0, [pc, #328]	; (341c4 <z_impl_k_mutex_lock+0x1d0>)
   3407c:	f005 f859 	bl	39132 <printk>
   34080:	4952      	ldr	r1, [pc, #328]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   34082:	4858      	ldr	r0, [pc, #352]	; (341e4 <z_impl_k_mutex_lock+0x1f0>)
   34084:	f005 f855 	bl	39132 <printk>
   34088:	21ac      	movs	r1, #172	; 0xac
   3408a:	4851      	ldr	r0, [pc, #324]	; (341d0 <z_impl_k_mutex_lock+0x1dc>)
   3408c:	f005 faf0 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34090:	f388 8811 	msr	BASEPRI, r8
   34094:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   34098:	f06f 000f 	mvn.w	r0, #15
   3409c:	e01e      	b.n	340dc <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   3409e:	6891      	ldr	r1, [r2, #8]
   340a0:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   340a4:	3301      	adds	r3, #1
   340a6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   340a8:	6893      	ldr	r3, [r2, #8]
   340aa:	4848      	ldr	r0, [pc, #288]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   340ac:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   340ae:	60a3      	str	r3, [r4, #8]
   340b0:	f7ff fe1c 	bl	33cec <z_spin_unlock_valid>
   340b4:	b968      	cbnz	r0, 340d2 <z_impl_k_mutex_lock+0xde>
   340b6:	23ac      	movs	r3, #172	; 0xac
   340b8:	4a45      	ldr	r2, [pc, #276]	; (341d0 <z_impl_k_mutex_lock+0x1dc>)
   340ba:	4949      	ldr	r1, [pc, #292]	; (341e0 <z_impl_k_mutex_lock+0x1ec>)
   340bc:	4841      	ldr	r0, [pc, #260]	; (341c4 <z_impl_k_mutex_lock+0x1d0>)
   340be:	f005 f838 	bl	39132 <printk>
   340c2:	4942      	ldr	r1, [pc, #264]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   340c4:	4847      	ldr	r0, [pc, #284]	; (341e4 <z_impl_k_mutex_lock+0x1f0>)
   340c6:	f005 f834 	bl	39132 <printk>
   340ca:	21ac      	movs	r1, #172	; 0xac
   340cc:	4840      	ldr	r0, [pc, #256]	; (341d0 <z_impl_k_mutex_lock+0x1dc>)
   340ce:	f005 facf 	bl	39670 <assert_post_action>
   340d2:	f388 8811 	msr	BASEPRI, r8
   340d6:	f3bf 8f6f 	isb	sy
		return 0;
   340da:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   340dc:	b002      	add	sp, #8
   340de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   340e2:	6921      	ldr	r1, [r4, #16]
   340e4:	e7de      	b.n	340a4 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   340e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   340ea:	f991 100e 	ldrsb.w	r1, [r1, #14]
   340ee:	4299      	cmp	r1, r3
   340f0:	bfa8      	it	ge
   340f2:	4619      	movge	r1, r3
   340f4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   340f8:	428b      	cmp	r3, r1
   340fa:	dd41      	ble.n	34180 <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
   340fc:	f001 fba2 	bl	35844 <z_set_prio>
   34100:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   34102:	4622      	mov	r2, r4
   34104:	4641      	mov	r1, r8
   34106:	e9cd 6700 	strd	r6, r7, [sp]
   3410a:	4830      	ldr	r0, [pc, #192]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   3410c:	f001 f814 	bl	35138 <z_pend_curr>
	if (got_mutex == 0) {
   34110:	2800      	cmp	r0, #0
   34112:	d0e3      	beq.n	340dc <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   34114:	f04f 0320 	mov.w	r3, #32
   34118:	f3ef 8611 	mrs	r6, BASEPRI
   3411c:	f383 8811 	msr	BASEPRI, r3
   34120:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34124:	4829      	ldr	r0, [pc, #164]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   34126:	f7ff fdd3 	bl	33cd0 <z_spin_lock_valid>
   3412a:	b968      	cbnz	r0, 34148 <z_impl_k_mutex_lock+0x154>
   3412c:	2381      	movs	r3, #129	; 0x81
   3412e:	4a28      	ldr	r2, [pc, #160]	; (341d0 <z_impl_k_mutex_lock+0x1dc>)
   34130:	4928      	ldr	r1, [pc, #160]	; (341d4 <z_impl_k_mutex_lock+0x1e0>)
   34132:	4824      	ldr	r0, [pc, #144]	; (341c4 <z_impl_k_mutex_lock+0x1d0>)
   34134:	f004 fffd 	bl	39132 <printk>
   34138:	4924      	ldr	r1, [pc, #144]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   3413a:	4827      	ldr	r0, [pc, #156]	; (341d8 <z_impl_k_mutex_lock+0x1e4>)
   3413c:	f004 fff9 	bl	39132 <printk>
   34140:	2181      	movs	r1, #129	; 0x81
   34142:	4823      	ldr	r0, [pc, #140]	; (341d0 <z_impl_k_mutex_lock+0x1dc>)
   34144:	f005 fa94 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   34148:	4820      	ldr	r0, [pc, #128]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   3414a:	f7ff fddf 	bl	33d0c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   3414e:	6823      	ldr	r3, [r4, #0]
   34150:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34152:	429c      	cmp	r4, r3
   34154:	d007      	beq.n	34166 <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   34156:	b133      	cbz	r3, 34166 <z_impl_k_mutex_lock+0x172>
   34158:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3415c:	4299      	cmp	r1, r3
   3415e:	bfa8      	it	ge
   34160:	4619      	movge	r1, r3
   34162:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   34166:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   34168:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3416c:	4299      	cmp	r1, r3
   3416e:	d109      	bne.n	34184 <z_impl_k_mutex_lock+0x190>
	if (resched) {
   34170:	b16d      	cbz	r5, 3418e <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
   34172:	4631      	mov	r1, r6
   34174:	4815      	ldr	r0, [pc, #84]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   34176:	f000 fda1 	bl	34cbc <z_reschedule>
	return -EAGAIN;
   3417a:	f06f 000a 	mvn.w	r0, #10
   3417e:	e7ad      	b.n	340dc <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   34180:	2500      	movs	r5, #0
   34182:	e7be      	b.n	34102 <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   34184:	f001 fb5e 	bl	35844 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   34188:	2800      	cmp	r0, #0
   3418a:	d1f2      	bne.n	34172 <z_impl_k_mutex_lock+0x17e>
   3418c:	e7f0      	b.n	34170 <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3418e:	480f      	ldr	r0, [pc, #60]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   34190:	f7ff fdac 	bl	33cec <z_spin_unlock_valid>
   34194:	b968      	cbnz	r0, 341b2 <z_impl_k_mutex_lock+0x1be>
   34196:	23ac      	movs	r3, #172	; 0xac
   34198:	4a0d      	ldr	r2, [pc, #52]	; (341d0 <z_impl_k_mutex_lock+0x1dc>)
   3419a:	4911      	ldr	r1, [pc, #68]	; (341e0 <z_impl_k_mutex_lock+0x1ec>)
   3419c:	4809      	ldr	r0, [pc, #36]	; (341c4 <z_impl_k_mutex_lock+0x1d0>)
   3419e:	f004 ffc8 	bl	39132 <printk>
   341a2:	490a      	ldr	r1, [pc, #40]	; (341cc <z_impl_k_mutex_lock+0x1d8>)
   341a4:	480f      	ldr	r0, [pc, #60]	; (341e4 <z_impl_k_mutex_lock+0x1f0>)
   341a6:	f004 ffc4 	bl	39132 <printk>
   341aa:	21ac      	movs	r1, #172	; 0xac
   341ac:	4808      	ldr	r0, [pc, #32]	; (341d0 <z_impl_k_mutex_lock+0x1dc>)
   341ae:	f005 fa5f 	bl	39670 <assert_post_action>
	__asm__ volatile(
   341b2:	f386 8811 	msr	BASEPRI, r6
   341b6:	f3bf 8f6f 	isb	sy
   341ba:	e7de      	b.n	3417a <z_impl_k_mutex_lock+0x186>
   341bc:	00045c0a 	.word	0x00045c0a
   341c0:	00045c90 	.word	0x00045c90
   341c4:	0004033e 	.word	0x0004033e
   341c8:	00045cb2 	.word	0x00045cb2
   341cc:	20018a10 	.word	0x20018a10
   341d0:	00040472 	.word	0x00040472
   341d4:	000404c4 	.word	0x000404c4
   341d8:	000404d9 	.word	0x000404d9
   341dc:	200189dc 	.word	0x200189dc
   341e0:	00040498 	.word	0x00040498
   341e4:	000404af 	.word	0x000404af

000341e8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   341e8:	b538      	push	{r3, r4, r5, lr}
   341ea:	4604      	mov	r4, r0
   341ec:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   341f0:	b163      	cbz	r3, 3420c <z_impl_k_mutex_unlock+0x24>
   341f2:	4952      	ldr	r1, [pc, #328]	; (3433c <z_impl_k_mutex_unlock+0x154>)
   341f4:	23c7      	movs	r3, #199	; 0xc7
   341f6:	4a52      	ldr	r2, [pc, #328]	; (34340 <z_impl_k_mutex_unlock+0x158>)
   341f8:	4852      	ldr	r0, [pc, #328]	; (34344 <z_impl_k_mutex_unlock+0x15c>)
   341fa:	f004 ff9a 	bl	39132 <printk>
   341fe:	4852      	ldr	r0, [pc, #328]	; (34348 <z_impl_k_mutex_unlock+0x160>)
   34200:	f004 ff97 	bl	39132 <printk>
   34204:	21c7      	movs	r1, #199	; 0xc7
   34206:	484e      	ldr	r0, [pc, #312]	; (34340 <z_impl_k_mutex_unlock+0x158>)
   34208:	f005 fa32 	bl	39670 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   3420c:	68a3      	ldr	r3, [r4, #8]
   3420e:	2b00      	cmp	r3, #0
   34210:	f000 808d 	beq.w	3432e <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   34214:	4d4d      	ldr	r5, [pc, #308]	; (3434c <z_impl_k_mutex_unlock+0x164>)
   34216:	68aa      	ldr	r2, [r5, #8]
   34218:	4293      	cmp	r3, r2
   3421a:	f040 808b 	bne.w	34334 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   3421e:	68e3      	ldr	r3, [r4, #12]
   34220:	b94b      	cbnz	r3, 34236 <z_impl_k_mutex_unlock+0x4e>
   34222:	494b      	ldr	r1, [pc, #300]	; (34350 <z_impl_k_mutex_unlock+0x168>)
   34224:	4847      	ldr	r0, [pc, #284]	; (34344 <z_impl_k_mutex_unlock+0x15c>)
   34226:	23df      	movs	r3, #223	; 0xdf
   34228:	4a45      	ldr	r2, [pc, #276]	; (34340 <z_impl_k_mutex_unlock+0x158>)
   3422a:	f004 ff82 	bl	39132 <printk>
   3422e:	21df      	movs	r1, #223	; 0xdf
   34230:	4843      	ldr	r0, [pc, #268]	; (34340 <z_impl_k_mutex_unlock+0x158>)
   34232:	f005 fa1d 	bl	39670 <assert_post_action>
   34236:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   3423a:	b163      	cbz	r3, 34256 <z_impl_k_mutex_unlock+0x6e>
   3423c:	493f      	ldr	r1, [pc, #252]	; (3433c <z_impl_k_mutex_unlock+0x154>)
   3423e:	23fe      	movs	r3, #254	; 0xfe
   34240:	4a44      	ldr	r2, [pc, #272]	; (34354 <z_impl_k_mutex_unlock+0x16c>)
   34242:	4840      	ldr	r0, [pc, #256]	; (34344 <z_impl_k_mutex_unlock+0x15c>)
   34244:	f004 ff75 	bl	39132 <printk>
   34248:	4843      	ldr	r0, [pc, #268]	; (34358 <z_impl_k_mutex_unlock+0x170>)
   3424a:	f004 ff72 	bl	39132 <printk>
   3424e:	21fe      	movs	r1, #254	; 0xfe
   34250:	4840      	ldr	r0, [pc, #256]	; (34354 <z_impl_k_mutex_unlock+0x16c>)
   34252:	f005 fa0d 	bl	39670 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   34256:	68ab      	ldr	r3, [r5, #8]
   34258:	7bdb      	ldrb	r3, [r3, #15]
   3425a:	2b01      	cmp	r3, #1
   3425c:	d10c      	bne.n	34278 <z_impl_k_mutex_unlock+0x90>
   3425e:	493f      	ldr	r1, [pc, #252]	; (3435c <z_impl_k_mutex_unlock+0x174>)
   34260:	23ff      	movs	r3, #255	; 0xff
   34262:	4a3c      	ldr	r2, [pc, #240]	; (34354 <z_impl_k_mutex_unlock+0x16c>)
   34264:	4837      	ldr	r0, [pc, #220]	; (34344 <z_impl_k_mutex_unlock+0x15c>)
   34266:	f004 ff64 	bl	39132 <printk>
   3426a:	483b      	ldr	r0, [pc, #236]	; (34358 <z_impl_k_mutex_unlock+0x170>)
   3426c:	f004 ff61 	bl	39132 <printk>
   34270:	21ff      	movs	r1, #255	; 0xff
   34272:	4838      	ldr	r0, [pc, #224]	; (34354 <z_impl_k_mutex_unlock+0x16c>)
   34274:	f005 f9fc 	bl	39670 <assert_post_action>

	--_current->base.sched_locked;
   34278:	68aa      	ldr	r2, [r5, #8]
   3427a:	7bd3      	ldrb	r3, [r2, #15]
   3427c:	3b01      	subs	r3, #1
   3427e:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   34280:	68e3      	ldr	r3, [r4, #12]
   34282:	2b01      	cmp	r3, #1
   34284:	d005      	beq.n	34292 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   34286:	3b01      	subs	r3, #1
   34288:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   3428a:	f000 ffef 	bl	3526c <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   3428e:	2000      	movs	r0, #0
}
   34290:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   34292:	f04f 0320 	mov.w	r3, #32
   34296:	f3ef 8511 	mrs	r5, BASEPRI
   3429a:	f383 8811 	msr	BASEPRI, r3
   3429e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   342a2:	482f      	ldr	r0, [pc, #188]	; (34360 <z_impl_k_mutex_unlock+0x178>)
   342a4:	f7ff fd14 	bl	33cd0 <z_spin_lock_valid>
   342a8:	b968      	cbnz	r0, 342c6 <z_impl_k_mutex_unlock+0xde>
   342aa:	2381      	movs	r3, #129	; 0x81
   342ac:	4a2d      	ldr	r2, [pc, #180]	; (34364 <z_impl_k_mutex_unlock+0x17c>)
   342ae:	492e      	ldr	r1, [pc, #184]	; (34368 <z_impl_k_mutex_unlock+0x180>)
   342b0:	4824      	ldr	r0, [pc, #144]	; (34344 <z_impl_k_mutex_unlock+0x15c>)
   342b2:	f004 ff3e 	bl	39132 <printk>
   342b6:	492a      	ldr	r1, [pc, #168]	; (34360 <z_impl_k_mutex_unlock+0x178>)
   342b8:	482c      	ldr	r0, [pc, #176]	; (3436c <z_impl_k_mutex_unlock+0x184>)
   342ba:	f004 ff3a 	bl	39132 <printk>
   342be:	2181      	movs	r1, #129	; 0x81
   342c0:	4828      	ldr	r0, [pc, #160]	; (34364 <z_impl_k_mutex_unlock+0x17c>)
   342c2:	f005 f9d5 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   342c6:	4826      	ldr	r0, [pc, #152]	; (34360 <z_impl_k_mutex_unlock+0x178>)
   342c8:	f7ff fd20 	bl	33d0c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   342cc:	68a0      	ldr	r0, [r4, #8]
   342ce:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   342d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   342d4:	4299      	cmp	r1, r3
   342d6:	d001      	beq.n	342dc <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   342d8:	f001 fab4 	bl	35844 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   342dc:	4620      	mov	r0, r4
   342de:	f001 fb4f 	bl	35980 <z_unpend_first_thread>
	mutex->owner = new_owner;
   342e2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   342e4:	b158      	cbz	r0, 342fe <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   342e6:	f990 200e 	ldrsb.w	r2, [r0, #14]
   342ea:	6122      	str	r2, [r4, #16]
   342ec:	2200      	movs	r2, #0
   342ee:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   342f0:	f001 f95c 	bl	355ac <z_ready_thread>
		z_reschedule(&lock, key);
   342f4:	4629      	mov	r1, r5
   342f6:	481a      	ldr	r0, [pc, #104]	; (34360 <z_impl_k_mutex_unlock+0x178>)
   342f8:	f000 fce0 	bl	34cbc <z_reschedule>
   342fc:	e7c5      	b.n	3428a <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   342fe:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34300:	4817      	ldr	r0, [pc, #92]	; (34360 <z_impl_k_mutex_unlock+0x178>)
   34302:	f7ff fcf3 	bl	33cec <z_spin_unlock_valid>
   34306:	b968      	cbnz	r0, 34324 <z_impl_k_mutex_unlock+0x13c>
   34308:	23ac      	movs	r3, #172	; 0xac
   3430a:	4a16      	ldr	r2, [pc, #88]	; (34364 <z_impl_k_mutex_unlock+0x17c>)
   3430c:	4918      	ldr	r1, [pc, #96]	; (34370 <z_impl_k_mutex_unlock+0x188>)
   3430e:	480d      	ldr	r0, [pc, #52]	; (34344 <z_impl_k_mutex_unlock+0x15c>)
   34310:	f004 ff0f 	bl	39132 <printk>
   34314:	4912      	ldr	r1, [pc, #72]	; (34360 <z_impl_k_mutex_unlock+0x178>)
   34316:	4817      	ldr	r0, [pc, #92]	; (34374 <z_impl_k_mutex_unlock+0x18c>)
   34318:	f004 ff0b 	bl	39132 <printk>
   3431c:	21ac      	movs	r1, #172	; 0xac
   3431e:	4811      	ldr	r0, [pc, #68]	; (34364 <z_impl_k_mutex_unlock+0x17c>)
   34320:	f005 f9a6 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34324:	f385 8811 	msr	BASEPRI, r5
   34328:	f3bf 8f6f 	isb	sy
   3432c:	e7ad      	b.n	3428a <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   3432e:	f06f 0015 	mvn.w	r0, #21
   34332:	e7ad      	b.n	34290 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   34334:	f04f 30ff 	mov.w	r0, #4294967295
   34338:	e7aa      	b.n	34290 <z_impl_k_mutex_unlock+0xa8>
   3433a:	bf00      	nop
   3433c:	00045c0a 	.word	0x00045c0a
   34340:	00045c90 	.word	0x00045c90
   34344:	0004033e 	.word	0x0004033e
   34348:	00045cb2 	.word	0x00045cb2
   3434c:	200189dc 	.word	0x200189dc
   34350:	00045cd7 	.word	0x00045cd7
   34354:	00045cee 	.word	0x00045cee
   34358:	000408e8 	.word	0x000408e8
   3435c:	00045d19 	.word	0x00045d19
   34360:	20018a10 	.word	0x20018a10
   34364:	00040472 	.word	0x00040472
   34368:	000404c4 	.word	0x000404c4
   3436c:	000404d9 	.word	0x000404d9
   34370:	00040498 	.word	0x00040498
   34374:	000404af 	.word	0x000404af

00034378 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   34378:	b538      	push	{r3, r4, r5, lr}
   3437a:	4604      	mov	r4, r0
	__asm__ volatile(
   3437c:	f04f 0320 	mov.w	r3, #32
   34380:	f3ef 8511 	mrs	r5, BASEPRI
   34384:	f383 8811 	msr	BASEPRI, r3
   34388:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3438c:	4817      	ldr	r0, [pc, #92]	; (343ec <z_impl_k_sem_give+0x74>)
   3438e:	f7ff fc9f 	bl	33cd0 <z_spin_lock_valid>
   34392:	b968      	cbnz	r0, 343b0 <z_impl_k_sem_give+0x38>
   34394:	2381      	movs	r3, #129	; 0x81
   34396:	4a16      	ldr	r2, [pc, #88]	; (343f0 <z_impl_k_sem_give+0x78>)
   34398:	4916      	ldr	r1, [pc, #88]	; (343f4 <z_impl_k_sem_give+0x7c>)
   3439a:	4817      	ldr	r0, [pc, #92]	; (343f8 <z_impl_k_sem_give+0x80>)
   3439c:	f004 fec9 	bl	39132 <printk>
   343a0:	4912      	ldr	r1, [pc, #72]	; (343ec <z_impl_k_sem_give+0x74>)
   343a2:	4816      	ldr	r0, [pc, #88]	; (343fc <z_impl_k_sem_give+0x84>)
   343a4:	f004 fec5 	bl	39132 <printk>
   343a8:	2181      	movs	r1, #129	; 0x81
   343aa:	4811      	ldr	r0, [pc, #68]	; (343f0 <z_impl_k_sem_give+0x78>)
   343ac:	f005 f960 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   343b0:	480e      	ldr	r0, [pc, #56]	; (343ec <z_impl_k_sem_give+0x74>)
   343b2:	f7ff fcab 	bl	33d0c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   343b6:	4620      	mov	r0, r4
   343b8:	f001 fae2 	bl	35980 <z_unpend_first_thread>

	if (thread != NULL) {
   343bc:	b148      	cbz	r0, 343d2 <z_impl_k_sem_give+0x5a>
   343be:	2200      	movs	r2, #0
   343c0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   343c2:	f001 f8f3 	bl	355ac <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   343c6:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   343c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   343cc:	4807      	ldr	r0, [pc, #28]	; (343ec <z_impl_k_sem_give+0x74>)
   343ce:	f000 bc75 	b.w	34cbc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   343d2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   343d6:	429a      	cmp	r2, r3
   343d8:	bf18      	it	ne
   343da:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   343dc:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   343de:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   343e0:	f104 0010 	add.w	r0, r4, #16
   343e4:	f009 fd70 	bl	3dec8 <z_handle_obj_poll_events>
}
   343e8:	e7ed      	b.n	343c6 <z_impl_k_sem_give+0x4e>
   343ea:	bf00      	nop
   343ec:	20018a14 	.word	0x20018a14
   343f0:	00040472 	.word	0x00040472
   343f4:	000404c4 	.word	0x000404c4
   343f8:	0004033e 	.word	0x0004033e
   343fc:	000404d9 	.word	0x000404d9

00034400 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   34400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34402:	4604      	mov	r4, r0
   34404:	4616      	mov	r6, r2
   34406:	461f      	mov	r7, r3
   34408:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   3440c:	b17b      	cbz	r3, 3442e <z_impl_k_sem_take+0x2e>
   3440e:	ea56 0307 	orrs.w	r3, r6, r7
   34412:	d00c      	beq.n	3442e <z_impl_k_sem_take+0x2e>
   34414:	4935      	ldr	r1, [pc, #212]	; (344ec <z_impl_k_sem_take+0xec>)
   34416:	2379      	movs	r3, #121	; 0x79
   34418:	4a35      	ldr	r2, [pc, #212]	; (344f0 <z_impl_k_sem_take+0xf0>)
   3441a:	4836      	ldr	r0, [pc, #216]	; (344f4 <z_impl_k_sem_take+0xf4>)
   3441c:	f004 fe89 	bl	39132 <printk>
   34420:	4835      	ldr	r0, [pc, #212]	; (344f8 <z_impl_k_sem_take+0xf8>)
   34422:	f004 fe86 	bl	39132 <printk>
   34426:	2179      	movs	r1, #121	; 0x79
   34428:	4831      	ldr	r0, [pc, #196]	; (344f0 <z_impl_k_sem_take+0xf0>)
   3442a:	f005 f921 	bl	39670 <assert_post_action>
   3442e:	f04f 0320 	mov.w	r3, #32
   34432:	f3ef 8511 	mrs	r5, BASEPRI
   34436:	f383 8811 	msr	BASEPRI, r3
   3443a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3443e:	482f      	ldr	r0, [pc, #188]	; (344fc <z_impl_k_sem_take+0xfc>)
   34440:	f7ff fc46 	bl	33cd0 <z_spin_lock_valid>
   34444:	b968      	cbnz	r0, 34462 <z_impl_k_sem_take+0x62>
   34446:	2381      	movs	r3, #129	; 0x81
   34448:	4a2d      	ldr	r2, [pc, #180]	; (34500 <z_impl_k_sem_take+0x100>)
   3444a:	492e      	ldr	r1, [pc, #184]	; (34504 <z_impl_k_sem_take+0x104>)
   3444c:	4829      	ldr	r0, [pc, #164]	; (344f4 <z_impl_k_sem_take+0xf4>)
   3444e:	f004 fe70 	bl	39132 <printk>
   34452:	492a      	ldr	r1, [pc, #168]	; (344fc <z_impl_k_sem_take+0xfc>)
   34454:	482c      	ldr	r0, [pc, #176]	; (34508 <z_impl_k_sem_take+0x108>)
   34456:	f004 fe6c 	bl	39132 <printk>
   3445a:	2181      	movs	r1, #129	; 0x81
   3445c:	4828      	ldr	r0, [pc, #160]	; (34500 <z_impl_k_sem_take+0x100>)
   3445e:	f005 f907 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   34462:	4826      	ldr	r0, [pc, #152]	; (344fc <z_impl_k_sem_take+0xfc>)
   34464:	f7ff fc52 	bl	33d0c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   34468:	68a3      	ldr	r3, [r4, #8]
   3446a:	b1d3      	cbz	r3, 344a2 <z_impl_k_sem_take+0xa2>
		sem->count--;
   3446c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3446e:	4823      	ldr	r0, [pc, #140]	; (344fc <z_impl_k_sem_take+0xfc>)
   34470:	60a3      	str	r3, [r4, #8]
   34472:	f7ff fc3b 	bl	33cec <z_spin_unlock_valid>
   34476:	b968      	cbnz	r0, 34494 <z_impl_k_sem_take+0x94>
   34478:	23ac      	movs	r3, #172	; 0xac
   3447a:	4a21      	ldr	r2, [pc, #132]	; (34500 <z_impl_k_sem_take+0x100>)
   3447c:	4923      	ldr	r1, [pc, #140]	; (3450c <z_impl_k_sem_take+0x10c>)
   3447e:	481d      	ldr	r0, [pc, #116]	; (344f4 <z_impl_k_sem_take+0xf4>)
   34480:	f004 fe57 	bl	39132 <printk>
   34484:	491d      	ldr	r1, [pc, #116]	; (344fc <z_impl_k_sem_take+0xfc>)
   34486:	4822      	ldr	r0, [pc, #136]	; (34510 <z_impl_k_sem_take+0x110>)
   34488:	f004 fe53 	bl	39132 <printk>
   3448c:	21ac      	movs	r1, #172	; 0xac
   3448e:	481c      	ldr	r0, [pc, #112]	; (34500 <z_impl_k_sem_take+0x100>)
   34490:	f005 f8ee 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34494:	f385 8811 	msr	BASEPRI, r5
   34498:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   3449c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   3449e:	b003      	add	sp, #12
   344a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   344a2:	ea56 0307 	orrs.w	r3, r6, r7
   344a6:	d118      	bne.n	344da <z_impl_k_sem_take+0xda>
   344a8:	4814      	ldr	r0, [pc, #80]	; (344fc <z_impl_k_sem_take+0xfc>)
   344aa:	f7ff fc1f 	bl	33cec <z_spin_unlock_valid>
   344ae:	b968      	cbnz	r0, 344cc <z_impl_k_sem_take+0xcc>
   344b0:	23ac      	movs	r3, #172	; 0xac
   344b2:	4a13      	ldr	r2, [pc, #76]	; (34500 <z_impl_k_sem_take+0x100>)
   344b4:	4915      	ldr	r1, [pc, #84]	; (3450c <z_impl_k_sem_take+0x10c>)
   344b6:	480f      	ldr	r0, [pc, #60]	; (344f4 <z_impl_k_sem_take+0xf4>)
   344b8:	f004 fe3b 	bl	39132 <printk>
   344bc:	490f      	ldr	r1, [pc, #60]	; (344fc <z_impl_k_sem_take+0xfc>)
   344be:	4814      	ldr	r0, [pc, #80]	; (34510 <z_impl_k_sem_take+0x110>)
   344c0:	f004 fe37 	bl	39132 <printk>
   344c4:	21ac      	movs	r1, #172	; 0xac
   344c6:	480e      	ldr	r0, [pc, #56]	; (34500 <z_impl_k_sem_take+0x100>)
   344c8:	f005 f8d2 	bl	39670 <assert_post_action>
   344cc:	f385 8811 	msr	BASEPRI, r5
   344d0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   344d4:	f06f 000f 	mvn.w	r0, #15
   344d8:	e7e1      	b.n	3449e <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   344da:	4622      	mov	r2, r4
   344dc:	4629      	mov	r1, r5
   344de:	e9cd 6700 	strd	r6, r7, [sp]
   344e2:	4806      	ldr	r0, [pc, #24]	; (344fc <z_impl_k_sem_take+0xfc>)
   344e4:	f000 fe28 	bl	35138 <z_pend_curr>
	return ret;
   344e8:	e7d9      	b.n	3449e <z_impl_k_sem_take+0x9e>
   344ea:	bf00      	nop
   344ec:	00045d6a 	.word	0x00045d6a
   344f0:	00045d4a 	.word	0x00045d4a
   344f4:	0004033e 	.word	0x0004033e
   344f8:	000408e8 	.word	0x000408e8
   344fc:	20018a14 	.word	0x20018a14
   34500:	00040472 	.word	0x00040472
   34504:	000404c4 	.word	0x000404c4
   34508:	000404d9 	.word	0x000404d9
   3450c:	00040498 	.word	0x00040498
   34510:	000404af 	.word	0x000404af

00034514 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   34514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34518:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3451a:	4e7e      	ldr	r6, [pc, #504]	; (34714 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   3451c:	4f7e      	ldr	r7, [pc, #504]	; (34718 <work_queue_main+0x204>)
{
   3451e:	b085      	sub	sp, #20
	__asm__ volatile(
   34520:	f04f 0320 	mov.w	r3, #32
   34524:	f3ef 8811 	mrs	r8, BASEPRI
   34528:	f383 8811 	msr	BASEPRI, r3
   3452c:	f3bf 8f6f 	isb	sy
   34530:	4630      	mov	r0, r6
   34532:	f7ff fbcd 	bl	33cd0 <z_spin_lock_valid>
   34536:	b968      	cbnz	r0, 34554 <work_queue_main+0x40>
   34538:	2381      	movs	r3, #129	; 0x81
   3453a:	4a78      	ldr	r2, [pc, #480]	; (3471c <work_queue_main+0x208>)
   3453c:	4978      	ldr	r1, [pc, #480]	; (34720 <work_queue_main+0x20c>)
   3453e:	4879      	ldr	r0, [pc, #484]	; (34724 <work_queue_main+0x210>)
   34540:	f004 fdf7 	bl	39132 <printk>
   34544:	4631      	mov	r1, r6
   34546:	4878      	ldr	r0, [pc, #480]	; (34728 <work_queue_main+0x214>)
   34548:	f004 fdf3 	bl	39132 <printk>
   3454c:	2181      	movs	r1, #129	; 0x81
   3454e:	4873      	ldr	r0, [pc, #460]	; (3471c <work_queue_main+0x208>)
   34550:	f005 f88e 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   34554:	4630      	mov	r0, r6
   34556:	f7ff fbd9 	bl	33d0c <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   3455a:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
	return list->head;
   3455e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
Z_GENLIST_GET(slist, snode)
   34562:	b9ad      	cbnz	r5, 34590 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   34564:	f023 0204 	bic.w	r2, r3, #4
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   34568:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   3456a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
		} else if (flag_test_and_clear(&queue->flags,
   3456e:	f100 8092 	bmi.w	34696 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   34572:	2300      	movs	r3, #0
   34574:	f04f 32ff 	mov.w	r2, #4294967295
   34578:	9302      	str	r3, [sp, #8]
   3457a:	f04f 33ff 	mov.w	r3, #4294967295
   3457e:	4641      	mov	r1, r8
   34580:	e9cd 2300 	strd	r2, r3, [sp]
   34584:	4630      	mov	r0, r6
   34586:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   3458a:	f001 fcff 	bl	35f8c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   3458e:	e7c7      	b.n	34520 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   34590:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
   34594:	682a      	ldr	r2, [r5, #0]
   34596:	428d      	cmp	r5, r1
	list->head = node;
   34598:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3459c:	d101      	bne.n	345a2 <work_queue_main+0x8e>
	list->tail = node;
   3459e:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   345a2:	f043 0302 	orr.w	r3, r3, #2
   345a6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   345aa:	68eb      	ldr	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   345ac:	4630      	mov	r0, r6
   345ae:	f023 0304 	bic.w	r3, r3, #4
   345b2:	f043 0301 	orr.w	r3, r3, #1
   345b6:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   345b8:	f8d5 9004 	ldr.w	r9, [r5, #4]
   345bc:	f7ff fb96 	bl	33cec <z_spin_unlock_valid>
   345c0:	b968      	cbnz	r0, 345de <work_queue_main+0xca>
   345c2:	23ac      	movs	r3, #172	; 0xac
   345c4:	4a55      	ldr	r2, [pc, #340]	; (3471c <work_queue_main+0x208>)
   345c6:	4959      	ldr	r1, [pc, #356]	; (3472c <work_queue_main+0x218>)
   345c8:	4856      	ldr	r0, [pc, #344]	; (34724 <work_queue_main+0x210>)
   345ca:	f004 fdb2 	bl	39132 <printk>
   345ce:	4631      	mov	r1, r6
   345d0:	4857      	ldr	r0, [pc, #348]	; (34730 <work_queue_main+0x21c>)
   345d2:	f004 fdae 	bl	39132 <printk>
   345d6:	21ac      	movs	r1, #172	; 0xac
   345d8:	4850      	ldr	r0, [pc, #320]	; (3471c <work_queue_main+0x208>)
   345da:	f005 f849 	bl	39670 <assert_post_action>
	__asm__ volatile(
   345de:	f388 8811 	msr	BASEPRI, r8
   345e2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
   345e6:	f1b9 0f00 	cmp.w	r9, #0
   345ea:	d10b      	bne.n	34604 <work_queue_main+0xf0>
   345ec:	4951      	ldr	r1, [pc, #324]	; (34734 <work_queue_main+0x220>)
   345ee:	484d      	ldr	r0, [pc, #308]	; (34724 <work_queue_main+0x210>)
   345f0:	f240 237d 	movw	r3, #637	; 0x27d
   345f4:	4a50      	ldr	r2, [pc, #320]	; (34738 <work_queue_main+0x224>)
   345f6:	f004 fd9c 	bl	39132 <printk>
   345fa:	f240 217d 	movw	r1, #637	; 0x27d
   345fe:	484e      	ldr	r0, [pc, #312]	; (34738 <work_queue_main+0x224>)
   34600:	f005 f836 	bl	39670 <assert_post_action>
			handler(work);
   34604:	4628      	mov	r0, r5
   34606:	47c8      	blx	r9
	__asm__ volatile(
   34608:	f04f 0320 	mov.w	r3, #32
   3460c:	f3ef 8a11 	mrs	sl, BASEPRI
   34610:	f383 8811 	msr	BASEPRI, r3
   34614:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34618:	4630      	mov	r0, r6
   3461a:	f7ff fb59 	bl	33cd0 <z_spin_lock_valid>
   3461e:	b968      	cbnz	r0, 3463c <work_queue_main+0x128>
   34620:	2381      	movs	r3, #129	; 0x81
   34622:	4a3e      	ldr	r2, [pc, #248]	; (3471c <work_queue_main+0x208>)
   34624:	493e      	ldr	r1, [pc, #248]	; (34720 <work_queue_main+0x20c>)
   34626:	483f      	ldr	r0, [pc, #252]	; (34724 <work_queue_main+0x210>)
   34628:	f004 fd83 	bl	39132 <printk>
   3462c:	4631      	mov	r1, r6
   3462e:	483e      	ldr	r0, [pc, #248]	; (34728 <work_queue_main+0x214>)
   34630:	f004 fd7f 	bl	39132 <printk>
   34634:	2181      	movs	r1, #129	; 0x81
   34636:	4839      	ldr	r0, [pc, #228]	; (3471c <work_queue_main+0x208>)
   34638:	f005 f81a 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   3463c:	4630      	mov	r0, r6
   3463e:	f7ff fb65 	bl	33d0c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   34642:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34644:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   34646:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3464a:	d42e      	bmi.n	346aa <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   3464c:	60ea      	str	r2, [r5, #12]
   3464e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34652:	4630      	mov	r0, r6
   34654:	f023 0302 	bic.w	r3, r3, #2
   34658:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	return (*flagp & BIT(bit)) != 0U;
   3465c:	f3c3 2500 	ubfx	r5, r3, #8, #1
   34660:	f7ff fb44 	bl	33cec <z_spin_unlock_valid>
   34664:	b968      	cbnz	r0, 34682 <work_queue_main+0x16e>
   34666:	23ac      	movs	r3, #172	; 0xac
   34668:	4a2c      	ldr	r2, [pc, #176]	; (3471c <work_queue_main+0x208>)
   3466a:	4930      	ldr	r1, [pc, #192]	; (3472c <work_queue_main+0x218>)
   3466c:	482d      	ldr	r0, [pc, #180]	; (34724 <work_queue_main+0x210>)
   3466e:	f004 fd60 	bl	39132 <printk>
   34672:	4631      	mov	r1, r6
   34674:	482e      	ldr	r0, [pc, #184]	; (34730 <work_queue_main+0x21c>)
   34676:	f004 fd5c 	bl	39132 <printk>
   3467a:	21ac      	movs	r1, #172	; 0xac
   3467c:	4827      	ldr	r0, [pc, #156]	; (3471c <work_queue_main+0x208>)
   3467e:	f004 fff7 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34682:	f38a 8811 	msr	BASEPRI, sl
   34686:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   3468a:	2d00      	cmp	r5, #0
   3468c:	f47f af48 	bne.w	34520 <work_queue_main+0xc>
	z_impl_k_yield();
   34690:	f001 f9d2 	bl	35a38 <z_impl_k_yield>
}
   34694:	e744      	b.n	34520 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   34696:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   3469a:	2200      	movs	r2, #0
   3469c:	2101      	movs	r1, #1
   3469e:	4628      	mov	r0, r5
   346a0:	f001 fc1c 	bl	35edc <z_sched_wake>
   346a4:	2800      	cmp	r0, #0
   346a6:	d1f8      	bne.n	3469a <work_queue_main+0x186>
   346a8:	e763      	b.n	34572 <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   346aa:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   346ac:	f023 0303 	bic.w	r3, r3, #3
   346b0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   346b2:	2800      	cmp	r0, #0
   346b4:	d0cb      	beq.n	3464e <work_queue_main+0x13a>
	return node->next;
   346b6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   346b8:	f04f 0900 	mov.w	r9, #0
   346bc:	2b00      	cmp	r3, #0
   346be:	bf38      	it	cc
   346c0:	2300      	movcc	r3, #0
	parent->next = child;
   346c2:	46cb      	mov	fp, r9
   346c4:	4698      	mov	r8, r3
		if (wc->work == work) {
   346c6:	6843      	ldr	r3, [r0, #4]
   346c8:	4602      	mov	r2, r0
   346ca:	429d      	cmp	r5, r3
   346cc:	d10d      	bne.n	346ea <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   346ce:	6802      	ldr	r2, [r0, #0]
   346d0:	f1b9 0f00 	cmp.w	r9, #0
   346d4:	d115      	bne.n	34702 <work_queue_main+0x1ee>
   346d6:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   346d8:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   346da:	4283      	cmp	r3, r0
   346dc:	d100      	bne.n	346e0 <work_queue_main+0x1cc>
	list->tail = node;
   346de:	607a      	str	r2, [r7, #4]
	parent->next = child;
   346e0:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   346e4:	f7ff fe48 	bl	34378 <z_impl_k_sem_give>
}
   346e8:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   346ea:	f1b8 0f00 	cmp.w	r8, #0
   346ee:	d0ae      	beq.n	3464e <work_queue_main+0x13a>
	return node->next;
   346f0:	f8d8 3000 	ldr.w	r3, [r8]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   346f4:	4640      	mov	r0, r8
   346f6:	2b00      	cmp	r3, #0
   346f8:	bf38      	it	cc
   346fa:	2300      	movcc	r3, #0
   346fc:	4691      	mov	r9, r2
   346fe:	4698      	mov	r8, r3
   34700:	e7e1      	b.n	346c6 <work_queue_main+0x1b2>
	parent->next = child;
   34702:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   34706:	687b      	ldr	r3, [r7, #4]
   34708:	4283      	cmp	r3, r0
	list->tail = node;
   3470a:	bf08      	it	eq
   3470c:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   34710:	e7e6      	b.n	346e0 <work_queue_main+0x1cc>
   34712:	bf00      	nop
   34714:	20018a18 	.word	0x20018a18
   34718:	20018a1c 	.word	0x20018a1c
   3471c:	00040472 	.word	0x00040472
   34720:	000404c4 	.word	0x000404c4
   34724:	0004033e 	.word	0x0004033e
   34728:	000404d9 	.word	0x000404d9
   3472c:	00040498 	.word	0x00040498
   34730:	000404af 	.word	0x000404af
   34734:	00045dd8 	.word	0x00045dd8
   34738:	00045db7 	.word	0x00045db7

0003473c <submit_to_queue_locked>:
{
   3473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3473e:	68c3      	ldr	r3, [r0, #12]
{
   34740:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34742:	079a      	lsls	r2, r3, #30
{
   34744:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34746:	f3c3 0540 	ubfx	r5, r3, #1, #1
   3474a:	d42b      	bmi.n	347a4 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   3474c:	075f      	lsls	r7, r3, #29
   3474e:	d42b      	bmi.n	347a8 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   34750:	680a      	ldr	r2, [r1, #0]
   34752:	b90a      	cbnz	r2, 34758 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   34754:	6882      	ldr	r2, [r0, #8]
   34756:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   34758:	07d8      	lsls	r0, r3, #31
   3475a:	d528      	bpl.n	347ae <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   3475c:	68a3      	ldr	r3, [r4, #8]
   3475e:	b95b      	cbnz	r3, 34778 <submit_to_queue_locked+0x3c>
   34760:	4924      	ldr	r1, [pc, #144]	; (347f4 <submit_to_queue_locked+0xb8>)
   34762:	4825      	ldr	r0, [pc, #148]	; (347f8 <submit_to_queue_locked+0xbc>)
   34764:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   34768:	4a24      	ldr	r2, [pc, #144]	; (347fc <submit_to_queue_locked+0xc0>)
   3476a:	f004 fce2 	bl	39132 <printk>
   3476e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   34772:	4822      	ldr	r0, [pc, #136]	; (347fc <submit_to_queue_locked+0xc0>)
   34774:	f004 ff7c 	bl	39670 <assert_post_action>
			ret = 2;
   34778:	2502      	movs	r5, #2
			*queuep = work->queue;
   3477a:	68a3      	ldr	r3, [r4, #8]
   3477c:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   3477e:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   34780:	b38f      	cbz	r7, 347e6 <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   34782:	4b1f      	ldr	r3, [pc, #124]	; (34800 <submit_to_queue_locked+0xc4>)
   34784:	689b      	ldr	r3, [r3, #8]
   34786:	42bb      	cmp	r3, r7
   34788:	d113      	bne.n	347b2 <submit_to_queue_locked+0x76>
   3478a:	f009 faca 	bl	3dd22 <k_is_in_isr>
   3478e:	f080 0001 	eor.w	r0, r0, #1
   34792:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   34794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   34798:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   3479a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   3479e:	d525      	bpl.n	347ec <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   347a0:	b14a      	cbz	r2, 347b6 <submit_to_queue_locked+0x7a>
   347a2:	b950      	cbnz	r0, 347ba <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   347a4:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   347a8:	2300      	movs	r3, #0
   347aa:	6033      	str	r3, [r6, #0]
	return ret;
   347ac:	e015      	b.n	347da <submit_to_queue_locked+0x9e>
		ret = 1;
   347ae:	2501      	movs	r5, #1
   347b0:	e7e5      	b.n	3477e <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   347b2:	2000      	movs	r0, #0
   347b4:	e7ee      	b.n	34794 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   347b6:	071b      	lsls	r3, r3, #28
   347b8:	d4f4      	bmi.n	347a4 <submit_to_queue_locked+0x68>
	parent->next = child;
   347ba:	2300      	movs	r3, #0
   347bc:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   347be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   347c2:	b963      	cbnz	r3, 347de <submit_to_queue_locked+0xa2>
	list->head = node;
   347c4:	e9c7 4432 	strd	r4, r4, [r7, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   347c8:	4638      	mov	r0, r7
   347ca:	f009 fad5 	bl	3dd78 <notify_queue_locked>
	*flagp |= BIT(bit);
   347ce:	68e3      	ldr	r3, [r4, #12]
   347d0:	f043 0304 	orr.w	r3, r3, #4
   347d4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   347d6:	6833      	ldr	r3, [r6, #0]
   347d8:	60a3      	str	r3, [r4, #8]
}
   347da:	4628      	mov	r0, r5
   347dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   347de:	601c      	str	r4, [r3, #0]
	list->tail = node;
   347e0:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
}
   347e4:	e7f0      	b.n	347c8 <submit_to_queue_locked+0x8c>
		return -EINVAL;
   347e6:	f06f 0515 	mvn.w	r5, #21
   347ea:	e7dd      	b.n	347a8 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   347ec:	f06f 0512 	mvn.w	r5, #18
   347f0:	e7da      	b.n	347a8 <submit_to_queue_locked+0x6c>
   347f2:	bf00      	nop
   347f4:	00045def 	.word	0x00045def
   347f8:	0004033e 	.word	0x0004033e
   347fc:	00045db7 	.word	0x00045db7
   34800:	200189dc 	.word	0x200189dc

00034804 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   34804:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34806:	4604      	mov	r4, r0
	__asm__ volatile(
   34808:	f04f 0320 	mov.w	r3, #32
   3480c:	f3ef 8511 	mrs	r5, BASEPRI
   34810:	f383 8811 	msr	BASEPRI, r3
   34814:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34818:	481e      	ldr	r0, [pc, #120]	; (34894 <work_timeout+0x90>)
   3481a:	f7ff fa59 	bl	33cd0 <z_spin_lock_valid>
   3481e:	b968      	cbnz	r0, 3483c <work_timeout+0x38>
   34820:	2381      	movs	r3, #129	; 0x81
   34822:	4a1d      	ldr	r2, [pc, #116]	; (34898 <work_timeout+0x94>)
   34824:	491d      	ldr	r1, [pc, #116]	; (3489c <work_timeout+0x98>)
   34826:	481e      	ldr	r0, [pc, #120]	; (348a0 <work_timeout+0x9c>)
   34828:	f004 fc83 	bl	39132 <printk>
   3482c:	4919      	ldr	r1, [pc, #100]	; (34894 <work_timeout+0x90>)
   3482e:	481d      	ldr	r0, [pc, #116]	; (348a4 <work_timeout+0xa0>)
   34830:	f004 fc7f 	bl	39132 <printk>
   34834:	2181      	movs	r1, #129	; 0x81
   34836:	4818      	ldr	r0, [pc, #96]	; (34898 <work_timeout+0x94>)
   34838:	f004 ff1a 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   3483c:	4815      	ldr	r0, [pc, #84]	; (34894 <work_timeout+0x90>)
   3483e:	f7ff fa65 	bl	33d0c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   34842:	2300      	movs	r3, #0
   34844:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   34846:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   3484a:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3484e:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   34850:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   34854:	d506      	bpl.n	34864 <work_timeout+0x60>
		queue = dw->queue;
   34856:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   34858:	a901      	add	r1, sp, #4
   3485a:	f1a4 0010 	sub.w	r0, r4, #16
		queue = dw->queue;
   3485e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   34860:	f7ff ff6c 	bl	3473c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34864:	480b      	ldr	r0, [pc, #44]	; (34894 <work_timeout+0x90>)
   34866:	f7ff fa41 	bl	33cec <z_spin_unlock_valid>
   3486a:	b968      	cbnz	r0, 34888 <work_timeout+0x84>
   3486c:	23ac      	movs	r3, #172	; 0xac
   3486e:	4a0a      	ldr	r2, [pc, #40]	; (34898 <work_timeout+0x94>)
   34870:	490d      	ldr	r1, [pc, #52]	; (348a8 <work_timeout+0xa4>)
   34872:	480b      	ldr	r0, [pc, #44]	; (348a0 <work_timeout+0x9c>)
   34874:	f004 fc5d 	bl	39132 <printk>
   34878:	4906      	ldr	r1, [pc, #24]	; (34894 <work_timeout+0x90>)
   3487a:	480c      	ldr	r0, [pc, #48]	; (348ac <work_timeout+0xa8>)
   3487c:	f004 fc59 	bl	39132 <printk>
   34880:	21ac      	movs	r1, #172	; 0xac
   34882:	4805      	ldr	r0, [pc, #20]	; (34898 <work_timeout+0x94>)
   34884:	f004 fef4 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34888:	f385 8811 	msr	BASEPRI, r5
   3488c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   34890:	b003      	add	sp, #12
   34892:	bd30      	pop	{r4, r5, pc}
   34894:	20018a18 	.word	0x20018a18
   34898:	00040472 	.word	0x00040472
   3489c:	000404c4 	.word	0x000404c4
   348a0:	0004033e 	.word	0x0004033e
   348a4:	000404d9 	.word	0x000404d9
   348a8:	00040498 	.word	0x00040498
   348ac:	000404af 	.word	0x000404af

000348b0 <k_work_submit_to_queue>:
{
   348b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   348b2:	460c      	mov	r4, r1
{
   348b4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   348b6:	b959      	cbnz	r1, 348d0 <k_work_submit_to_queue+0x20>
   348b8:	4926      	ldr	r1, [pc, #152]	; (34954 <k_work_submit_to_queue+0xa4>)
   348ba:	4827      	ldr	r0, [pc, #156]	; (34958 <k_work_submit_to_queue+0xa8>)
   348bc:	f240 1369 	movw	r3, #361	; 0x169
   348c0:	4a26      	ldr	r2, [pc, #152]	; (3495c <k_work_submit_to_queue+0xac>)
   348c2:	f004 fc36 	bl	39132 <printk>
   348c6:	f240 1169 	movw	r1, #361	; 0x169
   348ca:	4824      	ldr	r0, [pc, #144]	; (3495c <k_work_submit_to_queue+0xac>)
   348cc:	f004 fed0 	bl	39670 <assert_post_action>
	__asm__ volatile(
   348d0:	f04f 0320 	mov.w	r3, #32
   348d4:	f3ef 8511 	mrs	r5, BASEPRI
   348d8:	f383 8811 	msr	BASEPRI, r3
   348dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   348e0:	481f      	ldr	r0, [pc, #124]	; (34960 <k_work_submit_to_queue+0xb0>)
   348e2:	f7ff f9f5 	bl	33cd0 <z_spin_lock_valid>
   348e6:	b968      	cbnz	r0, 34904 <k_work_submit_to_queue+0x54>
   348e8:	2381      	movs	r3, #129	; 0x81
   348ea:	4a1e      	ldr	r2, [pc, #120]	; (34964 <k_work_submit_to_queue+0xb4>)
   348ec:	491e      	ldr	r1, [pc, #120]	; (34968 <k_work_submit_to_queue+0xb8>)
   348ee:	481a      	ldr	r0, [pc, #104]	; (34958 <k_work_submit_to_queue+0xa8>)
   348f0:	f004 fc1f 	bl	39132 <printk>
   348f4:	491a      	ldr	r1, [pc, #104]	; (34960 <k_work_submit_to_queue+0xb0>)
   348f6:	481d      	ldr	r0, [pc, #116]	; (3496c <k_work_submit_to_queue+0xbc>)
   348f8:	f004 fc1b 	bl	39132 <printk>
   348fc:	2181      	movs	r1, #129	; 0x81
   348fe:	4819      	ldr	r0, [pc, #100]	; (34964 <k_work_submit_to_queue+0xb4>)
   34900:	f004 feb6 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   34904:	4816      	ldr	r0, [pc, #88]	; (34960 <k_work_submit_to_queue+0xb0>)
   34906:	f7ff fa01 	bl	33d0c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   3490a:	4620      	mov	r0, r4
   3490c:	a901      	add	r1, sp, #4
   3490e:	f7ff ff15 	bl	3473c <submit_to_queue_locked>
   34912:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34914:	4812      	ldr	r0, [pc, #72]	; (34960 <k_work_submit_to_queue+0xb0>)
   34916:	f7ff f9e9 	bl	33cec <z_spin_unlock_valid>
   3491a:	b968      	cbnz	r0, 34938 <k_work_submit_to_queue+0x88>
   3491c:	23ac      	movs	r3, #172	; 0xac
   3491e:	4a11      	ldr	r2, [pc, #68]	; (34964 <k_work_submit_to_queue+0xb4>)
   34920:	4913      	ldr	r1, [pc, #76]	; (34970 <k_work_submit_to_queue+0xc0>)
   34922:	480d      	ldr	r0, [pc, #52]	; (34958 <k_work_submit_to_queue+0xa8>)
   34924:	f004 fc05 	bl	39132 <printk>
   34928:	490d      	ldr	r1, [pc, #52]	; (34960 <k_work_submit_to_queue+0xb0>)
   3492a:	4812      	ldr	r0, [pc, #72]	; (34974 <k_work_submit_to_queue+0xc4>)
   3492c:	f004 fc01 	bl	39132 <printk>
   34930:	21ac      	movs	r1, #172	; 0xac
   34932:	480c      	ldr	r0, [pc, #48]	; (34964 <k_work_submit_to_queue+0xb4>)
   34934:	f004 fe9c 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34938:	f385 8811 	msr	BASEPRI, r5
   3493c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   34940:	2c00      	cmp	r4, #0
   34942:	dd04      	ble.n	3494e <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   34944:	f001 fa06 	bl	35d54 <z_impl_k_is_preempt_thread>
   34948:	b108      	cbz	r0, 3494e <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   3494a:	f001 f875 	bl	35a38 <z_impl_k_yield>
}
   3494e:	4620      	mov	r0, r4
   34950:	b003      	add	sp, #12
   34952:	bd30      	pop	{r4, r5, pc}
   34954:	00045e4b 	.word	0x00045e4b
   34958:	0004033e 	.word	0x0004033e
   3495c:	00045db7 	.word	0x00045db7
   34960:	20018a18 	.word	0x20018a18
   34964:	00040472 	.word	0x00040472
   34968:	000404c4 	.word	0x000404c4
   3496c:	000404d9 	.word	0x000404d9
   34970:	00040498 	.word	0x00040498
   34974:	000404af 	.word	0x000404af

00034978 <k_work_submit>:
{
   34978:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   3497a:	4801      	ldr	r0, [pc, #4]	; (34980 <k_work_submit+0x8>)
   3497c:	f7ff bf98 	b.w	348b0 <k_work_submit_to_queue>
   34980:	20016e20 	.word	0x20016e20

00034984 <k_work_queue_start>:
{
   34984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34988:	b088      	sub	sp, #32
   3498a:	460e      	mov	r6, r1
   3498c:	4617      	mov	r7, r2
   3498e:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   34990:	4604      	mov	r4, r0
{
   34992:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   34994:	b958      	cbnz	r0, 349ae <k_work_queue_start+0x2a>
   34996:	492e      	ldr	r1, [pc, #184]	; (34a50 <k_work_queue_start+0xcc>)
   34998:	482e      	ldr	r0, [pc, #184]	; (34a54 <k_work_queue_start+0xd0>)
   3499a:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   3499e:	4a2e      	ldr	r2, [pc, #184]	; (34a58 <k_work_queue_start+0xd4>)
   349a0:	f004 fbc7 	bl	39132 <printk>
   349a4:	f44f 7128 	mov.w	r1, #672	; 0x2a0
   349a8:	482b      	ldr	r0, [pc, #172]	; (34a58 <k_work_queue_start+0xd4>)
   349aa:	f004 fe61 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   349ae:	b95e      	cbnz	r6, 349c8 <k_work_queue_start+0x44>
   349b0:	492a      	ldr	r1, [pc, #168]	; (34a5c <k_work_queue_start+0xd8>)
   349b2:	4828      	ldr	r0, [pc, #160]	; (34a54 <k_work_queue_start+0xd0>)
   349b4:	f240 23a1 	movw	r3, #673	; 0x2a1
   349b8:	4a27      	ldr	r2, [pc, #156]	; (34a58 <k_work_queue_start+0xd4>)
   349ba:	f004 fbba 	bl	39132 <printk>
   349be:	f240 21a1 	movw	r1, #673	; 0x2a1
   349c2:	4825      	ldr	r0, [pc, #148]	; (34a58 <k_work_queue_start+0xd4>)
   349c4:	f004 fe54 	bl	39670 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   349c8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   349cc:	07db      	lsls	r3, r3, #31
   349ce:	d50b      	bpl.n	349e8 <k_work_queue_start+0x64>
   349d0:	4923      	ldr	r1, [pc, #140]	; (34a60 <k_work_queue_start+0xdc>)
   349d2:	4820      	ldr	r0, [pc, #128]	; (34a54 <k_work_queue_start+0xd0>)
   349d4:	f240 23a2 	movw	r3, #674	; 0x2a2
   349d8:	4a1f      	ldr	r2, [pc, #124]	; (34a58 <k_work_queue_start+0xd4>)
   349da:	f004 fbaa 	bl	39132 <printk>
   349de:	f240 21a2 	movw	r1, #674	; 0x2a2
   349e2:	481d      	ldr	r0, [pc, #116]	; (34a58 <k_work_queue_start+0xd4>)
   349e4:	f004 fe44 	bl	39670 <assert_post_action>
	list->head = NULL;
   349e8:	2300      	movs	r3, #0
	list->tail = NULL;
   349ea:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
   349ee:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   349f2:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0
   349f6:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
   349fa:	e9c4 3336 	strd	r3, r3, [r4, #216]	; 0xd8
	if ((cfg != NULL) && cfg->no_yield) {
   349fe:	b32d      	cbz	r5, 34a4c <k_work_queue_start+0xc8>
   34a00:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   34a02:	f240 1101 	movw	r1, #257	; 0x101
   34a06:	2b00      	cmp	r3, #0
   34a08:	bf08      	it	eq
   34a0a:	2101      	moveq	r1, #1
	*flagp = flags;
   34a0c:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   34a10:	f04f 32ff 	mov.w	r2, #4294967295
   34a14:	f04f 33ff 	mov.w	r3, #4294967295
   34a18:	e9cd 2306 	strd	r2, r3, [sp, #24]
   34a1c:	2200      	movs	r2, #0
   34a1e:	4631      	mov	r1, r6
   34a20:	e9cd 8203 	strd	r8, r2, [sp, #12]
   34a24:	e9cd 2201 	strd	r2, r2, [sp, #4]
   34a28:	4620      	mov	r0, r4
   34a2a:	463a      	mov	r2, r7
   34a2c:	4b0d      	ldr	r3, [pc, #52]	; (34a64 <k_work_queue_start+0xe0>)
   34a2e:	9400      	str	r4, [sp, #0]
   34a30:	f7ff f870 	bl	33b14 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   34a34:	b125      	cbz	r5, 34a40 <k_work_queue_start+0xbc>
   34a36:	6829      	ldr	r1, [r5, #0]
   34a38:	b111      	cbz	r1, 34a40 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   34a3a:	4620      	mov	r0, r4
   34a3c:	f009 f977 	bl	3dd2e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   34a40:	4620      	mov	r0, r4
}
   34a42:	b008      	add	sp, #32
   34a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   34a48:	f009 b976 	b.w	3dd38 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   34a4c:	2101      	movs	r1, #1
   34a4e:	e7dd      	b.n	34a0c <k_work_queue_start+0x88>
   34a50:	00045e0a 	.word	0x00045e0a
   34a54:	0004033e 	.word	0x0004033e
   34a58:	00045db7 	.word	0x00045db7
   34a5c:	00045e10 	.word	0x00045e10
   34a60:	00045e16 	.word	0x00045e16
   34a64:	00034515 	.word	0x00034515

00034a68 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   34a68:	b538      	push	{r3, r4, r5, lr}
   34a6a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   34a6c:	4604      	mov	r4, r0
   34a6e:	b958      	cbnz	r0, 34a88 <k_work_init_delayable+0x20>
   34a70:	4911      	ldr	r1, [pc, #68]	; (34ab8 <k_work_init_delayable+0x50>)
   34a72:	4812      	ldr	r0, [pc, #72]	; (34abc <k_work_init_delayable+0x54>)
   34a74:	f44f 7346 	mov.w	r3, #792	; 0x318
   34a78:	4a11      	ldr	r2, [pc, #68]	; (34ac0 <k_work_init_delayable+0x58>)
   34a7a:	f004 fb5a 	bl	39132 <printk>
   34a7e:	f44f 7146 	mov.w	r1, #792	; 0x318
   34a82:	480f      	ldr	r0, [pc, #60]	; (34ac0 <k_work_init_delayable+0x58>)
   34a84:	f004 fdf4 	bl	39670 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   34a88:	b95d      	cbnz	r5, 34aa2 <k_work_init_delayable+0x3a>
   34a8a:	490e      	ldr	r1, [pc, #56]	; (34ac4 <k_work_init_delayable+0x5c>)
   34a8c:	480b      	ldr	r0, [pc, #44]	; (34abc <k_work_init_delayable+0x54>)
   34a8e:	f240 3319 	movw	r3, #793	; 0x319
   34a92:	4a0b      	ldr	r2, [pc, #44]	; (34ac0 <k_work_init_delayable+0x58>)
   34a94:	f004 fb4d 	bl	39132 <printk>
   34a98:	f240 3119 	movw	r1, #793	; 0x319
   34a9c:	4808      	ldr	r0, [pc, #32]	; (34ac0 <k_work_init_delayable+0x58>)
   34a9e:	f004 fde7 	bl	39670 <assert_post_action>

	*dwork = (struct k_work_delayable){
   34aa2:	2230      	movs	r2, #48	; 0x30
   34aa4:	2100      	movs	r1, #0
   34aa6:	4620      	mov	r0, r4
   34aa8:	f009 fa7f 	bl	3dfaa <memset>
   34aac:	f44f 7380 	mov.w	r3, #256	; 0x100
   34ab0:	6065      	str	r5, [r4, #4]
   34ab2:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   34ab4:	bd38      	pop	{r3, r4, r5, pc}
   34ab6:	bf00      	nop
   34ab8:	00045e4a 	.word	0x00045e4a
   34abc:	0004033e 	.word	0x0004033e
   34ac0:	00045db7 	.word	0x00045db7
   34ac4:	00045dd8 	.word	0x00045dd8

00034ac8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   34ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34aca:	4616      	mov	r6, r2
   34acc:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   34ace:	460c      	mov	r4, r1
{
   34ad0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   34ad2:	b959      	cbnz	r1, 34aec <k_work_schedule_for_queue+0x24>
   34ad4:	492e      	ldr	r1, [pc, #184]	; (34b90 <k_work_schedule_for_queue+0xc8>)
   34ad6:	482f      	ldr	r0, [pc, #188]	; (34b94 <k_work_schedule_for_queue+0xcc>)
   34ad8:	f240 338f 	movw	r3, #911	; 0x38f
   34adc:	4a2e      	ldr	r2, [pc, #184]	; (34b98 <k_work_schedule_for_queue+0xd0>)
   34ade:	f004 fb28 	bl	39132 <printk>
   34ae2:	f240 318f 	movw	r1, #911	; 0x38f
   34ae6:	482c      	ldr	r0, [pc, #176]	; (34b98 <k_work_schedule_for_queue+0xd0>)
   34ae8:	f004 fdc2 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34aec:	f04f 0320 	mov.w	r3, #32
   34af0:	f3ef 8511 	mrs	r5, BASEPRI
   34af4:	f383 8811 	msr	BASEPRI, r3
   34af8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34afc:	4827      	ldr	r0, [pc, #156]	; (34b9c <k_work_schedule_for_queue+0xd4>)
   34afe:	f7ff f8e7 	bl	33cd0 <z_spin_lock_valid>
   34b02:	b968      	cbnz	r0, 34b20 <k_work_schedule_for_queue+0x58>
   34b04:	2381      	movs	r3, #129	; 0x81
   34b06:	4a26      	ldr	r2, [pc, #152]	; (34ba0 <k_work_schedule_for_queue+0xd8>)
   34b08:	4926      	ldr	r1, [pc, #152]	; (34ba4 <k_work_schedule_for_queue+0xdc>)
   34b0a:	4822      	ldr	r0, [pc, #136]	; (34b94 <k_work_schedule_for_queue+0xcc>)
   34b0c:	f004 fb11 	bl	39132 <printk>
   34b10:	4922      	ldr	r1, [pc, #136]	; (34b9c <k_work_schedule_for_queue+0xd4>)
   34b12:	4825      	ldr	r0, [pc, #148]	; (34ba8 <k_work_schedule_for_queue+0xe0>)
   34b14:	f004 fb0d 	bl	39132 <printk>
   34b18:	2181      	movs	r1, #129	; 0x81
   34b1a:	4821      	ldr	r0, [pc, #132]	; (34ba0 <k_work_schedule_for_queue+0xd8>)
   34b1c:	f004 fda8 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   34b20:	481e      	ldr	r0, [pc, #120]	; (34b9c <k_work_schedule_for_queue+0xd4>)
   34b22:	f7ff f8f3 	bl	33d0c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   34b26:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   34b28:	f013 0f0e 	tst.w	r3, #14
   34b2c:	d12e      	bne.n	34b8c <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   34b2e:	ea56 0207 	orrs.w	r2, r6, r7
   34b32:	d11d      	bne.n	34b70 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   34b34:	4620      	mov	r0, r4
   34b36:	a901      	add	r1, sp, #4
   34b38:	f7ff fe00 	bl	3473c <submit_to_queue_locked>
   34b3c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34b3e:	4817      	ldr	r0, [pc, #92]	; (34b9c <k_work_schedule_for_queue+0xd4>)
   34b40:	f7ff f8d4 	bl	33cec <z_spin_unlock_valid>
   34b44:	b968      	cbnz	r0, 34b62 <k_work_schedule_for_queue+0x9a>
   34b46:	23ac      	movs	r3, #172	; 0xac
   34b48:	4a15      	ldr	r2, [pc, #84]	; (34ba0 <k_work_schedule_for_queue+0xd8>)
   34b4a:	4918      	ldr	r1, [pc, #96]	; (34bac <k_work_schedule_for_queue+0xe4>)
   34b4c:	4811      	ldr	r0, [pc, #68]	; (34b94 <k_work_schedule_for_queue+0xcc>)
   34b4e:	f004 faf0 	bl	39132 <printk>
   34b52:	4912      	ldr	r1, [pc, #72]	; (34b9c <k_work_schedule_for_queue+0xd4>)
   34b54:	4816      	ldr	r0, [pc, #88]	; (34bb0 <k_work_schedule_for_queue+0xe8>)
   34b56:	f004 faec 	bl	39132 <printk>
   34b5a:	21ac      	movs	r1, #172	; 0xac
   34b5c:	4810      	ldr	r0, [pc, #64]	; (34ba0 <k_work_schedule_for_queue+0xd8>)
   34b5e:	f004 fd87 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34b62:	f385 8811 	msr	BASEPRI, r5
   34b66:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   34b6a:	4620      	mov	r0, r4
   34b6c:	b003      	add	sp, #12
   34b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   34b70:	f043 0308 	orr.w	r3, r3, #8
   34b74:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   34b76:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   34b78:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   34b7c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   34b7e:	4632      	mov	r2, r6
   34b80:	463b      	mov	r3, r7
   34b82:	490c      	ldr	r1, [pc, #48]	; (34bb4 <k_work_schedule_for_queue+0xec>)
   34b84:	f001 fa7e 	bl	36084 <z_add_timeout>
	return ret;
   34b88:	2401      	movs	r4, #1
   34b8a:	e7d8      	b.n	34b3e <k_work_schedule_for_queue+0x76>
	int ret = 0;
   34b8c:	2400      	movs	r4, #0
   34b8e:	e7d6      	b.n	34b3e <k_work_schedule_for_queue+0x76>
   34b90:	00045e4a 	.word	0x00045e4a
   34b94:	0004033e 	.word	0x0004033e
   34b98:	00045db7 	.word	0x00045db7
   34b9c:	20018a18 	.word	0x20018a18
   34ba0:	00040472 	.word	0x00040472
   34ba4:	000404c4 	.word	0x000404c4
   34ba8:	000404d9 	.word	0x000404d9
   34bac:	00040498 	.word	0x00040498
   34bb0:	000404af 	.word	0x000404af
   34bb4:	00034805 	.word	0x00034805

00034bb8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   34bb8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   34bba:	4801      	ldr	r0, [pc, #4]	; (34bc0 <k_work_schedule+0x8>)
   34bbc:	f7ff bf84 	b.w	34ac8 <k_work_schedule_for_queue>
   34bc0:	20016e20 	.word	0x20016e20

00034bc4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   34bc4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   34bc6:	4c08      	ldr	r4, [pc, #32]	; (34be8 <z_reset_time_slice+0x24>)
   34bc8:	6823      	ldr	r3, [r4, #0]
   34bca:	b15b      	cbz	r3, 34be4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   34bcc:	f7ee fa16 	bl	22ffc <sys_clock_elapsed>
   34bd0:	6822      	ldr	r2, [r4, #0]
   34bd2:	4906      	ldr	r1, [pc, #24]	; (34bec <z_reset_time_slice+0x28>)
   34bd4:	4410      	add	r0, r2
   34bd6:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   34bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   34bdc:	2100      	movs	r1, #0
   34bde:	4610      	mov	r0, r2
   34be0:	f001 bbba 	b.w	36358 <z_set_timeout_expiry>
}
   34be4:	bd10      	pop	{r4, pc}
   34be6:	bf00      	nop
   34be8:	20018a30 	.word	0x20018a30
   34bec:	200189dc 	.word	0x200189dc

00034bf0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   34bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34bf2:	4604      	mov	r4, r0
   34bf4:	460d      	mov	r5, r1
	__asm__ volatile(
   34bf6:	f04f 0320 	mov.w	r3, #32
   34bfa:	f3ef 8611 	mrs	r6, BASEPRI
   34bfe:	f383 8811 	msr	BASEPRI, r3
   34c02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34c06:	4823      	ldr	r0, [pc, #140]	; (34c94 <k_sched_time_slice_set+0xa4>)
   34c08:	f7ff f862 	bl	33cd0 <z_spin_lock_valid>
   34c0c:	b968      	cbnz	r0, 34c2a <k_sched_time_slice_set+0x3a>
   34c0e:	2381      	movs	r3, #129	; 0x81
   34c10:	4a21      	ldr	r2, [pc, #132]	; (34c98 <k_sched_time_slice_set+0xa8>)
   34c12:	4922      	ldr	r1, [pc, #136]	; (34c9c <k_sched_time_slice_set+0xac>)
   34c14:	4822      	ldr	r0, [pc, #136]	; (34ca0 <k_sched_time_slice_set+0xb0>)
   34c16:	f004 fa8c 	bl	39132 <printk>
   34c1a:	491e      	ldr	r1, [pc, #120]	; (34c94 <k_sched_time_slice_set+0xa4>)
   34c1c:	4821      	ldr	r0, [pc, #132]	; (34ca4 <k_sched_time_slice_set+0xb4>)
   34c1e:	f004 fa88 	bl	39132 <printk>
   34c22:	2181      	movs	r1, #129	; 0x81
   34c24:	481c      	ldr	r0, [pc, #112]	; (34c98 <k_sched_time_slice_set+0xa8>)
   34c26:	f004 fd23 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   34c2a:	481a      	ldr	r0, [pc, #104]	; (34c94 <k_sched_time_slice_set+0xa4>)
   34c2c:	f7ff f86e 	bl	33d0c <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   34c30:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   34c34:	2200      	movs	r2, #0
   34c36:	f240 30e7 	movw	r0, #999	; 0x3e7
   34c3a:	2100      	movs	r1, #0
   34c3c:	4b1a      	ldr	r3, [pc, #104]	; (34ca8 <k_sched_time_slice_set+0xb8>)
   34c3e:	fbe7 0104 	umlal	r0, r1, r7, r4
   34c42:	611a      	str	r2, [r3, #16]
   34c44:	2300      	movs	r3, #0
   34c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   34c4a:	f7e8 f92d 	bl	1cea8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   34c4e:	2c00      	cmp	r4, #0
   34c50:	4b16      	ldr	r3, [pc, #88]	; (34cac <k_sched_time_slice_set+0xbc>)
   34c52:	dc1b      	bgt.n	34c8c <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   34c54:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   34c56:	4b16      	ldr	r3, [pc, #88]	; (34cb0 <k_sched_time_slice_set+0xc0>)
   34c58:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   34c5a:	f7ff ffb3 	bl	34bc4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34c5e:	480d      	ldr	r0, [pc, #52]	; (34c94 <k_sched_time_slice_set+0xa4>)
   34c60:	f7ff f844 	bl	33cec <z_spin_unlock_valid>
   34c64:	b968      	cbnz	r0, 34c82 <k_sched_time_slice_set+0x92>
   34c66:	23ac      	movs	r3, #172	; 0xac
   34c68:	4a0b      	ldr	r2, [pc, #44]	; (34c98 <k_sched_time_slice_set+0xa8>)
   34c6a:	4912      	ldr	r1, [pc, #72]	; (34cb4 <k_sched_time_slice_set+0xc4>)
   34c6c:	480c      	ldr	r0, [pc, #48]	; (34ca0 <k_sched_time_slice_set+0xb0>)
   34c6e:	f004 fa60 	bl	39132 <printk>
   34c72:	4908      	ldr	r1, [pc, #32]	; (34c94 <k_sched_time_slice_set+0xa4>)
   34c74:	4810      	ldr	r0, [pc, #64]	; (34cb8 <k_sched_time_slice_set+0xc8>)
   34c76:	f004 fa5c 	bl	39132 <printk>
   34c7a:	21ac      	movs	r1, #172	; 0xac
   34c7c:	4806      	ldr	r0, [pc, #24]	; (34c98 <k_sched_time_slice_set+0xa8>)
   34c7e:	f004 fcf7 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34c82:	f386 8811 	msr	BASEPRI, r6
   34c86:	f3bf 8f6f 	isb	sy
	}
}
   34c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   34c8c:	2802      	cmp	r0, #2
   34c8e:	bfb8      	it	lt
   34c90:	2002      	movlt	r0, #2
   34c92:	e7df      	b.n	34c54 <k_sched_time_slice_set+0x64>
   34c94:	20018a28 	.word	0x20018a28
   34c98:	00040472 	.word	0x00040472
   34c9c:	000404c4 	.word	0x000404c4
   34ca0:	0004033e 	.word	0x0004033e
   34ca4:	000404d9 	.word	0x000404d9
   34ca8:	200189dc 	.word	0x200189dc
   34cac:	20018a30 	.word	0x20018a30
   34cb0:	20018a2c 	.word	0x20018a2c
   34cb4:	00040498 	.word	0x00040498
   34cb8:	000404af 	.word	0x000404af

00034cbc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   34cbc:	b538      	push	{r3, r4, r5, lr}
   34cbe:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   34cc0:	460d      	mov	r5, r1
   34cc2:	b9e9      	cbnz	r1, 34d00 <z_reschedule+0x44>
   34cc4:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   34cc8:	b9d3      	cbnz	r3, 34d00 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   34cca:	4b19      	ldr	r3, [pc, #100]	; (34d30 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   34ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   34cce:	689b      	ldr	r3, [r3, #8]
   34cd0:	429a      	cmp	r2, r3
   34cd2:	d015      	beq.n	34d00 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34cd4:	f7ff f80a 	bl	33cec <z_spin_unlock_valid>
   34cd8:	b968      	cbnz	r0, 34cf6 <z_reschedule+0x3a>
   34cda:	23c3      	movs	r3, #195	; 0xc3
   34cdc:	4a15      	ldr	r2, [pc, #84]	; (34d34 <z_reschedule+0x78>)
   34cde:	4916      	ldr	r1, [pc, #88]	; (34d38 <z_reschedule+0x7c>)
   34ce0:	4816      	ldr	r0, [pc, #88]	; (34d3c <z_reschedule+0x80>)
   34ce2:	f004 fa26 	bl	39132 <printk>
   34ce6:	4621      	mov	r1, r4
   34ce8:	4815      	ldr	r0, [pc, #84]	; (34d40 <z_reschedule+0x84>)
   34cea:	f004 fa22 	bl	39132 <printk>
   34cee:	21c3      	movs	r1, #195	; 0xc3
   34cf0:	4810      	ldr	r0, [pc, #64]	; (34d34 <z_reschedule+0x78>)
   34cf2:	f004 fcbd 	bl	39670 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   34cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   34cfa:	2000      	movs	r0, #0
   34cfc:	f7ee b9f2 	b.w	230e4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34d00:	4620      	mov	r0, r4
   34d02:	f7fe fff3 	bl	33cec <z_spin_unlock_valid>
   34d06:	b968      	cbnz	r0, 34d24 <z_reschedule+0x68>
   34d08:	23ac      	movs	r3, #172	; 0xac
   34d0a:	4a0a      	ldr	r2, [pc, #40]	; (34d34 <z_reschedule+0x78>)
   34d0c:	490a      	ldr	r1, [pc, #40]	; (34d38 <z_reschedule+0x7c>)
   34d0e:	480b      	ldr	r0, [pc, #44]	; (34d3c <z_reschedule+0x80>)
   34d10:	f004 fa0f 	bl	39132 <printk>
   34d14:	4621      	mov	r1, r4
   34d16:	480a      	ldr	r0, [pc, #40]	; (34d40 <z_reschedule+0x84>)
   34d18:	f004 fa0b 	bl	39132 <printk>
   34d1c:	21ac      	movs	r1, #172	; 0xac
   34d1e:	4805      	ldr	r0, [pc, #20]	; (34d34 <z_reschedule+0x78>)
   34d20:	f004 fca6 	bl	39670 <assert_post_action>
   34d24:	f385 8811 	msr	BASEPRI, r5
   34d28:	f3bf 8f6f 	isb	sy
   34d2c:	bd38      	pop	{r3, r4, r5, pc}
   34d2e:	bf00      	nop
   34d30:	200189dc 	.word	0x200189dc
   34d34:	00040472 	.word	0x00040472
   34d38:	00040498 	.word	0x00040498
   34d3c:	0004033e 	.word	0x0004033e
   34d40:	000404af 	.word	0x000404af

00034d44 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   34d44:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   34d46:	f04f 0320 	mov.w	r3, #32
   34d4a:	f3ef 8511 	mrs	r5, BASEPRI
   34d4e:	f383 8811 	msr	BASEPRI, r3
   34d52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34d56:	4829      	ldr	r0, [pc, #164]	; (34dfc <k_sched_lock+0xb8>)
   34d58:	f7fe ffba 	bl	33cd0 <z_spin_lock_valid>
   34d5c:	b968      	cbnz	r0, 34d7a <k_sched_lock+0x36>
   34d5e:	2381      	movs	r3, #129	; 0x81
   34d60:	4a27      	ldr	r2, [pc, #156]	; (34e00 <k_sched_lock+0xbc>)
   34d62:	4928      	ldr	r1, [pc, #160]	; (34e04 <k_sched_lock+0xc0>)
   34d64:	4828      	ldr	r0, [pc, #160]	; (34e08 <k_sched_lock+0xc4>)
   34d66:	f004 f9e4 	bl	39132 <printk>
   34d6a:	4924      	ldr	r1, [pc, #144]	; (34dfc <k_sched_lock+0xb8>)
   34d6c:	4827      	ldr	r0, [pc, #156]	; (34e0c <k_sched_lock+0xc8>)
   34d6e:	f004 f9e0 	bl	39132 <printk>
   34d72:	2181      	movs	r1, #129	; 0x81
   34d74:	4822      	ldr	r0, [pc, #136]	; (34e00 <k_sched_lock+0xbc>)
   34d76:	f004 fc7b 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   34d7a:	4820      	ldr	r0, [pc, #128]	; (34dfc <k_sched_lock+0xb8>)
   34d7c:	f7fe ffc6 	bl	33d0c <z_spin_lock_set_owner>
   34d80:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   34d84:	b163      	cbz	r3, 34da0 <k_sched_lock+0x5c>
   34d86:	4922      	ldr	r1, [pc, #136]	; (34e10 <k_sched_lock+0xcc>)
   34d88:	23fe      	movs	r3, #254	; 0xfe
   34d8a:	4a22      	ldr	r2, [pc, #136]	; (34e14 <k_sched_lock+0xd0>)
   34d8c:	481e      	ldr	r0, [pc, #120]	; (34e08 <k_sched_lock+0xc4>)
   34d8e:	f004 f9d0 	bl	39132 <printk>
   34d92:	4821      	ldr	r0, [pc, #132]	; (34e18 <k_sched_lock+0xd4>)
   34d94:	f004 f9cd 	bl	39132 <printk>
   34d98:	21fe      	movs	r1, #254	; 0xfe
   34d9a:	481e      	ldr	r0, [pc, #120]	; (34e14 <k_sched_lock+0xd0>)
   34d9c:	f004 fc68 	bl	39670 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   34da0:	4c1e      	ldr	r4, [pc, #120]	; (34e1c <k_sched_lock+0xd8>)
   34da2:	68a2      	ldr	r2, [r4, #8]
   34da4:	7bd2      	ldrb	r2, [r2, #15]
   34da6:	2a01      	cmp	r2, #1
   34da8:	d10c      	bne.n	34dc4 <k_sched_lock+0x80>
   34daa:	491d      	ldr	r1, [pc, #116]	; (34e20 <k_sched_lock+0xdc>)
   34dac:	23ff      	movs	r3, #255	; 0xff
   34dae:	4a19      	ldr	r2, [pc, #100]	; (34e14 <k_sched_lock+0xd0>)
   34db0:	4815      	ldr	r0, [pc, #84]	; (34e08 <k_sched_lock+0xc4>)
   34db2:	f004 f9be 	bl	39132 <printk>
   34db6:	4818      	ldr	r0, [pc, #96]	; (34e18 <k_sched_lock+0xd4>)
   34db8:	f004 f9bb 	bl	39132 <printk>
   34dbc:	21ff      	movs	r1, #255	; 0xff
   34dbe:	4815      	ldr	r0, [pc, #84]	; (34e14 <k_sched_lock+0xd0>)
   34dc0:	f004 fc56 	bl	39670 <assert_post_action>
	--_current->base.sched_locked;
   34dc4:	68a2      	ldr	r2, [r4, #8]
   34dc6:	7bd3      	ldrb	r3, [r2, #15]
   34dc8:	3b01      	subs	r3, #1
   34dca:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34dcc:	480b      	ldr	r0, [pc, #44]	; (34dfc <k_sched_lock+0xb8>)
   34dce:	f7fe ff8d 	bl	33cec <z_spin_unlock_valid>
   34dd2:	b968      	cbnz	r0, 34df0 <k_sched_lock+0xac>
   34dd4:	23ac      	movs	r3, #172	; 0xac
   34dd6:	4a0a      	ldr	r2, [pc, #40]	; (34e00 <k_sched_lock+0xbc>)
   34dd8:	4912      	ldr	r1, [pc, #72]	; (34e24 <k_sched_lock+0xe0>)
   34dda:	480b      	ldr	r0, [pc, #44]	; (34e08 <k_sched_lock+0xc4>)
   34ddc:	f004 f9a9 	bl	39132 <printk>
   34de0:	4906      	ldr	r1, [pc, #24]	; (34dfc <k_sched_lock+0xb8>)
   34de2:	4811      	ldr	r0, [pc, #68]	; (34e28 <k_sched_lock+0xe4>)
   34de4:	f004 f9a5 	bl	39132 <printk>
   34de8:	21ac      	movs	r1, #172	; 0xac
   34dea:	4805      	ldr	r0, [pc, #20]	; (34e00 <k_sched_lock+0xbc>)
   34dec:	f004 fc40 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34df0:	f385 8811 	msr	BASEPRI, r5
   34df4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   34df8:	bd38      	pop	{r3, r4, r5, pc}
   34dfa:	bf00      	nop
   34dfc:	20018a28 	.word	0x20018a28
   34e00:	00040472 	.word	0x00040472
   34e04:	000404c4 	.word	0x000404c4
   34e08:	0004033e 	.word	0x0004033e
   34e0c:	000404d9 	.word	0x000404d9
   34e10:	00045c0a 	.word	0x00045c0a
   34e14:	00045cee 	.word	0x00045cee
   34e18:	000408e8 	.word	0x000408e8
   34e1c:	200189dc 	.word	0x200189dc
   34e20:	00045d19 	.word	0x00045d19
   34e24:	00040498 	.word	0x00040498
   34e28:	000404af 	.word	0x000404af

00034e2c <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   34e2c:	4b0c      	ldr	r3, [pc, #48]	; (34e60 <z_priq_dumb_remove+0x34>)
{
   34e2e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   34e30:	4299      	cmp	r1, r3
{
   34e32:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   34e34:	d10b      	bne.n	34e4e <z_priq_dumb_remove+0x22>
   34e36:	490b      	ldr	r1, [pc, #44]	; (34e64 <z_priq_dumb_remove+0x38>)
   34e38:	480b      	ldr	r0, [pc, #44]	; (34e68 <z_priq_dumb_remove+0x3c>)
   34e3a:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   34e3e:	4a0b      	ldr	r2, [pc, #44]	; (34e6c <z_priq_dumb_remove+0x40>)
   34e40:	f004 f977 	bl	39132 <printk>
   34e44:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   34e48:	4808      	ldr	r0, [pc, #32]	; (34e6c <z_priq_dumb_remove+0x40>)
   34e4a:	f004 fc11 	bl	39670 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   34e4e:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   34e52:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   34e54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   34e56:	2300      	movs	r3, #0
	node->prev = NULL;
   34e58:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   34e5c:	bd10      	pop	{r4, pc}
   34e5e:	bf00      	nop
   34e60:	20016c88 	.word	0x20016c88
   34e64:	00045e81 	.word	0x00045e81
   34e68:	0004033e 	.word	0x0004033e
   34e6c:	00045e5f 	.word	0x00045e5f

00034e70 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   34e70:	6883      	ldr	r3, [r0, #8]
{
   34e72:	b510      	push	{r4, lr}
   34e74:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   34e76:	b95b      	cbnz	r3, 34e90 <unpend_thread_no_timeout+0x20>
   34e78:	490b      	ldr	r1, [pc, #44]	; (34ea8 <unpend_thread_no_timeout+0x38>)
   34e7a:	480c      	ldr	r0, [pc, #48]	; (34eac <unpend_thread_no_timeout+0x3c>)
   34e7c:	f240 234f 	movw	r3, #591	; 0x24f
   34e80:	4a0b      	ldr	r2, [pc, #44]	; (34eb0 <unpend_thread_no_timeout+0x40>)
   34e82:	f004 f956 	bl	39132 <printk>
   34e86:	f240 214f 	movw	r1, #591	; 0x24f
   34e8a:	4809      	ldr	r0, [pc, #36]	; (34eb0 <unpend_thread_no_timeout+0x40>)
   34e8c:	f004 fbf0 	bl	39670 <assert_post_action>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   34e90:	4621      	mov	r1, r4
   34e92:	68a0      	ldr	r0, [r4, #8]
   34e94:	f7ff ffca 	bl	34e2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   34e98:	7b63      	ldrb	r3, [r4, #13]
   34e9a:	f023 0302 	bic.w	r3, r3, #2
   34e9e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   34ea0:	2300      	movs	r3, #0
   34ea2:	60a3      	str	r3, [r4, #8]
}
   34ea4:	bd10      	pop	{r4, pc}
   34ea6:	bf00      	nop
   34ea8:	00045ea2 	.word	0x00045ea2
   34eac:	0004033e 	.word	0x0004033e
   34eb0:	00045e5f 	.word	0x00045e5f

00034eb4 <z_unpend_thread>:
{
   34eb4:	b538      	push	{r3, r4, r5, lr}
   34eb6:	4604      	mov	r4, r0
	__asm__ volatile(
   34eb8:	f04f 0320 	mov.w	r3, #32
   34ebc:	f3ef 8511 	mrs	r5, BASEPRI
   34ec0:	f383 8811 	msr	BASEPRI, r3
   34ec4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34ec8:	4819      	ldr	r0, [pc, #100]	; (34f30 <z_unpend_thread+0x7c>)
   34eca:	f7fe ff01 	bl	33cd0 <z_spin_lock_valid>
   34ece:	b968      	cbnz	r0, 34eec <z_unpend_thread+0x38>
   34ed0:	2381      	movs	r3, #129	; 0x81
   34ed2:	4a18      	ldr	r2, [pc, #96]	; (34f34 <z_unpend_thread+0x80>)
   34ed4:	4918      	ldr	r1, [pc, #96]	; (34f38 <z_unpend_thread+0x84>)
   34ed6:	4819      	ldr	r0, [pc, #100]	; (34f3c <z_unpend_thread+0x88>)
   34ed8:	f004 f92b 	bl	39132 <printk>
   34edc:	4914      	ldr	r1, [pc, #80]	; (34f30 <z_unpend_thread+0x7c>)
   34ede:	4818      	ldr	r0, [pc, #96]	; (34f40 <z_unpend_thread+0x8c>)
   34ee0:	f004 f927 	bl	39132 <printk>
   34ee4:	2181      	movs	r1, #129	; 0x81
   34ee6:	4813      	ldr	r0, [pc, #76]	; (34f34 <z_unpend_thread+0x80>)
   34ee8:	f004 fbc2 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   34eec:	4810      	ldr	r0, [pc, #64]	; (34f30 <z_unpend_thread+0x7c>)
   34eee:	f7fe ff0d 	bl	33d0c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   34ef2:	4620      	mov	r0, r4
   34ef4:	f7ff ffbc 	bl	34e70 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34ef8:	480d      	ldr	r0, [pc, #52]	; (34f30 <z_unpend_thread+0x7c>)
   34efa:	f7fe fef7 	bl	33cec <z_spin_unlock_valid>
   34efe:	b968      	cbnz	r0, 34f1c <z_unpend_thread+0x68>
   34f00:	23ac      	movs	r3, #172	; 0xac
   34f02:	4a0c      	ldr	r2, [pc, #48]	; (34f34 <z_unpend_thread+0x80>)
   34f04:	490f      	ldr	r1, [pc, #60]	; (34f44 <z_unpend_thread+0x90>)
   34f06:	480d      	ldr	r0, [pc, #52]	; (34f3c <z_unpend_thread+0x88>)
   34f08:	f004 f913 	bl	39132 <printk>
   34f0c:	4908      	ldr	r1, [pc, #32]	; (34f30 <z_unpend_thread+0x7c>)
   34f0e:	480e      	ldr	r0, [pc, #56]	; (34f48 <z_unpend_thread+0x94>)
   34f10:	f004 f90f 	bl	39132 <printk>
   34f14:	21ac      	movs	r1, #172	; 0xac
   34f16:	4807      	ldr	r0, [pc, #28]	; (34f34 <z_unpend_thread+0x80>)
   34f18:	f004 fbaa 	bl	39670 <assert_post_action>
	__asm__ volatile(
   34f1c:	f385 8811 	msr	BASEPRI, r5
   34f20:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   34f24:	f104 0018 	add.w	r0, r4, #24
}
   34f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   34f2c:	f001 b97e 	b.w	3622c <z_abort_timeout>
   34f30:	20018a28 	.word	0x20018a28
   34f34:	00040472 	.word	0x00040472
   34f38:	000404c4 	.word	0x000404c4
   34f3c:	0004033e 	.word	0x0004033e
   34f40:	000404d9 	.word	0x000404d9
   34f44:	00040498 	.word	0x00040498
   34f48:	000404af 	.word	0x000404af

00034f4c <update_cache>:
{
   34f4c:	b538      	push	{r3, r4, r5, lr}
   34f4e:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   34f50:	4814      	ldr	r0, [pc, #80]	; (34fa4 <update_cache+0x58>)
   34f52:	f008 ff37 	bl	3ddc4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   34f56:	4d14      	ldr	r5, [pc, #80]	; (34fa8 <update_cache+0x5c>)
   34f58:	4604      	mov	r4, r0
   34f5a:	b900      	cbnz	r0, 34f5e <update_cache+0x12>
   34f5c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   34f5e:	b9ca      	cbnz	r2, 34f94 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   34f60:	68ab      	ldr	r3, [r5, #8]
   34f62:	b963      	cbnz	r3, 34f7e <update_cache+0x32>
   34f64:	4911      	ldr	r1, [pc, #68]	; (34fac <update_cache+0x60>)
   34f66:	2385      	movs	r3, #133	; 0x85
   34f68:	4a11      	ldr	r2, [pc, #68]	; (34fb0 <update_cache+0x64>)
   34f6a:	4812      	ldr	r0, [pc, #72]	; (34fb4 <update_cache+0x68>)
   34f6c:	f004 f8e1 	bl	39132 <printk>
   34f70:	4811      	ldr	r0, [pc, #68]	; (34fb8 <update_cache+0x6c>)
   34f72:	f004 f8de 	bl	39132 <printk>
   34f76:	2185      	movs	r1, #133	; 0x85
   34f78:	480d      	ldr	r0, [pc, #52]	; (34fb0 <update_cache+0x64>)
   34f7a:	f004 fb79 	bl	39670 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   34f7e:	68ab      	ldr	r3, [r5, #8]
   34f80:	7b5a      	ldrb	r2, [r3, #13]
   34f82:	06d2      	lsls	r2, r2, #27
   34f84:	d106      	bne.n	34f94 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   34f86:	69a2      	ldr	r2, [r4, #24]
   34f88:	b922      	cbnz	r2, 34f94 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   34f8a:	89da      	ldrh	r2, [r3, #14]
   34f8c:	2a7f      	cmp	r2, #127	; 0x7f
   34f8e:	d901      	bls.n	34f94 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   34f90:	626b      	str	r3, [r5, #36]	; 0x24
}
   34f92:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   34f94:	68ab      	ldr	r3, [r5, #8]
   34f96:	42a3      	cmp	r3, r4
   34f98:	d001      	beq.n	34f9e <update_cache+0x52>
			z_reset_time_slice();
   34f9a:	f7ff fe13 	bl	34bc4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   34f9e:	626c      	str	r4, [r5, #36]	; 0x24
}
   34fa0:	e7f7      	b.n	34f92 <update_cache+0x46>
   34fa2:	bf00      	nop
   34fa4:	20018a04 	.word	0x20018a04
   34fa8:	200189dc 	.word	0x200189dc
   34fac:	00045eb9 	.word	0x00045eb9
   34fb0:	00045e5f 	.word	0x00045e5f
   34fb4:	0004033e 	.word	0x0004033e
   34fb8:	000408e8 	.word	0x000408e8

00034fbc <unready_thread>:
{
   34fbc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   34fbe:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   34fc2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   34fc4:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   34fc6:	7b43      	ldrb	r3, [r0, #13]
   34fc8:	da06      	bge.n	34fd8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   34fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   34fce:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   34fd0:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   34fd2:	4806      	ldr	r0, [pc, #24]	; (34fec <unready_thread+0x30>)
   34fd4:	f7ff ff2a 	bl	34e2c <z_priq_dumb_remove>
	update_cache(thread == _current);
   34fd8:	4b05      	ldr	r3, [pc, #20]	; (34ff0 <unready_thread+0x34>)
   34fda:	6898      	ldr	r0, [r3, #8]
   34fdc:	1b03      	subs	r3, r0, r4
   34fde:	4258      	negs	r0, r3
   34fe0:	4158      	adcs	r0, r3
}
   34fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   34fe6:	f7ff bfb1 	b.w	34f4c <update_cache>
   34fea:	bf00      	nop
   34fec:	20018a04 	.word	0x20018a04
   34ff0:	200189dc 	.word	0x200189dc

00034ff4 <add_to_waitq_locked>:
{
   34ff4:	b538      	push	{r3, r4, r5, lr}
   34ff6:	4604      	mov	r4, r0
   34ff8:	460d      	mov	r5, r1
	unready_thread(thread);
   34ffa:	f7ff ffdf 	bl	34fbc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   34ffe:	7b63      	ldrb	r3, [r4, #13]
   35000:	f043 0302 	orr.w	r3, r3, #2
   35004:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   35006:	b32d      	cbz	r5, 35054 <add_to_waitq_locked+0x60>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   35008:	4b18      	ldr	r3, [pc, #96]	; (3506c <add_to_waitq_locked+0x78>)
		thread->base.pended_on = wait_q;
   3500a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3500c:	429c      	cmp	r4, r3
   3500e:	d10b      	bne.n	35028 <add_to_waitq_locked+0x34>
   35010:	4917      	ldr	r1, [pc, #92]	; (35070 <add_to_waitq_locked+0x7c>)
   35012:	4818      	ldr	r0, [pc, #96]	; (35074 <add_to_waitq_locked+0x80>)
   35014:	f240 33b5 	movw	r3, #949	; 0x3b5
   35018:	4a17      	ldr	r2, [pc, #92]	; (35078 <add_to_waitq_locked+0x84>)
   3501a:	f004 f88a 	bl	39132 <printk>
   3501e:	f240 31b5 	movw	r1, #949	; 0x3b5
   35022:	4815      	ldr	r0, [pc, #84]	; (35078 <add_to_waitq_locked+0x84>)
   35024:	f004 fb24 	bl	39670 <assert_post_action>
	return list->head == list;
   35028:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3502a:	429d      	cmp	r5, r3
   3502c:	bf08      	it	eq
   3502e:	2300      	moveq	r3, #0
   35030:	2b00      	cmp	r3, #0
   35032:	bf38      	it	cc
   35034:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   35036:	b19b      	cbz	r3, 35060 <add_to_waitq_locked+0x6c>
	int32_t b1 = thread_1->base.prio;
   35038:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   3503c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   35040:	4291      	cmp	r1, r2
   35042:	d008      	beq.n	35056 <add_to_waitq_locked+0x62>
		return b2 - b1;
   35044:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   35046:	2a00      	cmp	r2, #0
   35048:	dd05      	ble.n	35056 <add_to_waitq_locked+0x62>
	sys_dnode_t *const prev = successor->prev;
   3504a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3504c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   35050:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   35052:	605c      	str	r4, [r3, #4]
}
   35054:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   35056:	686a      	ldr	r2, [r5, #4]
   35058:	4293      	cmp	r3, r2
   3505a:	d001      	beq.n	35060 <add_to_waitq_locked+0x6c>
   3505c:	681b      	ldr	r3, [r3, #0]
   3505e:	e7ea      	b.n	35036 <add_to_waitq_locked+0x42>
	sys_dnode_t *const tail = list->tail;
   35060:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   35062:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   35066:	601c      	str	r4, [r3, #0]
	list->tail = node;
   35068:	606c      	str	r4, [r5, #4]
   3506a:	e7f3      	b.n	35054 <add_to_waitq_locked+0x60>
   3506c:	20016c88 	.word	0x20016c88
   35070:	00045e81 	.word	0x00045e81
   35074:	0004033e 	.word	0x0004033e
   35078:	00045e5f 	.word	0x00045e5f

0003507c <pend>:
{
   3507c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35080:	4604      	mov	r4, r0
   35082:	460d      	mov	r5, r1
   35084:	4616      	mov	r6, r2
   35086:	461f      	mov	r7, r3
	__asm__ volatile(
   35088:	f04f 0320 	mov.w	r3, #32
   3508c:	f3ef 8811 	mrs	r8, BASEPRI
   35090:	f383 8811 	msr	BASEPRI, r3
   35094:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35098:	481f      	ldr	r0, [pc, #124]	; (35118 <pend+0x9c>)
   3509a:	f7fe fe19 	bl	33cd0 <z_spin_lock_valid>
   3509e:	b968      	cbnz	r0, 350bc <pend+0x40>
   350a0:	2381      	movs	r3, #129	; 0x81
   350a2:	4a1e      	ldr	r2, [pc, #120]	; (3511c <pend+0xa0>)
   350a4:	491e      	ldr	r1, [pc, #120]	; (35120 <pend+0xa4>)
   350a6:	481f      	ldr	r0, [pc, #124]	; (35124 <pend+0xa8>)
   350a8:	f004 f843 	bl	39132 <printk>
   350ac:	491a      	ldr	r1, [pc, #104]	; (35118 <pend+0x9c>)
   350ae:	481e      	ldr	r0, [pc, #120]	; (35128 <pend+0xac>)
   350b0:	f004 f83f 	bl	39132 <printk>
   350b4:	2181      	movs	r1, #129	; 0x81
   350b6:	4819      	ldr	r0, [pc, #100]	; (3511c <pend+0xa0>)
   350b8:	f004 fada 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   350bc:	4816      	ldr	r0, [pc, #88]	; (35118 <pend+0x9c>)
   350be:	f7fe fe25 	bl	33d0c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   350c2:	4620      	mov	r0, r4
   350c4:	4629      	mov	r1, r5
   350c6:	f7ff ff95 	bl	34ff4 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   350ca:	4813      	ldr	r0, [pc, #76]	; (35118 <pend+0x9c>)
   350cc:	f7fe fe0e 	bl	33cec <z_spin_unlock_valid>
   350d0:	b968      	cbnz	r0, 350ee <pend+0x72>
   350d2:	23ac      	movs	r3, #172	; 0xac
   350d4:	4a11      	ldr	r2, [pc, #68]	; (3511c <pend+0xa0>)
   350d6:	4915      	ldr	r1, [pc, #84]	; (3512c <pend+0xb0>)
   350d8:	4812      	ldr	r0, [pc, #72]	; (35124 <pend+0xa8>)
   350da:	f004 f82a 	bl	39132 <printk>
   350de:	490e      	ldr	r1, [pc, #56]	; (35118 <pend+0x9c>)
   350e0:	4813      	ldr	r0, [pc, #76]	; (35130 <pend+0xb4>)
   350e2:	f004 f826 	bl	39132 <printk>
   350e6:	21ac      	movs	r1, #172	; 0xac
   350e8:	480c      	ldr	r0, [pc, #48]	; (3511c <pend+0xa0>)
   350ea:	f004 fac1 	bl	39670 <assert_post_action>
	__asm__ volatile(
   350ee:	f388 8811 	msr	BASEPRI, r8
   350f2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   350f6:	1c7b      	adds	r3, r7, #1
   350f8:	bf08      	it	eq
   350fa:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   350fe:	d008      	beq.n	35112 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   35100:	4632      	mov	r2, r6
   35102:	463b      	mov	r3, r7
   35104:	f104 0018 	add.w	r0, r4, #24
   35108:	490a      	ldr	r1, [pc, #40]	; (35134 <pend+0xb8>)
}
   3510a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3510e:	f000 bfb9 	b.w	36084 <z_add_timeout>
   35112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35116:	bf00      	nop
   35118:	20018a28 	.word	0x20018a28
   3511c:	00040472 	.word	0x00040472
   35120:	000404c4 	.word	0x000404c4
   35124:	0004033e 	.word	0x0004033e
   35128:	000404d9 	.word	0x000404d9
   3512c:	00040498 	.word	0x00040498
   35130:	000404af 	.word	0x000404af
   35134:	0003578d 	.word	0x0003578d

00035138 <z_pend_curr>:
{
   35138:	b538      	push	{r3, r4, r5, lr}
   3513a:	4604      	mov	r4, r0
	pending_current = _current;
   3513c:	4b10      	ldr	r3, [pc, #64]	; (35180 <z_pend_curr+0x48>)
{
   3513e:	460d      	mov	r5, r1
	pending_current = _current;
   35140:	6898      	ldr	r0, [r3, #8]
   35142:	4b10      	ldr	r3, [pc, #64]	; (35184 <z_pend_curr+0x4c>)
{
   35144:	4611      	mov	r1, r2
	pending_current = _current;
   35146:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   35148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3514c:	f7ff ff96 	bl	3507c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35150:	4620      	mov	r0, r4
   35152:	f7fe fdcb 	bl	33cec <z_spin_unlock_valid>
   35156:	b968      	cbnz	r0, 35174 <z_pend_curr+0x3c>
   35158:	23c3      	movs	r3, #195	; 0xc3
   3515a:	4a0b      	ldr	r2, [pc, #44]	; (35188 <z_pend_curr+0x50>)
   3515c:	490b      	ldr	r1, [pc, #44]	; (3518c <z_pend_curr+0x54>)
   3515e:	480c      	ldr	r0, [pc, #48]	; (35190 <z_pend_curr+0x58>)
   35160:	f003 ffe7 	bl	39132 <printk>
   35164:	4621      	mov	r1, r4
   35166:	480b      	ldr	r0, [pc, #44]	; (35194 <z_pend_curr+0x5c>)
   35168:	f003 ffe3 	bl	39132 <printk>
   3516c:	21c3      	movs	r1, #195	; 0xc3
   3516e:	4806      	ldr	r0, [pc, #24]	; (35188 <z_pend_curr+0x50>)
   35170:	f004 fa7e 	bl	39670 <assert_post_action>
   35174:	4628      	mov	r0, r5
}
   35176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3517a:	f7ed bfb3 	b.w	230e4 <arch_swap>
   3517e:	bf00      	nop
   35180:	200189dc 	.word	0x200189dc
   35184:	20018a24 	.word	0x20018a24
   35188:	00040472 	.word	0x00040472
   3518c:	00040498 	.word	0x00040498
   35190:	0004033e 	.word	0x0004033e
   35194:	000404af 	.word	0x000404af

00035198 <z_impl_k_thread_suspend>:
{
   35198:	b570      	push	{r4, r5, r6, lr}
   3519a:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   3519c:	3018      	adds	r0, #24
   3519e:	f001 f845 	bl	3622c <z_abort_timeout>
	__asm__ volatile(
   351a2:	f04f 0320 	mov.w	r3, #32
   351a6:	f3ef 8611 	mrs	r6, BASEPRI
   351aa:	f383 8811 	msr	BASEPRI, r3
   351ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   351b2:	4825      	ldr	r0, [pc, #148]	; (35248 <z_impl_k_thread_suspend+0xb0>)
   351b4:	f7fe fd8c 	bl	33cd0 <z_spin_lock_valid>
   351b8:	b968      	cbnz	r0, 351d6 <z_impl_k_thread_suspend+0x3e>
   351ba:	2381      	movs	r3, #129	; 0x81
   351bc:	4a23      	ldr	r2, [pc, #140]	; (3524c <z_impl_k_thread_suspend+0xb4>)
   351be:	4924      	ldr	r1, [pc, #144]	; (35250 <z_impl_k_thread_suspend+0xb8>)
   351c0:	4824      	ldr	r0, [pc, #144]	; (35254 <z_impl_k_thread_suspend+0xbc>)
   351c2:	f003 ffb6 	bl	39132 <printk>
   351c6:	4920      	ldr	r1, [pc, #128]	; (35248 <z_impl_k_thread_suspend+0xb0>)
   351c8:	4823      	ldr	r0, [pc, #140]	; (35258 <z_impl_k_thread_suspend+0xc0>)
   351ca:	f003 ffb2 	bl	39132 <printk>
   351ce:	2181      	movs	r1, #129	; 0x81
   351d0:	481e      	ldr	r0, [pc, #120]	; (3524c <z_impl_k_thread_suspend+0xb4>)
   351d2:	f004 fa4d 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   351d6:	481c      	ldr	r0, [pc, #112]	; (35248 <z_impl_k_thread_suspend+0xb0>)
   351d8:	f7fe fd98 	bl	33d0c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   351dc:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   351e0:	7b63      	ldrb	r3, [r4, #13]
   351e2:	2a00      	cmp	r2, #0
   351e4:	da06      	bge.n	351f4 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   351e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   351ea:	4621      	mov	r1, r4
   351ec:	481b      	ldr	r0, [pc, #108]	; (3525c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   351ee:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   351f0:	f7ff fe1c 	bl	34e2c <z_priq_dumb_remove>
		update_cache(thread == _current);
   351f4:	4d1a      	ldr	r5, [pc, #104]	; (35260 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   351f6:	7b63      	ldrb	r3, [r4, #13]
   351f8:	68a8      	ldr	r0, [r5, #8]
   351fa:	f043 0310 	orr.w	r3, r3, #16
   351fe:	7363      	strb	r3, [r4, #13]
   35200:	1b03      	subs	r3, r0, r4
   35202:	4258      	negs	r0, r3
   35204:	4158      	adcs	r0, r3
   35206:	f7ff fea1 	bl	34f4c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3520a:	480f      	ldr	r0, [pc, #60]	; (35248 <z_impl_k_thread_suspend+0xb0>)
   3520c:	f7fe fd6e 	bl	33cec <z_spin_unlock_valid>
   35210:	b968      	cbnz	r0, 3522e <z_impl_k_thread_suspend+0x96>
   35212:	23ac      	movs	r3, #172	; 0xac
   35214:	4a0d      	ldr	r2, [pc, #52]	; (3524c <z_impl_k_thread_suspend+0xb4>)
   35216:	4913      	ldr	r1, [pc, #76]	; (35264 <z_impl_k_thread_suspend+0xcc>)
   35218:	480e      	ldr	r0, [pc, #56]	; (35254 <z_impl_k_thread_suspend+0xbc>)
   3521a:	f003 ff8a 	bl	39132 <printk>
   3521e:	490a      	ldr	r1, [pc, #40]	; (35248 <z_impl_k_thread_suspend+0xb0>)
   35220:	4811      	ldr	r0, [pc, #68]	; (35268 <z_impl_k_thread_suspend+0xd0>)
   35222:	f003 ff86 	bl	39132 <printk>
   35226:	21ac      	movs	r1, #172	; 0xac
   35228:	4808      	ldr	r0, [pc, #32]	; (3524c <z_impl_k_thread_suspend+0xb4>)
   3522a:	f004 fa21 	bl	39670 <assert_post_action>
	__asm__ volatile(
   3522e:	f386 8811 	msr	BASEPRI, r6
   35232:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   35236:	68ab      	ldr	r3, [r5, #8]
   35238:	42a3      	cmp	r3, r4
   3523a:	d103      	bne.n	35244 <z_impl_k_thread_suspend+0xac>
}
   3523c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   35240:	f008 bdb6 	b.w	3ddb0 <z_reschedule_unlocked>
}
   35244:	bd70      	pop	{r4, r5, r6, pc}
   35246:	bf00      	nop
   35248:	20018a28 	.word	0x20018a28
   3524c:	00040472 	.word	0x00040472
   35250:	000404c4 	.word	0x000404c4
   35254:	0004033e 	.word	0x0004033e
   35258:	000404d9 	.word	0x000404d9
   3525c:	20018a04 	.word	0x20018a04
   35260:	200189dc 	.word	0x200189dc
   35264:	00040498 	.word	0x00040498
   35268:	000404af 	.word	0x000404af

0003526c <k_sched_unlock>:
{
   3526c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3526e:	f04f 0320 	mov.w	r3, #32
   35272:	f3ef 8511 	mrs	r5, BASEPRI
   35276:	f383 8811 	msr	BASEPRI, r3
   3527a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3527e:	482d      	ldr	r0, [pc, #180]	; (35334 <k_sched_unlock+0xc8>)
   35280:	f7fe fd26 	bl	33cd0 <z_spin_lock_valid>
   35284:	b968      	cbnz	r0, 352a2 <k_sched_unlock+0x36>
   35286:	2381      	movs	r3, #129	; 0x81
   35288:	4a2b      	ldr	r2, [pc, #172]	; (35338 <k_sched_unlock+0xcc>)
   3528a:	492c      	ldr	r1, [pc, #176]	; (3533c <k_sched_unlock+0xd0>)
   3528c:	482c      	ldr	r0, [pc, #176]	; (35340 <k_sched_unlock+0xd4>)
   3528e:	f003 ff50 	bl	39132 <printk>
   35292:	4928      	ldr	r1, [pc, #160]	; (35334 <k_sched_unlock+0xc8>)
   35294:	482b      	ldr	r0, [pc, #172]	; (35344 <k_sched_unlock+0xd8>)
   35296:	f003 ff4c 	bl	39132 <printk>
   3529a:	2181      	movs	r1, #129	; 0x81
   3529c:	4826      	ldr	r0, [pc, #152]	; (35338 <k_sched_unlock+0xcc>)
   3529e:	f004 f9e7 	bl	39670 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   352a2:	4c29      	ldr	r4, [pc, #164]	; (35348 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   352a4:	4823      	ldr	r0, [pc, #140]	; (35334 <k_sched_unlock+0xc8>)
   352a6:	f7fe fd31 	bl	33d0c <z_spin_lock_set_owner>
   352aa:	68a2      	ldr	r2, [r4, #8]
   352ac:	7bd2      	ldrb	r2, [r2, #15]
   352ae:	b972      	cbnz	r2, 352ce <k_sched_unlock+0x62>
   352b0:	4926      	ldr	r1, [pc, #152]	; (3534c <k_sched_unlock+0xe0>)
   352b2:	f240 3352 	movw	r3, #850	; 0x352
   352b6:	4a26      	ldr	r2, [pc, #152]	; (35350 <k_sched_unlock+0xe4>)
   352b8:	4821      	ldr	r0, [pc, #132]	; (35340 <k_sched_unlock+0xd4>)
   352ba:	f003 ff3a 	bl	39132 <printk>
   352be:	4825      	ldr	r0, [pc, #148]	; (35354 <k_sched_unlock+0xe8>)
   352c0:	f003 ff37 	bl	39132 <printk>
   352c4:	f240 3152 	movw	r1, #850	; 0x352
   352c8:	4821      	ldr	r0, [pc, #132]	; (35350 <k_sched_unlock+0xe4>)
   352ca:	f004 f9d1 	bl	39670 <assert_post_action>
   352ce:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   352d2:	b173      	cbz	r3, 352f2 <k_sched_unlock+0x86>
   352d4:	4920      	ldr	r1, [pc, #128]	; (35358 <k_sched_unlock+0xec>)
   352d6:	f240 3353 	movw	r3, #851	; 0x353
   352da:	4a1d      	ldr	r2, [pc, #116]	; (35350 <k_sched_unlock+0xe4>)
   352dc:	4818      	ldr	r0, [pc, #96]	; (35340 <k_sched_unlock+0xd4>)
   352de:	f003 ff28 	bl	39132 <printk>
   352e2:	481c      	ldr	r0, [pc, #112]	; (35354 <k_sched_unlock+0xe8>)
   352e4:	f003 ff25 	bl	39132 <printk>
   352e8:	f240 3153 	movw	r1, #851	; 0x353
   352ec:	4818      	ldr	r0, [pc, #96]	; (35350 <k_sched_unlock+0xe4>)
   352ee:	f004 f9bf 	bl	39670 <assert_post_action>
		++_current->base.sched_locked;
   352f2:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   352f4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   352f6:	7bd3      	ldrb	r3, [r2, #15]
   352f8:	3301      	adds	r3, #1
   352fa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   352fc:	f7ff fe26 	bl	34f4c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35300:	480c      	ldr	r0, [pc, #48]	; (35334 <k_sched_unlock+0xc8>)
   35302:	f7fe fcf3 	bl	33cec <z_spin_unlock_valid>
   35306:	b968      	cbnz	r0, 35324 <k_sched_unlock+0xb8>
   35308:	23ac      	movs	r3, #172	; 0xac
   3530a:	4a0b      	ldr	r2, [pc, #44]	; (35338 <k_sched_unlock+0xcc>)
   3530c:	4913      	ldr	r1, [pc, #76]	; (3535c <k_sched_unlock+0xf0>)
   3530e:	480c      	ldr	r0, [pc, #48]	; (35340 <k_sched_unlock+0xd4>)
   35310:	f003 ff0f 	bl	39132 <printk>
   35314:	4907      	ldr	r1, [pc, #28]	; (35334 <k_sched_unlock+0xc8>)
   35316:	4812      	ldr	r0, [pc, #72]	; (35360 <k_sched_unlock+0xf4>)
   35318:	f003 ff0b 	bl	39132 <printk>
   3531c:	21ac      	movs	r1, #172	; 0xac
   3531e:	4806      	ldr	r0, [pc, #24]	; (35338 <k_sched_unlock+0xcc>)
   35320:	f004 f9a6 	bl	39670 <assert_post_action>
	__asm__ volatile(
   35324:	f385 8811 	msr	BASEPRI, r5
   35328:	f3bf 8f6f 	isb	sy
}
   3532c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   35330:	f008 bd3e 	b.w	3ddb0 <z_reschedule_unlocked>
   35334:	20018a28 	.word	0x20018a28
   35338:	00040472 	.word	0x00040472
   3533c:	000404c4 	.word	0x000404c4
   35340:	0004033e 	.word	0x0004033e
   35344:	000404d9 	.word	0x000404d9
   35348:	200189dc 	.word	0x200189dc
   3534c:	00045ee0 	.word	0x00045ee0
   35350:	00045e5f 	.word	0x00045e5f
   35354:	000408e8 	.word	0x000408e8
   35358:	00045c0a 	.word	0x00045c0a
   3535c:	00040498 	.word	0x00040498
   35360:	000404af 	.word	0x000404af

00035364 <move_thread_to_end_of_prio_q>:
{
   35364:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   35366:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   3536a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   3536c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   3536e:	7b43      	ldrb	r3, [r0, #13]
   35370:	da06      	bge.n	35380 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   35376:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35378:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   3537a:	4820      	ldr	r0, [pc, #128]	; (353fc <move_thread_to_end_of_prio_q+0x98>)
   3537c:	f7ff fd56 	bl	34e2c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   35380:	7b63      	ldrb	r3, [r4, #13]
   35382:	f063 037f 	orn	r3, r3, #127	; 0x7f
   35386:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   35388:	4b1d      	ldr	r3, [pc, #116]	; (35400 <move_thread_to_end_of_prio_q+0x9c>)
   3538a:	429c      	cmp	r4, r3
   3538c:	d10b      	bne.n	353a6 <move_thread_to_end_of_prio_q+0x42>
   3538e:	491d      	ldr	r1, [pc, #116]	; (35404 <move_thread_to_end_of_prio_q+0xa0>)
   35390:	481d      	ldr	r0, [pc, #116]	; (35408 <move_thread_to_end_of_prio_q+0xa4>)
   35392:	f240 33b5 	movw	r3, #949	; 0x3b5
   35396:	4a1d      	ldr	r2, [pc, #116]	; (3540c <move_thread_to_end_of_prio_q+0xa8>)
   35398:	f003 fecb 	bl	39132 <printk>
   3539c:	f240 31b5 	movw	r1, #949	; 0x3b5
   353a0:	481a      	ldr	r0, [pc, #104]	; (3540c <move_thread_to_end_of_prio_q+0xa8>)
   353a2:	f004 f965 	bl	39670 <assert_post_action>
	return list->head == list;
   353a6:	4a1a      	ldr	r2, [pc, #104]	; (35410 <move_thread_to_end_of_prio_q+0xac>)
   353a8:	4611      	mov	r1, r2
   353aa:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   353ae:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   353b0:	428b      	cmp	r3, r1
   353b2:	bf08      	it	eq
   353b4:	2300      	moveq	r3, #0
   353b6:	2b00      	cmp	r3, #0
   353b8:	bf38      	it	cc
   353ba:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   353bc:	b1cb      	cbz	r3, 353f2 <move_thread_to_end_of_prio_q+0x8e>
	int32_t b1 = thread_1->base.prio;
   353be:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   353c2:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   353c6:	4286      	cmp	r6, r0
   353c8:	d00f      	beq.n	353ea <move_thread_to_end_of_prio_q+0x86>
		return b2 - b1;
   353ca:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   353cc:	2800      	cmp	r0, #0
   353ce:	dd0c      	ble.n	353ea <move_thread_to_end_of_prio_q+0x86>
	sys_dnode_t *const prev = successor->prev;
   353d0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   353d2:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   353d6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   353d8:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   353da:	6890      	ldr	r0, [r2, #8]
   353dc:	1b03      	subs	r3, r0, r4
   353de:	4258      	negs	r0, r3
   353e0:	4158      	adcs	r0, r3
}
   353e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   353e6:	f7ff bdb1 	b.w	34f4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   353ea:	42ab      	cmp	r3, r5
   353ec:	d001      	beq.n	353f2 <move_thread_to_end_of_prio_q+0x8e>
   353ee:	681b      	ldr	r3, [r3, #0]
   353f0:	e7e4      	b.n	353bc <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   353f2:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   353f6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   353f8:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   353fa:	e7ee      	b.n	353da <move_thread_to_end_of_prio_q+0x76>
   353fc:	20018a04 	.word	0x20018a04
   35400:	20016c88 	.word	0x20016c88
   35404:	00045e81 	.word	0x00045e81
   35408:	0004033e 	.word	0x0004033e
   3540c:	00045e5f 	.word	0x00045e5f
   35410:	200189dc 	.word	0x200189dc

00035414 <z_time_slice>:
{
   35414:	b570      	push	{r4, r5, r6, lr}
   35416:	4604      	mov	r4, r0
	__asm__ volatile(
   35418:	f04f 0320 	mov.w	r3, #32
   3541c:	f3ef 8511 	mrs	r5, BASEPRI
   35420:	f383 8811 	msr	BASEPRI, r3
   35424:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35428:	482a      	ldr	r0, [pc, #168]	; (354d4 <z_time_slice+0xc0>)
   3542a:	f7fe fc51 	bl	33cd0 <z_spin_lock_valid>
   3542e:	b968      	cbnz	r0, 3544c <z_time_slice+0x38>
   35430:	2381      	movs	r3, #129	; 0x81
   35432:	4a29      	ldr	r2, [pc, #164]	; (354d8 <z_time_slice+0xc4>)
   35434:	4929      	ldr	r1, [pc, #164]	; (354dc <z_time_slice+0xc8>)
   35436:	482a      	ldr	r0, [pc, #168]	; (354e0 <z_time_slice+0xcc>)
   35438:	f003 fe7b 	bl	39132 <printk>
   3543c:	4925      	ldr	r1, [pc, #148]	; (354d4 <z_time_slice+0xc0>)
   3543e:	4829      	ldr	r0, [pc, #164]	; (354e4 <z_time_slice+0xd0>)
   35440:	f003 fe77 	bl	39132 <printk>
   35444:	2181      	movs	r1, #129	; 0x81
   35446:	4824      	ldr	r0, [pc, #144]	; (354d8 <z_time_slice+0xc4>)
   35448:	f004 f912 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   3544c:	4821      	ldr	r0, [pc, #132]	; (354d4 <z_time_slice+0xc0>)
   3544e:	f7fe fc5d 	bl	33d0c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   35452:	4b25      	ldr	r3, [pc, #148]	; (354e8 <z_time_slice+0xd4>)
   35454:	4a25      	ldr	r2, [pc, #148]	; (354ec <z_time_slice+0xd8>)
   35456:	6898      	ldr	r0, [r3, #8]
   35458:	6811      	ldr	r1, [r2, #0]
   3545a:	4288      	cmp	r0, r1
   3545c:	4619      	mov	r1, r3
   3545e:	d118      	bne.n	35492 <z_time_slice+0x7e>
			z_reset_time_slice();
   35460:	f7ff fbb0 	bl	34bc4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35464:	481b      	ldr	r0, [pc, #108]	; (354d4 <z_time_slice+0xc0>)
   35466:	f7fe fc41 	bl	33cec <z_spin_unlock_valid>
   3546a:	b968      	cbnz	r0, 35488 <z_time_slice+0x74>
   3546c:	23ac      	movs	r3, #172	; 0xac
   3546e:	4a1a      	ldr	r2, [pc, #104]	; (354d8 <z_time_slice+0xc4>)
   35470:	491f      	ldr	r1, [pc, #124]	; (354f0 <z_time_slice+0xdc>)
   35472:	481b      	ldr	r0, [pc, #108]	; (354e0 <z_time_slice+0xcc>)
   35474:	f003 fe5d 	bl	39132 <printk>
   35478:	4916      	ldr	r1, [pc, #88]	; (354d4 <z_time_slice+0xc0>)
   3547a:	481e      	ldr	r0, [pc, #120]	; (354f4 <z_time_slice+0xe0>)
   3547c:	f003 fe59 	bl	39132 <printk>
   35480:	21ac      	movs	r1, #172	; 0xac
   35482:	4815      	ldr	r0, [pc, #84]	; (354d8 <z_time_slice+0xc4>)
   35484:	f004 f8f4 	bl	39670 <assert_post_action>
	__asm__ volatile(
   35488:	f385 8811 	msr	BASEPRI, r5
   3548c:	f3bf 8f6f 	isb	sy
}
   35490:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   35492:	2600      	movs	r6, #0
   35494:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   35496:	4a18      	ldr	r2, [pc, #96]	; (354f8 <z_time_slice+0xe4>)
   35498:	6812      	ldr	r2, [r2, #0]
   3549a:	b1ba      	cbz	r2, 354cc <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   3549c:	89c2      	ldrh	r2, [r0, #14]
   3549e:	2a7f      	cmp	r2, #127	; 0x7f
   354a0:	d814      	bhi.n	354cc <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   354a2:	7b42      	ldrb	r2, [r0, #13]
   354a4:	06d2      	lsls	r2, r2, #27
   354a6:	d111      	bne.n	354cc <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   354a8:	4a14      	ldr	r2, [pc, #80]	; (354fc <z_time_slice+0xe8>)
   354aa:	f990 600e 	ldrsb.w	r6, [r0, #14]
   354ae:	6812      	ldr	r2, [r2, #0]
   354b0:	4296      	cmp	r6, r2
   354b2:	db0b      	blt.n	354cc <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   354b4:	4a12      	ldr	r2, [pc, #72]	; (35500 <z_time_slice+0xec>)
   354b6:	4290      	cmp	r0, r2
   354b8:	d008      	beq.n	354cc <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   354ba:	691a      	ldr	r2, [r3, #16]
   354bc:	42a2      	cmp	r2, r4
   354be:	dc02      	bgt.n	354c6 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   354c0:	f7ff ff50 	bl	35364 <move_thread_to_end_of_prio_q>
   354c4:	e7cc      	b.n	35460 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   354c6:	1b12      	subs	r2, r2, r4
   354c8:	611a      	str	r2, [r3, #16]
   354ca:	e7cb      	b.n	35464 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   354cc:	2300      	movs	r3, #0
   354ce:	610b      	str	r3, [r1, #16]
   354d0:	e7c8      	b.n	35464 <z_time_slice+0x50>
   354d2:	bf00      	nop
   354d4:	20018a28 	.word	0x20018a28
   354d8:	00040472 	.word	0x00040472
   354dc:	000404c4 	.word	0x000404c4
   354e0:	0004033e 	.word	0x0004033e
   354e4:	000404d9 	.word	0x000404d9
   354e8:	200189dc 	.word	0x200189dc
   354ec:	20018a24 	.word	0x20018a24
   354f0:	00040498 	.word	0x00040498
   354f4:	000404af 	.word	0x000404af
   354f8:	20018a30 	.word	0x20018a30
   354fc:	20018a2c 	.word	0x20018a2c
   35500:	20016c88 	.word	0x20016c88

00035504 <ready_thread>:
{
   35504:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   35506:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   3550a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   3550c:	2a00      	cmp	r2, #0
   3550e:	7b43      	ldrb	r3, [r0, #13]
   35510:	db40      	blt.n	35594 <ready_thread+0x90>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   35512:	06da      	lsls	r2, r3, #27
   35514:	d13e      	bne.n	35594 <ready_thread+0x90>
	return !sys_dnode_is_linked(&to->node);
   35516:	6985      	ldr	r5, [r0, #24]
   35518:	2d00      	cmp	r5, #0
   3551a:	d13b      	bne.n	35594 <ready_thread+0x90>
	thread->base.thread_state |= _THREAD_QUEUED;
   3551c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   35520:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   35522:	4b1d      	ldr	r3, [pc, #116]	; (35598 <ready_thread+0x94>)
   35524:	4298      	cmp	r0, r3
   35526:	d10b      	bne.n	35540 <ready_thread+0x3c>
   35528:	491c      	ldr	r1, [pc, #112]	; (3559c <ready_thread+0x98>)
   3552a:	481d      	ldr	r0, [pc, #116]	; (355a0 <ready_thread+0x9c>)
   3552c:	f240 33b5 	movw	r3, #949	; 0x3b5
   35530:	4a1c      	ldr	r2, [pc, #112]	; (355a4 <ready_thread+0xa0>)
   35532:	f003 fdfe 	bl	39132 <printk>
   35536:	f240 31b5 	movw	r1, #949	; 0x3b5
   3553a:	481a      	ldr	r0, [pc, #104]	; (355a4 <ready_thread+0xa0>)
   3553c:	f004 f898 	bl	39670 <assert_post_action>
	return list->head == list;
   35540:	4919      	ldr	r1, [pc, #100]	; (355a8 <ready_thread+0xa4>)
   35542:	460b      	mov	r3, r1
   35544:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35548:	4298      	cmp	r0, r3
   3554a:	bf18      	it	ne
   3554c:	4605      	movne	r5, r0
   3554e:	2d00      	cmp	r5, #0
   35550:	461a      	mov	r2, r3
   35552:	462b      	mov	r3, r5
   35554:	bf38      	it	cc
   35556:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   35558:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3555a:	b1b3      	cbz	r3, 3558a <ready_thread+0x86>
	int32_t b1 = thread_1->base.prio;
   3555c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   35560:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   35564:	4286      	cmp	r6, r0
   35566:	d00c      	beq.n	35582 <ready_thread+0x7e>
		return b2 - b1;
   35568:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   3556a:	2800      	cmp	r0, #0
   3556c:	dd09      	ble.n	35582 <ready_thread+0x7e>
	sys_dnode_t *const prev = successor->prev;
   3556e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   35570:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   35574:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   35576:	605c      	str	r4, [r3, #4]
		update_cache(0);
   35578:	2000      	movs	r0, #0
}
   3557a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   3557e:	f7ff bce5 	b.w	34f4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   35582:	42ab      	cmp	r3, r5
   35584:	d001      	beq.n	3558a <ready_thread+0x86>
   35586:	681b      	ldr	r3, [r3, #0]
   35588:	e7e7      	b.n	3555a <ready_thread+0x56>
	node->prev = tail;
   3558a:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   3558e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   35590:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   35592:	e7f1      	b.n	35578 <ready_thread+0x74>
}
   35594:	bd70      	pop	{r4, r5, r6, pc}
   35596:	bf00      	nop
   35598:	20016c88 	.word	0x20016c88
   3559c:	00045e81 	.word	0x00045e81
   355a0:	0004033e 	.word	0x0004033e
   355a4:	00045e5f 	.word	0x00045e5f
   355a8:	200189dc 	.word	0x200189dc

000355ac <z_ready_thread>:
{
   355ac:	b538      	push	{r3, r4, r5, lr}
   355ae:	4604      	mov	r4, r0
	__asm__ volatile(
   355b0:	f04f 0320 	mov.w	r3, #32
   355b4:	f3ef 8511 	mrs	r5, BASEPRI
   355b8:	f383 8811 	msr	BASEPRI, r3
   355bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   355c0:	4817      	ldr	r0, [pc, #92]	; (35620 <z_ready_thread+0x74>)
   355c2:	f7fe fb85 	bl	33cd0 <z_spin_lock_valid>
   355c6:	b968      	cbnz	r0, 355e4 <z_ready_thread+0x38>
   355c8:	2381      	movs	r3, #129	; 0x81
   355ca:	4a16      	ldr	r2, [pc, #88]	; (35624 <z_ready_thread+0x78>)
   355cc:	4916      	ldr	r1, [pc, #88]	; (35628 <z_ready_thread+0x7c>)
   355ce:	4817      	ldr	r0, [pc, #92]	; (3562c <z_ready_thread+0x80>)
   355d0:	f003 fdaf 	bl	39132 <printk>
   355d4:	4912      	ldr	r1, [pc, #72]	; (35620 <z_ready_thread+0x74>)
   355d6:	4816      	ldr	r0, [pc, #88]	; (35630 <z_ready_thread+0x84>)
   355d8:	f003 fdab 	bl	39132 <printk>
   355dc:	2181      	movs	r1, #129	; 0x81
   355de:	4811      	ldr	r0, [pc, #68]	; (35624 <z_ready_thread+0x78>)
   355e0:	f004 f846 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   355e4:	480e      	ldr	r0, [pc, #56]	; (35620 <z_ready_thread+0x74>)
   355e6:	f7fe fb91 	bl	33d0c <z_spin_lock_set_owner>
			ready_thread(thread);
   355ea:	4620      	mov	r0, r4
   355ec:	f7ff ff8a 	bl	35504 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   355f0:	480b      	ldr	r0, [pc, #44]	; (35620 <z_ready_thread+0x74>)
   355f2:	f7fe fb7b 	bl	33cec <z_spin_unlock_valid>
   355f6:	b968      	cbnz	r0, 35614 <z_ready_thread+0x68>
   355f8:	23ac      	movs	r3, #172	; 0xac
   355fa:	4a0a      	ldr	r2, [pc, #40]	; (35624 <z_ready_thread+0x78>)
   355fc:	490d      	ldr	r1, [pc, #52]	; (35634 <z_ready_thread+0x88>)
   355fe:	480b      	ldr	r0, [pc, #44]	; (3562c <z_ready_thread+0x80>)
   35600:	f003 fd97 	bl	39132 <printk>
   35604:	4906      	ldr	r1, [pc, #24]	; (35620 <z_ready_thread+0x74>)
   35606:	480c      	ldr	r0, [pc, #48]	; (35638 <z_ready_thread+0x8c>)
   35608:	f003 fd93 	bl	39132 <printk>
   3560c:	21ac      	movs	r1, #172	; 0xac
   3560e:	4805      	ldr	r0, [pc, #20]	; (35624 <z_ready_thread+0x78>)
   35610:	f004 f82e 	bl	39670 <assert_post_action>
	__asm__ volatile(
   35614:	f385 8811 	msr	BASEPRI, r5
   35618:	f3bf 8f6f 	isb	sy
}
   3561c:	bd38      	pop	{r3, r4, r5, pc}
   3561e:	bf00      	nop
   35620:	20018a28 	.word	0x20018a28
   35624:	00040472 	.word	0x00040472
   35628:	000404c4 	.word	0x000404c4
   3562c:	0004033e 	.word	0x0004033e
   35630:	000404d9 	.word	0x000404d9
   35634:	00040498 	.word	0x00040498
   35638:	000404af 	.word	0x000404af

0003563c <z_sched_start>:
{
   3563c:	b538      	push	{r3, r4, r5, lr}
   3563e:	4604      	mov	r4, r0
	__asm__ volatile(
   35640:	f04f 0320 	mov.w	r3, #32
   35644:	f3ef 8511 	mrs	r5, BASEPRI
   35648:	f383 8811 	msr	BASEPRI, r3
   3564c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35650:	481d      	ldr	r0, [pc, #116]	; (356c8 <z_sched_start+0x8c>)
   35652:	f7fe fb3d 	bl	33cd0 <z_spin_lock_valid>
   35656:	b968      	cbnz	r0, 35674 <z_sched_start+0x38>
   35658:	2381      	movs	r3, #129	; 0x81
   3565a:	4a1c      	ldr	r2, [pc, #112]	; (356cc <z_sched_start+0x90>)
   3565c:	491c      	ldr	r1, [pc, #112]	; (356d0 <z_sched_start+0x94>)
   3565e:	481d      	ldr	r0, [pc, #116]	; (356d4 <z_sched_start+0x98>)
   35660:	f003 fd67 	bl	39132 <printk>
   35664:	4918      	ldr	r1, [pc, #96]	; (356c8 <z_sched_start+0x8c>)
   35666:	481c      	ldr	r0, [pc, #112]	; (356d8 <z_sched_start+0x9c>)
   35668:	f003 fd63 	bl	39132 <printk>
   3566c:	2181      	movs	r1, #129	; 0x81
   3566e:	4817      	ldr	r0, [pc, #92]	; (356cc <z_sched_start+0x90>)
   35670:	f003 fffe 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   35674:	4814      	ldr	r0, [pc, #80]	; (356c8 <z_sched_start+0x8c>)
   35676:	f7fe fb49 	bl	33d0c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   3567a:	7b63      	ldrb	r3, [r4, #13]
   3567c:	075a      	lsls	r2, r3, #29
   3567e:	d416      	bmi.n	356ae <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35680:	4811      	ldr	r0, [pc, #68]	; (356c8 <z_sched_start+0x8c>)
   35682:	f7fe fb33 	bl	33cec <z_spin_unlock_valid>
   35686:	b968      	cbnz	r0, 356a4 <z_sched_start+0x68>
   35688:	23ac      	movs	r3, #172	; 0xac
   3568a:	4a10      	ldr	r2, [pc, #64]	; (356cc <z_sched_start+0x90>)
   3568c:	4913      	ldr	r1, [pc, #76]	; (356dc <z_sched_start+0xa0>)
   3568e:	4811      	ldr	r0, [pc, #68]	; (356d4 <z_sched_start+0x98>)
   35690:	f003 fd4f 	bl	39132 <printk>
   35694:	490c      	ldr	r1, [pc, #48]	; (356c8 <z_sched_start+0x8c>)
   35696:	4812      	ldr	r0, [pc, #72]	; (356e0 <z_sched_start+0xa4>)
   35698:	f003 fd4b 	bl	39132 <printk>
   3569c:	21ac      	movs	r1, #172	; 0xac
   3569e:	480b      	ldr	r0, [pc, #44]	; (356cc <z_sched_start+0x90>)
   356a0:	f003 ffe6 	bl	39670 <assert_post_action>
	__asm__ volatile(
   356a4:	f385 8811 	msr	BASEPRI, r5
   356a8:	f3bf 8f6f 	isb	sy
}
   356ac:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   356ae:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   356b2:	4620      	mov	r0, r4
   356b4:	7363      	strb	r3, [r4, #13]
   356b6:	f7ff ff25 	bl	35504 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   356ba:	4629      	mov	r1, r5
}
   356bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   356c0:	4801      	ldr	r0, [pc, #4]	; (356c8 <z_sched_start+0x8c>)
   356c2:	f7ff bafb 	b.w	34cbc <z_reschedule>
   356c6:	bf00      	nop
   356c8:	20018a28 	.word	0x20018a28
   356cc:	00040472 	.word	0x00040472
   356d0:	000404c4 	.word	0x000404c4
   356d4:	0004033e 	.word	0x0004033e
   356d8:	000404d9 	.word	0x000404d9
   356dc:	00040498 	.word	0x00040498
   356e0:	000404af 	.word	0x000404af

000356e4 <z_impl_k_thread_resume>:
{
   356e4:	b538      	push	{r3, r4, r5, lr}
   356e6:	4604      	mov	r4, r0
	__asm__ volatile(
   356e8:	f04f 0320 	mov.w	r3, #32
   356ec:	f3ef 8511 	mrs	r5, BASEPRI
   356f0:	f383 8811 	msr	BASEPRI, r3
   356f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   356f8:	481d      	ldr	r0, [pc, #116]	; (35770 <z_impl_k_thread_resume+0x8c>)
   356fa:	f7fe fae9 	bl	33cd0 <z_spin_lock_valid>
   356fe:	b968      	cbnz	r0, 3571c <z_impl_k_thread_resume+0x38>
   35700:	2381      	movs	r3, #129	; 0x81
   35702:	4a1c      	ldr	r2, [pc, #112]	; (35774 <z_impl_k_thread_resume+0x90>)
   35704:	491c      	ldr	r1, [pc, #112]	; (35778 <z_impl_k_thread_resume+0x94>)
   35706:	481d      	ldr	r0, [pc, #116]	; (3577c <z_impl_k_thread_resume+0x98>)
   35708:	f003 fd13 	bl	39132 <printk>
   3570c:	4918      	ldr	r1, [pc, #96]	; (35770 <z_impl_k_thread_resume+0x8c>)
   3570e:	481c      	ldr	r0, [pc, #112]	; (35780 <z_impl_k_thread_resume+0x9c>)
   35710:	f003 fd0f 	bl	39132 <printk>
   35714:	2181      	movs	r1, #129	; 0x81
   35716:	4817      	ldr	r0, [pc, #92]	; (35774 <z_impl_k_thread_resume+0x90>)
   35718:	f003 ffaa 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   3571c:	4814      	ldr	r0, [pc, #80]	; (35770 <z_impl_k_thread_resume+0x8c>)
   3571e:	f7fe faf5 	bl	33d0c <z_spin_lock_set_owner>
	if (!z_is_thread_suspended(thread)) {
   35722:	7b63      	ldrb	r3, [r4, #13]
   35724:	06da      	lsls	r2, r3, #27
   35726:	d416      	bmi.n	35756 <z_impl_k_thread_resume+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35728:	4811      	ldr	r0, [pc, #68]	; (35770 <z_impl_k_thread_resume+0x8c>)
   3572a:	f7fe fadf 	bl	33cec <z_spin_unlock_valid>
   3572e:	b968      	cbnz	r0, 3574c <z_impl_k_thread_resume+0x68>
   35730:	23ac      	movs	r3, #172	; 0xac
   35732:	4a10      	ldr	r2, [pc, #64]	; (35774 <z_impl_k_thread_resume+0x90>)
   35734:	4913      	ldr	r1, [pc, #76]	; (35784 <z_impl_k_thread_resume+0xa0>)
   35736:	4811      	ldr	r0, [pc, #68]	; (3577c <z_impl_k_thread_resume+0x98>)
   35738:	f003 fcfb 	bl	39132 <printk>
   3573c:	490c      	ldr	r1, [pc, #48]	; (35770 <z_impl_k_thread_resume+0x8c>)
   3573e:	4812      	ldr	r0, [pc, #72]	; (35788 <z_impl_k_thread_resume+0xa4>)
   35740:	f003 fcf7 	bl	39132 <printk>
   35744:	21ac      	movs	r1, #172	; 0xac
   35746:	480b      	ldr	r0, [pc, #44]	; (35774 <z_impl_k_thread_resume+0x90>)
   35748:	f003 ff92 	bl	39670 <assert_post_action>
	__asm__ volatile(
   3574c:	f385 8811 	msr	BASEPRI, r5
   35750:	f3bf 8f6f 	isb	sy
}
   35754:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   35756:	f023 0310 	bic.w	r3, r3, #16
	ready_thread(thread);
   3575a:	4620      	mov	r0, r4
   3575c:	7363      	strb	r3, [r4, #13]
   3575e:	f7ff fed1 	bl	35504 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   35762:	4629      	mov	r1, r5
}
   35764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   35768:	4801      	ldr	r0, [pc, #4]	; (35770 <z_impl_k_thread_resume+0x8c>)
   3576a:	f7ff baa7 	b.w	34cbc <z_reschedule>
   3576e:	bf00      	nop
   35770:	20018a28 	.word	0x20018a28
   35774:	00040472 	.word	0x00040472
   35778:	000404c4 	.word	0x000404c4
   3577c:	0004033e 	.word	0x0004033e
   35780:	000404d9 	.word	0x000404d9
   35784:	00040498 	.word	0x00040498
   35788:	000404af 	.word	0x000404af

0003578c <z_thread_timeout>:
{
   3578c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3578e:	4604      	mov	r4, r0
	__asm__ volatile(
   35790:	f04f 0320 	mov.w	r3, #32
   35794:	f3ef 8511 	mrs	r5, BASEPRI
   35798:	f383 8811 	msr	BASEPRI, r3
   3579c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   357a0:	4821      	ldr	r0, [pc, #132]	; (35828 <z_thread_timeout+0x9c>)
   357a2:	f7fe fa95 	bl	33cd0 <z_spin_lock_valid>
   357a6:	b968      	cbnz	r0, 357c4 <z_thread_timeout+0x38>
   357a8:	2381      	movs	r3, #129	; 0x81
   357aa:	4a20      	ldr	r2, [pc, #128]	; (3582c <z_thread_timeout+0xa0>)
   357ac:	4920      	ldr	r1, [pc, #128]	; (35830 <z_thread_timeout+0xa4>)
   357ae:	4821      	ldr	r0, [pc, #132]	; (35834 <z_thread_timeout+0xa8>)
   357b0:	f003 fcbf 	bl	39132 <printk>
   357b4:	491c      	ldr	r1, [pc, #112]	; (35828 <z_thread_timeout+0x9c>)
   357b6:	4820      	ldr	r0, [pc, #128]	; (35838 <z_thread_timeout+0xac>)
   357b8:	f003 fcbb 	bl	39132 <printk>
   357bc:	2181      	movs	r1, #129	; 0x81
   357be:	481b      	ldr	r0, [pc, #108]	; (3582c <z_thread_timeout+0xa0>)
   357c0:	f003 ff56 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   357c4:	4818      	ldr	r0, [pc, #96]	; (35828 <z_thread_timeout+0x9c>)
   357c6:	f7fe faa1 	bl	33d0c <z_spin_lock_set_owner>
		if (!killed) {
   357ca:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   357ce:	f013 0f28 	tst.w	r3, #40	; 0x28
   357d2:	d110      	bne.n	357f6 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   357d4:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   357d8:	f1a4 0018 	sub.w	r0, r4, #24
			if (thread->base.pended_on != NULL) {
   357dc:	b11b      	cbz	r3, 357e6 <z_thread_timeout+0x5a>
				unpend_thread_no_timeout(thread);
   357de:	9001      	str	r0, [sp, #4]
   357e0:	f7ff fb46 	bl	34e70 <unpend_thread_no_timeout>
   357e4:	9801      	ldr	r0, [sp, #4]
   357e6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   357ea:	f023 0314 	bic.w	r3, r3, #20
   357ee:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   357f2:	f7ff fe87 	bl	35504 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   357f6:	480c      	ldr	r0, [pc, #48]	; (35828 <z_thread_timeout+0x9c>)
   357f8:	f7fe fa78 	bl	33cec <z_spin_unlock_valid>
   357fc:	b968      	cbnz	r0, 3581a <z_thread_timeout+0x8e>
   357fe:	23ac      	movs	r3, #172	; 0xac
   35800:	4a0a      	ldr	r2, [pc, #40]	; (3582c <z_thread_timeout+0xa0>)
   35802:	490e      	ldr	r1, [pc, #56]	; (3583c <z_thread_timeout+0xb0>)
   35804:	480b      	ldr	r0, [pc, #44]	; (35834 <z_thread_timeout+0xa8>)
   35806:	f003 fc94 	bl	39132 <printk>
   3580a:	4907      	ldr	r1, [pc, #28]	; (35828 <z_thread_timeout+0x9c>)
   3580c:	480c      	ldr	r0, [pc, #48]	; (35840 <z_thread_timeout+0xb4>)
   3580e:	f003 fc90 	bl	39132 <printk>
   35812:	21ac      	movs	r1, #172	; 0xac
   35814:	4805      	ldr	r0, [pc, #20]	; (3582c <z_thread_timeout+0xa0>)
   35816:	f003 ff2b 	bl	39670 <assert_post_action>
	__asm__ volatile(
   3581a:	f385 8811 	msr	BASEPRI, r5
   3581e:	f3bf 8f6f 	isb	sy
}
   35822:	b003      	add	sp, #12
   35824:	bd30      	pop	{r4, r5, pc}
   35826:	bf00      	nop
   35828:	20018a28 	.word	0x20018a28
   3582c:	00040472 	.word	0x00040472
   35830:	000404c4 	.word	0x000404c4
   35834:	0004033e 	.word	0x0004033e
   35838:	000404d9 	.word	0x000404d9
   3583c:	00040498 	.word	0x00040498
   35840:	000404af 	.word	0x000404af

00035844 <z_set_prio>:
{
   35844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35846:	4604      	mov	r4, r0
   35848:	460e      	mov	r6, r1
	__asm__ volatile(
   3584a:	f04f 0320 	mov.w	r3, #32
   3584e:	f3ef 8711 	mrs	r7, BASEPRI
   35852:	f383 8811 	msr	BASEPRI, r3
   35856:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3585a:	483d      	ldr	r0, [pc, #244]	; (35950 <z_set_prio+0x10c>)
   3585c:	f7fe fa38 	bl	33cd0 <z_spin_lock_valid>
   35860:	b968      	cbnz	r0, 3587e <z_set_prio+0x3a>
   35862:	2381      	movs	r3, #129	; 0x81
   35864:	4a3b      	ldr	r2, [pc, #236]	; (35954 <z_set_prio+0x110>)
   35866:	493c      	ldr	r1, [pc, #240]	; (35958 <z_set_prio+0x114>)
   35868:	483c      	ldr	r0, [pc, #240]	; (3595c <z_set_prio+0x118>)
   3586a:	f003 fc62 	bl	39132 <printk>
   3586e:	4938      	ldr	r1, [pc, #224]	; (35950 <z_set_prio+0x10c>)
   35870:	483b      	ldr	r0, [pc, #236]	; (35960 <z_set_prio+0x11c>)
   35872:	f003 fc5e 	bl	39132 <printk>
   35876:	2181      	movs	r1, #129	; 0x81
   35878:	4836      	ldr	r0, [pc, #216]	; (35954 <z_set_prio+0x110>)
   3587a:	f003 fef9 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   3587e:	4834      	ldr	r0, [pc, #208]	; (35950 <z_set_prio+0x10c>)
   35880:	f7fe fa44 	bl	33d0c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   35884:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   35886:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   35888:	06da      	lsls	r2, r3, #27
   3588a:	d15e      	bne.n	3594a <z_set_prio+0x106>
   3588c:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   3588e:	2d00      	cmp	r5, #0
   35890:	d15b      	bne.n	3594a <z_set_prio+0x106>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   35896:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   35898:	4621      	mov	r1, r4
   3589a:	4832      	ldr	r0, [pc, #200]	; (35964 <z_set_prio+0x120>)
   3589c:	f7ff fac6 	bl	34e2c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   358a0:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   358a2:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   358a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   358a8:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   358aa:	4b2f      	ldr	r3, [pc, #188]	; (35968 <z_set_prio+0x124>)
   358ac:	429c      	cmp	r4, r3
   358ae:	d10b      	bne.n	358c8 <z_set_prio+0x84>
   358b0:	492e      	ldr	r1, [pc, #184]	; (3596c <z_set_prio+0x128>)
   358b2:	482a      	ldr	r0, [pc, #168]	; (3595c <z_set_prio+0x118>)
   358b4:	f240 33b5 	movw	r3, #949	; 0x3b5
   358b8:	4a2d      	ldr	r2, [pc, #180]	; (35970 <z_set_prio+0x12c>)
   358ba:	f003 fc3a 	bl	39132 <printk>
   358be:	f240 31b5 	movw	r1, #949	; 0x3b5
   358c2:	482b      	ldr	r0, [pc, #172]	; (35970 <z_set_prio+0x12c>)
   358c4:	f003 fed4 	bl	39670 <assert_post_action>
	return list->head == list;
   358c8:	492a      	ldr	r1, [pc, #168]	; (35974 <z_set_prio+0x130>)
   358ca:	460b      	mov	r3, r1
   358cc:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   358d0:	4298      	cmp	r0, r3
   358d2:	bf18      	it	ne
   358d4:	4605      	movne	r5, r0
   358d6:	2d00      	cmp	r5, #0
   358d8:	461a      	mov	r2, r3
   358da:	462b      	mov	r3, r5
   358dc:	bf38      	it	cc
   358de:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   358e0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   358e2:	b36b      	cbz	r3, 35940 <z_set_prio+0xfc>
	int32_t b1 = thread_1->base.prio;
   358e4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   358e8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   358ec:	4286      	cmp	r6, r0
   358ee:	d023      	beq.n	35938 <z_set_prio+0xf4>
		return b2 - b1;
   358f0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   358f2:	2800      	cmp	r0, #0
   358f4:	dd20      	ble.n	35938 <z_set_prio+0xf4>
	sys_dnode_t *const prev = successor->prev;
   358f6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   358f8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   358fc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   358fe:	605c      	str	r4, [r3, #4]
			update_cache(1);
   35900:	2001      	movs	r0, #1
   35902:	f7ff fb23 	bl	34f4c <update_cache>
   35906:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35908:	4811      	ldr	r0, [pc, #68]	; (35950 <z_set_prio+0x10c>)
   3590a:	f7fe f9ef 	bl	33cec <z_spin_unlock_valid>
   3590e:	b968      	cbnz	r0, 3592c <z_set_prio+0xe8>
   35910:	23ac      	movs	r3, #172	; 0xac
   35912:	4a10      	ldr	r2, [pc, #64]	; (35954 <z_set_prio+0x110>)
   35914:	4918      	ldr	r1, [pc, #96]	; (35978 <z_set_prio+0x134>)
   35916:	4811      	ldr	r0, [pc, #68]	; (3595c <z_set_prio+0x118>)
   35918:	f003 fc0b 	bl	39132 <printk>
   3591c:	490c      	ldr	r1, [pc, #48]	; (35950 <z_set_prio+0x10c>)
   3591e:	4817      	ldr	r0, [pc, #92]	; (3597c <z_set_prio+0x138>)
   35920:	f003 fc07 	bl	39132 <printk>
   35924:	21ac      	movs	r1, #172	; 0xac
   35926:	480b      	ldr	r0, [pc, #44]	; (35954 <z_set_prio+0x110>)
   35928:	f003 fea2 	bl	39670 <assert_post_action>
	__asm__ volatile(
   3592c:	f387 8811 	msr	BASEPRI, r7
   35930:	f3bf 8f6f 	isb	sy
}
   35934:	4620      	mov	r0, r4
   35936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   35938:	42ab      	cmp	r3, r5
   3593a:	d001      	beq.n	35940 <z_set_prio+0xfc>
   3593c:	681b      	ldr	r3, [r3, #0]
   3593e:	e7d0      	b.n	358e2 <z_set_prio+0x9e>
	node->prev = tail;
   35940:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   35944:	602c      	str	r4, [r5, #0]
	list->tail = node;
   35946:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   35948:	e7da      	b.n	35900 <z_set_prio+0xbc>
			thread->base.prio = prio;
   3594a:	73a6      	strb	r6, [r4, #14]
   3594c:	2400      	movs	r4, #0
   3594e:	e7db      	b.n	35908 <z_set_prio+0xc4>
   35950:	20018a28 	.word	0x20018a28
   35954:	00040472 	.word	0x00040472
   35958:	000404c4 	.word	0x000404c4
   3595c:	0004033e 	.word	0x0004033e
   35960:	000404d9 	.word	0x000404d9
   35964:	20018a04 	.word	0x20018a04
   35968:	20016c88 	.word	0x20016c88
   3596c:	00045e81 	.word	0x00045e81
   35970:	00045e5f 	.word	0x00045e5f
   35974:	200189dc 	.word	0x200189dc
   35978:	00040498 	.word	0x00040498
   3597c:	000404af 	.word	0x000404af

00035980 <z_unpend_first_thread>:
{
   35980:	b538      	push	{r3, r4, r5, lr}
   35982:	4604      	mov	r4, r0
	__asm__ volatile(
   35984:	f04f 0320 	mov.w	r3, #32
   35988:	f3ef 8511 	mrs	r5, BASEPRI
   3598c:	f383 8811 	msr	BASEPRI, r3
   35990:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35994:	481b      	ldr	r0, [pc, #108]	; (35a04 <z_unpend_first_thread+0x84>)
   35996:	f7fe f99b 	bl	33cd0 <z_spin_lock_valid>
   3599a:	b968      	cbnz	r0, 359b8 <z_unpend_first_thread+0x38>
   3599c:	2381      	movs	r3, #129	; 0x81
   3599e:	4a1a      	ldr	r2, [pc, #104]	; (35a08 <z_unpend_first_thread+0x88>)
   359a0:	491a      	ldr	r1, [pc, #104]	; (35a0c <z_unpend_first_thread+0x8c>)
   359a2:	481b      	ldr	r0, [pc, #108]	; (35a10 <z_unpend_first_thread+0x90>)
   359a4:	f003 fbc5 	bl	39132 <printk>
   359a8:	4916      	ldr	r1, [pc, #88]	; (35a04 <z_unpend_first_thread+0x84>)
   359aa:	481a      	ldr	r0, [pc, #104]	; (35a14 <z_unpend_first_thread+0x94>)
   359ac:	f003 fbc1 	bl	39132 <printk>
   359b0:	2181      	movs	r1, #129	; 0x81
   359b2:	4815      	ldr	r0, [pc, #84]	; (35a08 <z_unpend_first_thread+0x88>)
   359b4:	f003 fe5c 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   359b8:	4812      	ldr	r0, [pc, #72]	; (35a04 <z_unpend_first_thread+0x84>)
   359ba:	f7fe f9a7 	bl	33d0c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   359be:	4620      	mov	r0, r4
   359c0:	f008 fa00 	bl	3ddc4 <z_priq_dumb_best>
		if (thread != NULL) {
   359c4:	4604      	mov	r4, r0
   359c6:	b128      	cbz	r0, 359d4 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   359c8:	f7ff fa52 	bl	34e70 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   359cc:	f104 0018 	add.w	r0, r4, #24
   359d0:	f000 fc2c 	bl	3622c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   359d4:	480b      	ldr	r0, [pc, #44]	; (35a04 <z_unpend_first_thread+0x84>)
   359d6:	f7fe f989 	bl	33cec <z_spin_unlock_valid>
   359da:	b968      	cbnz	r0, 359f8 <z_unpend_first_thread+0x78>
   359dc:	23ac      	movs	r3, #172	; 0xac
   359de:	4a0a      	ldr	r2, [pc, #40]	; (35a08 <z_unpend_first_thread+0x88>)
   359e0:	490d      	ldr	r1, [pc, #52]	; (35a18 <z_unpend_first_thread+0x98>)
   359e2:	480b      	ldr	r0, [pc, #44]	; (35a10 <z_unpend_first_thread+0x90>)
   359e4:	f003 fba5 	bl	39132 <printk>
   359e8:	4906      	ldr	r1, [pc, #24]	; (35a04 <z_unpend_first_thread+0x84>)
   359ea:	480c      	ldr	r0, [pc, #48]	; (35a1c <z_unpend_first_thread+0x9c>)
   359ec:	f003 fba1 	bl	39132 <printk>
   359f0:	21ac      	movs	r1, #172	; 0xac
   359f2:	4805      	ldr	r0, [pc, #20]	; (35a08 <z_unpend_first_thread+0x88>)
   359f4:	f003 fe3c 	bl	39670 <assert_post_action>
	__asm__ volatile(
   359f8:	f385 8811 	msr	BASEPRI, r5
   359fc:	f3bf 8f6f 	isb	sy
}
   35a00:	4620      	mov	r0, r4
   35a02:	bd38      	pop	{r3, r4, r5, pc}
   35a04:	20018a28 	.word	0x20018a28
   35a08:	00040472 	.word	0x00040472
   35a0c:	000404c4 	.word	0x000404c4
   35a10:	0004033e 	.word	0x0004033e
   35a14:	000404d9 	.word	0x000404d9
   35a18:	00040498 	.word	0x00040498
   35a1c:	000404af 	.word	0x000404af

00035a20 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   35a20:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   35a22:	4b04      	ldr	r3, [pc, #16]	; (35a34 <z_sched_init+0x14>)
   35a24:	4608      	mov	r0, r1
   35a26:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   35a2a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   35a2e:	f7ff b8df 	b.w	34bf0 <k_sched_time_slice_set>
   35a32:	bf00      	nop
   35a34:	200189dc 	.word	0x200189dc

00035a38 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   35a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35a3a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   35a3e:	b173      	cbz	r3, 35a5e <z_impl_k_yield+0x26>
   35a40:	4947      	ldr	r1, [pc, #284]	; (35b60 <z_impl_k_yield+0x128>)
   35a42:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   35a46:	4a47      	ldr	r2, [pc, #284]	; (35b64 <z_impl_k_yield+0x12c>)
   35a48:	4847      	ldr	r0, [pc, #284]	; (35b68 <z_impl_k_yield+0x130>)
   35a4a:	f003 fb72 	bl	39132 <printk>
   35a4e:	4847      	ldr	r0, [pc, #284]	; (35b6c <z_impl_k_yield+0x134>)
   35a50:	f003 fb6f 	bl	39132 <printk>
   35a54:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
   35a58:	4842      	ldr	r0, [pc, #264]	; (35b64 <z_impl_k_yield+0x12c>)
   35a5a:	f003 fe09 	bl	39670 <assert_post_action>

	SYS_PORT_TRACING_FUNC(k_thread, yield);

	if (!z_is_idle_thread_object(_current)) {
   35a5e:	4d44      	ldr	r5, [pc, #272]	; (35b70 <z_impl_k_yield+0x138>)
   35a60:	4e44      	ldr	r6, [pc, #272]	; (35b74 <z_impl_k_yield+0x13c>)
   35a62:	68ab      	ldr	r3, [r5, #8]
   35a64:	42b3      	cmp	r3, r6
   35a66:	d072      	beq.n	35b4e <z_impl_k_yield+0x116>
	__asm__ volatile(
   35a68:	f04f 0320 	mov.w	r3, #32
   35a6c:	f3ef 8711 	mrs	r7, BASEPRI
   35a70:	f383 8811 	msr	BASEPRI, r3
   35a74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35a78:	483f      	ldr	r0, [pc, #252]	; (35b78 <z_impl_k_yield+0x140>)
   35a7a:	f7fe f929 	bl	33cd0 <z_spin_lock_valid>
   35a7e:	b968      	cbnz	r0, 35a9c <z_impl_k_yield+0x64>
   35a80:	2381      	movs	r3, #129	; 0x81
   35a82:	4a3e      	ldr	r2, [pc, #248]	; (35b7c <z_impl_k_yield+0x144>)
   35a84:	493e      	ldr	r1, [pc, #248]	; (35b80 <z_impl_k_yield+0x148>)
   35a86:	4838      	ldr	r0, [pc, #224]	; (35b68 <z_impl_k_yield+0x130>)
   35a88:	f003 fb53 	bl	39132 <printk>
   35a8c:	493a      	ldr	r1, [pc, #232]	; (35b78 <z_impl_k_yield+0x140>)
   35a8e:	483d      	ldr	r0, [pc, #244]	; (35b84 <z_impl_k_yield+0x14c>)
   35a90:	f003 fb4f 	bl	39132 <printk>
   35a94:	2181      	movs	r1, #129	; 0x81
   35a96:	4839      	ldr	r0, [pc, #228]	; (35b7c <z_impl_k_yield+0x144>)
   35a98:	f003 fdea 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   35a9c:	4836      	ldr	r0, [pc, #216]	; (35b78 <z_impl_k_yield+0x140>)
   35a9e:	f7fe f935 	bl	33d0c <z_spin_lock_set_owner>
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
   35aa2:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
   35aa4:	4838      	ldr	r0, [pc, #224]	; (35b88 <z_impl_k_yield+0x150>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35aa6:	7b4b      	ldrb	r3, [r1, #13]
   35aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   35aac:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   35aae:	f7ff f9bd 	bl	34e2c <z_priq_dumb_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
   35ab2:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   35ab4:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   35ab6:	42b4      	cmp	r4, r6
	thread->base.thread_state |= _THREAD_QUEUED;
   35ab8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   35abc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   35abe:	d10b      	bne.n	35ad8 <z_impl_k_yield+0xa0>
   35ac0:	4932      	ldr	r1, [pc, #200]	; (35b8c <z_impl_k_yield+0x154>)
   35ac2:	4829      	ldr	r0, [pc, #164]	; (35b68 <z_impl_k_yield+0x130>)
   35ac4:	f240 33b5 	movw	r3, #949	; 0x3b5
   35ac8:	4a26      	ldr	r2, [pc, #152]	; (35b64 <z_impl_k_yield+0x12c>)
   35aca:	f003 fb32 	bl	39132 <printk>
   35ace:	f240 31b5 	movw	r1, #949	; 0x3b5
   35ad2:	4824      	ldr	r0, [pc, #144]	; (35b64 <z_impl_k_yield+0x12c>)
   35ad4:	f003 fdcc 	bl	39670 <assert_post_action>
	return list->head == list;
   35ad8:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35ada:	482b      	ldr	r0, [pc, #172]	; (35b88 <z_impl_k_yield+0x150>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   35adc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35ade:	4283      	cmp	r3, r0
   35ae0:	bf08      	it	eq
   35ae2:	2300      	moveq	r3, #0
   35ae4:	2b00      	cmp	r3, #0
   35ae6:	bf38      	it	cc
   35ae8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   35aea:	b35b      	cbz	r3, 35b44 <z_impl_k_yield+0x10c>
	int32_t b1 = thread_1->base.prio;
   35aec:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   35af0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   35af4:	4296      	cmp	r6, r2
   35af6:	d021      	beq.n	35b3c <z_impl_k_yield+0x104>
		return b2 - b1;
   35af8:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   35afa:	2a00      	cmp	r2, #0
   35afc:	dd1e      	ble.n	35b3c <z_impl_k_yield+0x104>
	sys_dnode_t *const prev = successor->prev;
   35afe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   35b00:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   35b04:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   35b06:	605c      	str	r4, [r3, #4]
		update_cache(1);
   35b08:	2001      	movs	r0, #1
   35b0a:	f7ff fa1f 	bl	34f4c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35b0e:	481a      	ldr	r0, [pc, #104]	; (35b78 <z_impl_k_yield+0x140>)
   35b10:	f7fe f8ec 	bl	33cec <z_spin_unlock_valid>
   35b14:	b968      	cbnz	r0, 35b32 <z_impl_k_yield+0xfa>
   35b16:	23c3      	movs	r3, #195	; 0xc3
   35b18:	4a18      	ldr	r2, [pc, #96]	; (35b7c <z_impl_k_yield+0x144>)
   35b1a:	491d      	ldr	r1, [pc, #116]	; (35b90 <z_impl_k_yield+0x158>)
   35b1c:	4812      	ldr	r0, [pc, #72]	; (35b68 <z_impl_k_yield+0x130>)
   35b1e:	f003 fb08 	bl	39132 <printk>
   35b22:	4915      	ldr	r1, [pc, #84]	; (35b78 <z_impl_k_yield+0x140>)
   35b24:	481b      	ldr	r0, [pc, #108]	; (35b94 <z_impl_k_yield+0x15c>)
   35b26:	f003 fb04 	bl	39132 <printk>
   35b2a:	21c3      	movs	r1, #195	; 0xc3
   35b2c:	4813      	ldr	r0, [pc, #76]	; (35b7c <z_impl_k_yield+0x144>)
   35b2e:	f003 fd9f 	bl	39670 <assert_post_action>
   35b32:	4638      	mov	r0, r7
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
   35b34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   35b38:	f7ed bad4 	b.w	230e4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   35b3c:	428b      	cmp	r3, r1
   35b3e:	d001      	beq.n	35b44 <z_impl_k_yield+0x10c>
   35b40:	681b      	ldr	r3, [r3, #0]
   35b42:	e7d2      	b.n	35aea <z_impl_k_yield+0xb2>
	node->prev = tail;
   35b44:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   35b48:	600c      	str	r4, [r1, #0]
	list->tail = node;
   35b4a:	62ec      	str	r4, [r5, #44]	; 0x2c
}
   35b4c:	e7dc      	b.n	35b08 <z_impl_k_yield+0xd0>
   35b4e:	f04f 0320 	mov.w	r3, #32
   35b52:	f3ef 8011 	mrs	r0, BASEPRI
   35b56:	f383 8811 	msr	BASEPRI, r3
   35b5a:	f3bf 8f6f 	isb	sy
   35b5e:	e7e9      	b.n	35b34 <z_impl_k_yield+0xfc>
   35b60:	00045c0a 	.word	0x00045c0a
   35b64:	00045e5f 	.word	0x00045e5f
   35b68:	0004033e 	.word	0x0004033e
   35b6c:	000408e8 	.word	0x000408e8
   35b70:	200189dc 	.word	0x200189dc
   35b74:	20016c88 	.word	0x20016c88
   35b78:	20018a28 	.word	0x20018a28
   35b7c:	00040472 	.word	0x00040472
   35b80:	000404c4 	.word	0x000404c4
   35b84:	000404d9 	.word	0x000404d9
   35b88:	20018a04 	.word	0x20018a04
   35b8c:	00045e81 	.word	0x00045e81
   35b90:	00040498 	.word	0x00040498
   35b94:	000404af 	.word	0x000404af

00035b98 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   35b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35b9c:	4606      	mov	r6, r0
   35b9e:	460f      	mov	r7, r1
   35ba0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   35ba4:	b173      	cbz	r3, 35bc4 <z_tick_sleep+0x2c>
   35ba6:	493e      	ldr	r1, [pc, #248]	; (35ca0 <z_tick_sleep+0x108>)
   35ba8:	f240 43d1 	movw	r3, #1233	; 0x4d1
   35bac:	4a3d      	ldr	r2, [pc, #244]	; (35ca4 <z_tick_sleep+0x10c>)
   35bae:	483e      	ldr	r0, [pc, #248]	; (35ca8 <z_tick_sleep+0x110>)
   35bb0:	f003 fabf 	bl	39132 <printk>
   35bb4:	483d      	ldr	r0, [pc, #244]	; (35cac <z_tick_sleep+0x114>)
   35bb6:	f003 fabc 	bl	39132 <printk>
   35bba:	f240 41d1 	movw	r1, #1233	; 0x4d1
   35bbe:	4839      	ldr	r0, [pc, #228]	; (35ca4 <z_tick_sleep+0x10c>)
   35bc0:	f003 fd56 	bl	39670 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   35bc4:	ea56 0307 	orrs.w	r3, r6, r7
   35bc8:	d104      	bne.n	35bd4 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   35bca:	f7ff ff35 	bl	35a38 <z_impl_k_yield>
		k_yield();
		return 0;
   35bce:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   35bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   35bd4:	f008 f910 	bl	3ddf8 <sys_clock_tick_get_32>
   35bd8:	1984      	adds	r4, r0, r6
   35bda:	f04f 0320 	mov.w	r3, #32
   35bde:	f3ef 8811 	mrs	r8, BASEPRI
   35be2:	f383 8811 	msr	BASEPRI, r3
   35be6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35bea:	4831      	ldr	r0, [pc, #196]	; (35cb0 <z_tick_sleep+0x118>)
   35bec:	f7fe f870 	bl	33cd0 <z_spin_lock_valid>
   35bf0:	b968      	cbnz	r0, 35c0e <z_tick_sleep+0x76>
   35bf2:	2381      	movs	r3, #129	; 0x81
   35bf4:	4a2f      	ldr	r2, [pc, #188]	; (35cb4 <z_tick_sleep+0x11c>)
   35bf6:	4930      	ldr	r1, [pc, #192]	; (35cb8 <z_tick_sleep+0x120>)
   35bf8:	482b      	ldr	r0, [pc, #172]	; (35ca8 <z_tick_sleep+0x110>)
   35bfa:	f003 fa9a 	bl	39132 <printk>
   35bfe:	492c      	ldr	r1, [pc, #176]	; (35cb0 <z_tick_sleep+0x118>)
   35c00:	482e      	ldr	r0, [pc, #184]	; (35cbc <z_tick_sleep+0x124>)
   35c02:	f003 fa96 	bl	39132 <printk>
   35c06:	2181      	movs	r1, #129	; 0x81
   35c08:	482a      	ldr	r0, [pc, #168]	; (35cb4 <z_tick_sleep+0x11c>)
   35c0a:	f003 fd31 	bl	39670 <assert_post_action>
	pending_current = _current;
   35c0e:	4d2c      	ldr	r5, [pc, #176]	; (35cc0 <z_tick_sleep+0x128>)
	z_spin_lock_set_owner(l);
   35c10:	4827      	ldr	r0, [pc, #156]	; (35cb0 <z_tick_sleep+0x118>)
   35c12:	f7fe f87b 	bl	33d0c <z_spin_lock_set_owner>
   35c16:	68a8      	ldr	r0, [r5, #8]
   35c18:	4b2a      	ldr	r3, [pc, #168]	; (35cc4 <z_tick_sleep+0x12c>)
   35c1a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   35c1c:	f7ff f9ce 	bl	34fbc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   35c20:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   35c22:	4632      	mov	r2, r6
   35c24:	463b      	mov	r3, r7
   35c26:	3018      	adds	r0, #24
   35c28:	4927      	ldr	r1, [pc, #156]	; (35cc8 <z_tick_sleep+0x130>)
   35c2a:	f000 fa2b 	bl	36084 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   35c2e:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35c30:	481f      	ldr	r0, [pc, #124]	; (35cb0 <z_tick_sleep+0x118>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   35c32:	7b53      	ldrb	r3, [r2, #13]
   35c34:	f043 0310 	orr.w	r3, r3, #16
   35c38:	7353      	strb	r3, [r2, #13]
   35c3a:	f7fe f857 	bl	33cec <z_spin_unlock_valid>
   35c3e:	b968      	cbnz	r0, 35c5c <z_tick_sleep+0xc4>
   35c40:	23c3      	movs	r3, #195	; 0xc3
   35c42:	4a1c      	ldr	r2, [pc, #112]	; (35cb4 <z_tick_sleep+0x11c>)
   35c44:	4921      	ldr	r1, [pc, #132]	; (35ccc <z_tick_sleep+0x134>)
   35c46:	4818      	ldr	r0, [pc, #96]	; (35ca8 <z_tick_sleep+0x110>)
   35c48:	f003 fa73 	bl	39132 <printk>
   35c4c:	4918      	ldr	r1, [pc, #96]	; (35cb0 <z_tick_sleep+0x118>)
   35c4e:	4820      	ldr	r0, [pc, #128]	; (35cd0 <z_tick_sleep+0x138>)
   35c50:	f003 fa6f 	bl	39132 <printk>
   35c54:	21c3      	movs	r1, #195	; 0xc3
   35c56:	4817      	ldr	r0, [pc, #92]	; (35cb4 <z_tick_sleep+0x11c>)
   35c58:	f003 fd0a 	bl	39670 <assert_post_action>
   35c5c:	4640      	mov	r0, r8
   35c5e:	f7ed fa41 	bl	230e4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   35c62:	68ab      	ldr	r3, [r5, #8]
   35c64:	7b5b      	ldrb	r3, [r3, #13]
   35c66:	06db      	lsls	r3, r3, #27
   35c68:	d50e      	bpl.n	35c88 <z_tick_sleep+0xf0>
   35c6a:	491a      	ldr	r1, [pc, #104]	; (35cd4 <z_tick_sleep+0x13c>)
   35c6c:	f240 43ef 	movw	r3, #1263	; 0x4ef
   35c70:	4a0c      	ldr	r2, [pc, #48]	; (35ca4 <z_tick_sleep+0x10c>)
   35c72:	480d      	ldr	r0, [pc, #52]	; (35ca8 <z_tick_sleep+0x110>)
   35c74:	f003 fa5d 	bl	39132 <printk>
   35c78:	480c      	ldr	r0, [pc, #48]	; (35cac <z_tick_sleep+0x114>)
   35c7a:	f003 fa5a 	bl	39132 <printk>
   35c7e:	f240 41ef 	movw	r1, #1263	; 0x4ef
   35c82:	4808      	ldr	r0, [pc, #32]	; (35ca4 <z_tick_sleep+0x10c>)
   35c84:	f003 fcf4 	bl	39670 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   35c88:	f008 f8b6 	bl	3ddf8 <sys_clock_tick_get_32>
   35c8c:	1a20      	subs	r0, r4, r0
   35c8e:	eb64 0104 	sbc.w	r1, r4, r4
   35c92:	2800      	cmp	r0, #0
   35c94:	f171 0300 	sbcs.w	r3, r1, #0
   35c98:	bfb8      	it	lt
   35c9a:	2000      	movlt	r0, #0
   35c9c:	e798      	b.n	35bd0 <z_tick_sleep+0x38>
   35c9e:	bf00      	nop
   35ca0:	00045c0a 	.word	0x00045c0a
   35ca4:	00045e5f 	.word	0x00045e5f
   35ca8:	0004033e 	.word	0x0004033e
   35cac:	000408e8 	.word	0x000408e8
   35cb0:	20018a28 	.word	0x20018a28
   35cb4:	00040472 	.word	0x00040472
   35cb8:	000404c4 	.word	0x000404c4
   35cbc:	000404d9 	.word	0x000404d9
   35cc0:	200189dc 	.word	0x200189dc
   35cc4:	20018a24 	.word	0x20018a24
   35cc8:	0003578d 	.word	0x0003578d
   35ccc:	00040498 	.word	0x00040498
   35cd0:	000404af 	.word	0x000404af
   35cd4:	00045f11 	.word	0x00045f11

00035cd8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   35cd8:	b538      	push	{r3, r4, r5, lr}
   35cda:	4604      	mov	r4, r0
   35cdc:	460d      	mov	r5, r1
   35cde:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   35ce2:	b173      	cbz	r3, 35d02 <z_impl_k_sleep+0x2a>
   35ce4:	4913      	ldr	r1, [pc, #76]	; (35d34 <z_impl_k_sleep+0x5c>)
   35ce6:	f240 43fe 	movw	r3, #1278	; 0x4fe
   35cea:	4a13      	ldr	r2, [pc, #76]	; (35d38 <z_impl_k_sleep+0x60>)
   35cec:	4813      	ldr	r0, [pc, #76]	; (35d3c <z_impl_k_sleep+0x64>)
   35cee:	f003 fa20 	bl	39132 <printk>
   35cf2:	4813      	ldr	r0, [pc, #76]	; (35d40 <z_impl_k_sleep+0x68>)
   35cf4:	f003 fa1d 	bl	39132 <printk>
   35cf8:	f240 41fe 	movw	r1, #1278	; 0x4fe
   35cfc:	480e      	ldr	r0, [pc, #56]	; (35d38 <z_impl_k_sleep+0x60>)
   35cfe:	f003 fcb7 	bl	39670 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   35d02:	1c6b      	adds	r3, r5, #1
   35d04:	bf08      	it	eq
   35d06:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   35d0a:	d106      	bne.n	35d1a <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   35d0c:	4b0d      	ldr	r3, [pc, #52]	; (35d44 <z_impl_k_sleep+0x6c>)
   35d0e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   35d10:	f7ff fa42 	bl	35198 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   35d14:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   35d18:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   35d1a:	4629      	mov	r1, r5
   35d1c:	4620      	mov	r0, r4
   35d1e:	f7ff ff3b 	bl	35b98 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   35d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   35d26:	fb80 0103 	smull	r0, r1, r0, r3
   35d2a:	0bc3      	lsrs	r3, r0, #15
   35d2c:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
	return ret;
   35d30:	e7f2      	b.n	35d18 <z_impl_k_sleep+0x40>
   35d32:	bf00      	nop
   35d34:	00045c0a 	.word	0x00045c0a
   35d38:	00045e5f 	.word	0x00045e5f
   35d3c:	0004033e 	.word	0x0004033e
   35d40:	000408e8 	.word	0x000408e8
   35d44:	200189dc 	.word	0x200189dc

00035d48 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   35d48:	4b01      	ldr	r3, [pc, #4]	; (35d50 <z_impl_k_current_get+0x8>)
   35d4a:	6898      	ldr	r0, [r3, #8]
   35d4c:	4770      	bx	lr
   35d4e:	bf00      	nop
   35d50:	200189dc 	.word	0x200189dc

00035d54 <z_impl_k_is_preempt_thread>:
   35d54:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   35d58:	b93b      	cbnz	r3, 35d6a <z_impl_k_is_preempt_thread+0x16>
   35d5a:	4b05      	ldr	r3, [pc, #20]	; (35d70 <z_impl_k_is_preempt_thread+0x1c>)
   35d5c:	689b      	ldr	r3, [r3, #8]
   35d5e:	89d8      	ldrh	r0, [r3, #14]
   35d60:	287f      	cmp	r0, #127	; 0x7f
   35d62:	bf8c      	ite	hi
   35d64:	2000      	movhi	r0, #0
   35d66:	2001      	movls	r0, #1
   35d68:	4770      	bx	lr
   35d6a:	2000      	movs	r0, #0
}
   35d6c:	4770      	bx	lr
   35d6e:	bf00      	nop
   35d70:	200189dc 	.word	0x200189dc

00035d74 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   35d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35d78:	4604      	mov	r4, r0
   35d7a:	f04f 0320 	mov.w	r3, #32
   35d7e:	f3ef 8611 	mrs	r6, BASEPRI
   35d82:	f383 8811 	msr	BASEPRI, r3
   35d86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35d8a:	4848      	ldr	r0, [pc, #288]	; (35eac <z_thread_abort+0x138>)
   35d8c:	f7fd ffa0 	bl	33cd0 <z_spin_lock_valid>
   35d90:	b968      	cbnz	r0, 35dae <z_thread_abort+0x3a>
   35d92:	2381      	movs	r3, #129	; 0x81
   35d94:	4a46      	ldr	r2, [pc, #280]	; (35eb0 <z_thread_abort+0x13c>)
   35d96:	4947      	ldr	r1, [pc, #284]	; (35eb4 <z_thread_abort+0x140>)
   35d98:	4847      	ldr	r0, [pc, #284]	; (35eb8 <z_thread_abort+0x144>)
   35d9a:	f003 f9ca 	bl	39132 <printk>
   35d9e:	4943      	ldr	r1, [pc, #268]	; (35eac <z_thread_abort+0x138>)
   35da0:	4846      	ldr	r0, [pc, #280]	; (35ebc <z_thread_abort+0x148>)
   35da2:	f003 f9c6 	bl	39132 <printk>
   35da6:	2181      	movs	r1, #129	; 0x81
   35da8:	4841      	ldr	r0, [pc, #260]	; (35eb0 <z_thread_abort+0x13c>)
   35daa:	f003 fc61 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   35dae:	483f      	ldr	r0, [pc, #252]	; (35eac <z_thread_abort+0x138>)
   35db0:	f7fd ffac 	bl	33d0c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   35db4:	7b63      	ldrb	r3, [r4, #13]
   35db6:	071a      	lsls	r2, r3, #28
   35db8:	d517      	bpl.n	35dea <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35dba:	483c      	ldr	r0, [pc, #240]	; (35eac <z_thread_abort+0x138>)
   35dbc:	f7fd ff96 	bl	33cec <z_spin_unlock_valid>
   35dc0:	b968      	cbnz	r0, 35dde <z_thread_abort+0x6a>
   35dc2:	23ac      	movs	r3, #172	; 0xac
   35dc4:	4a3a      	ldr	r2, [pc, #232]	; (35eb0 <z_thread_abort+0x13c>)
   35dc6:	493e      	ldr	r1, [pc, #248]	; (35ec0 <z_thread_abort+0x14c>)
   35dc8:	483b      	ldr	r0, [pc, #236]	; (35eb8 <z_thread_abort+0x144>)
   35dca:	f003 f9b2 	bl	39132 <printk>
   35dce:	4937      	ldr	r1, [pc, #220]	; (35eac <z_thread_abort+0x138>)
   35dd0:	483c      	ldr	r0, [pc, #240]	; (35ec4 <z_thread_abort+0x150>)
   35dd2:	f003 f9ae 	bl	39132 <printk>
   35dd6:	21ac      	movs	r1, #172	; 0xac
   35dd8:	4835      	ldr	r0, [pc, #212]	; (35eb0 <z_thread_abort+0x13c>)
   35dda:	f003 fc49 	bl	39670 <assert_post_action>
	__asm__ volatile(
   35dde:	f386 8811 	msr	BASEPRI, r6
   35de2:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   35de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   35dea:	f023 0220 	bic.w	r2, r3, #32
   35dee:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   35df2:	09d2      	lsrs	r2, r2, #7
   35df4:	d142      	bne.n	35e7c <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   35df6:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   35df8:	68a3      	ldr	r3, [r4, #8]
   35dfa:	b113      	cbz	r3, 35e02 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   35dfc:	4620      	mov	r0, r4
   35dfe:	f7ff f837 	bl	34e70 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   35e02:	f104 0018 	add.w	r0, r4, #24
   35e06:	f000 fa11 	bl	3622c <z_abort_timeout>
   35e0a:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   35e0e:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   35e12:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35e14:	42bd      	cmp	r5, r7
   35e16:	d001      	beq.n	35e1c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   35e18:	2d00      	cmp	r5, #0
   35e1a:	d139      	bne.n	35e90 <z_thread_abort+0x11c>
		update_cache(1);
   35e1c:	2001      	movs	r0, #1
   35e1e:	f7ff f895 	bl	34f4c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   35e22:	4b29      	ldr	r3, [pc, #164]	; (35ec8 <z_thread_abort+0x154>)
   35e24:	689b      	ldr	r3, [r3, #8]
   35e26:	42a3      	cmp	r3, r4
   35e28:	d1c7      	bne.n	35dba <z_thread_abort+0x46>
   35e2a:	f3ef 8305 	mrs	r3, IPSR
   35e2e:	2b00      	cmp	r3, #0
   35e30:	d1c3      	bne.n	35dba <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35e32:	481e      	ldr	r0, [pc, #120]	; (35eac <z_thread_abort+0x138>)
   35e34:	f7fd ff5a 	bl	33cec <z_spin_unlock_valid>
   35e38:	b968      	cbnz	r0, 35e56 <z_thread_abort+0xe2>
   35e3a:	23c3      	movs	r3, #195	; 0xc3
   35e3c:	4a1c      	ldr	r2, [pc, #112]	; (35eb0 <z_thread_abort+0x13c>)
   35e3e:	4920      	ldr	r1, [pc, #128]	; (35ec0 <z_thread_abort+0x14c>)
   35e40:	481d      	ldr	r0, [pc, #116]	; (35eb8 <z_thread_abort+0x144>)
   35e42:	f003 f976 	bl	39132 <printk>
   35e46:	4919      	ldr	r1, [pc, #100]	; (35eac <z_thread_abort+0x138>)
   35e48:	481e      	ldr	r0, [pc, #120]	; (35ec4 <z_thread_abort+0x150>)
   35e4a:	f003 f972 	bl	39132 <printk>
   35e4e:	21c3      	movs	r1, #195	; 0xc3
   35e50:	4817      	ldr	r0, [pc, #92]	; (35eb0 <z_thread_abort+0x13c>)
   35e52:	f003 fc0d 	bl	39670 <assert_post_action>
   35e56:	4630      	mov	r0, r6
   35e58:	f7ed f944 	bl	230e4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   35e5c:	f240 6311 	movw	r3, #1553	; 0x611
   35e60:	4a1a      	ldr	r2, [pc, #104]	; (35ecc <z_thread_abort+0x158>)
   35e62:	491b      	ldr	r1, [pc, #108]	; (35ed0 <z_thread_abort+0x15c>)
   35e64:	4814      	ldr	r0, [pc, #80]	; (35eb8 <z_thread_abort+0x144>)
   35e66:	f003 f964 	bl	39132 <printk>
   35e6a:	481a      	ldr	r0, [pc, #104]	; (35ed4 <z_thread_abort+0x160>)
   35e6c:	f003 f961 	bl	39132 <printk>
   35e70:	f240 6111 	movw	r1, #1553	; 0x611
   35e74:	4815      	ldr	r0, [pc, #84]	; (35ecc <z_thread_abort+0x158>)
   35e76:	f003 fbfb 	bl	39670 <assert_post_action>
   35e7a:	e79e      	b.n	35dba <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35e7c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   35e80:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   35e84:	4621      	mov	r1, r4
   35e86:	4814      	ldr	r0, [pc, #80]	; (35ed8 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   35e88:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   35e8a:	f7fe ffcf 	bl	34e2c <z_priq_dumb_remove>
}
   35e8e:	e7b3      	b.n	35df8 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   35e90:	4628      	mov	r0, r5
   35e92:	f7fe ffed 	bl	34e70 <unpend_thread_no_timeout>
   35e96:	f105 0018 	add.w	r0, r5, #24
   35e9a:	f000 f9c7 	bl	3622c <z_abort_timeout>
		ready_thread(thread);
   35e9e:	4628      	mov	r0, r5
   35ea0:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   35ea4:	f7ff fb2e 	bl	35504 <ready_thread>
   35ea8:	e7b3      	b.n	35e12 <z_thread_abort+0x9e>
   35eaa:	bf00      	nop
   35eac:	20018a28 	.word	0x20018a28
   35eb0:	00040472 	.word	0x00040472
   35eb4:	000404c4 	.word	0x000404c4
   35eb8:	0004033e 	.word	0x0004033e
   35ebc:	000404d9 	.word	0x000404d9
   35ec0:	00040498 	.word	0x00040498
   35ec4:	000404af 	.word	0x000404af
   35ec8:	200189dc 	.word	0x200189dc
   35ecc:	00045e5f 	.word	0x00045e5f
   35ed0:	000451fc 	.word	0x000451fc
   35ed4:	00045f51 	.word	0x00045f51
   35ed8:	20018a04 	.word	0x20018a04

00035edc <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   35edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35ede:	4604      	mov	r4, r0
   35ee0:	460e      	mov	r6, r1
   35ee2:	4615      	mov	r5, r2
	__asm__ volatile(
   35ee4:	f04f 0320 	mov.w	r3, #32
   35ee8:	f3ef 8711 	mrs	r7, BASEPRI
   35eec:	f383 8811 	msr	BASEPRI, r3
   35ef0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35ef4:	481e      	ldr	r0, [pc, #120]	; (35f70 <z_sched_wake+0x94>)
   35ef6:	f7fd feeb 	bl	33cd0 <z_spin_lock_valid>
   35efa:	b968      	cbnz	r0, 35f18 <z_sched_wake+0x3c>
   35efc:	2381      	movs	r3, #129	; 0x81
   35efe:	4a1d      	ldr	r2, [pc, #116]	; (35f74 <z_sched_wake+0x98>)
   35f00:	491d      	ldr	r1, [pc, #116]	; (35f78 <z_sched_wake+0x9c>)
   35f02:	481e      	ldr	r0, [pc, #120]	; (35f7c <z_sched_wake+0xa0>)
   35f04:	f003 f915 	bl	39132 <printk>
   35f08:	4919      	ldr	r1, [pc, #100]	; (35f70 <z_sched_wake+0x94>)
   35f0a:	481d      	ldr	r0, [pc, #116]	; (35f80 <z_sched_wake+0xa4>)
   35f0c:	f003 f911 	bl	39132 <printk>
   35f10:	2181      	movs	r1, #129	; 0x81
   35f12:	4818      	ldr	r0, [pc, #96]	; (35f74 <z_sched_wake+0x98>)
   35f14:	f003 fbac 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   35f18:	4815      	ldr	r0, [pc, #84]	; (35f70 <z_sched_wake+0x94>)
   35f1a:	f7fd fef7 	bl	33d0c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   35f1e:	4620      	mov	r0, r4
   35f20:	f007 ff50 	bl	3ddc4 <z_priq_dumb_best>

		if (thread != NULL) {
   35f24:	4604      	mov	r4, r0
   35f26:	b158      	cbz	r0, 35f40 <z_sched_wake+0x64>
   35f28:	67c6      	str	r6, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   35f2a:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   35f2c:	f7fe ffa0 	bl	34e70 <unpend_thread_no_timeout>
   35f30:	f104 0018 	add.w	r0, r4, #24
   35f34:	f000 f97a 	bl	3622c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   35f38:	4620      	mov	r0, r4
   35f3a:	f7ff fae3 	bl	35504 <ready_thread>
			ret = true;
   35f3e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35f40:	480b      	ldr	r0, [pc, #44]	; (35f70 <z_sched_wake+0x94>)
   35f42:	f7fd fed3 	bl	33cec <z_spin_unlock_valid>
   35f46:	b968      	cbnz	r0, 35f64 <z_sched_wake+0x88>
   35f48:	23ac      	movs	r3, #172	; 0xac
   35f4a:	4a0a      	ldr	r2, [pc, #40]	; (35f74 <z_sched_wake+0x98>)
   35f4c:	490d      	ldr	r1, [pc, #52]	; (35f84 <z_sched_wake+0xa8>)
   35f4e:	480b      	ldr	r0, [pc, #44]	; (35f7c <z_sched_wake+0xa0>)
   35f50:	f003 f8ef 	bl	39132 <printk>
   35f54:	4906      	ldr	r1, [pc, #24]	; (35f70 <z_sched_wake+0x94>)
   35f56:	480c      	ldr	r0, [pc, #48]	; (35f88 <z_sched_wake+0xac>)
   35f58:	f003 f8eb 	bl	39132 <printk>
   35f5c:	21ac      	movs	r1, #172	; 0xac
   35f5e:	4805      	ldr	r0, [pc, #20]	; (35f74 <z_sched_wake+0x98>)
   35f60:	f003 fb86 	bl	39670 <assert_post_action>
	__asm__ volatile(
   35f64:	f387 8811 	msr	BASEPRI, r7
   35f68:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   35f6c:	4620      	mov	r0, r4
   35f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35f70:	20018a28 	.word	0x20018a28
   35f74:	00040472 	.word	0x00040472
   35f78:	000404c4 	.word	0x000404c4
   35f7c:	0004033e 	.word	0x0004033e
   35f80:	000404d9 	.word	0x000404d9
   35f84:	00040498 	.word	0x00040498
   35f88:	000404af 	.word	0x000404af

00035f8c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   35f8c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   35f8e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   35f92:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   35f94:	e9cd 6700 	strd	r6, r7, [sp]
   35f98:	f7ff f8ce 	bl	35138 <z_pend_curr>

	if (data != NULL) {
   35f9c:	b11c      	cbz	r4, 35fa6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   35f9e:	4b03      	ldr	r3, [pc, #12]	; (35fac <z_sched_wait+0x20>)
   35fa0:	689b      	ldr	r3, [r3, #8]
   35fa2:	695b      	ldr	r3, [r3, #20]
   35fa4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   35fa6:	b002      	add	sp, #8
   35fa8:	bdd0      	pop	{r4, r6, r7, pc}
   35faa:	bf00      	nop
   35fac:	200189dc 	.word	0x200189dc

00035fb0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   35fb0:	b508      	push	{r3, lr}
   35fb2:	4806      	ldr	r0, [pc, #24]	; (35fcc <z_data_copy+0x1c>)
   35fb4:	4a06      	ldr	r2, [pc, #24]	; (35fd0 <z_data_copy+0x20>)
   35fb6:	4907      	ldr	r1, [pc, #28]	; (35fd4 <z_data_copy+0x24>)
   35fb8:	1a12      	subs	r2, r2, r0
   35fba:	f007 ffd6 	bl	3df6a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   35fbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   35fc2:	4a05      	ldr	r2, [pc, #20]	; (35fd8 <z_data_copy+0x28>)
   35fc4:	4905      	ldr	r1, [pc, #20]	; (35fdc <z_data_copy+0x2c>)
   35fc6:	4806      	ldr	r0, [pc, #24]	; (35fe0 <z_data_copy+0x30>)
   35fc8:	f007 bfcf 	b.w	3df6a <memcpy>
   35fcc:	20014500 	.word	0x20014500
   35fd0:	20014ec0 	.word	0x20014ec0
   35fd4:	00046434 	.word	0x00046434
   35fd8:	00000000 	.word	0x00000000
   35fdc:	0004641c 	.word	0x0004641c
   35fe0:	20014500 	.word	0x20014500

00035fe4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   35fe4:	4b03      	ldr	r3, [pc, #12]	; (35ff4 <elapsed+0x10>)
   35fe6:	681b      	ldr	r3, [r3, #0]
   35fe8:	b90b      	cbnz	r3, 35fee <elapsed+0xa>
   35fea:	f7ed b807 	b.w	22ffc <sys_clock_elapsed>
}
   35fee:	2000      	movs	r0, #0
   35ff0:	4770      	bx	lr
   35ff2:	bf00      	nop
   35ff4:	20018a34 	.word	0x20018a34

00035ff8 <next_timeout>:
	return list->head == list;
   35ff8:	4b13      	ldr	r3, [pc, #76]	; (36048 <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   35ffa:	b510      	push	{r4, lr}
   35ffc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   35ffe:	429c      	cmp	r4, r3
   36000:	bf08      	it	eq
   36002:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   36004:	f7ff ffee 	bl	35fe4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   36008:	b1cc      	cbz	r4, 3603e <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   3600a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   3600e:	1a12      	subs	r2, r2, r0
   36010:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   36014:	2a01      	cmp	r2, #1
   36016:	f173 0100 	sbcs.w	r1, r3, #0
   3601a:	db13      	blt.n	36044 <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   3601c:	4610      	mov	r0, r2
   3601e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   36022:	4619      	mov	r1, r3
   36024:	2300      	movs	r3, #0
   36026:	4282      	cmp	r2, r0
   36028:	eb73 0401 	sbcs.w	r4, r3, r1
   3602c:	da00      	bge.n	36030 <next_timeout+0x38>
   3602e:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   36030:	4b06      	ldr	r3, [pc, #24]	; (3604c <next_timeout+0x54>)
   36032:	691b      	ldr	r3, [r3, #16]
   36034:	b113      	cbz	r3, 3603c <next_timeout+0x44>
   36036:	4298      	cmp	r0, r3
   36038:	bfa8      	it	ge
   3603a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3603c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   3603e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   36042:	e7f5      	b.n	36030 <next_timeout+0x38>
   36044:	2000      	movs	r0, #0
   36046:	e7f3      	b.n	36030 <next_timeout+0x38>
   36048:	20014868 	.word	0x20014868
   3604c:	200189dc 	.word	0x200189dc

00036050 <remove_timeout>:
{
   36050:	b530      	push	{r4, r5, lr}
   36052:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   36054:	b168      	cbz	r0, 36072 <remove_timeout+0x22>
   36056:	4a0a      	ldr	r2, [pc, #40]	; (36080 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   36058:	6852      	ldr	r2, [r2, #4]
   3605a:	4290      	cmp	r0, r2
   3605c:	d009      	beq.n	36072 <remove_timeout+0x22>
	if (next(t) != NULL) {
   3605e:	b143      	cbz	r3, 36072 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   36060:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   36064:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   36068:	1912      	adds	r2, r2, r4
   3606a:	eb45 0101 	adc.w	r1, r5, r1
   3606e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   36072:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   36074:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   36076:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   36078:	2300      	movs	r3, #0
	node->prev = NULL;
   3607a:	e9c0 3300 	strd	r3, r3, [r0]
}
   3607e:	bd30      	pop	{r4, r5, pc}
   36080:	20014868 	.word	0x20014868

00036084 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   36084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36088:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3608a:	1c6b      	adds	r3, r5, #1
   3608c:	bf08      	it	eq
   3608e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   36092:	4682      	mov	sl, r0
   36094:	468b      	mov	fp, r1
   36096:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   36098:	f000 80aa 	beq.w	361f0 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3609c:	6803      	ldr	r3, [r0, #0]
   3609e:	b163      	cbz	r3, 360ba <z_add_timeout+0x36>
   360a0:	4955      	ldr	r1, [pc, #340]	; (361f8 <z_add_timeout+0x174>)
   360a2:	235d      	movs	r3, #93	; 0x5d
   360a4:	4a55      	ldr	r2, [pc, #340]	; (361fc <z_add_timeout+0x178>)
   360a6:	4856      	ldr	r0, [pc, #344]	; (36200 <z_add_timeout+0x17c>)
   360a8:	f003 f843 	bl	39132 <printk>
   360ac:	4855      	ldr	r0, [pc, #340]	; (36204 <z_add_timeout+0x180>)
   360ae:	f003 f840 	bl	39132 <printk>
   360b2:	215d      	movs	r1, #93	; 0x5d
   360b4:	4851      	ldr	r0, [pc, #324]	; (361fc <z_add_timeout+0x178>)
   360b6:	f003 fadb 	bl	39670 <assert_post_action>
	to->fn = fn;
   360ba:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   360be:	f04f 0320 	mov.w	r3, #32
   360c2:	f3ef 8b11 	mrs	fp, BASEPRI
   360c6:	f383 8811 	msr	BASEPRI, r3
   360ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   360ce:	484e      	ldr	r0, [pc, #312]	; (36208 <z_add_timeout+0x184>)
   360d0:	f7fd fdfe 	bl	33cd0 <z_spin_lock_valid>
   360d4:	b968      	cbnz	r0, 360f2 <z_add_timeout+0x6e>
   360d6:	2381      	movs	r3, #129	; 0x81
   360d8:	4a4c      	ldr	r2, [pc, #304]	; (3620c <z_add_timeout+0x188>)
   360da:	494d      	ldr	r1, [pc, #308]	; (36210 <z_add_timeout+0x18c>)
   360dc:	4848      	ldr	r0, [pc, #288]	; (36200 <z_add_timeout+0x17c>)
   360de:	f003 f828 	bl	39132 <printk>
   360e2:	4949      	ldr	r1, [pc, #292]	; (36208 <z_add_timeout+0x184>)
   360e4:	484b      	ldr	r0, [pc, #300]	; (36214 <z_add_timeout+0x190>)
   360e6:	f003 f824 	bl	39132 <printk>
   360ea:	2181      	movs	r1, #129	; 0x81
   360ec:	4847      	ldr	r0, [pc, #284]	; (3620c <z_add_timeout+0x188>)
   360ee:	f003 fabf 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   360f2:	4845      	ldr	r0, [pc, #276]	; (36208 <z_add_timeout+0x184>)
   360f4:	f7fd fe0a 	bl	33d0c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   360f8:	f06f 0301 	mvn.w	r3, #1
   360fc:	f04f 32ff 	mov.w	r2, #4294967295
   36100:	ebb3 0804 	subs.w	r8, r3, r4
   36104:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   36108:	f1b8 0f00 	cmp.w	r8, #0
   3610c:	f179 0100 	sbcs.w	r1, r9, #0
   36110:	db1c      	blt.n	3614c <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   36112:	4841      	ldr	r0, [pc, #260]	; (36218 <z_add_timeout+0x194>)
   36114:	e9d0 1000 	ldrd	r1, r0, [r0]
   36118:	1a5b      	subs	r3, r3, r1
   3611a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   3611e:	1b1e      	subs	r6, r3, r4
   36120:	eb62 0705 	sbc.w	r7, r2, r5
   36124:	2e01      	cmp	r6, #1
   36126:	f177 0300 	sbcs.w	r3, r7, #0
   3612a:	bfbc      	itt	lt
   3612c:	2601      	movlt	r6, #1
   3612e:	2700      	movlt	r7, #0
   36130:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   36134:	4a39      	ldr	r2, [pc, #228]	; (3621c <z_add_timeout+0x198>)
   36136:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3613a:	4293      	cmp	r3, r2
   3613c:	d11d      	bne.n	3617a <z_add_timeout+0xf6>
	node->prev = tail;
   3613e:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   36142:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   36146:	f8c2 a004 	str.w	sl, [r2, #4]
}
   3614a:	e02c      	b.n	361a6 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   3614c:	f7ff ff4a 	bl	35fe4 <elapsed>
   36150:	1c63      	adds	r3, r4, #1
   36152:	9300      	str	r3, [sp, #0]
   36154:	f145 0300 	adc.w	r3, r5, #0
   36158:	9301      	str	r3, [sp, #4]
   3615a:	e9dd 2300 	ldrd	r2, r3, [sp]
   3615e:	1812      	adds	r2, r2, r0
   36160:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   36164:	e9ca 2304 	strd	r2, r3, [sl, #16]
   36168:	e7e4      	b.n	36134 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   3616a:	1be0      	subs	r0, r4, r7
   3616c:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   36170:	42b3      	cmp	r3, r6
   36172:	e9ca 0104 	strd	r0, r1, [sl, #16]
   36176:	d0e2      	beq.n	3613e <z_add_timeout+0xba>
   36178:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   3617a:	2b00      	cmp	r3, #0
   3617c:	d0df      	beq.n	3613e <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   3617e:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   36182:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   36186:	42bc      	cmp	r4, r7
   36188:	eb75 0108 	sbcs.w	r1, r5, r8
   3618c:	daed      	bge.n	3616a <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   3618e:	1b38      	subs	r0, r7, r4
   36190:	eb68 0105 	sbc.w	r1, r8, r5
   36194:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   36198:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   3619a:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   3619e:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   361a2:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   361a6:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   361a8:	4293      	cmp	r3, r2
   361aa:	d00b      	beq.n	361c4 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   361ac:	459a      	cmp	sl, r3
   361ae:	d109      	bne.n	361c4 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   361b0:	f7ff ff22 	bl	35ff8 <next_timeout>

			if (next_time == 0 ||
   361b4:	b118      	cbz	r0, 361be <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   361b6:	4b1a      	ldr	r3, [pc, #104]	; (36220 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   361b8:	691b      	ldr	r3, [r3, #16]
   361ba:	4283      	cmp	r3, r0
   361bc:	d002      	beq.n	361c4 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   361be:	2100      	movs	r1, #0
   361c0:	f7ec feea 	bl	22f98 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   361c4:	4810      	ldr	r0, [pc, #64]	; (36208 <z_add_timeout+0x184>)
   361c6:	f7fd fd91 	bl	33cec <z_spin_unlock_valid>
   361ca:	b968      	cbnz	r0, 361e8 <z_add_timeout+0x164>
   361cc:	23ac      	movs	r3, #172	; 0xac
   361ce:	4a0f      	ldr	r2, [pc, #60]	; (3620c <z_add_timeout+0x188>)
   361d0:	4914      	ldr	r1, [pc, #80]	; (36224 <z_add_timeout+0x1a0>)
   361d2:	480b      	ldr	r0, [pc, #44]	; (36200 <z_add_timeout+0x17c>)
   361d4:	f002 ffad 	bl	39132 <printk>
   361d8:	490b      	ldr	r1, [pc, #44]	; (36208 <z_add_timeout+0x184>)
   361da:	4813      	ldr	r0, [pc, #76]	; (36228 <z_add_timeout+0x1a4>)
   361dc:	f002 ffa9 	bl	39132 <printk>
   361e0:	21ac      	movs	r1, #172	; 0xac
   361e2:	480a      	ldr	r0, [pc, #40]	; (3620c <z_add_timeout+0x188>)
   361e4:	f003 fa44 	bl	39670 <assert_post_action>
	__asm__ volatile(
   361e8:	f38b 8811 	msr	BASEPRI, fp
   361ec:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   361f0:	b003      	add	sp, #12
   361f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   361f6:	bf00      	nop
   361f8:	00045f97 	.word	0x00045f97
   361fc:	00045f73 	.word	0x00045f73
   36200:	0004033e 	.word	0x0004033e
   36204:	000408e8 	.word	0x000408e8
   36208:	20018a38 	.word	0x20018a38
   3620c:	00040472 	.word	0x00040472
   36210:	000404c4 	.word	0x000404c4
   36214:	000404d9 	.word	0x000404d9
   36218:	20016e18 	.word	0x20016e18
   3621c:	20014868 	.word	0x20014868
   36220:	200189dc 	.word	0x200189dc
   36224:	00040498 	.word	0x00040498
   36228:	000404af 	.word	0x000404af

0003622c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   3622c:	b538      	push	{r3, r4, r5, lr}
   3622e:	4604      	mov	r4, r0
	__asm__ volatile(
   36230:	f04f 0320 	mov.w	r3, #32
   36234:	f3ef 8511 	mrs	r5, BASEPRI
   36238:	f383 8811 	msr	BASEPRI, r3
   3623c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36240:	481a      	ldr	r0, [pc, #104]	; (362ac <z_abort_timeout+0x80>)
   36242:	f7fd fd45 	bl	33cd0 <z_spin_lock_valid>
   36246:	b968      	cbnz	r0, 36264 <z_abort_timeout+0x38>
   36248:	2381      	movs	r3, #129	; 0x81
   3624a:	4a19      	ldr	r2, [pc, #100]	; (362b0 <z_abort_timeout+0x84>)
   3624c:	4919      	ldr	r1, [pc, #100]	; (362b4 <z_abort_timeout+0x88>)
   3624e:	481a      	ldr	r0, [pc, #104]	; (362b8 <z_abort_timeout+0x8c>)
   36250:	f002 ff6f 	bl	39132 <printk>
   36254:	4915      	ldr	r1, [pc, #84]	; (362ac <z_abort_timeout+0x80>)
   36256:	4819      	ldr	r0, [pc, #100]	; (362bc <z_abort_timeout+0x90>)
   36258:	f002 ff6b 	bl	39132 <printk>
   3625c:	2181      	movs	r1, #129	; 0x81
   3625e:	4814      	ldr	r0, [pc, #80]	; (362b0 <z_abort_timeout+0x84>)
   36260:	f003 fa06 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   36264:	4811      	ldr	r0, [pc, #68]	; (362ac <z_abort_timeout+0x80>)
   36266:	f7fd fd51 	bl	33d0c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   3626a:	6823      	ldr	r3, [r4, #0]
   3626c:	b1db      	cbz	r3, 362a6 <z_abort_timeout+0x7a>
			remove_timeout(to);
   3626e:	4620      	mov	r0, r4
   36270:	f7ff feee 	bl	36050 <remove_timeout>
			ret = 0;
   36274:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36276:	480d      	ldr	r0, [pc, #52]	; (362ac <z_abort_timeout+0x80>)
   36278:	f7fd fd38 	bl	33cec <z_spin_unlock_valid>
   3627c:	b968      	cbnz	r0, 3629a <z_abort_timeout+0x6e>
   3627e:	23ac      	movs	r3, #172	; 0xac
   36280:	4a0b      	ldr	r2, [pc, #44]	; (362b0 <z_abort_timeout+0x84>)
   36282:	490f      	ldr	r1, [pc, #60]	; (362c0 <z_abort_timeout+0x94>)
   36284:	480c      	ldr	r0, [pc, #48]	; (362b8 <z_abort_timeout+0x8c>)
   36286:	f002 ff54 	bl	39132 <printk>
   3628a:	4908      	ldr	r1, [pc, #32]	; (362ac <z_abort_timeout+0x80>)
   3628c:	480d      	ldr	r0, [pc, #52]	; (362c4 <z_abort_timeout+0x98>)
   3628e:	f002 ff50 	bl	39132 <printk>
   36292:	21ac      	movs	r1, #172	; 0xac
   36294:	4806      	ldr	r0, [pc, #24]	; (362b0 <z_abort_timeout+0x84>)
   36296:	f003 f9eb 	bl	39670 <assert_post_action>
	__asm__ volatile(
   3629a:	f385 8811 	msr	BASEPRI, r5
   3629e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   362a2:	4620      	mov	r0, r4
   362a4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   362a6:	f06f 0415 	mvn.w	r4, #21
   362aa:	e7e4      	b.n	36276 <z_abort_timeout+0x4a>
   362ac:	20018a38 	.word	0x20018a38
   362b0:	00040472 	.word	0x00040472
   362b4:	000404c4 	.word	0x000404c4
   362b8:	0004033e 	.word	0x0004033e
   362bc:	000404d9 	.word	0x000404d9
   362c0:	00040498 	.word	0x00040498
   362c4:	000404af 	.word	0x000404af

000362c8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   362c8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   362ca:	f04f 0320 	mov.w	r3, #32
   362ce:	f3ef 8511 	mrs	r5, BASEPRI
   362d2:	f383 8811 	msr	BASEPRI, r3
   362d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   362da:	4818      	ldr	r0, [pc, #96]	; (3633c <z_get_next_timeout_expiry+0x74>)
   362dc:	f7fd fcf8 	bl	33cd0 <z_spin_lock_valid>
   362e0:	b968      	cbnz	r0, 362fe <z_get_next_timeout_expiry+0x36>
   362e2:	2381      	movs	r3, #129	; 0x81
   362e4:	4a16      	ldr	r2, [pc, #88]	; (36340 <z_get_next_timeout_expiry+0x78>)
   362e6:	4917      	ldr	r1, [pc, #92]	; (36344 <z_get_next_timeout_expiry+0x7c>)
   362e8:	4817      	ldr	r0, [pc, #92]	; (36348 <z_get_next_timeout_expiry+0x80>)
   362ea:	f002 ff22 	bl	39132 <printk>
   362ee:	4913      	ldr	r1, [pc, #76]	; (3633c <z_get_next_timeout_expiry+0x74>)
   362f0:	4816      	ldr	r0, [pc, #88]	; (3634c <z_get_next_timeout_expiry+0x84>)
   362f2:	f002 ff1e 	bl	39132 <printk>
   362f6:	2181      	movs	r1, #129	; 0x81
   362f8:	4811      	ldr	r0, [pc, #68]	; (36340 <z_get_next_timeout_expiry+0x78>)
   362fa:	f003 f9b9 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   362fe:	480f      	ldr	r0, [pc, #60]	; (3633c <z_get_next_timeout_expiry+0x74>)
   36300:	f7fd fd04 	bl	33d0c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   36304:	f7ff fe78 	bl	35ff8 <next_timeout>
   36308:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3630a:	480c      	ldr	r0, [pc, #48]	; (3633c <z_get_next_timeout_expiry+0x74>)
   3630c:	f7fd fcee 	bl	33cec <z_spin_unlock_valid>
   36310:	b968      	cbnz	r0, 3632e <z_get_next_timeout_expiry+0x66>
   36312:	23ac      	movs	r3, #172	; 0xac
   36314:	4a0a      	ldr	r2, [pc, #40]	; (36340 <z_get_next_timeout_expiry+0x78>)
   36316:	490e      	ldr	r1, [pc, #56]	; (36350 <z_get_next_timeout_expiry+0x88>)
   36318:	480b      	ldr	r0, [pc, #44]	; (36348 <z_get_next_timeout_expiry+0x80>)
   3631a:	f002 ff0a 	bl	39132 <printk>
   3631e:	4907      	ldr	r1, [pc, #28]	; (3633c <z_get_next_timeout_expiry+0x74>)
   36320:	480c      	ldr	r0, [pc, #48]	; (36354 <z_get_next_timeout_expiry+0x8c>)
   36322:	f002 ff06 	bl	39132 <printk>
   36326:	21ac      	movs	r1, #172	; 0xac
   36328:	4805      	ldr	r0, [pc, #20]	; (36340 <z_get_next_timeout_expiry+0x78>)
   3632a:	f003 f9a1 	bl	39670 <assert_post_action>
	__asm__ volatile(
   3632e:	f385 8811 	msr	BASEPRI, r5
   36332:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   36336:	4620      	mov	r0, r4
   36338:	bd38      	pop	{r3, r4, r5, pc}
   3633a:	bf00      	nop
   3633c:	20018a38 	.word	0x20018a38
   36340:	00040472 	.word	0x00040472
   36344:	000404c4 	.word	0x000404c4
   36348:	0004033e 	.word	0x0004033e
   3634c:	000404d9 	.word	0x000404d9
   36350:	00040498 	.word	0x00040498
   36354:	000404af 	.word	0x000404af

00036358 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   36358:	b570      	push	{r4, r5, r6, lr}
   3635a:	4604      	mov	r4, r0
   3635c:	460d      	mov	r5, r1
	__asm__ volatile(
   3635e:	f04f 0320 	mov.w	r3, #32
   36362:	f3ef 8611 	mrs	r6, BASEPRI
   36366:	f383 8811 	msr	BASEPRI, r3
   3636a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3636e:	481b      	ldr	r0, [pc, #108]	; (363dc <z_set_timeout_expiry+0x84>)
   36370:	f7fd fcae 	bl	33cd0 <z_spin_lock_valid>
   36374:	b968      	cbnz	r0, 36392 <z_set_timeout_expiry+0x3a>
   36376:	2381      	movs	r3, #129	; 0x81
   36378:	4a19      	ldr	r2, [pc, #100]	; (363e0 <z_set_timeout_expiry+0x88>)
   3637a:	491a      	ldr	r1, [pc, #104]	; (363e4 <z_set_timeout_expiry+0x8c>)
   3637c:	481a      	ldr	r0, [pc, #104]	; (363e8 <z_set_timeout_expiry+0x90>)
   3637e:	f002 fed8 	bl	39132 <printk>
   36382:	4916      	ldr	r1, [pc, #88]	; (363dc <z_set_timeout_expiry+0x84>)
   36384:	4819      	ldr	r0, [pc, #100]	; (363ec <z_set_timeout_expiry+0x94>)
   36386:	f002 fed4 	bl	39132 <printk>
   3638a:	2181      	movs	r1, #129	; 0x81
   3638c:	4814      	ldr	r0, [pc, #80]	; (363e0 <z_set_timeout_expiry+0x88>)
   3638e:	f003 f96f 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   36392:	4812      	ldr	r0, [pc, #72]	; (363dc <z_set_timeout_expiry+0x84>)
   36394:	f7fd fcba 	bl	33d0c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   36398:	f7ff fe2e 	bl	35ff8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3639c:	2801      	cmp	r0, #1
   3639e:	dd05      	ble.n	363ac <z_set_timeout_expiry+0x54>
   363a0:	42a0      	cmp	r0, r4
   363a2:	db03      	blt.n	363ac <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   363a4:	4629      	mov	r1, r5
   363a6:	4620      	mov	r0, r4
   363a8:	f7ec fdf6 	bl	22f98 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   363ac:	480b      	ldr	r0, [pc, #44]	; (363dc <z_set_timeout_expiry+0x84>)
   363ae:	f7fd fc9d 	bl	33cec <z_spin_unlock_valid>
   363b2:	b968      	cbnz	r0, 363d0 <z_set_timeout_expiry+0x78>
   363b4:	23ac      	movs	r3, #172	; 0xac
   363b6:	4a0a      	ldr	r2, [pc, #40]	; (363e0 <z_set_timeout_expiry+0x88>)
   363b8:	490d      	ldr	r1, [pc, #52]	; (363f0 <z_set_timeout_expiry+0x98>)
   363ba:	480b      	ldr	r0, [pc, #44]	; (363e8 <z_set_timeout_expiry+0x90>)
   363bc:	f002 feb9 	bl	39132 <printk>
   363c0:	4906      	ldr	r1, [pc, #24]	; (363dc <z_set_timeout_expiry+0x84>)
   363c2:	480c      	ldr	r0, [pc, #48]	; (363f4 <z_set_timeout_expiry+0x9c>)
   363c4:	f002 feb5 	bl	39132 <printk>
   363c8:	21ac      	movs	r1, #172	; 0xac
   363ca:	4805      	ldr	r0, [pc, #20]	; (363e0 <z_set_timeout_expiry+0x88>)
   363cc:	f003 f950 	bl	39670 <assert_post_action>
	__asm__ volatile(
   363d0:	f386 8811 	msr	BASEPRI, r6
   363d4:	f3bf 8f6f 	isb	sy
		}
	}
}
   363d8:	bd70      	pop	{r4, r5, r6, pc}
   363da:	bf00      	nop
   363dc:	20018a38 	.word	0x20018a38
   363e0:	00040472 	.word	0x00040472
   363e4:	000404c4 	.word	0x000404c4
   363e8:	0004033e 	.word	0x0004033e
   363ec:	000404d9 	.word	0x000404d9
   363f0:	00040498 	.word	0x00040498
   363f4:	000404af 	.word	0x000404af

000363f8 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   363f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   363fc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   363fe:	f7ff f809 	bl	35414 <z_time_slice>
	__asm__ volatile(
   36402:	f04f 0320 	mov.w	r3, #32
   36406:	f3ef 8711 	mrs	r7, BASEPRI
   3640a:	f383 8811 	msr	BASEPRI, r3
   3640e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36412:	4854      	ldr	r0, [pc, #336]	; (36564 <sys_clock_announce+0x16c>)
   36414:	f7fd fc5c 	bl	33cd0 <z_spin_lock_valid>
   36418:	b968      	cbnz	r0, 36436 <sys_clock_announce+0x3e>
   3641a:	2381      	movs	r3, #129	; 0x81
   3641c:	4a52      	ldr	r2, [pc, #328]	; (36568 <sys_clock_announce+0x170>)
   3641e:	4953      	ldr	r1, [pc, #332]	; (3656c <sys_clock_announce+0x174>)
   36420:	4853      	ldr	r0, [pc, #332]	; (36570 <sys_clock_announce+0x178>)
   36422:	f002 fe86 	bl	39132 <printk>
   36426:	494f      	ldr	r1, [pc, #316]	; (36564 <sys_clock_announce+0x16c>)
   36428:	4852      	ldr	r0, [pc, #328]	; (36574 <sys_clock_announce+0x17c>)
   3642a:	f002 fe82 	bl	39132 <printk>
   3642e:	2181      	movs	r1, #129	; 0x81
   36430:	484d      	ldr	r0, [pc, #308]	; (36568 <sys_clock_announce+0x170>)
   36432:	f003 f91d 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   36436:	4e50      	ldr	r6, [pc, #320]	; (36578 <sys_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   36438:	4d50      	ldr	r5, [pc, #320]	; (3657c <sys_clock_announce+0x184>)
   3643a:	46b3      	mov	fp, r6
   3643c:	4849      	ldr	r0, [pc, #292]	; (36564 <sys_clock_announce+0x16c>)
	return list->head == list;
   3643e:	f8df a148 	ldr.w	sl, [pc, #328]	; 36588 <sys_clock_announce+0x190>
   36442:	f7fd fc63 	bl	33d0c <z_spin_lock_set_owner>
   36446:	602c      	str	r4, [r5, #0]
   36448:	f8d5 c000 	ldr.w	ip, [r5]
   3644c:	e9d6 2300 	ldrd	r2, r3, [r6]
   36450:	e9cd 2300 	strd	r2, r3, [sp]
   36454:	4662      	mov	r2, ip
   36456:	f8da 4000 	ldr.w	r4, [sl]
   3645a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3645c:	4554      	cmp	r4, sl
   3645e:	46e0      	mov	r8, ip
   36460:	4699      	mov	r9, r3
   36462:	d00c      	beq.n	3647e <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   36464:	b15c      	cbz	r4, 3647e <sys_clock_announce+0x86>
   36466:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   3646a:	458c      	cmp	ip, r1
   3646c:	eb79 0302 	sbcs.w	r3, r9, r2
   36470:	da2e      	bge.n	364d0 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   36472:	ebb1 000c 	subs.w	r0, r1, ip
   36476:	eb62 0109 	sbc.w	r1, r2, r9
   3647a:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   3647e:	464b      	mov	r3, r9
	announce_remaining = 0;
   36480:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   36482:	9a00      	ldr	r2, [sp, #0]
   36484:	9901      	ldr	r1, [sp, #4]
   36486:	eb18 0202 	adds.w	r2, r8, r2
   3648a:	eb43 0101 	adc.w	r1, r3, r1
   3648e:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   36492:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   36494:	f7ff fdb0 	bl	35ff8 <next_timeout>
   36498:	4621      	mov	r1, r4
   3649a:	f7ec fd7d 	bl	22f98 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3649e:	4831      	ldr	r0, [pc, #196]	; (36564 <sys_clock_announce+0x16c>)
   364a0:	f7fd fc24 	bl	33cec <z_spin_unlock_valid>
   364a4:	b968      	cbnz	r0, 364c2 <sys_clock_announce+0xca>
   364a6:	23ac      	movs	r3, #172	; 0xac
   364a8:	4a2f      	ldr	r2, [pc, #188]	; (36568 <sys_clock_announce+0x170>)
   364aa:	4935      	ldr	r1, [pc, #212]	; (36580 <sys_clock_announce+0x188>)
   364ac:	4830      	ldr	r0, [pc, #192]	; (36570 <sys_clock_announce+0x178>)
   364ae:	f002 fe40 	bl	39132 <printk>
   364b2:	492c      	ldr	r1, [pc, #176]	; (36564 <sys_clock_announce+0x16c>)
   364b4:	4833      	ldr	r0, [pc, #204]	; (36584 <sys_clock_announce+0x18c>)
   364b6:	f002 fe3c 	bl	39132 <printk>
   364ba:	21ac      	movs	r1, #172	; 0xac
   364bc:	482a      	ldr	r0, [pc, #168]	; (36568 <sys_clock_announce+0x170>)
   364be:	f003 f8d7 	bl	39670 <assert_post_action>
	__asm__ volatile(
   364c2:	f387 8811 	msr	BASEPRI, r7
   364c6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   364ca:	b003      	add	sp, #12
   364cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   364d0:	2200      	movs	r2, #0
		curr_tick += dt;
   364d2:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   364d6:	2300      	movs	r3, #0
		curr_tick += dt;
   364d8:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   364dc:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   364e0:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   364e4:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   364e6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   364ea:	4620      	mov	r0, r4
		curr_tick += dt;
   364ec:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   364f0:	f7ff fdae 	bl	36050 <remove_timeout>
   364f4:	481b      	ldr	r0, [pc, #108]	; (36564 <sys_clock_announce+0x16c>)
   364f6:	f7fd fbf9 	bl	33cec <z_spin_unlock_valid>
   364fa:	b968      	cbnz	r0, 36518 <sys_clock_announce+0x120>
   364fc:	23ac      	movs	r3, #172	; 0xac
   364fe:	4a1a      	ldr	r2, [pc, #104]	; (36568 <sys_clock_announce+0x170>)
   36500:	491f      	ldr	r1, [pc, #124]	; (36580 <sys_clock_announce+0x188>)
   36502:	481b      	ldr	r0, [pc, #108]	; (36570 <sys_clock_announce+0x178>)
   36504:	f002 fe15 	bl	39132 <printk>
   36508:	4916      	ldr	r1, [pc, #88]	; (36564 <sys_clock_announce+0x16c>)
   3650a:	481e      	ldr	r0, [pc, #120]	; (36584 <sys_clock_announce+0x18c>)
   3650c:	f002 fe11 	bl	39132 <printk>
   36510:	21ac      	movs	r1, #172	; 0xac
   36512:	4815      	ldr	r0, [pc, #84]	; (36568 <sys_clock_announce+0x170>)
   36514:	f003 f8ac 	bl	39670 <assert_post_action>
   36518:	f387 8811 	msr	BASEPRI, r7
   3651c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   36520:	4620      	mov	r0, r4
   36522:	68a3      	ldr	r3, [r4, #8]
   36524:	4798      	blx	r3
	__asm__ volatile(
   36526:	f04f 0320 	mov.w	r3, #32
   3652a:	f3ef 8711 	mrs	r7, BASEPRI
   3652e:	f383 8811 	msr	BASEPRI, r3
   36532:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36536:	480b      	ldr	r0, [pc, #44]	; (36564 <sys_clock_announce+0x16c>)
   36538:	f7fd fbca 	bl	33cd0 <z_spin_lock_valid>
   3653c:	b968      	cbnz	r0, 3655a <sys_clock_announce+0x162>
   3653e:	2381      	movs	r3, #129	; 0x81
   36540:	4a09      	ldr	r2, [pc, #36]	; (36568 <sys_clock_announce+0x170>)
   36542:	490a      	ldr	r1, [pc, #40]	; (3656c <sys_clock_announce+0x174>)
   36544:	480a      	ldr	r0, [pc, #40]	; (36570 <sys_clock_announce+0x178>)
   36546:	f002 fdf4 	bl	39132 <printk>
   3654a:	4906      	ldr	r1, [pc, #24]	; (36564 <sys_clock_announce+0x16c>)
   3654c:	4809      	ldr	r0, [pc, #36]	; (36574 <sys_clock_announce+0x17c>)
   3654e:	f002 fdf0 	bl	39132 <printk>
   36552:	2181      	movs	r1, #129	; 0x81
   36554:	4804      	ldr	r0, [pc, #16]	; (36568 <sys_clock_announce+0x170>)
   36556:	f003 f88b 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   3655a:	4802      	ldr	r0, [pc, #8]	; (36564 <sys_clock_announce+0x16c>)
   3655c:	f7fd fbd6 	bl	33d0c <z_spin_lock_set_owner>
	return k;
   36560:	e772      	b.n	36448 <sys_clock_announce+0x50>
   36562:	bf00      	nop
   36564:	20018a38 	.word	0x20018a38
   36568:	00040472 	.word	0x00040472
   3656c:	000404c4 	.word	0x000404c4
   36570:	0004033e 	.word	0x0004033e
   36574:	000404d9 	.word	0x000404d9
   36578:	20016e18 	.word	0x20016e18
   3657c:	20018a34 	.word	0x20018a34
   36580:	00040498 	.word	0x00040498
   36584:	000404af 	.word	0x000404af
   36588:	20014868 	.word	0x20014868

0003658c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   3658c:	b570      	push	{r4, r5, r6, lr}
   3658e:	f04f 0320 	mov.w	r3, #32
   36592:	f3ef 8611 	mrs	r6, BASEPRI
   36596:	f383 8811 	msr	BASEPRI, r3
   3659a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3659e:	481b      	ldr	r0, [pc, #108]	; (3660c <sys_clock_tick_get+0x80>)
   365a0:	f7fd fb96 	bl	33cd0 <z_spin_lock_valid>
   365a4:	b968      	cbnz	r0, 365c2 <sys_clock_tick_get+0x36>
   365a6:	2381      	movs	r3, #129	; 0x81
   365a8:	4a19      	ldr	r2, [pc, #100]	; (36610 <sys_clock_tick_get+0x84>)
   365aa:	491a      	ldr	r1, [pc, #104]	; (36614 <sys_clock_tick_get+0x88>)
   365ac:	481a      	ldr	r0, [pc, #104]	; (36618 <sys_clock_tick_get+0x8c>)
   365ae:	f002 fdc0 	bl	39132 <printk>
   365b2:	4916      	ldr	r1, [pc, #88]	; (3660c <sys_clock_tick_get+0x80>)
   365b4:	4819      	ldr	r0, [pc, #100]	; (3661c <sys_clock_tick_get+0x90>)
   365b6:	f002 fdbc 	bl	39132 <printk>
   365ba:	2181      	movs	r1, #129	; 0x81
   365bc:	4814      	ldr	r0, [pc, #80]	; (36610 <sys_clock_tick_get+0x84>)
   365be:	f003 f857 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   365c2:	4812      	ldr	r0, [pc, #72]	; (3660c <sys_clock_tick_get+0x80>)
   365c4:	f7fd fba2 	bl	33d0c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   365c8:	f7ec fd18 	bl	22ffc <sys_clock_elapsed>
   365cc:	4b14      	ldr	r3, [pc, #80]	; (36620 <sys_clock_tick_get+0x94>)
   365ce:	e9d3 4500 	ldrd	r4, r5, [r3]
   365d2:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   365d4:	480d      	ldr	r0, [pc, #52]	; (3660c <sys_clock_tick_get+0x80>)
   365d6:	f145 0500 	adc.w	r5, r5, #0
   365da:	f7fd fb87 	bl	33cec <z_spin_unlock_valid>
   365de:	b968      	cbnz	r0, 365fc <sys_clock_tick_get+0x70>
   365e0:	23ac      	movs	r3, #172	; 0xac
   365e2:	4a0b      	ldr	r2, [pc, #44]	; (36610 <sys_clock_tick_get+0x84>)
   365e4:	490f      	ldr	r1, [pc, #60]	; (36624 <sys_clock_tick_get+0x98>)
   365e6:	480c      	ldr	r0, [pc, #48]	; (36618 <sys_clock_tick_get+0x8c>)
   365e8:	f002 fda3 	bl	39132 <printk>
   365ec:	4907      	ldr	r1, [pc, #28]	; (3660c <sys_clock_tick_get+0x80>)
   365ee:	480e      	ldr	r0, [pc, #56]	; (36628 <sys_clock_tick_get+0x9c>)
   365f0:	f002 fd9f 	bl	39132 <printk>
   365f4:	21ac      	movs	r1, #172	; 0xac
   365f6:	4806      	ldr	r0, [pc, #24]	; (36610 <sys_clock_tick_get+0x84>)
   365f8:	f003 f83a 	bl	39670 <assert_post_action>
	__asm__ volatile(
   365fc:	f386 8811 	msr	BASEPRI, r6
   36600:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   36604:	4620      	mov	r0, r4
   36606:	4629      	mov	r1, r5
   36608:	bd70      	pop	{r4, r5, r6, pc}
   3660a:	bf00      	nop
   3660c:	20018a38 	.word	0x20018a38
   36610:	00040472 	.word	0x00040472
   36614:	000404c4 	.word	0x000404c4
   36618:	0004033e 	.word	0x0004033e
   3661c:	000404d9 	.word	0x000404d9
   36620:	20016e18 	.word	0x20016e18
   36624:	00040498 	.word	0x00040498
   36628:	000404af 	.word	0x000404af

0003662c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   3662c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   36630:	2414      	movs	r4, #20
   36632:	4680      	mov	r8, r0
   36634:	4617      	mov	r7, r2
	while (num_events--) {
   36636:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3663a:	4d51      	ldr	r5, [pc, #324]	; (36780 <clear_event_registrations+0x154>)
   3663c:	f8df 9184 	ldr.w	r9, [pc, #388]	; 367c4 <clear_event_registrations+0x198>
   36640:	4e50      	ldr	r6, [pc, #320]	; (36784 <clear_event_registrations+0x158>)
	while (num_events--) {
   36642:	45a0      	cmp	r8, r4
   36644:	d101      	bne.n	3664a <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   36646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3664a:	2300      	movs	r3, #0
   3664c:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   36650:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   36654:	f003 031f 	and.w	r3, r3, #31
   36658:	2b08      	cmp	r3, #8
   3665a:	d84f      	bhi.n	366fc <clear_event_registrations+0xd0>
   3665c:	e8df f003 	tbb	[pc, r3]
   36660:	4e05305b 	.word	0x4e05305b
   36664:	4e4e4e21 	.word	0x4e4e4e21
   36668:	3f          	.byte	0x3f
   36669:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3666a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3666e:	b963      	cbnz	r3, 3668a <clear_event_registrations+0x5e>
   36670:	4945      	ldr	r1, [pc, #276]	; (36788 <clear_event_registrations+0x15c>)
   36672:	23a9      	movs	r3, #169	; 0xa9
   36674:	462a      	mov	r2, r5
   36676:	4630      	mov	r0, r6
   36678:	f002 fd5b 	bl	39132 <printk>
   3667c:	4843      	ldr	r0, [pc, #268]	; (3678c <clear_event_registrations+0x160>)
   3667e:	f002 fd58 	bl	39132 <printk>
   36682:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   36684:	4628      	mov	r0, r5
   36686:	f002 fff3 	bl	39670 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   3668a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3668e:	2b00      	cmp	r3, #0
   36690:	d041      	beq.n	36716 <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   36692:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   36696:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   36698:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3669a:	2300      	movs	r3, #0
	node->prev = NULL;
   3669c:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   366a0:	e039      	b.n	36716 <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   366a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   366a6:	2b00      	cmp	r3, #0
   366a8:	d1ef      	bne.n	3668a <clear_event_registrations+0x5e>
   366aa:	4939      	ldr	r1, [pc, #228]	; (36790 <clear_event_registrations+0x164>)
   366ac:	23ad      	movs	r3, #173	; 0xad
   366ae:	462a      	mov	r2, r5
   366b0:	4630      	mov	r0, r6
   366b2:	f002 fd3e 	bl	39132 <printk>
   366b6:	4837      	ldr	r0, [pc, #220]	; (36794 <clear_event_registrations+0x168>)
   366b8:	f002 fd3b 	bl	39132 <printk>
   366bc:	21ad      	movs	r1, #173	; 0xad
   366be:	e7e1      	b.n	36684 <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   366c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   366c4:	2b00      	cmp	r3, #0
   366c6:	d1e0      	bne.n	3668a <clear_event_registrations+0x5e>
   366c8:	4933      	ldr	r1, [pc, #204]	; (36798 <clear_event_registrations+0x16c>)
   366ca:	23b1      	movs	r3, #177	; 0xb1
   366cc:	462a      	mov	r2, r5
   366ce:	4630      	mov	r0, r6
   366d0:	f002 fd2f 	bl	39132 <printk>
   366d4:	4831      	ldr	r0, [pc, #196]	; (3679c <clear_event_registrations+0x170>)
   366d6:	f002 fd2c 	bl	39132 <printk>
   366da:	21b1      	movs	r1, #177	; 0xb1
   366dc:	e7d2      	b.n	36684 <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   366de:	f854 3c04 	ldr.w	r3, [r4, #-4]
   366e2:	2b00      	cmp	r3, #0
   366e4:	d1d1      	bne.n	3668a <clear_event_registrations+0x5e>
   366e6:	492e      	ldr	r1, [pc, #184]	; (367a0 <clear_event_registrations+0x174>)
   366e8:	23b5      	movs	r3, #181	; 0xb5
   366ea:	462a      	mov	r2, r5
   366ec:	4630      	mov	r0, r6
   366ee:	f002 fd20 	bl	39132 <printk>
   366f2:	482c      	ldr	r0, [pc, #176]	; (367a4 <clear_event_registrations+0x178>)
   366f4:	f002 fd1d 	bl	39132 <printk>
   366f8:	21b5      	movs	r1, #181	; 0xb5
   366fa:	e7c3      	b.n	36684 <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   366fc:	4649      	mov	r1, r9
   366fe:	23bc      	movs	r3, #188	; 0xbc
   36700:	462a      	mov	r2, r5
   36702:	4630      	mov	r0, r6
   36704:	f002 fd15 	bl	39132 <printk>
   36708:	4827      	ldr	r0, [pc, #156]	; (367a8 <clear_event_registrations+0x17c>)
   3670a:	f002 fd12 	bl	39132 <printk>
   3670e:	21bc      	movs	r1, #188	; 0xbc
   36710:	4628      	mov	r0, r5
   36712:	f002 ffad 	bl	39670 <assert_post_action>
   36716:	4825      	ldr	r0, [pc, #148]	; (367ac <clear_event_registrations+0x180>)
   36718:	f7fd fae8 	bl	33cec <z_spin_unlock_valid>
   3671c:	b968      	cbnz	r0, 3673a <clear_event_registrations+0x10e>
   3671e:	23ac      	movs	r3, #172	; 0xac
   36720:	4630      	mov	r0, r6
   36722:	4a23      	ldr	r2, [pc, #140]	; (367b0 <clear_event_registrations+0x184>)
   36724:	4923      	ldr	r1, [pc, #140]	; (367b4 <clear_event_registrations+0x188>)
   36726:	f002 fd04 	bl	39132 <printk>
   3672a:	4920      	ldr	r1, [pc, #128]	; (367ac <clear_event_registrations+0x180>)
   3672c:	4822      	ldr	r0, [pc, #136]	; (367b8 <clear_event_registrations+0x18c>)
   3672e:	f002 fd00 	bl	39132 <printk>
   36732:	21ac      	movs	r1, #172	; 0xac
   36734:	481e      	ldr	r0, [pc, #120]	; (367b0 <clear_event_registrations+0x184>)
   36736:	f002 ff9b 	bl	39670 <assert_post_action>
   3673a:	f387 8811 	msr	BASEPRI, r7
   3673e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   36742:	f04f 0320 	mov.w	r3, #32
   36746:	f3ef 8711 	mrs	r7, BASEPRI
   3674a:	f383 8811 	msr	BASEPRI, r3
   3674e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36752:	4816      	ldr	r0, [pc, #88]	; (367ac <clear_event_registrations+0x180>)
   36754:	f7fd fabc 	bl	33cd0 <z_spin_lock_valid>
   36758:	b968      	cbnz	r0, 36776 <clear_event_registrations+0x14a>
   3675a:	2381      	movs	r3, #129	; 0x81
   3675c:	4630      	mov	r0, r6
   3675e:	4a14      	ldr	r2, [pc, #80]	; (367b0 <clear_event_registrations+0x184>)
   36760:	4916      	ldr	r1, [pc, #88]	; (367bc <clear_event_registrations+0x190>)
   36762:	f002 fce6 	bl	39132 <printk>
   36766:	4911      	ldr	r1, [pc, #68]	; (367ac <clear_event_registrations+0x180>)
   36768:	4815      	ldr	r0, [pc, #84]	; (367c0 <clear_event_registrations+0x194>)
   3676a:	f002 fce2 	bl	39132 <printk>
   3676e:	2181      	movs	r1, #129	; 0x81
   36770:	480f      	ldr	r0, [pc, #60]	; (367b0 <clear_event_registrations+0x184>)
   36772:	f002 ff7d 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   36776:	480d      	ldr	r0, [pc, #52]	; (367ac <clear_event_registrations+0x180>)
   36778:	f7fd fac8 	bl	33d0c <z_spin_lock_set_owner>
	return k;
   3677c:	3c14      	subs	r4, #20
   3677e:	e760      	b.n	36642 <clear_event_registrations+0x16>
   36780:	00045fb7 	.word	0x00045fb7
   36784:	0004033e 	.word	0x0004033e
   36788:	00045fd8 	.word	0x00045fd8
   3678c:	00045ff2 	.word	0x00045ff2
   36790:	00046007 	.word	0x00046007
   36794:	00046023 	.word	0x00046023
   36798:	00046034 	.word	0x00046034
   3679c:	00046051 	.word	0x00046051
   367a0:	00046068 	.word	0x00046068
   367a4:	00046083 	.word	0x00046083
   367a8:	0004609c 	.word	0x0004609c
   367ac:	20018a3c 	.word	0x20018a3c
   367b0:	00040472 	.word	0x00040472
   367b4:	00040498 	.word	0x00040498
   367b8:	000404af 	.word	0x000404af
   367bc:	000404c4 	.word	0x000404c4
   367c0:	000404d9 	.word	0x000404d9
   367c4:	000451fc 	.word	0x000451fc

000367c8 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   367c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   367cc:	2700      	movs	r7, #0
{
   367ce:	4615      	mov	r5, r2
   367d0:	4604      	mov	r4, r0
	int events_registered = 0;
   367d2:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   367d4:	4e7a      	ldr	r6, [pc, #488]	; (369c0 <register_events+0x1f8>)
   367d6:	f8df 822c 	ldr.w	r8, [pc, #556]	; 36a04 <register_events+0x23c>
   367da:	f8df a22c 	ldr.w	sl, [pc, #556]	; 36a08 <register_events+0x240>
{
   367de:	9100      	str	r1, [sp, #0]
   367e0:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   367e2:	9b00      	ldr	r3, [sp, #0]
   367e4:	429f      	cmp	r7, r3
   367e6:	db03      	blt.n	367f0 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   367e8:	4648      	mov	r0, r9
   367ea:	b003      	add	sp, #12
   367ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   367f0:	f04f 0320 	mov.w	r3, #32
   367f4:	f3ef 8b11 	mrs	fp, BASEPRI
   367f8:	f383 8811 	msr	BASEPRI, r3
   367fc:	f3bf 8f6f 	isb	sy
   36800:	4630      	mov	r0, r6
   36802:	f7fd fa65 	bl	33cd0 <z_spin_lock_valid>
   36806:	b968      	cbnz	r0, 36824 <register_events+0x5c>
   36808:	2381      	movs	r3, #129	; 0x81
   3680a:	4642      	mov	r2, r8
   3680c:	4651      	mov	r1, sl
   3680e:	486d      	ldr	r0, [pc, #436]	; (369c4 <register_events+0x1fc>)
   36810:	f002 fc8f 	bl	39132 <printk>
   36814:	4631      	mov	r1, r6
   36816:	486c      	ldr	r0, [pc, #432]	; (369c8 <register_events+0x200>)
   36818:	f002 fc8b 	bl	39132 <printk>
   3681c:	2181      	movs	r1, #129	; 0x81
   3681e:	4640      	mov	r0, r8
   36820:	f002 ff26 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   36824:	4630      	mov	r0, r6
   36826:	f7fd fa71 	bl	33d0c <z_spin_lock_set_owner>
	switch (event->type) {
   3682a:	7b63      	ldrb	r3, [r4, #13]
   3682c:	f003 031f 	and.w	r3, r3, #31
   36830:	2b08      	cmp	r3, #8
   36832:	d84f      	bhi.n	368d4 <register_events+0x10c>
   36834:	e8df f003 	tbb	[pc, r3]
   36838:	4e054230 	.word	0x4e054230
   3683c:	4e4e4e2c 	.word	0x4e4e4e2c
   36840:	48          	.byte	0x48
   36841:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   36842:	6923      	ldr	r3, [r4, #16]
   36844:	689b      	ldr	r3, [r3, #8]
   36846:	b33b      	cbz	r3, 36898 <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   36848:	2302      	movs	r3, #2
	event->poller = NULL;
   3684a:	2100      	movs	r1, #0
	event->state |= state;
   3684c:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   3684e:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   36850:	f3c2 3045 	ubfx	r0, r2, #13, #6
   36854:	4303      	orrs	r3, r0
   36856:	f363 3252 	bfi	r2, r3, #13, #6
   3685a:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   3685c:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3685e:	4630      	mov	r0, r6
   36860:	f7fd fa44 	bl	33cec <z_spin_unlock_valid>
   36864:	b968      	cbnz	r0, 36882 <register_events+0xba>
   36866:	23ac      	movs	r3, #172	; 0xac
   36868:	4642      	mov	r2, r8
   3686a:	4958      	ldr	r1, [pc, #352]	; (369cc <register_events+0x204>)
   3686c:	4855      	ldr	r0, [pc, #340]	; (369c4 <register_events+0x1fc>)
   3686e:	f002 fc60 	bl	39132 <printk>
   36872:	4631      	mov	r1, r6
   36874:	4856      	ldr	r0, [pc, #344]	; (369d0 <register_events+0x208>)
   36876:	f002 fc5c 	bl	39132 <printk>
   3687a:	21ac      	movs	r1, #172	; 0xac
   3687c:	4640      	mov	r0, r8
   3687e:	f002 fef7 	bl	39670 <assert_post_action>
	__asm__ volatile(
   36882:	f38b 8811 	msr	BASEPRI, fp
   36886:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3688a:	3701      	adds	r7, #1
   3688c:	3414      	adds	r4, #20
   3688e:	e7a8      	b.n	367e2 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   36890:	6923      	ldr	r3, [r4, #16]
   36892:	681b      	ldr	r3, [r3, #0]
   36894:	2b00      	cmp	r3, #0
   36896:	d12e      	bne.n	368f6 <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   36898:	9b01      	ldr	r3, [sp, #4]
   3689a:	2b00      	cmp	r3, #0
   3689c:	d1df      	bne.n	3685e <register_events+0x96>
   3689e:	782b      	ldrb	r3, [r5, #0]
   368a0:	2b00      	cmp	r3, #0
   368a2:	d0dc      	beq.n	3685e <register_events+0x96>
	switch (event->type) {
   368a4:	7b63      	ldrb	r3, [r4, #13]
   368a6:	f003 031f 	and.w	r3, r3, #31
   368aa:	2b08      	cmp	r3, #8
   368ac:	d879      	bhi.n	369a2 <register_events+0x1da>
   368ae:	e8df f003 	tbb	[pc, r3]
   368b2:	5139      	.short	0x5139
   368b4:	783d7824 	.word	0x783d7824
   368b8:	7878      	.short	0x7878
   368ba:	64          	.byte	0x64
   368bb:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   368bc:	6923      	ldr	r3, [r4, #16]
   368be:	689b      	ldr	r3, [r3, #8]
   368c0:	2b00      	cmp	r3, #0
   368c2:	d0e9      	beq.n	36898 <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   368c4:	2301      	movs	r3, #1
   368c6:	e7c0      	b.n	3684a <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   368c8:	6923      	ldr	r3, [r4, #16]
   368ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   368cc:	2b00      	cmp	r3, #0
   368ce:	d0e3      	beq.n	36898 <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   368d0:	2310      	movs	r3, #16
   368d2:	e7ba      	b.n	3684a <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   368d4:	235c      	movs	r3, #92	; 0x5c
   368d6:	4a3f      	ldr	r2, [pc, #252]	; (369d4 <register_events+0x20c>)
   368d8:	493f      	ldr	r1, [pc, #252]	; (369d8 <register_events+0x210>)
   368da:	483a      	ldr	r0, [pc, #232]	; (369c4 <register_events+0x1fc>)
   368dc:	f002 fc29 	bl	39132 <printk>
   368e0:	7b61      	ldrb	r1, [r4, #13]
   368e2:	483e      	ldr	r0, [pc, #248]	; (369dc <register_events+0x214>)
   368e4:	f001 011f 	and.w	r1, r1, #31
   368e8:	f002 fc23 	bl	39132 <printk>
   368ec:	215c      	movs	r1, #92	; 0x5c
   368ee:	4839      	ldr	r0, [pc, #228]	; (369d4 <register_events+0x20c>)
   368f0:	f002 febe 	bl	39670 <assert_post_action>
		break;
   368f4:	e7d0      	b.n	36898 <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   368f6:	2304      	movs	r3, #4
   368f8:	e7a7      	b.n	3684a <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   368fa:	6923      	ldr	r3, [r4, #16]
   368fc:	b963      	cbnz	r3, 36918 <register_events+0x150>
   368fe:	4938      	ldr	r1, [pc, #224]	; (369e0 <register_events+0x218>)
   36900:	2386      	movs	r3, #134	; 0x86
   36902:	4a34      	ldr	r2, [pc, #208]	; (369d4 <register_events+0x20c>)
   36904:	482f      	ldr	r0, [pc, #188]	; (369c4 <register_events+0x1fc>)
   36906:	f002 fc14 	bl	39132 <printk>
   3690a:	4836      	ldr	r0, [pc, #216]	; (369e4 <register_events+0x21c>)
   3690c:	f002 fc11 	bl	39132 <printk>
   36910:	2186      	movs	r1, #134	; 0x86
   36912:	4830      	ldr	r0, [pc, #192]	; (369d4 <register_events+0x20c>)
   36914:	f002 feac 	bl	39670 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   36918:	462a      	mov	r2, r5
   3691a:	4621      	mov	r1, r4
   3691c:	6920      	ldr	r0, [r4, #16]
   3691e:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   36920:	f007 fa9d 	bl	3de5e <add_event>
	event->poller = poller;
   36924:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   36926:	f109 0901 	add.w	r9, r9, #1
   3692a:	e798      	b.n	3685e <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3692c:	6923      	ldr	r3, [r4, #16]
   3692e:	b963      	cbnz	r3, 3694a <register_events+0x182>
   36930:	492d      	ldr	r1, [pc, #180]	; (369e8 <register_events+0x220>)
   36932:	238a      	movs	r3, #138	; 0x8a
   36934:	4a27      	ldr	r2, [pc, #156]	; (369d4 <register_events+0x20c>)
   36936:	4823      	ldr	r0, [pc, #140]	; (369c4 <register_events+0x1fc>)
   36938:	f002 fbfb 	bl	39132 <printk>
   3693c:	482b      	ldr	r0, [pc, #172]	; (369ec <register_events+0x224>)
   3693e:	f002 fbf8 	bl	39132 <printk>
   36942:	218a      	movs	r1, #138	; 0x8a
   36944:	4823      	ldr	r0, [pc, #140]	; (369d4 <register_events+0x20c>)
   36946:	f002 fe93 	bl	39670 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3694a:	6920      	ldr	r0, [r4, #16]
   3694c:	462a      	mov	r2, r5
   3694e:	4621      	mov	r1, r4
   36950:	3014      	adds	r0, #20
   36952:	e7e5      	b.n	36920 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   36954:	6923      	ldr	r3, [r4, #16]
   36956:	b963      	cbnz	r3, 36972 <register_events+0x1aa>
   36958:	4925      	ldr	r1, [pc, #148]	; (369f0 <register_events+0x228>)
   3695a:	238e      	movs	r3, #142	; 0x8e
   3695c:	4a1d      	ldr	r2, [pc, #116]	; (369d4 <register_events+0x20c>)
   3695e:	4819      	ldr	r0, [pc, #100]	; (369c4 <register_events+0x1fc>)
   36960:	f002 fbe7 	bl	39132 <printk>
   36964:	4823      	ldr	r0, [pc, #140]	; (369f4 <register_events+0x22c>)
   36966:	f002 fbe4 	bl	39132 <printk>
   3696a:	218e      	movs	r1, #142	; 0x8e
   3696c:	4819      	ldr	r0, [pc, #100]	; (369d4 <register_events+0x20c>)
   3696e:	f002 fe7f 	bl	39670 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   36972:	462a      	mov	r2, r5
   36974:	4621      	mov	r1, r4
   36976:	6920      	ldr	r0, [r4, #16]
   36978:	e7d2      	b.n	36920 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   3697a:	6923      	ldr	r3, [r4, #16]
   3697c:	b963      	cbnz	r3, 36998 <register_events+0x1d0>
   3697e:	491e      	ldr	r1, [pc, #120]	; (369f8 <register_events+0x230>)
   36980:	2392      	movs	r3, #146	; 0x92
   36982:	4a14      	ldr	r2, [pc, #80]	; (369d4 <register_events+0x20c>)
   36984:	480f      	ldr	r0, [pc, #60]	; (369c4 <register_events+0x1fc>)
   36986:	f002 fbd4 	bl	39132 <printk>
   3698a:	481c      	ldr	r0, [pc, #112]	; (369fc <register_events+0x234>)
   3698c:	f002 fbd1 	bl	39132 <printk>
   36990:	2192      	movs	r1, #146	; 0x92
   36992:	4810      	ldr	r0, [pc, #64]	; (369d4 <register_events+0x20c>)
   36994:	f002 fe6c 	bl	39670 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   36998:	6920      	ldr	r0, [r4, #16]
   3699a:	462a      	mov	r2, r5
   3699c:	4621      	mov	r1, r4
   3699e:	3028      	adds	r0, #40	; 0x28
   369a0:	e7be      	b.n	36920 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   369a2:	2399      	movs	r3, #153	; 0x99
   369a4:	4a0b      	ldr	r2, [pc, #44]	; (369d4 <register_events+0x20c>)
   369a6:	490c      	ldr	r1, [pc, #48]	; (369d8 <register_events+0x210>)
   369a8:	4806      	ldr	r0, [pc, #24]	; (369c4 <register_events+0x1fc>)
   369aa:	f002 fbc2 	bl	39132 <printk>
   369ae:	4814      	ldr	r0, [pc, #80]	; (36a00 <register_events+0x238>)
   369b0:	f002 fbbf 	bl	39132 <printk>
   369b4:	2199      	movs	r1, #153	; 0x99
   369b6:	4807      	ldr	r0, [pc, #28]	; (369d4 <register_events+0x20c>)
   369b8:	f002 fe5a 	bl	39670 <assert_post_action>
		break;
   369bc:	e7b2      	b.n	36924 <register_events+0x15c>
   369be:	bf00      	nop
   369c0:	20018a3c 	.word	0x20018a3c
   369c4:	0004033e 	.word	0x0004033e
   369c8:	000404d9 	.word	0x000404d9
   369cc:	00040498 	.word	0x00040498
   369d0:	000404af 	.word	0x000404af
   369d4:	00045fb7 	.word	0x00045fb7
   369d8:	000451fc 	.word	0x000451fc
   369dc:	000460b2 	.word	0x000460b2
   369e0:	00045fd8 	.word	0x00045fd8
   369e4:	00045ff2 	.word	0x00045ff2
   369e8:	00046007 	.word	0x00046007
   369ec:	00046023 	.word	0x00046023
   369f0:	00046034 	.word	0x00046034
   369f4:	00046051 	.word	0x00046051
   369f8:	00046068 	.word	0x00046068
   369fc:	00046083 	.word	0x00046083
   36a00:	0004609c 	.word	0x0004609c
   36a04:	00040472 	.word	0x00040472
   36a08:	000404c4 	.word	0x000404c4

00036a0c <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   36a0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   36a10:	6884      	ldr	r4, [r0, #8]
{
   36a12:	4605      	mov	r5, r0
   36a14:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   36a16:	b1d4      	cbz	r4, 36a4e <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   36a18:	7863      	ldrb	r3, [r4, #1]
   36a1a:	2b01      	cmp	r3, #1
   36a1c:	d14c      	bne.n	36ab8 <signal_poll_event+0xac>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   36a1e:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   36a22:	d10e      	bne.n	36a42 <signal_poll_event+0x36>
   36a24:	23f5      	movs	r3, #245	; 0xf5
   36a26:	4a31      	ldr	r2, [pc, #196]	; (36aec <signal_poll_event+0xe0>)
   36a28:	4931      	ldr	r1, [pc, #196]	; (36af0 <signal_poll_event+0xe4>)
   36a2a:	4832      	ldr	r0, [pc, #200]	; (36af4 <signal_poll_event+0xe8>)
   36a2c:	f002 fb81 	bl	39132 <printk>
   36a30:	4831      	ldr	r0, [pc, #196]	; (36af8 <signal_poll_event+0xec>)
   36a32:	f002 fb7e 	bl	39132 <printk>
   36a36:	21f5      	movs	r1, #245	; 0xf5
   36a38:	482c      	ldr	r0, [pc, #176]	; (36aec <signal_poll_event+0xe0>)
   36a3a:	f002 fe19 	bl	39670 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   36a3e:	7b7b      	ldrb	r3, [r7, #13]
   36a40:	deff      	udf	#255	; 0xff
   36a42:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   36a46:	f013 0302 	ands.w	r3, r3, #2
   36a4a:	d10a      	bne.n	36a62 <signal_poll_event+0x56>
			retcode = signal_triggered_work(event, state);
		} else {
			;
		}

		poller->is_polling = false;
   36a4c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   36a4e:	2000      	movs	r0, #0
	event->state |= state;
   36a50:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   36a52:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   36a54:	f3c3 3145 	ubfx	r1, r3, #13, #6
   36a58:	430e      	orrs	r6, r1
   36a5a:	f366 3352 	bfi	r3, r6, #13, #6
   36a5e:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   36a60:	e00d      	b.n	36a7e <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   36a62:	f04f 31ff 	mov.w	r1, #4294967295
   36a66:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   36a6a:	f06f 0001 	mvn.w	r0, #1
   36a6e:	428b      	cmp	r3, r1
   36a70:	bf08      	it	eq
   36a72:	4282      	cmpeq	r2, r0
   36a74:	d106      	bne.n	36a84 <signal_poll_event+0x78>
		poller->is_polling = false;
   36a76:	2300      	movs	r3, #0
		return -EAGAIN;
   36a78:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   36a7c:	7023      	strb	r3, [r4, #0]
}
   36a7e:	b002      	add	sp, #8
   36a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_unpend_thread(thread);
   36a84:	4638      	mov	r0, r7
   36a86:	f7fe fa15 	bl	34eb4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   36a8a:	2e08      	cmp	r6, #8
   36a8c:	bf0c      	ite	eq
   36a8e:	f06f 0303 	mvneq.w	r3, #3
   36a92:	2300      	movne	r3, #0
   36a94:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   36a96:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   36a9a:	06db      	lsls	r3, r3, #27
   36a9c:	d104      	bne.n	36aa8 <signal_poll_event+0x9c>
	if (!z_is_thread_ready(thread)) {
   36a9e:	f854 8c48 	ldr.w	r8, [r4, #-72]
   36aa2:	f1b8 0f00 	cmp.w	r8, #0
   36aa6:	d001      	beq.n	36aac <signal_poll_event+0xa0>
		poller->is_polling = false;
   36aa8:	2300      	movs	r3, #0
   36aaa:	e7cf      	b.n	36a4c <signal_poll_event+0x40>
	z_ready_thread(thread);
   36aac:	4638      	mov	r0, r7
   36aae:	f7fe fd7d 	bl	355ac <z_ready_thread>
		poller->is_polling = false;
   36ab2:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   36ab6:	e7ca      	b.n	36a4e <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   36ab8:	2b02      	cmp	r3, #2
   36aba:	d1f5      	bne.n	36aa8 <signal_poll_event+0x9c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   36abc:	7823      	ldrb	r3, [r4, #0]
   36abe:	2b00      	cmp	r3, #0
   36ac0:	d0c5      	beq.n	36a4e <signal_poll_event+0x42>
   36ac2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   36ac6:	b17f      	cbz	r7, 36ae8 <signal_poll_event+0xdc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   36ac8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   36acc:	f1a4 0114 	sub.w	r1, r4, #20
   36ad0:	f104 0014 	add.w	r0, r4, #20
   36ad4:	9101      	str	r1, [sp, #4]
   36ad6:	f7ff fba9 	bl	3622c <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   36ada:	4638      	mov	r0, r7
   36adc:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   36ade:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   36ae2:	f7fd fee5 	bl	348b0 <k_work_submit_to_queue>
   36ae6:	e7e4      	b.n	36ab2 <signal_poll_event+0xa6>
		poller->is_polling = false;
   36ae8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   36aea:	e7b0      	b.n	36a4e <signal_poll_event+0x42>
   36aec:	00045fb7 	.word	0x00045fb7
   36af0:	000460cf 	.word	0x000460cf
   36af4:	0004033e 	.word	0x0004033e
   36af8:	000460e5 	.word	0x000460e5

00036afc <z_impl_k_poll>:
{
   36afc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   36b00:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   36b02:	4b75      	ldr	r3, [pc, #468]	; (36cd8 <z_impl_k_poll+0x1dc>)
{
   36b04:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   36b06:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   36b08:	2301      	movs	r3, #1
{
   36b0a:	4688      	mov	r8, r1
   36b0c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   36b0e:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   36b12:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   36b16:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   36b1a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   36b1e:	b173      	cbz	r3, 36b3e <z_impl_k_poll+0x42>
   36b20:	496e      	ldr	r1, [pc, #440]	; (36cdc <z_impl_k_poll+0x1e0>)
   36b22:	f44f 738b 	mov.w	r3, #278	; 0x116
   36b26:	4a6e      	ldr	r2, [pc, #440]	; (36ce0 <z_impl_k_poll+0x1e4>)
   36b28:	486e      	ldr	r0, [pc, #440]	; (36ce4 <z_impl_k_poll+0x1e8>)
   36b2a:	f002 fb02 	bl	39132 <printk>
   36b2e:	486e      	ldr	r0, [pc, #440]	; (36ce8 <z_impl_k_poll+0x1ec>)
   36b30:	f002 faff 	bl	39132 <printk>
   36b34:	f44f 718b 	mov.w	r1, #278	; 0x116
   36b38:	4869      	ldr	r0, [pc, #420]	; (36ce0 <z_impl_k_poll+0x1e4>)
   36b3a:	f002 fd99 	bl	39670 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   36b3e:	b974      	cbnz	r4, 36b5e <z_impl_k_poll+0x62>
   36b40:	496a      	ldr	r1, [pc, #424]	; (36cec <z_impl_k_poll+0x1f0>)
   36b42:	f240 1317 	movw	r3, #279	; 0x117
   36b46:	4a66      	ldr	r2, [pc, #408]	; (36ce0 <z_impl_k_poll+0x1e4>)
   36b48:	4866      	ldr	r0, [pc, #408]	; (36ce4 <z_impl_k_poll+0x1e8>)
   36b4a:	f002 faf2 	bl	39132 <printk>
   36b4e:	4868      	ldr	r0, [pc, #416]	; (36cf0 <z_impl_k_poll+0x1f4>)
   36b50:	f002 faef 	bl	39132 <printk>
   36b54:	f240 1117 	movw	r1, #279	; 0x117
   36b58:	4861      	ldr	r0, [pc, #388]	; (36ce0 <z_impl_k_poll+0x1e4>)
   36b5a:	f002 fd89 	bl	39670 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   36b5e:	f1b8 0f00 	cmp.w	r8, #0
   36b62:	da0e      	bge.n	36b82 <z_impl_k_poll+0x86>
   36b64:	4963      	ldr	r1, [pc, #396]	; (36cf4 <z_impl_k_poll+0x1f8>)
   36b66:	f44f 738c 	mov.w	r3, #280	; 0x118
   36b6a:	4a5d      	ldr	r2, [pc, #372]	; (36ce0 <z_impl_k_poll+0x1e4>)
   36b6c:	485d      	ldr	r0, [pc, #372]	; (36ce4 <z_impl_k_poll+0x1e8>)
   36b6e:	f002 fae0 	bl	39132 <printk>
   36b72:	4861      	ldr	r0, [pc, #388]	; (36cf8 <z_impl_k_poll+0x1fc>)
   36b74:	f002 fadd 	bl	39132 <printk>
   36b78:	f44f 718c 	mov.w	r1, #280	; 0x118
   36b7c:	4858      	ldr	r0, [pc, #352]	; (36ce0 <z_impl_k_poll+0x1e4>)
   36b7e:	f002 fd77 	bl	39670 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   36b82:	ea56 0307 	orrs.w	r3, r6, r7
   36b86:	bf0c      	ite	eq
   36b88:	2301      	moveq	r3, #1
   36b8a:	2300      	movne	r3, #0
   36b8c:	4641      	mov	r1, r8
   36b8e:	464a      	mov	r2, r9
   36b90:	4620      	mov	r0, r4
   36b92:	f7ff fe19 	bl	367c8 <register_events>
   36b96:	4680      	mov	r8, r0
	__asm__ volatile(
   36b98:	f04f 0320 	mov.w	r3, #32
   36b9c:	f3ef 8911 	mrs	r9, BASEPRI
   36ba0:	f383 8811 	msr	BASEPRI, r3
   36ba4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36ba8:	4854      	ldr	r0, [pc, #336]	; (36cfc <z_impl_k_poll+0x200>)
   36baa:	f7fd f891 	bl	33cd0 <z_spin_lock_valid>
   36bae:	b968      	cbnz	r0, 36bcc <z_impl_k_poll+0xd0>
   36bb0:	2381      	movs	r3, #129	; 0x81
   36bb2:	4a53      	ldr	r2, [pc, #332]	; (36d00 <z_impl_k_poll+0x204>)
   36bb4:	4953      	ldr	r1, [pc, #332]	; (36d04 <z_impl_k_poll+0x208>)
   36bb6:	484b      	ldr	r0, [pc, #300]	; (36ce4 <z_impl_k_poll+0x1e8>)
   36bb8:	f002 fabb 	bl	39132 <printk>
   36bbc:	494f      	ldr	r1, [pc, #316]	; (36cfc <z_impl_k_poll+0x200>)
   36bbe:	4852      	ldr	r0, [pc, #328]	; (36d08 <z_impl_k_poll+0x20c>)
   36bc0:	f002 fab7 	bl	39132 <printk>
   36bc4:	2181      	movs	r1, #129	; 0x81
   36bc6:	484e      	ldr	r0, [pc, #312]	; (36d00 <z_impl_k_poll+0x204>)
   36bc8:	f002 fd52 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   36bcc:	484b      	ldr	r0, [pc, #300]	; (36cfc <z_impl_k_poll+0x200>)
   36bce:	f7fd f89d 	bl	33d0c <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   36bd2:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   36bd6:	b9fb      	cbnz	r3, 36c18 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   36bd8:	4620      	mov	r0, r4
   36bda:	464a      	mov	r2, r9
   36bdc:	4641      	mov	r1, r8
   36bde:	f7ff fd25 	bl	3662c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36be2:	4846      	ldr	r0, [pc, #280]	; (36cfc <z_impl_k_poll+0x200>)
   36be4:	f7fd f882 	bl	33cec <z_spin_unlock_valid>
   36be8:	b968      	cbnz	r0, 36c06 <z_impl_k_poll+0x10a>
   36bea:	23ac      	movs	r3, #172	; 0xac
   36bec:	4a44      	ldr	r2, [pc, #272]	; (36d00 <z_impl_k_poll+0x204>)
   36bee:	4947      	ldr	r1, [pc, #284]	; (36d0c <z_impl_k_poll+0x210>)
   36bf0:	483c      	ldr	r0, [pc, #240]	; (36ce4 <z_impl_k_poll+0x1e8>)
   36bf2:	f002 fa9e 	bl	39132 <printk>
   36bf6:	4941      	ldr	r1, [pc, #260]	; (36cfc <z_impl_k_poll+0x200>)
   36bf8:	4845      	ldr	r0, [pc, #276]	; (36d10 <z_impl_k_poll+0x214>)
   36bfa:	f002 fa9a 	bl	39132 <printk>
   36bfe:	21ac      	movs	r1, #172	; 0xac
   36c00:	483f      	ldr	r0, [pc, #252]	; (36d00 <z_impl_k_poll+0x204>)
   36c02:	f002 fd35 	bl	39670 <assert_post_action>
	__asm__ volatile(
   36c06:	f389 8811 	msr	BASEPRI, r9
   36c0a:	f3bf 8f6f 	isb	sy
		return 0;
   36c0e:	2500      	movs	r5, #0
}
   36c10:	4628      	mov	r0, r5
   36c12:	b003      	add	sp, #12
   36c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   36c18:	2300      	movs	r3, #0
   36c1a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36c1e:	ea56 0307 	orrs.w	r3, r6, r7
   36c22:	d118      	bne.n	36c56 <z_impl_k_poll+0x15a>
   36c24:	4835      	ldr	r0, [pc, #212]	; (36cfc <z_impl_k_poll+0x200>)
   36c26:	f7fd f861 	bl	33cec <z_spin_unlock_valid>
   36c2a:	b968      	cbnz	r0, 36c48 <z_impl_k_poll+0x14c>
   36c2c:	23ac      	movs	r3, #172	; 0xac
   36c2e:	4a34      	ldr	r2, [pc, #208]	; (36d00 <z_impl_k_poll+0x204>)
   36c30:	4936      	ldr	r1, [pc, #216]	; (36d0c <z_impl_k_poll+0x210>)
   36c32:	482c      	ldr	r0, [pc, #176]	; (36ce4 <z_impl_k_poll+0x1e8>)
   36c34:	f002 fa7d 	bl	39132 <printk>
   36c38:	4930      	ldr	r1, [pc, #192]	; (36cfc <z_impl_k_poll+0x200>)
   36c3a:	4835      	ldr	r0, [pc, #212]	; (36d10 <z_impl_k_poll+0x214>)
   36c3c:	f002 fa79 	bl	39132 <printk>
   36c40:	21ac      	movs	r1, #172	; 0xac
   36c42:	482f      	ldr	r0, [pc, #188]	; (36d00 <z_impl_k_poll+0x204>)
   36c44:	f002 fd14 	bl	39670 <assert_post_action>
   36c48:	f389 8811 	msr	BASEPRI, r9
   36c4c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   36c50:	f06f 050a 	mvn.w	r5, #10
   36c54:	e7dc      	b.n	36c10 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   36c56:	4649      	mov	r1, r9
   36c58:	e9cd 6700 	strd	r6, r7, [sp]
   36c5c:	4a2d      	ldr	r2, [pc, #180]	; (36d14 <z_impl_k_poll+0x218>)
   36c5e:	4827      	ldr	r0, [pc, #156]	; (36cfc <z_impl_k_poll+0x200>)
   36c60:	f7fe fa6a 	bl	35138 <z_pend_curr>
   36c64:	4605      	mov	r5, r0
	__asm__ volatile(
   36c66:	f04f 0320 	mov.w	r3, #32
   36c6a:	f3ef 8611 	mrs	r6, BASEPRI
   36c6e:	f383 8811 	msr	BASEPRI, r3
   36c72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36c76:	4821      	ldr	r0, [pc, #132]	; (36cfc <z_impl_k_poll+0x200>)
   36c78:	f7fd f82a 	bl	33cd0 <z_spin_lock_valid>
   36c7c:	b968      	cbnz	r0, 36c9a <z_impl_k_poll+0x19e>
   36c7e:	2381      	movs	r3, #129	; 0x81
   36c80:	4a1f      	ldr	r2, [pc, #124]	; (36d00 <z_impl_k_poll+0x204>)
   36c82:	4920      	ldr	r1, [pc, #128]	; (36d04 <z_impl_k_poll+0x208>)
   36c84:	4817      	ldr	r0, [pc, #92]	; (36ce4 <z_impl_k_poll+0x1e8>)
   36c86:	f002 fa54 	bl	39132 <printk>
   36c8a:	491c      	ldr	r1, [pc, #112]	; (36cfc <z_impl_k_poll+0x200>)
   36c8c:	481e      	ldr	r0, [pc, #120]	; (36d08 <z_impl_k_poll+0x20c>)
   36c8e:	f002 fa50 	bl	39132 <printk>
   36c92:	2181      	movs	r1, #129	; 0x81
   36c94:	481a      	ldr	r0, [pc, #104]	; (36d00 <z_impl_k_poll+0x204>)
   36c96:	f002 fceb 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   36c9a:	4818      	ldr	r0, [pc, #96]	; (36cfc <z_impl_k_poll+0x200>)
   36c9c:	f7fd f836 	bl	33d0c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   36ca0:	4620      	mov	r0, r4
   36ca2:	4632      	mov	r2, r6
   36ca4:	4641      	mov	r1, r8
   36ca6:	f7ff fcc1 	bl	3662c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36caa:	4814      	ldr	r0, [pc, #80]	; (36cfc <z_impl_k_poll+0x200>)
   36cac:	f7fd f81e 	bl	33cec <z_spin_unlock_valid>
   36cb0:	b968      	cbnz	r0, 36cce <z_impl_k_poll+0x1d2>
   36cb2:	23ac      	movs	r3, #172	; 0xac
   36cb4:	4a12      	ldr	r2, [pc, #72]	; (36d00 <z_impl_k_poll+0x204>)
   36cb6:	4915      	ldr	r1, [pc, #84]	; (36d0c <z_impl_k_poll+0x210>)
   36cb8:	480a      	ldr	r0, [pc, #40]	; (36ce4 <z_impl_k_poll+0x1e8>)
   36cba:	f002 fa3a 	bl	39132 <printk>
   36cbe:	490f      	ldr	r1, [pc, #60]	; (36cfc <z_impl_k_poll+0x200>)
   36cc0:	4813      	ldr	r0, [pc, #76]	; (36d10 <z_impl_k_poll+0x214>)
   36cc2:	f002 fa36 	bl	39132 <printk>
   36cc6:	21ac      	movs	r1, #172	; 0xac
   36cc8:	480d      	ldr	r0, [pc, #52]	; (36d00 <z_impl_k_poll+0x204>)
   36cca:	f002 fcd1 	bl	39670 <assert_post_action>
	__asm__ volatile(
   36cce:	f386 8811 	msr	BASEPRI, r6
   36cd2:	f3bf 8f6f 	isb	sy
	return swap_rc;
   36cd6:	e79b      	b.n	36c10 <z_impl_k_poll+0x114>
   36cd8:	200189dc 	.word	0x200189dc
   36cdc:	00045c0a 	.word	0x00045c0a
   36ce0:	00045fb7 	.word	0x00045fb7
   36ce4:	0004033e 	.word	0x0004033e
   36ce8:	000408e8 	.word	0x000408e8
   36cec:	00046104 	.word	0x00046104
   36cf0:	0004611a 	.word	0x0004611a
   36cf4:	00046129 	.word	0x00046129
   36cf8:	00046139 	.word	0x00046139
   36cfc:	20018a3c 	.word	0x20018a3c
   36d00:	00040472 	.word	0x00040472
   36d04:	000404c4 	.word	0x000404c4
   36d08:	000404d9 	.word	0x000404d9
   36d0c:	00040498 	.word	0x00040498
   36d10:	000404af 	.word	0x000404af
   36d14:	20014870 	.word	0x20014870

00036d18 <z_impl_k_poll_signal_raise>:
{
   36d18:	b570      	push	{r4, r5, r6, lr}
   36d1a:	4604      	mov	r4, r0
   36d1c:	460d      	mov	r5, r1
	__asm__ volatile(
   36d1e:	f04f 0320 	mov.w	r3, #32
   36d22:	f3ef 8611 	mrs	r6, BASEPRI
   36d26:	f383 8811 	msr	BASEPRI, r3
   36d2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36d2e:	4821      	ldr	r0, [pc, #132]	; (36db4 <z_impl_k_poll_signal_raise+0x9c>)
   36d30:	f7fc ffce 	bl	33cd0 <z_spin_lock_valid>
   36d34:	b968      	cbnz	r0, 36d52 <z_impl_k_poll_signal_raise+0x3a>
   36d36:	2381      	movs	r3, #129	; 0x81
   36d38:	4a1f      	ldr	r2, [pc, #124]	; (36db8 <z_impl_k_poll_signal_raise+0xa0>)
   36d3a:	4920      	ldr	r1, [pc, #128]	; (36dbc <z_impl_k_poll_signal_raise+0xa4>)
   36d3c:	4820      	ldr	r0, [pc, #128]	; (36dc0 <z_impl_k_poll_signal_raise+0xa8>)
   36d3e:	f002 f9f8 	bl	39132 <printk>
   36d42:	491c      	ldr	r1, [pc, #112]	; (36db4 <z_impl_k_poll_signal_raise+0x9c>)
   36d44:	481f      	ldr	r0, [pc, #124]	; (36dc4 <z_impl_k_poll_signal_raise+0xac>)
   36d46:	f002 f9f4 	bl	39132 <printk>
   36d4a:	2181      	movs	r1, #129	; 0x81
   36d4c:	481a      	ldr	r0, [pc, #104]	; (36db8 <z_impl_k_poll_signal_raise+0xa0>)
   36d4e:	f002 fc8f 	bl	39670 <assert_post_action>
	z_spin_lock_set_owner(l);
   36d52:	4818      	ldr	r0, [pc, #96]	; (36db4 <z_impl_k_poll_signal_raise+0x9c>)
   36d54:	f7fc ffda 	bl	33d0c <z_spin_lock_set_owner>
	sig->signaled = 1U;
   36d58:	2101      	movs	r1, #1
	return list->head == list;
   36d5a:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   36d5c:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   36d5e:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   36d60:	60a1      	str	r1, [r4, #8]
   36d62:	d117      	bne.n	36d94 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36d64:	4813      	ldr	r0, [pc, #76]	; (36db4 <z_impl_k_poll_signal_raise+0x9c>)
   36d66:	f7fc ffc1 	bl	33cec <z_spin_unlock_valid>
   36d6a:	b968      	cbnz	r0, 36d88 <z_impl_k_poll_signal_raise+0x70>
   36d6c:	23ac      	movs	r3, #172	; 0xac
   36d6e:	4a12      	ldr	r2, [pc, #72]	; (36db8 <z_impl_k_poll_signal_raise+0xa0>)
   36d70:	4915      	ldr	r1, [pc, #84]	; (36dc8 <z_impl_k_poll_signal_raise+0xb0>)
   36d72:	4813      	ldr	r0, [pc, #76]	; (36dc0 <z_impl_k_poll_signal_raise+0xa8>)
   36d74:	f002 f9dd 	bl	39132 <printk>
   36d78:	490e      	ldr	r1, [pc, #56]	; (36db4 <z_impl_k_poll_signal_raise+0x9c>)
   36d7a:	4814      	ldr	r0, [pc, #80]	; (36dcc <z_impl_k_poll_signal_raise+0xb4>)
   36d7c:	f002 f9d9 	bl	39132 <printk>
   36d80:	21ac      	movs	r1, #172	; 0xac
   36d82:	480d      	ldr	r0, [pc, #52]	; (36db8 <z_impl_k_poll_signal_raise+0xa0>)
   36d84:	f002 fc74 	bl	39670 <assert_post_action>
	__asm__ volatile(
   36d88:	f386 8811 	msr	BASEPRI, r6
   36d8c:	f3bf 8f6f 	isb	sy
		return 0;
   36d90:	2400      	movs	r4, #0
   36d92:	e00d      	b.n	36db0 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   36d94:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   36d98:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   36d9a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   36d9c:	2300      	movs	r3, #0
	node->prev = NULL;
   36d9e:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   36da2:	f7ff fe33 	bl	36a0c <signal_poll_event>
	z_reschedule(&lock, key);
   36da6:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   36da8:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   36daa:	4802      	ldr	r0, [pc, #8]	; (36db4 <z_impl_k_poll_signal_raise+0x9c>)
   36dac:	f7fd ff86 	bl	34cbc <z_reschedule>
}
   36db0:	4620      	mov	r0, r4
   36db2:	bd70      	pop	{r4, r5, r6, pc}
   36db4:	20018a3c 	.word	0x20018a3c
   36db8:	00040472 	.word	0x00040472
   36dbc:	000404c4 	.word	0x000404c4
   36dc0:	0004033e 	.word	0x0004033e
   36dc4:	000404d9 	.word	0x000404d9
   36dc8:	00040498 	.word	0x00040498
   36dcc:	000404af 	.word	0x000404af

00036dd0 <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   36dd0:	2304      	movs	r3, #4
   36dd2:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   36dd4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   36dd8:	4606      	mov	r6, r0
   36dda:	460d      	mov	r5, r1
   36ddc:	d209      	bcs.n	36df2 <z_heap_aligned_alloc+0x22>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   36dde:	f04f 0800 	mov.w	r8, #0
   36de2:	f04f 0900 	mov.w	r9, #0
   36de6:	4319      	orrs	r1, r3
   36de8:	e9cd 8900 	strd	r8, r9, [sp]
   36dec:	f7fc fcf4 	bl	337d8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   36df0:	b920      	cbnz	r0, 36dfc <z_heap_aligned_alloc+0x2c>
		return NULL;
   36df2:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   36df4:	4620      	mov	r0, r4
   36df6:	b002      	add	sp, #8
   36df8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   36dfc:	4604      	mov	r4, r0
   36dfe:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   36e02:	2d00      	cmp	r5, #0
   36e04:	d0f6      	beq.n	36df4 <z_heap_aligned_alloc+0x24>
   36e06:	1e6b      	subs	r3, r5, #1
   36e08:	421c      	tst	r4, r3
   36e0a:	d0f3      	beq.n	36df4 <z_heap_aligned_alloc+0x24>
   36e0c:	2325      	movs	r3, #37	; 0x25
   36e0e:	4a07      	ldr	r2, [pc, #28]	; (36e2c <z_heap_aligned_alloc+0x5c>)
   36e10:	4907      	ldr	r1, [pc, #28]	; (36e30 <z_heap_aligned_alloc+0x60>)
   36e12:	4808      	ldr	r0, [pc, #32]	; (36e34 <z_heap_aligned_alloc+0x64>)
   36e14:	f002 f98d 	bl	39132 <printk>
   36e18:	4621      	mov	r1, r4
   36e1a:	462a      	mov	r2, r5
   36e1c:	4806      	ldr	r0, [pc, #24]	; (36e38 <z_heap_aligned_alloc+0x68>)
   36e1e:	f002 f988 	bl	39132 <printk>
   36e22:	2125      	movs	r1, #37	; 0x25
   36e24:	4801      	ldr	r0, [pc, #4]	; (36e2c <z_heap_aligned_alloc+0x5c>)
   36e26:	f002 fc23 	bl	39670 <assert_post_action>
   36e2a:	e7e3      	b.n	36df4 <z_heap_aligned_alloc+0x24>
   36e2c:	00046146 	.word	0x00046146
   36e30:	0004616a 	.word	0x0004616a
   36e34:	0004033e 	.word	0x0004033e
   36e38:	0004619c 	.word	0x0004619c

00036e3c <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   36e3c:	2803      	cmp	r0, #3
{
   36e3e:	b538      	push	{r3, r4, r5, lr}
   36e40:	4604      	mov	r4, r0
   36e42:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   36e44:	d901      	bls.n	36e4a <k_aligned_alloc+0xe>
   36e46:	0783      	lsls	r3, r0, #30
   36e48:	d00c      	beq.n	36e64 <k_aligned_alloc+0x28>
   36e4a:	4912      	ldr	r1, [pc, #72]	; (36e94 <k_aligned_alloc+0x58>)
   36e4c:	2342      	movs	r3, #66	; 0x42
   36e4e:	4a12      	ldr	r2, [pc, #72]	; (36e98 <k_aligned_alloc+0x5c>)
   36e50:	4812      	ldr	r0, [pc, #72]	; (36e9c <k_aligned_alloc+0x60>)
   36e52:	f002 f96e 	bl	39132 <printk>
   36e56:	4812      	ldr	r0, [pc, #72]	; (36ea0 <k_aligned_alloc+0x64>)
   36e58:	f002 f96b 	bl	39132 <printk>
   36e5c:	2142      	movs	r1, #66	; 0x42
   36e5e:	480e      	ldr	r0, [pc, #56]	; (36e98 <k_aligned_alloc+0x5c>)
   36e60:	f002 fc06 	bl	39670 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   36e64:	1e63      	subs	r3, r4, #1
   36e66:	4223      	tst	r3, r4
   36e68:	d00c      	beq.n	36e84 <k_aligned_alloc+0x48>
   36e6a:	490e      	ldr	r1, [pc, #56]	; (36ea4 <k_aligned_alloc+0x68>)
   36e6c:	2346      	movs	r3, #70	; 0x46
   36e6e:	4a0a      	ldr	r2, [pc, #40]	; (36e98 <k_aligned_alloc+0x5c>)
   36e70:	480a      	ldr	r0, [pc, #40]	; (36e9c <k_aligned_alloc+0x60>)
   36e72:	f002 f95e 	bl	39132 <printk>
   36e76:	480c      	ldr	r0, [pc, #48]	; (36ea8 <k_aligned_alloc+0x6c>)
   36e78:	f002 f95b 	bl	39132 <printk>
   36e7c:	2146      	movs	r1, #70	; 0x46
   36e7e:	4806      	ldr	r0, [pc, #24]	; (36e98 <k_aligned_alloc+0x5c>)
   36e80:	f002 fbf6 	bl	39670 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   36e84:	462a      	mov	r2, r5
   36e86:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   36e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   36e8c:	4807      	ldr	r0, [pc, #28]	; (36eac <k_aligned_alloc+0x70>)
   36e8e:	f7ff bf9f 	b.w	36dd0 <z_heap_aligned_alloc>
   36e92:	bf00      	nop
   36e94:	000461c4 	.word	0x000461c4
   36e98:	00046146 	.word	0x00046146
   36e9c:	0004033e 	.word	0x0004033e
   36ea0:	00046201 	.word	0x00046201
   36ea4:	000405bd 	.word	0x000405bd
   36ea8:	000405d8 	.word	0x000405d8
   36eac:	20014ce4 	.word	0x20014ce4

00036eb0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   36eb0:	4a02      	ldr	r2, [pc, #8]	; (36ebc <boot_banner+0xc>)
   36eb2:	4903      	ldr	r1, [pc, #12]	; (36ec0 <boot_banner+0x10>)
   36eb4:	4803      	ldr	r0, [pc, #12]	; (36ec4 <boot_banner+0x14>)
   36eb6:	f002 b93c 	b.w	39132 <printk>
   36eba:	bf00      	nop
   36ebc:	000408ea 	.word	0x000408ea
   36ec0:	0004622e 	.word	0x0004622e
   36ec4:	0004623e 	.word	0x0004623e

00036ec8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   36ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   36eca:	2400      	movs	r4, #0
   36ecc:	4b08      	ldr	r3, [pc, #32]	; (36ef0 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   36ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   36ed2:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   36ed4:	ab02      	add	r3, sp, #8
   36ed6:	9300      	str	r3, [sp, #0]
   36ed8:	4906      	ldr	r1, [pc, #24]	; (36ef4 <k_sys_work_q_init+0x2c>)
   36eda:	f04f 33ff 	mov.w	r3, #4294967295
   36ede:	4806      	ldr	r0, [pc, #24]	; (36ef8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   36ee0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   36ee4:	f7fd fd4e 	bl	34984 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   36ee8:	4620      	mov	r0, r4
   36eea:	b004      	add	sp, #16
   36eec:	bd10      	pop	{r4, pc}
   36eee:	bf00      	nop
   36ef0:	00046265 	.word	0x00046265
   36ef4:	20021be8 	.word	0x20021be8
   36ef8:	20016e20 	.word	0x20016e20

00036efc <fabs>:
   36efc:	ec51 0b10 	vmov	r0, r1, d0
   36f00:	ee10 2a10 	vmov	r2, s0
   36f04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   36f08:	ec43 2b10 	vmov	d0, r2, r3
   36f0c:	4770      	bx	lr
   36f0e:	bf00      	nop

00036f10 <__assert_func>:
   36f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   36f12:	4614      	mov	r4, r2
   36f14:	461a      	mov	r2, r3
   36f16:	4b09      	ldr	r3, [pc, #36]	; (36f3c <__assert_func+0x2c>)
   36f18:	4605      	mov	r5, r0
   36f1a:	681b      	ldr	r3, [r3, #0]
   36f1c:	68d8      	ldr	r0, [r3, #12]
   36f1e:	b14c      	cbz	r4, 36f34 <__assert_func+0x24>
   36f20:	4b07      	ldr	r3, [pc, #28]	; (36f40 <__assert_func+0x30>)
   36f22:	9100      	str	r1, [sp, #0]
   36f24:	4907      	ldr	r1, [pc, #28]	; (36f44 <__assert_func+0x34>)
   36f26:	e9cd 3401 	strd	r3, r4, [sp, #4]
   36f2a:	462b      	mov	r3, r5
   36f2c:	f000 f80e 	bl	36f4c <fiprintf>
   36f30:	f007 fa3f 	bl	3e3b2 <abort>
   36f34:	4b04      	ldr	r3, [pc, #16]	; (36f48 <__assert_func+0x38>)
   36f36:	461c      	mov	r4, r3
   36f38:	e7f3      	b.n	36f22 <__assert_func+0x12>
   36f3a:	bf00      	nop
   36f3c:	20014878 	.word	0x20014878
   36f40:	0004626e 	.word	0x0004626e
   36f44:	0004627b 	.word	0x0004627b
   36f48:	000408ea 	.word	0x000408ea

00036f4c <fiprintf>:
   36f4c:	b40e      	push	{r1, r2, r3}
   36f4e:	b503      	push	{r0, r1, lr}
   36f50:	ab03      	add	r3, sp, #12
   36f52:	4601      	mov	r1, r0
   36f54:	4805      	ldr	r0, [pc, #20]	; (36f6c <fiprintf+0x20>)
   36f56:	f853 2b04 	ldr.w	r2, [r3], #4
   36f5a:	6800      	ldr	r0, [r0, #0]
   36f5c:	9301      	str	r3, [sp, #4]
   36f5e:	f000 f8c1 	bl	370e4 <_vfiprintf_r>
   36f62:	b002      	add	sp, #8
   36f64:	f85d eb04 	ldr.w	lr, [sp], #4
   36f68:	b003      	add	sp, #12
   36f6a:	4770      	bx	lr
   36f6c:	20014878 	.word	0x20014878

00036f70 <malloc>:
   36f70:	4b02      	ldr	r3, [pc, #8]	; (36f7c <malloc+0xc>)
   36f72:	4601      	mov	r1, r0
   36f74:	6818      	ldr	r0, [r3, #0]
   36f76:	f000 b85b 	b.w	37030 <_malloc_r>
   36f7a:	bf00      	nop
   36f7c:	20014878 	.word	0x20014878

00036f80 <free>:
   36f80:	4b02      	ldr	r3, [pc, #8]	; (36f8c <free+0xc>)
   36f82:	4601      	mov	r1, r0
   36f84:	6818      	ldr	r0, [r3, #0]
   36f86:	f000 b803 	b.w	36f90 <_free_r>
   36f8a:	bf00      	nop
   36f8c:	20014878 	.word	0x20014878

00036f90 <_free_r>:
   36f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   36f92:	2900      	cmp	r1, #0
   36f94:	d047      	beq.n	37026 <_free_r+0x96>
   36f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
   36f9a:	1f0c      	subs	r4, r1, #4
   36f9c:	9001      	str	r0, [sp, #4]
   36f9e:	2b00      	cmp	r3, #0
   36fa0:	bfb8      	it	lt
   36fa2:	18e4      	addlt	r4, r4, r3
   36fa4:	f001 fbb8 	bl	38718 <__malloc_lock>
   36fa8:	4a20      	ldr	r2, [pc, #128]	; (3702c <_free_r+0x9c>)
   36faa:	9801      	ldr	r0, [sp, #4]
   36fac:	6813      	ldr	r3, [r2, #0]
   36fae:	4615      	mov	r5, r2
   36fb0:	b933      	cbnz	r3, 36fc0 <_free_r+0x30>
   36fb2:	6063      	str	r3, [r4, #4]
   36fb4:	6014      	str	r4, [r2, #0]
   36fb6:	b003      	add	sp, #12
   36fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   36fbc:	f001 bbb2 	b.w	38724 <__malloc_unlock>
   36fc0:	42a3      	cmp	r3, r4
   36fc2:	d90b      	bls.n	36fdc <_free_r+0x4c>
   36fc4:	6821      	ldr	r1, [r4, #0]
   36fc6:	1862      	adds	r2, r4, r1
   36fc8:	4293      	cmp	r3, r2
   36fca:	bf02      	ittt	eq
   36fcc:	681a      	ldreq	r2, [r3, #0]
   36fce:	685b      	ldreq	r3, [r3, #4]
   36fd0:	1852      	addeq	r2, r2, r1
   36fd2:	6063      	str	r3, [r4, #4]
   36fd4:	bf08      	it	eq
   36fd6:	6022      	streq	r2, [r4, #0]
   36fd8:	602c      	str	r4, [r5, #0]
   36fda:	e7ec      	b.n	36fb6 <_free_r+0x26>
   36fdc:	461a      	mov	r2, r3
   36fde:	685b      	ldr	r3, [r3, #4]
   36fe0:	b10b      	cbz	r3, 36fe6 <_free_r+0x56>
   36fe2:	42a3      	cmp	r3, r4
   36fe4:	d9fa      	bls.n	36fdc <_free_r+0x4c>
   36fe6:	6811      	ldr	r1, [r2, #0]
   36fe8:	1855      	adds	r5, r2, r1
   36fea:	42a5      	cmp	r5, r4
   36fec:	d10b      	bne.n	37006 <_free_r+0x76>
   36fee:	6824      	ldr	r4, [r4, #0]
   36ff0:	4421      	add	r1, r4
   36ff2:	1854      	adds	r4, r2, r1
   36ff4:	6011      	str	r1, [r2, #0]
   36ff6:	42a3      	cmp	r3, r4
   36ff8:	d1dd      	bne.n	36fb6 <_free_r+0x26>
   36ffa:	681c      	ldr	r4, [r3, #0]
   36ffc:	685b      	ldr	r3, [r3, #4]
   36ffe:	4421      	add	r1, r4
   37000:	6053      	str	r3, [r2, #4]
   37002:	6011      	str	r1, [r2, #0]
   37004:	e7d7      	b.n	36fb6 <_free_r+0x26>
   37006:	d902      	bls.n	3700e <_free_r+0x7e>
   37008:	230c      	movs	r3, #12
   3700a:	6003      	str	r3, [r0, #0]
   3700c:	e7d3      	b.n	36fb6 <_free_r+0x26>
   3700e:	6825      	ldr	r5, [r4, #0]
   37010:	1961      	adds	r1, r4, r5
   37012:	428b      	cmp	r3, r1
   37014:	bf02      	ittt	eq
   37016:	6819      	ldreq	r1, [r3, #0]
   37018:	685b      	ldreq	r3, [r3, #4]
   3701a:	1949      	addeq	r1, r1, r5
   3701c:	6063      	str	r3, [r4, #4]
   3701e:	bf08      	it	eq
   37020:	6021      	streq	r1, [r4, #0]
   37022:	6054      	str	r4, [r2, #4]
   37024:	e7c7      	b.n	36fb6 <_free_r+0x26>
   37026:	b003      	add	sp, #12
   37028:	bd30      	pop	{r4, r5, pc}
   3702a:	bf00      	nop
   3702c:	2001ca40 	.word	0x2001ca40

00037030 <_malloc_r>:
   37030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37032:	1ccd      	adds	r5, r1, #3
   37034:	4606      	mov	r6, r0
   37036:	f025 0503 	bic.w	r5, r5, #3
   3703a:	3508      	adds	r5, #8
   3703c:	2d0c      	cmp	r5, #12
   3703e:	bf38      	it	cc
   37040:	250c      	movcc	r5, #12
   37042:	2d00      	cmp	r5, #0
   37044:	db01      	blt.n	3704a <_malloc_r+0x1a>
   37046:	42a9      	cmp	r1, r5
   37048:	d903      	bls.n	37052 <_malloc_r+0x22>
   3704a:	230c      	movs	r3, #12
   3704c:	6033      	str	r3, [r6, #0]
   3704e:	2000      	movs	r0, #0
   37050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37052:	f001 fb61 	bl	38718 <__malloc_lock>
   37056:	4921      	ldr	r1, [pc, #132]	; (370dc <_malloc_r+0xac>)
   37058:	680a      	ldr	r2, [r1, #0]
   3705a:	4614      	mov	r4, r2
   3705c:	b99c      	cbnz	r4, 37086 <_malloc_r+0x56>
   3705e:	4f20      	ldr	r7, [pc, #128]	; (370e0 <_malloc_r+0xb0>)
   37060:	683b      	ldr	r3, [r7, #0]
   37062:	b923      	cbnz	r3, 3706e <_malloc_r+0x3e>
   37064:	4621      	mov	r1, r4
   37066:	4630      	mov	r0, r6
   37068:	f000 fce8 	bl	37a3c <_sbrk_r>
   3706c:	6038      	str	r0, [r7, #0]
   3706e:	4629      	mov	r1, r5
   37070:	4630      	mov	r0, r6
   37072:	f000 fce3 	bl	37a3c <_sbrk_r>
   37076:	1c43      	adds	r3, r0, #1
   37078:	d123      	bne.n	370c2 <_malloc_r+0x92>
   3707a:	230c      	movs	r3, #12
   3707c:	4630      	mov	r0, r6
   3707e:	6033      	str	r3, [r6, #0]
   37080:	f001 fb50 	bl	38724 <__malloc_unlock>
   37084:	e7e3      	b.n	3704e <_malloc_r+0x1e>
   37086:	6823      	ldr	r3, [r4, #0]
   37088:	1b5b      	subs	r3, r3, r5
   3708a:	d417      	bmi.n	370bc <_malloc_r+0x8c>
   3708c:	2b0b      	cmp	r3, #11
   3708e:	d903      	bls.n	37098 <_malloc_r+0x68>
   37090:	6023      	str	r3, [r4, #0]
   37092:	441c      	add	r4, r3
   37094:	6025      	str	r5, [r4, #0]
   37096:	e004      	b.n	370a2 <_malloc_r+0x72>
   37098:	6863      	ldr	r3, [r4, #4]
   3709a:	42a2      	cmp	r2, r4
   3709c:	bf0c      	ite	eq
   3709e:	600b      	streq	r3, [r1, #0]
   370a0:	6053      	strne	r3, [r2, #4]
   370a2:	4630      	mov	r0, r6
   370a4:	f001 fb3e 	bl	38724 <__malloc_unlock>
   370a8:	f104 000b 	add.w	r0, r4, #11
   370ac:	1d23      	adds	r3, r4, #4
   370ae:	f020 0007 	bic.w	r0, r0, #7
   370b2:	1ac2      	subs	r2, r0, r3
   370b4:	d0cc      	beq.n	37050 <_malloc_r+0x20>
   370b6:	1a1b      	subs	r3, r3, r0
   370b8:	50a3      	str	r3, [r4, r2]
   370ba:	e7c9      	b.n	37050 <_malloc_r+0x20>
   370bc:	4622      	mov	r2, r4
   370be:	6864      	ldr	r4, [r4, #4]
   370c0:	e7cc      	b.n	3705c <_malloc_r+0x2c>
   370c2:	1cc4      	adds	r4, r0, #3
   370c4:	f024 0403 	bic.w	r4, r4, #3
   370c8:	42a0      	cmp	r0, r4
   370ca:	d0e3      	beq.n	37094 <_malloc_r+0x64>
   370cc:	1a21      	subs	r1, r4, r0
   370ce:	4630      	mov	r0, r6
   370d0:	f000 fcb4 	bl	37a3c <_sbrk_r>
   370d4:	3001      	adds	r0, #1
   370d6:	d1dd      	bne.n	37094 <_malloc_r+0x64>
   370d8:	e7cf      	b.n	3707a <_malloc_r+0x4a>
   370da:	bf00      	nop
   370dc:	2001ca40 	.word	0x2001ca40
   370e0:	2001ca44 	.word	0x2001ca44

000370e4 <_vfiprintf_r>:
   370e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   370e8:	460d      	mov	r5, r1
   370ea:	b09d      	sub	sp, #116	; 0x74
   370ec:	4614      	mov	r4, r2
   370ee:	4698      	mov	r8, r3
   370f0:	4606      	mov	r6, r0
   370f2:	b118      	cbz	r0, 370fc <_vfiprintf_r+0x18>
   370f4:	6983      	ldr	r3, [r0, #24]
   370f6:	b90b      	cbnz	r3, 370fc <_vfiprintf_r+0x18>
   370f8:	f001 f806 	bl	38108 <__sinit>
   370fc:	4b89      	ldr	r3, [pc, #548]	; (37324 <_vfiprintf_r+0x240>)
   370fe:	429d      	cmp	r5, r3
   37100:	d11b      	bne.n	3713a <_vfiprintf_r+0x56>
   37102:	6875      	ldr	r5, [r6, #4]
   37104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   37106:	07d9      	lsls	r1, r3, #31
   37108:	d405      	bmi.n	37116 <_vfiprintf_r+0x32>
   3710a:	89ab      	ldrh	r3, [r5, #12]
   3710c:	059a      	lsls	r2, r3, #22
   3710e:	d402      	bmi.n	37116 <_vfiprintf_r+0x32>
   37110:	6da8      	ldr	r0, [r5, #88]	; 0x58
   37112:	f007 fb42 	bl	3e79a <__retarget_lock_acquire_recursive>
   37116:	89ab      	ldrh	r3, [r5, #12]
   37118:	071b      	lsls	r3, r3, #28
   3711a:	d501      	bpl.n	37120 <_vfiprintf_r+0x3c>
   3711c:	692b      	ldr	r3, [r5, #16]
   3711e:	b9eb      	cbnz	r3, 3715c <_vfiprintf_r+0x78>
   37120:	4629      	mov	r1, r5
   37122:	4630      	mov	r0, r6
   37124:	f000 fe70 	bl	37e08 <__swsetup_r>
   37128:	b1c0      	cbz	r0, 3715c <_vfiprintf_r+0x78>
   3712a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3712c:	07dc      	lsls	r4, r3, #31
   3712e:	d50e      	bpl.n	3714e <_vfiprintf_r+0x6a>
   37130:	f04f 30ff 	mov.w	r0, #4294967295
   37134:	b01d      	add	sp, #116	; 0x74
   37136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3713a:	4b7b      	ldr	r3, [pc, #492]	; (37328 <_vfiprintf_r+0x244>)
   3713c:	429d      	cmp	r5, r3
   3713e:	d101      	bne.n	37144 <_vfiprintf_r+0x60>
   37140:	68b5      	ldr	r5, [r6, #8]
   37142:	e7df      	b.n	37104 <_vfiprintf_r+0x20>
   37144:	4b79      	ldr	r3, [pc, #484]	; (3732c <_vfiprintf_r+0x248>)
   37146:	429d      	cmp	r5, r3
   37148:	bf08      	it	eq
   3714a:	68f5      	ldreq	r5, [r6, #12]
   3714c:	e7da      	b.n	37104 <_vfiprintf_r+0x20>
   3714e:	89ab      	ldrh	r3, [r5, #12]
   37150:	0598      	lsls	r0, r3, #22
   37152:	d4ed      	bmi.n	37130 <_vfiprintf_r+0x4c>
   37154:	6da8      	ldr	r0, [r5, #88]	; 0x58
   37156:	f007 fb21 	bl	3e79c <__retarget_lock_release_recursive>
   3715a:	e7e9      	b.n	37130 <_vfiprintf_r+0x4c>
   3715c:	2300      	movs	r3, #0
   3715e:	f8cd 800c 	str.w	r8, [sp, #12]
   37162:	f04f 0901 	mov.w	r9, #1
   37166:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 37330 <_vfiprintf_r+0x24c>
   3716a:	9309      	str	r3, [sp, #36]	; 0x24
   3716c:	2320      	movs	r3, #32
   3716e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   37172:	2330      	movs	r3, #48	; 0x30
   37174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   37178:	4623      	mov	r3, r4
   3717a:	469a      	mov	sl, r3
   3717c:	f813 2b01 	ldrb.w	r2, [r3], #1
   37180:	b10a      	cbz	r2, 37186 <_vfiprintf_r+0xa2>
   37182:	2a25      	cmp	r2, #37	; 0x25
   37184:	d1f9      	bne.n	3717a <_vfiprintf_r+0x96>
   37186:	ebba 0b04 	subs.w	fp, sl, r4
   3718a:	d00b      	beq.n	371a4 <_vfiprintf_r+0xc0>
   3718c:	465b      	mov	r3, fp
   3718e:	4622      	mov	r2, r4
   37190:	4629      	mov	r1, r5
   37192:	4630      	mov	r0, r6
   37194:	f006 ff28 	bl	3dfe8 <__sfputs_r>
   37198:	3001      	adds	r0, #1
   3719a:	f000 80aa 	beq.w	372f2 <_vfiprintf_r+0x20e>
   3719e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   371a0:	445a      	add	r2, fp
   371a2:	9209      	str	r2, [sp, #36]	; 0x24
   371a4:	f89a 3000 	ldrb.w	r3, [sl]
   371a8:	2b00      	cmp	r3, #0
   371aa:	f000 80a2 	beq.w	372f2 <_vfiprintf_r+0x20e>
   371ae:	2300      	movs	r3, #0
   371b0:	f04f 32ff 	mov.w	r2, #4294967295
   371b4:	f10a 0a01 	add.w	sl, sl, #1
   371b8:	9304      	str	r3, [sp, #16]
   371ba:	9307      	str	r3, [sp, #28]
   371bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   371c0:	931a      	str	r3, [sp, #104]	; 0x68
   371c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
   371c6:	4654      	mov	r4, sl
   371c8:	2205      	movs	r2, #5
   371ca:	4859      	ldr	r0, [pc, #356]	; (37330 <_vfiprintf_r+0x24c>)
   371cc:	f814 1b01 	ldrb.w	r1, [r4], #1
   371d0:	f006 feaf 	bl	3df32 <memchr>
   371d4:	9a04      	ldr	r2, [sp, #16]
   371d6:	b9d8      	cbnz	r0, 37210 <_vfiprintf_r+0x12c>
   371d8:	06d1      	lsls	r1, r2, #27
   371da:	bf44      	itt	mi
   371dc:	2320      	movmi	r3, #32
   371de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   371e2:	0713      	lsls	r3, r2, #28
   371e4:	bf44      	itt	mi
   371e6:	232b      	movmi	r3, #43	; 0x2b
   371e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   371ec:	f89a 3000 	ldrb.w	r3, [sl]
   371f0:	2b2a      	cmp	r3, #42	; 0x2a
   371f2:	d015      	beq.n	37220 <_vfiprintf_r+0x13c>
   371f4:	9a07      	ldr	r2, [sp, #28]
   371f6:	4654      	mov	r4, sl
   371f8:	2000      	movs	r0, #0
   371fa:	f04f 0c0a 	mov.w	ip, #10
   371fe:	4621      	mov	r1, r4
   37200:	f811 3b01 	ldrb.w	r3, [r1], #1
   37204:	3b30      	subs	r3, #48	; 0x30
   37206:	2b09      	cmp	r3, #9
   37208:	d94e      	bls.n	372a8 <_vfiprintf_r+0x1c4>
   3720a:	b1b0      	cbz	r0, 3723a <_vfiprintf_r+0x156>
   3720c:	9207      	str	r2, [sp, #28]
   3720e:	e014      	b.n	3723a <_vfiprintf_r+0x156>
   37210:	eba0 0308 	sub.w	r3, r0, r8
   37214:	46a2      	mov	sl, r4
   37216:	fa09 f303 	lsl.w	r3, r9, r3
   3721a:	4313      	orrs	r3, r2
   3721c:	9304      	str	r3, [sp, #16]
   3721e:	e7d2      	b.n	371c6 <_vfiprintf_r+0xe2>
   37220:	9b03      	ldr	r3, [sp, #12]
   37222:	1d19      	adds	r1, r3, #4
   37224:	681b      	ldr	r3, [r3, #0]
   37226:	2b00      	cmp	r3, #0
   37228:	9103      	str	r1, [sp, #12]
   3722a:	bfbb      	ittet	lt
   3722c:	425b      	neglt	r3, r3
   3722e:	f042 0202 	orrlt.w	r2, r2, #2
   37232:	9307      	strge	r3, [sp, #28]
   37234:	9307      	strlt	r3, [sp, #28]
   37236:	bfb8      	it	lt
   37238:	9204      	strlt	r2, [sp, #16]
   3723a:	7823      	ldrb	r3, [r4, #0]
   3723c:	2b2e      	cmp	r3, #46	; 0x2e
   3723e:	d10c      	bne.n	3725a <_vfiprintf_r+0x176>
   37240:	7863      	ldrb	r3, [r4, #1]
   37242:	2b2a      	cmp	r3, #42	; 0x2a
   37244:	d135      	bne.n	372b2 <_vfiprintf_r+0x1ce>
   37246:	9b03      	ldr	r3, [sp, #12]
   37248:	3402      	adds	r4, #2
   3724a:	1d1a      	adds	r2, r3, #4
   3724c:	681b      	ldr	r3, [r3, #0]
   3724e:	2b00      	cmp	r3, #0
   37250:	9203      	str	r2, [sp, #12]
   37252:	bfb8      	it	lt
   37254:	f04f 33ff 	movlt.w	r3, #4294967295
   37258:	9305      	str	r3, [sp, #20]
   3725a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 37340 <_vfiprintf_r+0x25c>
   3725e:	2203      	movs	r2, #3
   37260:	7821      	ldrb	r1, [r4, #0]
   37262:	4650      	mov	r0, sl
   37264:	f006 fe65 	bl	3df32 <memchr>
   37268:	b140      	cbz	r0, 3727c <_vfiprintf_r+0x198>
   3726a:	2340      	movs	r3, #64	; 0x40
   3726c:	eba0 000a 	sub.w	r0, r0, sl
   37270:	3401      	adds	r4, #1
   37272:	fa03 f000 	lsl.w	r0, r3, r0
   37276:	9b04      	ldr	r3, [sp, #16]
   37278:	4303      	orrs	r3, r0
   3727a:	9304      	str	r3, [sp, #16]
   3727c:	f814 1b01 	ldrb.w	r1, [r4], #1
   37280:	2206      	movs	r2, #6
   37282:	482c      	ldr	r0, [pc, #176]	; (37334 <_vfiprintf_r+0x250>)
   37284:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   37288:	f006 fe53 	bl	3df32 <memchr>
   3728c:	2800      	cmp	r0, #0
   3728e:	d03f      	beq.n	37310 <_vfiprintf_r+0x22c>
   37290:	4b29      	ldr	r3, [pc, #164]	; (37338 <_vfiprintf_r+0x254>)
   37292:	bb1b      	cbnz	r3, 372dc <_vfiprintf_r+0x1f8>
   37294:	9b03      	ldr	r3, [sp, #12]
   37296:	3307      	adds	r3, #7
   37298:	f023 0307 	bic.w	r3, r3, #7
   3729c:	3308      	adds	r3, #8
   3729e:	9303      	str	r3, [sp, #12]
   372a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   372a2:	443b      	add	r3, r7
   372a4:	9309      	str	r3, [sp, #36]	; 0x24
   372a6:	e767      	b.n	37178 <_vfiprintf_r+0x94>
   372a8:	fb0c 3202 	mla	r2, ip, r2, r3
   372ac:	460c      	mov	r4, r1
   372ae:	2001      	movs	r0, #1
   372b0:	e7a5      	b.n	371fe <_vfiprintf_r+0x11a>
   372b2:	2300      	movs	r3, #0
   372b4:	3401      	adds	r4, #1
   372b6:	f04f 0c0a 	mov.w	ip, #10
   372ba:	4619      	mov	r1, r3
   372bc:	9305      	str	r3, [sp, #20]
   372be:	4620      	mov	r0, r4
   372c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   372c4:	3a30      	subs	r2, #48	; 0x30
   372c6:	2a09      	cmp	r2, #9
   372c8:	d903      	bls.n	372d2 <_vfiprintf_r+0x1ee>
   372ca:	2b00      	cmp	r3, #0
   372cc:	d0c5      	beq.n	3725a <_vfiprintf_r+0x176>
   372ce:	9105      	str	r1, [sp, #20]
   372d0:	e7c3      	b.n	3725a <_vfiprintf_r+0x176>
   372d2:	fb0c 2101 	mla	r1, ip, r1, r2
   372d6:	4604      	mov	r4, r0
   372d8:	2301      	movs	r3, #1
   372da:	e7f0      	b.n	372be <_vfiprintf_r+0x1da>
   372dc:	ab03      	add	r3, sp, #12
   372de:	462a      	mov	r2, r5
   372e0:	a904      	add	r1, sp, #16
   372e2:	4630      	mov	r0, r6
   372e4:	9300      	str	r3, [sp, #0]
   372e6:	4b15      	ldr	r3, [pc, #84]	; (3733c <_vfiprintf_r+0x258>)
   372e8:	f000 f82c 	bl	37344 <_printf_float>
   372ec:	4607      	mov	r7, r0
   372ee:	1c78      	adds	r0, r7, #1
   372f0:	d1d6      	bne.n	372a0 <_vfiprintf_r+0x1bc>
   372f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   372f4:	07d9      	lsls	r1, r3, #31
   372f6:	d405      	bmi.n	37304 <_vfiprintf_r+0x220>
   372f8:	89ab      	ldrh	r3, [r5, #12]
   372fa:	059a      	lsls	r2, r3, #22
   372fc:	d402      	bmi.n	37304 <_vfiprintf_r+0x220>
   372fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
   37300:	f007 fa4c 	bl	3e79c <__retarget_lock_release_recursive>
   37304:	89ab      	ldrh	r3, [r5, #12]
   37306:	065b      	lsls	r3, r3, #25
   37308:	f53f af12 	bmi.w	37130 <_vfiprintf_r+0x4c>
   3730c:	9809      	ldr	r0, [sp, #36]	; 0x24
   3730e:	e711      	b.n	37134 <_vfiprintf_r+0x50>
   37310:	ab03      	add	r3, sp, #12
   37312:	462a      	mov	r2, r5
   37314:	a904      	add	r1, sp, #16
   37316:	4630      	mov	r0, r6
   37318:	9300      	str	r3, [sp, #0]
   3731a:	4b08      	ldr	r3, [pc, #32]	; (3733c <_vfiprintf_r+0x258>)
   3731c:	f000 fa48 	bl	377b0 <_printf_i>
   37320:	e7e4      	b.n	372ec <_vfiprintf_r+0x208>
   37322:	bf00      	nop
   37324:	00040254 	.word	0x00040254
   37328:	00040274 	.word	0x00040274
   3732c:	00040234 	.word	0x00040234
   37330:	000463ab 	.word	0x000463ab
   37334:	000463b5 	.word	0x000463b5
   37338:	00037345 	.word	0x00037345
   3733c:	0003dfe9 	.word	0x0003dfe9
   37340:	000463b1 	.word	0x000463b1

00037344 <_printf_float>:
   37344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37348:	ed2d 8b02 	vpush	{d8}
   3734c:	b08d      	sub	sp, #52	; 0x34
   3734e:	460c      	mov	r4, r1
   37350:	4616      	mov	r6, r2
   37352:	461f      	mov	r7, r3
   37354:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   37358:	4605      	mov	r5, r0
   3735a:	f001 f987 	bl	3866c <_localeconv_r>
   3735e:	f8d0 a000 	ldr.w	sl, [r0]
   37362:	4650      	mov	r0, sl
   37364:	f7e5 ff7a 	bl	1d25c <strlen>
   37368:	2300      	movs	r3, #0
   3736a:	f894 b018 	ldrb.w	fp, [r4, #24]
   3736e:	ee08 0a10 	vmov	s16, r0
   37372:	930a      	str	r3, [sp, #40]	; 0x28
   37374:	6823      	ldr	r3, [r4, #0]
   37376:	9305      	str	r3, [sp, #20]
   37378:	f8d8 3000 	ldr.w	r3, [r8]
   3737c:	3307      	adds	r3, #7
   3737e:	f023 0307 	bic.w	r3, r3, #7
   37382:	f103 0208 	add.w	r2, r3, #8
   37386:	f8c8 2000 	str.w	r2, [r8]
   3738a:	e9d3 2300 	ldrd	r2, r3, [r3]
   3738e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   37392:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   37396:	f04f 32ff 	mov.w	r2, #4294967295
   3739a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   3739e:	f8cd 8018 	str.w	r8, [sp, #24]
   373a2:	9307      	str	r3, [sp, #28]
   373a4:	4b9e      	ldr	r3, [pc, #632]	; (37620 <_printf_float+0x2dc>)
   373a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   373aa:	f7e5 fc9f 	bl	1ccec <__aeabi_dcmpun>
   373ae:	bb88      	cbnz	r0, 37414 <_printf_float+0xd0>
   373b0:	f04f 32ff 	mov.w	r2, #4294967295
   373b4:	4b9a      	ldr	r3, [pc, #616]	; (37620 <_printf_float+0x2dc>)
   373b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   373ba:	f7e5 fc79 	bl	1ccb0 <__aeabi_dcmple>
   373be:	bb48      	cbnz	r0, 37414 <_printf_float+0xd0>
   373c0:	2200      	movs	r2, #0
   373c2:	2300      	movs	r3, #0
   373c4:	4640      	mov	r0, r8
   373c6:	4649      	mov	r1, r9
   373c8:	f7e5 fc68 	bl	1cc9c <__aeabi_dcmplt>
   373cc:	b110      	cbz	r0, 373d4 <_printf_float+0x90>
   373ce:	232d      	movs	r3, #45	; 0x2d
   373d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   373d4:	4b93      	ldr	r3, [pc, #588]	; (37624 <_printf_float+0x2e0>)
   373d6:	4894      	ldr	r0, [pc, #592]	; (37628 <_printf_float+0x2e4>)
   373d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   373dc:	bf94      	ite	ls
   373de:	4698      	movls	r8, r3
   373e0:	4680      	movhi	r8, r0
   373e2:	2303      	movs	r3, #3
   373e4:	f04f 0900 	mov.w	r9, #0
   373e8:	6123      	str	r3, [r4, #16]
   373ea:	9b05      	ldr	r3, [sp, #20]
   373ec:	f023 0204 	bic.w	r2, r3, #4
   373f0:	6022      	str	r2, [r4, #0]
   373f2:	4633      	mov	r3, r6
   373f4:	aa0b      	add	r2, sp, #44	; 0x2c
   373f6:	4621      	mov	r1, r4
   373f8:	4628      	mov	r0, r5
   373fa:	9700      	str	r7, [sp, #0]
   373fc:	f006 fea6 	bl	3e14c <_printf_common>
   37400:	3001      	adds	r0, #1
   37402:	f040 8090 	bne.w	37526 <_printf_float+0x1e2>
   37406:	f04f 30ff 	mov.w	r0, #4294967295
   3740a:	b00d      	add	sp, #52	; 0x34
   3740c:	ecbd 8b02 	vpop	{d8}
   37410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37414:	4642      	mov	r2, r8
   37416:	464b      	mov	r3, r9
   37418:	4640      	mov	r0, r8
   3741a:	4649      	mov	r1, r9
   3741c:	f7e5 fc66 	bl	1ccec <__aeabi_dcmpun>
   37420:	b140      	cbz	r0, 37434 <_printf_float+0xf0>
   37422:	464b      	mov	r3, r9
   37424:	4881      	ldr	r0, [pc, #516]	; (3762c <_printf_float+0x2e8>)
   37426:	2b00      	cmp	r3, #0
   37428:	bfbc      	itt	lt
   3742a:	232d      	movlt	r3, #45	; 0x2d
   3742c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   37430:	4b7f      	ldr	r3, [pc, #508]	; (37630 <_printf_float+0x2ec>)
   37432:	e7d1      	b.n	373d8 <_printf_float+0x94>
   37434:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   37438:	6863      	ldr	r3, [r4, #4]
   3743a:	9206      	str	r2, [sp, #24]
   3743c:	1c5a      	adds	r2, r3, #1
   3743e:	d13f      	bne.n	374c0 <_printf_float+0x17c>
   37440:	2306      	movs	r3, #6
   37442:	6063      	str	r3, [r4, #4]
   37444:	9b05      	ldr	r3, [sp, #20]
   37446:	4628      	mov	r0, r5
   37448:	6861      	ldr	r1, [r4, #4]
   3744a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   3744e:	2300      	movs	r3, #0
   37450:	9303      	str	r3, [sp, #12]
   37452:	ab0a      	add	r3, sp, #40	; 0x28
   37454:	6022      	str	r2, [r4, #0]
   37456:	e9cd b301 	strd	fp, r3, [sp, #4]
   3745a:	ab09      	add	r3, sp, #36	; 0x24
   3745c:	ec49 8b10 	vmov	d0, r8, r9
   37460:	9300      	str	r3, [sp, #0]
   37462:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   37466:	f006 fdd1 	bl	3e00c <__cvt>
   3746a:	9b06      	ldr	r3, [sp, #24]
   3746c:	4680      	mov	r8, r0
   3746e:	9909      	ldr	r1, [sp, #36]	; 0x24
   37470:	2b47      	cmp	r3, #71	; 0x47
   37472:	d108      	bne.n	37486 <_printf_float+0x142>
   37474:	1cc8      	adds	r0, r1, #3
   37476:	db02      	blt.n	3747e <_printf_float+0x13a>
   37478:	6863      	ldr	r3, [r4, #4]
   3747a:	4299      	cmp	r1, r3
   3747c:	dd41      	ble.n	37502 <_printf_float+0x1be>
   3747e:	f1ab 0b02 	sub.w	fp, fp, #2
   37482:	fa5f fb8b 	uxtb.w	fp, fp
   37486:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3748a:	d820      	bhi.n	374ce <_printf_float+0x18a>
   3748c:	3901      	subs	r1, #1
   3748e:	465a      	mov	r2, fp
   37490:	f104 0050 	add.w	r0, r4, #80	; 0x50
   37494:	9109      	str	r1, [sp, #36]	; 0x24
   37496:	f006 fe1b 	bl	3e0d0 <__exponent>
   3749a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3749c:	4681      	mov	r9, r0
   3749e:	1813      	adds	r3, r2, r0
   374a0:	2a01      	cmp	r2, #1
   374a2:	6123      	str	r3, [r4, #16]
   374a4:	dc02      	bgt.n	374ac <_printf_float+0x168>
   374a6:	6822      	ldr	r2, [r4, #0]
   374a8:	07d2      	lsls	r2, r2, #31
   374aa:	d501      	bpl.n	374b0 <_printf_float+0x16c>
   374ac:	3301      	adds	r3, #1
   374ae:	6123      	str	r3, [r4, #16]
   374b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   374b4:	2b00      	cmp	r3, #0
   374b6:	d09c      	beq.n	373f2 <_printf_float+0xae>
   374b8:	232d      	movs	r3, #45	; 0x2d
   374ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   374be:	e798      	b.n	373f2 <_printf_float+0xae>
   374c0:	9a06      	ldr	r2, [sp, #24]
   374c2:	2a47      	cmp	r2, #71	; 0x47
   374c4:	d1be      	bne.n	37444 <_printf_float+0x100>
   374c6:	2b00      	cmp	r3, #0
   374c8:	d1bc      	bne.n	37444 <_printf_float+0x100>
   374ca:	2301      	movs	r3, #1
   374cc:	e7b9      	b.n	37442 <_printf_float+0xfe>
   374ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   374d2:	d118      	bne.n	37506 <_printf_float+0x1c2>
   374d4:	2900      	cmp	r1, #0
   374d6:	6863      	ldr	r3, [r4, #4]
   374d8:	dd0b      	ble.n	374f2 <_printf_float+0x1ae>
   374da:	6121      	str	r1, [r4, #16]
   374dc:	b913      	cbnz	r3, 374e4 <_printf_float+0x1a0>
   374de:	6822      	ldr	r2, [r4, #0]
   374e0:	07d0      	lsls	r0, r2, #31
   374e2:	d502      	bpl.n	374ea <_printf_float+0x1a6>
   374e4:	3301      	adds	r3, #1
   374e6:	440b      	add	r3, r1
   374e8:	6123      	str	r3, [r4, #16]
   374ea:	f04f 0900 	mov.w	r9, #0
   374ee:	65a1      	str	r1, [r4, #88]	; 0x58
   374f0:	e7de      	b.n	374b0 <_printf_float+0x16c>
   374f2:	b913      	cbnz	r3, 374fa <_printf_float+0x1b6>
   374f4:	6822      	ldr	r2, [r4, #0]
   374f6:	07d2      	lsls	r2, r2, #31
   374f8:	d501      	bpl.n	374fe <_printf_float+0x1ba>
   374fa:	3302      	adds	r3, #2
   374fc:	e7f4      	b.n	374e8 <_printf_float+0x1a4>
   374fe:	2301      	movs	r3, #1
   37500:	e7f2      	b.n	374e8 <_printf_float+0x1a4>
   37502:	f04f 0b67 	mov.w	fp, #103	; 0x67
   37506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   37508:	4299      	cmp	r1, r3
   3750a:	db05      	blt.n	37518 <_printf_float+0x1d4>
   3750c:	6823      	ldr	r3, [r4, #0]
   3750e:	6121      	str	r1, [r4, #16]
   37510:	07d8      	lsls	r0, r3, #31
   37512:	d5ea      	bpl.n	374ea <_printf_float+0x1a6>
   37514:	1c4b      	adds	r3, r1, #1
   37516:	e7e7      	b.n	374e8 <_printf_float+0x1a4>
   37518:	2900      	cmp	r1, #0
   3751a:	bfd4      	ite	le
   3751c:	f1c1 0202 	rsble	r2, r1, #2
   37520:	2201      	movgt	r2, #1
   37522:	4413      	add	r3, r2
   37524:	e7e0      	b.n	374e8 <_printf_float+0x1a4>
   37526:	6823      	ldr	r3, [r4, #0]
   37528:	055a      	lsls	r2, r3, #21
   3752a:	d407      	bmi.n	3753c <_printf_float+0x1f8>
   3752c:	6923      	ldr	r3, [r4, #16]
   3752e:	4642      	mov	r2, r8
   37530:	4631      	mov	r1, r6
   37532:	4628      	mov	r0, r5
   37534:	47b8      	blx	r7
   37536:	3001      	adds	r0, #1
   37538:	d12c      	bne.n	37594 <_printf_float+0x250>
   3753a:	e764      	b.n	37406 <_printf_float+0xc2>
   3753c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   37540:	f240 80e0 	bls.w	37704 <_printf_float+0x3c0>
   37544:	2200      	movs	r2, #0
   37546:	2300      	movs	r3, #0
   37548:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3754c:	f7e5 fb9c 	bl	1cc88 <__aeabi_dcmpeq>
   37550:	2800      	cmp	r0, #0
   37552:	d034      	beq.n	375be <_printf_float+0x27a>
   37554:	2301      	movs	r3, #1
   37556:	4a37      	ldr	r2, [pc, #220]	; (37634 <_printf_float+0x2f0>)
   37558:	4631      	mov	r1, r6
   3755a:	4628      	mov	r0, r5
   3755c:	47b8      	blx	r7
   3755e:	3001      	adds	r0, #1
   37560:	f43f af51 	beq.w	37406 <_printf_float+0xc2>
   37564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   37568:	429a      	cmp	r2, r3
   3756a:	db02      	blt.n	37572 <_printf_float+0x22e>
   3756c:	6823      	ldr	r3, [r4, #0]
   3756e:	07d8      	lsls	r0, r3, #31
   37570:	d510      	bpl.n	37594 <_printf_float+0x250>
   37572:	ee18 3a10 	vmov	r3, s16
   37576:	4652      	mov	r2, sl
   37578:	4631      	mov	r1, r6
   3757a:	4628      	mov	r0, r5
   3757c:	47b8      	blx	r7
   3757e:	3001      	adds	r0, #1
   37580:	f43f af41 	beq.w	37406 <_printf_float+0xc2>
   37584:	f04f 0800 	mov.w	r8, #0
   37588:	f104 091a 	add.w	r9, r4, #26
   3758c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3758e:	3b01      	subs	r3, #1
   37590:	4543      	cmp	r3, r8
   37592:	dc09      	bgt.n	375a8 <_printf_float+0x264>
   37594:	6823      	ldr	r3, [r4, #0]
   37596:	079b      	lsls	r3, r3, #30
   37598:	f100 8105 	bmi.w	377a6 <_printf_float+0x462>
   3759c:	68e0      	ldr	r0, [r4, #12]
   3759e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   375a0:	4298      	cmp	r0, r3
   375a2:	bfb8      	it	lt
   375a4:	4618      	movlt	r0, r3
   375a6:	e730      	b.n	3740a <_printf_float+0xc6>
   375a8:	2301      	movs	r3, #1
   375aa:	464a      	mov	r2, r9
   375ac:	4631      	mov	r1, r6
   375ae:	4628      	mov	r0, r5
   375b0:	47b8      	blx	r7
   375b2:	3001      	adds	r0, #1
   375b4:	f43f af27 	beq.w	37406 <_printf_float+0xc2>
   375b8:	f108 0801 	add.w	r8, r8, #1
   375bc:	e7e6      	b.n	3758c <_printf_float+0x248>
   375be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   375c0:	2b00      	cmp	r3, #0
   375c2:	dc39      	bgt.n	37638 <_printf_float+0x2f4>
   375c4:	2301      	movs	r3, #1
   375c6:	4a1b      	ldr	r2, [pc, #108]	; (37634 <_printf_float+0x2f0>)
   375c8:	4631      	mov	r1, r6
   375ca:	4628      	mov	r0, r5
   375cc:	47b8      	blx	r7
   375ce:	3001      	adds	r0, #1
   375d0:	f43f af19 	beq.w	37406 <_printf_float+0xc2>
   375d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   375d8:	4313      	orrs	r3, r2
   375da:	d102      	bne.n	375e2 <_printf_float+0x29e>
   375dc:	6823      	ldr	r3, [r4, #0]
   375de:	07d9      	lsls	r1, r3, #31
   375e0:	d5d8      	bpl.n	37594 <_printf_float+0x250>
   375e2:	ee18 3a10 	vmov	r3, s16
   375e6:	4652      	mov	r2, sl
   375e8:	4631      	mov	r1, r6
   375ea:	4628      	mov	r0, r5
   375ec:	47b8      	blx	r7
   375ee:	3001      	adds	r0, #1
   375f0:	f43f af09 	beq.w	37406 <_printf_float+0xc2>
   375f4:	f04f 0900 	mov.w	r9, #0
   375f8:	f104 0a1a 	add.w	sl, r4, #26
   375fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   375fe:	425b      	negs	r3, r3
   37600:	454b      	cmp	r3, r9
   37602:	dc01      	bgt.n	37608 <_printf_float+0x2c4>
   37604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   37606:	e792      	b.n	3752e <_printf_float+0x1ea>
   37608:	2301      	movs	r3, #1
   3760a:	4652      	mov	r2, sl
   3760c:	4631      	mov	r1, r6
   3760e:	4628      	mov	r0, r5
   37610:	47b8      	blx	r7
   37612:	3001      	adds	r0, #1
   37614:	f43f aef7 	beq.w	37406 <_printf_float+0xc2>
   37618:	f109 0901 	add.w	r9, r9, #1
   3761c:	e7ee      	b.n	375fc <_printf_float+0x2b8>
   3761e:	bf00      	nop
   37620:	7fefffff 	.word	0x7fefffff
   37624:	000463bc 	.word	0x000463bc
   37628:	00040808 	.word	0x00040808
   3762c:	000463c4 	.word	0x000463c4
   37630:	000463c0 	.word	0x000463c0
   37634:	000451fc 	.word	0x000451fc
   37638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3763a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3763c:	429a      	cmp	r2, r3
   3763e:	bfa8      	it	ge
   37640:	461a      	movge	r2, r3
   37642:	2a00      	cmp	r2, #0
   37644:	4691      	mov	r9, r2
   37646:	dc37      	bgt.n	376b8 <_printf_float+0x374>
   37648:	f04f 0b00 	mov.w	fp, #0
   3764c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   37650:	f104 021a 	add.w	r2, r4, #26
   37654:	6da3      	ldr	r3, [r4, #88]	; 0x58
   37656:	9305      	str	r3, [sp, #20]
   37658:	eba3 0309 	sub.w	r3, r3, r9
   3765c:	455b      	cmp	r3, fp
   3765e:	dc33      	bgt.n	376c8 <_printf_float+0x384>
   37660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   37664:	429a      	cmp	r2, r3
   37666:	db3b      	blt.n	376e0 <_printf_float+0x39c>
   37668:	6823      	ldr	r3, [r4, #0]
   3766a:	07da      	lsls	r2, r3, #31
   3766c:	d438      	bmi.n	376e0 <_printf_float+0x39c>
   3766e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   37670:	9b05      	ldr	r3, [sp, #20]
   37672:	9909      	ldr	r1, [sp, #36]	; 0x24
   37674:	1ad3      	subs	r3, r2, r3
   37676:	eba2 0901 	sub.w	r9, r2, r1
   3767a:	4599      	cmp	r9, r3
   3767c:	bfa8      	it	ge
   3767e:	4699      	movge	r9, r3
   37680:	f1b9 0f00 	cmp.w	r9, #0
   37684:	dc35      	bgt.n	376f2 <_printf_float+0x3ae>
   37686:	f04f 0800 	mov.w	r8, #0
   3768a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3768e:	f104 0a1a 	add.w	sl, r4, #26
   37692:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   37696:	1a9b      	subs	r3, r3, r2
   37698:	eba3 0309 	sub.w	r3, r3, r9
   3769c:	4543      	cmp	r3, r8
   3769e:	f77f af79 	ble.w	37594 <_printf_float+0x250>
   376a2:	2301      	movs	r3, #1
   376a4:	4652      	mov	r2, sl
   376a6:	4631      	mov	r1, r6
   376a8:	4628      	mov	r0, r5
   376aa:	47b8      	blx	r7
   376ac:	3001      	adds	r0, #1
   376ae:	f43f aeaa 	beq.w	37406 <_printf_float+0xc2>
   376b2:	f108 0801 	add.w	r8, r8, #1
   376b6:	e7ec      	b.n	37692 <_printf_float+0x34e>
   376b8:	4613      	mov	r3, r2
   376ba:	4631      	mov	r1, r6
   376bc:	4642      	mov	r2, r8
   376be:	4628      	mov	r0, r5
   376c0:	47b8      	blx	r7
   376c2:	3001      	adds	r0, #1
   376c4:	d1c0      	bne.n	37648 <_printf_float+0x304>
   376c6:	e69e      	b.n	37406 <_printf_float+0xc2>
   376c8:	2301      	movs	r3, #1
   376ca:	4631      	mov	r1, r6
   376cc:	4628      	mov	r0, r5
   376ce:	9205      	str	r2, [sp, #20]
   376d0:	47b8      	blx	r7
   376d2:	3001      	adds	r0, #1
   376d4:	f43f ae97 	beq.w	37406 <_printf_float+0xc2>
   376d8:	f10b 0b01 	add.w	fp, fp, #1
   376dc:	9a05      	ldr	r2, [sp, #20]
   376de:	e7b9      	b.n	37654 <_printf_float+0x310>
   376e0:	ee18 3a10 	vmov	r3, s16
   376e4:	4652      	mov	r2, sl
   376e6:	4631      	mov	r1, r6
   376e8:	4628      	mov	r0, r5
   376ea:	47b8      	blx	r7
   376ec:	3001      	adds	r0, #1
   376ee:	d1be      	bne.n	3766e <_printf_float+0x32a>
   376f0:	e689      	b.n	37406 <_printf_float+0xc2>
   376f2:	9a05      	ldr	r2, [sp, #20]
   376f4:	464b      	mov	r3, r9
   376f6:	4631      	mov	r1, r6
   376f8:	4628      	mov	r0, r5
   376fa:	4442      	add	r2, r8
   376fc:	47b8      	blx	r7
   376fe:	3001      	adds	r0, #1
   37700:	d1c1      	bne.n	37686 <_printf_float+0x342>
   37702:	e680      	b.n	37406 <_printf_float+0xc2>
   37704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   37706:	2a01      	cmp	r2, #1
   37708:	dc01      	bgt.n	3770e <_printf_float+0x3ca>
   3770a:	07db      	lsls	r3, r3, #31
   3770c:	d538      	bpl.n	37780 <_printf_float+0x43c>
   3770e:	2301      	movs	r3, #1
   37710:	4642      	mov	r2, r8
   37712:	4631      	mov	r1, r6
   37714:	4628      	mov	r0, r5
   37716:	47b8      	blx	r7
   37718:	3001      	adds	r0, #1
   3771a:	f43f ae74 	beq.w	37406 <_printf_float+0xc2>
   3771e:	ee18 3a10 	vmov	r3, s16
   37722:	4652      	mov	r2, sl
   37724:	4631      	mov	r1, r6
   37726:	4628      	mov	r0, r5
   37728:	47b8      	blx	r7
   3772a:	3001      	adds	r0, #1
   3772c:	f43f ae6b 	beq.w	37406 <_printf_float+0xc2>
   37730:	2200      	movs	r2, #0
   37732:	2300      	movs	r3, #0
   37734:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   37738:	f7e5 faa6 	bl	1cc88 <__aeabi_dcmpeq>
   3773c:	b9d8      	cbnz	r0, 37776 <_printf_float+0x432>
   3773e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   37740:	f108 0201 	add.w	r2, r8, #1
   37744:	3b01      	subs	r3, #1
   37746:	4631      	mov	r1, r6
   37748:	4628      	mov	r0, r5
   3774a:	47b8      	blx	r7
   3774c:	3001      	adds	r0, #1
   3774e:	d10e      	bne.n	3776e <_printf_float+0x42a>
   37750:	e659      	b.n	37406 <_printf_float+0xc2>
   37752:	2301      	movs	r3, #1
   37754:	4652      	mov	r2, sl
   37756:	4631      	mov	r1, r6
   37758:	4628      	mov	r0, r5
   3775a:	47b8      	blx	r7
   3775c:	3001      	adds	r0, #1
   3775e:	f43f ae52 	beq.w	37406 <_printf_float+0xc2>
   37762:	f108 0801 	add.w	r8, r8, #1
   37766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   37768:	3b01      	subs	r3, #1
   3776a:	4543      	cmp	r3, r8
   3776c:	dcf1      	bgt.n	37752 <_printf_float+0x40e>
   3776e:	464b      	mov	r3, r9
   37770:	f104 0250 	add.w	r2, r4, #80	; 0x50
   37774:	e6dc      	b.n	37530 <_printf_float+0x1ec>
   37776:	f04f 0800 	mov.w	r8, #0
   3777a:	f104 0a1a 	add.w	sl, r4, #26
   3777e:	e7f2      	b.n	37766 <_printf_float+0x422>
   37780:	2301      	movs	r3, #1
   37782:	4642      	mov	r2, r8
   37784:	e7df      	b.n	37746 <_printf_float+0x402>
   37786:	2301      	movs	r3, #1
   37788:	464a      	mov	r2, r9
   3778a:	4631      	mov	r1, r6
   3778c:	4628      	mov	r0, r5
   3778e:	47b8      	blx	r7
   37790:	3001      	adds	r0, #1
   37792:	f43f ae38 	beq.w	37406 <_printf_float+0xc2>
   37796:	f108 0801 	add.w	r8, r8, #1
   3779a:	68e3      	ldr	r3, [r4, #12]
   3779c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3779e:	1a5b      	subs	r3, r3, r1
   377a0:	4543      	cmp	r3, r8
   377a2:	dcf0      	bgt.n	37786 <_printf_float+0x442>
   377a4:	e6fa      	b.n	3759c <_printf_float+0x258>
   377a6:	f04f 0800 	mov.w	r8, #0
   377aa:	f104 0919 	add.w	r9, r4, #25
   377ae:	e7f4      	b.n	3779a <_printf_float+0x456>

000377b0 <_printf_i>:
   377b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   377b4:	460c      	mov	r4, r1
   377b6:	4691      	mov	r9, r2
   377b8:	4680      	mov	r8, r0
   377ba:	469a      	mov	sl, r3
   377bc:	7e27      	ldrb	r7, [r4, #24]
   377be:	f104 0243 	add.w	r2, r4, #67	; 0x43
   377c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   377c4:	2f78      	cmp	r7, #120	; 0x78
   377c6:	d807      	bhi.n	377d8 <_printf_i+0x28>
   377c8:	2f62      	cmp	r7, #98	; 0x62
   377ca:	d80a      	bhi.n	377e2 <_printf_i+0x32>
   377cc:	2f00      	cmp	r7, #0
   377ce:	f000 80d8 	beq.w	37982 <_printf_i+0x1d2>
   377d2:	2f58      	cmp	r7, #88	; 0x58
   377d4:	f000 80a3 	beq.w	3791e <_printf_i+0x16e>
   377d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
   377dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   377e0:	e03a      	b.n	37858 <_printf_i+0xa8>
   377e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   377e6:	2b15      	cmp	r3, #21
   377e8:	d8f6      	bhi.n	377d8 <_printf_i+0x28>
   377ea:	a001      	add	r0, pc, #4	; (adr r0, 377f0 <_printf_i+0x40>)
   377ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   377f0:	00037849 	.word	0x00037849
   377f4:	0003785d 	.word	0x0003785d
   377f8:	000377d9 	.word	0x000377d9
   377fc:	000377d9 	.word	0x000377d9
   37800:	000377d9 	.word	0x000377d9
   37804:	000377d9 	.word	0x000377d9
   37808:	0003785d 	.word	0x0003785d
   3780c:	000377d9 	.word	0x000377d9
   37810:	000377d9 	.word	0x000377d9
   37814:	000377d9 	.word	0x000377d9
   37818:	000377d9 	.word	0x000377d9
   3781c:	00037969 	.word	0x00037969
   37820:	0003788d 	.word	0x0003788d
   37824:	0003794b 	.word	0x0003794b
   37828:	000377d9 	.word	0x000377d9
   3782c:	000377d9 	.word	0x000377d9
   37830:	0003798b 	.word	0x0003798b
   37834:	000377d9 	.word	0x000377d9
   37838:	0003788d 	.word	0x0003788d
   3783c:	000377d9 	.word	0x000377d9
   37840:	000377d9 	.word	0x000377d9
   37844:	00037953 	.word	0x00037953
   37848:	680b      	ldr	r3, [r1, #0]
   3784a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   3784e:	1d1a      	adds	r2, r3, #4
   37850:	681b      	ldr	r3, [r3, #0]
   37852:	600a      	str	r2, [r1, #0]
   37854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   37858:	2301      	movs	r3, #1
   3785a:	e0a3      	b.n	379a4 <_printf_i+0x1f4>
   3785c:	6825      	ldr	r5, [r4, #0]
   3785e:	6808      	ldr	r0, [r1, #0]
   37860:	062e      	lsls	r6, r5, #24
   37862:	f100 0304 	add.w	r3, r0, #4
   37866:	d50a      	bpl.n	3787e <_printf_i+0xce>
   37868:	6805      	ldr	r5, [r0, #0]
   3786a:	600b      	str	r3, [r1, #0]
   3786c:	2d00      	cmp	r5, #0
   3786e:	da03      	bge.n	37878 <_printf_i+0xc8>
   37870:	232d      	movs	r3, #45	; 0x2d
   37872:	426d      	negs	r5, r5
   37874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   37878:	485e      	ldr	r0, [pc, #376]	; (379f4 <_printf_i+0x244>)
   3787a:	230a      	movs	r3, #10
   3787c:	e019      	b.n	378b2 <_printf_i+0x102>
   3787e:	f015 0f40 	tst.w	r5, #64	; 0x40
   37882:	6805      	ldr	r5, [r0, #0]
   37884:	600b      	str	r3, [r1, #0]
   37886:	bf18      	it	ne
   37888:	b22d      	sxthne	r5, r5
   3788a:	e7ef      	b.n	3786c <_printf_i+0xbc>
   3788c:	680b      	ldr	r3, [r1, #0]
   3788e:	6825      	ldr	r5, [r4, #0]
   37890:	1d18      	adds	r0, r3, #4
   37892:	6008      	str	r0, [r1, #0]
   37894:	0628      	lsls	r0, r5, #24
   37896:	d501      	bpl.n	3789c <_printf_i+0xec>
   37898:	681d      	ldr	r5, [r3, #0]
   3789a:	e002      	b.n	378a2 <_printf_i+0xf2>
   3789c:	0669      	lsls	r1, r5, #25
   3789e:	d5fb      	bpl.n	37898 <_printf_i+0xe8>
   378a0:	881d      	ldrh	r5, [r3, #0]
   378a2:	2f6f      	cmp	r7, #111	; 0x6f
   378a4:	4853      	ldr	r0, [pc, #332]	; (379f4 <_printf_i+0x244>)
   378a6:	bf0c      	ite	eq
   378a8:	2308      	moveq	r3, #8
   378aa:	230a      	movne	r3, #10
   378ac:	2100      	movs	r1, #0
   378ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   378b2:	6866      	ldr	r6, [r4, #4]
   378b4:	2e00      	cmp	r6, #0
   378b6:	60a6      	str	r6, [r4, #8]
   378b8:	bfa2      	ittt	ge
   378ba:	6821      	ldrge	r1, [r4, #0]
   378bc:	f021 0104 	bicge.w	r1, r1, #4
   378c0:	6021      	strge	r1, [r4, #0]
   378c2:	b90d      	cbnz	r5, 378c8 <_printf_i+0x118>
   378c4:	2e00      	cmp	r6, #0
   378c6:	d04d      	beq.n	37964 <_printf_i+0x1b4>
   378c8:	4616      	mov	r6, r2
   378ca:	fbb5 f1f3 	udiv	r1, r5, r3
   378ce:	fb03 5711 	mls	r7, r3, r1, r5
   378d2:	5dc7      	ldrb	r7, [r0, r7]
   378d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
   378d8:	462f      	mov	r7, r5
   378da:	460d      	mov	r5, r1
   378dc:	42bb      	cmp	r3, r7
   378de:	d9f4      	bls.n	378ca <_printf_i+0x11a>
   378e0:	2b08      	cmp	r3, #8
   378e2:	d10b      	bne.n	378fc <_printf_i+0x14c>
   378e4:	6823      	ldr	r3, [r4, #0]
   378e6:	07df      	lsls	r7, r3, #31
   378e8:	d508      	bpl.n	378fc <_printf_i+0x14c>
   378ea:	6923      	ldr	r3, [r4, #16]
   378ec:	6861      	ldr	r1, [r4, #4]
   378ee:	4299      	cmp	r1, r3
   378f0:	bfde      	ittt	le
   378f2:	2330      	movle	r3, #48	; 0x30
   378f4:	f806 3c01 	strble.w	r3, [r6, #-1]
   378f8:	f106 36ff 	addle.w	r6, r6, #4294967295
   378fc:	1b92      	subs	r2, r2, r6
   378fe:	6122      	str	r2, [r4, #16]
   37900:	464b      	mov	r3, r9
   37902:	aa03      	add	r2, sp, #12
   37904:	4621      	mov	r1, r4
   37906:	4640      	mov	r0, r8
   37908:	f8cd a000 	str.w	sl, [sp]
   3790c:	f006 fc1e 	bl	3e14c <_printf_common>
   37910:	3001      	adds	r0, #1
   37912:	d14c      	bne.n	379ae <_printf_i+0x1fe>
   37914:	f04f 30ff 	mov.w	r0, #4294967295
   37918:	b004      	add	sp, #16
   3791a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3791e:	4835      	ldr	r0, [pc, #212]	; (379f4 <_printf_i+0x244>)
   37920:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   37924:	6823      	ldr	r3, [r4, #0]
   37926:	680e      	ldr	r6, [r1, #0]
   37928:	061f      	lsls	r7, r3, #24
   3792a:	f856 5b04 	ldr.w	r5, [r6], #4
   3792e:	600e      	str	r6, [r1, #0]
   37930:	d514      	bpl.n	3795c <_printf_i+0x1ac>
   37932:	07d9      	lsls	r1, r3, #31
   37934:	bf44      	itt	mi
   37936:	f043 0320 	orrmi.w	r3, r3, #32
   3793a:	6023      	strmi	r3, [r4, #0]
   3793c:	b91d      	cbnz	r5, 37946 <_printf_i+0x196>
   3793e:	6823      	ldr	r3, [r4, #0]
   37940:	f023 0320 	bic.w	r3, r3, #32
   37944:	6023      	str	r3, [r4, #0]
   37946:	2310      	movs	r3, #16
   37948:	e7b0      	b.n	378ac <_printf_i+0xfc>
   3794a:	6823      	ldr	r3, [r4, #0]
   3794c:	f043 0320 	orr.w	r3, r3, #32
   37950:	6023      	str	r3, [r4, #0]
   37952:	2378      	movs	r3, #120	; 0x78
   37954:	4828      	ldr	r0, [pc, #160]	; (379f8 <_printf_i+0x248>)
   37956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   3795a:	e7e3      	b.n	37924 <_printf_i+0x174>
   3795c:	065e      	lsls	r6, r3, #25
   3795e:	bf48      	it	mi
   37960:	b2ad      	uxthmi	r5, r5
   37962:	e7e6      	b.n	37932 <_printf_i+0x182>
   37964:	4616      	mov	r6, r2
   37966:	e7bb      	b.n	378e0 <_printf_i+0x130>
   37968:	680b      	ldr	r3, [r1, #0]
   3796a:	6826      	ldr	r6, [r4, #0]
   3796c:	1d1d      	adds	r5, r3, #4
   3796e:	6960      	ldr	r0, [r4, #20]
   37970:	600d      	str	r5, [r1, #0]
   37972:	0635      	lsls	r5, r6, #24
   37974:	681b      	ldr	r3, [r3, #0]
   37976:	d501      	bpl.n	3797c <_printf_i+0x1cc>
   37978:	6018      	str	r0, [r3, #0]
   3797a:	e002      	b.n	37982 <_printf_i+0x1d2>
   3797c:	0671      	lsls	r1, r6, #25
   3797e:	d5fb      	bpl.n	37978 <_printf_i+0x1c8>
   37980:	8018      	strh	r0, [r3, #0]
   37982:	2300      	movs	r3, #0
   37984:	4616      	mov	r6, r2
   37986:	6123      	str	r3, [r4, #16]
   37988:	e7ba      	b.n	37900 <_printf_i+0x150>
   3798a:	680b      	ldr	r3, [r1, #0]
   3798c:	1d1a      	adds	r2, r3, #4
   3798e:	600a      	str	r2, [r1, #0]
   37990:	2100      	movs	r1, #0
   37992:	681e      	ldr	r6, [r3, #0]
   37994:	6862      	ldr	r2, [r4, #4]
   37996:	4630      	mov	r0, r6
   37998:	f006 facb 	bl	3df32 <memchr>
   3799c:	b108      	cbz	r0, 379a2 <_printf_i+0x1f2>
   3799e:	1b80      	subs	r0, r0, r6
   379a0:	6060      	str	r0, [r4, #4]
   379a2:	6863      	ldr	r3, [r4, #4]
   379a4:	6123      	str	r3, [r4, #16]
   379a6:	2300      	movs	r3, #0
   379a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   379ac:	e7a8      	b.n	37900 <_printf_i+0x150>
   379ae:	6923      	ldr	r3, [r4, #16]
   379b0:	4632      	mov	r2, r6
   379b2:	4649      	mov	r1, r9
   379b4:	4640      	mov	r0, r8
   379b6:	47d0      	blx	sl
   379b8:	3001      	adds	r0, #1
   379ba:	d0ab      	beq.n	37914 <_printf_i+0x164>
   379bc:	6823      	ldr	r3, [r4, #0]
   379be:	079b      	lsls	r3, r3, #30
   379c0:	d413      	bmi.n	379ea <_printf_i+0x23a>
   379c2:	68e0      	ldr	r0, [r4, #12]
   379c4:	9b03      	ldr	r3, [sp, #12]
   379c6:	4298      	cmp	r0, r3
   379c8:	bfb8      	it	lt
   379ca:	4618      	movlt	r0, r3
   379cc:	e7a4      	b.n	37918 <_printf_i+0x168>
   379ce:	2301      	movs	r3, #1
   379d0:	4632      	mov	r2, r6
   379d2:	4649      	mov	r1, r9
   379d4:	4640      	mov	r0, r8
   379d6:	47d0      	blx	sl
   379d8:	3001      	adds	r0, #1
   379da:	d09b      	beq.n	37914 <_printf_i+0x164>
   379dc:	3501      	adds	r5, #1
   379de:	68e3      	ldr	r3, [r4, #12]
   379e0:	9903      	ldr	r1, [sp, #12]
   379e2:	1a5b      	subs	r3, r3, r1
   379e4:	42ab      	cmp	r3, r5
   379e6:	dcf2      	bgt.n	379ce <_printf_i+0x21e>
   379e8:	e7eb      	b.n	379c2 <_printf_i+0x212>
   379ea:	2500      	movs	r5, #0
   379ec:	f104 0619 	add.w	r6, r4, #25
   379f0:	e7f5      	b.n	379de <_printf_i+0x22e>
   379f2:	bf00      	nop
   379f4:	000463c8 	.word	0x000463c8
   379f8:	000463d9 	.word	0x000463d9

000379fc <iprintf>:
   379fc:	b40f      	push	{r0, r1, r2, r3}
   379fe:	4b0a      	ldr	r3, [pc, #40]	; (37a28 <iprintf+0x2c>)
   37a00:	b513      	push	{r0, r1, r4, lr}
   37a02:	681c      	ldr	r4, [r3, #0]
   37a04:	b124      	cbz	r4, 37a10 <iprintf+0x14>
   37a06:	69a3      	ldr	r3, [r4, #24]
   37a08:	b913      	cbnz	r3, 37a10 <iprintf+0x14>
   37a0a:	4620      	mov	r0, r4
   37a0c:	f000 fb7c 	bl	38108 <__sinit>
   37a10:	ab05      	add	r3, sp, #20
   37a12:	9a04      	ldr	r2, [sp, #16]
   37a14:	68a1      	ldr	r1, [r4, #8]
   37a16:	4620      	mov	r0, r4
   37a18:	9301      	str	r3, [sp, #4]
   37a1a:	f7ff fb63 	bl	370e4 <_vfiprintf_r>
   37a1e:	b002      	add	sp, #8
   37a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37a24:	b004      	add	sp, #16
   37a26:	4770      	bx	lr
   37a28:	20014878 	.word	0x20014878

00037a2c <realloc>:
   37a2c:	4b02      	ldr	r3, [pc, #8]	; (37a38 <realloc+0xc>)
   37a2e:	460a      	mov	r2, r1
   37a30:	4601      	mov	r1, r0
   37a32:	6818      	ldr	r0, [r3, #0]
   37a34:	f007 ba8d 	b.w	3ef52 <_realloc_r>
   37a38:	20014878 	.word	0x20014878

00037a3c <_sbrk_r>:
   37a3c:	b538      	push	{r3, r4, r5, lr}
   37a3e:	2300      	movs	r3, #0
   37a40:	4d05      	ldr	r5, [pc, #20]	; (37a58 <_sbrk_r+0x1c>)
   37a42:	4604      	mov	r4, r0
   37a44:	4608      	mov	r0, r1
   37a46:	602b      	str	r3, [r5, #0]
   37a48:	f7ec faae 	bl	23fa8 <_sbrk>
   37a4c:	1c43      	adds	r3, r0, #1
   37a4e:	d102      	bne.n	37a56 <_sbrk_r+0x1a>
   37a50:	682b      	ldr	r3, [r5, #0]
   37a52:	b103      	cbz	r3, 37a56 <_sbrk_r+0x1a>
   37a54:	6023      	str	r3, [r4, #0]
   37a56:	bd38      	pop	{r3, r4, r5, pc}
   37a58:	2001d8e8 	.word	0x2001d8e8

00037a5c <sniprintf>:
   37a5c:	b40c      	push	{r2, r3}
   37a5e:	4b18      	ldr	r3, [pc, #96]	; (37ac0 <sniprintf+0x64>)
   37a60:	b530      	push	{r4, r5, lr}
   37a62:	1e0c      	subs	r4, r1, #0
   37a64:	b09d      	sub	sp, #116	; 0x74
   37a66:	681d      	ldr	r5, [r3, #0]
   37a68:	da08      	bge.n	37a7c <sniprintf+0x20>
   37a6a:	238b      	movs	r3, #139	; 0x8b
   37a6c:	f04f 30ff 	mov.w	r0, #4294967295
   37a70:	602b      	str	r3, [r5, #0]
   37a72:	b01d      	add	sp, #116	; 0x74
   37a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   37a78:	b002      	add	sp, #8
   37a7a:	4770      	bx	lr
   37a7c:	f44f 7302 	mov.w	r3, #520	; 0x208
   37a80:	9002      	str	r0, [sp, #8]
   37a82:	9006      	str	r0, [sp, #24]
   37a84:	a902      	add	r1, sp, #8
   37a86:	f8ad 3014 	strh.w	r3, [sp, #20]
   37a8a:	bf14      	ite	ne
   37a8c:	f104 33ff 	addne.w	r3, r4, #4294967295
   37a90:	4623      	moveq	r3, r4
   37a92:	9a20      	ldr	r2, [sp, #128]	; 0x80
   37a94:	4628      	mov	r0, r5
   37a96:	9304      	str	r3, [sp, #16]
   37a98:	9307      	str	r3, [sp, #28]
   37a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   37a9e:	f8ad 3016 	strh.w	r3, [sp, #22]
   37aa2:	ab21      	add	r3, sp, #132	; 0x84
   37aa4:	9301      	str	r3, [sp, #4]
   37aa6:	f000 ff0b 	bl	388c0 <_svfiprintf_r>
   37aaa:	1c43      	adds	r3, r0, #1
   37aac:	bfbc      	itt	lt
   37aae:	238b      	movlt	r3, #139	; 0x8b
   37ab0:	602b      	strlt	r3, [r5, #0]
   37ab2:	2c00      	cmp	r4, #0
   37ab4:	d0dd      	beq.n	37a72 <sniprintf+0x16>
   37ab6:	9b02      	ldr	r3, [sp, #8]
   37ab8:	2200      	movs	r2, #0
   37aba:	701a      	strb	r2, [r3, #0]
   37abc:	e7d9      	b.n	37a72 <sniprintf+0x16>
   37abe:	bf00      	nop
   37ac0:	20014878 	.word	0x20014878

00037ac4 <siscanf>:
   37ac4:	b40e      	push	{r1, r2, r3}
   37ac6:	b510      	push	{r4, lr}
   37ac8:	b09f      	sub	sp, #124	; 0x7c
   37aca:	f44f 7101 	mov.w	r1, #516	; 0x204
   37ace:	ac21      	add	r4, sp, #132	; 0x84
   37ad0:	f8ad 101c 	strh.w	r1, [sp, #28]
   37ad4:	9004      	str	r0, [sp, #16]
   37ad6:	f854 2b04 	ldr.w	r2, [r4], #4
   37ada:	9008      	str	r0, [sp, #32]
   37adc:	9201      	str	r2, [sp, #4]
   37ade:	f7e5 fbbd 	bl	1d25c <strlen>
   37ae2:	4b0c      	ldr	r3, [pc, #48]	; (37b14 <siscanf+0x50>)
   37ae4:	a904      	add	r1, sp, #16
   37ae6:	9005      	str	r0, [sp, #20]
   37ae8:	930d      	str	r3, [sp, #52]	; 0x34
   37aea:	2300      	movs	r3, #0
   37aec:	9009      	str	r0, [sp, #36]	; 0x24
   37aee:	9311      	str	r3, [sp, #68]	; 0x44
   37af0:	9316      	str	r3, [sp, #88]	; 0x58
   37af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   37af6:	4808      	ldr	r0, [pc, #32]	; (37b18 <siscanf+0x54>)
   37af8:	f8ad 301e 	strh.w	r3, [sp, #30]
   37afc:	4623      	mov	r3, r4
   37afe:	9a01      	ldr	r2, [sp, #4]
   37b00:	6800      	ldr	r0, [r0, #0]
   37b02:	9403      	str	r4, [sp, #12]
   37b04:	f000 ffdc 	bl	38ac0 <__ssvfiscanf_r>
   37b08:	b01f      	add	sp, #124	; 0x7c
   37b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37b0e:	b003      	add	sp, #12
   37b10:	4770      	bx	lr
   37b12:	bf00      	nop
   37b14:	0003e24f 	.word	0x0003e24f
   37b18:	20014878 	.word	0x20014878

00037b1c <strtod>:
   37b1c:	460a      	mov	r2, r1
   37b1e:	4601      	mov	r1, r0
   37b20:	4802      	ldr	r0, [pc, #8]	; (37b2c <strtod+0x10>)
   37b22:	4b03      	ldr	r3, [pc, #12]	; (37b30 <strtod+0x14>)
   37b24:	6800      	ldr	r0, [r0, #0]
   37b26:	f7e5 bf97 	b.w	1da58 <_strtod_l>
   37b2a:	bf00      	nop
   37b2c:	20014878 	.word	0x20014878
   37b30:	200148dc 	.word	0x200148dc

00037b34 <_strtol_l.isra.0>:
   37b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37b38:	468c      	mov	ip, r1
   37b3a:	4686      	mov	lr, r0
   37b3c:	4e38      	ldr	r6, [pc, #224]	; (37c20 <_strtol_l.isra.0+0xec>)
   37b3e:	4660      	mov	r0, ip
   37b40:	f81c 4b01 	ldrb.w	r4, [ip], #1
   37b44:	5da5      	ldrb	r5, [r4, r6]
   37b46:	f015 0508 	ands.w	r5, r5, #8
   37b4a:	d1f8      	bne.n	37b3e <_strtol_l.isra.0+0xa>
   37b4c:	2c2d      	cmp	r4, #45	; 0x2d
   37b4e:	d133      	bne.n	37bb8 <_strtol_l.isra.0+0x84>
   37b50:	f89c 4000 	ldrb.w	r4, [ip]
   37b54:	f04f 0801 	mov.w	r8, #1
   37b58:	f100 0c02 	add.w	ip, r0, #2
   37b5c:	2b00      	cmp	r3, #0
   37b5e:	d05b      	beq.n	37c18 <_strtol_l.isra.0+0xe4>
   37b60:	2b10      	cmp	r3, #16
   37b62:	d10c      	bne.n	37b7e <_strtol_l.isra.0+0x4a>
   37b64:	2c30      	cmp	r4, #48	; 0x30
   37b66:	d10a      	bne.n	37b7e <_strtol_l.isra.0+0x4a>
   37b68:	f89c 0000 	ldrb.w	r0, [ip]
   37b6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   37b70:	2858      	cmp	r0, #88	; 0x58
   37b72:	d14c      	bne.n	37c0e <_strtol_l.isra.0+0xda>
   37b74:	f89c 4001 	ldrb.w	r4, [ip, #1]
   37b78:	2310      	movs	r3, #16
   37b7a:	f10c 0c02 	add.w	ip, ip, #2
   37b7e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   37b82:	2600      	movs	r6, #0
   37b84:	3f01      	subs	r7, #1
   37b86:	4630      	mov	r0, r6
   37b88:	fbb7 f9f3 	udiv	r9, r7, r3
   37b8c:	fb03 7a19 	mls	sl, r3, r9, r7
   37b90:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   37b94:	2d09      	cmp	r5, #9
   37b96:	d817      	bhi.n	37bc8 <_strtol_l.isra.0+0x94>
   37b98:	462c      	mov	r4, r5
   37b9a:	42a3      	cmp	r3, r4
   37b9c:	dd23      	ble.n	37be6 <_strtol_l.isra.0+0xb2>
   37b9e:	1c75      	adds	r5, r6, #1
   37ba0:	d007      	beq.n	37bb2 <_strtol_l.isra.0+0x7e>
   37ba2:	4581      	cmp	r9, r0
   37ba4:	d31c      	bcc.n	37be0 <_strtol_l.isra.0+0xac>
   37ba6:	d101      	bne.n	37bac <_strtol_l.isra.0+0x78>
   37ba8:	45a2      	cmp	sl, r4
   37baa:	db19      	blt.n	37be0 <_strtol_l.isra.0+0xac>
   37bac:	fb00 4003 	mla	r0, r0, r3, r4
   37bb0:	2601      	movs	r6, #1
   37bb2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   37bb6:	e7eb      	b.n	37b90 <_strtol_l.isra.0+0x5c>
   37bb8:	2c2b      	cmp	r4, #43	; 0x2b
   37bba:	46a8      	mov	r8, r5
   37bbc:	bf04      	itt	eq
   37bbe:	f89c 4000 	ldrbeq.w	r4, [ip]
   37bc2:	f100 0c02 	addeq.w	ip, r0, #2
   37bc6:	e7c9      	b.n	37b5c <_strtol_l.isra.0+0x28>
   37bc8:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   37bcc:	2d19      	cmp	r5, #25
   37bce:	d801      	bhi.n	37bd4 <_strtol_l.isra.0+0xa0>
   37bd0:	3c37      	subs	r4, #55	; 0x37
   37bd2:	e7e2      	b.n	37b9a <_strtol_l.isra.0+0x66>
   37bd4:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   37bd8:	2d19      	cmp	r5, #25
   37bda:	d804      	bhi.n	37be6 <_strtol_l.isra.0+0xb2>
   37bdc:	3c57      	subs	r4, #87	; 0x57
   37bde:	e7dc      	b.n	37b9a <_strtol_l.isra.0+0x66>
   37be0:	f04f 36ff 	mov.w	r6, #4294967295
   37be4:	e7e5      	b.n	37bb2 <_strtol_l.isra.0+0x7e>
   37be6:	1c73      	adds	r3, r6, #1
   37be8:	d106      	bne.n	37bf8 <_strtol_l.isra.0+0xc4>
   37bea:	2322      	movs	r3, #34	; 0x22
   37bec:	4638      	mov	r0, r7
   37bee:	f8ce 3000 	str.w	r3, [lr]
   37bf2:	b942      	cbnz	r2, 37c06 <_strtol_l.isra.0+0xd2>
   37bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37bf8:	f1b8 0f00 	cmp.w	r8, #0
   37bfc:	d000      	beq.n	37c00 <_strtol_l.isra.0+0xcc>
   37bfe:	4240      	negs	r0, r0
   37c00:	2a00      	cmp	r2, #0
   37c02:	d0f7      	beq.n	37bf4 <_strtol_l.isra.0+0xc0>
   37c04:	b10e      	cbz	r6, 37c0a <_strtol_l.isra.0+0xd6>
   37c06:	f10c 31ff 	add.w	r1, ip, #4294967295
   37c0a:	6011      	str	r1, [r2, #0]
   37c0c:	e7f2      	b.n	37bf4 <_strtol_l.isra.0+0xc0>
   37c0e:	2430      	movs	r4, #48	; 0x30
   37c10:	2b00      	cmp	r3, #0
   37c12:	d1b4      	bne.n	37b7e <_strtol_l.isra.0+0x4a>
   37c14:	2308      	movs	r3, #8
   37c16:	e7b2      	b.n	37b7e <_strtol_l.isra.0+0x4a>
   37c18:	2c30      	cmp	r4, #48	; 0x30
   37c1a:	d0a5      	beq.n	37b68 <_strtol_l.isra.0+0x34>
   37c1c:	230a      	movs	r3, #10
   37c1e:	e7ae      	b.n	37b7e <_strtol_l.isra.0+0x4a>
   37c20:	000462ab 	.word	0x000462ab

00037c24 <strtol>:
   37c24:	4613      	mov	r3, r2
   37c26:	460a      	mov	r2, r1
   37c28:	4601      	mov	r1, r0
   37c2a:	4802      	ldr	r0, [pc, #8]	; (37c34 <strtol+0x10>)
   37c2c:	6800      	ldr	r0, [r0, #0]
   37c2e:	f7ff bf81 	b.w	37b34 <_strtol_l.isra.0>
   37c32:	bf00      	nop
   37c34:	20014878 	.word	0x20014878

00037c38 <_strtoul_l.isra.0>:
   37c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   37c3c:	468c      	mov	ip, r1
   37c3e:	4686      	mov	lr, r0
   37c40:	4e39      	ldr	r6, [pc, #228]	; (37d28 <_strtoul_l.isra.0+0xf0>)
   37c42:	4660      	mov	r0, ip
   37c44:	f81c 4b01 	ldrb.w	r4, [ip], #1
   37c48:	5da5      	ldrb	r5, [r4, r6]
   37c4a:	f015 0508 	ands.w	r5, r5, #8
   37c4e:	d1f8      	bne.n	37c42 <_strtoul_l.isra.0+0xa>
   37c50:	2c2d      	cmp	r4, #45	; 0x2d
   37c52:	d134      	bne.n	37cbe <_strtoul_l.isra.0+0x86>
   37c54:	f89c 4000 	ldrb.w	r4, [ip]
   37c58:	f04f 0801 	mov.w	r8, #1
   37c5c:	f100 0c02 	add.w	ip, r0, #2
   37c60:	2b00      	cmp	r3, #0
   37c62:	d05d      	beq.n	37d20 <_strtoul_l.isra.0+0xe8>
   37c64:	2b10      	cmp	r3, #16
   37c66:	d10c      	bne.n	37c82 <_strtoul_l.isra.0+0x4a>
   37c68:	2c30      	cmp	r4, #48	; 0x30
   37c6a:	d10a      	bne.n	37c82 <_strtoul_l.isra.0+0x4a>
   37c6c:	f89c 0000 	ldrb.w	r0, [ip]
   37c70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   37c74:	2858      	cmp	r0, #88	; 0x58
   37c76:	d14e      	bne.n	37d16 <_strtoul_l.isra.0+0xde>
   37c78:	f89c 4001 	ldrb.w	r4, [ip, #1]
   37c7c:	2310      	movs	r3, #16
   37c7e:	f10c 0c02 	add.w	ip, ip, #2
   37c82:	f04f 37ff 	mov.w	r7, #4294967295
   37c86:	2500      	movs	r5, #0
   37c88:	fbb7 f7f3 	udiv	r7, r7, r3
   37c8c:	fb03 f907 	mul.w	r9, r3, r7
   37c90:	4628      	mov	r0, r5
   37c92:	ea6f 0909 	mvn.w	r9, r9
   37c96:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   37c9a:	2e09      	cmp	r6, #9
   37c9c:	d817      	bhi.n	37cce <_strtoul_l.isra.0+0x96>
   37c9e:	4634      	mov	r4, r6
   37ca0:	42a3      	cmp	r3, r4
   37ca2:	dd23      	ble.n	37cec <_strtoul_l.isra.0+0xb4>
   37ca4:	2d00      	cmp	r5, #0
   37ca6:	db1e      	blt.n	37ce6 <_strtoul_l.isra.0+0xae>
   37ca8:	4287      	cmp	r7, r0
   37caa:	d31c      	bcc.n	37ce6 <_strtoul_l.isra.0+0xae>
   37cac:	d101      	bne.n	37cb2 <_strtoul_l.isra.0+0x7a>
   37cae:	45a1      	cmp	r9, r4
   37cb0:	db19      	blt.n	37ce6 <_strtoul_l.isra.0+0xae>
   37cb2:	fb00 4003 	mla	r0, r0, r3, r4
   37cb6:	2501      	movs	r5, #1
   37cb8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   37cbc:	e7eb      	b.n	37c96 <_strtoul_l.isra.0+0x5e>
   37cbe:	2c2b      	cmp	r4, #43	; 0x2b
   37cc0:	46a8      	mov	r8, r5
   37cc2:	bf04      	itt	eq
   37cc4:	f89c 4000 	ldrbeq.w	r4, [ip]
   37cc8:	f100 0c02 	addeq.w	ip, r0, #2
   37ccc:	e7c8      	b.n	37c60 <_strtoul_l.isra.0+0x28>
   37cce:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   37cd2:	2e19      	cmp	r6, #25
   37cd4:	d801      	bhi.n	37cda <_strtoul_l.isra.0+0xa2>
   37cd6:	3c37      	subs	r4, #55	; 0x37
   37cd8:	e7e2      	b.n	37ca0 <_strtoul_l.isra.0+0x68>
   37cda:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   37cde:	2e19      	cmp	r6, #25
   37ce0:	d804      	bhi.n	37cec <_strtoul_l.isra.0+0xb4>
   37ce2:	3c57      	subs	r4, #87	; 0x57
   37ce4:	e7dc      	b.n	37ca0 <_strtoul_l.isra.0+0x68>
   37ce6:	f04f 35ff 	mov.w	r5, #4294967295
   37cea:	e7e5      	b.n	37cb8 <_strtoul_l.isra.0+0x80>
   37cec:	2d00      	cmp	r5, #0
   37cee:	da07      	bge.n	37d00 <_strtoul_l.isra.0+0xc8>
   37cf0:	2322      	movs	r3, #34	; 0x22
   37cf2:	f04f 30ff 	mov.w	r0, #4294967295
   37cf6:	f8ce 3000 	str.w	r3, [lr]
   37cfa:	b942      	cbnz	r2, 37d0e <_strtoul_l.isra.0+0xd6>
   37cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   37d00:	f1b8 0f00 	cmp.w	r8, #0
   37d04:	d000      	beq.n	37d08 <_strtoul_l.isra.0+0xd0>
   37d06:	4240      	negs	r0, r0
   37d08:	2a00      	cmp	r2, #0
   37d0a:	d0f7      	beq.n	37cfc <_strtoul_l.isra.0+0xc4>
   37d0c:	b10d      	cbz	r5, 37d12 <_strtoul_l.isra.0+0xda>
   37d0e:	f10c 31ff 	add.w	r1, ip, #4294967295
   37d12:	6011      	str	r1, [r2, #0]
   37d14:	e7f2      	b.n	37cfc <_strtoul_l.isra.0+0xc4>
   37d16:	2430      	movs	r4, #48	; 0x30
   37d18:	2b00      	cmp	r3, #0
   37d1a:	d1b2      	bne.n	37c82 <_strtoul_l.isra.0+0x4a>
   37d1c:	2308      	movs	r3, #8
   37d1e:	e7b0      	b.n	37c82 <_strtoul_l.isra.0+0x4a>
   37d20:	2c30      	cmp	r4, #48	; 0x30
   37d22:	d0a3      	beq.n	37c6c <_strtoul_l.isra.0+0x34>
   37d24:	230a      	movs	r3, #10
   37d26:	e7ac      	b.n	37c82 <_strtoul_l.isra.0+0x4a>
   37d28:	000462ab 	.word	0x000462ab

00037d2c <strtoul>:
   37d2c:	4613      	mov	r3, r2
   37d2e:	460a      	mov	r2, r1
   37d30:	4601      	mov	r1, r0
   37d32:	4802      	ldr	r0, [pc, #8]	; (37d3c <strtoul+0x10>)
   37d34:	6800      	ldr	r0, [r0, #0]
   37d36:	f7ff bf7f 	b.w	37c38 <_strtoul_l.isra.0>
   37d3a:	bf00      	nop
   37d3c:	20014878 	.word	0x20014878

00037d40 <__swbuf_r>:
   37d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37d42:	460e      	mov	r6, r1
   37d44:	4614      	mov	r4, r2
   37d46:	4605      	mov	r5, r0
   37d48:	b118      	cbz	r0, 37d52 <__swbuf_r+0x12>
   37d4a:	6983      	ldr	r3, [r0, #24]
   37d4c:	b90b      	cbnz	r3, 37d52 <__swbuf_r+0x12>
   37d4e:	f000 f9db 	bl	38108 <__sinit>
   37d52:	4b21      	ldr	r3, [pc, #132]	; (37dd8 <__swbuf_r+0x98>)
   37d54:	429c      	cmp	r4, r3
   37d56:	d12b      	bne.n	37db0 <__swbuf_r+0x70>
   37d58:	686c      	ldr	r4, [r5, #4]
   37d5a:	69a3      	ldr	r3, [r4, #24]
   37d5c:	60a3      	str	r3, [r4, #8]
   37d5e:	89a3      	ldrh	r3, [r4, #12]
   37d60:	071a      	lsls	r2, r3, #28
   37d62:	d52f      	bpl.n	37dc4 <__swbuf_r+0x84>
   37d64:	6923      	ldr	r3, [r4, #16]
   37d66:	b36b      	cbz	r3, 37dc4 <__swbuf_r+0x84>
   37d68:	6923      	ldr	r3, [r4, #16]
   37d6a:	b2f6      	uxtb	r6, r6
   37d6c:	6820      	ldr	r0, [r4, #0]
   37d6e:	4637      	mov	r7, r6
   37d70:	1ac0      	subs	r0, r0, r3
   37d72:	6963      	ldr	r3, [r4, #20]
   37d74:	4283      	cmp	r3, r0
   37d76:	dc04      	bgt.n	37d82 <__swbuf_r+0x42>
   37d78:	4621      	mov	r1, r4
   37d7a:	4628      	mov	r0, r5
   37d7c:	f000 f946 	bl	3800c <_fflush_r>
   37d80:	bb30      	cbnz	r0, 37dd0 <__swbuf_r+0x90>
   37d82:	68a3      	ldr	r3, [r4, #8]
   37d84:	3001      	adds	r0, #1
   37d86:	3b01      	subs	r3, #1
   37d88:	60a3      	str	r3, [r4, #8]
   37d8a:	6823      	ldr	r3, [r4, #0]
   37d8c:	1c5a      	adds	r2, r3, #1
   37d8e:	6022      	str	r2, [r4, #0]
   37d90:	701e      	strb	r6, [r3, #0]
   37d92:	6963      	ldr	r3, [r4, #20]
   37d94:	4283      	cmp	r3, r0
   37d96:	d004      	beq.n	37da2 <__swbuf_r+0x62>
   37d98:	89a3      	ldrh	r3, [r4, #12]
   37d9a:	07db      	lsls	r3, r3, #31
   37d9c:	d506      	bpl.n	37dac <__swbuf_r+0x6c>
   37d9e:	2e0a      	cmp	r6, #10
   37da0:	d104      	bne.n	37dac <__swbuf_r+0x6c>
   37da2:	4621      	mov	r1, r4
   37da4:	4628      	mov	r0, r5
   37da6:	f000 f931 	bl	3800c <_fflush_r>
   37daa:	b988      	cbnz	r0, 37dd0 <__swbuf_r+0x90>
   37dac:	4638      	mov	r0, r7
   37dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37db0:	4b0a      	ldr	r3, [pc, #40]	; (37ddc <__swbuf_r+0x9c>)
   37db2:	429c      	cmp	r4, r3
   37db4:	d101      	bne.n	37dba <__swbuf_r+0x7a>
   37db6:	68ac      	ldr	r4, [r5, #8]
   37db8:	e7cf      	b.n	37d5a <__swbuf_r+0x1a>
   37dba:	4b09      	ldr	r3, [pc, #36]	; (37de0 <__swbuf_r+0xa0>)
   37dbc:	429c      	cmp	r4, r3
   37dbe:	bf08      	it	eq
   37dc0:	68ec      	ldreq	r4, [r5, #12]
   37dc2:	e7ca      	b.n	37d5a <__swbuf_r+0x1a>
   37dc4:	4621      	mov	r1, r4
   37dc6:	4628      	mov	r0, r5
   37dc8:	f000 f81e 	bl	37e08 <__swsetup_r>
   37dcc:	2800      	cmp	r0, #0
   37dce:	d0cb      	beq.n	37d68 <__swbuf_r+0x28>
   37dd0:	f04f 37ff 	mov.w	r7, #4294967295
   37dd4:	e7ea      	b.n	37dac <__swbuf_r+0x6c>
   37dd6:	bf00      	nop
   37dd8:	00040254 	.word	0x00040254
   37ddc:	00040274 	.word	0x00040274
   37de0:	00040234 	.word	0x00040234

00037de4 <_write_r>:
   37de4:	b538      	push	{r3, r4, r5, lr}
   37de6:	4604      	mov	r4, r0
   37de8:	4d06      	ldr	r5, [pc, #24]	; (37e04 <_write_r+0x20>)
   37dea:	4608      	mov	r0, r1
   37dec:	4611      	mov	r1, r2
   37dee:	2200      	movs	r2, #0
   37df0:	602a      	str	r2, [r5, #0]
   37df2:	461a      	mov	r2, r3
   37df4:	f002 fbc0 	bl	3a578 <_write>
   37df8:	1c43      	adds	r3, r0, #1
   37dfa:	d102      	bne.n	37e02 <_write_r+0x1e>
   37dfc:	682b      	ldr	r3, [r5, #0]
   37dfe:	b103      	cbz	r3, 37e02 <_write_r+0x1e>
   37e00:	6023      	str	r3, [r4, #0]
   37e02:	bd38      	pop	{r3, r4, r5, pc}
   37e04:	2001d8e8 	.word	0x2001d8e8

00037e08 <__swsetup_r>:
   37e08:	4b32      	ldr	r3, [pc, #200]	; (37ed4 <__swsetup_r+0xcc>)
   37e0a:	b570      	push	{r4, r5, r6, lr}
   37e0c:	681d      	ldr	r5, [r3, #0]
   37e0e:	4606      	mov	r6, r0
   37e10:	460c      	mov	r4, r1
   37e12:	b125      	cbz	r5, 37e1e <__swsetup_r+0x16>
   37e14:	69ab      	ldr	r3, [r5, #24]
   37e16:	b913      	cbnz	r3, 37e1e <__swsetup_r+0x16>
   37e18:	4628      	mov	r0, r5
   37e1a:	f000 f975 	bl	38108 <__sinit>
   37e1e:	4b2e      	ldr	r3, [pc, #184]	; (37ed8 <__swsetup_r+0xd0>)
   37e20:	429c      	cmp	r4, r3
   37e22:	d10f      	bne.n	37e44 <__swsetup_r+0x3c>
   37e24:	686c      	ldr	r4, [r5, #4]
   37e26:	89a3      	ldrh	r3, [r4, #12]
   37e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   37e2c:	0719      	lsls	r1, r3, #28
   37e2e:	d42c      	bmi.n	37e8a <__swsetup_r+0x82>
   37e30:	06dd      	lsls	r5, r3, #27
   37e32:	d411      	bmi.n	37e58 <__swsetup_r+0x50>
   37e34:	2309      	movs	r3, #9
   37e36:	6033      	str	r3, [r6, #0]
   37e38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   37e3c:	f04f 30ff 	mov.w	r0, #4294967295
   37e40:	81a3      	strh	r3, [r4, #12]
   37e42:	e03e      	b.n	37ec2 <__swsetup_r+0xba>
   37e44:	4b25      	ldr	r3, [pc, #148]	; (37edc <__swsetup_r+0xd4>)
   37e46:	429c      	cmp	r4, r3
   37e48:	d101      	bne.n	37e4e <__swsetup_r+0x46>
   37e4a:	68ac      	ldr	r4, [r5, #8]
   37e4c:	e7eb      	b.n	37e26 <__swsetup_r+0x1e>
   37e4e:	4b24      	ldr	r3, [pc, #144]	; (37ee0 <__swsetup_r+0xd8>)
   37e50:	429c      	cmp	r4, r3
   37e52:	bf08      	it	eq
   37e54:	68ec      	ldreq	r4, [r5, #12]
   37e56:	e7e6      	b.n	37e26 <__swsetup_r+0x1e>
   37e58:	0758      	lsls	r0, r3, #29
   37e5a:	d512      	bpl.n	37e82 <__swsetup_r+0x7a>
   37e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   37e5e:	b141      	cbz	r1, 37e72 <__swsetup_r+0x6a>
   37e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
   37e64:	4299      	cmp	r1, r3
   37e66:	d002      	beq.n	37e6e <__swsetup_r+0x66>
   37e68:	4630      	mov	r0, r6
   37e6a:	f7ff f891 	bl	36f90 <_free_r>
   37e6e:	2300      	movs	r3, #0
   37e70:	6363      	str	r3, [r4, #52]	; 0x34
   37e72:	89a3      	ldrh	r3, [r4, #12]
   37e74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   37e78:	81a3      	strh	r3, [r4, #12]
   37e7a:	2300      	movs	r3, #0
   37e7c:	6063      	str	r3, [r4, #4]
   37e7e:	6923      	ldr	r3, [r4, #16]
   37e80:	6023      	str	r3, [r4, #0]
   37e82:	89a3      	ldrh	r3, [r4, #12]
   37e84:	f043 0308 	orr.w	r3, r3, #8
   37e88:	81a3      	strh	r3, [r4, #12]
   37e8a:	6923      	ldr	r3, [r4, #16]
   37e8c:	b94b      	cbnz	r3, 37ea2 <__swsetup_r+0x9a>
   37e8e:	89a3      	ldrh	r3, [r4, #12]
   37e90:	f403 7320 	and.w	r3, r3, #640	; 0x280
   37e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   37e98:	d003      	beq.n	37ea2 <__swsetup_r+0x9a>
   37e9a:	4621      	mov	r1, r4
   37e9c:	4630      	mov	r0, r6
   37e9e:	f000 fbfb 	bl	38698 <__smakebuf_r>
   37ea2:	89a0      	ldrh	r0, [r4, #12]
   37ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   37ea8:	f010 0301 	ands.w	r3, r0, #1
   37eac:	d00a      	beq.n	37ec4 <__swsetup_r+0xbc>
   37eae:	2300      	movs	r3, #0
   37eb0:	60a3      	str	r3, [r4, #8]
   37eb2:	6963      	ldr	r3, [r4, #20]
   37eb4:	425b      	negs	r3, r3
   37eb6:	61a3      	str	r3, [r4, #24]
   37eb8:	6923      	ldr	r3, [r4, #16]
   37eba:	b943      	cbnz	r3, 37ece <__swsetup_r+0xc6>
   37ebc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   37ec0:	d1ba      	bne.n	37e38 <__swsetup_r+0x30>
   37ec2:	bd70      	pop	{r4, r5, r6, pc}
   37ec4:	0781      	lsls	r1, r0, #30
   37ec6:	bf58      	it	pl
   37ec8:	6963      	ldrpl	r3, [r4, #20]
   37eca:	60a3      	str	r3, [r4, #8]
   37ecc:	e7f4      	b.n	37eb8 <__swsetup_r+0xb0>
   37ece:	2000      	movs	r0, #0
   37ed0:	e7f7      	b.n	37ec2 <__swsetup_r+0xba>
   37ed2:	bf00      	nop
   37ed4:	20014878 	.word	0x20014878
   37ed8:	00040254 	.word	0x00040254
   37edc:	00040274 	.word	0x00040274
   37ee0:	00040234 	.word	0x00040234

00037ee4 <_close_r>:
   37ee4:	b538      	push	{r3, r4, r5, lr}
   37ee6:	2300      	movs	r3, #0
   37ee8:	4d05      	ldr	r5, [pc, #20]	; (37f00 <_close_r+0x1c>)
   37eea:	4604      	mov	r4, r0
   37eec:	4608      	mov	r0, r1
   37eee:	602b      	str	r3, [r5, #0]
   37ef0:	f002 fb46 	bl	3a580 <_close>
   37ef4:	1c43      	adds	r3, r0, #1
   37ef6:	d102      	bne.n	37efe <_close_r+0x1a>
   37ef8:	682b      	ldr	r3, [r5, #0]
   37efa:	b103      	cbz	r3, 37efe <_close_r+0x1a>
   37efc:	6023      	str	r3, [r4, #0]
   37efe:	bd38      	pop	{r3, r4, r5, pc}
   37f00:	2001d8e8 	.word	0x2001d8e8

00037f04 <__sflush_r>:
   37f04:	898a      	ldrh	r2, [r1, #12]
   37f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37f0a:	4605      	mov	r5, r0
   37f0c:	0710      	lsls	r0, r2, #28
   37f0e:	460c      	mov	r4, r1
   37f10:	d458      	bmi.n	37fc4 <__sflush_r+0xc0>
   37f12:	684b      	ldr	r3, [r1, #4]
   37f14:	2b00      	cmp	r3, #0
   37f16:	dc05      	bgt.n	37f24 <__sflush_r+0x20>
   37f18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   37f1a:	2b00      	cmp	r3, #0
   37f1c:	dc02      	bgt.n	37f24 <__sflush_r+0x20>
   37f1e:	2000      	movs	r0, #0
   37f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   37f26:	2e00      	cmp	r6, #0
   37f28:	d0f9      	beq.n	37f1e <__sflush_r+0x1a>
   37f2a:	2300      	movs	r3, #0
   37f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   37f30:	682f      	ldr	r7, [r5, #0]
   37f32:	602b      	str	r3, [r5, #0]
   37f34:	d032      	beq.n	37f9c <__sflush_r+0x98>
   37f36:	6d60      	ldr	r0, [r4, #84]	; 0x54
   37f38:	89a3      	ldrh	r3, [r4, #12]
   37f3a:	075a      	lsls	r2, r3, #29
   37f3c:	d505      	bpl.n	37f4a <__sflush_r+0x46>
   37f3e:	6863      	ldr	r3, [r4, #4]
   37f40:	1ac0      	subs	r0, r0, r3
   37f42:	6b63      	ldr	r3, [r4, #52]	; 0x34
   37f44:	b10b      	cbz	r3, 37f4a <__sflush_r+0x46>
   37f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
   37f48:	1ac0      	subs	r0, r0, r3
   37f4a:	2300      	movs	r3, #0
   37f4c:	4602      	mov	r2, r0
   37f4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   37f50:	4628      	mov	r0, r5
   37f52:	6a21      	ldr	r1, [r4, #32]
   37f54:	47b0      	blx	r6
   37f56:	1c43      	adds	r3, r0, #1
   37f58:	89a3      	ldrh	r3, [r4, #12]
   37f5a:	d106      	bne.n	37f6a <__sflush_r+0x66>
   37f5c:	6829      	ldr	r1, [r5, #0]
   37f5e:	291d      	cmp	r1, #29
   37f60:	d82c      	bhi.n	37fbc <__sflush_r+0xb8>
   37f62:	4a29      	ldr	r2, [pc, #164]	; (38008 <__sflush_r+0x104>)
   37f64:	40ca      	lsrs	r2, r1
   37f66:	07d6      	lsls	r6, r2, #31
   37f68:	d528      	bpl.n	37fbc <__sflush_r+0xb8>
   37f6a:	2200      	movs	r2, #0
   37f6c:	04d9      	lsls	r1, r3, #19
   37f6e:	6062      	str	r2, [r4, #4]
   37f70:	6922      	ldr	r2, [r4, #16]
   37f72:	6022      	str	r2, [r4, #0]
   37f74:	d504      	bpl.n	37f80 <__sflush_r+0x7c>
   37f76:	1c42      	adds	r2, r0, #1
   37f78:	d101      	bne.n	37f7e <__sflush_r+0x7a>
   37f7a:	682b      	ldr	r3, [r5, #0]
   37f7c:	b903      	cbnz	r3, 37f80 <__sflush_r+0x7c>
   37f7e:	6560      	str	r0, [r4, #84]	; 0x54
   37f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
   37f82:	602f      	str	r7, [r5, #0]
   37f84:	2900      	cmp	r1, #0
   37f86:	d0ca      	beq.n	37f1e <__sflush_r+0x1a>
   37f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
   37f8c:	4299      	cmp	r1, r3
   37f8e:	d002      	beq.n	37f96 <__sflush_r+0x92>
   37f90:	4628      	mov	r0, r5
   37f92:	f7fe fffd 	bl	36f90 <_free_r>
   37f96:	2000      	movs	r0, #0
   37f98:	6360      	str	r0, [r4, #52]	; 0x34
   37f9a:	e7c1      	b.n	37f20 <__sflush_r+0x1c>
   37f9c:	6a21      	ldr	r1, [r4, #32]
   37f9e:	2301      	movs	r3, #1
   37fa0:	4628      	mov	r0, r5
   37fa2:	47b0      	blx	r6
   37fa4:	1c41      	adds	r1, r0, #1
   37fa6:	d1c7      	bne.n	37f38 <__sflush_r+0x34>
   37fa8:	682b      	ldr	r3, [r5, #0]
   37faa:	2b00      	cmp	r3, #0
   37fac:	d0c4      	beq.n	37f38 <__sflush_r+0x34>
   37fae:	2b1d      	cmp	r3, #29
   37fb0:	d001      	beq.n	37fb6 <__sflush_r+0xb2>
   37fb2:	2b16      	cmp	r3, #22
   37fb4:	d101      	bne.n	37fba <__sflush_r+0xb6>
   37fb6:	602f      	str	r7, [r5, #0]
   37fb8:	e7b1      	b.n	37f1e <__sflush_r+0x1a>
   37fba:	89a3      	ldrh	r3, [r4, #12]
   37fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   37fc0:	81a3      	strh	r3, [r4, #12]
   37fc2:	e7ad      	b.n	37f20 <__sflush_r+0x1c>
   37fc4:	690f      	ldr	r7, [r1, #16]
   37fc6:	2f00      	cmp	r7, #0
   37fc8:	d0a9      	beq.n	37f1e <__sflush_r+0x1a>
   37fca:	0793      	lsls	r3, r2, #30
   37fcc:	680e      	ldr	r6, [r1, #0]
   37fce:	600f      	str	r7, [r1, #0]
   37fd0:	bf0c      	ite	eq
   37fd2:	694b      	ldreq	r3, [r1, #20]
   37fd4:	2300      	movne	r3, #0
   37fd6:	eba6 0807 	sub.w	r8, r6, r7
   37fda:	608b      	str	r3, [r1, #8]
   37fdc:	f1b8 0f00 	cmp.w	r8, #0
   37fe0:	dd9d      	ble.n	37f1e <__sflush_r+0x1a>
   37fe2:	4643      	mov	r3, r8
   37fe4:	463a      	mov	r2, r7
   37fe6:	6a21      	ldr	r1, [r4, #32]
   37fe8:	4628      	mov	r0, r5
   37fea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   37fec:	47b0      	blx	r6
   37fee:	2800      	cmp	r0, #0
   37ff0:	dc06      	bgt.n	38000 <__sflush_r+0xfc>
   37ff2:	89a3      	ldrh	r3, [r4, #12]
   37ff4:	f04f 30ff 	mov.w	r0, #4294967295
   37ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   37ffc:	81a3      	strh	r3, [r4, #12]
   37ffe:	e78f      	b.n	37f20 <__sflush_r+0x1c>
   38000:	4407      	add	r7, r0
   38002:	eba8 0800 	sub.w	r8, r8, r0
   38006:	e7e9      	b.n	37fdc <__sflush_r+0xd8>
   38008:	20400001 	.word	0x20400001

0003800c <_fflush_r>:
   3800c:	b538      	push	{r3, r4, r5, lr}
   3800e:	690b      	ldr	r3, [r1, #16]
   38010:	4605      	mov	r5, r0
   38012:	460c      	mov	r4, r1
   38014:	b913      	cbnz	r3, 3801c <_fflush_r+0x10>
   38016:	2500      	movs	r5, #0
   38018:	4628      	mov	r0, r5
   3801a:	bd38      	pop	{r3, r4, r5, pc}
   3801c:	b118      	cbz	r0, 38026 <_fflush_r+0x1a>
   3801e:	6983      	ldr	r3, [r0, #24]
   38020:	b90b      	cbnz	r3, 38026 <_fflush_r+0x1a>
   38022:	f000 f871 	bl	38108 <__sinit>
   38026:	4b14      	ldr	r3, [pc, #80]	; (38078 <_fflush_r+0x6c>)
   38028:	429c      	cmp	r4, r3
   3802a:	d11b      	bne.n	38064 <_fflush_r+0x58>
   3802c:	686c      	ldr	r4, [r5, #4]
   3802e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   38032:	2b00      	cmp	r3, #0
   38034:	d0ef      	beq.n	38016 <_fflush_r+0xa>
   38036:	6e62      	ldr	r2, [r4, #100]	; 0x64
   38038:	07d0      	lsls	r0, r2, #31
   3803a:	d404      	bmi.n	38046 <_fflush_r+0x3a>
   3803c:	0599      	lsls	r1, r3, #22
   3803e:	d402      	bmi.n	38046 <_fflush_r+0x3a>
   38040:	6da0      	ldr	r0, [r4, #88]	; 0x58
   38042:	f006 fbaa 	bl	3e79a <__retarget_lock_acquire_recursive>
   38046:	4628      	mov	r0, r5
   38048:	4621      	mov	r1, r4
   3804a:	f7ff ff5b 	bl	37f04 <__sflush_r>
   3804e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   38050:	4605      	mov	r5, r0
   38052:	07da      	lsls	r2, r3, #31
   38054:	d4e0      	bmi.n	38018 <_fflush_r+0xc>
   38056:	89a3      	ldrh	r3, [r4, #12]
   38058:	059b      	lsls	r3, r3, #22
   3805a:	d4dd      	bmi.n	38018 <_fflush_r+0xc>
   3805c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3805e:	f006 fb9d 	bl	3e79c <__retarget_lock_release_recursive>
   38062:	e7d9      	b.n	38018 <_fflush_r+0xc>
   38064:	4b05      	ldr	r3, [pc, #20]	; (3807c <_fflush_r+0x70>)
   38066:	429c      	cmp	r4, r3
   38068:	d101      	bne.n	3806e <_fflush_r+0x62>
   3806a:	68ac      	ldr	r4, [r5, #8]
   3806c:	e7df      	b.n	3802e <_fflush_r+0x22>
   3806e:	4b04      	ldr	r3, [pc, #16]	; (38080 <_fflush_r+0x74>)
   38070:	429c      	cmp	r4, r3
   38072:	bf08      	it	eq
   38074:	68ec      	ldreq	r4, [r5, #12]
   38076:	e7da      	b.n	3802e <_fflush_r+0x22>
   38078:	00040254 	.word	0x00040254
   3807c:	00040274 	.word	0x00040274
   38080:	00040234 	.word	0x00040234

00038084 <std>:
   38084:	2300      	movs	r3, #0
   38086:	b510      	push	{r4, lr}
   38088:	4604      	mov	r4, r0
   3808a:	6083      	str	r3, [r0, #8]
   3808c:	8181      	strh	r1, [r0, #12]
   3808e:	4619      	mov	r1, r3
   38090:	6643      	str	r3, [r0, #100]	; 0x64
   38092:	81c2      	strh	r2, [r0, #14]
   38094:	2208      	movs	r2, #8
   38096:	6183      	str	r3, [r0, #24]
   38098:	e9c0 3300 	strd	r3, r3, [r0]
   3809c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   380a0:	305c      	adds	r0, #92	; 0x5c
   380a2:	f005 ff82 	bl	3dfaa <memset>
   380a6:	4b05      	ldr	r3, [pc, #20]	; (380bc <std+0x38>)
   380a8:	6224      	str	r4, [r4, #32]
   380aa:	6263      	str	r3, [r4, #36]	; 0x24
   380ac:	4b04      	ldr	r3, [pc, #16]	; (380c0 <std+0x3c>)
   380ae:	62a3      	str	r3, [r4, #40]	; 0x28
   380b0:	4b04      	ldr	r3, [pc, #16]	; (380c4 <std+0x40>)
   380b2:	62e3      	str	r3, [r4, #44]	; 0x2c
   380b4:	4b04      	ldr	r3, [pc, #16]	; (380c8 <std+0x44>)
   380b6:	6323      	str	r3, [r4, #48]	; 0x30
   380b8:	bd10      	pop	{r4, pc}
   380ba:	bf00      	nop
   380bc:	0003e22d 	.word	0x0003e22d
   380c0:	0003e253 	.word	0x0003e253
   380c4:	0003e28b 	.word	0x0003e28b
   380c8:	0003e2af 	.word	0x0003e2af

000380cc <_cleanup_r>:
   380cc:	4901      	ldr	r1, [pc, #4]	; (380d4 <_cleanup_r+0x8>)
   380ce:	f006 ba1c 	b.w	3e50a <_fwalk_reent>
   380d2:	bf00      	nop
   380d4:	0003800d 	.word	0x0003800d

000380d8 <__sfp_lock_acquire>:
   380d8:	4801      	ldr	r0, [pc, #4]	; (380e0 <__sfp_lock_acquire+0x8>)
   380da:	f006 bb5e 	b.w	3e79a <__retarget_lock_acquire_recursive>
   380de:	bf00      	nop
   380e0:	2001d8f4 	.word	0x2001d8f4

000380e4 <__sfp_lock_release>:
   380e4:	4801      	ldr	r0, [pc, #4]	; (380ec <__sfp_lock_release+0x8>)
   380e6:	f006 bb59 	b.w	3e79c <__retarget_lock_release_recursive>
   380ea:	bf00      	nop
   380ec:	2001d8f4 	.word	0x2001d8f4

000380f0 <__sinit_lock_acquire>:
   380f0:	4801      	ldr	r0, [pc, #4]	; (380f8 <__sinit_lock_acquire+0x8>)
   380f2:	f006 bb52 	b.w	3e79a <__retarget_lock_acquire_recursive>
   380f6:	bf00      	nop
   380f8:	2001d8ef 	.word	0x2001d8ef

000380fc <__sinit_lock_release>:
   380fc:	4801      	ldr	r0, [pc, #4]	; (38104 <__sinit_lock_release+0x8>)
   380fe:	f006 bb4d 	b.w	3e79c <__retarget_lock_release_recursive>
   38102:	bf00      	nop
   38104:	2001d8ef 	.word	0x2001d8ef

00038108 <__sinit>:
   38108:	b510      	push	{r4, lr}
   3810a:	4604      	mov	r4, r0
   3810c:	f7ff fff0 	bl	380f0 <__sinit_lock_acquire>
   38110:	69a3      	ldr	r3, [r4, #24]
   38112:	b11b      	cbz	r3, 3811c <__sinit+0x14>
   38114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   38118:	f7ff bff0 	b.w	380fc <__sinit_lock_release>
   3811c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   38120:	6523      	str	r3, [r4, #80]	; 0x50
   38122:	4620      	mov	r0, r4
   38124:	4b12      	ldr	r3, [pc, #72]	; (38170 <__sinit+0x68>)
   38126:	4a13      	ldr	r2, [pc, #76]	; (38174 <__sinit+0x6c>)
   38128:	681b      	ldr	r3, [r3, #0]
   3812a:	62a2      	str	r2, [r4, #40]	; 0x28
   3812c:	42a3      	cmp	r3, r4
   3812e:	bf04      	itt	eq
   38130:	2301      	moveq	r3, #1
   38132:	61a3      	streq	r3, [r4, #24]
   38134:	f000 f820 	bl	38178 <__sfp>
   38138:	6060      	str	r0, [r4, #4]
   3813a:	4620      	mov	r0, r4
   3813c:	f000 f81c 	bl	38178 <__sfp>
   38140:	60a0      	str	r0, [r4, #8]
   38142:	4620      	mov	r0, r4
   38144:	f000 f818 	bl	38178 <__sfp>
   38148:	2200      	movs	r2, #0
   3814a:	2104      	movs	r1, #4
   3814c:	60e0      	str	r0, [r4, #12]
   3814e:	6860      	ldr	r0, [r4, #4]
   38150:	f7ff ff98 	bl	38084 <std>
   38154:	2201      	movs	r2, #1
   38156:	2109      	movs	r1, #9
   38158:	68a0      	ldr	r0, [r4, #8]
   3815a:	f7ff ff93 	bl	38084 <std>
   3815e:	2202      	movs	r2, #2
   38160:	2112      	movs	r1, #18
   38162:	68e0      	ldr	r0, [r4, #12]
   38164:	f7ff ff8e 	bl	38084 <std>
   38168:	2301      	movs	r3, #1
   3816a:	61a3      	str	r3, [r4, #24]
   3816c:	e7d2      	b.n	38114 <__sinit+0xc>
   3816e:	bf00      	nop
   38170:	00040208 	.word	0x00040208
   38174:	000380cd 	.word	0x000380cd

00038178 <__sfp>:
   38178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3817a:	4607      	mov	r7, r0
   3817c:	f7ff ffac 	bl	380d8 <__sfp_lock_acquire>
   38180:	4b1e      	ldr	r3, [pc, #120]	; (381fc <__sfp+0x84>)
   38182:	681e      	ldr	r6, [r3, #0]
   38184:	69b3      	ldr	r3, [r6, #24]
   38186:	b913      	cbnz	r3, 3818e <__sfp+0x16>
   38188:	4630      	mov	r0, r6
   3818a:	f7ff ffbd 	bl	38108 <__sinit>
   3818e:	3648      	adds	r6, #72	; 0x48
   38190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   38194:	3b01      	subs	r3, #1
   38196:	d503      	bpl.n	381a0 <__sfp+0x28>
   38198:	6833      	ldr	r3, [r6, #0]
   3819a:	b30b      	cbz	r3, 381e0 <__sfp+0x68>
   3819c:	6836      	ldr	r6, [r6, #0]
   3819e:	e7f7      	b.n	38190 <__sfp+0x18>
   381a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   381a4:	b9d5      	cbnz	r5, 381dc <__sfp+0x64>
   381a6:	4b16      	ldr	r3, [pc, #88]	; (38200 <__sfp+0x88>)
   381a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   381ac:	6665      	str	r5, [r4, #100]	; 0x64
   381ae:	60e3      	str	r3, [r4, #12]
   381b0:	f006 faf2 	bl	3e798 <__retarget_lock_init_recursive>
   381b4:	f7ff ff96 	bl	380e4 <__sfp_lock_release>
   381b8:	2208      	movs	r2, #8
   381ba:	4629      	mov	r1, r5
   381bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   381c0:	6025      	str	r5, [r4, #0]
   381c2:	61a5      	str	r5, [r4, #24]
   381c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   381c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
   381cc:	f005 feed 	bl	3dfaa <memset>
   381d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   381d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   381d8:	4620      	mov	r0, r4
   381da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   381dc:	3468      	adds	r4, #104	; 0x68
   381de:	e7d9      	b.n	38194 <__sfp+0x1c>
   381e0:	2104      	movs	r1, #4
   381e2:	4638      	mov	r0, r7
   381e4:	f006 f97b 	bl	3e4de <__sfmoreglue>
   381e8:	4604      	mov	r4, r0
   381ea:	6030      	str	r0, [r6, #0]
   381ec:	2800      	cmp	r0, #0
   381ee:	d1d5      	bne.n	3819c <__sfp+0x24>
   381f0:	f7ff ff78 	bl	380e4 <__sfp_lock_release>
   381f4:	230c      	movs	r3, #12
   381f6:	603b      	str	r3, [r7, #0]
   381f8:	e7ee      	b.n	381d8 <__sfp+0x60>
   381fa:	bf00      	nop
   381fc:	00040208 	.word	0x00040208
   38200:	ffff0001 	.word	0xffff0001

00038204 <__gethex>:
   38204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38208:	ed2d 8b02 	vpush	{d8}
   3820c:	b089      	sub	sp, #36	; 0x24
   3820e:	ee08 0a10 	vmov	s16, r0
   38212:	468b      	mov	fp, r1
   38214:	4690      	mov	r8, r2
   38216:	9304      	str	r3, [sp, #16]
   38218:	4bbb      	ldr	r3, [pc, #748]	; (38508 <__gethex+0x304>)
   3821a:	681b      	ldr	r3, [r3, #0]
   3821c:	4618      	mov	r0, r3
   3821e:	9301      	str	r3, [sp, #4]
   38220:	f7e5 f81c 	bl	1d25c <strlen>
   38224:	9b01      	ldr	r3, [sp, #4]
   38226:	f8db 2000 	ldr.w	r2, [fp]
   3822a:	4682      	mov	sl, r0
   3822c:	4403      	add	r3, r0
   3822e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   38232:	9305      	str	r3, [sp, #20]
   38234:	1c93      	adds	r3, r2, #2
   38236:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3823a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   3823e:	32fe      	adds	r2, #254	; 0xfe
   38240:	18d1      	adds	r1, r2, r3
   38242:	461f      	mov	r7, r3
   38244:	f813 0b01 	ldrb.w	r0, [r3], #1
   38248:	9100      	str	r1, [sp, #0]
   3824a:	2830      	cmp	r0, #48	; 0x30
   3824c:	d0f8      	beq.n	38240 <__gethex+0x3c>
   3824e:	f006 f9cc 	bl	3e5ea <__hexdig_fun>
   38252:	4604      	mov	r4, r0
   38254:	2800      	cmp	r0, #0
   38256:	d139      	bne.n	382cc <__gethex+0xc8>
   38258:	4652      	mov	r2, sl
   3825a:	9901      	ldr	r1, [sp, #4]
   3825c:	4638      	mov	r0, r7
   3825e:	f006 f83f 	bl	3e2e0 <strncmp>
   38262:	4605      	mov	r5, r0
   38264:	2800      	cmp	r0, #0
   38266:	d167      	bne.n	38338 <__gethex+0x134>
   38268:	f817 000a 	ldrb.w	r0, [r7, sl]
   3826c:	eb07 060a 	add.w	r6, r7, sl
   38270:	f006 f9bb 	bl	3e5ea <__hexdig_fun>
   38274:	2800      	cmp	r0, #0
   38276:	d061      	beq.n	3833c <__gethex+0x138>
   38278:	4633      	mov	r3, r6
   3827a:	7818      	ldrb	r0, [r3, #0]
   3827c:	461f      	mov	r7, r3
   3827e:	3301      	adds	r3, #1
   38280:	2830      	cmp	r0, #48	; 0x30
   38282:	d0fa      	beq.n	3827a <__gethex+0x76>
   38284:	f006 f9b1 	bl	3e5ea <__hexdig_fun>
   38288:	fab0 f480 	clz	r4, r0
   3828c:	2301      	movs	r3, #1
   3828e:	4635      	mov	r5, r6
   38290:	0964      	lsrs	r4, r4, #5
   38292:	9300      	str	r3, [sp, #0]
   38294:	463a      	mov	r2, r7
   38296:	4616      	mov	r6, r2
   38298:	3201      	adds	r2, #1
   3829a:	7830      	ldrb	r0, [r6, #0]
   3829c:	f006 f9a5 	bl	3e5ea <__hexdig_fun>
   382a0:	2800      	cmp	r0, #0
   382a2:	d1f8      	bne.n	38296 <__gethex+0x92>
   382a4:	4652      	mov	r2, sl
   382a6:	9901      	ldr	r1, [sp, #4]
   382a8:	4630      	mov	r0, r6
   382aa:	f006 f819 	bl	3e2e0 <strncmp>
   382ae:	b980      	cbnz	r0, 382d2 <__gethex+0xce>
   382b0:	b94d      	cbnz	r5, 382c6 <__gethex+0xc2>
   382b2:	eb06 050a 	add.w	r5, r6, sl
   382b6:	462a      	mov	r2, r5
   382b8:	4616      	mov	r6, r2
   382ba:	3201      	adds	r2, #1
   382bc:	7830      	ldrb	r0, [r6, #0]
   382be:	f006 f994 	bl	3e5ea <__hexdig_fun>
   382c2:	2800      	cmp	r0, #0
   382c4:	d1f8      	bne.n	382b8 <__gethex+0xb4>
   382c6:	1bad      	subs	r5, r5, r6
   382c8:	00ad      	lsls	r5, r5, #2
   382ca:	e004      	b.n	382d6 <__gethex+0xd2>
   382cc:	2400      	movs	r4, #0
   382ce:	4625      	mov	r5, r4
   382d0:	e7e0      	b.n	38294 <__gethex+0x90>
   382d2:	2d00      	cmp	r5, #0
   382d4:	d1f7      	bne.n	382c6 <__gethex+0xc2>
   382d6:	7833      	ldrb	r3, [r6, #0]
   382d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   382dc:	2b50      	cmp	r3, #80	; 0x50
   382de:	d13b      	bne.n	38358 <__gethex+0x154>
   382e0:	7873      	ldrb	r3, [r6, #1]
   382e2:	2b2b      	cmp	r3, #43	; 0x2b
   382e4:	d02c      	beq.n	38340 <__gethex+0x13c>
   382e6:	2b2d      	cmp	r3, #45	; 0x2d
   382e8:	d02e      	beq.n	38348 <__gethex+0x144>
   382ea:	1c71      	adds	r1, r6, #1
   382ec:	f04f 0900 	mov.w	r9, #0
   382f0:	7808      	ldrb	r0, [r1, #0]
   382f2:	f006 f97a 	bl	3e5ea <__hexdig_fun>
   382f6:	1e43      	subs	r3, r0, #1
   382f8:	b2db      	uxtb	r3, r3
   382fa:	2b18      	cmp	r3, #24
   382fc:	d82c      	bhi.n	38358 <__gethex+0x154>
   382fe:	f1a0 0210 	sub.w	r2, r0, #16
   38302:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   38306:	f006 f970 	bl	3e5ea <__hexdig_fun>
   3830a:	1e43      	subs	r3, r0, #1
   3830c:	b2db      	uxtb	r3, r3
   3830e:	2b18      	cmp	r3, #24
   38310:	d91d      	bls.n	3834e <__gethex+0x14a>
   38312:	f1b9 0f00 	cmp.w	r9, #0
   38316:	d000      	beq.n	3831a <__gethex+0x116>
   38318:	4252      	negs	r2, r2
   3831a:	4415      	add	r5, r2
   3831c:	f8cb 1000 	str.w	r1, [fp]
   38320:	b1e4      	cbz	r4, 3835c <__gethex+0x158>
   38322:	9b00      	ldr	r3, [sp, #0]
   38324:	2b00      	cmp	r3, #0
   38326:	bf14      	ite	ne
   38328:	2700      	movne	r7, #0
   3832a:	2706      	moveq	r7, #6
   3832c:	4638      	mov	r0, r7
   3832e:	b009      	add	sp, #36	; 0x24
   38330:	ecbd 8b02 	vpop	{d8}
   38334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38338:	463e      	mov	r6, r7
   3833a:	4625      	mov	r5, r4
   3833c:	2401      	movs	r4, #1
   3833e:	e7ca      	b.n	382d6 <__gethex+0xd2>
   38340:	f04f 0900 	mov.w	r9, #0
   38344:	1cb1      	adds	r1, r6, #2
   38346:	e7d3      	b.n	382f0 <__gethex+0xec>
   38348:	f04f 0901 	mov.w	r9, #1
   3834c:	e7fa      	b.n	38344 <__gethex+0x140>
   3834e:	230a      	movs	r3, #10
   38350:	fb03 0202 	mla	r2, r3, r2, r0
   38354:	3a10      	subs	r2, #16
   38356:	e7d4      	b.n	38302 <__gethex+0xfe>
   38358:	4631      	mov	r1, r6
   3835a:	e7df      	b.n	3831c <__gethex+0x118>
   3835c:	1bf3      	subs	r3, r6, r7
   3835e:	4621      	mov	r1, r4
   38360:	3b01      	subs	r3, #1
   38362:	2b07      	cmp	r3, #7
   38364:	dc52      	bgt.n	3840c <__gethex+0x208>
   38366:	ee18 0a10 	vmov	r0, s16
   3836a:	f04f 0b00 	mov.w	fp, #0
   3836e:	f006 fa66 	bl	3e83e <_Balloc>
   38372:	f1ca 0301 	rsb	r3, sl, #1
   38376:	f100 0914 	add.w	r9, r0, #20
   3837a:	4604      	mov	r4, r0
   3837c:	f8cd b000 	str.w	fp, [sp]
   38380:	f8cd 9008 	str.w	r9, [sp, #8]
   38384:	9306      	str	r3, [sp, #24]
   38386:	42b7      	cmp	r7, r6
   38388:	d343      	bcc.n	38412 <__gethex+0x20e>
   3838a:	9802      	ldr	r0, [sp, #8]
   3838c:	9b00      	ldr	r3, [sp, #0]
   3838e:	f840 3b04 	str.w	r3, [r0], #4
   38392:	eba0 0009 	sub.w	r0, r0, r9
   38396:	1080      	asrs	r0, r0, #2
   38398:	0146      	lsls	r6, r0, #5
   3839a:	6120      	str	r0, [r4, #16]
   3839c:	4618      	mov	r0, r3
   3839e:	f006 fb16 	bl	3e9ce <__hi0bits>
   383a2:	1a30      	subs	r0, r6, r0
   383a4:	f8d8 6000 	ldr.w	r6, [r8]
   383a8:	42b0      	cmp	r0, r6
   383aa:	dd66      	ble.n	3847a <__gethex+0x276>
   383ac:	1b87      	subs	r7, r0, r6
   383ae:	4620      	mov	r0, r4
   383b0:	4639      	mov	r1, r7
   383b2:	f006 fd9e 	bl	3eef2 <__any_on>
   383b6:	4682      	mov	sl, r0
   383b8:	b1a8      	cbz	r0, 383e6 <__gethex+0x1e2>
   383ba:	1e7b      	subs	r3, r7, #1
   383bc:	f04f 0a01 	mov.w	sl, #1
   383c0:	1159      	asrs	r1, r3, #5
   383c2:	f003 021f 	and.w	r2, r3, #31
   383c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   383ca:	fa0a f202 	lsl.w	r2, sl, r2
   383ce:	420a      	tst	r2, r1
   383d0:	d009      	beq.n	383e6 <__gethex+0x1e2>
   383d2:	4553      	cmp	r3, sl
   383d4:	dd05      	ble.n	383e2 <__gethex+0x1de>
   383d6:	1eb9      	subs	r1, r7, #2
   383d8:	4620      	mov	r0, r4
   383da:	f006 fd8a 	bl	3eef2 <__any_on>
   383de:	2800      	cmp	r0, #0
   383e0:	d148      	bne.n	38474 <__gethex+0x270>
   383e2:	f04f 0a02 	mov.w	sl, #2
   383e6:	443d      	add	r5, r7
   383e8:	4639      	mov	r1, r7
   383ea:	4620      	mov	r0, r4
   383ec:	f006 f8ac 	bl	3e548 <rshift>
   383f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   383f4:	42ab      	cmp	r3, r5
   383f6:	da4f      	bge.n	38498 <__gethex+0x294>
   383f8:	4621      	mov	r1, r4
   383fa:	ee18 0a10 	vmov	r0, s16
   383fe:	f006 fa52 	bl	3e8a6 <_Bfree>
   38402:	2300      	movs	r3, #0
   38404:	9a14      	ldr	r2, [sp, #80]	; 0x50
   38406:	27a3      	movs	r7, #163	; 0xa3
   38408:	6013      	str	r3, [r2, #0]
   3840a:	e78f      	b.n	3832c <__gethex+0x128>
   3840c:	3101      	adds	r1, #1
   3840e:	105b      	asrs	r3, r3, #1
   38410:	e7a7      	b.n	38362 <__gethex+0x15e>
   38412:	1e73      	subs	r3, r6, #1
   38414:	9a05      	ldr	r2, [sp, #20]
   38416:	9303      	str	r3, [sp, #12]
   38418:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   3841c:	4293      	cmp	r3, r2
   3841e:	d019      	beq.n	38454 <__gethex+0x250>
   38420:	f1bb 0f20 	cmp.w	fp, #32
   38424:	d107      	bne.n	38436 <__gethex+0x232>
   38426:	9b02      	ldr	r3, [sp, #8]
   38428:	9a00      	ldr	r2, [sp, #0]
   3842a:	f843 2b04 	str.w	r2, [r3], #4
   3842e:	9302      	str	r3, [sp, #8]
   38430:	2300      	movs	r3, #0
   38432:	469b      	mov	fp, r3
   38434:	9300      	str	r3, [sp, #0]
   38436:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   3843a:	f006 f8d6 	bl	3e5ea <__hexdig_fun>
   3843e:	f000 000f 	and.w	r0, r0, #15
   38442:	9b00      	ldr	r3, [sp, #0]
   38444:	fa00 f00b 	lsl.w	r0, r0, fp
   38448:	f10b 0b04 	add.w	fp, fp, #4
   3844c:	4303      	orrs	r3, r0
   3844e:	9300      	str	r3, [sp, #0]
   38450:	9b03      	ldr	r3, [sp, #12]
   38452:	e00d      	b.n	38470 <__gethex+0x26c>
   38454:	9b03      	ldr	r3, [sp, #12]
   38456:	9a06      	ldr	r2, [sp, #24]
   38458:	4413      	add	r3, r2
   3845a:	42bb      	cmp	r3, r7
   3845c:	d3e0      	bcc.n	38420 <__gethex+0x21c>
   3845e:	4618      	mov	r0, r3
   38460:	4652      	mov	r2, sl
   38462:	9901      	ldr	r1, [sp, #4]
   38464:	9307      	str	r3, [sp, #28]
   38466:	f005 ff3b 	bl	3e2e0 <strncmp>
   3846a:	9b07      	ldr	r3, [sp, #28]
   3846c:	2800      	cmp	r0, #0
   3846e:	d1d7      	bne.n	38420 <__gethex+0x21c>
   38470:	461e      	mov	r6, r3
   38472:	e788      	b.n	38386 <__gethex+0x182>
   38474:	f04f 0a03 	mov.w	sl, #3
   38478:	e7b5      	b.n	383e6 <__gethex+0x1e2>
   3847a:	da0a      	bge.n	38492 <__gethex+0x28e>
   3847c:	1a37      	subs	r7, r6, r0
   3847e:	4621      	mov	r1, r4
   38480:	ee18 0a10 	vmov	r0, s16
   38484:	463a      	mov	r2, r7
   38486:	1bed      	subs	r5, r5, r7
   38488:	f006 fb95 	bl	3ebb6 <__lshift>
   3848c:	4604      	mov	r4, r0
   3848e:	f100 0914 	add.w	r9, r0, #20
   38492:	f04f 0a00 	mov.w	sl, #0
   38496:	e7ab      	b.n	383f0 <__gethex+0x1ec>
   38498:	f8d8 0004 	ldr.w	r0, [r8, #4]
   3849c:	42a8      	cmp	r0, r5
   3849e:	dd6f      	ble.n	38580 <__gethex+0x37c>
   384a0:	1b45      	subs	r5, r0, r5
   384a2:	42ae      	cmp	r6, r5
   384a4:	dc32      	bgt.n	3850c <__gethex+0x308>
   384a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   384aa:	2b02      	cmp	r3, #2
   384ac:	d023      	beq.n	384f6 <__gethex+0x2f2>
   384ae:	2b03      	cmp	r3, #3
   384b0:	d025      	beq.n	384fe <__gethex+0x2fa>
   384b2:	2b01      	cmp	r3, #1
   384b4:	d115      	bne.n	384e2 <__gethex+0x2de>
   384b6:	42ae      	cmp	r6, r5
   384b8:	d113      	bne.n	384e2 <__gethex+0x2de>
   384ba:	2e01      	cmp	r6, #1
   384bc:	d10b      	bne.n	384d6 <__gethex+0x2d2>
   384be:	f8d8 3004 	ldr.w	r3, [r8, #4]
   384c2:	2762      	movs	r7, #98	; 0x62
   384c4:	9a04      	ldr	r2, [sp, #16]
   384c6:	6013      	str	r3, [r2, #0]
   384c8:	2301      	movs	r3, #1
   384ca:	6123      	str	r3, [r4, #16]
   384cc:	f8c9 3000 	str.w	r3, [r9]
   384d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   384d2:	601c      	str	r4, [r3, #0]
   384d4:	e72a      	b.n	3832c <__gethex+0x128>
   384d6:	1e71      	subs	r1, r6, #1
   384d8:	4620      	mov	r0, r4
   384da:	f006 fd0a 	bl	3eef2 <__any_on>
   384de:	2800      	cmp	r0, #0
   384e0:	d1ed      	bne.n	384be <__gethex+0x2ba>
   384e2:	4621      	mov	r1, r4
   384e4:	ee18 0a10 	vmov	r0, s16
   384e8:	f006 f9dd 	bl	3e8a6 <_Bfree>
   384ec:	2300      	movs	r3, #0
   384ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   384f0:	2750      	movs	r7, #80	; 0x50
   384f2:	6013      	str	r3, [r2, #0]
   384f4:	e71a      	b.n	3832c <__gethex+0x128>
   384f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   384f8:	2b00      	cmp	r3, #0
   384fa:	d1f2      	bne.n	384e2 <__gethex+0x2de>
   384fc:	e7df      	b.n	384be <__gethex+0x2ba>
   384fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   38500:	2b00      	cmp	r3, #0
   38502:	d1dc      	bne.n	384be <__gethex+0x2ba>
   38504:	e7ed      	b.n	384e2 <__gethex+0x2de>
   38506:	bf00      	nop
   38508:	00040294 	.word	0x00040294
   3850c:	1e6f      	subs	r7, r5, #1
   3850e:	f1ba 0f00 	cmp.w	sl, #0
   38512:	d132      	bne.n	3857a <__gethex+0x376>
   38514:	b127      	cbz	r7, 38520 <__gethex+0x31c>
   38516:	4639      	mov	r1, r7
   38518:	4620      	mov	r0, r4
   3851a:	f006 fcea 	bl	3eef2 <__any_on>
   3851e:	4682      	mov	sl, r0
   38520:	117b      	asrs	r3, r7, #5
   38522:	2101      	movs	r1, #1
   38524:	f007 071f 	and.w	r7, r7, #31
   38528:	4620      	mov	r0, r4
   3852a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   3852e:	1b76      	subs	r6, r6, r5
   38530:	fa01 f707 	lsl.w	r7, r1, r7
   38534:	4629      	mov	r1, r5
   38536:	421f      	tst	r7, r3
   38538:	f04f 0702 	mov.w	r7, #2
   3853c:	bf18      	it	ne
   3853e:	f04a 0a02 	orrne.w	sl, sl, #2
   38542:	f006 f801 	bl	3e548 <rshift>
   38546:	f8d8 5004 	ldr.w	r5, [r8, #4]
   3854a:	f1ba 0f00 	cmp.w	sl, #0
   3854e:	d048      	beq.n	385e2 <__gethex+0x3de>
   38550:	f8d8 300c 	ldr.w	r3, [r8, #12]
   38554:	2b02      	cmp	r3, #2
   38556:	d015      	beq.n	38584 <__gethex+0x380>
   38558:	2b03      	cmp	r3, #3
   3855a:	d017      	beq.n	3858c <__gethex+0x388>
   3855c:	2b01      	cmp	r3, #1
   3855e:	d109      	bne.n	38574 <__gethex+0x370>
   38560:	f01a 0f02 	tst.w	sl, #2
   38564:	d006      	beq.n	38574 <__gethex+0x370>
   38566:	f8d9 0000 	ldr.w	r0, [r9]
   3856a:	ea4a 0a00 	orr.w	sl, sl, r0
   3856e:	f01a 0f01 	tst.w	sl, #1
   38572:	d10e      	bne.n	38592 <__gethex+0x38e>
   38574:	f047 0710 	orr.w	r7, r7, #16
   38578:	e033      	b.n	385e2 <__gethex+0x3de>
   3857a:	f04f 0a01 	mov.w	sl, #1
   3857e:	e7cf      	b.n	38520 <__gethex+0x31c>
   38580:	2701      	movs	r7, #1
   38582:	e7e2      	b.n	3854a <__gethex+0x346>
   38584:	9b15      	ldr	r3, [sp, #84]	; 0x54
   38586:	f1c3 0301 	rsb	r3, r3, #1
   3858a:	9315      	str	r3, [sp, #84]	; 0x54
   3858c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3858e:	2b00      	cmp	r3, #0
   38590:	d0f0      	beq.n	38574 <__gethex+0x370>
   38592:	f8d4 9010 	ldr.w	r9, [r4, #16]
   38596:	f104 0314 	add.w	r3, r4, #20
   3859a:	f04f 0c00 	mov.w	ip, #0
   3859e:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   385a2:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   385a6:	4618      	mov	r0, r3
   385a8:	f853 2b04 	ldr.w	r2, [r3], #4
   385ac:	f1b2 3fff 	cmp.w	r2, #4294967295
   385b0:	d01c      	beq.n	385ec <__gethex+0x3e8>
   385b2:	3201      	adds	r2, #1
   385b4:	6002      	str	r2, [r0, #0]
   385b6:	2f02      	cmp	r7, #2
   385b8:	f104 0314 	add.w	r3, r4, #20
   385bc:	d13a      	bne.n	38634 <__gethex+0x430>
   385be:	f8d8 2000 	ldr.w	r2, [r8]
   385c2:	3a01      	subs	r2, #1
   385c4:	42b2      	cmp	r2, r6
   385c6:	d10a      	bne.n	385de <__gethex+0x3da>
   385c8:	1171      	asrs	r1, r6, #5
   385ca:	2201      	movs	r2, #1
   385cc:	f006 061f 	and.w	r6, r6, #31
   385d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   385d4:	fa02 f606 	lsl.w	r6, r2, r6
   385d8:	421e      	tst	r6, r3
   385da:	bf18      	it	ne
   385dc:	4617      	movne	r7, r2
   385de:	f047 0720 	orr.w	r7, r7, #32
   385e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   385e4:	601c      	str	r4, [r3, #0]
   385e6:	9b04      	ldr	r3, [sp, #16]
   385e8:	601d      	str	r5, [r3, #0]
   385ea:	e69f      	b.n	3832c <__gethex+0x128>
   385ec:	4299      	cmp	r1, r3
   385ee:	f843 cc04 	str.w	ip, [r3, #-4]
   385f2:	d8d8      	bhi.n	385a6 <__gethex+0x3a2>
   385f4:	68a3      	ldr	r3, [r4, #8]
   385f6:	4599      	cmp	r9, r3
   385f8:	db14      	blt.n	38624 <__gethex+0x420>
   385fa:	6861      	ldr	r1, [r4, #4]
   385fc:	ee18 0a10 	vmov	r0, s16
   38600:	3101      	adds	r1, #1
   38602:	f006 f91c 	bl	3e83e <_Balloc>
   38606:	6922      	ldr	r2, [r4, #16]
   38608:	4682      	mov	sl, r0
   3860a:	f104 010c 	add.w	r1, r4, #12
   3860e:	3202      	adds	r2, #2
   38610:	300c      	adds	r0, #12
   38612:	0092      	lsls	r2, r2, #2
   38614:	f005 fca9 	bl	3df6a <memcpy>
   38618:	4621      	mov	r1, r4
   3861a:	4654      	mov	r4, sl
   3861c:	ee18 0a10 	vmov	r0, s16
   38620:	f006 f941 	bl	3e8a6 <_Bfree>
   38624:	6923      	ldr	r3, [r4, #16]
   38626:	1c5a      	adds	r2, r3, #1
   38628:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3862c:	6122      	str	r2, [r4, #16]
   3862e:	2201      	movs	r2, #1
   38630:	615a      	str	r2, [r3, #20]
   38632:	e7c0      	b.n	385b6 <__gethex+0x3b2>
   38634:	6922      	ldr	r2, [r4, #16]
   38636:	454a      	cmp	r2, r9
   38638:	dd0b      	ble.n	38652 <__gethex+0x44e>
   3863a:	2101      	movs	r1, #1
   3863c:	4620      	mov	r0, r4
   3863e:	f005 ff83 	bl	3e548 <rshift>
   38642:	3501      	adds	r5, #1
   38644:	f8d8 3008 	ldr.w	r3, [r8, #8]
   38648:	42ab      	cmp	r3, r5
   3864a:	f6ff aed5 	blt.w	383f8 <__gethex+0x1f4>
   3864e:	2701      	movs	r7, #1
   38650:	e7c5      	b.n	385de <__gethex+0x3da>
   38652:	f016 061f 	ands.w	r6, r6, #31
   38656:	d0fa      	beq.n	3864e <__gethex+0x44a>
   38658:	449b      	add	fp, r3
   3865a:	f1c6 0620 	rsb	r6, r6, #32
   3865e:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   38662:	f006 f9b4 	bl	3e9ce <__hi0bits>
   38666:	42b0      	cmp	r0, r6
   38668:	dbe7      	blt.n	3863a <__gethex+0x436>
   3866a:	e7f0      	b.n	3864e <__gethex+0x44a>

0003866c <_localeconv_r>:
   3866c:	4800      	ldr	r0, [pc, #0]	; (38670 <_localeconv_r+0x4>)
   3866e:	4770      	bx	lr
   38670:	200149cc 	.word	0x200149cc

00038674 <_lseek_r>:
   38674:	b538      	push	{r3, r4, r5, lr}
   38676:	4604      	mov	r4, r0
   38678:	4d06      	ldr	r5, [pc, #24]	; (38694 <_lseek_r+0x20>)
   3867a:	4608      	mov	r0, r1
   3867c:	4611      	mov	r1, r2
   3867e:	2200      	movs	r2, #0
   38680:	602a      	str	r2, [r5, #0]
   38682:	461a      	mov	r2, r3
   38684:	f001 ff7f 	bl	3a586 <_lseek>
   38688:	1c43      	adds	r3, r0, #1
   3868a:	d102      	bne.n	38692 <_lseek_r+0x1e>
   3868c:	682b      	ldr	r3, [r5, #0]
   3868e:	b103      	cbz	r3, 38692 <_lseek_r+0x1e>
   38690:	6023      	str	r3, [r4, #0]
   38692:	bd38      	pop	{r3, r4, r5, pc}
   38694:	2001d8e8 	.word	0x2001d8e8

00038698 <__smakebuf_r>:
   38698:	898b      	ldrh	r3, [r1, #12]
   3869a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3869c:	079d      	lsls	r5, r3, #30
   3869e:	4606      	mov	r6, r0
   386a0:	460c      	mov	r4, r1
   386a2:	d507      	bpl.n	386b4 <__smakebuf_r+0x1c>
   386a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
   386a8:	6023      	str	r3, [r4, #0]
   386aa:	6123      	str	r3, [r4, #16]
   386ac:	2301      	movs	r3, #1
   386ae:	6163      	str	r3, [r4, #20]
   386b0:	b002      	add	sp, #8
   386b2:	bd70      	pop	{r4, r5, r6, pc}
   386b4:	ab01      	add	r3, sp, #4
   386b6:	466a      	mov	r2, sp
   386b8:	f006 f871 	bl	3e79e <__swhatbuf_r>
   386bc:	9900      	ldr	r1, [sp, #0]
   386be:	4605      	mov	r5, r0
   386c0:	4630      	mov	r0, r6
   386c2:	f7fe fcb5 	bl	37030 <_malloc_r>
   386c6:	b948      	cbnz	r0, 386dc <__smakebuf_r+0x44>
   386c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   386cc:	059a      	lsls	r2, r3, #22
   386ce:	d4ef      	bmi.n	386b0 <__smakebuf_r+0x18>
   386d0:	f023 0303 	bic.w	r3, r3, #3
   386d4:	f043 0302 	orr.w	r3, r3, #2
   386d8:	81a3      	strh	r3, [r4, #12]
   386da:	e7e3      	b.n	386a4 <__smakebuf_r+0xc>
   386dc:	4b0d      	ldr	r3, [pc, #52]	; (38714 <__smakebuf_r+0x7c>)
   386de:	62b3      	str	r3, [r6, #40]	; 0x28
   386e0:	89a3      	ldrh	r3, [r4, #12]
   386e2:	6020      	str	r0, [r4, #0]
   386e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   386e8:	6120      	str	r0, [r4, #16]
   386ea:	81a3      	strh	r3, [r4, #12]
   386ec:	9b00      	ldr	r3, [sp, #0]
   386ee:	6163      	str	r3, [r4, #20]
   386f0:	9b01      	ldr	r3, [sp, #4]
   386f2:	b15b      	cbz	r3, 3870c <__smakebuf_r+0x74>
   386f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   386f8:	4630      	mov	r0, r6
   386fa:	f000 fce5 	bl	390c8 <_isatty_r>
   386fe:	b128      	cbz	r0, 3870c <__smakebuf_r+0x74>
   38700:	89a3      	ldrh	r3, [r4, #12]
   38702:	f023 0303 	bic.w	r3, r3, #3
   38706:	f043 0301 	orr.w	r3, r3, #1
   3870a:	81a3      	strh	r3, [r4, #12]
   3870c:	89a0      	ldrh	r0, [r4, #12]
   3870e:	4305      	orrs	r5, r0
   38710:	81a5      	strh	r5, [r4, #12]
   38712:	e7cd      	b.n	386b0 <__smakebuf_r+0x18>
   38714:	000380cd 	.word	0x000380cd

00038718 <__malloc_lock>:
   38718:	4801      	ldr	r0, [pc, #4]	; (38720 <__malloc_lock+0x8>)
   3871a:	f006 b83e 	b.w	3e79a <__retarget_lock_acquire_recursive>
   3871e:	bf00      	nop
   38720:	2001d8f0 	.word	0x2001d8f0

00038724 <__malloc_unlock>:
   38724:	4801      	ldr	r0, [pc, #4]	; (3872c <__malloc_unlock+0x8>)
   38726:	f006 b839 	b.w	3e79c <__retarget_lock_release_recursive>
   3872a:	bf00      	nop
   3872c:	2001d8f0 	.word	0x2001d8f0

00038730 <__pow5mult>:
   38730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38734:	4615      	mov	r5, r2
   38736:	f012 0203 	ands.w	r2, r2, #3
   3873a:	4606      	mov	r6, r0
   3873c:	460f      	mov	r7, r1
   3873e:	d007      	beq.n	38750 <__pow5mult+0x20>
   38740:	3a01      	subs	r2, #1
   38742:	4c21      	ldr	r4, [pc, #132]	; (387c8 <__pow5mult+0x98>)
   38744:	2300      	movs	r3, #0
   38746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3874a:	f006 f8c3 	bl	3e8d4 <__multadd>
   3874e:	4607      	mov	r7, r0
   38750:	10ad      	asrs	r5, r5, #2
   38752:	d035      	beq.n	387c0 <__pow5mult+0x90>
   38754:	6a74      	ldr	r4, [r6, #36]	; 0x24
   38756:	b93c      	cbnz	r4, 38768 <__pow5mult+0x38>
   38758:	2010      	movs	r0, #16
   3875a:	f7fe fc09 	bl	36f70 <malloc>
   3875e:	6270      	str	r0, [r6, #36]	; 0x24
   38760:	6004      	str	r4, [r0, #0]
   38762:	60c4      	str	r4, [r0, #12]
   38764:	e9c0 4401 	strd	r4, r4, [r0, #4]
   38768:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3876c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   38770:	b94c      	cbnz	r4, 38786 <__pow5mult+0x56>
   38772:	f240 2171 	movw	r1, #625	; 0x271
   38776:	4630      	mov	r0, r6
   38778:	f006 f979 	bl	3ea6e <__i2b>
   3877c:	2300      	movs	r3, #0
   3877e:	4604      	mov	r4, r0
   38780:	f8c8 0008 	str.w	r0, [r8, #8]
   38784:	6003      	str	r3, [r0, #0]
   38786:	f04f 0900 	mov.w	r9, #0
   3878a:	07eb      	lsls	r3, r5, #31
   3878c:	d50a      	bpl.n	387a4 <__pow5mult+0x74>
   3878e:	4639      	mov	r1, r7
   38790:	4622      	mov	r2, r4
   38792:	4630      	mov	r0, r6
   38794:	f006 f974 	bl	3ea80 <__multiply>
   38798:	4680      	mov	r8, r0
   3879a:	4639      	mov	r1, r7
   3879c:	4630      	mov	r0, r6
   3879e:	4647      	mov	r7, r8
   387a0:	f006 f881 	bl	3e8a6 <_Bfree>
   387a4:	106d      	asrs	r5, r5, #1
   387a6:	d00b      	beq.n	387c0 <__pow5mult+0x90>
   387a8:	6820      	ldr	r0, [r4, #0]
   387aa:	b938      	cbnz	r0, 387bc <__pow5mult+0x8c>
   387ac:	4622      	mov	r2, r4
   387ae:	4621      	mov	r1, r4
   387b0:	4630      	mov	r0, r6
   387b2:	f006 f965 	bl	3ea80 <__multiply>
   387b6:	6020      	str	r0, [r4, #0]
   387b8:	f8c0 9000 	str.w	r9, [r0]
   387bc:	4604      	mov	r4, r0
   387be:	e7e4      	b.n	3878a <__pow5mult+0x5a>
   387c0:	4638      	mov	r0, r7
   387c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   387c6:	bf00      	nop
   387c8:	000402a0 	.word	0x000402a0

000387cc <__ulp>:
   387cc:	b082      	sub	sp, #8
   387ce:	4913      	ldr	r1, [pc, #76]	; (3881c <__ulp+0x50>)
   387d0:	ed8d 0b00 	vstr	d0, [sp]
   387d4:	9b01      	ldr	r3, [sp, #4]
   387d6:	4019      	ands	r1, r3
   387d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   387dc:	2900      	cmp	r1, #0
   387de:	dd05      	ble.n	387ec <__ulp+0x20>
   387e0:	2200      	movs	r2, #0
   387e2:	460b      	mov	r3, r1
   387e4:	ec43 2b10 	vmov	d0, r2, r3
   387e8:	b002      	add	sp, #8
   387ea:	4770      	bx	lr
   387ec:	4249      	negs	r1, r1
   387ee:	2200      	movs	r2, #0
   387f0:	2300      	movs	r3, #0
   387f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   387f6:	ea4f 5021 	mov.w	r0, r1, asr #20
   387fa:	da04      	bge.n	38806 <__ulp+0x3a>
   387fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   38800:	fa41 f300 	asr.w	r3, r1, r0
   38804:	e7ee      	b.n	387e4 <__ulp+0x18>
   38806:	f1a0 0114 	sub.w	r1, r0, #20
   3880a:	291e      	cmp	r1, #30
   3880c:	bfd6      	itet	le
   3880e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   38812:	2101      	movgt	r1, #1
   38814:	fa20 f101 	lsrle.w	r1, r0, r1
   38818:	460a      	mov	r2, r1
   3881a:	e7e3      	b.n	387e4 <__ulp+0x18>
   3881c:	7ff00000 	.word	0x7ff00000

00038820 <__b2d>:
   38820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38822:	6905      	ldr	r5, [r0, #16]
   38824:	f100 0714 	add.w	r7, r0, #20
   38828:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   3882c:	f855 4c04 	ldr.w	r4, [r5, #-4]
   38830:	1f2e      	subs	r6, r5, #4
   38832:	4620      	mov	r0, r4
   38834:	f006 f8cb 	bl	3e9ce <__hi0bits>
   38838:	f1c0 0320 	rsb	r3, r0, #32
   3883c:	280a      	cmp	r0, #10
   3883e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 388bc <__b2d+0x9c>
   38842:	600b      	str	r3, [r1, #0]
   38844:	dc15      	bgt.n	38872 <__b2d+0x52>
   38846:	f1c0 0e0b 	rsb	lr, r0, #11
   3884a:	42b7      	cmp	r7, r6
   3884c:	f100 0015 	add.w	r0, r0, #21
   38850:	fa24 f10e 	lsr.w	r1, r4, lr
   38854:	fa04 f000 	lsl.w	r0, r4, r0
   38858:	ea41 030c 	orr.w	r3, r1, ip
   3885c:	bf34      	ite	cc
   3885e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   38862:	2100      	movcs	r1, #0
   38864:	fa21 f10e 	lsr.w	r1, r1, lr
   38868:	ea40 0201 	orr.w	r2, r0, r1
   3886c:	ec43 2b10 	vmov	d0, r2, r3
   38870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38872:	42b7      	cmp	r7, r6
   38874:	bf3a      	itte	cc
   38876:	f1a5 0608 	subcc.w	r6, r5, #8
   3887a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3887e:	2100      	movcs	r1, #0
   38880:	380b      	subs	r0, #11
   38882:	d017      	beq.n	388b4 <__b2d+0x94>
   38884:	f1c0 0c20 	rsb	ip, r0, #32
   38888:	fa04 f500 	lsl.w	r5, r4, r0
   3888c:	42be      	cmp	r6, r7
   3888e:	fa01 f000 	lsl.w	r0, r1, r0
   38892:	fa21 f40c 	lsr.w	r4, r1, ip
   38896:	ea45 0504 	orr.w	r5, r5, r4
   3889a:	bf8c      	ite	hi
   3889c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   388a0:	2400      	movls	r4, #0
   388a2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   388a6:	fa24 f40c 	lsr.w	r4, r4, ip
   388aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   388ae:	ea40 0204 	orr.w	r2, r0, r4
   388b2:	e7db      	b.n	3886c <__b2d+0x4c>
   388b4:	ea44 030c 	orr.w	r3, r4, ip
   388b8:	460a      	mov	r2, r1
   388ba:	e7d7      	b.n	3886c <__b2d+0x4c>
   388bc:	3ff00000 	.word	0x3ff00000

000388c0 <_svfiprintf_r>:
   388c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   388c4:	4698      	mov	r8, r3
   388c6:	898b      	ldrh	r3, [r1, #12]
   388c8:	b09d      	sub	sp, #116	; 0x74
   388ca:	4607      	mov	r7, r0
   388cc:	061b      	lsls	r3, r3, #24
   388ce:	460d      	mov	r5, r1
   388d0:	4614      	mov	r4, r2
   388d2:	d50e      	bpl.n	388f2 <_svfiprintf_r+0x32>
   388d4:	690b      	ldr	r3, [r1, #16]
   388d6:	b963      	cbnz	r3, 388f2 <_svfiprintf_r+0x32>
   388d8:	2140      	movs	r1, #64	; 0x40
   388da:	f7fe fba9 	bl	37030 <_malloc_r>
   388de:	6028      	str	r0, [r5, #0]
   388e0:	6128      	str	r0, [r5, #16]
   388e2:	b920      	cbnz	r0, 388ee <_svfiprintf_r+0x2e>
   388e4:	230c      	movs	r3, #12
   388e6:	603b      	str	r3, [r7, #0]
   388e8:	f04f 30ff 	mov.w	r0, #4294967295
   388ec:	e0d1      	b.n	38a92 <_svfiprintf_r+0x1d2>
   388ee:	2340      	movs	r3, #64	; 0x40
   388f0:	616b      	str	r3, [r5, #20]
   388f2:	2300      	movs	r3, #0
   388f4:	f8cd 800c 	str.w	r8, [sp, #12]
   388f8:	f04f 0901 	mov.w	r9, #1
   388fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 38aac <_svfiprintf_r+0x1ec>
   38900:	9309      	str	r3, [sp, #36]	; 0x24
   38902:	2320      	movs	r3, #32
   38904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   38908:	2330      	movs	r3, #48	; 0x30
   3890a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3890e:	4623      	mov	r3, r4
   38910:	469a      	mov	sl, r3
   38912:	f813 2b01 	ldrb.w	r2, [r3], #1
   38916:	b10a      	cbz	r2, 3891c <_svfiprintf_r+0x5c>
   38918:	2a25      	cmp	r2, #37	; 0x25
   3891a:	d1f9      	bne.n	38910 <_svfiprintf_r+0x50>
   3891c:	ebba 0b04 	subs.w	fp, sl, r4
   38920:	d00b      	beq.n	3893a <_svfiprintf_r+0x7a>
   38922:	465b      	mov	r3, fp
   38924:	4622      	mov	r2, r4
   38926:	4629      	mov	r1, r5
   38928:	4638      	mov	r0, r7
   3892a:	f006 fb38 	bl	3ef9e <__ssputs_r>
   3892e:	3001      	adds	r0, #1
   38930:	f000 80aa 	beq.w	38a88 <_svfiprintf_r+0x1c8>
   38934:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38936:	445a      	add	r2, fp
   38938:	9209      	str	r2, [sp, #36]	; 0x24
   3893a:	f89a 3000 	ldrb.w	r3, [sl]
   3893e:	2b00      	cmp	r3, #0
   38940:	f000 80a2 	beq.w	38a88 <_svfiprintf_r+0x1c8>
   38944:	2300      	movs	r3, #0
   38946:	f04f 32ff 	mov.w	r2, #4294967295
   3894a:	f10a 0a01 	add.w	sl, sl, #1
   3894e:	9304      	str	r3, [sp, #16]
   38950:	9307      	str	r3, [sp, #28]
   38952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   38956:	931a      	str	r3, [sp, #104]	; 0x68
   38958:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3895c:	4654      	mov	r4, sl
   3895e:	2205      	movs	r2, #5
   38960:	4852      	ldr	r0, [pc, #328]	; (38aac <_svfiprintf_r+0x1ec>)
   38962:	f814 1b01 	ldrb.w	r1, [r4], #1
   38966:	f005 fae4 	bl	3df32 <memchr>
   3896a:	9a04      	ldr	r2, [sp, #16]
   3896c:	b9d8      	cbnz	r0, 389a6 <_svfiprintf_r+0xe6>
   3896e:	06d0      	lsls	r0, r2, #27
   38970:	bf44      	itt	mi
   38972:	2320      	movmi	r3, #32
   38974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   38978:	0711      	lsls	r1, r2, #28
   3897a:	bf44      	itt	mi
   3897c:	232b      	movmi	r3, #43	; 0x2b
   3897e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   38982:	f89a 3000 	ldrb.w	r3, [sl]
   38986:	2b2a      	cmp	r3, #42	; 0x2a
   38988:	d015      	beq.n	389b6 <_svfiprintf_r+0xf6>
   3898a:	9a07      	ldr	r2, [sp, #28]
   3898c:	4654      	mov	r4, sl
   3898e:	2000      	movs	r0, #0
   38990:	f04f 0c0a 	mov.w	ip, #10
   38994:	4621      	mov	r1, r4
   38996:	f811 3b01 	ldrb.w	r3, [r1], #1
   3899a:	3b30      	subs	r3, #48	; 0x30
   3899c:	2b09      	cmp	r3, #9
   3899e:	d94e      	bls.n	38a3e <_svfiprintf_r+0x17e>
   389a0:	b1b0      	cbz	r0, 389d0 <_svfiprintf_r+0x110>
   389a2:	9207      	str	r2, [sp, #28]
   389a4:	e014      	b.n	389d0 <_svfiprintf_r+0x110>
   389a6:	eba0 0308 	sub.w	r3, r0, r8
   389aa:	46a2      	mov	sl, r4
   389ac:	fa09 f303 	lsl.w	r3, r9, r3
   389b0:	4313      	orrs	r3, r2
   389b2:	9304      	str	r3, [sp, #16]
   389b4:	e7d2      	b.n	3895c <_svfiprintf_r+0x9c>
   389b6:	9b03      	ldr	r3, [sp, #12]
   389b8:	1d19      	adds	r1, r3, #4
   389ba:	681b      	ldr	r3, [r3, #0]
   389bc:	2b00      	cmp	r3, #0
   389be:	9103      	str	r1, [sp, #12]
   389c0:	bfbb      	ittet	lt
   389c2:	425b      	neglt	r3, r3
   389c4:	f042 0202 	orrlt.w	r2, r2, #2
   389c8:	9307      	strge	r3, [sp, #28]
   389ca:	9307      	strlt	r3, [sp, #28]
   389cc:	bfb8      	it	lt
   389ce:	9204      	strlt	r2, [sp, #16]
   389d0:	7823      	ldrb	r3, [r4, #0]
   389d2:	2b2e      	cmp	r3, #46	; 0x2e
   389d4:	d10c      	bne.n	389f0 <_svfiprintf_r+0x130>
   389d6:	7863      	ldrb	r3, [r4, #1]
   389d8:	2b2a      	cmp	r3, #42	; 0x2a
   389da:	d135      	bne.n	38a48 <_svfiprintf_r+0x188>
   389dc:	9b03      	ldr	r3, [sp, #12]
   389de:	3402      	adds	r4, #2
   389e0:	1d1a      	adds	r2, r3, #4
   389e2:	681b      	ldr	r3, [r3, #0]
   389e4:	2b00      	cmp	r3, #0
   389e6:	9203      	str	r2, [sp, #12]
   389e8:	bfb8      	it	lt
   389ea:	f04f 33ff 	movlt.w	r3, #4294967295
   389ee:	9305      	str	r3, [sp, #20]
   389f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 38abc <_svfiprintf_r+0x1fc>
   389f4:	2203      	movs	r2, #3
   389f6:	7821      	ldrb	r1, [r4, #0]
   389f8:	4650      	mov	r0, sl
   389fa:	f005 fa9a 	bl	3df32 <memchr>
   389fe:	b140      	cbz	r0, 38a12 <_svfiprintf_r+0x152>
   38a00:	2340      	movs	r3, #64	; 0x40
   38a02:	eba0 000a 	sub.w	r0, r0, sl
   38a06:	3401      	adds	r4, #1
   38a08:	fa03 f000 	lsl.w	r0, r3, r0
   38a0c:	9b04      	ldr	r3, [sp, #16]
   38a0e:	4303      	orrs	r3, r0
   38a10:	9304      	str	r3, [sp, #16]
   38a12:	f814 1b01 	ldrb.w	r1, [r4], #1
   38a16:	2206      	movs	r2, #6
   38a18:	4825      	ldr	r0, [pc, #148]	; (38ab0 <_svfiprintf_r+0x1f0>)
   38a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   38a1e:	f005 fa88 	bl	3df32 <memchr>
   38a22:	2800      	cmp	r0, #0
   38a24:	d038      	beq.n	38a98 <_svfiprintf_r+0x1d8>
   38a26:	4b23      	ldr	r3, [pc, #140]	; (38ab4 <_svfiprintf_r+0x1f4>)
   38a28:	bb1b      	cbnz	r3, 38a72 <_svfiprintf_r+0x1b2>
   38a2a:	9b03      	ldr	r3, [sp, #12]
   38a2c:	3307      	adds	r3, #7
   38a2e:	f023 0307 	bic.w	r3, r3, #7
   38a32:	3308      	adds	r3, #8
   38a34:	9303      	str	r3, [sp, #12]
   38a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38a38:	4433      	add	r3, r6
   38a3a:	9309      	str	r3, [sp, #36]	; 0x24
   38a3c:	e767      	b.n	3890e <_svfiprintf_r+0x4e>
   38a3e:	fb0c 3202 	mla	r2, ip, r2, r3
   38a42:	460c      	mov	r4, r1
   38a44:	2001      	movs	r0, #1
   38a46:	e7a5      	b.n	38994 <_svfiprintf_r+0xd4>
   38a48:	2300      	movs	r3, #0
   38a4a:	3401      	adds	r4, #1
   38a4c:	f04f 0c0a 	mov.w	ip, #10
   38a50:	4619      	mov	r1, r3
   38a52:	9305      	str	r3, [sp, #20]
   38a54:	4620      	mov	r0, r4
   38a56:	f810 2b01 	ldrb.w	r2, [r0], #1
   38a5a:	3a30      	subs	r2, #48	; 0x30
   38a5c:	2a09      	cmp	r2, #9
   38a5e:	d903      	bls.n	38a68 <_svfiprintf_r+0x1a8>
   38a60:	2b00      	cmp	r3, #0
   38a62:	d0c5      	beq.n	389f0 <_svfiprintf_r+0x130>
   38a64:	9105      	str	r1, [sp, #20]
   38a66:	e7c3      	b.n	389f0 <_svfiprintf_r+0x130>
   38a68:	fb0c 2101 	mla	r1, ip, r1, r2
   38a6c:	4604      	mov	r4, r0
   38a6e:	2301      	movs	r3, #1
   38a70:	e7f0      	b.n	38a54 <_svfiprintf_r+0x194>
   38a72:	ab03      	add	r3, sp, #12
   38a74:	462a      	mov	r2, r5
   38a76:	a904      	add	r1, sp, #16
   38a78:	4638      	mov	r0, r7
   38a7a:	9300      	str	r3, [sp, #0]
   38a7c:	4b0e      	ldr	r3, [pc, #56]	; (38ab8 <_svfiprintf_r+0x1f8>)
   38a7e:	f7fe fc61 	bl	37344 <_printf_float>
   38a82:	1c42      	adds	r2, r0, #1
   38a84:	4606      	mov	r6, r0
   38a86:	d1d6      	bne.n	38a36 <_svfiprintf_r+0x176>
   38a88:	89ab      	ldrh	r3, [r5, #12]
   38a8a:	065b      	lsls	r3, r3, #25
   38a8c:	f53f af2c 	bmi.w	388e8 <_svfiprintf_r+0x28>
   38a90:	9809      	ldr	r0, [sp, #36]	; 0x24
   38a92:	b01d      	add	sp, #116	; 0x74
   38a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38a98:	ab03      	add	r3, sp, #12
   38a9a:	462a      	mov	r2, r5
   38a9c:	a904      	add	r1, sp, #16
   38a9e:	4638      	mov	r0, r7
   38aa0:	9300      	str	r3, [sp, #0]
   38aa2:	4b05      	ldr	r3, [pc, #20]	; (38ab8 <_svfiprintf_r+0x1f8>)
   38aa4:	f7fe fe84 	bl	377b0 <_printf_i>
   38aa8:	e7eb      	b.n	38a82 <_svfiprintf_r+0x1c2>
   38aaa:	bf00      	nop
   38aac:	000463ab 	.word	0x000463ab
   38ab0:	000463b5 	.word	0x000463b5
   38ab4:	00037345 	.word	0x00037345
   38ab8:	0003ef9f 	.word	0x0003ef9f
   38abc:	000463b1 	.word	0x000463b1

00038ac0 <__ssvfiscanf_r>:
   38ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38ac4:	460c      	mov	r4, r1
   38ac6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   38aca:	2100      	movs	r1, #0
   38acc:	4606      	mov	r6, r0
   38ace:	f10d 0804 	add.w	r8, sp, #4
   38ad2:	4fb4      	ldr	r7, [pc, #720]	; (38da4 <__ssvfiscanf_r+0x2e4>)
   38ad4:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 38db0 <__ssvfiscanf_r+0x2f0>
   38ad8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   38adc:	9300      	str	r3, [sp, #0]
   38ade:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   38ae2:	49b1      	ldr	r1, [pc, #708]	; (38da8 <__ssvfiscanf_r+0x2e8>)
   38ae4:	91a0      	str	r1, [sp, #640]	; 0x280
   38ae6:	49b1      	ldr	r1, [pc, #708]	; (38dac <__ssvfiscanf_r+0x2ec>)
   38ae8:	91a1      	str	r1, [sp, #644]	; 0x284
   38aea:	f892 a000 	ldrb.w	sl, [r2]
   38aee:	f1ba 0f00 	cmp.w	sl, #0
   38af2:	f000 8154 	beq.w	38d9e <__ssvfiscanf_r+0x2de>
   38af6:	f81a 3007 	ldrb.w	r3, [sl, r7]
   38afa:	1c55      	adds	r5, r2, #1
   38afc:	f013 0308 	ands.w	r3, r3, #8
   38b00:	d019      	beq.n	38b36 <__ssvfiscanf_r+0x76>
   38b02:	6863      	ldr	r3, [r4, #4]
   38b04:	2b00      	cmp	r3, #0
   38b06:	dd0f      	ble.n	38b28 <__ssvfiscanf_r+0x68>
   38b08:	6823      	ldr	r3, [r4, #0]
   38b0a:	781a      	ldrb	r2, [r3, #0]
   38b0c:	5cba      	ldrb	r2, [r7, r2]
   38b0e:	0712      	lsls	r2, r2, #28
   38b10:	d401      	bmi.n	38b16 <__ssvfiscanf_r+0x56>
   38b12:	462a      	mov	r2, r5
   38b14:	e7e9      	b.n	38aea <__ssvfiscanf_r+0x2a>
   38b16:	9a45      	ldr	r2, [sp, #276]	; 0x114
   38b18:	3301      	adds	r3, #1
   38b1a:	3201      	adds	r2, #1
   38b1c:	6023      	str	r3, [r4, #0]
   38b1e:	9245      	str	r2, [sp, #276]	; 0x114
   38b20:	6862      	ldr	r2, [r4, #4]
   38b22:	3a01      	subs	r2, #1
   38b24:	6062      	str	r2, [r4, #4]
   38b26:	e7ec      	b.n	38b02 <__ssvfiscanf_r+0x42>
   38b28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   38b2a:	4621      	mov	r1, r4
   38b2c:	4630      	mov	r0, r6
   38b2e:	4798      	blx	r3
   38b30:	2800      	cmp	r0, #0
   38b32:	d0e9      	beq.n	38b08 <__ssvfiscanf_r+0x48>
   38b34:	e7ed      	b.n	38b12 <__ssvfiscanf_r+0x52>
   38b36:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   38b3a:	f040 8086 	bne.w	38c4a <__ssvfiscanf_r+0x18a>
   38b3e:	9341      	str	r3, [sp, #260]	; 0x104
   38b40:	9343      	str	r3, [sp, #268]	; 0x10c
   38b42:	7853      	ldrb	r3, [r2, #1]
   38b44:	2b2a      	cmp	r3, #42	; 0x2a
   38b46:	bf04      	itt	eq
   38b48:	2310      	moveq	r3, #16
   38b4a:	1c95      	addeq	r5, r2, #2
   38b4c:	f04f 020a 	mov.w	r2, #10
   38b50:	bf08      	it	eq
   38b52:	9341      	streq	r3, [sp, #260]	; 0x104
   38b54:	46ab      	mov	fp, r5
   38b56:	f81b 1b01 	ldrb.w	r1, [fp], #1
   38b5a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   38b5e:	2b09      	cmp	r3, #9
   38b60:	d91d      	bls.n	38b9e <__ssvfiscanf_r+0xde>
   38b62:	2203      	movs	r2, #3
   38b64:	4892      	ldr	r0, [pc, #584]	; (38db0 <__ssvfiscanf_r+0x2f0>)
   38b66:	f005 f9e4 	bl	3df32 <memchr>
   38b6a:	b140      	cbz	r0, 38b7e <__ssvfiscanf_r+0xbe>
   38b6c:	2301      	movs	r3, #1
   38b6e:	eba0 0009 	sub.w	r0, r0, r9
   38b72:	465d      	mov	r5, fp
   38b74:	fa03 f000 	lsl.w	r0, r3, r0
   38b78:	9b41      	ldr	r3, [sp, #260]	; 0x104
   38b7a:	4318      	orrs	r0, r3
   38b7c:	9041      	str	r0, [sp, #260]	; 0x104
   38b7e:	f815 3b01 	ldrb.w	r3, [r5], #1
   38b82:	2b78      	cmp	r3, #120	; 0x78
   38b84:	d806      	bhi.n	38b94 <__ssvfiscanf_r+0xd4>
   38b86:	2b57      	cmp	r3, #87	; 0x57
   38b88:	d810      	bhi.n	38bac <__ssvfiscanf_r+0xec>
   38b8a:	2b25      	cmp	r3, #37	; 0x25
   38b8c:	d05d      	beq.n	38c4a <__ssvfiscanf_r+0x18a>
   38b8e:	d857      	bhi.n	38c40 <__ssvfiscanf_r+0x180>
   38b90:	2b00      	cmp	r3, #0
   38b92:	d075      	beq.n	38c80 <__ssvfiscanf_r+0x1c0>
   38b94:	2303      	movs	r3, #3
   38b96:	9347      	str	r3, [sp, #284]	; 0x11c
   38b98:	230a      	movs	r3, #10
   38b9a:	9342      	str	r3, [sp, #264]	; 0x108
   38b9c:	e082      	b.n	38ca4 <__ssvfiscanf_r+0x1e4>
   38b9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   38ba0:	465d      	mov	r5, fp
   38ba2:	fb02 1303 	mla	r3, r2, r3, r1
   38ba6:	3b30      	subs	r3, #48	; 0x30
   38ba8:	9343      	str	r3, [sp, #268]	; 0x10c
   38baa:	e7d3      	b.n	38b54 <__ssvfiscanf_r+0x94>
   38bac:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   38bb0:	2a20      	cmp	r2, #32
   38bb2:	d8ef      	bhi.n	38b94 <__ssvfiscanf_r+0xd4>
   38bb4:	a101      	add	r1, pc, #4	; (adr r1, 38bbc <__ssvfiscanf_r+0xfc>)
   38bb6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   38bba:	bf00      	nop
   38bbc:	00038c8f 	.word	0x00038c8f
   38bc0:	00038b95 	.word	0x00038b95
   38bc4:	00038b95 	.word	0x00038b95
   38bc8:	00038ced 	.word	0x00038ced
   38bcc:	00038b95 	.word	0x00038b95
   38bd0:	00038b95 	.word	0x00038b95
   38bd4:	00038b95 	.word	0x00038b95
   38bd8:	00038b95 	.word	0x00038b95
   38bdc:	00038b95 	.word	0x00038b95
   38be0:	00038b95 	.word	0x00038b95
   38be4:	00038b95 	.word	0x00038b95
   38be8:	00038d03 	.word	0x00038d03
   38bec:	00038cd9 	.word	0x00038cd9
   38bf0:	00038c47 	.word	0x00038c47
   38bf4:	00038c47 	.word	0x00038c47
   38bf8:	00038c47 	.word	0x00038c47
   38bfc:	00038b95 	.word	0x00038b95
   38c00:	00038cdd 	.word	0x00038cdd
   38c04:	00038b95 	.word	0x00038b95
   38c08:	00038b95 	.word	0x00038b95
   38c0c:	00038b95 	.word	0x00038b95
   38c10:	00038b95 	.word	0x00038b95
   38c14:	00038d13 	.word	0x00038d13
   38c18:	00038ce5 	.word	0x00038ce5
   38c1c:	00038c87 	.word	0x00038c87
   38c20:	00038b95 	.word	0x00038b95
   38c24:	00038b95 	.word	0x00038b95
   38c28:	00038d0f 	.word	0x00038d0f
   38c2c:	00038b95 	.word	0x00038b95
   38c30:	00038cd9 	.word	0x00038cd9
   38c34:	00038b95 	.word	0x00038b95
   38c38:	00038b95 	.word	0x00038b95
   38c3c:	00038c8f 	.word	0x00038c8f
   38c40:	3b45      	subs	r3, #69	; 0x45
   38c42:	2b02      	cmp	r3, #2
   38c44:	d8a6      	bhi.n	38b94 <__ssvfiscanf_r+0xd4>
   38c46:	2305      	movs	r3, #5
   38c48:	e02b      	b.n	38ca2 <__ssvfiscanf_r+0x1e2>
   38c4a:	6863      	ldr	r3, [r4, #4]
   38c4c:	2b00      	cmp	r3, #0
   38c4e:	dd0d      	ble.n	38c6c <__ssvfiscanf_r+0x1ac>
   38c50:	6823      	ldr	r3, [r4, #0]
   38c52:	781a      	ldrb	r2, [r3, #0]
   38c54:	4552      	cmp	r2, sl
   38c56:	f040 80a2 	bne.w	38d9e <__ssvfiscanf_r+0x2de>
   38c5a:	3301      	adds	r3, #1
   38c5c:	6862      	ldr	r2, [r4, #4]
   38c5e:	6023      	str	r3, [r4, #0]
   38c60:	3a01      	subs	r2, #1
   38c62:	9b45      	ldr	r3, [sp, #276]	; 0x114
   38c64:	6062      	str	r2, [r4, #4]
   38c66:	3301      	adds	r3, #1
   38c68:	9345      	str	r3, [sp, #276]	; 0x114
   38c6a:	e752      	b.n	38b12 <__ssvfiscanf_r+0x52>
   38c6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   38c6e:	4621      	mov	r1, r4
   38c70:	4630      	mov	r0, r6
   38c72:	4798      	blx	r3
   38c74:	2800      	cmp	r0, #0
   38c76:	d0eb      	beq.n	38c50 <__ssvfiscanf_r+0x190>
   38c78:	9844      	ldr	r0, [sp, #272]	; 0x110
   38c7a:	2800      	cmp	r0, #0
   38c7c:	f040 8085 	bne.w	38d8a <__ssvfiscanf_r+0x2ca>
   38c80:	f04f 30ff 	mov.w	r0, #4294967295
   38c84:	e087      	b.n	38d96 <__ssvfiscanf_r+0x2d6>
   38c86:	9a41      	ldr	r2, [sp, #260]	; 0x104
   38c88:	f042 0220 	orr.w	r2, r2, #32
   38c8c:	9241      	str	r2, [sp, #260]	; 0x104
   38c8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
   38c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   38c94:	9241      	str	r2, [sp, #260]	; 0x104
   38c96:	2210      	movs	r2, #16
   38c98:	2b6f      	cmp	r3, #111	; 0x6f
   38c9a:	9242      	str	r2, [sp, #264]	; 0x108
   38c9c:	bf34      	ite	cc
   38c9e:	2303      	movcc	r3, #3
   38ca0:	2304      	movcs	r3, #4
   38ca2:	9347      	str	r3, [sp, #284]	; 0x11c
   38ca4:	6863      	ldr	r3, [r4, #4]
   38ca6:	2b00      	cmp	r3, #0
   38ca8:	dd42      	ble.n	38d30 <__ssvfiscanf_r+0x270>
   38caa:	9b41      	ldr	r3, [sp, #260]	; 0x104
   38cac:	0659      	lsls	r1, r3, #25
   38cae:	d404      	bmi.n	38cba <__ssvfiscanf_r+0x1fa>
   38cb0:	6823      	ldr	r3, [r4, #0]
   38cb2:	781a      	ldrb	r2, [r3, #0]
   38cb4:	5cba      	ldrb	r2, [r7, r2]
   38cb6:	0712      	lsls	r2, r2, #28
   38cb8:	d441      	bmi.n	38d3e <__ssvfiscanf_r+0x27e>
   38cba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   38cbc:	2b02      	cmp	r3, #2
   38cbe:	dc50      	bgt.n	38d62 <__ssvfiscanf_r+0x2a2>
   38cc0:	466b      	mov	r3, sp
   38cc2:	4622      	mov	r2, r4
   38cc4:	a941      	add	r1, sp, #260	; 0x104
   38cc6:	4630      	mov	r0, r6
   38cc8:	f000 f876 	bl	38db8 <_scanf_chars>
   38ccc:	2801      	cmp	r0, #1
   38cce:	d066      	beq.n	38d9e <__ssvfiscanf_r+0x2de>
   38cd0:	2802      	cmp	r0, #2
   38cd2:	f47f af1e 	bne.w	38b12 <__ssvfiscanf_r+0x52>
   38cd6:	e7cf      	b.n	38c78 <__ssvfiscanf_r+0x1b8>
   38cd8:	220a      	movs	r2, #10
   38cda:	e7dd      	b.n	38c98 <__ssvfiscanf_r+0x1d8>
   38cdc:	2300      	movs	r3, #0
   38cde:	9342      	str	r3, [sp, #264]	; 0x108
   38ce0:	2303      	movs	r3, #3
   38ce2:	e7de      	b.n	38ca2 <__ssvfiscanf_r+0x1e2>
   38ce4:	2308      	movs	r3, #8
   38ce6:	9342      	str	r3, [sp, #264]	; 0x108
   38ce8:	2304      	movs	r3, #4
   38cea:	e7da      	b.n	38ca2 <__ssvfiscanf_r+0x1e2>
   38cec:	4629      	mov	r1, r5
   38cee:	4640      	mov	r0, r8
   38cf0:	f006 fa0a 	bl	3f108 <__sccl>
   38cf4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   38cf6:	4605      	mov	r5, r0
   38cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   38cfc:	9341      	str	r3, [sp, #260]	; 0x104
   38cfe:	2301      	movs	r3, #1
   38d00:	e7cf      	b.n	38ca2 <__ssvfiscanf_r+0x1e2>
   38d02:	9b41      	ldr	r3, [sp, #260]	; 0x104
   38d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   38d08:	9341      	str	r3, [sp, #260]	; 0x104
   38d0a:	2300      	movs	r3, #0
   38d0c:	e7c9      	b.n	38ca2 <__ssvfiscanf_r+0x1e2>
   38d0e:	2302      	movs	r3, #2
   38d10:	e7c7      	b.n	38ca2 <__ssvfiscanf_r+0x1e2>
   38d12:	9841      	ldr	r0, [sp, #260]	; 0x104
   38d14:	06c3      	lsls	r3, r0, #27
   38d16:	f53f aefc 	bmi.w	38b12 <__ssvfiscanf_r+0x52>
   38d1a:	9b00      	ldr	r3, [sp, #0]
   38d1c:	07c0      	lsls	r0, r0, #31
   38d1e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   38d20:	f103 0104 	add.w	r1, r3, #4
   38d24:	9100      	str	r1, [sp, #0]
   38d26:	681b      	ldr	r3, [r3, #0]
   38d28:	bf4c      	ite	mi
   38d2a:	801a      	strhmi	r2, [r3, #0]
   38d2c:	601a      	strpl	r2, [r3, #0]
   38d2e:	e6f0      	b.n	38b12 <__ssvfiscanf_r+0x52>
   38d30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   38d32:	4621      	mov	r1, r4
   38d34:	4630      	mov	r0, r6
   38d36:	4798      	blx	r3
   38d38:	2800      	cmp	r0, #0
   38d3a:	d0b6      	beq.n	38caa <__ssvfiscanf_r+0x1ea>
   38d3c:	e79c      	b.n	38c78 <__ssvfiscanf_r+0x1b8>
   38d3e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   38d40:	3201      	adds	r2, #1
   38d42:	9245      	str	r2, [sp, #276]	; 0x114
   38d44:	6862      	ldr	r2, [r4, #4]
   38d46:	3a01      	subs	r2, #1
   38d48:	2a00      	cmp	r2, #0
   38d4a:	6062      	str	r2, [r4, #4]
   38d4c:	dd02      	ble.n	38d54 <__ssvfiscanf_r+0x294>
   38d4e:	3301      	adds	r3, #1
   38d50:	6023      	str	r3, [r4, #0]
   38d52:	e7ad      	b.n	38cb0 <__ssvfiscanf_r+0x1f0>
   38d54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   38d56:	4621      	mov	r1, r4
   38d58:	4630      	mov	r0, r6
   38d5a:	4798      	blx	r3
   38d5c:	2800      	cmp	r0, #0
   38d5e:	d0a7      	beq.n	38cb0 <__ssvfiscanf_r+0x1f0>
   38d60:	e78a      	b.n	38c78 <__ssvfiscanf_r+0x1b8>
   38d62:	2b04      	cmp	r3, #4
   38d64:	dc06      	bgt.n	38d74 <__ssvfiscanf_r+0x2b4>
   38d66:	466b      	mov	r3, sp
   38d68:	4622      	mov	r2, r4
   38d6a:	a941      	add	r1, sp, #260	; 0x104
   38d6c:	4630      	mov	r0, r6
   38d6e:	f000 f87b 	bl	38e68 <_scanf_i>
   38d72:	e7ab      	b.n	38ccc <__ssvfiscanf_r+0x20c>
   38d74:	4b0f      	ldr	r3, [pc, #60]	; (38db4 <__ssvfiscanf_r+0x2f4>)
   38d76:	2b00      	cmp	r3, #0
   38d78:	f43f aecb 	beq.w	38b12 <__ssvfiscanf_r+0x52>
   38d7c:	466b      	mov	r3, sp
   38d7e:	4622      	mov	r2, r4
   38d80:	a941      	add	r1, sp, #260	; 0x104
   38d82:	4630      	mov	r0, r6
   38d84:	e000      	b.n	38d88 <__ssvfiscanf_r+0x2c8>
   38d86:	bf00      	nop
   38d88:	e7a0      	b.n	38ccc <__ssvfiscanf_r+0x20c>
   38d8a:	89a3      	ldrh	r3, [r4, #12]
   38d8c:	f013 0f40 	tst.w	r3, #64	; 0x40
   38d90:	bf18      	it	ne
   38d92:	f04f 30ff 	movne.w	r0, #4294967295
   38d96:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   38d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38d9e:	9844      	ldr	r0, [sp, #272]	; 0x110
   38da0:	e7f9      	b.n	38d96 <__ssvfiscanf_r+0x2d6>
   38da2:	bf00      	nop
   38da4:	000462ab 	.word	0x000462ab
   38da8:	0003f055 	.word	0x0003f055
   38dac:	0003f0cf 	.word	0x0003f0cf
   38db0:	000463b1 	.word	0x000463b1
   38db4:	00000000 	.word	0x00000000

00038db8 <_scanf_chars>:
   38db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38dbc:	4615      	mov	r5, r2
   38dbe:	688a      	ldr	r2, [r1, #8]
   38dc0:	4680      	mov	r8, r0
   38dc2:	460c      	mov	r4, r1
   38dc4:	b932      	cbnz	r2, 38dd4 <_scanf_chars+0x1c>
   38dc6:	698a      	ldr	r2, [r1, #24]
   38dc8:	2a00      	cmp	r2, #0
   38dca:	bf0c      	ite	eq
   38dcc:	2201      	moveq	r2, #1
   38dce:	f04f 32ff 	movne.w	r2, #4294967295
   38dd2:	608a      	str	r2, [r1, #8]
   38dd4:	6822      	ldr	r2, [r4, #0]
   38dd6:	2700      	movs	r7, #0
   38dd8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 38e64 <_scanf_chars+0xac>
   38ddc:	06d1      	lsls	r1, r2, #27
   38dde:	bf5f      	itttt	pl
   38de0:	681a      	ldrpl	r2, [r3, #0]
   38de2:	1d11      	addpl	r1, r2, #4
   38de4:	6019      	strpl	r1, [r3, #0]
   38de6:	6816      	ldrpl	r6, [r2, #0]
   38de8:	69a0      	ldr	r0, [r4, #24]
   38dea:	b188      	cbz	r0, 38e10 <_scanf_chars+0x58>
   38dec:	2801      	cmp	r0, #1
   38dee:	d107      	bne.n	38e00 <_scanf_chars+0x48>
   38df0:	682b      	ldr	r3, [r5, #0]
   38df2:	781a      	ldrb	r2, [r3, #0]
   38df4:	6963      	ldr	r3, [r4, #20]
   38df6:	5c9b      	ldrb	r3, [r3, r2]
   38df8:	b953      	cbnz	r3, 38e10 <_scanf_chars+0x58>
   38dfa:	bb27      	cbnz	r7, 38e46 <_scanf_chars+0x8e>
   38dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   38e00:	2802      	cmp	r0, #2
   38e02:	d120      	bne.n	38e46 <_scanf_chars+0x8e>
   38e04:	682b      	ldr	r3, [r5, #0]
   38e06:	781b      	ldrb	r3, [r3, #0]
   38e08:	f813 3009 	ldrb.w	r3, [r3, r9]
   38e0c:	071b      	lsls	r3, r3, #28
   38e0e:	d41a      	bmi.n	38e46 <_scanf_chars+0x8e>
   38e10:	6823      	ldr	r3, [r4, #0]
   38e12:	3701      	adds	r7, #1
   38e14:	06da      	lsls	r2, r3, #27
   38e16:	bf5e      	ittt	pl
   38e18:	682b      	ldrpl	r3, [r5, #0]
   38e1a:	781b      	ldrbpl	r3, [r3, #0]
   38e1c:	f806 3b01 	strbpl.w	r3, [r6], #1
   38e20:	682a      	ldr	r2, [r5, #0]
   38e22:	686b      	ldr	r3, [r5, #4]
   38e24:	3201      	adds	r2, #1
   38e26:	3b01      	subs	r3, #1
   38e28:	602a      	str	r2, [r5, #0]
   38e2a:	68a2      	ldr	r2, [r4, #8]
   38e2c:	606b      	str	r3, [r5, #4]
   38e2e:	3a01      	subs	r2, #1
   38e30:	60a2      	str	r2, [r4, #8]
   38e32:	b142      	cbz	r2, 38e46 <_scanf_chars+0x8e>
   38e34:	2b00      	cmp	r3, #0
   38e36:	dcd7      	bgt.n	38de8 <_scanf_chars+0x30>
   38e38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   38e3c:	4629      	mov	r1, r5
   38e3e:	4640      	mov	r0, r8
   38e40:	4798      	blx	r3
   38e42:	2800      	cmp	r0, #0
   38e44:	d0d0      	beq.n	38de8 <_scanf_chars+0x30>
   38e46:	6823      	ldr	r3, [r4, #0]
   38e48:	f013 0310 	ands.w	r3, r3, #16
   38e4c:	d105      	bne.n	38e5a <_scanf_chars+0xa2>
   38e4e:	68e2      	ldr	r2, [r4, #12]
   38e50:	3201      	adds	r2, #1
   38e52:	60e2      	str	r2, [r4, #12]
   38e54:	69a2      	ldr	r2, [r4, #24]
   38e56:	b102      	cbz	r2, 38e5a <_scanf_chars+0xa2>
   38e58:	7033      	strb	r3, [r6, #0]
   38e5a:	6923      	ldr	r3, [r4, #16]
   38e5c:	2000      	movs	r0, #0
   38e5e:	441f      	add	r7, r3
   38e60:	6127      	str	r7, [r4, #16]
   38e62:	e7cb      	b.n	38dfc <_scanf_chars+0x44>
   38e64:	000462ab 	.word	0x000462ab

00038e68 <_scanf_i>:
   38e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38e6c:	4698      	mov	r8, r3
   38e6e:	b087      	sub	sp, #28
   38e70:	4b72      	ldr	r3, [pc, #456]	; (3903c <_scanf_i+0x1d4>)
   38e72:	460c      	mov	r4, r1
   38e74:	4682      	mov	sl, r0
   38e76:	4616      	mov	r6, r2
   38e78:	4627      	mov	r7, r4
   38e7a:	f04f 0b00 	mov.w	fp, #0
   38e7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   38e82:	ab03      	add	r3, sp, #12
   38e84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   38e88:	4b6d      	ldr	r3, [pc, #436]	; (39040 <_scanf_i+0x1d8>)
   38e8a:	69a1      	ldr	r1, [r4, #24]
   38e8c:	4a6d      	ldr	r2, [pc, #436]	; (39044 <_scanf_i+0x1dc>)
   38e8e:	2903      	cmp	r1, #3
   38e90:	bf18      	it	ne
   38e92:	461a      	movne	r2, r3
   38e94:	68a3      	ldr	r3, [r4, #8]
   38e96:	9201      	str	r2, [sp, #4]
   38e98:	1e5a      	subs	r2, r3, #1
   38e9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   38e9e:	bf89      	itett	hi
   38ea0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   38ea4:	f04f 0900 	movls.w	r9, #0
   38ea8:	eb03 0905 	addhi.w	r9, r3, r5
   38eac:	f240 135d 	movwhi	r3, #349	; 0x15d
   38eb0:	bf88      	it	hi
   38eb2:	60a3      	strhi	r3, [r4, #8]
   38eb4:	f857 3b1c 	ldr.w	r3, [r7], #28
   38eb8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   38ebc:	463d      	mov	r5, r7
   38ebe:	6023      	str	r3, [r4, #0]
   38ec0:	6831      	ldr	r1, [r6, #0]
   38ec2:	ab03      	add	r3, sp, #12
   38ec4:	2202      	movs	r2, #2
   38ec6:	7809      	ldrb	r1, [r1, #0]
   38ec8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   38ecc:	f005 f831 	bl	3df32 <memchr>
   38ed0:	b328      	cbz	r0, 38f1e <_scanf_i+0xb6>
   38ed2:	f1bb 0f01 	cmp.w	fp, #1
   38ed6:	d159      	bne.n	38f8c <_scanf_i+0x124>
   38ed8:	6862      	ldr	r2, [r4, #4]
   38eda:	b92a      	cbnz	r2, 38ee8 <_scanf_i+0x80>
   38edc:	6822      	ldr	r2, [r4, #0]
   38ede:	2308      	movs	r3, #8
   38ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   38ee4:	6063      	str	r3, [r4, #4]
   38ee6:	6022      	str	r2, [r4, #0]
   38ee8:	6822      	ldr	r2, [r4, #0]
   38eea:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   38eee:	6022      	str	r2, [r4, #0]
   38ef0:	68a2      	ldr	r2, [r4, #8]
   38ef2:	1e51      	subs	r1, r2, #1
   38ef4:	60a1      	str	r1, [r4, #8]
   38ef6:	b192      	cbz	r2, 38f1e <_scanf_i+0xb6>
   38ef8:	6832      	ldr	r2, [r6, #0]
   38efa:	1c51      	adds	r1, r2, #1
   38efc:	6031      	str	r1, [r6, #0]
   38efe:	7812      	ldrb	r2, [r2, #0]
   38f00:	f805 2b01 	strb.w	r2, [r5], #1
   38f04:	6872      	ldr	r2, [r6, #4]
   38f06:	3a01      	subs	r2, #1
   38f08:	2a00      	cmp	r2, #0
   38f0a:	6072      	str	r2, [r6, #4]
   38f0c:	dc07      	bgt.n	38f1e <_scanf_i+0xb6>
   38f0e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   38f12:	4631      	mov	r1, r6
   38f14:	4650      	mov	r0, sl
   38f16:	4790      	blx	r2
   38f18:	2800      	cmp	r0, #0
   38f1a:	f040 8085 	bne.w	39028 <_scanf_i+0x1c0>
   38f1e:	f10b 0b01 	add.w	fp, fp, #1
   38f22:	f1bb 0f03 	cmp.w	fp, #3
   38f26:	d1cb      	bne.n	38ec0 <_scanf_i+0x58>
   38f28:	6863      	ldr	r3, [r4, #4]
   38f2a:	b90b      	cbnz	r3, 38f30 <_scanf_i+0xc8>
   38f2c:	230a      	movs	r3, #10
   38f2e:	6063      	str	r3, [r4, #4]
   38f30:	6863      	ldr	r3, [r4, #4]
   38f32:	f04f 0b00 	mov.w	fp, #0
   38f36:	4944      	ldr	r1, [pc, #272]	; (39048 <_scanf_i+0x1e0>)
   38f38:	6960      	ldr	r0, [r4, #20]
   38f3a:	1ac9      	subs	r1, r1, r3
   38f3c:	f006 f8e4 	bl	3f108 <__sccl>
   38f40:	68a3      	ldr	r3, [r4, #8]
   38f42:	6822      	ldr	r2, [r4, #0]
   38f44:	2b00      	cmp	r3, #0
   38f46:	d03d      	beq.n	38fc4 <_scanf_i+0x15c>
   38f48:	6831      	ldr	r1, [r6, #0]
   38f4a:	6960      	ldr	r0, [r4, #20]
   38f4c:	f891 c000 	ldrb.w	ip, [r1]
   38f50:	f810 000c 	ldrb.w	r0, [r0, ip]
   38f54:	2800      	cmp	r0, #0
   38f56:	d035      	beq.n	38fc4 <_scanf_i+0x15c>
   38f58:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   38f5c:	d124      	bne.n	38fa8 <_scanf_i+0x140>
   38f5e:	0510      	lsls	r0, r2, #20
   38f60:	d522      	bpl.n	38fa8 <_scanf_i+0x140>
   38f62:	f10b 0b01 	add.w	fp, fp, #1
   38f66:	f1b9 0f00 	cmp.w	r9, #0
   38f6a:	d003      	beq.n	38f74 <_scanf_i+0x10c>
   38f6c:	3301      	adds	r3, #1
   38f6e:	f109 39ff 	add.w	r9, r9, #4294967295
   38f72:	60a3      	str	r3, [r4, #8]
   38f74:	6873      	ldr	r3, [r6, #4]
   38f76:	3b01      	subs	r3, #1
   38f78:	2b00      	cmp	r3, #0
   38f7a:	6073      	str	r3, [r6, #4]
   38f7c:	dd1b      	ble.n	38fb6 <_scanf_i+0x14e>
   38f7e:	6833      	ldr	r3, [r6, #0]
   38f80:	3301      	adds	r3, #1
   38f82:	6033      	str	r3, [r6, #0]
   38f84:	68a3      	ldr	r3, [r4, #8]
   38f86:	3b01      	subs	r3, #1
   38f88:	60a3      	str	r3, [r4, #8]
   38f8a:	e7d9      	b.n	38f40 <_scanf_i+0xd8>
   38f8c:	f1bb 0f02 	cmp.w	fp, #2
   38f90:	d1ae      	bne.n	38ef0 <_scanf_i+0x88>
   38f92:	6822      	ldr	r2, [r4, #0]
   38f94:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   38f98:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   38f9c:	d1bf      	bne.n	38f1e <_scanf_i+0xb6>
   38f9e:	2310      	movs	r3, #16
   38fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   38fa4:	6063      	str	r3, [r4, #4]
   38fa6:	e7a2      	b.n	38eee <_scanf_i+0x86>
   38fa8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   38fac:	6022      	str	r2, [r4, #0]
   38fae:	780b      	ldrb	r3, [r1, #0]
   38fb0:	f805 3b01 	strb.w	r3, [r5], #1
   38fb4:	e7de      	b.n	38f74 <_scanf_i+0x10c>
   38fb6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   38fba:	4631      	mov	r1, r6
   38fbc:	4650      	mov	r0, sl
   38fbe:	4798      	blx	r3
   38fc0:	2800      	cmp	r0, #0
   38fc2:	d0df      	beq.n	38f84 <_scanf_i+0x11c>
   38fc4:	6823      	ldr	r3, [r4, #0]
   38fc6:	05d9      	lsls	r1, r3, #23
   38fc8:	d50d      	bpl.n	38fe6 <_scanf_i+0x17e>
   38fca:	42bd      	cmp	r5, r7
   38fcc:	d909      	bls.n	38fe2 <_scanf_i+0x17a>
   38fce:	f105 39ff 	add.w	r9, r5, #4294967295
   38fd2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   38fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   38fda:	4632      	mov	r2, r6
   38fdc:	464d      	mov	r5, r9
   38fde:	4650      	mov	r0, sl
   38fe0:	4798      	blx	r3
   38fe2:	42bd      	cmp	r5, r7
   38fe4:	d028      	beq.n	39038 <_scanf_i+0x1d0>
   38fe6:	6822      	ldr	r2, [r4, #0]
   38fe8:	f012 0210 	ands.w	r2, r2, #16
   38fec:	d113      	bne.n	39016 <_scanf_i+0x1ae>
   38fee:	702a      	strb	r2, [r5, #0]
   38ff0:	4639      	mov	r1, r7
   38ff2:	6863      	ldr	r3, [r4, #4]
   38ff4:	4650      	mov	r0, sl
   38ff6:	9e01      	ldr	r6, [sp, #4]
   38ff8:	47b0      	blx	r6
   38ffa:	f8d8 3000 	ldr.w	r3, [r8]
   38ffe:	6821      	ldr	r1, [r4, #0]
   39000:	1d1a      	adds	r2, r3, #4
   39002:	f011 0f20 	tst.w	r1, #32
   39006:	f8c8 2000 	str.w	r2, [r8]
   3900a:	681b      	ldr	r3, [r3, #0]
   3900c:	d00f      	beq.n	3902e <_scanf_i+0x1c6>
   3900e:	6018      	str	r0, [r3, #0]
   39010:	68e3      	ldr	r3, [r4, #12]
   39012:	3301      	adds	r3, #1
   39014:	60e3      	str	r3, [r4, #12]
   39016:	1bed      	subs	r5, r5, r7
   39018:	2000      	movs	r0, #0
   3901a:	44ab      	add	fp, r5
   3901c:	6925      	ldr	r5, [r4, #16]
   3901e:	445d      	add	r5, fp
   39020:	6125      	str	r5, [r4, #16]
   39022:	b007      	add	sp, #28
   39024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39028:	f04f 0b00 	mov.w	fp, #0
   3902c:	e7ca      	b.n	38fc4 <_scanf_i+0x15c>
   3902e:	07ca      	lsls	r2, r1, #31
   39030:	bf4c      	ite	mi
   39032:	8018      	strhmi	r0, [r3, #0]
   39034:	6018      	strpl	r0, [r3, #0]
   39036:	e7eb      	b.n	39010 <_scanf_i+0x1a8>
   39038:	2001      	movs	r0, #1
   3903a:	e7f2      	b.n	39022 <_scanf_i+0x1ba>
   3903c:	0003f7f0 	.word	0x0003f7f0
   39040:	0003e3af 	.word	0x0003e3af
   39044:	0003e3ab 	.word	0x0003e3ab
   39048:	00046416 	.word	0x00046416

0003904c <_read_r>:
   3904c:	b538      	push	{r3, r4, r5, lr}
   3904e:	4604      	mov	r4, r0
   39050:	4d06      	ldr	r5, [pc, #24]	; (3906c <_read_r+0x20>)
   39052:	4608      	mov	r0, r1
   39054:	4611      	mov	r1, r2
   39056:	2200      	movs	r2, #0
   39058:	602a      	str	r2, [r5, #0]
   3905a:	461a      	mov	r2, r3
   3905c:	f001 fa88 	bl	3a570 <_read>
   39060:	1c43      	adds	r3, r0, #1
   39062:	d102      	bne.n	3906a <_read_r+0x1e>
   39064:	682b      	ldr	r3, [r5, #0]
   39066:	b103      	cbz	r3, 3906a <_read_r+0x1e>
   39068:	6023      	str	r3, [r4, #0]
   3906a:	bd38      	pop	{r3, r4, r5, pc}
   3906c:	2001d8e8 	.word	0x2001d8e8

00039070 <raise>:
   39070:	4b02      	ldr	r3, [pc, #8]	; (3907c <raise+0xc>)
   39072:	4601      	mov	r1, r0
   39074:	6818      	ldr	r0, [r3, #0]
   39076:	f006 b880 	b.w	3f17a <_raise_r>
   3907a:	bf00      	nop
   3907c:	20014878 	.word	0x20014878

00039080 <_kill_r>:
   39080:	b538      	push	{r3, r4, r5, lr}
   39082:	2300      	movs	r3, #0
   39084:	4d06      	ldr	r5, [pc, #24]	; (390a0 <_kill_r+0x20>)
   39086:	4604      	mov	r4, r0
   39088:	4608      	mov	r0, r1
   3908a:	4611      	mov	r1, r2
   3908c:	602b      	str	r3, [r5, #0]
   3908e:	f001 fa81 	bl	3a594 <_kill>
   39092:	1c43      	adds	r3, r0, #1
   39094:	d102      	bne.n	3909c <_kill_r+0x1c>
   39096:	682b      	ldr	r3, [r5, #0]
   39098:	b103      	cbz	r3, 3909c <_kill_r+0x1c>
   3909a:	6023      	str	r3, [r4, #0]
   3909c:	bd38      	pop	{r3, r4, r5, pc}
   3909e:	bf00      	nop
   390a0:	2001d8e8 	.word	0x2001d8e8

000390a4 <_fstat_r>:
   390a4:	b538      	push	{r3, r4, r5, lr}
   390a6:	2300      	movs	r3, #0
   390a8:	4d06      	ldr	r5, [pc, #24]	; (390c4 <_fstat_r+0x20>)
   390aa:	4604      	mov	r4, r0
   390ac:	4608      	mov	r0, r1
   390ae:	4611      	mov	r1, r2
   390b0:	602b      	str	r3, [r5, #0]
   390b2:	f001 fa73 	bl	3a59c <_fstat>
   390b6:	1c43      	adds	r3, r0, #1
   390b8:	d102      	bne.n	390c0 <_fstat_r+0x1c>
   390ba:	682b      	ldr	r3, [r5, #0]
   390bc:	b103      	cbz	r3, 390c0 <_fstat_r+0x1c>
   390be:	6023      	str	r3, [r4, #0]
   390c0:	bd38      	pop	{r3, r4, r5, pc}
   390c2:	bf00      	nop
   390c4:	2001d8e8 	.word	0x2001d8e8

000390c8 <_isatty_r>:
   390c8:	b538      	push	{r3, r4, r5, lr}
   390ca:	2300      	movs	r3, #0
   390cc:	4d05      	ldr	r5, [pc, #20]	; (390e4 <_isatty_r+0x1c>)
   390ce:	4604      	mov	r4, r0
   390d0:	4608      	mov	r0, r1
   390d2:	602b      	str	r3, [r5, #0]
   390d4:	f001 fa59 	bl	3a58a <_isatty>
   390d8:	1c43      	adds	r3, r0, #1
   390da:	d102      	bne.n	390e2 <_isatty_r+0x1a>
   390dc:	682b      	ldr	r3, [r5, #0]
   390de:	b103      	cbz	r3, 390e2 <_isatty_r+0x1a>
   390e0:	6023      	str	r3, [r4, #0]
   390e2:	bd38      	pop	{r3, r4, r5, pc}
   390e4:	2001d8e8 	.word	0x2001d8e8

000390e8 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   390e8:	b40c      	push	{r2, r3}
   390ea:	4603      	mov	r3, r0
   390ec:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   390ee:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   390f0:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   390f2:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   390f4:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   390f8:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   390fa:	4798      	blx	r3
	va_end(args);

	return res;
}
   390fc:	b003      	add	sp, #12
   390fe:	f85d eb04 	ldr.w	lr, [sp], #4
   39102:	b002      	add	sp, #8
   39104:	4770      	bx	lr

00039106 <sys_notify_validate>:
	if (notify == NULL) {
   39106:	b140      	cbz	r0, 3911a <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   39108:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3910a:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   3910e:	2b02      	cmp	r3, #2
   39110:	d006      	beq.n	39120 <sys_notify_validate+0x1a>
   39112:	2b03      	cmp	r3, #3
   39114:	d004      	beq.n	39120 <sys_notify_validate+0x1a>
   39116:	2b01      	cmp	r3, #1
   39118:	d005      	beq.n	39126 <sys_notify_validate+0x20>
		return -EINVAL;
   3911a:	f06f 0015 	mvn.w	r0, #21
}
   3911e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   39120:	6803      	ldr	r3, [r0, #0]
   39122:	2b00      	cmp	r3, #0
   39124:	d0f9      	beq.n	3911a <sys_notify_validate+0x14>
		notify->result = 0;
   39126:	2300      	movs	r3, #0
   39128:	6083      	str	r3, [r0, #8]
   3912a:	4618      	mov	r0, r3
   3912c:	4770      	bx	lr

0003912e <arch_printk_char_out>:
}
   3912e:	2000      	movs	r0, #0
   39130:	4770      	bx	lr

00039132 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   39132:	b40f      	push	{r0, r1, r2, r3}
   39134:	b507      	push	{r0, r1, r2, lr}
   39136:	a904      	add	r1, sp, #16
   39138:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   3913c:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   3913e:	f7e6 fb35 	bl	1f7ac <vprintk>
	}
	va_end(ap);
}
   39142:	b003      	add	sp, #12
   39144:	f85d eb04 	ldr.w	lr, [sp], #4
   39148:	b004      	add	sp, #16
   3914a:	4770      	bx	lr

0003914c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3914c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   3914e:	f013 0307 	ands.w	r3, r3, #7
   39152:	d105      	bne.n	39160 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   39154:	6803      	ldr	r3, [r0, #0]
   39156:	2b00      	cmp	r3, #0
		evt = EVT_START;
   39158:	bf0c      	ite	eq
   3915a:	2000      	moveq	r0, #0
   3915c:	2003      	movne	r0, #3
   3915e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   39160:	2b02      	cmp	r3, #2
   39162:	d105      	bne.n	39170 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   39164:	8bc3      	ldrh	r3, [r0, #30]
   39166:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   39168:	bf14      	ite	ne
   3916a:	2000      	movne	r0, #0
   3916c:	2004      	moveq	r0, #4
   3916e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   39170:	2b01      	cmp	r3, #1
   39172:	d105      	bne.n	39180 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   39174:	6803      	ldr	r3, [r0, #0]
   39176:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   39178:	bf0c      	ite	eq
   3917a:	2000      	moveq	r0, #0
   3917c:	2005      	movne	r0, #5
   3917e:	4770      	bx	lr
	int evt = EVT_NOP;
   39180:	2000      	movs	r0, #0
}
   39182:	4770      	bx	lr

00039184 <notify_one>:
{
   39184:	b573      	push	{r0, r1, r4, r5, r6, lr}
   39186:	460d      	mov	r5, r1
   39188:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3918a:	4619      	mov	r1, r3
   3918c:	1d28      	adds	r0, r5, #4
{
   3918e:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   39190:	9300      	str	r3, [sp, #0]
   39192:	f7e6 facd 	bl	1f730 <sys_notify_finalize>
	if (cb) {
   39196:	4604      	mov	r4, r0
   39198:	b140      	cbz	r0, 391ac <notify_one+0x28>
		cb(mgr, cli, state, res);
   3919a:	e9dd 3200 	ldrd	r3, r2, [sp]
   3919e:	4629      	mov	r1, r5
   391a0:	4630      	mov	r0, r6
   391a2:	46a4      	mov	ip, r4
}
   391a4:	b002      	add	sp, #8
   391a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   391aa:	4760      	bx	ip
}
   391ac:	b002      	add	sp, #8
   391ae:	bd70      	pop	{r4, r5, r6, pc}

000391b0 <validate_args>:
{
   391b0:	b510      	push	{r4, lr}
   391b2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   391b4:	b140      	cbz	r0, 391c8 <validate_args+0x18>
   391b6:	b139      	cbz	r1, 391c8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   391b8:	1d08      	adds	r0, r1, #4
   391ba:	f7ff ffa4 	bl	39106 <sys_notify_validate>
	if ((rv == 0)
   391be:	b928      	cbnz	r0, 391cc <validate_args+0x1c>
	    && ((cli->notify.flags
   391c0:	68a3      	ldr	r3, [r4, #8]
   391c2:	f033 0303 	bics.w	r3, r3, #3
   391c6:	d001      	beq.n	391cc <validate_args+0x1c>
		rv = -EINVAL;
   391c8:	f06f 0015 	mvn.w	r0, #21
}
   391cc:	bd10      	pop	{r4, pc}

000391ce <onoff_manager_init>:
{
   391ce:	b538      	push	{r3, r4, r5, lr}
   391d0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   391d2:	4605      	mov	r5, r0
   391d4:	b158      	cbz	r0, 391ee <onoff_manager_init+0x20>
	    || (transitions == NULL)
   391d6:	b151      	cbz	r1, 391ee <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   391d8:	680b      	ldr	r3, [r1, #0]
   391da:	b143      	cbz	r3, 391ee <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   391dc:	684b      	ldr	r3, [r1, #4]
   391de:	b133      	cbz	r3, 391ee <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   391e0:	2220      	movs	r2, #32
   391e2:	2100      	movs	r1, #0
   391e4:	f004 fee1 	bl	3dfaa <memset>
	return 0;
   391e8:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   391ea:	612c      	str	r4, [r5, #16]
}
   391ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   391ee:	f06f 0015 	mvn.w	r0, #21
   391f2:	e7fb      	b.n	391ec <onoff_manager_init+0x1e>

000391f4 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   391f4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   391f6:	f7fb f8bf 	bl	34378 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   391fa:	2000      	movs	r0, #0
   391fc:	bd08      	pop	{r3, pc}

000391fe <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   391fe:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   39200:	f7fb f8fe 	bl	34400 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   39204:	f110 0f0b 	cmn.w	r0, #11
   39208:	d005      	beq.n	39216 <sys_sem_take+0x18>
   3920a:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   3920e:	bf08      	it	eq
   39210:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   39214:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   39216:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   3921a:	e7fb      	b.n	39214 <sys_sem_take+0x16>

0003921c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3921c:	4604      	mov	r4, r0
   3921e:	b508      	push	{r3, lr}
   39220:	4608      	mov	r0, r1
   39222:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   39224:	461a      	mov	r2, r3
   39226:	47a0      	blx	r4
	return z_impl_k_current_get();
   39228:	f7fc fd8e 	bl	35d48 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   3922c:	f7ea fc66 	bl	23afc <z_impl_k_thread_abort>

00039230 <chunk_field>:
	if (big_heap(h)) {
   39230:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   39232:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   39236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   3923a:	bf2c      	ite	cs
   3923c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   39240:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   39244:	4770      	bx	lr

00039246 <chunk_set>:
	void *cmem = &buf[c];
   39246:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   3924a:	6880      	ldr	r0, [r0, #8]
   3924c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   39250:	bf2c      	ite	cs
   39252:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   39256:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   3925a:	4770      	bx	lr

0003925c <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3925c:	2201      	movs	r2, #1
{
   3925e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   39260:	f7ff ffe6 	bl	39230 <chunk_field>
}
   39264:	0840      	lsrs	r0, r0, #1
   39266:	bd08      	pop	{r3, pc}

00039268 <set_chunk_used>:
	if (big_heap(h)) {
   39268:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   3926a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   3926e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   39272:	d308      	bcc.n	39286 <set_chunk_used+0x1e>
		if (used) {
   39274:	684b      	ldr	r3, [r1, #4]
   39276:	b11a      	cbz	r2, 39280 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   39278:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3927c:	604b      	str	r3, [r1, #4]
   3927e:	4770      	bx	lr
   39280:	f023 0301 	bic.w	r3, r3, #1
   39284:	e7fa      	b.n	3927c <set_chunk_used+0x14>
		if (used) {
   39286:	884b      	ldrh	r3, [r1, #2]
   39288:	b11a      	cbz	r2, 39292 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   3928a:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3928e:	804b      	strh	r3, [r1, #2]
}
   39290:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   39292:	f023 0301 	bic.w	r3, r3, #1
   39296:	e7fa      	b.n	3928e <set_chunk_used+0x26>

00039298 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   39298:	0053      	lsls	r3, r2, #1
   3929a:	2201      	movs	r2, #1
   3929c:	f7ff bfd3 	b.w	39246 <chunk_set>

000392a0 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   392a0:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   392a2:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   392a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   392a8:	bf2c      	ite	cs
   392aa:	2008      	movcs	r0, #8
   392ac:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   392ae:	4408      	add	r0, r1
}
   392b0:	08c0      	lsrs	r0, r0, #3
   392b2:	4770      	bx	lr

000392b4 <bucket_idx>:
{
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   392b4:	460a      	mov	r2, r1
   392b6:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   392b8:	2101      	movs	r1, #1
   392ba:	f7ff fff1 	bl	392a0 <bytes_to_chunksz>
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   392be:	3201      	adds	r2, #1
   392c0:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   392c2:	fab0 f080 	clz	r0, r0
}
   392c6:	f1c0 001f 	rsb	r0, r0, #31
   392ca:	bd08      	pop	{r3, pc}

000392cc <merge_chunks>:
{
   392cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   392ce:	4616      	mov	r6, r2
   392d0:	4604      	mov	r4, r0
   392d2:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   392d4:	f7ff ffc2 	bl	3925c <chunk_size>
   392d8:	4631      	mov	r1, r6
   392da:	4605      	mov	r5, r0
   392dc:	4620      	mov	r0, r4
   392de:	f7ff ffbd 	bl	3925c <chunk_size>
   392e2:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
   392e4:	461a      	mov	r2, r3
   392e6:	4639      	mov	r1, r7
   392e8:	4620      	mov	r0, r4
   392ea:	9301      	str	r3, [sp, #4]
   392ec:	f7ff ffd4 	bl	39298 <set_chunk_size>
	return c + chunk_size(h, c);
   392f0:	4631      	mov	r1, r6
   392f2:	4620      	mov	r0, r4
   392f4:	f7ff ffb2 	bl	3925c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   392f8:	2200      	movs	r2, #0
   392fa:	1831      	adds	r1, r6, r0
   392fc:	4620      	mov	r0, r4
   392fe:	9b01      	ldr	r3, [sp, #4]
}
   39300:	b003      	add	sp, #12
   39302:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   39306:	f7ff bf9e 	b.w	39246 <chunk_set>

0003930a <split_chunks>:
{
   3930a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3930c:	4614      	mov	r4, r2
   3930e:	460e      	mov	r6, r1
   39310:	4605      	mov	r5, r0
	chunksz_t sz0 = chunk_size(h, lc);
   39312:	f7ff ffa3 	bl	3925c <chunk_size>
	chunksz_t lsz = rc - lc;
   39316:	1ba3      	subs	r3, r4, r6
	chunksz_t rsz = sz0 - lsz;
   39318:	1b32      	subs	r2, r6, r4
   3931a:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   3931c:	4631      	mov	r1, r6
   3931e:	461a      	mov	r2, r3
   39320:	4628      	mov	r0, r5
   39322:	9301      	str	r3, [sp, #4]
   39324:	f7ff ffb8 	bl	39298 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   39328:	463a      	mov	r2, r7
   3932a:	4621      	mov	r1, r4
   3932c:	4628      	mov	r0, r5
   3932e:	f7ff ffb3 	bl	39298 <set_chunk_size>
   39332:	9b01      	ldr	r3, [sp, #4]
   39334:	2200      	movs	r2, #0
   39336:	4621      	mov	r1, r4
   39338:	4628      	mov	r0, r5
   3933a:	f7ff ff84 	bl	39246 <chunk_set>
	return c + chunk_size(h, c);
   3933e:	4621      	mov	r1, r4
   39340:	4628      	mov	r0, r5
   39342:	f7ff ff8b 	bl	3925c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   39346:	463b      	mov	r3, r7
   39348:	1821      	adds	r1, r4, r0
   3934a:	2200      	movs	r2, #0
   3934c:	4628      	mov	r0, r5
}
   3934e:	b003      	add	sp, #12
   39350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   39354:	f7ff bf77 	b.w	39246 <chunk_set>

00039358 <free_list_remove_bidx>:
{
   39358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3935c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   3935e:	2203      	movs	r2, #3
   39360:	460e      	mov	r6, r1
   39362:	4604      	mov	r4, r0
   39364:	f7ff ff64 	bl	39230 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   39368:	4286      	cmp	r6, r0
   3936a:	4605      	mov	r5, r0
   3936c:	f107 0804 	add.w	r8, r7, #4
   39370:	d10b      	bne.n	3938a <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   39372:	2301      	movs	r3, #1
   39374:	fa03 f707 	lsl.w	r7, r3, r7
   39378:	68e3      	ldr	r3, [r4, #12]
   3937a:	ea23 0307 	bic.w	r3, r3, r7
   3937e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   39380:	2300      	movs	r3, #0
   39382:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   39386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   3938a:	4631      	mov	r1, r6
   3938c:	2202      	movs	r2, #2
   3938e:	4620      	mov	r0, r4
   39390:	f7ff ff4e 	bl	39230 <chunk_field>
   39394:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   39396:	462b      	mov	r3, r5
   39398:	4601      	mov	r1, r0
   3939a:	2203      	movs	r2, #3
   3939c:	4620      	mov	r0, r4
		b->next = second;
   3939e:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   393a2:	f7ff ff50 	bl	39246 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   393a6:	4633      	mov	r3, r6
   393a8:	4629      	mov	r1, r5
   393aa:	4620      	mov	r0, r4
}
   393ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   393b0:	2202      	movs	r2, #2
   393b2:	f7ff bf48 	b.w	39246 <chunk_set>

000393b6 <alloc_chunk>:
{
   393b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   393ba:	4604      	mov	r4, r0
   393bc:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   393be:	f7ff ff79 	bl	392b4 <bucket_idx>
   393c2:	eb04 0980 	add.w	r9, r4, r0, lsl #2
	if (b->next) {
   393c6:	f8d9 8010 	ldr.w	r8, [r9, #16]
	int bi = bucket_idx(h, sz);
   393ca:	4605      	mov	r5, r0
	if (b->next) {
   393cc:	f1b8 0f00 	cmp.w	r8, #0
   393d0:	d01c      	beq.n	3940c <alloc_chunk+0x56>
   393d2:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   393d4:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   393d8:	4620      	mov	r0, r4
   393da:	9101      	str	r1, [sp, #4]
   393dc:	f7ff ff3e 	bl	3925c <chunk_size>
   393e0:	42b8      	cmp	r0, r7
   393e2:	9901      	ldr	r1, [sp, #4]
   393e4:	d308      	bcc.n	393f8 <alloc_chunk+0x42>
				free_list_remove_bidx(h, c, bi);
   393e6:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   393e8:	4620      	mov	r0, r4
   393ea:	f7ff ffb5 	bl	39358 <free_list_remove_bidx>
   393ee:	9901      	ldr	r1, [sp, #4]
}
   393f0:	4608      	mov	r0, r1
   393f2:	b003      	add	sp, #12
   393f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return chunk_field(h, c, FREE_NEXT);
   393f8:	2203      	movs	r2, #3
   393fa:	4620      	mov	r0, r4
   393fc:	f7ff ff18 	bl	39230 <chunk_field>
		} while (--i && b->next != first);
   39400:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   39402:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   39406:	d001      	beq.n	3940c <alloc_chunk+0x56>
   39408:	4580      	cmp	r8, r0
   3940a:	d1e3      	bne.n	393d4 <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   3940c:	f04f 31ff 	mov.w	r1, #4294967295
   39410:	68e3      	ldr	r3, [r4, #12]
   39412:	3501      	adds	r5, #1
   39414:	40a9      	lsls	r1, r5
	if (bmask != 0U) {
   39416:	4019      	ands	r1, r3
   39418:	d0ea      	beq.n	393f0 <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   3941a:	fa91 f2a1 	rbit	r2, r1
   3941e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   39422:	1d13      	adds	r3, r2, #4
   39424:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   39428:	9101      	str	r1, [sp, #4]
   3942a:	e7dd      	b.n	393e8 <alloc_chunk+0x32>

0003942c <free_list_add>:
{
   3942c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39430:	4604      	mov	r4, r0
   39432:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   39434:	f7ff ff12 	bl	3925c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   39438:	68a3      	ldr	r3, [r4, #8]
   3943a:	4601      	mov	r1, r0
   3943c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   39440:	d301      	bcc.n	39446 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   39442:	2801      	cmp	r0, #1
   39444:	d035      	beq.n	394b2 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   39446:	4620      	mov	r0, r4
   39448:	f7ff ff34 	bl	392b4 <bucket_idx>
	if (b->next == 0U) {
   3944c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   39450:	6916      	ldr	r6, [r2, #16]
   39452:	b99e      	cbnz	r6, 3947c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   39454:	2301      	movs	r3, #1
   39456:	fa03 f000 	lsl.w	r0, r3, r0
   3945a:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   3945c:	4629      	mov	r1, r5
   3945e:	4303      	orrs	r3, r0
   39460:	60e3      	str	r3, [r4, #12]
   39462:	4620      	mov	r0, r4
		b->next = c;
   39464:	6115      	str	r5, [r2, #16]
   39466:	462b      	mov	r3, r5
   39468:	2202      	movs	r2, #2
   3946a:	f7ff feec 	bl	39246 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   3946e:	2203      	movs	r2, #3
   39470:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   39472:	4620      	mov	r0, r4
}
   39474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   39478:	f7ff bee5 	b.w	39246 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   3947c:	2202      	movs	r2, #2
   3947e:	4631      	mov	r1, r6
   39480:	4620      	mov	r0, r4
   39482:	f7ff fed5 	bl	39230 <chunk_field>
   39486:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   39488:	4603      	mov	r3, r0
   3948a:	2202      	movs	r2, #2
   3948c:	4629      	mov	r1, r5
   3948e:	4620      	mov	r0, r4
   39490:	f7ff fed9 	bl	39246 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   39494:	4633      	mov	r3, r6
   39496:	2203      	movs	r2, #3
   39498:	4629      	mov	r1, r5
   3949a:	4620      	mov	r0, r4
   3949c:	f7ff fed3 	bl	39246 <chunk_set>
   394a0:	2203      	movs	r2, #3
   394a2:	4639      	mov	r1, r7
   394a4:	462b      	mov	r3, r5
   394a6:	4620      	mov	r0, r4
   394a8:	f7ff fecd 	bl	39246 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   394ac:	2202      	movs	r2, #2
   394ae:	4631      	mov	r1, r6
   394b0:	e7df      	b.n	39472 <free_list_add+0x46>
   394b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000394b6 <free_list_remove>:
{
   394b6:	b538      	push	{r3, r4, r5, lr}
   394b8:	4604      	mov	r4, r0
   394ba:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   394bc:	f7ff fece 	bl	3925c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   394c0:	68a3      	ldr	r3, [r4, #8]
   394c2:	4601      	mov	r1, r0
   394c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   394c8:	d301      	bcc.n	394ce <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   394ca:	2801      	cmp	r0, #1
   394cc:	d009      	beq.n	394e2 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   394ce:	4620      	mov	r0, r4
   394d0:	f7ff fef0 	bl	392b4 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   394d4:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   394d6:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   394d8:	4620      	mov	r0, r4
}
   394da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   394de:	f7ff bf3b 	b.w	39358 <free_list_remove_bidx>
}
   394e2:	bd38      	pop	{r3, r4, r5, pc}

000394e4 <free_chunk>:
{
   394e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   394e6:	4605      	mov	r5, r0
   394e8:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   394ea:	f7ff feb7 	bl	3925c <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   394ee:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   394f0:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   394f2:	4628      	mov	r0, r5
   394f4:	9101      	str	r1, [sp, #4]
   394f6:	f7ff fe9b 	bl	39230 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   394fa:	f010 0f01 	tst.w	r0, #1
   394fe:	9901      	ldr	r1, [sp, #4]
   39500:	d10b      	bne.n	3951a <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
   39502:	4628      	mov	r0, r5
   39504:	f7ff ffd7 	bl	394b6 <free_list_remove>
	return c + chunk_size(h, c);
   39508:	4621      	mov	r1, r4
   3950a:	4628      	mov	r0, r5
   3950c:	f7ff fea6 	bl	3925c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   39510:	4621      	mov	r1, r4
   39512:	1822      	adds	r2, r4, r0
   39514:	4628      	mov	r0, r5
   39516:	f7ff fed9 	bl	392cc <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   3951a:	2200      	movs	r2, #0
   3951c:	4621      	mov	r1, r4
   3951e:	4628      	mov	r0, r5
   39520:	f7ff fe86 	bl	39230 <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   39524:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   39526:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   39528:	4628      	mov	r0, r5
   3952a:	9101      	str	r1, [sp, #4]
   3952c:	f7ff fe80 	bl	39230 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   39530:	f010 0601 	ands.w	r6, r0, #1
   39534:	9901      	ldr	r1, [sp, #4]
   39536:	d112      	bne.n	3955e <free_chunk+0x7a>
		free_list_remove(h, left_chunk(h, c));
   39538:	4628      	mov	r0, r5
   3953a:	f7ff ffbc 	bl	394b6 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   3953e:	4621      	mov	r1, r4
   39540:	4632      	mov	r2, r6
   39542:	4628      	mov	r0, r5
   39544:	f7ff fe74 	bl	39230 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   39548:	4622      	mov	r2, r4
   3954a:	1a21      	subs	r1, r4, r0
   3954c:	4628      	mov	r0, r5
   3954e:	f7ff febd 	bl	392cc <merge_chunks>
   39552:	4621      	mov	r1, r4
   39554:	4632      	mov	r2, r6
   39556:	4628      	mov	r0, r5
   39558:	f7ff fe6a 	bl	39230 <chunk_field>
   3955c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   3955e:	4621      	mov	r1, r4
   39560:	4628      	mov	r0, r5
}
   39562:	b002      	add	sp, #8
   39564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   39568:	f7ff bf60 	b.w	3942c <free_list_add>

0003956c <sys_heap_alloc>:
{
   3956c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   3956e:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   39570:	b909      	cbnz	r1, 39576 <sys_heap_alloc+0xa>
		return NULL;
   39572:	2000      	movs	r0, #0
}
   39574:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   39576:	68a2      	ldr	r2, [r4, #8]
   39578:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   3957c:	d9f9      	bls.n	39572 <sys_heap_alloc+0x6>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   3957e:	4620      	mov	r0, r4
   39580:	f7ff fe8e 	bl	392a0 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   39584:	4601      	mov	r1, r0
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   39586:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   39588:	4620      	mov	r0, r4
   3958a:	f7ff ff14 	bl	393b6 <alloc_chunk>
	if (c == 0U) {
   3958e:	4605      	mov	r5, r0
   39590:	2800      	cmp	r0, #0
   39592:	d0ee      	beq.n	39572 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   39594:	4601      	mov	r1, r0
   39596:	4620      	mov	r0, r4
   39598:	f7ff fe60 	bl	3925c <chunk_size>
   3959c:	42b0      	cmp	r0, r6
   3959e:	d909      	bls.n	395b4 <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   395a0:	442e      	add	r6, r5
   395a2:	4629      	mov	r1, r5
   395a4:	4620      	mov	r0, r4
   395a6:	4632      	mov	r2, r6
   395a8:	f7ff feaf 	bl	3930a <split_chunks>
		free_list_add(h, c + chunk_sz);
   395ac:	4631      	mov	r1, r6
   395ae:	4620      	mov	r0, r4
   395b0:	f7ff ff3c 	bl	3942c <free_list_add>
	set_chunk_used(h, c, true);
   395b4:	4620      	mov	r0, r4
   395b6:	2201      	movs	r2, #1
   395b8:	4629      	mov	r1, r5
   395ba:	f7ff fe55 	bl	39268 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   395be:	68a3      	ldr	r3, [r4, #8]
   395c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   395c4:	bf2c      	ite	cs
   395c6:	2008      	movcs	r0, #8
   395c8:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   395ca:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   395ce:	4420      	add	r0, r4
	return chunk_mem(h, c);
   395d0:	e7d0      	b.n	39574 <sys_heap_alloc+0x8>

000395d2 <_ldiv5>:
{
   395d2:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   395d6:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   395da:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   395de:	fba2 bc03 	umull	fp, ip, r2, r3
   395e2:	eb1b 0603 	adds.w	r6, fp, r3
   395e6:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   395ea:	462f      	mov	r7, r5
   395ec:	2600      	movs	r6, #0
	result += (uint64_t)v_hi * m;
   395ee:	fba4 4503 	umull	r4, r5, r4, r3
   395f2:	eb1b 0204 	adds.w	r2, fp, r4
   395f6:	eb4c 0105 	adc.w	r1, ip, r5
   395fa:	19d2      	adds	r2, r2, r7
	result >>= 32;
   395fc:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   395fe:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   39602:	1863      	adds	r3, r4, r1
   39604:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   39608:	e9c0 3200 	strd	r3, r2, [r0]
}
   3960c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

00039610 <_get_digit>:
	if (*digit_count > 0) {
   39610:	680b      	ldr	r3, [r1, #0]
{
   39612:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   39614:	2b00      	cmp	r3, #0
   39616:	dd10      	ble.n	3963a <_get_digit+0x2a>
		--*digit_count;
   39618:	3b01      	subs	r3, #1
   3961a:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   3961c:	210a      	movs	r1, #10
   3961e:	6802      	ldr	r2, [r0, #0]
   39620:	6844      	ldr	r4, [r0, #4]
   39622:	fba2 5601 	umull	r5, r6, r2, r1
   39626:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   3962a:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   3962e:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   39632:	0f31      	lsrs	r1, r6, #28
   39634:	3130      	adds	r1, #48	; 0x30
}
   39636:	4608      	mov	r0, r1
   39638:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   3963a:	2130      	movs	r1, #48	; 0x30
   3963c:	e7fb      	b.n	39636 <_get_digit+0x26>

0003963e <outs>:
{
   3963e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39642:	4680      	mov	r8, r0
   39644:	4689      	mov	r9, r1
   39646:	4616      	mov	r6, r2
   39648:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3964a:	4615      	mov	r5, r2
   3964c:	42bd      	cmp	r5, r7
   3964e:	eba5 0406 	sub.w	r4, r5, r6
   39652:	d305      	bcc.n	39660 <outs+0x22>
   39654:	b10f      	cbz	r7, 3965a <outs+0x1c>
	return (int)count;
   39656:	4620      	mov	r0, r4
   39658:	e008      	b.n	3966c <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3965a:	782b      	ldrb	r3, [r5, #0]
   3965c:	2b00      	cmp	r3, #0
   3965e:	d0fa      	beq.n	39656 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   39660:	4649      	mov	r1, r9
   39662:	f815 0b01 	ldrb.w	r0, [r5], #1
   39666:	47c0      	blx	r8
		if (rc < 0) {
   39668:	2800      	cmp	r0, #0
   3966a:	daef      	bge.n	3964c <outs+0xe>
}
   3966c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00039670 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   39670:	4040      	eors	r0, r0
   39672:	f380 8811 	msr	BASEPRI, r0
   39676:	f04f 0004 	mov.w	r0, #4
   3967a:	df02      	svc	2
}
   3967c:	4770      	bx	lr

0003967e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_UI_BUZZER_MIN_FREQUENCY, 100);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_UI_BUZZER_MAX_FREQUENCY, 10000);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_UI_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_UI_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   3967e:	4770      	bx	lr

00039680 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   39680:	f7f4 bb94 	b.w	2ddac <SystemInit>

00039684 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   39684:	b084      	sub	sp, #16
   39686:	ab04      	add	r3, sp, #16
   39688:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   3968c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   39690:	2b06      	cmp	r3, #6
   39692:	d108      	bne.n	396a6 <pm_power_state_set+0x22>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   39694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   39698:	2201      	movs	r2, #1
   3969a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   3969e:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   396a2:	bf20      	wfe
    while (true)
   396a4:	e7fd      	b.n	396a2 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   396a6:	b004      	add	sp, #16
   396a8:	4770      	bx	lr

000396aa <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   396aa:	b084      	sub	sp, #16
   396ac:	ab04      	add	r3, sp, #16
   396ae:	e903 0007 	stmdb	r3, {r0, r1, r2}
   396b2:	2300      	movs	r3, #0
   396b4:	f383 8811 	msr	BASEPRI, r3
   396b8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   396bc:	b004      	add	sp, #16
   396be:	4770      	bx	lr

000396c0 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   396c0:	6843      	ldr	r3, [r0, #4]
}
   396c2:	7958      	ldrb	r0, [r3, #5]
   396c4:	4770      	bx	lr

000396c6 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   396c6:	f7e9 bca7 	b.w	23018 <sys_clock_cycle_get_32>

000396ca <dummy_timestamp>:
   396ca:	2000      	movs	r0, #0
   396cc:	4770      	bx	lr

000396ce <log_string_sync>:
{
   396ce:	b40e      	push	{r1, r2, r3}
   396d0:	b503      	push	{r0, r1, lr}
   396d2:	aa03      	add	r2, sp, #12
   396d4:	f852 1b04 	ldr.w	r1, [r2], #4
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   396d8:	2300      	movs	r3, #0
	va_start(ap, fmt);
   396da:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   396dc:	f7e7 fc76 	bl	20fcc <log_generic>
}
   396e0:	b002      	add	sp, #8
   396e2:	f85d eb04 	ldr.w	lr, [sp], #4
   396e6:	b003      	add	sp, #12
   396e8:	4770      	bx	lr

000396ea <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   396ea:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   396ec:	f7e7 fce0 	bl	210b0 <log_init>
	}

	return 0;
}
   396f0:	2000      	movs	r0, #0
   396f2:	bd08      	pop	{r3, pc}

000396f4 <z_log_strdup>:
}
   396f4:	4770      	bx	lr

000396f6 <out_func>:
{
   396f6:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   396f8:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   396fc:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   396fe:	2101      	movs	r1, #1
   39700:	6852      	ldr	r2, [r2, #4]
   39702:	a801      	add	r0, sp, #4
   39704:	4798      	blx	r3
}
   39706:	2000      	movs	r0, #0
   39708:	b003      	add	sp, #12
   3970a:	f85d fb04 	ldr.w	pc, [sp], #4

0003970e <buffer_write>:
{
   3970e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39710:	4606      	mov	r6, r0
   39712:	460d      	mov	r5, r1
   39714:	4614      	mov	r4, r2
   39716:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   39718:	4621      	mov	r1, r4
   3971a:	4628      	mov	r0, r5
   3971c:	463a      	mov	r2, r7
   3971e:	47b0      	blx	r6
	} while (len != 0);
   39720:	1a24      	subs	r4, r4, r0
		buf += processed;
   39722:	4405      	add	r5, r0
	} while (len != 0);
   39724:	d1f8      	bne.n	39718 <buffer_write+0xa>
}
   39726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00039728 <log_output_flush>:
		     output->control_block->offset,
   39728:	6842      	ldr	r2, [r0, #4]
{
   3972a:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   3972c:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   39730:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   39732:	6881      	ldr	r1, [r0, #8]
   39734:	6800      	ldr	r0, [r0, #0]
   39736:	f7ff ffea 	bl	3970e <buffer_write>
	output->control_block->offset = 0;
   3973a:	2200      	movs	r2, #0
   3973c:	6863      	ldr	r3, [r4, #4]
   3973e:	601a      	str	r2, [r3, #0]
}
   39740:	bd10      	pop	{r4, pc}

00039742 <fcb_append_to_scratch>:
{
   39742:	b538      	push	{r3, r4, r5, lr}
   39744:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   39746:	6a41      	ldr	r1, [r0, #36]	; 0x24
   39748:	f000 fa47 	bl	39bda <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   3974c:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   3974e:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   39750:	4298      	cmp	r0, r3
   39752:	d00f      	beq.n	39774 <fcb_append_to_scratch+0x32>
	if (!sector) {
   39754:	b170      	cbz	r0, 39774 <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   39756:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   39758:	4601      	mov	r1, r0
   3975a:	3201      	adds	r2, #1
   3975c:	4620      	mov	r0, r4
   3975e:	b292      	uxth	r2, r2
   39760:	f000 f8ca 	bl	398f8 <fcb_sector_hdr_init>
	if (rc) {
   39764:	b928      	cbnz	r0, 39772 <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   39766:	2308      	movs	r3, #8
   39768:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   3976a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   3976c:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   3976e:	3301      	adds	r3, #1
   39770:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   39772:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   39774:	f06f 001b 	mvn.w	r0, #27
   39778:	e7fb      	b.n	39772 <fcb_append_to_scratch+0x30>

0003977a <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   3977a:	b5f0      	push	{r4, r5, r6, r7, lr}
   3977c:	b083      	sub	sp, #12
   3977e:	4604      	mov	r4, r0
   39780:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   39782:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   39786:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   39788:	1dd3      	adds	r3, r2, #7
   3978a:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   3978e:	ebad 0d03 	sub.w	sp, sp, r3
   39792:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   39794:	21ff      	movs	r1, #255	; 0xff
   39796:	4630      	mov	r0, r6
   39798:	f004 fc07 	bl	3dfaa <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   3979c:	4632      	mov	r2, r6
   3979e:	4629      	mov	r1, r5
   397a0:	4620      	mov	r0, r4
   397a2:	f000 f970 	bl	39a86 <fcb_elem_crc8>
	if (rc) {
   397a6:	b9b0      	cbnz	r0, 397d6 <fcb_append_finish+0x5c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   397a8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   397ac:	89aa      	ldrh	r2, [r5, #12]
	if (fcb->f_align <= 1U) {
   397ae:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   397b0:	bf82      	ittt	hi
   397b2:	f102 32ff 	addhi.w	r2, r2, #4294967295
   397b6:	18d2      	addhi	r2, r2, r3
   397b8:	4258      	neghi	r0, r3
   397ba:	68a9      	ldr	r1, [r5, #8]
   397bc:	bf88      	it	hi
   397be:	4002      	andhi	r2, r0

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   397c0:	9300      	str	r3, [sp, #0]
   397c2:	440a      	add	r2, r1
   397c4:	4633      	mov	r3, r6
   397c6:	4620      	mov	r0, r4
   397c8:	6829      	ldr	r1, [r5, #0]
   397ca:	f000 f821 	bl	39810 <fcb_flash_write>
	if (rc) {
   397ce:	2800      	cmp	r0, #0
		return -EIO;
   397d0:	bf18      	it	ne
   397d2:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   397d6:	3704      	adds	r7, #4
   397d8:	46bd      	mov	sp, r7
   397da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000397dc <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   397dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
   397de:	b108      	cbz	r0, 397e4 <fcb_get_align+0x8>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   397e0:	f000 bcb2 	b.w	3a148 <flash_area_align>

	return align;
}
   397e4:	4770      	bx	lr

000397e6 <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   397e6:	b570      	push	{r4, r5, r6, lr}
   397e8:	4614      	mov	r4, r2
   397ea:	461a      	mov	r2, r3
   397ec:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   397ee:	684d      	ldr	r5, [r1, #4]
   397f0:	18e6      	adds	r6, r4, r3
   397f2:	42ae      	cmp	r6, r5
   397f4:	d809      	bhi.n	3980a <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   397f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
   397f8:	b120      	cbz	r0, 39804 <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   397fa:	6809      	ldr	r1, [r1, #0]
   397fc:	4421      	add	r1, r4
   397fe:	f000 fc24 	bl	3a04a <flash_area_read>

	if (rc != 0) {
   39802:	b108      	cbz	r0, 39808 <fcb_flash_read+0x22>
		return -EIO;
   39804:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   39808:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3980a:	f06f 0015 	mvn.w	r0, #21
   3980e:	e7fb      	b.n	39808 <fcb_flash_read+0x22>

00039810 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   39810:	b570      	push	{r4, r5, r6, lr}
   39812:	4614      	mov	r4, r2
   39814:	461a      	mov	r2, r3
   39816:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   39818:	684d      	ldr	r5, [r1, #4]
   3981a:	18e6      	adds	r6, r4, r3
   3981c:	42ae      	cmp	r6, r5
   3981e:	d809      	bhi.n	39834 <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   39820:	6b80      	ldr	r0, [r0, #56]	; 0x38
   39822:	b120      	cbz	r0, 3982e <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   39824:	6809      	ldr	r1, [r1, #0]
   39826:	4421      	add	r1, r4
   39828:	f000 fc2c 	bl	3a084 <flash_area_write>

	if (rc != 0) {
   3982c:	b108      	cbz	r0, 39832 <fcb_flash_write+0x22>
		return -EIO;
   3982e:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   39832:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   39834:	f06f 0015 	mvn.w	r0, #21
   39838:	e7fb      	b.n	39832 <fcb_flash_write+0x22>

0003983a <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   3983a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3983c:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3983e:	b120      	cbz	r0, 3984a <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   39840:	e9d1 1200 	ldrd	r1, r2, [r1]
   39844:	f000 fc50 	bl	3a0e8 <flash_area_erase>

	if (rc != 0) {
   39848:	b108      	cbz	r0, 3984e <fcb_erase_sector+0x14>
		return -EIO;
   3984a:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3984e:	bd08      	pop	{r3, pc}

00039850 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   39850:	b538      	push	{r3, r4, r5, lr}
   39852:	4604      	mov	r4, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   39854:	2500      	movs	r5, #0
	fa = fcb->f_active.fe_sector;
   39856:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   39858:	7963      	ldrb	r3, [r4, #5]
   3985a:	42ab      	cmp	r3, r5
   3985c:	dc01      	bgt.n	39862 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   3985e:	4628      	mov	r0, r5
   39860:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   39862:	4620      	mov	r0, r4
   39864:	f000 f9b9 	bl	39bda <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   39868:	6a23      	ldr	r3, [r4, #32]
		fa = fcb_getnext_sector(fcb, fa);
   3986a:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   3986c:	4283      	cmp	r3, r0
   3986e:	d0f6      	beq.n	3985e <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   39870:	3501      	adds	r5, #1
   39872:	e7f1      	b.n	39858 <fcb_free_sector_cnt+0x8>

00039874 <fcb_put_len>:
 * and if there is any data at all or both bytes are equal to erase value.
 */
int
fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   39874:	2a7f      	cmp	r2, #127	; 0x7f
{
   39876:	b510      	push	{r4, lr}
	if (len < 0x80) {
   39878:	d806      	bhi.n	39888 <fcb_put_len+0x14>
		buf[0] = len ^ ~fcb->f_erase_value;
   3987a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 1;
   3987e:	2001      	movs	r0, #1
		buf[0] = len ^ ~fcb->f_erase_value;
   39880:	405a      	eors	r2, r3
   39882:	43d2      	mvns	r2, r2
   39884:	700a      	strb	r2, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
		return 2;
	} else {
		return -EINVAL;
	}
}
   39886:	bd10      	pop	{r4, pc}
	} else if (len < FCB_MAX_LEN) {
   39888:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   3988c:	429a      	cmp	r2, r3
   3988e:	d80e      	bhi.n	398ae <fcb_put_len+0x3a>
		buf[0] = (len | 0x80) ^ ~fcb->f_erase_value;
   39890:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   39894:	f062 047f 	orn	r4, r2, #127	; 0x7f
   39898:	4063      	eors	r3, r4
   3989a:	43db      	mvns	r3, r3
   3989c:	700b      	strb	r3, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3989e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 2;
   398a2:	2002      	movs	r0, #2
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   398a4:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
   398a8:	43d2      	mvns	r2, r2
   398aa:	704a      	strb	r2, [r1, #1]
		return 2;
   398ac:	e7eb      	b.n	39886 <fcb_put_len+0x12>
		return -EINVAL;
   398ae:	f06f 0015 	mvn.w	r0, #21
   398b2:	e7e8      	b.n	39886 <fcb_put_len+0x12>

000398b4 <fcb_get_len>:

int
fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len)
{
   398b4:	b530      	push	{r4, r5, lr}
	int rc;

	if ((buf[0] ^ ~fcb->f_erase_value) & 0x80) {
   398b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   398ba:	780d      	ldrb	r5, [r1, #0]
   398bc:	ea83 0405 	eor.w	r4, r3, r5
   398c0:	f014 0f80 	tst.w	r4, #128	; 0x80
   398c4:	4620      	mov	r0, r4
   398c6:	d10f      	bne.n	398e8 <fcb_get_len+0x34>
		if ((buf[0] == fcb->f_erase_value) &&
   398c8:	42ab      	cmp	r3, r5
   398ca:	7849      	ldrb	r1, [r1, #1]
   398cc:	d101      	bne.n	398d2 <fcb_get_len+0x1e>
   398ce:	428b      	cmp	r3, r1
   398d0:	d00f      	beq.n	398f2 <fcb_get_len+0x3e>
		    (buf[1] == fcb->f_erase_value)) {
			return -ENOTSUP;
		}
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   398d2:	43c0      	mvns	r0, r0
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   398d4:	404b      	eors	r3, r1
   398d6:	01db      	lsls	r3, r3, #7
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   398d8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   398dc:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   398e0:	4303      	orrs	r3, r0
		rc = 2;
   398e2:	2002      	movs	r0, #2
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   398e4:	8013      	strh	r3, [r2, #0]
	} else {
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
		rc = 1;
	}
	return rc;
}
   398e6:	bd30      	pop	{r4, r5, pc}
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   398e8:	43e3      	mvns	r3, r4
   398ea:	b2db      	uxtb	r3, r3
		rc = 1;
   398ec:	2001      	movs	r0, #1
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   398ee:	8013      	strh	r3, [r2, #0]
		rc = 1;
   398f0:	e7f9      	b.n	398e6 <fcb_get_len+0x32>
			return -ENOTSUP;
   398f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   398f6:	e7f6      	b.n	398e6 <fcb_get_len+0x32>

000398f8 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   398f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const uint8_t ev = fcb->f_erase_value;
   398fa:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
	return (fcb->f_magic ^ ~MK32(ev));
   398fe:	6806      	ldr	r6, [r0, #0]
   39900:	0423      	lsls	r3, r4, #16
   39902:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   39906:	4323      	orrs	r3, r4
   39908:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   3990c:	4073      	eors	r3, r6
   3990e:	43db      	mvns	r3, r3
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb_flash_magic(fcb);
   39910:	9302      	str	r3, [sp, #8]
	fda.fd_ver = fcb->f_version;
   39912:	7903      	ldrb	r3, [r0, #4]
	fda._pad = fcb->f_erase_value;
	fda.fd_id = id;
   39914:	f8ad 200e 	strh.w	r2, [sp, #14]
	fda.fd_ver = fcb->f_version;
   39918:	f88d 300c 	strb.w	r3, [sp, #12]

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3991c:	2308      	movs	r3, #8
   3991e:	2200      	movs	r2, #0
   39920:	9300      	str	r3, [sp, #0]
   39922:	446b      	add	r3, sp
	fda._pad = fcb->f_erase_value;
   39924:	f88d 400d 	strb.w	r4, [sp, #13]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   39928:	f7ff ff72 	bl	39810 <fcb_flash_write>
	if (rc != 0) {
   3992c:	2800      	cmp	r0, #0
		return -EIO;
	}
	return 0;
}
   3992e:	bf18      	it	ne
   39930:	f06f 0004 	mvnne.w	r0, #4
   39934:	b004      	add	sp, #16
   39936:	bd70      	pop	{r4, r5, r6, pc}

00039938 <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   39938:	b530      	push	{r4, r5, lr}
   3993a:	4605      	mov	r5, r0
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   3993c:	4614      	mov	r4, r2
{
   3993e:	b085      	sub	sp, #20
	if (!fdap) {
   39940:	b902      	cbnz	r2, 39944 <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   39942:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   39944:	2308      	movs	r3, #8
   39946:	2200      	movs	r2, #0
   39948:	9300      	str	r3, [sp, #0]
   3994a:	4628      	mov	r0, r5
   3994c:	4623      	mov	r3, r4
   3994e:	f7ff ff4a 	bl	397e6 <fcb_flash_read>
	if (rc) {
   39952:	b9a0      	cbnz	r0, 3997e <fcb_sector_hdr_read+0x46>
		return -EIO;
	}
	if (fdap->fd_magic == MK32(fcb->f_erase_value)) {
   39954:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   39958:	6821      	ldr	r1, [r4, #0]
   3995a:	0413      	lsls	r3, r2, #16
   3995c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   39960:	4313      	orrs	r3, r2
   39962:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   39966:	4299      	cmp	r1, r3
   39968:	d007      	beq.n	3997a <fcb_sector_hdr_read+0x42>
   3996a:	682a      	ldr	r2, [r5, #0]
   3996c:	4053      	eors	r3, r2
   3996e:	43db      	mvns	r3, r3
		return 0;
	}
	if (fdap->fd_magic != fcb_flash_magic(fcb)) {
   39970:	4299      	cmp	r1, r3
		return -ENOMSG;
   39972:	bf0c      	ite	eq
   39974:	2001      	moveq	r0, #1
   39976:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   3997a:	b005      	add	sp, #20
   3997c:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3997e:	f06f 0004 	mvn.w	r0, #4
   39982:	e7fa      	b.n	3997a <fcb_sector_hdr_read+0x42>

00039984 <fcb_init>:
{
   39984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   39988:	688b      	ldr	r3, [r1, #8]
{
   3998a:	460c      	mov	r4, r1
   3998c:	b085      	sub	sp, #20
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3998e:	b92b      	cbnz	r3, 3999c <fcb_init+0x18>
		return -EINVAL;
   39990:	f06f 0515 	mvn.w	r5, #21
}
   39994:	4628      	mov	r0, r5
   39996:	b005      	add	sp, #20
   39998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3999c:	794b      	ldrb	r3, [r1, #5]
   3999e:	798a      	ldrb	r2, [r1, #6]
   399a0:	1a9b      	subs	r3, r3, r2
   399a2:	2b00      	cmp	r3, #0
   399a4:	ddf4      	ble.n	39990 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   399a6:	3138      	adds	r1, #56	; 0x38
   399a8:	b2c0      	uxtb	r0, r0
   399aa:	f7e8 f895 	bl	21ad8 <flash_area_open>
	if (rc != 0) {
   399ae:	4606      	mov	r6, r0
   399b0:	2800      	cmp	r0, #0
   399b2:	d1ed      	bne.n	39990 <fcb_init+0xc>
	dev = device_get_binding(fcb->fap->fa_dev_name);
   399b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   399b6:	68d8      	ldr	r0, [r3, #12]
   399b8:	f7f9 fd74 	bl	334a4 <z_impl_device_get_binding>
	return api->get_parameters(dev);
   399bc:	6883      	ldr	r3, [r0, #8]
   399be:	691b      	ldr	r3, [r3, #16]
   399c0:	4798      	blx	r3
	fcb->f_erase_value = fparam->erase_value;
   399c2:	7903      	ldrb	r3, [r0, #4]
	align = fcb_get_align(fcb);
   399c4:	4620      	mov	r0, r4
	fcb->f_erase_value = fparam->erase_value;
   399c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	align = fcb_get_align(fcb);
   399ca:	f7ff ff07 	bl	397dc <fcb_get_align>
	if (align == 0U) {
   399ce:	4681      	mov	r9, r0
   399d0:	2800      	cmp	r0, #0
   399d2:	d0dd      	beq.n	39990 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   399d4:	f04f 3bff 	mov.w	fp, #4294967295
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   399d8:	46b2      	mov	sl, r6
   399da:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   399dc:	46d8      	mov	r8, fp
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   399de:	7963      	ldrb	r3, [r4, #5]
   399e0:	42b3      	cmp	r3, r6
   399e2:	dc24      	bgt.n	39a2e <fcb_init+0xaa>
	if (oldest < 0) {
   399e4:	f1b8 3fff 	cmp.w	r8, #4294967295
   399e8:	d149      	bne.n	39a7e <fcb_init+0xfa>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   399ea:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   399ec:	2200      	movs	r2, #0
   399ee:	4639      	mov	r1, r7
   399f0:	4620      	mov	r0, r4
   399f2:	f7ff ff81 	bl	398f8 <fcb_sector_hdr_init>
		if (rc) {
   399f6:	4605      	mov	r5, r0
   399f8:	2800      	cmp	r0, #0
   399fa:	d1cb      	bne.n	39994 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   399fc:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   399fe:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   39a00:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   39a04:	f884 9036 	strb.w	r9, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   39a08:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   39a0a:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   39a0c:	f104 0624 	add.w	r6, r4, #36	; 0x24
   39a10:	4631      	mov	r1, r6
   39a12:	4620      	mov	r0, r4
   39a14:	f000 f8be 	bl	39b94 <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   39a18:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   39a1c:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   39a1e:	d030      	beq.n	39a82 <fcb_init+0xfe>
		if (rc != 0) {
   39a20:	2800      	cmp	r0, #0
   39a22:	d0f5      	beq.n	39a10 <fcb_init+0x8c>
	return z_impl_k_mutex_init(mutex);
   39a24:	f104 000c 	add.w	r0, r4, #12
   39a28:	f004 f98f 	bl	3dd4a <z_impl_k_mutex_init>
   39a2c:	e7b2      	b.n	39994 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   39a2e:	68a1      	ldr	r1, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   39a30:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   39a32:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   39a36:	aa02      	add	r2, sp, #8
   39a38:	9101      	str	r1, [sp, #4]
   39a3a:	f7ff ff7d 	bl	39938 <fcb_sector_hdr_read>
		if (rc < 0) {
   39a3e:	1e05      	subs	r5, r0, #0
   39a40:	dba8      	blt.n	39994 <fcb_init+0x10>
		if (rc == 0) {
   39a42:	d009      	beq.n	39a58 <fcb_init+0xd4>
		if (oldest < 0) {
   39a44:	f1b8 3fff 	cmp.w	r8, #4294967295
   39a48:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   39a4c:	9901      	ldr	r1, [sp, #4]
   39a4e:	d105      	bne.n	39a5c <fcb_init+0xd8>
			oldest = newest = fda.fd_id;
   39a50:	4698      	mov	r8, r3
			oldest_sector = newest_sector = sector;
   39a52:	468a      	mov	sl, r1
   39a54:	460f      	mov	r7, r1
			oldest = newest = fda.fd_id;
   39a56:	469b      	mov	fp, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   39a58:	3601      	adds	r6, #1
   39a5a:	e7c0      	b.n	399de <fcb_init+0x5a>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   39a5c:	b21d      	sxth	r5, r3
   39a5e:	fa0f f08b 	sxth.w	r0, fp
   39a62:	1a28      	subs	r0, r5, r0
   39a64:	2800      	cmp	r0, #0
   39a66:	dd02      	ble.n	39a6e <fcb_init+0xea>
			newest = fda.fd_id;
   39a68:	469b      	mov	fp, r3
			newest_sector = sector;
   39a6a:	468a      	mov	sl, r1
   39a6c:	e7f4      	b.n	39a58 <fcb_init+0xd4>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   39a6e:	fa0f f288 	sxth.w	r2, r8
   39a72:	1b52      	subs	r2, r2, r5
			oldest = fda.fd_id;
   39a74:	2a00      	cmp	r2, #0
   39a76:	bfc4      	itt	gt
   39a78:	4698      	movgt	r8, r3
   39a7a:	460f      	movgt	r7, r1
   39a7c:	e7ec      	b.n	39a58 <fcb_init+0xd4>
   39a7e:	465d      	mov	r5, fp
   39a80:	e7bd      	b.n	399fe <fcb_init+0x7a>
			rc = 0;
   39a82:	2500      	movs	r5, #0
   39a84:	e7ce      	b.n	39a24 <fcb_init+0xa0>

00039a86 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   39a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39a8a:	460c      	mov	r4, r1
   39a8c:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   39a8e:	e9d1 1200 	ldrd	r1, r2, [r1]
   39a92:	684b      	ldr	r3, [r1, #4]
   39a94:	1c95      	adds	r5, r2, #2
   39a96:	429d      	cmp	r5, r3
{
   39a98:	4606      	mov	r6, r0
   39a9a:	b08c      	sub	sp, #48	; 0x30
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   39a9c:	d84c      	bhi.n	39b38 <fcb_elem_crc8+0xb2>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   39a9e:	2302      	movs	r3, #2
   39aa0:	9300      	str	r3, [sp, #0]
   39aa2:	ab04      	add	r3, sp, #16
   39aa4:	f7ff fe9f 	bl	397e6 <fcb_flash_read>
	if (rc) {
   39aa8:	b120      	cbz	r0, 39ab4 <fcb_elem_crc8+0x2e>
		return -EIO;
   39aaa:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   39aae:	b00c      	add	sp, #48	; 0x30
   39ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(fcb, tmp_str, &len);
   39ab4:	4630      	mov	r0, r6
   39ab6:	f10d 020e 	add.w	r2, sp, #14
   39aba:	a904      	add	r1, sp, #16
   39abc:	f7ff fefa 	bl	398b4 <fcb_get_len>
	if (cnt < 0) {
   39ac0:	2800      	cmp	r0, #0
   39ac2:	dbf4      	blt.n	39aae <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   39ac4:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   39ac8:	b283      	uxth	r3, r0
   39aca:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   39acc:	bf84      	itt	hi
   39ace:	f102 35ff 	addhi.w	r5, r2, #4294967295
   39ad2:	195b      	addhi	r3, r3, r5
   39ad4:	6861      	ldr	r1, [r4, #4]
   39ad6:	bf84      	itt	hi
   39ad8:	4252      	neghi	r2, r2
   39ada:	4013      	andhi	r3, r2
   39adc:	440b      	add	r3, r1
   39ade:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   39ae0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   39ae4:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   39ae6:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   39ae8:	20ff      	movs	r0, #255	; 0xff
   39aea:	a904      	add	r1, sp, #16
   39aec:	f7e5 fd52 	bl	1f594 <crc8_ccitt>
   39af0:	4605      	mov	r5, r0
	off = loc->fe_data_off;
   39af2:	f8d4 8008 	ldr.w	r8, [r4, #8]
	end = loc->fe_data_off + len;
   39af6:	f8bd a00e 	ldrh.w	sl, [sp, #14]
   39afa:	44c2      	add	sl, r8
	for (; off < end; off += blk_sz) {
   39afc:	45d0      	cmp	r8, sl
   39afe:	d302      	bcc.n	39b06 <fcb_elem_crc8+0x80>
	return 0;
   39b00:	2000      	movs	r0, #0
	*c8p = crc8;
   39b02:	703d      	strb	r5, [r7, #0]
	return 0;
   39b04:	e7d3      	b.n	39aae <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   39b06:	ebaa 0908 	sub.w	r9, sl, r8
   39b0a:	f1b9 0f20 	cmp.w	r9, #32
   39b0e:	bf28      	it	cs
   39b10:	f04f 0920 	movcs.w	r9, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   39b14:	4642      	mov	r2, r8
   39b16:	4630      	mov	r0, r6
   39b18:	6821      	ldr	r1, [r4, #0]
   39b1a:	f8cd 9000 	str.w	r9, [sp]
   39b1e:	ab04      	add	r3, sp, #16
   39b20:	f7ff fe61 	bl	397e6 <fcb_flash_read>
		if (rc) {
   39b24:	2800      	cmp	r0, #0
   39b26:	d1c0      	bne.n	39aaa <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   39b28:	4628      	mov	r0, r5
   39b2a:	464a      	mov	r2, r9
   39b2c:	a904      	add	r1, sp, #16
   39b2e:	f7e5 fd31 	bl	1f594 <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   39b32:	44c8      	add	r8, r9
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   39b34:	4605      	mov	r5, r0
	for (; off < end; off += blk_sz) {
   39b36:	e7e1      	b.n	39afc <fcb_elem_crc8+0x76>
		return -ENOTSUP;
   39b38:	f06f 0085 	mvn.w	r0, #133	; 0x85
   39b3c:	e7b7      	b.n	39aae <fcb_elem_crc8+0x28>

00039b3e <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   39b3e:	b530      	push	{r4, r5, lr}
   39b40:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   39b42:	f10d 020e 	add.w	r2, sp, #14
{
   39b46:	4605      	mov	r5, r0
   39b48:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   39b4a:	f7ff ff9c 	bl	39a86 <fcb_elem_crc8>
	if (rc) {
   39b4e:	b9e0      	cbnz	r0, 39b8a <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   39b50:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   39b54:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   39b56:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   39b58:	bf81      	itttt	hi
   39b5a:	f102 32ff 	addhi.w	r2, r2, #4294967295
   39b5e:	18d2      	addhi	r2, r2, r3
   39b60:	425b      	neghi	r3, r3
   39b62:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   39b64:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   39b66:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   39b68:	9300      	str	r3, [sp, #0]
   39b6a:	440a      	add	r2, r1
   39b6c:	4628      	mov	r0, r5
   39b6e:	6821      	ldr	r1, [r4, #0]
   39b70:	f10d 030f 	add.w	r3, sp, #15
   39b74:	f7ff fe37 	bl	397e6 <fcb_flash_read>
	if (rc) {
   39b78:	b948      	cbnz	r0, 39b8e <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   39b7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   39b7e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   39b82:	429a      	cmp	r2, r3
		return -EBADMSG;
   39b84:	bf18      	it	ne
   39b86:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   39b8a:	b005      	add	sp, #20
   39b8c:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   39b8e:	f06f 0004 	mvn.w	r0, #4
   39b92:	e7fa      	b.n	39b8a <fcb_elem_info+0x4c>

00039b94 <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   39b94:	b538      	push	{r3, r4, r5, lr}
   39b96:	4604      	mov	r4, r0
   39b98:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   39b9a:	f7ff ffd0 	bl	39b3e <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   39b9e:	b110      	cbz	r0, 39ba6 <fcb_getnext_in_sector+0x12>
   39ba0:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   39ba4:	d118      	bne.n	39bd8 <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   39ba6:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   39baa:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   39bac:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   39bae:	bf88      	it	hi
   39bb0:	f103 33ff 	addhi.w	r3, r3, #4294967295
			loc->fe_elem_off = loc->fe_data_off +
   39bb4:	68aa      	ldr	r2, [r5, #8]
   39bb6:	bf82      	ittt	hi
   39bb8:	185b      	addhi	r3, r3, r1
   39bba:	4248      	neghi	r0, r1
   39bbc:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   39bbe:	2901      	cmp	r1, #1
   39bc0:	4413      	add	r3, r2
		return len;
   39bc2:	bf92      	itee	ls
   39bc4:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   39bc6:	424a      	neghi	r2, r1
   39bc8:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   39bca:	4413      	add	r3, r2
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   39bcc:	4629      	mov	r1, r5
   39bce:	4620      	mov	r0, r4
			loc->fe_elem_off = loc->fe_data_off +
   39bd0:	606b      	str	r3, [r5, #4]
			rc = fcb_elem_info(fcb, loc);
   39bd2:	f7ff ffb4 	bl	39b3e <fcb_elem_info>
			if (rc != -EBADMSG) {
   39bd6:	e7e3      	b.n	39ba0 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   39bd8:	bd38      	pop	{r3, r4, r5, pc}

00039bda <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   39bda:	6882      	ldr	r2, [r0, #8]
   39bdc:	7943      	ldrb	r3, [r0, #5]
	sector++;
   39bde:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   39be0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   39be4:	4299      	cmp	r1, r3
   39be6:	bf34      	ite	cc
   39be8:	4608      	movcc	r0, r1
   39bea:	4610      	movcs	r0, r2
   39bec:	4770      	bx	lr

00039bee <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   39bee:	680b      	ldr	r3, [r1, #0]
{
   39bf0:	b570      	push	{r4, r5, r6, lr}
   39bf2:	4605      	mov	r5, r0
   39bf4:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   39bf6:	b90b      	cbnz	r3, 39bfc <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   39bf8:	6a03      	ldr	r3, [r0, #32]
   39bfa:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   39bfc:	6863      	ldr	r3, [r4, #4]
   39bfe:	b95b      	cbnz	r3, 39c18 <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   39c00:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   39c02:	4621      	mov	r1, r4
   39c04:	4628      	mov	r0, r5
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   39c06:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   39c08:	f7ff ff99 	bl	39b3e <fcb_elem_info>
		switch (rc) {
   39c0c:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   39c10:	d021      	beq.n	39c56 <fcb_getnext_nolock+0x68>
   39c12:	b950      	cbnz	r0, 39c2a <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   39c14:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   39c16:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   39c18:	4621      	mov	r1, r4
   39c1a:	4628      	mov	r0, r5
   39c1c:	f7ff ffba 	bl	39b94 <fcb_getnext_in_sector>
		if (rc == 0) {
   39c20:	2800      	cmp	r0, #0
   39c22:	d0f7      	beq.n	39c14 <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   39c24:	f110 0f86 	cmn.w	r0, #134	; 0x86
   39c28:	d113      	bne.n	39c52 <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   39c2a:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   39c2c:	6821      	ldr	r1, [r4, #0]
   39c2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   39c30:	4299      	cmp	r1, r3
   39c32:	d019      	beq.n	39c68 <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   39c34:	4628      	mov	r0, r5
   39c36:	f7ff ffd0 	bl	39bda <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   39c3a:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   39c3c:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   39c40:	4628      	mov	r0, r5
   39c42:	f7ff ff7c 	bl	39b3e <fcb_elem_info>
			switch (rc) {
   39c46:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   39c4a:	d004      	beq.n	39c56 <fcb_getnext_nolock+0x68>
   39c4c:	2800      	cmp	r0, #0
   39c4e:	d0e1      	beq.n	39c14 <fcb_getnext_nolock+0x26>
   39c50:	e7ec      	b.n	39c2c <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   39c52:	304d      	adds	r0, #77	; 0x4d
   39c54:	d1de      	bne.n	39c14 <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   39c56:	4621      	mov	r1, r4
   39c58:	4628      	mov	r0, r5
   39c5a:	f7ff ff9b 	bl	39b94 <fcb_getnext_in_sector>
		if (rc == 0) {
   39c5e:	2800      	cmp	r0, #0
   39c60:	d0d8      	beq.n	39c14 <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   39c62:	304d      	adds	r0, #77	; 0x4d
   39c64:	d0f7      	beq.n	39c56 <fcb_getnext_nolock+0x68>
next_sector:
   39c66:	e7e0      	b.n	39c2a <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   39c68:	f06f 0085 	mvn.w	r0, #133	; 0x85
   39c6c:	e7d3      	b.n	39c16 <fcb_getnext_nolock+0x28>

00039c6e <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   39c6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   39c70:	4604      	mov	r4, r0
   39c72:	9101      	str	r1, [sp, #4]
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   39c74:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   39c78:	f04f 32ff 	mov.w	r2, #4294967295
   39c7c:	f04f 33ff 	mov.w	r3, #4294967295
   39c80:	4628      	mov	r0, r5
   39c82:	f7fa f9b7 	bl	33ff4 <z_impl_k_mutex_lock>
	if (rc) {
   39c86:	b950      	cbnz	r0, 39c9e <fcb_getnext+0x30>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   39c88:	4620      	mov	r0, r4
   39c8a:	9901      	ldr	r1, [sp, #4]
   39c8c:	f7ff ffaf 	bl	39bee <fcb_getnext_nolock>
   39c90:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   39c92:	4628      	mov	r0, r5
   39c94:	f7fa faa8 	bl	341e8 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   39c98:	4620      	mov	r0, r4
   39c9a:	b003      	add	sp, #12
   39c9c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   39c9e:	f06f 0415 	mvn.w	r4, #21
   39ca2:	e7f9      	b.n	39c98 <fcb_getnext+0x2a>

00039ca4 <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   39ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39ca6:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   39ca8:	f100 070c 	add.w	r7, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   39cac:	f04f 32ff 	mov.w	r2, #4294967295
   39cb0:	f04f 33ff 	mov.w	r3, #4294967295
   39cb4:	4638      	mov	r0, r7
   39cb6:	f7fa f99d 	bl	33ff4 <z_impl_k_mutex_lock>
	if (rc) {
   39cba:	bb48      	cbnz	r0, 39d10 <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   39cbc:	4620      	mov	r0, r4
   39cbe:	6a21      	ldr	r1, [r4, #32]
   39cc0:	f7ff fdbb 	bl	3983a <fcb_erase_sector>
	if (rc) {
   39cc4:	bb08      	cbnz	r0, 39d0a <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   39cc6:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   39cca:	4299      	cmp	r1, r3
   39ccc:	d112      	bne.n	39cf4 <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   39cce:	4620      	mov	r0, r4
   39cd0:	f7ff ff83 	bl	39bda <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   39cd4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   39cd6:	4601      	mov	r1, r0
   39cd8:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   39cda:	4606      	mov	r6, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   39cdc:	b292      	uxth	r2, r2
   39cde:	4620      	mov	r0, r4
   39ce0:	f7ff fe0a 	bl	398f8 <fcb_sector_hdr_init>
		if (rc) {
   39ce4:	4605      	mov	r5, r0
   39ce6:	b958      	cbnz	r0, 39d00 <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   39ce8:	2308      	movs	r3, #8
   39cea:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   39cec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   39cee:	6266      	str	r6, [r4, #36]	; 0x24
		fcb->f_active_id++;
   39cf0:	3301      	adds	r3, #1
   39cf2:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   39cf4:	4620      	mov	r0, r4
   39cf6:	6a21      	ldr	r1, [r4, #32]
   39cf8:	f7ff ff6f 	bl	39bda <fcb_getnext_sector>
   39cfc:	2500      	movs	r5, #0
   39cfe:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   39d00:	4638      	mov	r0, r7
   39d02:	f7fa fa71 	bl	341e8 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   39d06:	4628      	mov	r0, r5
   39d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   39d0a:	f06f 0504 	mvn.w	r5, #4
   39d0e:	e7f7      	b.n	39d00 <fcb_rotate+0x5c>
		return -EINVAL;
   39d10:	f06f 0515 	mvn.w	r5, #21
   39d14:	e7f7      	b.n	39d06 <fcb_rotate+0x62>

00039d16 <sntp_init>:
{
   39d16:	b570      	push	{r4, r5, r6, lr}
   39d18:	460d      	mov	r5, r1
   39d1a:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   39d1c:	4604      	mov	r4, r0
   39d1e:	b330      	cbz	r0, 39d6e <sntp_init+0x58>
   39d20:	b329      	cbz	r1, 39d6e <sntp_init+0x58>
   39d22:	2214      	movs	r2, #20
   39d24:	2100      	movs	r1, #0
   39d26:	f004 f940 	bl	3dfaa <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   39d2a:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   39d2c:	2211      	movs	r2, #17
   39d2e:	2102      	movs	r1, #2
   39d30:	f7e7 fcc4 	bl	216bc <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   39d34:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   39d36:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   39d38:	da04      	bge.n	39d44 <sntp_init+0x2e>
		return -errno;
   39d3a:	f000 fc34 	bl	3a5a6 <__errno>
   39d3e:	6800      	ldr	r0, [r0, #0]
   39d40:	4240      	negs	r0, r0
}
   39d42:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   39d44:	4632      	mov	r2, r6
   39d46:	4629      	mov	r1, r5
   39d48:	f000 f854 	bl	39df4 <z_impl_zsock_connect>
	if (ret < 0) {
   39d4c:	2800      	cmp	r0, #0
   39d4e:	68e0      	ldr	r0, [r4, #12]
   39d50:	da02      	bge.n	39d58 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   39d52:	f000 f82b 	bl	39dac <z_impl_zsock_close>
   39d56:	e7f0      	b.n	39d3a <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   39d58:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   39d5a:	68a3      	ldr	r3, [r4, #8]
   39d5c:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   39d60:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   39d64:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   39d66:	8091      	strh	r1, [r2, #4]
	return 0;
   39d68:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   39d6a:	60a3      	str	r3, [r4, #8]
	return 0;
   39d6c:	e7e9      	b.n	39d42 <sntp_init+0x2c>
		return -EFAULT;
   39d6e:	f06f 000d 	mvn.w	r0, #13
   39d72:	e7e6      	b.n	39d42 <sntp_init+0x2c>

00039d74 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   39d74:	b110      	cbz	r0, 39d7c <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   39d76:	68c0      	ldr	r0, [r0, #12]
   39d78:	f000 b818 	b.w	39dac <z_impl_zsock_close>
	}
}
   39d7c:	4770      	bx	lr

00039d7e <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   39d7e:	f7e7 be33 	b.w	219e8 <socket_offload_getaddrinfo>

00039d82 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   39d82:	f7e7 be65 	b.w	21a50 <socket_offload_freeaddrinfo>

00039d86 <k_mutex_unlock>:
   39d86:	f7fa ba2f 	b.w	341e8 <z_impl_k_mutex_unlock>

00039d8a <z_fdtable_call_ioctl>:
{
   39d8a:	b40c      	push	{r2, r3}
   39d8c:	4603      	mov	r3, r0
   39d8e:	b507      	push	{r0, r1, r2, lr}
   39d90:	aa04      	add	r2, sp, #16
   39d92:	4608      	mov	r0, r1
   39d94:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   39d98:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   39d9a:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   39d9c:	4798      	blx	r3
}
   39d9e:	b003      	add	sp, #12
   39da0:	f85d eb04 	ldr.w	lr, [sp], #4
   39da4:	b002      	add	sp, #8
   39da6:	4770      	bx	lr

00039da8 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   39da8:	f7fa b924 	b.w	33ff4 <z_impl_k_mutex_lock>

00039dac <z_impl_zsock_close>:
{
   39dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   39dae:	4669      	mov	r1, sp
   39db0:	aa01      	add	r2, sp, #4
{
   39db2:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   39db4:	f7e5 fc34 	bl	1f620 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   39db8:	4604      	mov	r4, r0
   39dba:	b940      	cbnz	r0, 39dce <z_impl_zsock_close+0x22>
		errno = EBADF;
   39dbc:	f000 fbf3 	bl	3a5a6 <__errno>
   39dc0:	2309      	movs	r3, #9
		return -1;
   39dc2:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   39dc6:	6003      	str	r3, [r0, #0]
}
   39dc8:	4620      	mov	r0, r4
   39dca:	b003      	add	sp, #12
   39dcc:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   39dce:	f04f 32ff 	mov.w	r2, #4294967295
   39dd2:	f04f 33ff 	mov.w	r3, #4294967295
   39dd6:	9801      	ldr	r0, [sp, #4]
   39dd8:	f7ff ffe6 	bl	39da8 <k_mutex_lock.constprop.0>
	z_free_fd(sock);
   39ddc:	4628      	mov	r0, r5
   39dde:	f7e5 fc89 	bl	1f6f4 <z_free_fd>
	ret = vtable->fd_vtable.close(ctx);
   39de2:	9b00      	ldr	r3, [sp, #0]
   39de4:	4620      	mov	r0, r4
   39de6:	689b      	ldr	r3, [r3, #8]
   39de8:	4798      	blx	r3
   39dea:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   39dec:	9801      	ldr	r0, [sp, #4]
   39dee:	f7ff ffca 	bl	39d86 <k_mutex_unlock>
	return ret;
   39df2:	e7e9      	b.n	39dc8 <z_impl_zsock_close+0x1c>

00039df4 <z_impl_zsock_connect>:
{
   39df4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   39df6:	460d      	mov	r5, r1
   39df8:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   39dfa:	4669      	mov	r1, sp
   39dfc:	aa01      	add	r2, sp, #4
   39dfe:	f7e5 fc0f 	bl	1f620 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   39e02:	4604      	mov	r4, r0
   39e04:	b110      	cbz	r0, 39e0c <z_impl_zsock_connect+0x18>
   39e06:	9b00      	ldr	r3, [sp, #0]
   39e08:	695b      	ldr	r3, [r3, #20]
   39e0a:	b943      	cbnz	r3, 39e1e <z_impl_zsock_connect+0x2a>
   39e0c:	f000 fbcb 	bl	3a5a6 <__errno>
   39e10:	2309      	movs	r3, #9
   39e12:	f04f 34ff 	mov.w	r4, #4294967295
   39e16:	6003      	str	r3, [r0, #0]
}
   39e18:	4620      	mov	r0, r4
   39e1a:	b002      	add	sp, #8
   39e1c:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   39e1e:	f04f 32ff 	mov.w	r2, #4294967295
   39e22:	f04f 33ff 	mov.w	r3, #4294967295
   39e26:	9801      	ldr	r0, [sp, #4]
   39e28:	f7ff ffbe 	bl	39da8 <k_mutex_lock.constprop.0>
   39e2c:	9b00      	ldr	r3, [sp, #0]
   39e2e:	4632      	mov	r2, r6
   39e30:	4629      	mov	r1, r5
   39e32:	4620      	mov	r0, r4
   39e34:	695b      	ldr	r3, [r3, #20]
   39e36:	4798      	blx	r3
   39e38:	4604      	mov	r4, r0
   39e3a:	9801      	ldr	r0, [sp, #4]
   39e3c:	f7ff ffa3 	bl	39d86 <k_mutex_unlock>
   39e40:	e7ea      	b.n	39e18 <z_impl_zsock_connect+0x24>

00039e42 <z_impl_zsock_sendto>:
{
   39e42:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   39e46:	460d      	mov	r5, r1
   39e48:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   39e4a:	a902      	add	r1, sp, #8
   39e4c:	aa03      	add	r2, sp, #12
{
   39e4e:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   39e50:	f7e5 fbe6 	bl	1f620 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   39e54:	4604      	mov	r4, r0
   39e56:	b110      	cbz	r0, 39e5e <z_impl_zsock_sendto+0x1c>
   39e58:	9b02      	ldr	r3, [sp, #8]
   39e5a:	6a1b      	ldr	r3, [r3, #32]
   39e5c:	b94b      	cbnz	r3, 39e72 <z_impl_zsock_sendto+0x30>
   39e5e:	f000 fba2 	bl	3a5a6 <__errno>
   39e62:	2309      	movs	r3, #9
   39e64:	f04f 34ff 	mov.w	r4, #4294967295
   39e68:	6003      	str	r3, [r0, #0]
}
   39e6a:	4620      	mov	r0, r4
   39e6c:	b004      	add	sp, #16
   39e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   39e72:	f04f 32ff 	mov.w	r2, #4294967295
   39e76:	f04f 33ff 	mov.w	r3, #4294967295
   39e7a:	9803      	ldr	r0, [sp, #12]
   39e7c:	f7ff ff94 	bl	39da8 <k_mutex_lock.constprop.0>
   39e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   39e82:	4632      	mov	r2, r6
   39e84:	9301      	str	r3, [sp, #4]
   39e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   39e88:	4629      	mov	r1, r5
   39e8a:	9300      	str	r3, [sp, #0]
   39e8c:	9b02      	ldr	r3, [sp, #8]
   39e8e:	4620      	mov	r0, r4
   39e90:	f8d3 8020 	ldr.w	r8, [r3, #32]
   39e94:	463b      	mov	r3, r7
   39e96:	47c0      	blx	r8
   39e98:	4604      	mov	r4, r0
   39e9a:	9803      	ldr	r0, [sp, #12]
   39e9c:	f7ff ff73 	bl	39d86 <k_mutex_unlock>
   39ea0:	e7e3      	b.n	39e6a <z_impl_zsock_sendto+0x28>

00039ea2 <z_impl_zsock_sendmsg>:
{
   39ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   39ea4:	460d      	mov	r5, r1
   39ea6:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   39ea8:	4669      	mov	r1, sp
   39eaa:	aa01      	add	r2, sp, #4
   39eac:	f7e5 fbb8 	bl	1f620 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   39eb0:	4604      	mov	r4, r0
   39eb2:	b110      	cbz	r0, 39eba <z_impl_zsock_sendmsg+0x18>
   39eb4:	9b00      	ldr	r3, [sp, #0]
   39eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   39eb8:	b943      	cbnz	r3, 39ecc <z_impl_zsock_sendmsg+0x2a>
   39eba:	f000 fb74 	bl	3a5a6 <__errno>
   39ebe:	2309      	movs	r3, #9
   39ec0:	f04f 34ff 	mov.w	r4, #4294967295
   39ec4:	6003      	str	r3, [r0, #0]
}
   39ec6:	4620      	mov	r0, r4
   39ec8:	b002      	add	sp, #8
   39eca:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   39ecc:	f04f 32ff 	mov.w	r2, #4294967295
   39ed0:	f04f 33ff 	mov.w	r3, #4294967295
   39ed4:	9801      	ldr	r0, [sp, #4]
   39ed6:	f7ff ff67 	bl	39da8 <k_mutex_lock.constprop.0>
   39eda:	9b00      	ldr	r3, [sp, #0]
   39edc:	4632      	mov	r2, r6
   39ede:	4629      	mov	r1, r5
   39ee0:	4620      	mov	r0, r4
   39ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   39ee4:	4798      	blx	r3
   39ee6:	4604      	mov	r4, r0
   39ee8:	9801      	ldr	r0, [sp, #4]
   39eea:	f7ff ff4c 	bl	39d86 <k_mutex_unlock>
   39eee:	e7ea      	b.n	39ec6 <z_impl_zsock_sendmsg+0x24>

00039ef0 <z_impl_zsock_recvfrom>:
{
   39ef0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   39ef4:	460d      	mov	r5, r1
   39ef6:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   39ef8:	a902      	add	r1, sp, #8
   39efa:	aa03      	add	r2, sp, #12
{
   39efc:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   39efe:	f7e5 fb8f 	bl	1f620 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   39f02:	4604      	mov	r4, r0
   39f04:	b110      	cbz	r0, 39f0c <z_impl_zsock_recvfrom+0x1c>
   39f06:	9b02      	ldr	r3, [sp, #8]
   39f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   39f0a:	b94b      	cbnz	r3, 39f20 <z_impl_zsock_recvfrom+0x30>
   39f0c:	f000 fb4b 	bl	3a5a6 <__errno>
   39f10:	2309      	movs	r3, #9
   39f12:	f04f 34ff 	mov.w	r4, #4294967295
   39f16:	6003      	str	r3, [r0, #0]
}
   39f18:	4620      	mov	r0, r4
   39f1a:	b004      	add	sp, #16
   39f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   39f20:	f04f 32ff 	mov.w	r2, #4294967295
   39f24:	f04f 33ff 	mov.w	r3, #4294967295
   39f28:	9803      	ldr	r0, [sp, #12]
   39f2a:	f7ff ff3d 	bl	39da8 <k_mutex_lock.constprop.0>
   39f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   39f30:	4632      	mov	r2, r6
   39f32:	9301      	str	r3, [sp, #4]
   39f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   39f36:	4629      	mov	r1, r5
   39f38:	9300      	str	r3, [sp, #0]
   39f3a:	9b02      	ldr	r3, [sp, #8]
   39f3c:	4620      	mov	r0, r4
   39f3e:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   39f42:	463b      	mov	r3, r7
   39f44:	47c0      	blx	r8
   39f46:	4604      	mov	r4, r0
   39f48:	9803      	ldr	r0, [sp, #12]
   39f4a:	f7ff ff1c 	bl	39d86 <k_mutex_unlock>
   39f4e:	e7e3      	b.n	39f18 <z_impl_zsock_recvfrom+0x28>

00039f50 <z_impl_zsock_getsockopt>:
	return -1;
}

int z_impl_zsock_getsockopt(int sock, int level, int optname,
			    void *optval, socklen_t *optlen)
{
   39f50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   39f54:	460d      	mov	r5, r1
   39f56:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   39f58:	a902      	add	r1, sp, #8
   39f5a:	aa03      	add	r2, sp, #12
{
   39f5c:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   39f5e:	f7e5 fb5f 	bl	1f620 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   39f62:	4604      	mov	r4, r0
   39f64:	b110      	cbz	r0, 39f6c <z_impl_zsock_getsockopt+0x1c>
   39f66:	9b02      	ldr	r3, [sp, #8]
   39f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   39f6a:	b94b      	cbnz	r3, 39f80 <z_impl_zsock_getsockopt+0x30>
   39f6c:	f000 fb1b 	bl	3a5a6 <__errno>
   39f70:	2309      	movs	r3, #9
   39f72:	f04f 34ff 	mov.w	r4, #4294967295
   39f76:	6003      	str	r3, [r0, #0]
}
   39f78:	4620      	mov	r0, r4
   39f7a:	b004      	add	sp, #16
   39f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   39f80:	f04f 32ff 	mov.w	r2, #4294967295
   39f84:	f04f 33ff 	mov.w	r3, #4294967295
   39f88:	9803      	ldr	r0, [sp, #12]
   39f8a:	f7ff ff0d 	bl	39da8 <k_mutex_lock.constprop.0>
   39f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   39f90:	4632      	mov	r2, r6
   39f92:	9300      	str	r3, [sp, #0]
   39f94:	9b02      	ldr	r3, [sp, #8]
   39f96:	4629      	mov	r1, r5
   39f98:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   39f9c:	4620      	mov	r0, r4
   39f9e:	463b      	mov	r3, r7
   39fa0:	47c0      	blx	r8
   39fa2:	4604      	mov	r4, r0
   39fa4:	9803      	ldr	r0, [sp, #12]
   39fa6:	f7ff feee 	bl	39d86 <k_mutex_unlock>
   39faa:	e7e5      	b.n	39f78 <z_impl_zsock_getsockopt+0x28>

00039fac <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   39fac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   39fb0:	460d      	mov	r5, r1
   39fb2:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   39fb4:	a902      	add	r1, sp, #8
   39fb6:	aa03      	add	r2, sp, #12
{
   39fb8:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   39fba:	f7e5 fb31 	bl	1f620 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   39fbe:	4604      	mov	r4, r0
   39fc0:	b110      	cbz	r0, 39fc8 <z_impl_zsock_setsockopt+0x1c>
   39fc2:	9b02      	ldr	r3, [sp, #8]
   39fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   39fc6:	b94b      	cbnz	r3, 39fdc <z_impl_zsock_setsockopt+0x30>
   39fc8:	f000 faed 	bl	3a5a6 <__errno>
   39fcc:	2309      	movs	r3, #9
   39fce:	f04f 34ff 	mov.w	r4, #4294967295
   39fd2:	6003      	str	r3, [r0, #0]
}
   39fd4:	4620      	mov	r0, r4
   39fd6:	b004      	add	sp, #16
   39fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   39fdc:	f04f 32ff 	mov.w	r2, #4294967295
   39fe0:	f04f 33ff 	mov.w	r3, #4294967295
   39fe4:	9803      	ldr	r0, [sp, #12]
   39fe6:	f7ff fedf 	bl	39da8 <k_mutex_lock.constprop.0>
   39fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   39fec:	4632      	mov	r2, r6
   39fee:	9300      	str	r3, [sp, #0]
   39ff0:	9b02      	ldr	r3, [sp, #8]
   39ff2:	4629      	mov	r1, r5
   39ff4:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
   39ff8:	4620      	mov	r0, r4
   39ffa:	463b      	mov	r3, r7
   39ffc:	47c0      	blx	r8
   39ffe:	4604      	mov	r4, r0
   3a000:	9803      	ldr	r0, [sp, #12]
   3a002:	f7ff fec0 	bl	39d86 <k_mutex_unlock>
   3a006:	e7e5      	b.n	39fd4 <z_impl_zsock_setsockopt+0x28>

0003a008 <device_get_binding>:
   3a008:	f7f9 ba4c 	b.w	334a4 <z_impl_device_get_binding>

0003a00c <get_sectors_cb>:
{
   3a00c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   3a00e:	6802      	ldr	r2, [r0, #0]
   3a010:	684c      	ldr	r4, [r1, #4]
   3a012:	42a2      	cmp	r2, r4
   3a014:	d316      	bcc.n	3a044 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   3a016:	688b      	ldr	r3, [r1, #8]
   3a018:	4423      	add	r3, r4
   3a01a:	429a      	cmp	r2, r3
   3a01c:	d206      	bcs.n	3a02c <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   3a01e:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   3a022:	42ab      	cmp	r3, r5
   3a024:	d304      	bcc.n	3a030 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   3a026:	f06f 030b 	mvn.w	r3, #11
   3a02a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   3a02c:	2000      	movs	r0, #0
   3a02e:	e00a      	b.n	3a046 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3a030:	68cd      	ldr	r5, [r1, #12]
   3a032:	1b12      	subs	r2, r2, r4
   3a034:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   3a038:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3a03a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   3a03e:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   3a040:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   3a042:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   3a044:	2001      	movs	r0, #1
}
   3a046:	bd70      	pop	{r4, r5, r6, pc}

0003a048 <flash_area_close>:
}
   3a048:	4770      	bx	lr

0003a04a <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3a04a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3a04c:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3a04e:	6883      	ldr	r3, [r0, #8]
{
   3a050:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3a052:	428b      	cmp	r3, r1
{
   3a054:	460c      	mov	r4, r1
   3a056:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3a058:	d310      	bcc.n	3a07c <flash_area_read+0x32>
   3a05a:	1871      	adds	r1, r6, r1
   3a05c:	428b      	cmp	r3, r1
   3a05e:	d30d      	bcc.n	3a07c <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3a060:	68c0      	ldr	r0, [r0, #12]
   3a062:	f7ff ffd1 	bl	3a008 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3a066:	6869      	ldr	r1, [r5, #4]
   3a068:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3a06a:	6883      	ldr	r3, [r0, #8]
   3a06c:	9a01      	ldr	r2, [sp, #4]
   3a06e:	681c      	ldr	r4, [r3, #0]
   3a070:	4633      	mov	r3, r6
   3a072:	46a4      	mov	ip, r4
}
   3a074:	b002      	add	sp, #8
   3a076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3a07a:	4760      	bx	ip
   3a07c:	f06f 0015 	mvn.w	r0, #21
   3a080:	b002      	add	sp, #8
   3a082:	bd70      	pop	{r4, r5, r6, pc}

0003a084 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3a084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3a088:	461f      	mov	r7, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3a08a:	6883      	ldr	r3, [r0, #8]
{
   3a08c:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3a08e:	428b      	cmp	r3, r1
{
   3a090:	460c      	mov	r4, r1
   3a092:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3a094:	d325      	bcc.n	3a0e2 <flash_area_write+0x5e>
   3a096:	187a      	adds	r2, r7, r1
   3a098:	4293      	cmp	r3, r2
   3a09a:	d322      	bcc.n	3a0e2 <flash_area_write+0x5e>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3a09c:	68c0      	ldr	r0, [r0, #12]
   3a09e:	f7ff ffb3 	bl	3a008 <device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3a0a2:	686d      	ldr	r5, [r5, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
   3a0a4:	4606      	mov	r6, r0
	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3a0a6:	4425      	add	r5, r4
	const struct flash_driver_api *api =
   3a0a8:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (api->write_protection != NULL) {
   3a0ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3a0b0:	b96b      	cbnz	r3, 3a0ce <flash_area_write+0x4a>
	rc = api->write(dev, offset, data, len);
   3a0b2:	463b      	mov	r3, r7
   3a0b4:	f8d8 4004 	ldr.w	r4, [r8, #4]
   3a0b8:	464a      	mov	r2, r9
   3a0ba:	4629      	mov	r1, r5
   3a0bc:	4630      	mov	r0, r6
   3a0be:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   3a0c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->write(dev, offset, data, len);
   3a0c4:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   3a0c6:	b943      	cbnz	r3, 3a0da <flash_area_write+0x56>

	return rc;
}
   3a0c8:	4620      	mov	r0, r4
   3a0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   3a0ce:	2100      	movs	r1, #0
   3a0d0:	4798      	blx	r3
		if (rc) {
   3a0d2:	4604      	mov	r4, r0
   3a0d4:	2800      	cmp	r0, #0
   3a0d6:	d0ec      	beq.n	3a0b2 <flash_area_write+0x2e>
   3a0d8:	e7f6      	b.n	3a0c8 <flash_area_write+0x44>
		(void) api->write_protection(dev, true);
   3a0da:	2101      	movs	r1, #1
   3a0dc:	4630      	mov	r0, r6
   3a0de:	4798      	blx	r3
   3a0e0:	e7f2      	b.n	3a0c8 <flash_area_write+0x44>
		return -EINVAL;
   3a0e2:	f06f 0415 	mvn.w	r4, #21
   3a0e6:	e7ef      	b.n	3a0c8 <flash_area_write+0x44>

0003a0e8 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3a0e8:	6883      	ldr	r3, [r0, #8]
{
   3a0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3a0ee:	428b      	cmp	r3, r1
{
   3a0f0:	4605      	mov	r5, r0
   3a0f2:	460c      	mov	r4, r1
   3a0f4:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3a0f6:	d324      	bcc.n	3a142 <flash_area_erase+0x5a>
   3a0f8:	440a      	add	r2, r1
   3a0fa:	4293      	cmp	r3, r2
   3a0fc:	d321      	bcc.n	3a142 <flash_area_erase+0x5a>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3a0fe:	68c0      	ldr	r0, [r0, #12]
   3a100:	f7ff ff82 	bl	3a008 <device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3a104:	686d      	ldr	r5, [r5, #4]
	flash_dev = device_get_binding(fa->fa_dev_name);
   3a106:	4606      	mov	r6, r0
	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3a108:	4425      	add	r5, r4
	const struct flash_driver_api *api =
   3a10a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (api->write_protection != NULL) {
   3a10e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3a112:	b963      	cbnz	r3, 3a12e <flash_area_erase+0x46>
	rc = api->erase(dev, offset, size);
   3a114:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3a118:	463a      	mov	r2, r7
   3a11a:	4629      	mov	r1, r5
   3a11c:	4630      	mov	r0, r6
   3a11e:	4798      	blx	r3
	if (api->write_protection != NULL) {
   3a120:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
   3a124:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   3a126:	b943      	cbnz	r3, 3a13a <flash_area_erase+0x52>

	return rc;
}
   3a128:	4620      	mov	r0, r4
   3a12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
   3a12e:	2100      	movs	r1, #0
   3a130:	4798      	blx	r3
		if (rc) {
   3a132:	4604      	mov	r4, r0
   3a134:	2800      	cmp	r0, #0
   3a136:	d0ed      	beq.n	3a114 <flash_area_erase+0x2c>
   3a138:	e7f6      	b.n	3a128 <flash_area_erase+0x40>
		(void) api->write_protection(dev, true);
   3a13a:	2101      	movs	r1, #1
   3a13c:	4630      	mov	r0, r6
   3a13e:	4798      	blx	r3
   3a140:	e7f2      	b.n	3a128 <flash_area_erase+0x40>
		return -EINVAL;
   3a142:	f06f 0415 	mvn.w	r4, #21
   3a146:	e7ef      	b.n	3a128 <flash_area_erase+0x40>

0003a148 <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
   3a148:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3a14a:	68c0      	ldr	r0, [r0, #12]
   3a14c:	f7ff ff5c 	bl	3a008 <device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   3a150:	6883      	ldr	r3, [r0, #8]
   3a152:	691b      	ldr	r3, [r3, #16]
   3a154:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   3a156:	7800      	ldrb	r0, [r0, #0]
   3a158:	bd08      	pop	{r3, pc}

0003a15a <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   3a15a:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   3a15c:	68c0      	ldr	r0, [r0, #12]
   3a15e:	f7ff ff53 	bl	3a008 <device_get_binding>
	return api->get_parameters(dev);
   3a162:	6883      	ldr	r3, [r0, #8]
   3a164:	691b      	ldr	r3, [r3, #16]
   3a166:	4798      	blx	r3

	return param->erase_value;
}
   3a168:	7900      	ldrb	r0, [r0, #4]
   3a16a:	bd08      	pop	{r3, pc}

0003a16c <flash_get_write_block_size>:
}


extern size_t z_impl_flash_get_write_block_size(const struct device * dev);
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   3a16c:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   3a16e:	6883      	ldr	r3, [r0, #8]
   3a170:	691b      	ldr	r3, [r3, #16]
   3a172:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   3a174:	6800      	ldr	r0, [r0, #0]
   3a176:	bd08      	pop	{r3, pc}

0003a178 <stream_flash_buffered_write>:
{
   3a178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a17c:	4689      	mov	r9, r1
   3a17e:	4616      	mov	r6, r2
   3a180:	4698      	mov	r8, r3
	if (!ctx) {
   3a182:	4604      	mov	r4, r0
   3a184:	b398      	cbz	r0, 3a1ee <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   3a186:	6882      	ldr	r2, [r0, #8]
   3a188:	6903      	ldr	r3, [r0, #16]
   3a18a:	4413      	add	r3, r2
   3a18c:	6982      	ldr	r2, [r0, #24]
   3a18e:	4433      	add	r3, r6
   3a190:	4293      	cmp	r3, r2
   3a192:	d830      	bhi.n	3a1f6 <stream_flash_buffered_write+0x7e>
	int processed = 0;
   3a194:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3a196:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   3a19a:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3a19e:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   3a1a0:	45ba      	cmp	sl, r7
   3a1a2:	d215      	bcs.n	3a1d0 <stream_flash_buffered_write+0x58>
	if (processed < len) {
   3a1a4:	42b5      	cmp	r5, r6
   3a1a6:	d209      	bcs.n	3a1bc <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   3a1a8:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3a1aa:	4652      	mov	r2, sl
   3a1ac:	4418      	add	r0, r3
   3a1ae:	eb09 0105 	add.w	r1, r9, r5
   3a1b2:	f003 feda 	bl	3df6a <memcpy>
		ctx->buf_bytes += len - processed;
   3a1b6:	68a3      	ldr	r3, [r4, #8]
   3a1b8:	4453      	add	r3, sl
   3a1ba:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   3a1bc:	f1b8 0f00 	cmp.w	r8, #0
   3a1c0:	d01c      	beq.n	3a1fc <stream_flash_buffered_write+0x84>
   3a1c2:	68a0      	ldr	r0, [r4, #8]
   3a1c4:	b1a8      	cbz	r0, 3a1f2 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   3a1c6:	4620      	mov	r0, r4
}
   3a1c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   3a1cc:	f7e7 bd28 	b.w	21c20 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   3a1d0:	6823      	ldr	r3, [r4, #0]
   3a1d2:	463a      	mov	r2, r7
   3a1d4:	4418      	add	r0, r3
   3a1d6:	eb09 0105 	add.w	r1, r9, r5
   3a1da:	f003 fec6 	bl	3df6a <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   3a1de:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   3a1e0:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   3a1e2:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   3a1e4:	f7e7 fd1c 	bl	21c20 <flash_sync>
		if (rc != 0) {
   3a1e8:	b918      	cbnz	r0, 3a1f2 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   3a1ea:	443d      	add	r5, r7
   3a1ec:	e7d3      	b.n	3a196 <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   3a1ee:	f06f 000d 	mvn.w	r0, #13
}
   3a1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   3a1f6:	f06f 000b 	mvn.w	r0, #11
   3a1fa:	e7fa      	b.n	3a1f2 <stream_flash_buffered_write+0x7a>
   3a1fc:	4640      	mov	r0, r8
   3a1fe:	e7f8      	b.n	3a1f2 <stream_flash_buffered_write+0x7a>

0003a200 <stream_flash_bytes_written>:
}
   3a200:	6900      	ldr	r0, [r0, #16]
   3a202:	4770      	bx	lr

0003a204 <settings_name_steq>:
{
   3a204:	b530      	push	{r4, r5, lr}
	if (next) {
   3a206:	b10a      	cbz	r2, 3a20c <settings_name_steq+0x8>
		*next = NULL;
   3a208:	2300      	movs	r3, #0
   3a20a:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   3a20c:	b190      	cbz	r0, 3a234 <settings_name_steq+0x30>
   3a20e:	b151      	cbz	r1, 3a226 <settings_name_steq+0x22>
   3a210:	3901      	subs	r1, #1
	while ((*key != '\0') && (*key == *name) &&
   3a212:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   3a216:	4604      	mov	r4, r0
   3a218:	f810 3b01 	ldrb.w	r3, [r0], #1
   3a21c:	b15d      	cbz	r5, 3a236 <settings_name_steq+0x32>
   3a21e:	429d      	cmp	r5, r3
   3a220:	d101      	bne.n	3a226 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   3a222:	2d3d      	cmp	r5, #61	; 0x3d
   3a224:	d1f5      	bne.n	3a212 <settings_name_steq+0xe>
	return 0;
   3a226:	2000      	movs	r0, #0
   3a228:	e004      	b.n	3a234 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   3a22a:	2b3d      	cmp	r3, #61	; 0x3d
   3a22c:	d008      	beq.n	3a240 <settings_name_steq+0x3c>
   3a22e:	fab3 f083 	clz	r0, r3
   3a232:	0940      	lsrs	r0, r0, #5
}
   3a234:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   3a236:	2b2f      	cmp	r3, #47	; 0x2f
   3a238:	d1f7      	bne.n	3a22a <settings_name_steq+0x26>
		if (next) {
   3a23a:	b10a      	cbz	r2, 3a240 <settings_name_steq+0x3c>
			*next = name + 1;
   3a23c:	3401      	adds	r4, #1
   3a23e:	6014      	str	r4, [r2, #0]
		return 1;
   3a240:	2001      	movs	r0, #1
   3a242:	e7f7      	b.n	3a234 <settings_name_steq+0x30>

0003a244 <settings_line_len_calc>:
{
   3a244:	b510      	push	{r4, lr}
   3a246:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   3a248:	f7e3 f808 	bl	1d25c <strlen>
   3a24c:	3401      	adds	r4, #1
}
   3a24e:	4420      	add	r0, r4
   3a250:	bd10      	pop	{r4, pc}

0003a252 <settings_line_raw_read>:
{
   3a252:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   3a254:	9c04      	ldr	r4, [sp, #16]
   3a256:	9401      	str	r4, [sp, #4]
   3a258:	2400      	movs	r4, #0
   3a25a:	9400      	str	r4, [sp, #0]
   3a25c:	f7e7 ff70 	bl	22140 <settings_line_raw_read_until>
}
   3a260:	b002      	add	sp, #8
   3a262:	bd10      	pop	{r4, pc}

0003a264 <settings_line_read_cb>:
{
   3a264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3a266:	6803      	ldr	r3, [r0, #0]
   3a268:	9300      	str	r3, [sp, #0]
   3a26a:	6840      	ldr	r0, [r0, #4]
   3a26c:	ab03      	add	r3, sp, #12
   3a26e:	f7ff fff0 	bl	3a252 <settings_line_raw_read>
	if (rc == 0) {
   3a272:	b918      	cbnz	r0, 3a27c <settings_line_read_cb+0x18>
		return len_read;
   3a274:	9803      	ldr	r0, [sp, #12]
}
   3a276:	b005      	add	sp, #20
   3a278:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   3a27c:	f04f 30ff 	mov.w	r0, #4294967295
   3a280:	e7f9      	b.n	3a276 <settings_line_read_cb+0x12>

0003a282 <settings_line_name_read>:
{
   3a282:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   3a284:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3a286:	9301      	str	r3, [sp, #4]
   3a288:	f10d 030f 	add.w	r3, sp, #15
   3a28c:	9300      	str	r3, [sp, #0]
   3a28e:	4613      	mov	r3, r2
   3a290:	460a      	mov	r2, r1
   3a292:	4601      	mov	r1, r0
   3a294:	2000      	movs	r0, #0
	char const until_char = '=';
   3a296:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3a29a:	f7e7 ff51 	bl	22140 <settings_line_raw_read_until>
}
   3a29e:	b004      	add	sp, #16
   3a2a0:	bd10      	pop	{r4, pc}

0003a2a2 <settings_line_dup_check_cb>:
{
   3a2a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a2a6:	460f      	mov	r7, r1
   3a2a8:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   3a2aa:	6819      	ldr	r1, [r3, #0]
{
   3a2ac:	4690      	mov	r8, r2
   3a2ae:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   3a2b0:	f7e2 ffca 	bl	1d248 <strcmp>
   3a2b4:	4606      	mov	r6, r0
   3a2b6:	b940      	cbnz	r0, 3a2ca <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3a2b8:	4639      	mov	r1, r7
   3a2ba:	4640      	mov	r0, r8
   3a2bc:	f7e8 f800 	bl	222c0 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   3a2c0:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3a2c2:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   3a2c4:	4283      	cmp	r3, r0
   3a2c6:	d004      	beq.n	3a2d2 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   3a2c8:	60e6      	str	r6, [r4, #12]
}
   3a2ca:	2000      	movs	r0, #0
   3a2cc:	b008      	add	sp, #32
   3a2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   3a2d2:	b913      	cbnz	r3, 3a2da <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   3a2d4:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   3a2d6:	60e3      	str	r3, [r4, #12]
   3a2d8:	e7f7      	b.n	3a2ca <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   3a2da:	f8d4 a004 	ldr.w	sl, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   3a2de:	2d10      	cmp	r5, #16
   3a2e0:	46a9      	mov	r9, r5
   3a2e2:	bf28      	it	cs
   3a2e4:	f04f 0910 	movcs.w	r9, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3a2e8:	9700      	str	r7, [sp, #0]
   3a2ea:	464a      	mov	r2, r9
   3a2ec:	ab03      	add	r3, sp, #12
   3a2ee:	a904      	add	r1, sp, #16
   3a2f0:	eb08 0006 	add.w	r0, r8, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   3a2f4:	f8cd 900c 	str.w	r9, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3a2f8:	f7ff ffab 	bl	3a252 <settings_line_raw_read>
		if (rc) {
   3a2fc:	b970      	cbnz	r0, 3a31c <settings_line_dup_check_cb+0x7a>
		if (len_read != exp_len) {
   3a2fe:	9b03      	ldr	r3, [sp, #12]
   3a300:	4599      	cmp	r9, r3
   3a302:	d10b      	bne.n	3a31c <settings_line_dup_check_cb+0x7a>
		rc = memcmp(val, buf, len_read);
   3a304:	464a      	mov	r2, r9
   3a306:	4650      	mov	r0, sl
   3a308:	a904      	add	r1, sp, #16
   3a30a:	f003 fe20 	bl	3df4e <memcmp>
		if (rc) {
   3a30e:	b928      	cbnz	r0, 3a31c <settings_line_dup_check_cb+0x7a>
		val += len_read;
   3a310:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   3a312:	1aed      	subs	r5, r5, r3
		val += len_read;
   3a314:	449a      	add	sl, r3
		off += len_read;
   3a316:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   3a318:	d1e1      	bne.n	3a2de <settings_line_dup_check_cb+0x3c>
   3a31a:	e7db      	b.n	3a2d4 <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   3a31c:	2300      	movs	r3, #0
   3a31e:	e7da      	b.n	3a2d6 <settings_line_dup_check_cb+0x34>

0003a320 <get_len_cb>:
}
   3a320:	8980      	ldrh	r0, [r0, #12]
   3a322:	4770      	bx	lr

0003a324 <write_handler>:
{
   3a324:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   3a326:	6804      	ldr	r4, [r0, #0]
   3a328:	6885      	ldr	r5, [r0, #8]
   3a32a:	6824      	ldr	r4, [r4, #0]
   3a32c:	4429      	add	r1, r5
	return flash_area_write(entry_ctx->fap,
   3a32e:	4421      	add	r1, r4
   3a330:	6900      	ldr	r0, [r0, #16]
}
   3a332:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   3a334:	f7ff bea6 	b.w	3a084 <flash_area_write>

0003a338 <read_handler>:
{
   3a338:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   3a33a:	8984      	ldrh	r4, [r0, #12]
   3a33c:	428c      	cmp	r4, r1
   3a33e:	dc03      	bgt.n	3a348 <read_handler+0x10>
}
   3a340:	bc30      	pop	{r4, r5}
		*len = 0;
   3a342:	2000      	movs	r0, #0
   3a344:	6018      	str	r0, [r3, #0]
}
   3a346:	4770      	bx	lr
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   3a348:	681d      	ldr	r5, [r3, #0]
   3a34a:	440d      	add	r5, r1
   3a34c:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   3a34e:	bf84      	itt	hi
   3a350:	1a64      	subhi	r4, r4, r1
   3a352:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   3a354:	6804      	ldr	r4, [r0, #0]
   3a356:	6885      	ldr	r5, [r0, #8]
   3a358:	6824      	ldr	r4, [r4, #0]
   3a35a:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   3a35c:	4421      	add	r1, r4
   3a35e:	681b      	ldr	r3, [r3, #0]
   3a360:	6900      	ldr	r0, [r0, #16]
}
   3a362:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   3a364:	f7ff be71 	b.w	3a04a <flash_area_read>

0003a368 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   3a368:	2200      	movs	r2, #0
   3a36a:	e9c0 2200 	strd	r2, r2, [r0]
   3a36e:	6082      	str	r2, [r0, #8]
}
   3a370:	4770      	bx	lr

0003a372 <uart_poll_out>:
   3a372:	6883      	ldr	r3, [r0, #8]
   3a374:	685b      	ldr	r3, [r3, #4]
   3a376:	4718      	bx	r3

0003a378 <debug_hook_out_nop>:
}
   3a378:	2000      	movs	r0, #0
   3a37a:	4770      	bx	lr

0003a37c <set_starting_state>:
{
   3a37c:	b510      	push	{r4, lr}
	__asm__ volatile(
   3a37e:	f04f 0320 	mov.w	r3, #32
   3a382:	f3ef 8211 	mrs	r2, BASEPRI
   3a386:	f383 8811 	msr	BASEPRI, r3
   3a38a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3a38e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3a390:	f003 0407 	and.w	r4, r3, #7
   3a394:	2c01      	cmp	r4, #1
   3a396:	d106      	bne.n	3a3a6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3a398:	6001      	str	r1, [r0, #0]
	int err = 0;
   3a39a:	2000      	movs	r0, #0
	__asm__ volatile(
   3a39c:	f382 8811 	msr	BASEPRI, r2
   3a3a0:	f3bf 8f6f 	isb	sy
}
   3a3a4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   3a3a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   3a3aa:	428b      	cmp	r3, r1
		err = -EALREADY;
   3a3ac:	bf14      	ite	ne
   3a3ae:	f04f 30ff 	movne.w	r0, #4294967295
   3a3b2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   3a3b6:	e7f1      	b.n	3a39c <set_starting_state+0x20>

0003a3b8 <set_on_state>:
	__asm__ volatile(
   3a3b8:	f04f 0320 	mov.w	r3, #32
   3a3bc:	f3ef 8211 	mrs	r2, BASEPRI
   3a3c0:	f383 8811 	msr	BASEPRI, r3
   3a3c4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3a3c8:	6803      	ldr	r3, [r0, #0]
   3a3ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3a3ce:	f043 0302 	orr.w	r3, r3, #2
   3a3d2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3a3d4:	f382 8811 	msr	BASEPRI, r2
   3a3d8:	f3bf 8f6f 	isb	sy
}
   3a3dc:	4770      	bx	lr

0003a3de <onoff_started_callback>:
	return &data->mgr[type];
   3a3de:	6900      	ldr	r0, [r0, #16]
   3a3e0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3a3e2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3a3e6:	2100      	movs	r1, #0
   3a3e8:	4710      	bx	r2

0003a3ea <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3a3ea:	2000      	movs	r0, #0
   3a3ec:	f7f3 bd68 	b.w	2dec0 <nrfx_clock_start>

0003a3f0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3a3f0:	2000      	movs	r0, #0
   3a3f2:	f7f3 bdbb 	b.w	2df6c <nrfx_clock_stop>

0003a3f6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   3a3f6:	2280      	movs	r2, #128	; 0x80
   3a3f8:	f7e8 bac4 	b.w	22984 <stop>

0003a3fc <blocking_start_callback>:
{
   3a3fc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   3a3fe:	f7f9 bfbb 	b.w	34378 <z_impl_k_sem_give>

0003a402 <api_start>:
{
   3a402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   3a406:	240c      	movs	r4, #12
   3a408:	b2c9      	uxtb	r1, r1
   3a40a:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   3a40c:	6905      	ldr	r5, [r0, #16]
{
   3a40e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   3a410:	f104 0048 	add.w	r0, r4, #72	; 0x48
   3a414:	2180      	movs	r1, #128	; 0x80
   3a416:	4428      	add	r0, r5
{
   3a418:	4690      	mov	r8, r2
   3a41a:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   3a41c:	f7ff ffae 	bl	3a37c <set_starting_state>
	if (err < 0) {
   3a420:	2800      	cmp	r0, #0
   3a422:	db06      	blt.n	3a432 <api_start+0x30>
	subdata->cb = cb;
   3a424:	4425      	add	r5, r4
	subdata->user_data = user_data;
   3a426:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   3a42a:	6873      	ldr	r3, [r6, #4]
   3a42c:	591b      	ldr	r3, [r3, r4]
   3a42e:	4798      	blx	r3
	return 0;
   3a430:	2000      	movs	r0, #0
}
   3a432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003a436 <wdt_nrf_disable>:
}
   3a436:	f04f 30ff 	mov.w	r0, #4294967295
   3a43a:	4770      	bx	lr

0003a43c <wdt_nrf_feed>:
{
   3a43c:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   3a43e:	6903      	ldr	r3, [r0, #16]
   3a440:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3a444:	428b      	cmp	r3, r1
   3a446:	db05      	blt.n	3a454 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   3a448:	6840      	ldr	r0, [r0, #4]
   3a44a:	b2c9      	uxtb	r1, r1
   3a44c:	f7f5 f940 	bl	2f6d0 <nrfx_wdt_channel_feed>
	return 0;
   3a450:	2000      	movs	r0, #0
}
   3a452:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3a454:	f06f 0015 	mvn.w	r0, #21
   3a458:	e7fb      	b.n	3a452 <wdt_nrf_feed+0x16>

0003a45a <wdt_nrf_setup>:
{
   3a45a:	b538      	push	{r3, r4, r5, lr}
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   3a45c:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   3a45e:	f001 0301 	and.w	r3, r1, #1
   3a462:	f1c3 0309 	rsb	r3, r3, #9
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   3a466:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   3a468:	6825      	ldr	r5, [r4, #0]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   3a46a:	b2db      	uxtb	r3, r3
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   3a46c:	bf48      	it	mi
   3a46e:	f003 03f7 	andmi.w	r3, r3, #247	; 0xf7
    p_reg->CONFIG = behaviour;
   3a472:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   3a476:	6903      	ldr	r3, [r0, #16]
			   / 1000));
   3a478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   3a47c:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   3a47e:	2300      	movs	r3, #0
   3a480:	03c8      	lsls	r0, r1, #15
   3a482:	0c49      	lsrs	r1, r1, #17
   3a484:	f7e2 fd10 	bl	1cea8 <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   3a488:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   3a48c:	4620      	mov	r0, r4
   3a48e:	f7f5 f8a1 	bl	2f5d4 <nrfx_wdt_enable>
}
   3a492:	2000      	movs	r0, #0
   3a494:	bd38      	pop	{r3, r4, r5, pc}

0003a496 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3a496:	4770      	bx	lr

0003a498 <sys_clock_disable>:
   3a498:	4770      	bx	lr

0003a49a <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   3a49a:	b510      	push	{r4, lr}
   3a49c:	b40f      	push	{r0, r1, r2, r3}
   3a49e:	f7e8 fe0d 	bl	230bc <before_nse>
   3a4a2:	bc0f      	pop	{r0, r1, r2, r3}
   3a4a4:	f7dd fda0 	bl	17fe8 <spm_request_random_number_nse>
   3a4a8:	b40f      	push	{r0, r1, r2, r3}
   3a4aa:	f7e8 fe11 	bl	230d0 <after_nse>
   3a4ae:	bc0f      	pop	{r0, r1, r2, r3}
   3a4b0:	bd10      	pop	{r4, pc}

0003a4b2 <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   3a4b2:	b510      	push	{r4, lr}
   3a4b4:	b40f      	push	{r0, r1, r2, r3}
   3a4b6:	f7e8 fe01 	bl	230bc <before_nse>
   3a4ba:	bc0f      	pop	{r0, r1, r2, r3}
   3a4bc:	f7dd fd9c 	bl	17ff8 <spm_request_read_nse>
   3a4c0:	b40f      	push	{r0, r1, r2, r3}
   3a4c2:	f7e8 fe05 	bl	230d0 <after_nse>
   3a4c6:	bc0f      	pop	{r0, r1, r2, r3}
   3a4c8:	bd10      	pop	{r4, pc}

0003a4ca <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3a4ca:	2100      	movs	r1, #0
   3a4cc:	2001      	movs	r0, #1
   3a4ce:	f7e8 bf39 	b.w	23344 <z_arm_fatal_error>

0003a4d2 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3a4d2:	6e83      	ldr	r3, [r0, #104]	; 0x68
   3a4d4:	f383 880b 	msr	PSPLIM, r3
}
   3a4d8:	4770      	bx	lr

0003a4da <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3a4da:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3a4dc:	6800      	ldr	r0, [r0, #0]
   3a4de:	f7e8 bf31 	b.w	23344 <z_arm_fatal_error>

0003a4e2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   3a4e2:	b508      	push	{r3, lr}
	handler();
   3a4e4:	f7e8 ff9e 	bl	23424 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3a4e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3a4ec:	f7e9 ba7a 	b.w	239e4 <z_arm_exc_exit>

0003a4f0 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   3a4f0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   3a4f4:	b17b      	cbz	r3, 3a516 <z_arm_restore_fp_context+0x26>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   3a4f6:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   3a4fa:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   3a4fe:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   3a502:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   3a506:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   3a50a:	f100 0340 	add.w	r3, r0, #64	; 0x40
   3a50e:	ec90 0a10 	vldmia	r0, {s0-s15}
   3a512:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   3a516:	4770      	bx	lr

0003a518 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3a518:	e840 f000 	tt	r0, r0
   3a51c:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   3a51e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   3a522:	bf14      	ite	ne
   3a524:	4618      	movne	r0, r3
   3a526:	f06f 0015 	mvneq.w	r0, #21
   3a52a:	4770      	bx	lr

0003a52c <mpu_configure_region>:
{
   3a52c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   3a52e:	890a      	ldrh	r2, [r1, #8]
   3a530:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
   3a532:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   3a534:	684d      	ldr	r5, [r1, #4]
   3a536:	f002 021f 	and.w	r2, r2, #31
   3a53a:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   3a53e:	9300      	str	r3, [sp, #0]
   3a540:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3a544:	f023 031f 	bic.w	r3, r3, #31
   3a548:	1e6a      	subs	r2, r5, #1
   3a54a:	4413      	add	r3, r2
   3a54c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   3a550:	280f      	cmp	r0, #15
   3a552:	9303      	str	r3, [sp, #12]
   3a554:	d903      	bls.n	3a55e <mpu_configure_region+0x32>
   3a556:	f7e9 fb17 	bl	23b88 <region_allocate_and_init.part.0>
}
   3a55a:	b004      	add	sp, #16
   3a55c:	bd70      	pop	{r4, r5, r6, pc}
	region_init(index, region_conf);
   3a55e:	4669      	mov	r1, sp
   3a560:	f7e9 fafa 	bl	23b58 <region_init>
	return region_allocate_and_init(index,
   3a564:	e7f9      	b.n	3a55a <mpu_configure_region+0x2e>

0003a566 <_stdout_hook_default>:
}
   3a566:	f04f 30ff 	mov.w	r0, #4294967295
   3a56a:	4770      	bx	lr

0003a56c <_stdin_hook_default>:
}
   3a56c:	2000      	movs	r0, #0
   3a56e:	4770      	bx	lr

0003a570 <_read>:
{
   3a570:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3a572:	4611      	mov	r1, r2
   3a574:	f7e9 bce4 	b.w	23f40 <z_impl_zephyr_read_stdin>

0003a578 <_write>:
{
   3a578:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3a57a:	4611      	mov	r1, r2
   3a57c:	f7e9 bcf4 	b.w	23f68 <z_impl_zephyr_write_stdout>

0003a580 <_close>:
   3a580:	f04f 30ff 	mov.w	r0, #4294967295
   3a584:	4770      	bx	lr

0003a586 <_lseek>:
}
   3a586:	2000      	movs	r0, #0
   3a588:	4770      	bx	lr

0003a58a <_isatty>:
}
   3a58a:	2802      	cmp	r0, #2
   3a58c:	bfcc      	ite	gt
   3a58e:	2000      	movgt	r0, #0
   3a590:	2001      	movle	r0, #1
   3a592:	4770      	bx	lr

0003a594 <_kill>:
}
   3a594:	2000      	movs	r0, #0
   3a596:	4770      	bx	lr

0003a598 <_getpid>:
}
   3a598:	2000      	movs	r0, #0
   3a59a:	4770      	bx	lr

0003a59c <_fstat>:
	st->st_mode = S_IFCHR;
   3a59c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3a5a0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3a5a2:	604b      	str	r3, [r1, #4]
}
   3a5a4:	4770      	bx	lr

0003a5a6 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3a5a6:	f7f8 bfa9 	b.w	334fc <z_impl_z_errno>

0003a5aa <close>:
   3a5aa:	f7ff bbff 	b.w	39dac <z_impl_zsock_close>

0003a5ae <boot_request_upgrade>:
#endif

}

int boot_request_upgrade(int permanent)
{
   3a5ae:	b508      	push	{r3, lr}
#ifdef FLASH_AREA_IMAGE_SECONDARY
	int rc;

	rc = boot_set_pending(permanent);
   3a5b0:	f001 ff0d 	bl	3c3ce <boot_set_pending>
	if (rc) {
   3a5b4:	2800      	cmp	r0, #0
		return -EFAULT;
	}
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}
   3a5b6:	bf18      	it	ne
   3a5b8:	f06f 000d 	mvnne.w	r0, #13
   3a5bc:	bd08      	pop	{r3, pc}

0003a5be <boot_is_img_confirmed>:

bool boot_is_img_confirmed(void)
{
   3a5be:	b507      	push	{r0, r1, r2, lr}
	const struct flash_area *fa;
	int rc;
	uint8_t flag_val;

	rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fa);
   3a5c0:	2002      	movs	r0, #2
   3a5c2:	a901      	add	r1, sp, #4
   3a5c4:	f7e7 fa88 	bl	21ad8 <flash_area_open>
	if (rc) {
   3a5c8:	b118      	cbz	r0, 3a5d2 <boot_is_img_confirmed+0x14>
		return false;
   3a5ca:	2000      	movs	r0, #0
	if (rc) {
		return false;
	}

	return flag_val == BOOT_FLAG_SET;
}
   3a5cc:	b003      	add	sp, #12
   3a5ce:	f85d fb04 	ldr.w	pc, [sp], #4
	rc = boot_read_image_ok(fa, &flag_val);
   3a5d2:	9801      	ldr	r0, [sp, #4]
   3a5d4:	f10d 0103 	add.w	r1, sp, #3
   3a5d8:	f001 fee1 	bl	3c39e <boot_read_image_ok>
	if (rc) {
   3a5dc:	2800      	cmp	r0, #0
   3a5de:	d1f4      	bne.n	3a5ca <boot_is_img_confirmed+0xc>
	return flag_val == BOOT_FLAG_SET;
   3a5e0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3a5e4:	1e43      	subs	r3, r0, #1
   3a5e6:	4258      	negs	r0, r3
   3a5e8:	4158      	adcs	r0, r3
   3a5ea:	e7ef      	b.n	3a5cc <boot_is_img_confirmed+0xe>

0003a5ec <boot_write_img_confirmed>:

int boot_write_img_confirmed(void)
{
   3a5ec:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   3a5ee:	f001 ff17 	bl	3c420 <boot_set_confirmed>
	if (rc) {
   3a5f2:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   3a5f4:	bf18      	it	ne
   3a5f6:	f06f 0004 	mvnne.w	r0, #4
   3a5fa:	bd08      	pop	{r3, pc}

0003a5fc <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   3a5fc:	b508      	push	{r3, lr}
	net_if_init();
   3a5fe:	f7e9 fe4d 	bl	2429c <net_if_init>
	net_if_post_init();
   3a602:	f7e9 fe87 	bl	24314 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3a606:	2000      	movs	r0, #0
   3a608:	bd08      	pop	{r3, pc}

0003a60a <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3a60a:	b110      	cbz	r0, 3a612 <net_if_l2+0x8>
   3a60c:	6800      	ldr	r0, [r0, #0]
   3a60e:	b100      	cbz	r0, 3a612 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3a610:	6840      	ldr	r0, [r0, #4]
}
   3a612:	4770      	bx	lr

0003a614 <l2_flags_get>:
{
   3a614:	b510      	push	{r4, lr}
   3a616:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3a618:	f7ff fff7 	bl	3a60a <net_if_l2>
   3a61c:	b128      	cbz	r0, 3a62a <l2_flags_get+0x16>
   3a61e:	68c2      	ldr	r2, [r0, #12]
   3a620:	b11a      	cbz	r2, 3a62a <l2_flags_get+0x16>
}
   3a622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3a626:	4618      	mov	r0, r3
   3a628:	4710      	bx	r2
}
   3a62a:	2000      	movs	r0, #0
   3a62c:	bd10      	pop	{r4, pc}

0003a62e <net_if_flag_is_set>:
	if (iface == NULL) {
   3a62e:	b138      	cbz	r0, 3a640 <net_if_flag_is_set+0x12>
   3a630:	6803      	ldr	r3, [r0, #0]
   3a632:	330c      	adds	r3, #12
   3a634:	e8d3 3faf 	lda	r3, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3a638:	fa43 f101 	asr.w	r1, r3, r1
   3a63c:	f001 0001 	and.w	r0, r1, #1
}
   3a640:	4770      	bx	lr

0003a642 <net_byte_to_hex>:
{
   3a642:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3a644:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   3a646:	b1bb      	cbz	r3, 3a678 <net_byte_to_hex+0x36>
		if (val < 10) {
   3a648:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   3a64a:	b26b      	sxtb	r3, r5
   3a64c:	bf86      	itte	hi
   3a64e:	f1a2 050a 	subhi.w	r5, r2, #10
   3a652:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   3a654:	3330      	addls	r3, #48	; 0x30
   3a656:	1c44      	adds	r4, r0, #1
   3a658:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3a65a:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   3a65e:	4619      	mov	r1, r3
   3a660:	2b09      	cmp	r3, #9
	*ptr = '\0';
   3a662:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   3a666:	bf83      	ittte	hi
   3a668:	3a0a      	subhi	r2, #10
   3a66a:	1889      	addhi	r1, r1, r2
   3a66c:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   3a66e:	3130      	addls	r1, #48	; 0x30
   3a670:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   3a672:	7063      	strb	r3, [r4, #1]
   3a674:	1c60      	adds	r0, r4, #1
}
   3a676:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   3a678:	2d00      	cmp	r5, #0
   3a67a:	d1e5      	bne.n	3a648 <net_byte_to_hex+0x6>
   3a67c:	4604      	mov	r4, r0
   3a67e:	e7ec      	b.n	3a65a <net_byte_to_hex+0x18>

0003a680 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3a680:	e9d0 2300 	ldrd	r2, r3, [r0]
   3a684:	1a9b      	subs	r3, r3, r2
   3a686:	2b01      	cmp	r3, #1
{
   3a688:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3a68a:	d90c      	bls.n	3a6a6 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3a68c:	4614      	mov	r4, r2
   3a68e:	1c53      	adds	r3, r2, #1
   3a690:	6003      	str	r3, [r0, #0]
   3a692:	f814 3b02 	ldrb.w	r3, [r4], #2
   3a696:	021b      	lsls	r3, r3, #8
   3a698:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3a69a:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   3a69c:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   3a69e:	7852      	ldrb	r2, [r2, #1]
   3a6a0:	4313      	orrs	r3, r2
   3a6a2:	800b      	strh	r3, [r1, #0]
}
   3a6a4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3a6a6:	f06f 0015 	mvn.w	r0, #21
   3a6aa:	e7fb      	b.n	3a6a4 <unpack_uint16+0x24>

0003a6ac <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   3a6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3a6ae:	e9d0 3400 	ldrd	r3, r4, [r0]
   3a6b2:	429c      	cmp	r4, r3
   3a6b4:	d01f      	beq.n	3a6f6 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   3a6b6:	1c5c      	adds	r4, r3, #1
   3a6b8:	6004      	str	r4, [r0, #0]
   3a6ba:	781b      	ldrb	r3, [r3, #0]
   3a6bc:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   3a6be:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   3a6c0:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   3a6c2:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   3a6c4:	6804      	ldr	r4, [r0, #0]
   3a6c6:	42bc      	cmp	r4, r7
   3a6c8:	d218      	bcs.n	3a6fc <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3a6ca:	4625      	mov	r5, r4
   3a6cc:	f815 3b01 	ldrb.w	r3, [r5], #1
   3a6d0:	6816      	ldr	r6, [r2, #0]
   3a6d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   3a6d6:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3a6d8:	4433      	add	r3, r6
   3a6da:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3a6dc:	6005      	str	r5, [r0, #0]
   3a6de:	f994 4000 	ldrsb.w	r4, [r4]
   3a6e2:	2c00      	cmp	r4, #0
   3a6e4:	db04      	blt.n	3a6f0 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   3a6e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   3a6ea:	d204      	bcs.n	3a6f6 <fixed_header_decode+0x4a>
	return 0;
   3a6ec:	2000      	movs	r0, #0
   3a6ee:	e004      	b.n	3a6fa <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   3a6f0:	3107      	adds	r1, #7
   3a6f2:	291c      	cmp	r1, #28
   3a6f4:	d1e6      	bne.n	3a6c4 <fixed_header_decode+0x18>
		return -EINVAL;
   3a6f6:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3a6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   3a6fc:	f06f 000a 	mvn.w	r0, #10
   3a700:	e7fb      	b.n	3a6fa <fixed_header_decode+0x4e>

0003a702 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3a702:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3a704:	e9d1 3500 	ldrd	r3, r5, [r1]
   3a708:	429d      	cmp	r5, r3
   3a70a:	d102      	bne.n	3a712 <connect_ack_decode+0x10>
		return -EINVAL;
   3a70c:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3a710:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   3a712:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3a714:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   3a716:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3a718:	d0f8      	beq.n	3a70c <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3a71a:	461d      	mov	r5, r3
   3a71c:	f815 4b02 	ldrb.w	r4, [r5], #2
   3a720:	600d      	str	r5, [r1, #0]
   3a722:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3a724:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
	return 0;
   3a728:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3a72a:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3a72c:	bf04      	itt	eq
   3a72e:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   3a732:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3a734:	7051      	strb	r1, [r2, #1]
	return 0;
   3a736:	e7eb      	b.n	3a710 <connect_ack_decode+0xe>

0003a738 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   3a738:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3a73c:	461c      	mov	r4, r3
   3a73e:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3a740:	7da2      	ldrb	r2, [r4, #22]
   3a742:	0043      	lsls	r3, r0, #1
   3a744:	f022 0203 	bic.w	r2, r2, #3
   3a748:	f003 0302 	and.w	r3, r3, #2
   3a74c:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3a74e:	f3c0 0041 	ubfx	r0, r0, #1, #2
   3a752:	7220      	strb	r0, [r4, #8]
{
   3a754:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   3a756:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3a758:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3a75a:	f10d 0106 	add.w	r1, sp, #6
   3a75e:	f7ff ff8f 	bl	3a680 <unpack_uint16>
	if (err_code != 0) {
   3a762:	4606      	mov	r6, r0
   3a764:	b9c0      	cbnz	r0, 3a798 <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3a766:	683b      	ldr	r3, [r7, #0]
   3a768:	687a      	ldr	r2, [r7, #4]
   3a76a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3a76e:	1ad2      	subs	r2, r2, r3
   3a770:	42aa      	cmp	r2, r5
   3a772:	da02      	bge.n	3a77a <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   3a774:	f06f 0615 	mvn.w	r6, #21
   3a778:	e00e      	b.n	3a798 <publish_decode+0x60>
	str->size = utf8_strlen;
   3a77a:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3a77c:	b185      	cbz	r5, 3a7a0 <publish_decode+0x68>
		str->utf8 = buf->cur;
   3a77e:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   3a780:	442b      	add	r3, r5
   3a782:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3a784:	7a23      	ldrb	r3, [r4, #8]
   3a786:	b96b      	cbnz	r3, 3a7a4 <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   3a788:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   3a78a:	45a8      	cmp	r8, r5
   3a78c:	d3f2      	bcc.n	3a774 <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   3a78e:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3a790:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3a794:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3a796:	6125      	str	r5, [r4, #16]

	return 0;
}
   3a798:	4630      	mov	r0, r6
   3a79a:	b002      	add	sp, #8
   3a79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   3a7a0:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   3a7a2:	e7ef      	b.n	3a784 <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   3a7a4:	4638      	mov	r0, r7
   3a7a6:	f104 0114 	add.w	r1, r4, #20
   3a7aa:	f7ff ff69 	bl	3a680 <unpack_uint16>
		if (err_code != 0) {
   3a7ae:	b908      	cbnz	r0, 3a7b4 <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   3a7b0:	3504      	adds	r5, #4
   3a7b2:	e7ea      	b.n	3a78a <publish_decode+0x52>
   3a7b4:	4606      	mov	r6, r0
   3a7b6:	e7ef      	b.n	3a798 <publish_decode+0x60>

0003a7b8 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3a7b8:	f7ff bf62 	b.w	3a680 <unpack_uint16>

0003a7bc <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3a7bc:	f7ff bf60 	b.w	3a680 <unpack_uint16>

0003a7c0 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3a7c0:	f7ff bf5e 	b.w	3a680 <unpack_uint16>

0003a7c4 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3a7c4:	f7ff bf5c 	b.w	3a680 <unpack_uint16>

0003a7c8 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3a7c8:	b538      	push	{r3, r4, r5, lr}
   3a7ca:	4605      	mov	r5, r0
   3a7cc:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3a7ce:	f7ff ff57 	bl	3a680 <unpack_uint16>
	if (err_code != 0) {
   3a7d2:	b930      	cbnz	r0, 3a7e2 <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3a7d4:	e9d5 2300 	ldrd	r2, r3, [r5]
   3a7d8:	1a99      	subs	r1, r3, r2
	str->len = length;
   3a7da:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3a7dc:	b111      	cbz	r1, 3a7e4 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3a7de:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3a7e0:	602b      	str	r3, [r5, #0]
}
   3a7e2:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   3a7e4:	6060      	str	r0, [r4, #4]
   3a7e6:	e7fc      	b.n	3a7e2 <subscribe_ack_decode+0x1a>

0003a7e8 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3a7e8:	f7ff bf4a 	b.w	3a680 <unpack_uint16>

0003a7ec <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3a7ec:	e9d1 3200 	ldrd	r3, r2, [r1]
   3a7f0:	1ad2      	subs	r2, r2, r3
   3a7f2:	2a01      	cmp	r2, #1
   3a7f4:	d909      	bls.n	3a80a <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   3a7f6:	1c5a      	adds	r2, r3, #1
   3a7f8:	600a      	str	r2, [r1, #0]
   3a7fa:	0a02      	lsrs	r2, r0, #8
   3a7fc:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3a7fe:	680b      	ldr	r3, [r1, #0]
   3a800:	1c5a      	adds	r2, r3, #1
   3a802:	600a      	str	r2, [r1, #0]
   3a804:	7018      	strb	r0, [r3, #0]
	return 0;
   3a806:	2000      	movs	r0, #0
   3a808:	4770      	bx	lr
		return -ENOMEM;
   3a80a:	f06f 000b 	mvn.w	r0, #11
}
   3a80e:	4770      	bx	lr

0003a810 <pack_utf8_str>:
{
   3a810:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3a812:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   3a816:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3a818:	6840      	ldr	r0, [r0, #4]
   3a81a:	1a9b      	subs	r3, r3, r2
   3a81c:	1c82      	adds	r2, r0, #2
   3a81e:	4293      	cmp	r3, r2
{
   3a820:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3a822:	d30d      	bcc.n	3a840 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   3a824:	b280      	uxth	r0, r0
   3a826:	f7ff ffe1 	bl	3a7ec <pack_uint16>
   3a82a:	e9d5 1200 	ldrd	r1, r2, [r5]
   3a82e:	6820      	ldr	r0, [r4, #0]
   3a830:	f003 fb9b 	bl	3df6a <memcpy>
	return 0;
   3a834:	2000      	movs	r0, #0
	buf->cur += str->size;
   3a836:	6823      	ldr	r3, [r4, #0]
   3a838:	686a      	ldr	r2, [r5, #4]
   3a83a:	4413      	add	r3, r2
   3a83c:	6023      	str	r3, [r4, #0]
}
   3a83e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3a840:	f06f 000b 	mvn.w	r0, #11
   3a844:	e7fb      	b.n	3a83e <pack_utf8_str+0x2e>

0003a846 <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   3a846:	6813      	ldr	r3, [r2, #0]
{
   3a848:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   3a84a:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3a84c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   3a850:	d227      	bcs.n	3a8a2 <mqtt_encode_fixed_header+0x5c>
   3a852:	4625      	mov	r5, r4
   3a854:	2600      	movs	r6, #0
	} while (length > 0);
   3a856:	09ed      	lsrs	r5, r5, #7
   3a858:	b2f3      	uxtb	r3, r6
   3a85a:	f106 0601 	add.w	r6, r6, #1
   3a85e:	d1fa      	bne.n	3a856 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   3a860:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3a862:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3a864:	b2db      	uxtb	r3, r3
   3a866:	425d      	negs	r5, r3
   3a868:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3a86a:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   3a86c:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   3a86e:	bf1e      	ittt	ne
   3a870:	3301      	addne	r3, #1
   3a872:	6013      	strne	r3, [r2, #0]
   3a874:	5548      	strbne	r0, [r1, r5]
	return 0;
   3a876:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3a878:	6813      	ldr	r3, [r2, #0]
   3a87a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   3a87e:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   3a880:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   3a882:	bf1f      	itttt	ne
   3a884:	6811      	ldrne	r1, [r2, #0]
   3a886:	780b      	ldrbne	r3, [r1, #0]
   3a888:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   3a88c:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   3a88e:	6813      	ldr	r3, [r2, #0]
   3a890:	3301      	adds	r3, #1
   3a892:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   3a894:	2800      	cmp	r0, #0
   3a896:	d1ef      	bne.n	3a878 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3a898:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   3a89a:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   3a89c:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3a89e:	6053      	str	r3, [r2, #4]
}
   3a8a0:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3a8a2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3a8a6:	e7fb      	b.n	3a8a0 <mqtt_encode_fixed_header+0x5a>

0003a8a8 <mqtt_message_id_only_enc>:
{
   3a8a8:	b570      	push	{r4, r5, r6, lr}
   3a8aa:	4606      	mov	r6, r0
   3a8ac:	4614      	mov	r4, r2
	if (message_id == 0U) {
   3a8ae:	4608      	mov	r0, r1
   3a8b0:	b169      	cbz	r1, 3a8ce <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3a8b2:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3a8b4:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3a8b6:	3505      	adds	r5, #5
   3a8b8:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3a8ba:	f7ff ff97 	bl	3a7ec <pack_uint16>
	if (err_code != 0) {
   3a8be:	b940      	cbnz	r0, 3a8d2 <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3a8c0:	4622      	mov	r2, r4
   3a8c2:	4629      	mov	r1, r5
   3a8c4:	4630      	mov	r0, r6
}
   3a8c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3a8ca:	f7ff bfbc 	b.w	3a846 <mqtt_encode_fixed_header>
		return -EINVAL;
   3a8ce:	f06f 0015 	mvn.w	r0, #21
}
   3a8d2:	bd70      	pop	{r4, r5, r6, pc}

0003a8d4 <publish_encode>:
{
   3a8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3a8d8:	7d87      	ldrb	r7, [r0, #22]
   3a8da:	7a04      	ldrb	r4, [r0, #8]
   3a8dc:	f007 0801 	and.w	r8, r7, #1
{
   3a8e0:	4605      	mov	r5, r0
   3a8e2:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3a8e4:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   3a8e8:	b10c      	cbz	r4, 3a8ee <publish_encode+0x1a>
   3a8ea:	8a83      	ldrh	r3, [r0, #20]
   3a8ec:	b383      	cbz	r3, 3a950 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3a8ee:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3a8f2:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3a8f4:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3a8f6:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3a8f8:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3a8fc:	f7ff ff88 	bl	3a810 <pack_utf8_str>
	if (err_code != 0) {
   3a900:	b9b0      	cbnz	r0, 3a930 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   3a902:	7a2b      	ldrb	r3, [r5, #8]
   3a904:	b9b3      	cbnz	r3, 3a934 <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3a906:	0060      	lsls	r0, r4, #1
   3a908:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3a90c:	692a      	ldr	r2, [r5, #16]
   3a90e:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3a912:	4338      	orrs	r0, r7
   3a914:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3a918:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3a91a:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3a91e:	464a      	mov	r2, r9
   3a920:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   3a922:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3a926:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3a92a:	f7ff ff8c 	bl	3a846 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   3a92e:	b140      	cbz	r0, 3a942 <publish_encode+0x6e>
}
   3a930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   3a934:	4649      	mov	r1, r9
   3a936:	8aa8      	ldrh	r0, [r5, #20]
   3a938:	f7ff ff58 	bl	3a7ec <pack_uint16>
		if (err_code != 0) {
   3a93c:	2800      	cmp	r0, #0
   3a93e:	d0e2      	beq.n	3a906 <publish_encode+0x32>
   3a940:	e7f6      	b.n	3a930 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   3a942:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3a946:	692a      	ldr	r2, [r5, #16]
   3a948:	1a9b      	subs	r3, r3, r2
   3a94a:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   3a94e:	e7ef      	b.n	3a930 <publish_encode+0x5c>
		return -EINVAL;
   3a950:	f06f 0015 	mvn.w	r0, #21
   3a954:	e7ec      	b.n	3a930 <publish_encode+0x5c>

0003a956 <publish_ack_encode>:
{
   3a956:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3a958:	8801      	ldrh	r1, [r0, #0]
   3a95a:	2040      	movs	r0, #64	; 0x40
   3a95c:	f7ff bfa4 	b.w	3a8a8 <mqtt_message_id_only_enc>

0003a960 <subscribe_encode>:
{
   3a960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3a964:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   3a966:	88c0      	ldrh	r0, [r0, #6]
{
   3a968:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3a96a:	b330      	cbz	r0, 3a9ba <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3a96c:	680f      	ldr	r7, [r1, #0]
   3a96e:	3705      	adds	r7, #5
   3a970:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3a972:	f7ff ff3b 	bl	3a7ec <pack_uint16>
	if (err_code != 0) {
   3a976:	4604      	mov	r4, r0
   3a978:	bb08      	cbnz	r0, 3a9be <subscribe_encode+0x5e>
   3a97a:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3a97e:	88b3      	ldrh	r3, [r6, #4]
   3a980:	42a3      	cmp	r3, r4
   3a982:	dc06      	bgt.n	3a992 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3a984:	462a      	mov	r2, r5
   3a986:	4639      	mov	r1, r7
}
   3a988:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3a98c:	2082      	movs	r0, #130	; 0x82
   3a98e:	f7ff bf5a 	b.w	3a846 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3a992:	fb08 f904 	mul.w	r9, r8, r4
   3a996:	6830      	ldr	r0, [r6, #0]
   3a998:	4629      	mov	r1, r5
   3a99a:	4448      	add	r0, r9
   3a99c:	f7ff ff38 	bl	3a810 <pack_utf8_str>
		if (err_code != 0) {
   3a9a0:	b980      	cbnz	r0, 3a9c4 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   3a9a2:	6833      	ldr	r3, [r6, #0]
   3a9a4:	444b      	add	r3, r9
   3a9a6:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3a9a8:	e9d5 3100 	ldrd	r3, r1, [r5]
   3a9ac:	4299      	cmp	r1, r3
   3a9ae:	d00b      	beq.n	3a9c8 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3a9b0:	1c59      	adds	r1, r3, #1
   3a9b2:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   3a9b4:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   3a9b6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   3a9b8:	e7e1      	b.n	3a97e <subscribe_encode+0x1e>
		return -EINVAL;
   3a9ba:	f06f 0415 	mvn.w	r4, #21
}
   3a9be:	4620      	mov	r0, r4
   3a9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3a9c4:	4604      	mov	r4, r0
   3a9c6:	e7fa      	b.n	3a9be <subscribe_encode+0x5e>
		return -ENOMEM;
   3a9c8:	f06f 040b 	mvn.w	r4, #11
   3a9cc:	e7f7      	b.n	3a9be <subscribe_encode+0x5e>

0003a9ce <unsubscribe_encode>:
{
   3a9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3a9d2:	680f      	ldr	r7, [r1, #0]
{
   3a9d4:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3a9d6:	3705      	adds	r7, #5
	err_code = pack_uint16(param->message_id, buf);
   3a9d8:	88c0      	ldrh	r0, [r0, #6]
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3a9da:	600f      	str	r7, [r1, #0]
{
   3a9dc:	460d      	mov	r5, r1
	err_code = pack_uint16(param->message_id, buf);
   3a9de:	f7ff ff05 	bl	3a7ec <pack_uint16>
	if (err_code != 0) {
   3a9e2:	4604      	mov	r4, r0
   3a9e4:	b9a8      	cbnz	r0, 3aa12 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3a9e6:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3a9ea:	88b3      	ldrh	r3, [r6, #4]
   3a9ec:	42a3      	cmp	r3, r4
   3a9ee:	dc06      	bgt.n	3a9fe <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3a9f0:	462a      	mov	r2, r5
   3a9f2:	4639      	mov	r1, r7
}
   3a9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3a9f8:	20a2      	movs	r0, #162	; 0xa2
   3a9fa:	f7ff bf24 	b.w	3a846 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3a9fe:	6830      	ldr	r0, [r6, #0]
   3aa00:	4629      	mov	r1, r5
   3aa02:	fb08 0004 	mla	r0, r8, r4, r0
   3aa06:	f7ff ff03 	bl	3a810 <pack_utf8_str>
		if (err_code != 0) {
   3aa0a:	b908      	cbnz	r0, 3aa10 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3aa0c:	3401      	adds	r4, #1
   3aa0e:	e7ec      	b.n	3a9ea <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3aa10:	4604      	mov	r4, r0
}
   3aa12:	4620      	mov	r0, r4
   3aa14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003aa18 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   3aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3aa1a:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   3aa1c:	e9d1 3100 	ldrd	r3, r1, [r1]
   3aa20:	1acb      	subs	r3, r1, r3
   3aa22:	4293      	cmp	r3, r2
{
   3aa24:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   3aa26:	d301      	bcc.n	3aa2c <mqtt_read_message_chunk+0x14>
		return 0;
   3aa28:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   3aa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   3aa2c:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   3aa2e:	190f      	adds	r7, r1, r4
   3aa30:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   3aa34:	4413      	add	r3, r2
   3aa36:	429f      	cmp	r7, r3
   3aa38:	d813      	bhi.n	3aa62 <mqtt_read_message_chunk+0x4a>
   3aa3a:	4297      	cmp	r7, r2
   3aa3c:	d311      	bcc.n	3aa62 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   3aa3e:	2300      	movs	r3, #0
   3aa40:	4622      	mov	r2, r4
   3aa42:	f7e9 fe45 	bl	246d0 <mqtt_transport_read>
	if (len < 0) {
   3aa46:	2800      	cmp	r0, #0
   3aa48:	dbef      	blt.n	3aa2a <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   3aa4a:	d00d      	beq.n	3aa68 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   3aa4c:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   3aa4e:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   3aa50:	4403      	add	r3, r0
   3aa52:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3aa54:	686b      	ldr	r3, [r5, #4]
   3aa56:	4403      	add	r3, r0
   3aa58:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3aa5a:	d2e5      	bcs.n	3aa28 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   3aa5c:	f06f 000a 	mvn.w	r0, #10
   3aa60:	e7e3      	b.n	3aa2a <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   3aa62:	f06f 000b 	mvn.w	r0, #11
   3aa66:	e7e0      	b.n	3aa2a <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   3aa68:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3aa6c:	e7dd      	b.n	3aa2a <mqtt_read_message_chunk+0x12>

0003aa6e <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3aa6e:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3aa70:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3aa72:	69c2      	ldr	r2, [r0, #28]
{
   3aa74:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3aa76:	9302      	str	r3, [sp, #8]
{
   3aa78:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3aa7a:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3aa7c:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3aa7e:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3aa80:	4628      	mov	r0, r5
   3aa82:	a902      	add	r1, sp, #8
   3aa84:	f7ff ffc8 	bl	3aa18 <mqtt_read_message_chunk>
		if (err_code < 0) {
   3aa88:	1e04      	subs	r4, r0, #0
   3aa8a:	db2d      	blt.n	3aae8 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   3aa8c:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3aa8e:	aa01      	add	r2, sp, #4
   3aa90:	f10d 0103 	add.w	r1, sp, #3
   3aa94:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   3aa96:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3aa98:	f7ff fe08 	bl	3a6ac <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3aa9c:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3aaa0:	4604      	mov	r4, r0
		chunk_size = 1U;
   3aaa2:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   3aaa6:	d0eb      	beq.n	3aa80 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   3aaa8:	2800      	cmp	r0, #0
   3aaaa:	db21      	blt.n	3aaf0 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3aaac:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3aab0:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   3aab4:	2b30      	cmp	r3, #48	; 0x30
   3aab6:	d11e      	bne.n	3aaf6 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   3aab8:	2202      	movs	r2, #2
   3aaba:	4628      	mov	r0, r5
   3aabc:	a902      	add	r1, sp, #8
   3aabe:	f7ff ffab 	bl	3aa18 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3aac2:	1e04      	subs	r4, r0, #0
   3aac4:	db10      	blt.n	3aae8 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   3aac6:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3aac8:	f016 0f06 	tst.w	r6, #6
   3aacc:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   3aace:	4628      	mov	r0, r5
   3aad0:	ba52      	rev16	r2, r2
   3aad2:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   3aad4:	bf0c      	ite	eq
   3aad6:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   3aad8:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   3aada:	a902      	add	r1, sp, #8
   3aadc:	f7ff ff9c 	bl	3aa18 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3aae0:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   3aae4:	2c00      	cmp	r4, #0
   3aae6:	da0d      	bge.n	3ab04 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3aae8:	f114 0f0b 	cmn.w	r4, #11
   3aaec:	d100      	bne.n	3aaf0 <mqtt_handle_rx+0x82>
   3aaee:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3aaf0:	4620      	mov	r0, r4
   3aaf2:	b00c      	add	sp, #48	; 0x30
   3aaf4:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3aaf6:	4628      	mov	r0, r5
   3aaf8:	9a01      	ldr	r2, [sp, #4]
   3aafa:	a902      	add	r1, sp, #8
   3aafc:	f7ff ff8c 	bl	3aa18 <mqtt_read_message_chunk>
   3ab00:	4604      	mov	r4, r0
   3ab02:	e7ef      	b.n	3aae4 <mqtt_handle_rx+0x76>
	evt.result = 0;
   3ab04:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3ab06:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3ab0a:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3ab0c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3ab10:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   3ab12:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3ab14:	d066      	beq.n	3abe4 <mqtt_handle_rx+0x176>
   3ab16:	d813      	bhi.n	3ab40 <mqtt_handle_rx+0xd2>
   3ab18:	2b40      	cmp	r3, #64	; 0x40
   3ab1a:	d059      	beq.n	3abd0 <mqtt_handle_rx+0x162>
   3ab1c:	d806      	bhi.n	3ab2c <mqtt_handle_rx+0xbe>
   3ab1e:	2b20      	cmp	r3, #32
   3ab20:	d02f      	beq.n	3ab82 <mqtt_handle_rx+0x114>
   3ab22:	2b30      	cmp	r3, #48	; 0x30
   3ab24:	d048      	beq.n	3abb8 <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   3ab26:	2400      	movs	r4, #0
   3ab28:	61ec      	str	r4, [r5, #28]
	return 0;
   3ab2a:	e7e1      	b.n	3aaf0 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   3ab2c:	2b50      	cmp	r3, #80	; 0x50
   3ab2e:	d1fa      	bne.n	3ab26 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   3ab30:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3ab32:	a905      	add	r1, sp, #20
   3ab34:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3ab36:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3ab3a:	f7ff fe3f 	bl	3a7bc <publish_receive_decode>
   3ab3e:	e04e      	b.n	3abde <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3ab40:	2bb0      	cmp	r3, #176	; 0xb0
   3ab42:	d05f      	beq.n	3ac04 <mqtt_handle_rx+0x196>
   3ab44:	d80b      	bhi.n	3ab5e <mqtt_handle_rx+0xf0>
   3ab46:	2b70      	cmp	r3, #112	; 0x70
   3ab48:	d054      	beq.n	3abf4 <mqtt_handle_rx+0x186>
   3ab4a:	2b90      	cmp	r3, #144	; 0x90
   3ab4c:	d1eb      	bne.n	3ab26 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   3ab4e:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3ab50:	a905      	add	r1, sp, #20
   3ab52:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3ab54:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3ab58:	f7ff fe36 	bl	3a7c8 <subscribe_ack_decode>
   3ab5c:	e03f      	b.n	3abde <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3ab5e:	2bd0      	cmp	r3, #208	; 0xd0
   3ab60:	d1e1      	bne.n	3ab26 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   3ab62:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   3ab66:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   3ab68:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   3ab6a:	bfc8      	it	gt
   3ab6c:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   3ab70:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   3ab74:	bfc8      	it	gt
   3ab76:	b252      	sxtbgt	r2, r2
   3ab78:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   3ab7c:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   3ab80:	e010      	b.n	3aba4 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   3ab82:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3ab86:	4628      	mov	r0, r5
   3ab88:	aa05      	add	r2, sp, #20
   3ab8a:	a902      	add	r1, sp, #8
   3ab8c:	f7ff fdb9 	bl	3a702 <connect_ack_decode>
		if (err_code == 0) {
   3ab90:	4604      	mov	r4, r0
   3ab92:	bb28      	cbnz	r0, 3abe0 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   3ab94:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3ab98:	b95a      	cbnz	r2, 3abb2 <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3ab9a:	69ab      	ldr	r3, [r5, #24]
   3ab9c:	f043 0304 	orr.w	r3, r3, #4
   3aba0:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   3aba2:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   3aba4:	4628      	mov	r0, r5
   3aba6:	a904      	add	r1, sp, #16
   3aba8:	f000 f8bd 	bl	3ad26 <event_notify>
	if (err_code < 0) {
   3abac:	2c00      	cmp	r4, #0
   3abae:	daba      	bge.n	3ab26 <mqtt_handle_rx+0xb8>
   3abb0:	e79e      	b.n	3aaf0 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   3abb2:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   3abb6:	e7f4      	b.n	3aba2 <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   3abb8:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3abba:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3abbc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3abc0:	ab05      	add	r3, sp, #20
   3abc2:	f7ff fdb9 	bl	3a738 <publish_decode>
		client->internal.remaining_payload =
   3abc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   3abc8:	4604      	mov	r4, r0
		evt.result = err_code;
   3abca:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3abcc:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3abce:	e7e9      	b.n	3aba4 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   3abd0:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3abd2:	a905      	add	r1, sp, #20
   3abd4:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3abd6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3abda:	f7ff fded 	bl	3a7b8 <publish_ack_decode>
   3abde:	4604      	mov	r4, r0
		evt.result = err_code;
   3abe0:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3abe2:	e7df      	b.n	3aba4 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   3abe4:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3abe6:	a905      	add	r1, sp, #20
   3abe8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3abea:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3abee:	f7ff fde7 	bl	3a7c0 <publish_release_decode>
   3abf2:	e7f4      	b.n	3abde <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   3abf4:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3abf6:	a905      	add	r1, sp, #20
   3abf8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   3abfa:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3abfe:	f7ff fde1 	bl	3a7c4 <publish_complete_decode>
   3ac02:	e7ec      	b.n	3abde <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   3ac04:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3ac06:	a905      	add	r1, sp, #20
   3ac08:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3ac0c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3ac10:	f7ff fdea 	bl	3a7e8 <unsubscribe_ack_decode>
   3ac14:	e7e3      	b.n	3abde <mqtt_handle_rx+0x170>

0003ac16 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   3ac16:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   3ac18:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   3ac1a:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3ac1c:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3ac1e:	2206      	movs	r2, #6
   3ac20:	2101      	movs	r1, #1
   3ac22:	f7e6 fd4b 	bl	216bc <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   3ac26:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3ac28:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   3ac2a:	da04      	bge.n	3ac36 <mqtt_client_tcp_connect+0x20>

	ret = zsock_connect(client->transport.tcp.sock, client->broker,
			    peer_addr_size);
	if (ret < 0) {
		(void) zsock_close(client->transport.tcp.sock);
		return -errno;
   3ac2c:	f7ff fcbb 	bl	3a5a6 <__errno>
   3ac30:	6800      	ldr	r0, [r0, #0]
   3ac32:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   3ac34:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   3ac36:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   3ac38:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   3ac3a:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   3ac3c:	bf14      	ite	ne
   3ac3e:	2218      	movne	r2, #24
   3ac40:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   3ac42:	f7ff f8d7 	bl	39df4 <z_impl_zsock_connect>
	if (ret < 0) {
   3ac46:	2800      	cmp	r0, #0
   3ac48:	da03      	bge.n	3ac52 <mqtt_client_tcp_connect+0x3c>
		(void) zsock_close(client->transport.tcp.sock);
   3ac4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3ac4c:	f7ff f8ae 	bl	39dac <z_impl_zsock_close>
   3ac50:	e7ec      	b.n	3ac2c <mqtt_client_tcp_connect+0x16>
	return 0;
   3ac52:	2000      	movs	r0, #0
   3ac54:	e7ee      	b.n	3ac34 <mqtt_client_tcp_connect+0x1e>

0003ac56 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3ac56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3ac5a:	2400      	movs	r4, #0
{
   3ac5c:	4606      	mov	r6, r0
   3ac5e:	460f      	mov	r7, r1
   3ac60:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3ac62:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3ac64:	42ac      	cmp	r4, r5
   3ac66:	d301      	bcc.n	3ac6c <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3ac68:	2000      	movs	r0, #0
   3ac6a:	e00d      	b.n	3ac88 <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   3ac6c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3ac6e:	2300      	movs	r3, #0
   3ac70:	e9cd 8800 	strd	r8, r8, [sp]
   3ac74:	1b2a      	subs	r2, r5, r4
   3ac76:	1939      	adds	r1, r7, r4
   3ac78:	f7ff f8e3 	bl	39e42 <z_impl_zsock_sendto>
		if (ret < 0) {
   3ac7c:	1e03      	subs	r3, r0, #0
   3ac7e:	da06      	bge.n	3ac8e <mqtt_client_tcp_write+0x38>
			return -errno;
   3ac80:	f7ff fc91 	bl	3a5a6 <__errno>
   3ac84:	6800      	ldr	r0, [r0, #0]
   3ac86:	4240      	negs	r0, r0
}
   3ac88:	b002      	add	sp, #8
   3ac8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3ac8e:	441c      	add	r4, r3
   3ac90:	e7e8      	b.n	3ac64 <mqtt_client_tcp_write+0xe>

0003ac92 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   3ac92:	b508      	push	{r3, lr}
	int ret;

	ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   3ac94:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3ac96:	2200      	movs	r2, #0
   3ac98:	f7ff f903 	bl	39ea2 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   3ac9c:	2800      	cmp	r0, #0
   3ac9e:	da04      	bge.n	3acaa <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   3aca0:	f7ff fc81 	bl	3a5a6 <__errno>
   3aca4:	6800      	ldr	r0, [r0, #0]
   3aca6:	4240      	negs	r0, r0
	}

	return 0;
}
   3aca8:	bd08      	pop	{r3, pc}
	return 0;
   3acaa:	2000      	movs	r0, #0
   3acac:	e7fc      	b.n	3aca8 <mqtt_client_tcp_write_msg+0x16>

0003acae <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3acae:	b513      	push	{r0, r1, r4, lr}
   3acb0:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   3acb2:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   3acb4:	bf14      	ite	ne
   3acb6:	4623      	movne	r3, r4
   3acb8:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   3acba:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3acbc:	e9cd 4400 	strd	r4, r4, [sp]
   3acc0:	f7ff f916 	bl	39ef0 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3acc4:	2800      	cmp	r0, #0
   3acc6:	da03      	bge.n	3acd0 <mqtt_client_tcp_read+0x22>
		return -errno;
   3acc8:	f7ff fc6d 	bl	3a5a6 <__errno>
   3accc:	6800      	ldr	r0, [r0, #0]
   3acce:	4240      	negs	r0, r0
	}

	return ret;
}
   3acd0:	b002      	add	sp, #8
   3acd2:	bd10      	pop	{r4, pc}

0003acd4 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3acd4:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   3acd6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3acd8:	f7ff f868 	bl	39dac <z_impl_zsock_close>
	if (ret < 0) {
   3acdc:	2800      	cmp	r0, #0
   3acde:	da04      	bge.n	3acea <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3ace0:	f7ff fc61 	bl	3a5a6 <__errno>
   3ace4:	6800      	ldr	r0, [r0, #0]
   3ace6:	4240      	negs	r0, r0
	}

	return 0;
}
   3ace8:	bd08      	pop	{r3, pc}
	return 0;
   3acea:	2000      	movs	r0, #0
   3acec:	e7fc      	b.n	3ace8 <mqtt_client_tcp_disconnect+0x14>

0003acee <k_uptime_get>:
{
   3acee:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   3acf0:	f003 f886 	bl	3de00 <z_impl_k_uptime_ticks>
   3acf4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3acf8:	fba0 2304 	umull	r2, r3, r0, r4
   3acfc:	fb04 3301 	mla	r3, r4, r1, r3
   3ad00:	0bd0      	lsrs	r0, r2, #15
}
   3ad02:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   3ad06:	0bd9      	lsrs	r1, r3, #15
   3ad08:	bd10      	pop	{r4, pc}

0003ad0a <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3ad0a:	b538      	push	{r3, r4, r5, lr}
   3ad0c:	4604      	mov	r4, r0
   3ad0e:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3ad10:	6f42      	ldr	r2, [r0, #116]	; 0x74
   3ad12:	2100      	movs	r1, #0
   3ad14:	6f00      	ldr	r0, [r0, #112]	; 0x70
   3ad16:	f003 f948 	bl	3dfaa <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3ad1a:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   3ad1c:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   3ad1e:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3ad20:	4413      	add	r3, r2
   3ad22:	606b      	str	r3, [r5, #4]
}
   3ad24:	bd38      	pop	{r3, r4, r5, pc}

0003ad26 <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   3ad26:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   3ad28:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   3ad2a:	4604      	mov	r4, r0
   3ad2c:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   3ad2e:	b15b      	cbz	r3, 3ad48 <event_notify+0x22>
		mqtt_mutex_unlock(client);
   3ad30:	f7e9 fce6 	bl	24700 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   3ad34:	4620      	mov	r0, r4
   3ad36:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3ad38:	9901      	ldr	r1, [sp, #4]
   3ad3a:	4798      	blx	r3

		mqtt_mutex_lock(client);
   3ad3c:	4620      	mov	r0, r4
	}
}
   3ad3e:	b002      	add	sp, #8
   3ad40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   3ad44:	f7e9 bcfa 	b.w	2473c <mqtt_mutex_lock>
}
   3ad48:	b002      	add	sp, #8
   3ad4a:	bd10      	pop	{r4, pc}

0003ad4c <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   3ad4c:	b530      	push	{r4, r5, lr}
   3ad4e:	b089      	sub	sp, #36	; 0x24
   3ad50:	4604      	mov	r4, r0
   3ad52:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   3ad54:	f7e9 fcca 	bl	246ec <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3ad58:	2100      	movs	r1, #0

	/* Reset internal state. */
	client_reset(client);

	if (notify) {
		struct mqtt_evt evt = {
   3ad5a:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   3ad5c:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   3ad60:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   3ad64:	4668      	mov	r0, sp
   3ad66:	f003 f920 	bl	3dfaa <memset>
   3ad6a:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   3ad6c:	4669      	mov	r1, sp
   3ad6e:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   3ad70:	f88d 3000 	strb.w	r3, [sp]
   3ad74:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   3ad76:	f7ff ffd6 	bl	3ad26 <event_notify>
	}
}
   3ad7a:	b009      	add	sp, #36	; 0x24
   3ad7c:	bd30      	pop	{r4, r5, pc}

0003ad7e <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3ad7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3ad80:	4617      	mov	r7, r2
   3ad82:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   3ad84:	4605      	mov	r5, r0
{
   3ad86:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   3ad88:	b320      	cbz	r0, 3add4 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   3ad8a:	f7e9 fcd7 	bl	2473c <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3ad8e:	6a2c      	ldr	r4, [r5, #32]
   3ad90:	b1b4      	cbz	r4, 3adc0 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   3ad92:	42bc      	cmp	r4, r7
   3ad94:	4622      	mov	r2, r4
   3ad96:	4633      	mov	r3, r6
   3ad98:	bf28      	it	cs
   3ad9a:	463a      	movcs	r2, r7
   3ad9c:	4628      	mov	r0, r5
   3ad9e:	9901      	ldr	r1, [sp, #4]
   3ada0:	f7e9 fc96 	bl	246d0 <mqtt_transport_read>
   3ada4:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   3ada6:	b916      	cbnz	r6, 3adae <read_publish_payload+0x30>
   3ada8:	f110 0f0b 	cmn.w	r0, #11
   3adac:	d008      	beq.n	3adc0 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   3adae:	2c00      	cmp	r4, #0
   3adb0:	dc0c      	bgt.n	3adcc <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   3adb2:	bf08      	it	eq
   3adb4:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   3adb8:	4628      	mov	r0, r5
   3adba:	4621      	mov	r1, r4
   3adbc:	f7ff ffc6 	bl	3ad4c <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   3adc0:	4628      	mov	r0, r5
   3adc2:	f7e9 fc9d 	bl	24700 <mqtt_mutex_unlock>

	return ret;
}
   3adc6:	4620      	mov	r0, r4
   3adc8:	b003      	add	sp, #12
   3adca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   3adcc:	6a2b      	ldr	r3, [r5, #32]
   3adce:	1b1b      	subs	r3, r3, r4
   3add0:	622b      	str	r3, [r5, #32]
   3add2:	e7f5      	b.n	3adc0 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   3add4:	f06f 0415 	mvn.w	r4, #21
   3add8:	e7f5      	b.n	3adc6 <read_publish_payload+0x48>

0003adda <client_write>:
{
   3adda:	b538      	push	{r3, r4, r5, lr}
   3addc:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   3adde:	f7e9 fc5d 	bl	2469c <mqtt_transport_write>
	if (err_code < 0) {
   3ade2:	1e04      	subs	r4, r0, #0
   3ade4:	da05      	bge.n	3adf2 <client_write+0x18>
		client_disconnect(client, err_code, true);
   3ade6:	4621      	mov	r1, r4
   3ade8:	4628      	mov	r0, r5
   3adea:	f7ff ffaf 	bl	3ad4c <client_disconnect.constprop.0>
}
   3adee:	4620      	mov	r0, r4
   3adf0:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   3adf2:	f7ff ff7c 	bl	3acee <k_uptime_get>
	return 0;
   3adf6:	2400      	movs	r4, #0
   3adf8:	6168      	str	r0, [r5, #20]
   3adfa:	e7f8      	b.n	3adee <client_write+0x14>

0003adfc <mqtt_client_init>:
{
   3adfc:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   3adfe:	4604      	mov	r4, r0
   3ae00:	b1a0      	cbz	r0, 3ae2c <mqtt_client_init+0x30>
	MQTT_STATE_INIT(client);
   3ae02:	2500      	movs	r5, #0
   3ae04:	2280      	movs	r2, #128	; 0x80
   3ae06:	2100      	movs	r1, #0
   3ae08:	f003 f8cf 	bl	3dfaa <memset>
   3ae0c:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   3ae0e:	4620      	mov	r0, r4
   3ae10:	f002 ff9b 	bl	3dd4a <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   3ae14:	2304      	movs	r3, #4
   3ae16:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = MQTT_CLEAN_SESSION;
   3ae1a:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   3ae1e:	f365 0341 	bfi	r3, r5, #1, #1
   3ae22:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   3ae26:	2378      	movs	r3, #120	; 0x78
   3ae28:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   3ae2c:	bd38      	pop	{r3, r4, r5, pc}

0003ae2e <mqtt_connect>:
{
   3ae2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3ae30:	4605      	mov	r5, r0
   3ae32:	2800      	cmp	r0, #0
   3ae34:	d03b      	beq.n	3aeae <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3ae36:	6c83      	ldr	r3, [r0, #72]	; 0x48
   3ae38:	2b00      	cmp	r3, #0
   3ae3a:	d038      	beq.n	3aeae <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   3ae3c:	f7e9 fc7e 	bl	2473c <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3ae40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   3ae42:	b38b      	cbz	r3, 3aea8 <mqtt_connect+0x7a>
   3ae44:	6eab      	ldr	r3, [r5, #104]	; 0x68
   3ae46:	b37b      	cbz	r3, 3aea8 <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   3ae48:	4628      	mov	r0, r5
   3ae4a:	f7e9 fc1d 	bl	24688 <mqtt_transport_connect>
	if (err_code < 0) {
   3ae4e:	1e04      	subs	r4, r0, #0
   3ae50:	db24      	blt.n	3ae9c <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   3ae52:	4669      	mov	r1, sp
   3ae54:	4628      	mov	r0, r5
   3ae56:	f7ff ff58 	bl	3ad0a <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3ae5a:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3ae5c:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3ae5e:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   3ae62:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3ae64:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3ae66:	f7e9 fb6b 	bl	24540 <connect_request_encode>
	if (err_code < 0) {
   3ae6a:	1e04      	subs	r4, r0, #0
   3ae6c:	db13      	blt.n	3ae96 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   3ae6e:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ae72:	4628      	mov	r0, r5
   3ae74:	1a52      	subs	r2, r2, r1
   3ae76:	f7e9 fc11 	bl	2469c <mqtt_transport_write>
	if (err_code < 0) {
   3ae7a:	1e04      	subs	r4, r0, #0
   3ae7c:	db0b      	blt.n	3ae96 <mqtt_connect+0x68>
   3ae7e:	f7ff ff36 	bl	3acee <k_uptime_get>
	client->unacked_ping = 0;
   3ae82:	2400      	movs	r4, #0
   3ae84:	6168      	str	r0, [r5, #20]
   3ae86:	f885 407b 	strb.w	r4, [r5, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   3ae8a:	4628      	mov	r0, r5
   3ae8c:	f7e9 fc38 	bl	24700 <mqtt_mutex_unlock>
}
   3ae90:	4620      	mov	r0, r4
   3ae92:	b003      	add	sp, #12
   3ae94:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   3ae96:	4628      	mov	r0, r5
   3ae98:	f7e9 fc28 	bl	246ec <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3ae9c:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3ae9e:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   3aea2:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   3aea6:	e7f0      	b.n	3ae8a <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   3aea8:	f06f 040b 	mvn.w	r4, #11
   3aeac:	e7f6      	b.n	3ae9c <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   3aeae:	f06f 0415 	mvn.w	r4, #21
   3aeb2:	e7ed      	b.n	3ae90 <mqtt_connect+0x62>

0003aeb4 <mqtt_publish>:
{
   3aeb4:	b570      	push	{r4, r5, r6, lr}
   3aeb6:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3aeb8:	4605      	mov	r5, r0
{
   3aeba:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   3aebc:	2800      	cmp	r0, #0
   3aebe:	d03b      	beq.n	3af38 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   3aec0:	2900      	cmp	r1, #0
   3aec2:	d039      	beq.n	3af38 <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   3aec4:	f7e9 fc3a 	bl	2473c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3aec8:	4628      	mov	r0, r5
   3aeca:	a901      	add	r1, sp, #4
   3aecc:	f7ff ff1d 	bl	3ad0a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3aed0:	69ab      	ldr	r3, [r5, #24]
   3aed2:	075b      	lsls	r3, r3, #29
   3aed4:	d52d      	bpl.n	3af32 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   3aed6:	4630      	mov	r0, r6
   3aed8:	a901      	add	r1, sp, #4
   3aeda:	f7ff fcfb 	bl	3a8d4 <publish_encode>
	if (err_code < 0) {
   3aede:	1e04      	subs	r4, r0, #0
   3aee0:	db1c      	blt.n	3af1c <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   3aee2:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   3aee4:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   3aee6:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   3aee8:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   3aeea:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   3aeec:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   3aeee:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   3aef0:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   3aef2:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   3aef4:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   3aef6:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   3aefa:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   3aefc:	f003 f855 	bl	3dfaa <memset>
	msg.msg_iov = io_vector;
   3af00:	ab03      	add	r3, sp, #12
   3af02:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3af04:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   3af06:	4628      	mov	r0, r5
   3af08:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3af0a:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   3af0c:	f7e9 fbd2 	bl	246b4 <mqtt_transport_write_msg>
	if (err_code < 0) {
   3af10:	1e04      	subs	r4, r0, #0
   3af12:	da09      	bge.n	3af28 <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   3af14:	4621      	mov	r1, r4
   3af16:	4628      	mov	r0, r5
   3af18:	f7ff ff18 	bl	3ad4c <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3af1c:	4628      	mov	r0, r5
   3af1e:	f7e9 fbef 	bl	24700 <mqtt_mutex_unlock>
}
   3af22:	4620      	mov	r0, r4
   3af24:	b00e      	add	sp, #56	; 0x38
   3af26:	bd70      	pop	{r4, r5, r6, pc}
   3af28:	f7ff fee1 	bl	3acee <k_uptime_get>
	return 0;
   3af2c:	2400      	movs	r4, #0
   3af2e:	6168      	str	r0, [r5, #20]
   3af30:	e7f4      	b.n	3af1c <mqtt_publish+0x68>
		return -ENOTCONN;
   3af32:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3af36:	e7f1      	b.n	3af1c <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   3af38:	f06f 0415 	mvn.w	r4, #21
   3af3c:	e7f1      	b.n	3af22 <mqtt_publish+0x6e>

0003af3e <mqtt_publish_qos1_ack>:
{
   3af3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3af40:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3af42:	4605      	mov	r5, r0
   3af44:	b1f8      	cbz	r0, 3af86 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   3af46:	b1f1      	cbz	r1, 3af86 <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   3af48:	f7e9 fbf8 	bl	2473c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3af4c:	4669      	mov	r1, sp
   3af4e:	4628      	mov	r0, r5
   3af50:	f7ff fedb 	bl	3ad0a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3af54:	69ab      	ldr	r3, [r5, #24]
   3af56:	075b      	lsls	r3, r3, #29
   3af58:	d512      	bpl.n	3af80 <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   3af5a:	4620      	mov	r0, r4
   3af5c:	4669      	mov	r1, sp
   3af5e:	f7ff fcfa 	bl	3a956 <publish_ack_encode>
	if (err_code < 0) {
   3af62:	1e04      	subs	r4, r0, #0
   3af64:	db06      	blt.n	3af74 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3af66:	e9dd 1200 	ldrd	r1, r2, [sp]
   3af6a:	4628      	mov	r0, r5
   3af6c:	1a52      	subs	r2, r2, r1
   3af6e:	f7ff ff34 	bl	3adda <client_write>
   3af72:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3af74:	4628      	mov	r0, r5
   3af76:	f7e9 fbc3 	bl	24700 <mqtt_mutex_unlock>
}
   3af7a:	4620      	mov	r0, r4
   3af7c:	b003      	add	sp, #12
   3af7e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3af80:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3af84:	e7f6      	b.n	3af74 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   3af86:	f06f 0415 	mvn.w	r4, #21
   3af8a:	e7f6      	b.n	3af7a <mqtt_publish_qos1_ack+0x3c>

0003af8c <mqtt_disconnect>:
{
   3af8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3af8e:	4605      	mov	r5, r0
   3af90:	b310      	cbz	r0, 3afd8 <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   3af92:	f7e9 fbd3 	bl	2473c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3af96:	4669      	mov	r1, sp
   3af98:	4628      	mov	r0, r5
   3af9a:	f7ff feb6 	bl	3ad0a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3af9e:	69ab      	ldr	r3, [r5, #24]
   3afa0:	075b      	lsls	r3, r3, #29
   3afa2:	d516      	bpl.n	3afd2 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   3afa4:	4668      	mov	r0, sp
   3afa6:	f7e9 fb4b 	bl	24640 <disconnect_encode>
	if (err_code < 0) {
   3afaa:	1e04      	subs	r4, r0, #0
   3afac:	db0b      	blt.n	3afc6 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3afae:	e9dd 1200 	ldrd	r1, r2, [sp]
   3afb2:	4628      	mov	r0, r5
   3afb4:	1a52      	subs	r2, r2, r1
   3afb6:	f7ff ff10 	bl	3adda <client_write>
	if (err_code < 0) {
   3afba:	1e04      	subs	r4, r0, #0
   3afbc:	db03      	blt.n	3afc6 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   3afbe:	2100      	movs	r1, #0
   3afc0:	4628      	mov	r0, r5
   3afc2:	f7ff fec3 	bl	3ad4c <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3afc6:	4628      	mov	r0, r5
   3afc8:	f7e9 fb9a 	bl	24700 <mqtt_mutex_unlock>
}
   3afcc:	4620      	mov	r0, r4
   3afce:	b003      	add	sp, #12
   3afd0:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3afd2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3afd6:	e7f6      	b.n	3afc6 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   3afd8:	f06f 0415 	mvn.w	r4, #21
   3afdc:	e7f6      	b.n	3afcc <mqtt_disconnect+0x40>

0003afde <mqtt_subscribe>:
{
   3afde:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3afe0:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3afe2:	4605      	mov	r5, r0
   3afe4:	b1f8      	cbz	r0, 3b026 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   3afe6:	b1f1      	cbz	r1, 3b026 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   3afe8:	f7e9 fba8 	bl	2473c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3afec:	4669      	mov	r1, sp
   3afee:	4628      	mov	r0, r5
   3aff0:	f7ff fe8b 	bl	3ad0a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3aff4:	69ab      	ldr	r3, [r5, #24]
   3aff6:	075b      	lsls	r3, r3, #29
   3aff8:	d512      	bpl.n	3b020 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   3affa:	4620      	mov	r0, r4
   3affc:	4669      	mov	r1, sp
   3affe:	f7ff fcaf 	bl	3a960 <subscribe_encode>
	if (err_code < 0) {
   3b002:	1e04      	subs	r4, r0, #0
   3b004:	db06      	blt.n	3b014 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3b006:	e9dd 1200 	ldrd	r1, r2, [sp]
   3b00a:	4628      	mov	r0, r5
   3b00c:	1a52      	subs	r2, r2, r1
   3b00e:	f7ff fee4 	bl	3adda <client_write>
   3b012:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3b014:	4628      	mov	r0, r5
   3b016:	f7e9 fb73 	bl	24700 <mqtt_mutex_unlock>
}
   3b01a:	4620      	mov	r0, r4
   3b01c:	b003      	add	sp, #12
   3b01e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3b020:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3b024:	e7f6      	b.n	3b014 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   3b026:	f06f 0415 	mvn.w	r4, #21
   3b02a:	e7f6      	b.n	3b01a <mqtt_subscribe+0x3c>

0003b02c <mqtt_unsubscribe>:
{
   3b02c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3b02e:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3b030:	4605      	mov	r5, r0
   3b032:	b1f8      	cbz	r0, 3b074 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   3b034:	b1f1      	cbz	r1, 3b074 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   3b036:	f7e9 fb81 	bl	2473c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3b03a:	4669      	mov	r1, sp
   3b03c:	4628      	mov	r0, r5
   3b03e:	f7ff fe64 	bl	3ad0a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3b042:	69ab      	ldr	r3, [r5, #24]
   3b044:	075b      	lsls	r3, r3, #29
   3b046:	d512      	bpl.n	3b06e <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   3b048:	4620      	mov	r0, r4
   3b04a:	4669      	mov	r1, sp
   3b04c:	f7ff fcbf 	bl	3a9ce <unsubscribe_encode>
	if (err_code < 0) {
   3b050:	1e04      	subs	r4, r0, #0
   3b052:	db06      	blt.n	3b062 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3b054:	e9dd 1200 	ldrd	r1, r2, [sp]
   3b058:	4628      	mov	r0, r5
   3b05a:	1a52      	subs	r2, r2, r1
   3b05c:	f7ff febd 	bl	3adda <client_write>
   3b060:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3b062:	4628      	mov	r0, r5
   3b064:	f7e9 fb4c 	bl	24700 <mqtt_mutex_unlock>
}
   3b068:	4620      	mov	r0, r4
   3b06a:	b003      	add	sp, #12
   3b06c:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3b06e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3b072:	e7f6      	b.n	3b062 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   3b074:	f06f 0415 	mvn.w	r4, #21
   3b078:	e7f6      	b.n	3b068 <mqtt_unsubscribe+0x3c>

0003b07a <mqtt_ping>:
{
   3b07a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3b07c:	4605      	mov	r5, r0
   3b07e:	b320      	cbz	r0, 3b0ca <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   3b080:	f7e9 fb5c 	bl	2473c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3b084:	4669      	mov	r1, sp
   3b086:	4628      	mov	r0, r5
   3b088:	f7ff fe3f 	bl	3ad0a <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3b08c:	69ab      	ldr	r3, [r5, #24]
   3b08e:	075b      	lsls	r3, r3, #29
   3b090:	d518      	bpl.n	3b0c4 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   3b092:	4668      	mov	r0, sp
   3b094:	f7e9 fae6 	bl	24664 <ping_request_encode>
	if (err_code < 0) {
   3b098:	1e04      	subs	r4, r0, #0
   3b09a:	db0d      	blt.n	3b0b8 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3b09c:	e9dd 1200 	ldrd	r1, r2, [sp]
   3b0a0:	4628      	mov	r0, r5
   3b0a2:	1a52      	subs	r2, r2, r1
   3b0a4:	f7ff fe99 	bl	3adda <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   3b0a8:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3b0ac:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   3b0ae:	2b7f      	cmp	r3, #127	; 0x7f
   3b0b0:	d002      	beq.n	3b0b8 <mqtt_ping+0x3e>
		client->unacked_ping++;
   3b0b2:	3301      	adds	r3, #1
   3b0b4:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   3b0b8:	4628      	mov	r0, r5
   3b0ba:	f7e9 fb21 	bl	24700 <mqtt_mutex_unlock>
}
   3b0be:	4620      	mov	r0, r4
   3b0c0:	b003      	add	sp, #12
   3b0c2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3b0c4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3b0c8:	e7f6      	b.n	3b0b8 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   3b0ca:	f06f 0415 	mvn.w	r4, #21
   3b0ce:	e7f6      	b.n	3b0be <mqtt_ping+0x44>

0003b0d0 <mqtt_live>:
{
   3b0d0:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   3b0d2:	4606      	mov	r6, r0
   3b0d4:	b300      	cbz	r0, 3b118 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   3b0d6:	f7e9 fb31 	bl	2473c <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3b0da:	6974      	ldr	r4, [r6, #20]
   3b0dc:	f7ff fe07 	bl	3acee <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   3b0e0:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   3b0e2:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   3b0e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3b0ea:	b19c      	cbz	r4, 3b114 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   3b0ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3b0f0:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   3b0f2:	4284      	cmp	r4, r0
   3b0f4:	d80d      	bhi.n	3b112 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   3b0f6:	4630      	mov	r0, r6
   3b0f8:	f7ff ffbf 	bl	3b07a <mqtt_ping>
		ping_sent = true;
   3b0fc:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   3b0fe:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   3b100:	4630      	mov	r0, r6
   3b102:	f7e9 fafd 	bl	24700 <mqtt_mutex_unlock>
		return -EAGAIN;
   3b106:	2c00      	cmp	r4, #0
   3b108:	bf08      	it	eq
   3b10a:	f06f 050a 	mvneq.w	r5, #10
}
   3b10e:	4628      	mov	r0, r5
   3b110:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   3b112:	2400      	movs	r4, #0
	int err_code = 0;
   3b114:	4625      	mov	r5, r4
   3b116:	e7f3      	b.n	3b100 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   3b118:	f06f 0515 	mvn.w	r5, #21
   3b11c:	e7f7      	b.n	3b10e <mqtt_live+0x3e>

0003b11e <mqtt_keepalive_time_left>:
{
   3b11e:	b538      	push	{r3, r4, r5, lr}
   3b120:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   3b122:	6945      	ldr	r5, [r0, #20]
   3b124:	f7ff fde3 	bl	3acee <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   3b128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3b12c:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
	int32_t diff = k_uptime_get_32() - last_activity;
   3b130:	1b42      	subs	r2, r0, r5
   3b132:	434b      	muls	r3, r1
		return 0;
   3b134:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   3b138:	b119      	cbz	r1, 3b142 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   3b13a:	4293      	cmp	r3, r2
   3b13c:	d904      	bls.n	3b148 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   3b13e:	1a98      	subs	r0, r3, r2
}
   3b140:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   3b142:	f04f 30ff 	mov.w	r0, #4294967295
   3b146:	e7fb      	b.n	3b140 <mqtt_keepalive_time_left+0x22>
		return 0;
   3b148:	2000      	movs	r0, #0
   3b14a:	e7f9      	b.n	3b140 <mqtt_keepalive_time_left+0x22>

0003b14c <mqtt_input>:
{
   3b14c:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3b14e:	4605      	mov	r5, r0
   3b150:	b1d0      	cbz	r0, 3b188 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   3b152:	f7e9 faf3 	bl	2473c <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   3b156:	69ab      	ldr	r3, [r5, #24]
   3b158:	079b      	lsls	r3, r3, #30
   3b15a:	d50f      	bpl.n	3b17c <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   3b15c:	6a2b      	ldr	r3, [r5, #32]
   3b15e:	b983      	cbnz	r3, 3b182 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   3b160:	4628      	mov	r0, r5
   3b162:	f7ff fc84 	bl	3aa6e <mqtt_handle_rx>
	if (err_code < 0) {
   3b166:	1e04      	subs	r4, r0, #0
   3b168:	da03      	bge.n	3b172 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   3b16a:	4621      	mov	r1, r4
   3b16c:	4628      	mov	r0, r5
   3b16e:	f7ff fded 	bl	3ad4c <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3b172:	4628      	mov	r0, r5
   3b174:	f7e9 fac4 	bl	24700 <mqtt_mutex_unlock>
}
   3b178:	4620      	mov	r0, r4
   3b17a:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   3b17c:	f06f 040c 	mvn.w	r4, #12
   3b180:	e7f7      	b.n	3b172 <mqtt_input+0x26>
		return -EBUSY;
   3b182:	f06f 040f 	mvn.w	r4, #15
   3b186:	e7f4      	b.n	3b172 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   3b188:	f06f 0415 	mvn.w	r4, #21
   3b18c:	e7f4      	b.n	3b178 <mqtt_input+0x2c>

0003b18e <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   3b18e:	2301      	movs	r3, #1
   3b190:	f7ff bdf5 	b.w	3ad7e <read_publish_payload>

0003b194 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   3b194:	b570      	push	{r4, r5, r6, lr}
   3b196:	4606      	mov	r6, r0
   3b198:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   3b19a:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   3b19c:	42ac      	cmp	r4, r5
   3b19e:	d301      	bcc.n	3b1a4 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   3b1a0:	2000      	movs	r0, #0
}
   3b1a2:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   3b1a4:	4621      	mov	r1, r4
   3b1a6:	4630      	mov	r0, r6
   3b1a8:	1b2a      	subs	r2, r5, r4
   3b1aa:	f7ff fff0 	bl	3b18e <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   3b1ae:	2800      	cmp	r0, #0
   3b1b0:	dbf7      	blt.n	3b1a2 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   3b1b2:	d001      	beq.n	3b1b8 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   3b1b4:	4404      	add	r4, r0
   3b1b6:	e7f1      	b.n	3b19c <mqtt_readall_publish_payload+0x8>
			return -EIO;
   3b1b8:	f06f 0004 	mvn.w	r0, #4
   3b1bc:	e7f1      	b.n	3b1a2 <mqtt_readall_publish_payload+0xe>

0003b1be <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   3b1be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct sockaddr *broker = client->broker;
   3b1c0:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   3b1c2:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = zsock_socket(broker->sa_family,
   3b1c4:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3b1c6:	f44f 7281 	mov.w	r2, #258	; 0x102
   3b1ca:	2101      	movs	r1, #1
   3b1cc:	f7e6 fa76 	bl	216bc <z_impl_zsock_socket>
						  SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   3b1d0:	2800      	cmp	r0, #0
	client->transport.tls.sock = zsock_socket(broker->sa_family,
   3b1d2:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   3b1d4:	da05      	bge.n	3b1e2 <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void) zsock_close(client->transport.tls.sock);
	return -errno;
   3b1d6:	f7ff f9e6 	bl	3a5a6 <__errno>
   3b1da:	6800      	ldr	r0, [r0, #0]
   3b1dc:	4240      	negs	r0, r0
}
   3b1de:	b004      	add	sp, #16
   3b1e0:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3b1e2:	2304      	movs	r3, #4
   3b1e4:	2205      	movs	r2, #5
   3b1e6:	9300      	str	r3, [sp, #0]
   3b1e8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3b1ec:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   3b1f0:	f7fe fedc 	bl	39fac <z_impl_zsock_setsockopt>
	if (ret < 0) {
   3b1f4:	2800      	cmp	r0, #0
   3b1f6:	da03      	bge.n	3b200 <mqtt_client_tls_connect+0x42>
	(void) zsock_close(client->transport.tls.sock);
   3b1f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3b1fa:	f7fe fdd7 	bl	39dac <z_impl_zsock_close>
   3b1fe:	e7ea      	b.n	3b1d6 <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   3b200:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3b202:	bb03      	cbnz	r3, 3b246 <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   3b204:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   3b206:	bb63      	cbnz	r3, 3b262 <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   3b208:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3b20a:	2b00      	cmp	r3, #0
   3b20c:	d137      	bne.n	3b27e <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   3b20e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   3b210:	2b01      	cmp	r3, #1
   3b212:	d10b      	bne.n	3b22c <mqtt_client_tls_connect+0x6e>
   3b214:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3b216:	2304      	movs	r3, #4
   3b218:	220a      	movs	r2, #10
   3b21a:	9300      	str	r3, [sp, #0]
   3b21c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3b220:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3b224:	f7fe fec2 	bl	39fac <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3b228:	2800      	cmp	r0, #0
   3b22a:	dbe5      	blt.n	3b1f8 <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   3b22c:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   3b22e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   3b230:	2b01      	cmp	r3, #1
   3b232:	bf0c      	ite	eq
   3b234:	2208      	moveq	r2, #8
   3b236:	2218      	movne	r2, #24
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   3b238:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   3b23a:	f7fe fddb 	bl	39df4 <z_impl_zsock_connect>
	if (ret < 0) {
   3b23e:	2800      	cmp	r0, #0
   3b240:	dbda      	blt.n	3b1f8 <mqtt_client_tls_connect+0x3a>
	return 0;
   3b242:	2000      	movs	r0, #0
   3b244:	e7cb      	b.n	3b1de <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   3b246:	6b22      	ldr	r2, [r4, #48]	; 0x30
   3b248:	2a00      	cmp	r2, #0
   3b24a:	d0db      	beq.n	3b204 <mqtt_client_tls_connect+0x46>
   3b24c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   3b24e:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3b250:	9200      	str	r2, [sp, #0]
   3b252:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3b256:	2203      	movs	r2, #3
   3b258:	f7fe fea8 	bl	39fac <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3b25c:	2800      	cmp	r0, #0
   3b25e:	dad1      	bge.n	3b204 <mqtt_client_tls_connect+0x46>
   3b260:	e7ca      	b.n	3b1f8 <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   3b262:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   3b264:	2a00      	cmp	r2, #0
   3b266:	d0cf      	beq.n	3b208 <mqtt_client_tls_connect+0x4a>
   3b268:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   3b26a:	0092      	lsls	r2, r2, #2
   3b26c:	9200      	str	r2, [sp, #0]
   3b26e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3b272:	2201      	movs	r2, #1
   3b274:	f7fe fe9a 	bl	39fac <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3b278:	2800      	cmp	r0, #0
   3b27a:	dac5      	bge.n	3b208 <mqtt_client_tls_connect+0x4a>
   3b27c:	e7bc      	b.n	3b1f8 <mqtt_client_tls_connect+0x3a>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   3b27e:	4618      	mov	r0, r3
   3b280:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3b282:	9303      	str	r3, [sp, #12]
   3b284:	f7e1 ffea 	bl	1d25c <strlen>
   3b288:	2202      	movs	r2, #2
   3b28a:	9000      	str	r0, [sp, #0]
   3b28c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3b290:	4630      	mov	r0, r6
   3b292:	9b03      	ldr	r3, [sp, #12]
   3b294:	f7fe fe8a 	bl	39fac <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3b298:	2800      	cmp	r0, #0
   3b29a:	dab8      	bge.n	3b20e <mqtt_client_tls_connect+0x50>
   3b29c:	e7ac      	b.n	3b1f8 <mqtt_client_tls_connect+0x3a>

0003b29e <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3b29e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3b2a2:	2400      	movs	r4, #0
{
   3b2a4:	4606      	mov	r6, r0
   3b2a6:	460f      	mov	r7, r1
   3b2a8:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3b2aa:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3b2ac:	42ac      	cmp	r4, r5
   3b2ae:	d301      	bcc.n	3b2b4 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3b2b0:	2000      	movs	r0, #0
   3b2b2:	e00d      	b.n	3b2d0 <mqtt_client_tls_write+0x32>
		ret = zsock_send(client->transport.tls.sock, data + offset,
   3b2b4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3b2b6:	2300      	movs	r3, #0
   3b2b8:	e9cd 8800 	strd	r8, r8, [sp]
   3b2bc:	1b2a      	subs	r2, r5, r4
   3b2be:	1939      	adds	r1, r7, r4
   3b2c0:	f7fe fdbf 	bl	39e42 <z_impl_zsock_sendto>
		if (ret < 0) {
   3b2c4:	1e03      	subs	r3, r0, #0
   3b2c6:	da06      	bge.n	3b2d6 <mqtt_client_tls_write+0x38>
			return -errno;
   3b2c8:	f7ff f96d 	bl	3a5a6 <__errno>
   3b2cc:	6800      	ldr	r0, [r0, #0]
   3b2ce:	4240      	negs	r0, r0
}
   3b2d0:	b002      	add	sp, #8
   3b2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3b2d6:	441c      	add	r4, r3
   3b2d8:	e7e8      	b.n	3b2ac <mqtt_client_tls_write+0xe>

0003b2da <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   3b2da:	b508      	push	{r3, lr}
	int ret;

	ret = zsock_sendmsg(client->transport.tls.sock, message, 0);
   3b2dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3b2de:	2200      	movs	r2, #0
   3b2e0:	f7fe fddf 	bl	39ea2 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   3b2e4:	2800      	cmp	r0, #0
   3b2e6:	da04      	bge.n	3b2f2 <mqtt_client_tls_write_msg+0x18>
		return -errno;
   3b2e8:	f7ff f95d 	bl	3a5a6 <__errno>
   3b2ec:	6800      	ldr	r0, [r0, #0]
   3b2ee:	4240      	negs	r0, r0
	}

	return 0;
}
   3b2f0:	bd08      	pop	{r3, pc}
	return 0;
   3b2f2:	2000      	movs	r0, #0
   3b2f4:	e7fc      	b.n	3b2f0 <mqtt_client_tls_write_msg+0x16>

0003b2f6 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3b2f6:	b513      	push	{r0, r1, r4, lr}
   3b2f8:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   3b2fa:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   3b2fc:	bf14      	ite	ne
   3b2fe:	4623      	movne	r3, r4
   3b300:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tls.sock, data, buflen, flags);
   3b302:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3b304:	e9cd 4400 	strd	r4, r4, [sp]
   3b308:	f7fe fdf2 	bl	39ef0 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3b30c:	2800      	cmp	r0, #0
   3b30e:	da03      	bge.n	3b318 <mqtt_client_tls_read+0x22>
		return -errno;
   3b310:	f7ff f949 	bl	3a5a6 <__errno>
   3b314:	6800      	ldr	r0, [r0, #0]
   3b316:	4240      	negs	r0, r0
	}

	return ret;
}
   3b318:	b002      	add	sp, #8
   3b31a:	bd10      	pop	{r4, pc}

0003b31c <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   3b31c:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = zsock_close(client->transport.tls.sock);
   3b31e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3b320:	f7fe fd44 	bl	39dac <z_impl_zsock_close>
	if (ret < 0) {
   3b324:	2800      	cmp	r0, #0
   3b326:	da04      	bge.n	3b332 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   3b328:	f7ff f93d 	bl	3a5a6 <__errno>
   3b32c:	6800      	ldr	r0, [r0, #0]
   3b32e:	4240      	negs	r0, r0
	}

	return 0;
}
   3b330:	bd08      	pop	{r3, pc}
	return 0;
   3b332:	2000      	movs	r0, #0
   3b334:	e7fc      	b.n	3b330 <mqtt_client_tls_disconnect+0x14>

0003b336 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3b336:	6843      	ldr	r3, [r0, #4]
}
   3b338:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3b33a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3b33c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3b33e:	600b      	str	r3, [r1, #0]
}
   3b340:	4770      	bx	lr

0003b342 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3b342:	6843      	ldr	r3, [r0, #4]
   3b344:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   3b346:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   3b348:	4042      	eors	r2, r0
   3b34a:	400a      	ands	r2, r1
   3b34c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3b34e:	605a      	str	r2, [r3, #4]
}
   3b350:	2000      	movs	r0, #0
   3b352:	4770      	bx	lr

0003b354 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3b354:	6843      	ldr	r3, [r0, #4]
}
   3b356:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3b358:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3b35a:	6099      	str	r1, [r3, #8]
}
   3b35c:	4770      	bx	lr

0003b35e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3b35e:	6843      	ldr	r3, [r0, #4]
}
   3b360:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3b362:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3b364:	60d9      	str	r1, [r3, #12]
}
   3b366:	4770      	bx	lr

0003b368 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3b368:	6843      	ldr	r3, [r0, #4]
}
   3b36a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3b36c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3b36e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3b370:	4059      	eors	r1, r3
    p_reg->OUT = value;
   3b372:	6051      	str	r1, [r2, #4]
}
   3b374:	4770      	bx	lr

0003b376 <nrf_gpio_cfg_sense_set>:
{
   3b376:	b513      	push	{r0, r1, r4, lr}
   3b378:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3b37a:	a801      	add	r0, sp, #4
{
   3b37c:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3b37e:	f7e9 fa55 	bl	2482c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   3b382:	9b01      	ldr	r3, [sp, #4]
   3b384:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   3b388:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   3b38c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   3b390:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   3b394:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   3b398:	b002      	add	sp, #8
   3b39a:	bd10      	pop	{r4, pc}

0003b39c <any_other_channel_is_active>:
{
   3b39c:	2300      	movs	r3, #0
   3b39e:	b530      	push	{r4, r5, lr}
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   3b3a0:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
   3b3a2:	b2da      	uxtb	r2, r3
   3b3a4:	4282      	cmp	r2, r0
   3b3a6:	d007      	beq.n	3b3b8 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
   3b3a8:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
   3b3ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   3b3b0:	b112      	cbz	r2, 3b3b8 <any_other_channel_is_active+0x1c>
   3b3b2:	898d      	ldrh	r5, [r1, #12]
   3b3b4:	4295      	cmp	r5, r2
   3b3b6:	d804      	bhi.n	3b3c2 <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   3b3b8:	3301      	adds	r3, #1
   3b3ba:	2b04      	cmp	r3, #4
   3b3bc:	d1f1      	bne.n	3b3a2 <any_other_channel_is_active+0x6>
	return false;
   3b3be:	2000      	movs	r0, #0
}
   3b3c0:	bd30      	pop	{r4, r5, pc}
			return true;
   3b3c2:	2001      	movs	r0, #1
   3b3c4:	e7fc      	b.n	3b3c0 <any_other_channel_is_active+0x24>

0003b3c6 <adxl362_reg_access>:
{
   3b3c6:	b510      	push	{r4, lr}
   3b3c8:	b08a      	sub	sp, #40	; 0x28
	uint8_t access[2] = { cmd, reg_addr };
   3b3ca:	f88d 2005 	strb.w	r2, [sp, #5]
	const struct spi_buf buf[2] = {
   3b3ce:	aa01      	add	r2, sp, #4
   3b3d0:	9206      	str	r2, [sp, #24]
   3b3d2:	2202      	movs	r2, #2
{
   3b3d4:	460c      	mov	r4, r1
	uint8_t access[2] = { cmd, reg_addr };
   3b3d6:	f88d 1004 	strb.w	r1, [sp, #4]
   3b3da:	4601      	mov	r1, r0
	const struct spi_buf buf[2] = {
   3b3dc:	e9cd 2307 	strd	r2, r3, [sp, #28]
   3b3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (cmd == ADXL362_READ_REG) {
   3b3e2:	2c0b      	cmp	r4, #11
	const struct spi_buf buf[2] = {
   3b3e4:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
   3b3e6:	ab06      	add	r3, sp, #24
   3b3e8:	f851 0b04 	ldr.w	r0, [r1], #4
   3b3ec:	9302      	str	r3, [sp, #8]
	if (cmd == ADXL362_READ_REG) {
   3b3ee:	d10a      	bne.n	3b406 <adxl362_reg_access+0x40>
		const struct spi_buf_set rx = {
   3b3f0:	e9cd 3204 	strd	r3, r2, [sp, #16]
		tx.count = 1;
   3b3f4:	2301      	movs	r3, #1
   3b3f6:	9303      	str	r3, [sp, #12]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   3b3f8:	6883      	ldr	r3, [r0, #8]
   3b3fa:	681c      	ldr	r4, [r3, #0]
   3b3fc:	ab04      	add	r3, sp, #16
   3b3fe:	aa02      	add	r2, sp, #8
   3b400:	47a0      	blx	r4
}
   3b402:	b00a      	add	sp, #40	; 0x28
   3b404:	bd10      	pop	{r4, pc}
	tx.count = 2;
   3b406:	9203      	str	r2, [sp, #12]
   3b408:	6883      	ldr	r3, [r0, #8]
   3b40a:	681c      	ldr	r4, [r3, #0]
   3b40c:	2300      	movs	r3, #0
   3b40e:	e7f6      	b.n	3b3fe <adxl362_reg_access+0x38>

0003b410 <adxl362_set_reg.isra.0>:
static inline int adxl362_set_reg(const struct device *dev,
   3b410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3b412:	f8ad 100e 	strh.w	r1, [sp, #14]
	return adxl362_reg_access(adxl362_data,
   3b416:	9300      	str	r3, [sp, #0]
   3b418:	210a      	movs	r1, #10
   3b41a:	f10d 030e 	add.w	r3, sp, #14
   3b41e:	f7ff ffd2 	bl	3b3c6 <adxl362_reg_access>
}
   3b422:	b005      	add	sp, #20
   3b424:	f85d fb04 	ldr.w	pc, [sp], #4

0003b428 <adxl362_get_reg.isra.0>:
static inline int adxl362_get_reg(const struct device *dev, uint8_t *read_buf,
   3b428:	b507      	push	{r0, r1, r2, lr}
	return adxl362_reg_access(adxl362_data,
   3b42a:	9300      	str	r3, [sp, #0]
   3b42c:	460b      	mov	r3, r1
   3b42e:	210b      	movs	r1, #11
   3b430:	f7ff ffc9 	bl	3b3c6 <adxl362_reg_access>
}
   3b434:	b003      	add	sp, #12
   3b436:	f85d fb04 	ldr.w	pc, [sp], #4

0003b43a <adxl362_set_range>:
{
   3b43a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct adxl362_data *adxl362_data = dev->data;
   3b43c:	6906      	ldr	r6, [r0, #16]
{
   3b43e:	4607      	mov	r7, r0
   3b440:	460d      	mov	r5, r1
	ret = adxl362_get_reg(dev, &old_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   3b442:	2301      	movs	r3, #1
   3b444:	222c      	movs	r2, #44	; 0x2c
   3b446:	4630      	mov	r0, r6
   3b448:	f10d 0107 	add.w	r1, sp, #7
   3b44c:	f7ff ffec 	bl	3b428 <adxl362_get_reg.isra.0>
	if (ret) {
   3b450:	b970      	cbnz	r0, 3b470 <adxl362_set_range+0x36>
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_RANGE(0x3);
   3b452:	f89d 4007 	ldrb.w	r4, [sp, #7]
	ret = adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   3b456:	2301      	movs	r3, #1
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_RANGE(0x3);
   3b458:	f004 043f 	and.w	r4, r4, #63	; 0x3f
	new_filter_ctl = new_filter_ctl | ADXL362_FILTER_CTL_RANGE(range);
   3b45c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
	ret = adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   3b460:	222c      	movs	r2, #44	; 0x2c
   3b462:	6938      	ldr	r0, [r7, #16]
   3b464:	b2e1      	uxtb	r1, r4
   3b466:	f7ff ffd3 	bl	3b410 <adxl362_set_reg.isra.0>
	if (ret) {
   3b46a:	b908      	cbnz	r0, 3b470 <adxl362_set_range+0x36>
	adxl362_data->selected_range = range;
   3b46c:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
}
   3b470:	b003      	add	sp, #12
   3b472:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003b474 <adxl362_set_output_rate>:
{
   3b474:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3b476:	460c      	mov	r4, r1
   3b478:	4605      	mov	r5, r0
	adxl362_get_reg(dev, &old_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   3b47a:	f10d 0107 	add.w	r1, sp, #7
   3b47e:	2301      	movs	r3, #1
   3b480:	222c      	movs	r2, #44	; 0x2c
   3b482:	6900      	ldr	r0, [r0, #16]
   3b484:	f7ff ffd0 	bl	3b428 <adxl362_get_reg.isra.0>
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_ODR(0x7);
   3b488:	f89d 1007 	ldrb.w	r1, [sp, #7]
	new_filter_ctl = new_filter_ctl | ADXL362_FILTER_CTL_ODR(out_rate);
   3b48c:	f004 0407 	and.w	r4, r4, #7
	new_filter_ctl = old_filter_ctl & ~ADXL362_FILTER_CTL_ODR(0x7);
   3b490:	f021 0107 	bic.w	r1, r1, #7
	adxl362_set_reg(dev, new_filter_ctl, ADXL362_REG_FILTER_CTL, 1);
   3b494:	2301      	movs	r3, #1
   3b496:	222c      	movs	r2, #44	; 0x2c
   3b498:	6928      	ldr	r0, [r5, #16]
   3b49a:	4321      	orrs	r1, r4
   3b49c:	f7ff ffb8 	bl	3b410 <adxl362_set_reg.isra.0>
}
   3b4a0:	2000      	movs	r0, #0
   3b4a2:	b003      	add	sp, #12
   3b4a4:	bd30      	pop	{r4, r5, pc}

0003b4a6 <adxl362_reg_write_mask>:
{
   3b4a6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	ret = adxl362_reg_access(adxl362_data,
   3b4aa:	2701      	movs	r7, #1
	struct adxl362_data *adxl362_data = dev->data;
   3b4ac:	6906      	ldr	r6, [r0, #16]
{
   3b4ae:	460d      	mov	r5, r1
   3b4b0:	4690      	mov	r8, r2
   3b4b2:	461c      	mov	r4, r3
	ret = adxl362_reg_access(adxl362_data,
   3b4b4:	460a      	mov	r2, r1
   3b4b6:	4630      	mov	r0, r6
   3b4b8:	210b      	movs	r1, #11
   3b4ba:	9700      	str	r7, [sp, #0]
   3b4bc:	f10d 030f 	add.w	r3, sp, #15
   3b4c0:	f7ff ff81 	bl	3b3c6 <adxl362_reg_access>
	if (ret) {
   3b4c4:	b970      	cbnz	r0, 3b4e4 <adxl362_reg_write_mask+0x3e>
	tmp &= ~mask;
   3b4c6:	f89d 100f 	ldrb.w	r1, [sp, #15]
	return adxl362_reg_access(adxl362_data,
   3b4ca:	4630      	mov	r0, r6
	tmp &= ~mask;
   3b4cc:	ea21 0208 	bic.w	r2, r1, r8
	tmp |= data;
   3b4d0:	4314      	orrs	r4, r2
	return adxl362_reg_access(adxl362_data,
   3b4d2:	210a      	movs	r1, #10
   3b4d4:	462a      	mov	r2, r5
   3b4d6:	9700      	str	r7, [sp, #0]
   3b4d8:	f10d 030f 	add.w	r3, sp, #15
	tmp |= data;
   3b4dc:	f88d 400f 	strb.w	r4, [sp, #15]
	return adxl362_reg_access(adxl362_data,
   3b4e0:	f7ff ff71 	bl	3b3c6 <adxl362_reg_access>
}
   3b4e4:	b004      	add	sp, #16
   3b4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003b4ea <adxl362_get_status>:
	return adxl362_get_reg(dev, status, ADXL362_REG_STATUS, 1);
   3b4ea:	2301      	movs	r3, #1
   3b4ec:	220b      	movs	r2, #11
   3b4ee:	6900      	ldr	r0, [r0, #16]
   3b4f0:	f7ff bf9a 	b.w	3b428 <adxl362_get_reg.isra.0>

0003b4f4 <adxl362_clear_data_ready>:
{
   3b4f4:	b507      	push	{r0, r1, r2, lr}
	return adxl362_get_reg(dev, &buf, ADXL362_REG_XDATA, 1);
   3b4f6:	2301      	movs	r3, #1
   3b4f8:	2208      	movs	r2, #8
   3b4fa:	f10d 0107 	add.w	r1, sp, #7
   3b4fe:	6900      	ldr	r0, [r0, #16]
   3b500:	f7ff ff92 	bl	3b428 <adxl362_get_reg.isra.0>
}
   3b504:	b003      	add	sp, #12
   3b506:	f85d fb04 	ldr.w	pc, [sp], #4

0003b50a <adxl362_gpio_callback>:
	k_work_submit(&drv_data->work);
   3b50a:	f101 0030 	add.w	r0, r1, #48	; 0x30
   3b50e:	f7f9 ba33 	b.w	34978 <k_work_submit>

0003b512 <bme680_channel_get>:
	switch (chan) {
   3b512:	2910      	cmp	r1, #16
	struct bme680_data *data = dev->data;
   3b514:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   3b516:	d024      	beq.n	3b562 <bme680_channel_get+0x50>
   3b518:	d806      	bhi.n	3b528 <bme680_channel_get+0x16>
   3b51a:	290d      	cmp	r1, #13
   3b51c:	d00b      	beq.n	3b536 <bme680_channel_get+0x24>
   3b51e:	290e      	cmp	r1, #14
   3b520:	d016      	beq.n	3b550 <bme680_channel_get+0x3e>
   3b522:	f06f 0015 	mvn.w	r0, #21
   3b526:	4770      	bx	lr
   3b528:	291d      	cmp	r1, #29
   3b52a:	d1fa      	bne.n	3b522 <bme680_channel_get+0x10>
		val->val2 = 0;
   3b52c:	2000      	movs	r0, #0
		val->val1 = data->calc_gas_resistance;
   3b52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		val->val2 = 0;
   3b530:	6050      	str	r0, [r2, #4]
		val->val1 = data->calc_gas_resistance;
   3b532:	6013      	str	r3, [r2, #0]
}
   3b534:	4770      	bx	lr
		val->val1 = data->calc_temp / 100;
   3b536:	2164      	movs	r1, #100	; 0x64
   3b538:	6b18      	ldr	r0, [r3, #48]	; 0x30
   3b53a:	fb90 f3f1 	sdiv	r3, r0, r1
   3b53e:	6013      	str	r3, [r2, #0]
		val->val2 = data->calc_temp % 100 * 10000;
   3b540:	fb01 0313 	mls	r3, r1, r3, r0
   3b544:	f242 7110 	movw	r1, #10000	; 0x2710
		val->val2 = (data->calc_humidity % 1000) * 1000;
   3b548:	434b      	muls	r3, r1
	return 0;
   3b54a:	2000      	movs	r0, #0
		val->val2 = (data->calc_humidity % 1000) * 1000;
   3b54c:	6053      	str	r3, [r2, #4]
		break;
   3b54e:	4770      	bx	lr
		val->val1 = data->calc_press / 1000;
   3b550:	6b58      	ldr	r0, [r3, #52]	; 0x34
		val->val1 = data->calc_humidity / 1000;
   3b552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3b556:	fbb0 f1f3 	udiv	r1, r0, r3
   3b55a:	6011      	str	r1, [r2, #0]
		val->val2 = (data->calc_humidity % 1000) * 1000;
   3b55c:	fb03 0111 	mls	r1, r3, r1, r0
   3b560:	e7f2      	b.n	3b548 <bme680_channel_get+0x36>
		val->val1 = data->calc_humidity / 1000;
   3b562:	6b98      	ldr	r0, [r3, #56]	; 0x38
   3b564:	e7f5      	b.n	3b552 <bme680_channel_get+0x40>

0003b566 <bme680_reg_read>:
{
   3b566:	b530      	push	{r4, r5, lr}
   3b568:	b089      	sub	sp, #36	; 0x24
   3b56a:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   3b56e:	f10d 0107 	add.w	r1, sp, #7
   3b572:	461d      	mov	r5, r3
   3b574:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   3b576:	2101      	movs	r1, #1
	msg[1].len = num_read;
   3b578:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].len = num_write;
   3b57c:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b57e:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   3b580:	2100      	movs	r1, #0
	return i2c_burst_read(data->i2c_master, data->i2c_slave_addr, start,
   3b582:	6804      	ldr	r4, [r0, #0]
   3b584:	8883      	ldrh	r3, [r0, #4]
   3b586:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3b58a:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   3b58e:	68a2      	ldr	r2, [r4, #8]
   3b590:	4620      	mov	r0, r4
   3b592:	6855      	ldr	r5, [r2, #4]
   3b594:	a902      	add	r1, sp, #8
   3b596:	2202      	movs	r2, #2
   3b598:	47a8      	blx	r5
}
   3b59a:	b009      	add	sp, #36	; 0x24
   3b59c:	bd30      	pop	{r4, r5, pc}

0003b59e <bme680_reg_write>:
{
   3b59e:	b530      	push	{r4, r5, lr}
   3b5a0:	b085      	sub	sp, #20
	uint8_t tx_buf[2] = {reg_addr, value};
   3b5a2:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   3b5a6:	2202      	movs	r2, #2
	return i2c_reg_write_byte(data->i2c_master, data->i2c_slave_addr,
   3b5a8:	6804      	ldr	r4, [r0, #0]
   3b5aa:	8883      	ldrh	r3, [r0, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   3b5ac:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
   3b5b0:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   3b5b4:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3b5b6:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   3b5ba:	68a2      	ldr	r2, [r4, #8]
   3b5bc:	4620      	mov	r0, r4
   3b5be:	6855      	ldr	r5, [r2, #4]
   3b5c0:	a901      	add	r1, sp, #4
   3b5c2:	2201      	movs	r2, #1
   3b5c4:	47a8      	blx	r5
}
   3b5c6:	b005      	add	sp, #20
   3b5c8:	bd30      	pop	{r4, r5, pc}

0003b5ca <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   3b5ca:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   3b5cc:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   3b5ce:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   3b5d0:	b1fd      	cbz	r5, 3b612 <_spi_context_cs_control.isra.0+0x48>
   3b5d2:	68ab      	ldr	r3, [r5, #8]
   3b5d4:	b1eb      	cbz	r3, 3b612 <_spi_context_cs_control.isra.0+0x48>
   3b5d6:	6818      	ldr	r0, [r3, #0]
   3b5d8:	b1d8      	cbz	r0, 3b612 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   3b5da:	b151      	cbz	r1, 3b5f2 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   3b5dc:	7a19      	ldrb	r1, [r3, #8]
   3b5de:	2201      	movs	r2, #1
   3b5e0:	f7ea fc52 	bl	25e88 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   3b5e4:	6823      	ldr	r3, [r4, #0]
   3b5e6:	689b      	ldr	r3, [r3, #8]
   3b5e8:	6858      	ldr	r0, [r3, #4]
}
   3b5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   3b5ee:	f002 bc09 	b.w	3de04 <z_impl_k_busy_wait>
			if (!force_off &&
   3b5f2:	b912      	cbnz	r2, 3b5fa <_spi_context_cs_control.isra.0+0x30>
   3b5f4:	88aa      	ldrh	r2, [r5, #4]
   3b5f6:	0492      	lsls	r2, r2, #18
   3b5f8:	d40b      	bmi.n	3b612 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   3b5fa:	6858      	ldr	r0, [r3, #4]
   3b5fc:	f002 fc02 	bl	3de04 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   3b600:	6823      	ldr	r3, [r4, #0]
   3b602:	2200      	movs	r2, #0
   3b604:	689b      	ldr	r3, [r3, #8]
   3b606:	7a19      	ldrb	r1, [r3, #8]
   3b608:	6818      	ldr	r0, [r3, #0]
}
   3b60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   3b60e:	f7ea bc3b 	b.w	25e88 <gpio_pin_set>
}
   3b612:	bd38      	pop	{r3, r4, r5, pc}

0003b614 <spi_context_unlock_unconditionally>:
{
   3b614:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   3b616:	2201      	movs	r2, #1
   3b618:	2100      	movs	r1, #0
{
   3b61a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   3b61c:	f7ff ffd5 	bl	3b5ca <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   3b620:	6923      	ldr	r3, [r4, #16]
   3b622:	b933      	cbnz	r3, 3b632 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   3b624:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   3b626:	f104 0008 	add.w	r0, r4, #8
}
   3b62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3b62e:	f7f8 bea3 	b.w	34378 <z_impl_k_sem_give>
   3b632:	bd10      	pop	{r4, pc}

0003b634 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   3b634:	6900      	ldr	r0, [r0, #16]
{
   3b636:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   3b638:	6803      	ldr	r3, [r0, #0]
   3b63a:	428b      	cmp	r3, r1
   3b63c:	d106      	bne.n	3b64c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   3b63e:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   3b642:	b934      	cbnz	r4, 3b652 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   3b644:	f7ff ffe6 	bl	3b614 <spi_context_unlock_unconditionally>
	return 0;
   3b648:	4620      	mov	r0, r4
}
   3b64a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3b64c:	f06f 0015 	mvn.w	r0, #21
   3b650:	e7fb      	b.n	3b64a <spi_nrfx_release+0x16>
		return -EBUSY;
   3b652:	f06f 000f 	mvn.w	r0, #15
   3b656:	e7f8      	b.n	3b64a <spi_nrfx_release+0x16>

0003b658 <is_regular_addr_valid>:
{
   3b658:	b538      	push	{r3, r4, r5, lr}
   3b65a:	4604      	mov	r4, r0
   3b65c:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   3b65e:	f001 f81c 	bl	3c69a <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   3b662:	4284      	cmp	r4, r0
   3b664:	d209      	bcs.n	3b67a <is_regular_addr_valid+0x22>
   3b666:	2c00      	cmp	r4, #0
   3b668:	db07      	blt.n	3b67a <is_regular_addr_valid+0x22>
	    addr < 0 ||
   3b66a:	42a8      	cmp	r0, r5
   3b66c:	d305      	bcc.n	3b67a <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   3b66e:	1961      	adds	r1, r4, r5
	    len > flash_size ||
   3b670:	4281      	cmp	r1, r0
   3b672:	bf8c      	ite	hi
   3b674:	2000      	movhi	r0, #0
   3b676:	2001      	movls	r0, #1
}
   3b678:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   3b67a:	2000      	movs	r0, #0
   3b67c:	e7fc      	b.n	3b678 <is_regular_addr_valid+0x20>

0003b67e <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   3b67e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3b682:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   3b684:	6883      	ldr	r3, [r0, #8]
{
   3b686:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   3b688:	695b      	ldr	r3, [r3, #20]
   3b68a:	4669      	mov	r1, sp
{
   3b68c:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   3b68e:	aa01      	add	r2, sp, #4
   3b690:	4798      	blx	r3

	while (layout_size--) {
   3b692:	e9dd 1000 	ldrd	r1, r0, [sp]
   3b696:	2300      	movs	r3, #0
	off_t end = 0;
   3b698:	461d      	mov	r5, r3
	off_t group_offs = 0;
   3b69a:	469e      	mov	lr, r3
	size_t page_count = 0;
   3b69c:	469c      	mov	ip, r3
   3b69e:	f100 38ff 	add.w	r8, r0, #4294967295
	while (layout_size--) {
   3b6a2:	f1b8 3fff 	cmp.w	r8, #4294967295
   3b6a6:	d102      	bne.n	3b6ae <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   3b6a8:	f06f 0015 	mvn.w	r0, #21
   3b6ac:	e018      	b.n	3b6e0 <flash_get_page_info+0x62>
		if (use_addr) {
   3b6ae:	680a      	ldr	r2, [r1, #0]
   3b6b0:	b1cf      	cbz	r7, 3b6e6 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   3b6b2:	6848      	ldr	r0, [r1, #4]
   3b6b4:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   3b6b8:	42a5      	cmp	r5, r4
   3b6ba:	f108 38ff 	add.w	r8, r8, #4294967295
   3b6be:	dd17      	ble.n	3b6f0 <flash_get_page_info+0x72>
   3b6c0:	b103      	cbz	r3, 3b6c4 <flash_get_page_info+0x46>
   3b6c2:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   3b6c4:	9b00      	ldr	r3, [sp, #0]
   3b6c6:	685b      	ldr	r3, [r3, #4]
   3b6c8:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   3b6ca:	b177      	cbz	r7, 3b6ea <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   3b6cc:	eba4 040e 	sub.w	r4, r4, lr
   3b6d0:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   3b6d4:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   3b6d6:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   3b6da:	4464      	add	r4, ip
			info->start_offset = group_offs +
   3b6dc:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   3b6de:	60b4      	str	r4, [r6, #8]
}
   3b6e0:	b002      	add	sp, #8
   3b6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   3b6e6:	4415      	add	r5, r2
   3b6e8:	e7e6      	b.n	3b6b8 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   3b6ea:	eba4 040c 	sub.w	r4, r4, ip
   3b6ee:	e7f1      	b.n	3b6d4 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   3b6f0:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   3b6f2:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   3b6f4:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   3b6f8:	3108      	adds	r1, #8
   3b6fa:	2301      	movs	r3, #1
   3b6fc:	e7d1      	b.n	3b6a2 <flash_get_page_info+0x24>

0003b6fe <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3b6fe:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   3b700:	2201      	movs	r2, #1
   3b702:	f7ff bfbc 	b.w	3b67e <flash_get_page_info>

0003b706 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3b706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   3b70a:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   3b70c:	6883      	ldr	r3, [r0, #8]
{
   3b70e:	b086      	sub	sp, #24
   3b710:	4688      	mov	r8, r1
   3b712:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   3b714:	695b      	ldr	r3, [r3, #20]
   3b716:	aa02      	add	r2, sp, #8
   3b718:	a901      	add	r1, sp, #4
   3b71a:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   3b71c:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   3b71e:	4625      	mov	r5, r4
   3b720:	9b02      	ldr	r3, [sp, #8]
   3b722:	42ab      	cmp	r3, r5
   3b724:	d802      	bhi.n	3b72c <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   3b726:	b006      	add	sp, #24
   3b728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   3b72c:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   3b72e:	9f01      	ldr	r7, [sp, #4]
   3b730:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   3b734:	687b      	ldr	r3, [r7, #4]
   3b736:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3b738:	683a      	ldr	r2, [r7, #0]
   3b73a:	eb0a 0306 	add.w	r3, sl, r6
   3b73e:	42b2      	cmp	r2, r6
   3b740:	d802      	bhi.n	3b748 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3b742:	469a      	mov	sl, r3
   3b744:	3501      	adds	r5, #1
   3b746:	e7eb      	b.n	3b720 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   3b748:	4649      	mov	r1, r9
   3b74a:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   3b74c:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   3b74e:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3b750:	47c0      	blx	r8
   3b752:	2800      	cmp	r0, #0
   3b754:	d0e7      	beq.n	3b726 <flash_page_foreach+0x20>
			off += page_info.size;
   3b756:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3b758:	3601      	adds	r6, #1
			off += page_info.size;
   3b75a:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   3b75c:	e7ec      	b.n	3b738 <flash_page_foreach+0x32>

0003b75e <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   3b75e:	6843      	ldr	r3, [r0, #4]
{
   3b760:	b410      	push	{r4}
	return config->uarte_regs;
   3b762:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   3b764:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   3b768:	05d1      	lsls	r1, r2, #23
   3b76a:	d518      	bpl.n	3b79e <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b76c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   3b770:	b1aa      	cbz	r2, 3b79e <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   3b772:	f04f 0120 	mov.w	r1, #32
   3b776:	f3ef 8211 	mrs	r2, BASEPRI
   3b77a:	f381 8811 	msr	BASEPRI, r1
   3b77e:	f3bf 8f6f 	isb	sy
   3b782:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3b786:	b131      	cbz	r1, 3b796 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b788:	2100      	movs	r1, #0
   3b78a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   3b78e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b792:	2101      	movs	r1, #1
   3b794:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   3b796:	f382 8811 	msr	BASEPRI, r2
   3b79a:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3b79e:	6842      	ldr	r2, [r0, #4]
   3b7a0:	6852      	ldr	r2, [r2, #4]
   3b7a2:	06d2      	lsls	r2, r2, #27
   3b7a4:	d51a      	bpl.n	3b7dc <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   3b7a6:	f04f 0220 	mov.w	r2, #32
   3b7aa:	f3ef 8111 	mrs	r1, BASEPRI
   3b7ae:	f382 8811 	msr	BASEPRI, r2
   3b7b2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b7b6:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3b7ba:	b112      	cbz	r2, 3b7c2 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3b7bc:	2200      	movs	r2, #0
   3b7be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   3b7c2:	6902      	ldr	r2, [r0, #16]
   3b7c4:	68d2      	ldr	r2, [r2, #12]
   3b7c6:	b10a      	cbz	r2, 3b7cc <uarte_nrfx_isr_int+0x6e>
   3b7c8:	6912      	ldr	r2, [r2, #16]
   3b7ca:	b91a      	cbnz	r2, 3b7d4 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   3b7cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   3b7d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   3b7d4:	f381 8811 	msr	BASEPRI, r1
   3b7d8:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   3b7dc:	6902      	ldr	r2, [r0, #16]
   3b7de:	68d2      	ldr	r2, [r2, #12]
   3b7e0:	b15a      	cbz	r2, 3b7fa <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b7e2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3b7e6:	b159      	cbz	r1, 3b800 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
   3b7e8:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   3b7ea:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   3b7ec:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   3b7ee:	b13c      	cbz	r4, 3b800 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
   3b7f0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   3b7f4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   3b7f8:	7391      	strb	r1, [r2, #14]
}
   3b7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   3b7fe:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b800:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3b804:	b121      	cbz	r1, 3b810 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b806:	2100      	movs	r1, #0
   3b808:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   3b80c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   3b810:	6813      	ldr	r3, [r2, #0]
   3b812:	2b00      	cmp	r3, #0
   3b814:	d0f1      	beq.n	3b7fa <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3b816:	6851      	ldr	r1, [r2, #4]
}
   3b818:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3b81c:	4718      	bx	r3

0003b81e <uarte_nrfx_config_get>:
{
   3b81e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   3b820:	6902      	ldr	r2, [r0, #16]
   3b822:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   3b826:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3b82a:	2000      	movs	r0, #0
   3b82c:	4770      	bx	lr

0003b82e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3b82e:	6843      	ldr	r3, [r0, #4]
   3b830:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3b832:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3b836:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3b83a:	4770      	bx	lr

0003b83c <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   3b83c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   3b83e:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b840:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3b844:	b940      	cbnz	r0, 3b858 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3b846:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3b848:	0712      	lsls	r2, r2, #28
   3b84a:	d406      	bmi.n	3b85a <is_tx_ready+0x1e>
   3b84c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   3b850:	3800      	subs	r0, #0
   3b852:	bf18      	it	ne
   3b854:	2001      	movne	r0, #1
   3b856:	4770      	bx	lr
   3b858:	2001      	movs	r0, #1
}
   3b85a:	4770      	bx	lr

0003b85c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   3b85c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3b85e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3b860:	681b      	ldr	r3, [r3, #0]
   3b862:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3b866:	b148      	cbz	r0, 3b87c <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b868:	2000      	movs	r0, #0
	*c = data->rx_data;
   3b86a:	7d52      	ldrb	r2, [r2, #21]
   3b86c:	700a      	strb	r2, [r1, #0]
   3b86e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3b872:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b876:	2201      	movs	r2, #1
   3b878:	601a      	str	r2, [r3, #0]
	return 0;
   3b87a:	4770      	bx	lr
		return -1;
   3b87c:	f04f 30ff 	mov.w	r0, #4294967295
}
   3b880:	4770      	bx	lr

0003b882 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3b882:	2a00      	cmp	r2, #0
   3b884:	dd0f      	ble.n	3b8a6 <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
   3b886:	6843      	ldr	r3, [r0, #4]
   3b888:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b88a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3b88e:	b153      	cbz	r3, 3b8a6 <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3b890:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b892:	2000      	movs	r0, #0
   3b894:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   3b898:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b89c:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   3b89e:	7d5b      	ldrb	r3, [r3, #21]
   3b8a0:	700b      	strb	r3, [r1, #0]
   3b8a2:	6010      	str	r0, [r2, #0]
}
   3b8a4:	4770      	bx	lr
	int num_rx = 0;
   3b8a6:	2000      	movs	r0, #0
   3b8a8:	4770      	bx	lr

0003b8aa <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   3b8aa:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   3b8ac:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   3b8ae:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   3b8b0:	f04f 0020 	mov.w	r0, #32
   3b8b4:	f3ef 8311 	mrs	r3, BASEPRI
   3b8b8:	f380 8811 	msr	BASEPRI, r0
   3b8bc:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   3b8c0:	2000      	movs	r0, #0
   3b8c2:	68c9      	ldr	r1, [r1, #12]
   3b8c4:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   3b8c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   3b8ca:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   3b8ce:	f383 8811 	msr	BASEPRI, r3
   3b8d2:	f3bf 8f6f 	isb	sy
}
   3b8d6:	4770      	bx	lr

0003b8d8 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3b8d8:	2201      	movs	r2, #1
   3b8da:	6903      	ldr	r3, [r0, #16]
   3b8dc:	68db      	ldr	r3, [r3, #12]
   3b8de:	739a      	strb	r2, [r3, #14]
}
   3b8e0:	4770      	bx	lr

0003b8e2 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   3b8e2:	6903      	ldr	r3, [r0, #16]
   3b8e4:	68db      	ldr	r3, [r3, #12]
   3b8e6:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3b8e8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   3b8ec:	b962      	cbnz	r2, 3b908 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   3b8ee:	6842      	ldr	r2, [r0, #4]
   3b8f0:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b8f2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   3b8f6:	b140      	cbz	r0, 3b90a <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   3b8f8:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   3b8fc:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   3b900:	d003      	beq.n	3b90a <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3b902:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   3b904:	6119      	str	r1, [r3, #16]
   3b906:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3b908:	2000      	movs	r0, #0
}
   3b90a:	4770      	bx	lr

0003b90c <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   3b90c:	6843      	ldr	r3, [r0, #4]
   3b90e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3b910:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   3b914:	3800      	subs	r0, #0
   3b916:	bf18      	it	ne
   3b918:	2001      	movne	r0, #1
   3b91a:	4770      	bx	lr

0003b91c <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   3b91c:	2210      	movs	r2, #16
	return config->uarte_regs;
   3b91e:	6843      	ldr	r3, [r0, #4]
   3b920:	681b      	ldr	r3, [r3, #0]
   3b922:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3b926:	4770      	bx	lr

0003b928 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   3b928:	2210      	movs	r2, #16
	return config->uarte_regs;
   3b92a:	6843      	ldr	r3, [r0, #4]
   3b92c:	681b      	ldr	r3, [r3, #0]
   3b92e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3b932:	4770      	bx	lr

0003b934 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   3b934:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3b938:	6843      	ldr	r3, [r0, #4]
   3b93a:	681b      	ldr	r3, [r3, #0]
   3b93c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3b940:	4770      	bx	lr

0003b942 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3b942:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3b946:	6843      	ldr	r3, [r0, #4]
   3b948:	681b      	ldr	r3, [r3, #0]
   3b94a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3b94e:	4770      	bx	lr

0003b950 <uarte_nrfx_irq_update>:
}
   3b950:	2001      	movs	r0, #1
   3b952:	4770      	bx	lr

0003b954 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   3b954:	6903      	ldr	r3, [r0, #16]
   3b956:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   3b958:	e9c3 1200 	strd	r1, r2, [r3]
}
   3b95c:	4770      	bx	lr

0003b95e <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   3b95e:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   3b960:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3b962:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3b966:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3b96a:	2200      	movs	r2, #0
   3b96c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   3b970:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3b974:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   3b978:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3b97c:	6842      	ldr	r2, [r0, #4]
   3b97e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3b980:	bf41      	itttt	mi
   3b982:	2208      	movmi	r2, #8
   3b984:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   3b988:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   3b98c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3b990:	2201      	movs	r2, #1
   3b992:	609a      	str	r2, [r3, #8]
}
   3b994:	4770      	bx	lr

0003b996 <uarte_nrfx_fifo_fill>:
{
   3b996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   3b998:	6906      	ldr	r6, [r0, #16]
{
   3b99a:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   3b99c:	68f3      	ldr	r3, [r6, #12]
   3b99e:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3b9a0:	3310      	adds	r3, #16
   3b9a2:	4294      	cmp	r4, r2
   3b9a4:	bfa8      	it	ge
   3b9a6:	4614      	movge	r4, r2
   3b9a8:	2201      	movs	r2, #1
   3b9aa:	e8d3 0fef 	ldaex	r0, [r3]
   3b9ae:	2800      	cmp	r0, #0
   3b9b0:	d103      	bne.n	3b9ba <uarte_nrfx_fifo_fill+0x24>
   3b9b2:	e8c3 2fe7 	stlex	r7, r2, [r3]
   3b9b6:	2f00      	cmp	r7, #0
   3b9b8:	d1f7      	bne.n	3b9aa <uarte_nrfx_fifo_fill+0x14>
   3b9ba:	bf0c      	ite	eq
   3b9bc:	4613      	moveq	r3, r2
   3b9be:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   3b9c0:	d01d      	beq.n	3b9fe <uarte_nrfx_fifo_fill+0x68>
		return 0;
   3b9c2:	461c      	mov	r4, r3
}
   3b9c4:	4620      	mov	r0, r4
   3b9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   3b9c8:	68f2      	ldr	r2, [r6, #12]
   3b9ca:	5cc8      	ldrb	r0, [r1, r3]
   3b9cc:	6892      	ldr	r2, [r2, #8]
   3b9ce:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   3b9d0:	3301      	adds	r3, #1
   3b9d2:	42a3      	cmp	r3, r4
   3b9d4:	dbf8      	blt.n	3b9c8 <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   3b9d6:	f04f 0320 	mov.w	r3, #32
   3b9da:	f3ef 8711 	mrs	r7, BASEPRI
   3b9de:	f383 8811 	msr	BASEPRI, r3
   3b9e2:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   3b9e6:	4628      	mov	r0, r5
   3b9e8:	f7ff ff28 	bl	3b83c <is_tx_ready>
   3b9ec:	68f3      	ldr	r3, [r6, #12]
   3b9ee:	b940      	cbnz	r0, 3ba02 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   3b9f0:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   3b9f2:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   3b9f4:	f387 8811 	msr	BASEPRI, r7
   3b9f8:	f3bf 8f6f 	isb	sy
	return len;
   3b9fc:	e7e2      	b.n	3b9c4 <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   3b9fe:	2300      	movs	r3, #0
   3ba00:	e7e7      	b.n	3b9d2 <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   3ba02:	4622      	mov	r2, r4
   3ba04:	4628      	mov	r0, r5
   3ba06:	6899      	ldr	r1, [r3, #8]
   3ba08:	f7ff ffa9 	bl	3b95e <tx_start>
   3ba0c:	e7f2      	b.n	3b9f4 <uarte_nrfx_fifo_fill+0x5e>

0003ba0e <uarte_nrfx_irq_is_pending>:
{
   3ba0e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   3ba10:	6843      	ldr	r3, [r0, #4]
{
   3ba12:	4604      	mov	r4, r0
	return config->uarte_regs;
   3ba14:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   3ba16:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   3ba1a:	025b      	lsls	r3, r3, #9
   3ba1c:	d405      	bmi.n	3ba2a <uarte_nrfx_irq_is_pending+0x1c>
   3ba1e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   3ba22:	f010 0010 	ands.w	r0, r0, #16
   3ba26:	d106      	bne.n	3ba36 <uarte_nrfx_irq_is_pending+0x28>
}
   3ba28:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3ba2a:	f7ff ff5a 	bl	3b8e2 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   3ba2e:	2800      	cmp	r0, #0
   3ba30:	d0f5      	beq.n	3ba1e <uarte_nrfx_irq_is_pending+0x10>
		||
   3ba32:	2001      	movs	r0, #1
   3ba34:	e7f8      	b.n	3ba28 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   3ba36:	4620      	mov	r0, r4
   3ba38:	f7ff ff68 	bl	3b90c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3ba3c:	3800      	subs	r0, #0
   3ba3e:	bf18      	it	ne
   3ba40:	2001      	movne	r0, #1
   3ba42:	e7f1      	b.n	3ba28 <uarte_nrfx_irq_is_pending+0x1a>

0003ba44 <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   3ba44:	2000      	movs	r0, #0
   3ba46:	4770      	bx	lr

0003ba48 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3ba48:	4668      	mov	r0, sp
   3ba4a:	f020 0107 	bic.w	r1, r0, #7
   3ba4e:	468d      	mov	sp, r1
   3ba50:	b501      	push	{r0, lr}
	nrf_modem_os_trace_irq_handler();
   3ba52:	f7f3 ff31 	bl	2f8b8 <nrf_modem_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3ba56:	f7e7 fc09 	bl	2326c <_arch_isr_direct_pm>
   3ba5a:	f7e7 ffc3 	bl	239e4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3ba5e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3ba62:	4685      	mov	sp, r0
   3ba64:	4770      	bx	lr

0003ba66 <trace_task_create>:
{
   3ba66:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   3ba68:	201d      	movs	r0, #29
   3ba6a:	2200      	movs	r2, #0
   3ba6c:	2106      	movs	r1, #6
   3ba6e:	f7e7 fbcb 	bl	23208 <z_arm_irq_priority_set>
}
   3ba72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   3ba76:	201d      	movs	r0, #29
   3ba78:	f7e7 bba8 	b.w	231cc <arch_irq_enable>

0003ba7c <read_task_create>:
{
   3ba7c:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   3ba7e:	201c      	movs	r0, #28
   3ba80:	2200      	movs	r2, #0
   3ba82:	2106      	movs	r1, #6
   3ba84:	f7e7 fbc0 	bl	23208 <z_arm_irq_priority_set>
}
   3ba88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   3ba8c:	201c      	movs	r0, #28
   3ba8e:	f7e7 bb9d 	b.w	231cc <arch_irq_enable>

0003ba92 <nrf_modem_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   3ba92:	2000      	movs	r0, #0
   3ba94:	4770      	bx	lr

0003ba96 <z_to_nrf_flags>:
{
   3ba96:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   3ba98:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   3ba9c:	bf18      	it	ne
   3ba9e:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   3baa0:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   3baa2:	bf48      	it	mi
   3baa4:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   3baa8:	069a      	lsls	r2, r3, #26
		nrf_flags |= NRF_MSG_TRUNC;
   3baaa:	bf48      	it	mi
   3baac:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   3bab0:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   3bab2:	bf48      	it	mi
   3bab4:	f040 0010 	orrmi.w	r0, r0, #16
}
   3bab8:	4770      	bx	lr

0003baba <z_to_nrf_family>:
	switch (z_family) {
   3baba:	2806      	cmp	r0, #6
   3babc:	d809      	bhi.n	3bad2 <z_to_nrf_family+0x18>
   3babe:	2806      	cmp	r0, #6
   3bac0:	d813      	bhi.n	3baea <z_to_nrf_family+0x30>
   3bac2:	e8df f000 	tbb	[pc, r0]
   3bac6:	1510      	.short	0x1510
   3bac8:	12120e04 	.word	0x12120e04
   3bacc:	0c          	.byte	0x0c
   3bacd:	00          	.byte	0x00
   3bace:	200a      	movs	r0, #10
   3bad0:	4770      	bx	lr
   3bad2:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   3bad4:	bf14      	ite	ne
   3bad6:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   3bada:	2066      	moveq	r0, #102	; 0x66
   3badc:	4770      	bx	lr
		return NRF_AF_LOCAL;
   3bade:	2001      	movs	r0, #1
   3bae0:	4770      	bx	lr
		return NRF_AF_PACKET;
   3bae2:	2005      	movs	r0, #5
   3bae4:	4770      	bx	lr
		return NRF_AF_UNSPEC;
   3bae6:	2000      	movs	r0, #0
   3bae8:	4770      	bx	lr
		return -EAFNOSUPPORT;
   3baea:	f06f 0069 	mvn.w	r0, #105	; 0x69
   3baee:	4770      	bx	lr
		return NRF_AF_INET;
   3baf0:	2002      	movs	r0, #2
}
   3baf2:	4770      	bx	lr

0003baf4 <z_to_nrf_protocol>:
	switch (proto) {
   3baf4:	f240 1311 	movw	r3, #273	; 0x111
   3baf8:	4298      	cmp	r0, r3
   3bafa:	d023      	beq.n	3bb44 <z_to_nrf_protocol+0x50>
   3bafc:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   3bb00:	da11      	bge.n	3bb26 <z_to_nrf_protocol+0x32>
   3bb02:	2811      	cmp	r0, #17
   3bb04:	d021      	beq.n	3bb4a <z_to_nrf_protocol+0x56>
   3bb06:	dc06      	bgt.n	3bb16 <z_to_nrf_protocol+0x22>
   3bb08:	b300      	cbz	r0, 3bb4c <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   3bb0a:	2806      	cmp	r0, #6
   3bb0c:	bf14      	ite	ne
   3bb0e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3bb12:	2001      	moveq	r0, #1
   3bb14:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   3bb16:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3bb1a:	bf14      	ite	ne
   3bb1c:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3bb20:	f44f 7082 	moveq.w	r0, #260	; 0x104
   3bb24:	4770      	bx	lr
	switch (proto) {
   3bb26:	f240 2302 	movw	r3, #514	; 0x202
   3bb2a:	4298      	cmp	r0, r3
   3bb2c:	d00e      	beq.n	3bb4c <z_to_nrf_protocol+0x58>
   3bb2e:	f240 2303 	movw	r3, #515	; 0x203
   3bb32:	4298      	cmp	r0, r3
   3bb34:	d00a      	beq.n	3bb4c <z_to_nrf_protocol+0x58>
   3bb36:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   3bb3a:	4298      	cmp	r0, r3
   3bb3c:	bf18      	it	ne
   3bb3e:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3bb42:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   3bb44:	f44f 7087 	mov.w	r0, #270	; 0x10e
   3bb48:	4770      	bx	lr
	switch (proto) {
   3bb4a:	2002      	movs	r0, #2
}
   3bb4c:	4770      	bx	lr

0003bb4e <nrf91_socket_is_supported>:
}
   3bb4e:	2001      	movs	r0, #1
   3bb50:	4770      	bx	lr

0003bb52 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   3bb52:	f7f8 bb49 	b.w	341e8 <z_impl_k_mutex_unlock>

0003bb56 <nrf91_socket_offload_getsockopt>:
{
   3bb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bb5a:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   3bb5c:	2300      	movs	r3, #0
{
   3bb5e:	b086      	sub	sp, #24
   3bb60:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   3bb64:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3bb68:	f8d8 3000 	ldr.w	r3, [r8]
{
   3bb6c:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3bb6e:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3bb70:	f240 2302 	movw	r3, #514	; 0x202
   3bb74:	4299      	cmp	r1, r3
{
   3bb76:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   3bb78:	6807      	ldr	r7, [r0, #0]
	switch (z_in_level) {
   3bb7a:	d005      	beq.n	3bb88 <nrf91_socket_offload_getsockopt+0x32>
   3bb7c:	dc31      	bgt.n	3bbe2 <nrf91_socket_offload_getsockopt+0x8c>
   3bb7e:	2901      	cmp	r1, #1
   3bb80:	d002      	beq.n	3bb88 <nrf91_socket_offload_getsockopt+0x32>
   3bb82:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3bb86:	d13d      	bne.n	3bc04 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3bb88:	4631      	mov	r1, r6
   3bb8a:	4620      	mov	r0, r4
   3bb8c:	aa02      	add	r2, sp, #8
   3bb8e:	f7eb fb6d 	bl	2726c <z_to_nrf_optname>
   3bb92:	2800      	cmp	r0, #0
   3bb94:	db36      	blt.n	3bc04 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3bb96:	2c01      	cmp	r4, #1
   3bb98:	d127      	bne.n	3bbea <nrf91_socket_offload_getsockopt+0x94>
   3bb9a:	f1a6 0314 	sub.w	r3, r6, #20
   3bb9e:	2b01      	cmp	r3, #1
   3bba0:	d823      	bhi.n	3bbea <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   3bba2:	2308      	movs	r3, #8
   3bba4:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   3bba6:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3bba8:	aa03      	add	r2, sp, #12
   3bbaa:	4638      	mov	r0, r7
   3bbac:	9200      	str	r2, [sp, #0]
   3bbae:	4621      	mov	r1, r4
   3bbb0:	9a02      	ldr	r2, [sp, #8]
   3bbb2:	f002 f83d 	bl	3dc30 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3bbb6:	4607      	mov	r7, r0
   3bbb8:	b978      	cbnz	r0, 3bbda <nrf91_socket_offload_getsockopt+0x84>
   3bbba:	b175      	cbz	r5, 3bbda <nrf91_socket_offload_getsockopt+0x84>
		*optlen = nrf_optlen;
   3bbbc:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3bbbe:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   3bbc0:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3bbc4:	d109      	bne.n	3bbda <nrf91_socket_offload_getsockopt+0x84>
			if (optname == SO_ERROR) {
   3bbc6:	2e04      	cmp	r6, #4
   3bbc8:	d111      	bne.n	3bbee <nrf91_socket_offload_getsockopt+0x98>
				if (*(int *)optval != 0) {
   3bbca:	6828      	ldr	r0, [r5, #0]
   3bbcc:	b128      	cbz	r0, 3bbda <nrf91_socket_offload_getsockopt+0x84>
					nrf_modem_os_errno_set(*(int *)optval);
   3bbce:	f7eb f957 	bl	26e80 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   3bbd2:	f7fe fce8 	bl	3a5a6 <__errno>
   3bbd6:	6803      	ldr	r3, [r0, #0]
   3bbd8:	602b      	str	r3, [r5, #0]
}
   3bbda:	4638      	mov	r0, r7
   3bbdc:	b006      	add	sp, #24
   3bbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3bbe2:	f240 2303 	movw	r3, #515	; 0x203
   3bbe6:	4299      	cmp	r1, r3
   3bbe8:	e7cd      	b.n	3bb86 <nrf91_socket_offload_getsockopt+0x30>
   3bbea:	462b      	mov	r3, r5
   3bbec:	e7dc      	b.n	3bba8 <nrf91_socket_offload_getsockopt+0x52>
			} else if ((optname == SO_RCVTIMEO) ||
   3bbee:	3e14      	subs	r6, #20
   3bbf0:	2e01      	cmp	r6, #1
   3bbf2:	d8f2      	bhi.n	3bbda <nrf91_socket_offload_getsockopt+0x84>
				((struct timeval *)optval)->tv_sec =
   3bbf4:	9b04      	ldr	r3, [sp, #16]
   3bbf6:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   3bbf8:	9b05      	ldr	r3, [sp, #20]
   3bbfa:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   3bbfc:	2308      	movs	r3, #8
   3bbfe:	f8c8 3000 	str.w	r3, [r8]
   3bc02:	e7ea      	b.n	3bbda <nrf91_socket_offload_getsockopt+0x84>
	errno = ENOPROTOOPT;
   3bc04:	f7fe fccf 	bl	3a5a6 <__errno>
   3bc08:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3bc0a:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   3bc0e:	6003      	str	r3, [r0, #0]
	return retval;
   3bc10:	e7e3      	b.n	3bbda <nrf91_socket_offload_getsockopt+0x84>

0003bc12 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3bc12:	6800      	ldr	r0, [r0, #0]
   3bc14:	f001 bfba 	b.w	3db8c <nrf_listen>

0003bc18 <nrf91_socket_offload_freeaddrinfo>:
{
   3bc18:	b538      	push	{r3, r4, r5, lr}
   3bc1a:	4604      	mov	r4, r0
	while (next != NULL) {
   3bc1c:	b904      	cbnz	r4, 3bc20 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3bc1e:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3bc20:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   3bc22:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   3bc24:	f002 f95e 	bl	3dee4 <k_free>
		k_free(this);
   3bc28:	4620      	mov	r0, r4
   3bc2a:	f002 f95b 	bl	3dee4 <k_free>
		next = next->ai_next;
   3bc2e:	462c      	mov	r4, r5
   3bc30:	e7f4      	b.n	3bc1c <nrf91_socket_offload_freeaddrinfo+0x4>

0003bc32 <z_to_nrf_addrinfo_hints>:
{
   3bc32:	b538      	push	{r3, r4, r5, lr}
   3bc34:	460c      	mov	r4, r1
   3bc36:	4605      	mov	r5, r0
   3bc38:	2220      	movs	r2, #32
   3bc3a:	2100      	movs	r1, #0
   3bc3c:	4620      	mov	r0, r4
   3bc3e:	f002 f9b4 	bl	3dfaa <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3bc42:	686a      	ldr	r2, [r5, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   3bc44:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   3bc48:	04d2      	lsls	r2, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   3bc4a:	bf48      	it	mi
   3bc4c:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3bc50:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3bc52:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   3bc54:	2b03      	cmp	r3, #3
   3bc56:	d003      	beq.n	3bc60 <z_to_nrf_addrinfo_hints+0x2e>
   3bc58:	2b04      	cmp	r3, #4
   3bc5a:	bf08      	it	eq
   3bc5c:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   3bc60:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3bc62:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   3bc64:	f7ff ff29 	bl	3baba <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3bc68:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3bc6c:	d00b      	beq.n	3bc86 <z_to_nrf_addrinfo_hints+0x54>
	nrf_out->ai_family = family;
   3bc6e:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3bc70:	6928      	ldr	r0, [r5, #16]
   3bc72:	f7ff ff3f 	bl	3baf4 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3bc76:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3bc7a:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3bc7c:	d003      	beq.n	3bc86 <z_to_nrf_addrinfo_hints+0x54>
	if (z_in->ai_canonname != NULL) {
   3bc7e:	69e8      	ldr	r0, [r5, #28]
   3bc80:	b108      	cbz	r0, 3bc86 <z_to_nrf_addrinfo_hints+0x54>
		nrf_out->ai_canonname = z_in->ai_canonname;
   3bc82:	61a0      	str	r0, [r4, #24]
	return 0;
   3bc84:	2000      	movs	r0, #0
}
   3bc86:	bd38      	pop	{r3, r4, r5, pc}

0003bc88 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3bc88:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3bc8a:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3bc8c:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3bc8e:	4603      	mov	r3, r0
{
   3bc90:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3bc92:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3bc96:	f101 0420 	add.w	r4, r1, #32
   3bc9a:	f101 0210 	add.w	r2, r1, #16
   3bc9e:	f852 5b04 	ldr.w	r5, [r2], #4
   3bca2:	42a2      	cmp	r2, r4
   3bca4:	f843 5b04 	str.w	r5, [r3], #4
   3bca8:	d1f9      	bne.n	3bc9e <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   3bcaa:	6a0b      	ldr	r3, [r1, #32]
   3bcac:	7503      	strb	r3, [r0, #20]
}
   3bcae:	bd30      	pop	{r4, r5, pc}

0003bcb0 <z_to_nrf_ipv6>:
{
   3bcb0:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3bcb2:	2124      	movs	r1, #36	; 0x24
   3bcb4:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3bcb6:	8841      	ldrh	r1, [r0, #2]
{
   3bcb8:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3bcba:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3bcbc:	210a      	movs	r1, #10
{
   3bcbe:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   3bcc0:	6059      	str	r1, [r3, #4]
   3bcc2:	1d04      	adds	r4, r0, #4
   3bcc4:	f103 0610 	add.w	r6, r3, #16
   3bcc8:	f100 0714 	add.w	r7, r0, #20
   3bccc:	4635      	mov	r5, r6
   3bcce:	6820      	ldr	r0, [r4, #0]
   3bcd0:	6861      	ldr	r1, [r4, #4]
   3bcd2:	3408      	adds	r4, #8
   3bcd4:	c503      	stmia	r5!, {r0, r1}
   3bcd6:	42bc      	cmp	r4, r7
   3bcd8:	462e      	mov	r6, r5
   3bcda:	d1f7      	bne.n	3bccc <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   3bcdc:	7d12      	ldrb	r2, [r2, #20]
   3bcde:	621a      	str	r2, [r3, #32]
}
   3bce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003bce2 <nrf91_socket_offload_sendto>:
{
   3bce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bce6:	b08e      	sub	sp, #56	; 0x38
   3bce8:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3bcea:	460d      	mov	r5, r1
   3bcec:	461e      	mov	r6, r3
	int sd = OBJ_TO_SD(obj);
   3bcee:	6807      	ldr	r7, [r0, #0]
	if (to == NULL) {
   3bcf0:	b974      	cbnz	r4, 3bd10 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3bcf2:	4618      	mov	r0, r3
   3bcf4:	9203      	str	r2, [sp, #12]
   3bcf6:	f7ff fece 	bl	3ba96 <z_to_nrf_flags>
   3bcfa:	4603      	mov	r3, r0
   3bcfc:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3bd00:	4629      	mov	r1, r5
   3bd02:	4638      	mov	r0, r7
   3bd04:	9a03      	ldr	r2, [sp, #12]
   3bd06:	f001 fefa 	bl	3dafe <nrf_sendto>
}
   3bd0a:	b00e      	add	sp, #56	; 0x38
   3bd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   3bd10:	8823      	ldrh	r3, [r4, #0]
   3bd12:	9203      	str	r2, [sp, #12]
   3bd14:	2b01      	cmp	r3, #1
   3bd16:	d113      	bne.n	3bd40 <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   3bd18:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3bd1a:	f04f 0810 	mov.w	r8, #16
	nrf_out->sin_port = ptr->sin_port;
   3bd1e:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   3bd22:	2302      	movs	r3, #2
   3bd24:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3bd26:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3bd28:	4630      	mov	r0, r6
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3bd2a:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3bd2c:	f88d 8014 	strb.w	r8, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3bd30:	f7ff feb1 	bl	3ba96 <z_to_nrf_flags>
   3bd34:	a905      	add	r1, sp, #20
   3bd36:	4603      	mov	r3, r0
   3bd38:	f8cd 8004 	str.w	r8, [sp, #4]
   3bd3c:	9100      	str	r1, [sp, #0]
   3bd3e:	e7df      	b.n	3bd00 <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   3bd40:	2b02      	cmp	r3, #2
   3bd42:	d10d      	bne.n	3bd60 <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   3bd44:	f10d 0814 	add.w	r8, sp, #20
   3bd48:	4641      	mov	r1, r8
   3bd4a:	4620      	mov	r0, r4
   3bd4c:	f7ff ffb0 	bl	3bcb0 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3bd50:	4630      	mov	r0, r6
   3bd52:	f7ff fea0 	bl	3ba96 <z_to_nrf_flags>
   3bd56:	2124      	movs	r1, #36	; 0x24
   3bd58:	4603      	mov	r3, r0
   3bd5a:	e9cd 8100 	strd	r8, r1, [sp]
   3bd5e:	e7cf      	b.n	3bd00 <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   3bd60:	f7fe fc21 	bl	3a5a6 <__errno>
   3bd64:	2386      	movs	r3, #134	; 0x86
   3bd66:	6003      	str	r3, [r0, #0]
	return retval;
   3bd68:	f04f 30ff 	mov.w	r0, #4294967295
   3bd6c:	e7cd      	b.n	3bd0a <nrf91_socket_offload_sendto+0x28>

0003bd6e <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3bd6e:	2300      	movs	r3, #0
{
   3bd70:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3bd72:	e9cd 3300 	strd	r3, r3, [sp]
   3bd76:	f7ff ffb4 	bl	3bce2 <nrf91_socket_offload_sendto>
}
   3bd7a:	b003      	add	sp, #12
   3bd7c:	f85d fb04 	ldr.w	pc, [sp], #4

0003bd80 <nrf91_socket_offload_connect>:
{
   3bd80:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3bd82:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3bd84:	8808      	ldrh	r0, [r1, #0]
{
   3bd86:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3bd88:	2801      	cmp	r0, #1
{
   3bd8a:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3bd8c:	d10f      	bne.n	3bdae <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   3bd8e:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3bd90:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3bd92:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3bd96:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3bd98:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3bd9a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3bd9e:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3bda0:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3bda2:	4620      	mov	r0, r4
   3bda4:	a901      	add	r1, sp, #4
   3bda6:	f001 fede 	bl	3db66 <nrf_connect>
}
   3bdaa:	b00a      	add	sp, #40	; 0x28
   3bdac:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3bdae:	2802      	cmp	r0, #2
   3bdb0:	d105      	bne.n	3bdbe <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   3bdb2:	4618      	mov	r0, r3
   3bdb4:	a901      	add	r1, sp, #4
   3bdb6:	f7ff ff7b 	bl	3bcb0 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3bdba:	2224      	movs	r2, #36	; 0x24
   3bdbc:	e7f1      	b.n	3bda2 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3bdbe:	4620      	mov	r0, r4
   3bdc0:	f001 fed1 	bl	3db66 <nrf_connect>
		if (retval < 0) {
   3bdc4:	2800      	cmp	r0, #0
   3bdc6:	daf0      	bge.n	3bdaa <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   3bdc8:	f7fe fbed 	bl	3a5a6 <__errno>
   3bdcc:	2386      	movs	r3, #134	; 0x86
   3bdce:	6003      	str	r3, [r0, #0]
   3bdd0:	f04f 30ff 	mov.w	r0, #4294967295
   3bdd4:	e7e9      	b.n	3bdaa <nrf91_socket_offload_connect+0x2a>

0003bdd6 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3bdd6:	f7f8 b90d 	b.w	33ff4 <z_impl_k_mutex_lock>

0003bdda <nrf91_socket_offload_recvfrom>:
{
   3bdda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bdde:	461d      	mov	r5, r3
   3bde0:	b08e      	sub	sp, #56	; 0x38
   3bde2:	4606      	mov	r6, r0
   3bde4:	e9dd 4714 	ldrd	r4, r7, [sp, #80]	; 0x50
	k_mutex_unlock(ctx->lock);
   3bde8:	6840      	ldr	r0, [r0, #4]
{
   3bdea:	e9cd 2102 	strd	r2, r1, [sp, #8]
	k_mutex_unlock(ctx->lock);
   3bdee:	f7ff feb0 	bl	3bb52 <k_mutex_unlock>
	if (from == NULL) {
   3bdf2:	4628      	mov	r0, r5
   3bdf4:	f7ff fe4f 	bl	3ba96 <z_to_nrf_flags>
   3bdf8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   3bdfc:	4603      	mov	r3, r0
   3bdfe:	b984      	cbnz	r4, 3be22 <nrf91_socket_offload_recvfrom+0x48>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3be00:	e9cd 4400 	strd	r4, r4, [sp]
   3be04:	6830      	ldr	r0, [r6, #0]
   3be06:	f001 fe94 	bl	3db32 <nrf_recvfrom>
   3be0a:	4605      	mov	r5, r0
	k_mutex_lock(ctx->lock, K_FOREVER);
   3be0c:	f04f 32ff 	mov.w	r2, #4294967295
   3be10:	f04f 33ff 	mov.w	r3, #4294967295
   3be14:	6870      	ldr	r0, [r6, #4]
   3be16:	f7ff ffde 	bl	3bdd6 <k_mutex_lock.constprop.0>
}
   3be1a:	4628      	mov	r0, r5
   3be1c:	b00e      	add	sp, #56	; 0x38
   3be1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3be22:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3be24:	f10d 0814 	add.w	r8, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3be28:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3be2a:	a804      	add	r0, sp, #16
   3be2c:	9001      	str	r0, [sp, #4]
   3be2e:	f8cd 8000 	str.w	r8, [sp]
   3be32:	6830      	ldr	r0, [r6, #0]
   3be34:	f001 fe7d 	bl	3db32 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3be38:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3be3a:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   3be3c:	2b02      	cmp	r3, #2
   3be3e:	d109      	bne.n	3be54 <nrf91_socket_offload_recvfrom+0x7a>
	ptr->sin_port = nrf_in->sin_port;
   3be40:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   3be44:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   3be46:	2301      	movs	r3, #1
   3be48:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3be4a:	9b08      	ldr	r3, [sp, #32]
   3be4c:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3be4e:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   3be50:	603b      	str	r3, [r7, #0]
   3be52:	e7db      	b.n	3be0c <nrf91_socket_offload_recvfrom+0x32>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3be54:	2b0a      	cmp	r3, #10
   3be56:	d1d9      	bne.n	3be0c <nrf91_socket_offload_recvfrom+0x32>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3be58:	4641      	mov	r1, r8
   3be5a:	4620      	mov	r0, r4
   3be5c:	f7ff ff14 	bl	3bc88 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3be60:	2318      	movs	r3, #24
   3be62:	e7f5      	b.n	3be50 <nrf91_socket_offload_recvfrom+0x76>

0003be64 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3be64:	2300      	movs	r3, #0
{
   3be66:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3be68:	e9cd 3300 	strd	r3, r3, [sp]
   3be6c:	f7ff ffb5 	bl	3bdda <nrf91_socket_offload_recvfrom>
}
   3be70:	b003      	add	sp, #12
   3be72:	f85d fb04 	ldr.w	pc, [sp], #4

0003be76 <nrf91_socket_offload_close>:
{
   3be76:	b538      	push	{r3, r4, r5, lr}
   3be78:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   3be7a:	6800      	ldr	r0, [r0, #0]
   3be7c:	f001 fe32 	bl	3dae4 <nrf_close>
	if (retval == 0) {
   3be80:	4604      	mov	r4, r0
   3be82:	b910      	cbnz	r0, 3be8a <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   3be84:	4628      	mov	r0, r5
   3be86:	f7eb fd3f 	bl	27908 <release_ctx>
}
   3be8a:	4620      	mov	r0, r4
   3be8c:	bd38      	pop	{r3, r4, r5, pc}

0003be8e <nrf91_socket_offload_setsockopt>:
{
   3be8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3be92:	461e      	mov	r6, r3
	switch (z_in_level) {
   3be94:	f240 2302 	movw	r3, #514	; 0x202
{
   3be98:	b086      	sub	sp, #24
	switch (z_in_level) {
   3be9a:	4299      	cmp	r1, r3
{
   3be9c:	460c      	mov	r4, r1
   3be9e:	4615      	mov	r5, r2
   3bea0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   3bea2:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   3bea6:	d005      	beq.n	3beb4 <nrf91_socket_offload_setsockopt+0x26>
   3bea8:	dc20      	bgt.n	3beec <nrf91_socket_offload_setsockopt+0x5e>
   3beaa:	2901      	cmp	r1, #1
   3beac:	d002      	beq.n	3beb4 <nrf91_socket_offload_setsockopt+0x26>
   3beae:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3beb2:	d126      	bne.n	3bf02 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3beb4:	4629      	mov	r1, r5
   3beb6:	4620      	mov	r0, r4
   3beb8:	aa03      	add	r2, sp, #12
   3beba:	f7eb f9d7 	bl	2726c <z_to_nrf_optname>
   3bebe:	2800      	cmp	r0, #0
   3bec0:	db1f      	blt.n	3bf02 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3bec2:	2c01      	cmp	r4, #1
   3bec4:	d116      	bne.n	3bef4 <nrf91_socket_offload_setsockopt+0x66>
   3bec6:	3d14      	subs	r5, #20
   3bec8:	2d01      	cmp	r5, #1
   3beca:	d805      	bhi.n	3bed8 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   3becc:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3bece:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3bed0:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3bed2:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3bed4:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   3bed6:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3bed8:	4633      	mov	r3, r6
   3beda:	4621      	mov	r1, r4
   3bedc:	4640      	mov	r0, r8
   3bede:	9a03      	ldr	r2, [sp, #12]
   3bee0:	9700      	str	r7, [sp, #0]
   3bee2:	f001 fe8c 	bl	3dbfe <nrf_setsockopt>
}
   3bee6:	b006      	add	sp, #24
   3bee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3beec:	f240 2303 	movw	r3, #515	; 0x203
   3bef0:	4299      	cmp	r1, r3
   3bef2:	e7de      	b.n	3beb2 <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3bef4:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   3bef8:	d1ee      	bne.n	3bed8 <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   3befa:	2d0a      	cmp	r5, #10
   3befc:	bf08      	it	eq
   3befe:	2701      	moveq	r7, #1
   3bf00:	e7ea      	b.n	3bed8 <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   3bf02:	f7fe fb50 	bl	3a5a6 <__errno>
   3bf06:	236d      	movs	r3, #109	; 0x6d
   3bf08:	6003      	str	r3, [r0, #0]
   3bf0a:	f04f 30ff 	mov.w	r0, #4294967295
   3bf0e:	e7ea      	b.n	3bee6 <nrf91_socket_offload_setsockopt+0x58>

0003bf10 <nrf91_socket_offload_bind>:
{
   3bf10:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   3bf12:	880a      	ldrh	r2, [r1, #0]
{
   3bf14:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3bf16:	2a01      	cmp	r2, #1
	int sd = OBJ_TO_SD(obj);
   3bf18:	6804      	ldr	r4, [r0, #0]
{
   3bf1a:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3bf1c:	d10f      	bne.n	3bf3e <nrf91_socket_offload_bind+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   3bf1e:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3bf20:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3bf22:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3bf26:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3bf28:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3bf2a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3bf2e:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3bf30:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3bf32:	4620      	mov	r0, r4
   3bf34:	a901      	add	r1, sp, #4
   3bf36:	f001 fe4f 	bl	3dbd8 <nrf_bind>
}
   3bf3a:	b00a      	add	sp, #40	; 0x28
   3bf3c:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3bf3e:	2a02      	cmp	r2, #2
   3bf40:	d105      	bne.n	3bf4e <nrf91_socket_offload_bind+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   3bf42:	4618      	mov	r0, r3
   3bf44:	a901      	add	r1, sp, #4
   3bf46:	f7ff feb3 	bl	3bcb0 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3bf4a:	2224      	movs	r2, #36	; 0x24
   3bf4c:	e7f1      	b.n	3bf32 <nrf91_socket_offload_bind+0x22>
	errno = ENOTSUP;
   3bf4e:	f7fe fb2a 	bl	3a5a6 <__errno>
   3bf52:	2386      	movs	r3, #134	; 0x86
   3bf54:	6003      	str	r3, [r0, #0]
   3bf56:	f04f 30ff 	mov.w	r0, #4294967295
   3bf5a:	e7ee      	b.n	3bf3a <nrf91_socket_offload_bind+0x2a>

0003bf5c <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   3bf5c:	f7f8 b944 	b.w	341e8 <z_impl_k_mutex_unlock>

0003bf60 <k_uptime_get>:
{
   3bf60:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   3bf62:	f001 ff4d 	bl	3de00 <z_impl_k_uptime_ticks>
   3bf66:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3bf6a:	fba0 2304 	umull	r2, r3, r0, r4
   3bf6e:	fb04 3301 	mla	r3, r4, r1, r3
   3bf72:	0bd0      	lsrs	r0, r2, #15
}
   3bf74:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   3bf78:	0bd9      	lsrs	r1, r3, #15
   3bf7a:	bd10      	pop	{r4, pc}

0003bf7c <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
				      struct cloud_event *evt,
				      void *user_data)
{
	if (backend->config->handler) {
   3bf7c:	6843      	ldr	r3, [r0, #4]
   3bf7e:	685b      	ldr	r3, [r3, #4]
   3bf80:	b103      	cbz	r3, 3bf84 <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   3bf82:	4718      	bx	r3
	}
}
   3bf84:	4770      	bx	lr

0003bf86 <api_user_data_set>:
}

static int api_user_data_set(const struct cloud_backend *const backend,
			 void *user_data)
{
	backend->config->user_data = user_data;
   3bf86:	6843      	ldr	r3, [r0, #4]
	return 0;
}
   3bf88:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   3bf8a:	60d9      	str	r1, [r3, #12]
}
   3bf8c:	4770      	bx	lr

0003bf8e <atomic_set>:
{
   3bf8e:	4603      	mov	r3, r0
}
   3bf90:	e8d3 0fef 	ldaex	r0, [r3]
   3bf94:	e8c3 1fe2 	stlex	r2, r1, [r3]
   3bf98:	2a00      	cmp	r2, #0
   3bf9a:	d1f9      	bne.n	3bf90 <atomic_set+0x2>
   3bf9c:	4770      	bx	lr

0003bf9e <api_ping>:
{
   3bf9e:	b508      	push	{r3, lr}
	nct_process();
   3bfa0:	f7ee f954 	bl	2a24c <nct_process>
}
   3bfa4:	2000      	movs	r0, #0
   3bfa6:	bd08      	pop	{r3, pc}

0003bfa8 <api_keepalive_time_left>:
	return nct_keepalive_time_left();
   3bfa8:	f7ee b95c 	b.w	2a264 <nct_keepalive_time_left>

0003bfac <api_connect_error_translate>:
	switch (err) {
   3bfac:	f100 030b 	add.w	r3, r0, #11
   3bfb0:	2b0b      	cmp	r3, #11
   3bfb2:	d807      	bhi.n	3bfc4 <api_connect_error_translate+0x18>
   3bfb4:	e8df f003 	tbb	[pc, r3]
   3bfb8:	08080808 	.word	0x08080808
   3bfbc:	08060808 	.word	0x08060808
   3bfc0:	08080608 	.word	0x08080608
   3bfc4:	f7ec ba00 	b.w	283c8 <api_connect_error_translate.part.0>
}
   3bfc8:	4770      	bx	lr

0003bfca <api_input>:
   3bfca:	b508      	push	{r3, lr}
   3bfcc:	f7ee f93e 	bl	2a24c <nct_process>
   3bfd0:	2000      	movs	r0, #0
   3bfd2:	bd08      	pop	{r3, pc}

0003bfd4 <api_connect>:
{
   3bfd4:	b538      	push	{r3, r4, r5, lr}
   3bfd6:	4605      	mov	r5, r0
	err = nrf_cloud_connect(NULL);
   3bfd8:	2000      	movs	r0, #0
   3bfda:	f7ec fbc5 	bl	28768 <nrf_cloud_connect>
	if (!err) {
   3bfde:	4604      	mov	r4, r0
   3bfe0:	b918      	cbnz	r0, 3bfea <api_connect+0x16>
		backend->config->socket = nct_socket_get();
   3bfe2:	686d      	ldr	r5, [r5, #4]
   3bfe4:	f7ee f944 	bl	2a270 <nct_socket_get>
   3bfe8:	60a8      	str	r0, [r5, #8]
	return api_connect_error_translate(err);
   3bfea:	4620      	mov	r0, r4
}
   3bfec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return api_connect_error_translate(err);
   3bff0:	f7ff bfdc 	b.w	3bfac <api_connect_error_translate>

0003bff4 <api_disconnect>:
	return nrf_cloud_disconnect();
   3bff4:	f7ec bbf4 	b.w	287e0 <nrf_cloud_disconnect>

0003bff8 <json_add_str>:
{
   3bff8:	b513      	push	{r0, r1, r4, lr}
   3bffa:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   3bffc:	4610      	mov	r0, r2
{
   3bffe:	9101      	str	r1, [sp, #4]
	json_str = cJSON_CreateString(item);
   3c000:	f7f1 fe96 	bl	2dd30 <cJSON_CreateString>
	if (json_str == NULL) {
   3c004:	4602      	mov	r2, r0
   3c006:	b130      	cbz	r0, 3c016 <json_add_str+0x1e>
	cJSON_AddItemToObject(parent, str, item);
   3c008:	4620      	mov	r0, r4
   3c00a:	9901      	ldr	r1, [sp, #4]
   3c00c:	f000 fae9 	bl	3c5e2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3c010:	2000      	movs	r0, #0
}
   3c012:	b002      	add	sp, #8
   3c014:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   3c016:	f06f 000b 	mvn.w	r0, #11
   3c01a:	e7fa      	b.n	3c012 <json_add_str+0x1a>

0003c01c <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3c01c:	b108      	cbz	r0, 3c022 <json_object_decode+0x6>
   3c01e:	f000 bad4 	b.w	3c5ca <cJSON_GetObjectItem>
}
   3c022:	4770      	bx	lr

0003c024 <json_add_null>:
{
   3c024:	b513      	push	{r0, r1, r4, lr}
   3c026:	4604      	mov	r4, r0
   3c028:	9101      	str	r1, [sp, #4]
	json_null = cJSON_CreateNull();
   3c02a:	f7f1 fe75 	bl	2dd18 <cJSON_CreateNull>
	if (json_null == NULL) {
   3c02e:	4602      	mov	r2, r0
   3c030:	b130      	cbz	r0, 3c040 <json_add_null+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   3c032:	4620      	mov	r0, r4
   3c034:	9901      	ldr	r1, [sp, #4]
   3c036:	f000 fad4 	bl	3c5e2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   3c03a:	2000      	movs	r0, #0
}
   3c03c:	b002      	add	sp, #8
   3c03e:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   3c040:	f06f 000b 	mvn.w	r0, #11
   3c044:	e7fa      	b.n	3c03c <json_add_null+0x18>

0003c046 <json_decode_and_alloc>:
{
   3c046:	b538      	push	{r3, r4, r5, lr}
   3c048:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   3c04a:	4604      	mov	r4, r0
   3c04c:	b110      	cbz	r0, 3c054 <json_decode_and_alloc+0xe>
   3c04e:	68c3      	ldr	r3, [r0, #12]
   3c050:	2b10      	cmp	r3, #16
   3c052:	d004      	beq.n	3c05e <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   3c054:	2300      	movs	r3, #0
		return -ENOENT;
   3c056:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   3c05a:	606b      	str	r3, [r5, #4]
}
   3c05c:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   3c05e:	6900      	ldr	r0, [r0, #16]
   3c060:	f7e1 f8fc 	bl	1d25c <strlen>
   3c064:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   3c066:	3001      	adds	r0, #1
   3c068:	f001 ff43 	bl	3def2 <k_malloc>
   3c06c:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   3c06e:	b130      	cbz	r0, 3c07e <json_decode_and_alloc+0x38>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   3c070:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   3c072:	6921      	ldr	r1, [r4, #16]
   3c074:	3201      	adds	r2, #1
   3c076:	f002 f945 	bl	3e304 <strncpy>
	return 0;
   3c07a:	2000      	movs	r0, #0
   3c07c:	e7ee      	b.n	3c05c <json_decode_and_alloc+0x16>
		return -ENOMEM;
   3c07e:	f06f 000b 	mvn.w	r0, #11
   3c082:	e7eb      	b.n	3c05c <json_decode_and_alloc+0x16>

0003c084 <nrf_codec_init>:
{
   3c084:	b508      	push	{r3, lr}
	cJSON_Init();
   3c086:	f7f1 fe83 	bl	2dd90 <cJSON_Init>
}
   3c08a:	2000      	movs	r0, #0
   3c08c:	bd08      	pop	{r3, pc}

0003c08e <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   3c08e:	2000      	movs	r0, #0
   3c090:	4770      	bx	lr

0003c092 <disconnection_handler>:
{
   3c092:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_evt evt = {
   3c094:	2218      	movs	r2, #24
   3c096:	2100      	movs	r1, #0
   3c098:	4668      	mov	r0, sp
   3c09a:	f001 ff86 	bl	3dfaa <memset>
   3c09e:	2309      	movs	r3, #9
   3c0a0:	f88d 3000 	strb.w	r3, [sp]
   3c0a4:	2301      	movs	r3, #1
   3c0a6:	9301      	str	r3, [sp, #4]
	if (nfsm_get_disconnect_requested()) {
   3c0a8:	f7ec fb1e 	bl	286e8 <nfsm_get_disconnect_requested>
   3c0ac:	b108      	cbz	r0, 3c0b2 <disconnection_handler+0x20>
		evt.status = NRF_CLOUD_DISCONNECT_USER_REQUEST;
   3c0ae:	2300      	movs	r3, #0
   3c0b0:	9301      	str	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   3c0b2:	4669      	mov	r1, sp
   3c0b4:	2001      	movs	r0, #1
   3c0b6:	f7ec fadb 	bl	28670 <nfsm_set_current_state_and_notify>
}
   3c0ba:	2000      	movs	r0, #0
   3c0bc:	b007      	add	sp, #28
   3c0be:	f85d fb04 	ldr.w	pc, [sp], #4

0003c0c2 <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   3c0c2:	b510      	push	{r4, lr}
	struct nrf_cloud_evt cloud_evt = {
   3c0c4:	2307      	movs	r3, #7
   3c0c6:	2400      	movs	r4, #0
{
   3c0c8:	b086      	sub	sp, #24
	struct nrf_cloud_evt cloud_evt = {
   3c0ca:	e9cd 4400 	strd	r4, r4, [sp]
   3c0ce:	f88d 3000 	strb.w	r3, [sp]
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
   3c0d2:	6843      	ldr	r3, [r0, #4]
	struct nrf_cloud_evt cloud_evt = {
   3c0d4:	aa02      	add	r2, sp, #8
   3c0d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   3c0da:	e882 0003 	stmia.w	r2, {r0, r1}
   3c0de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   3c0e2:	ab06      	add	r3, sp, #24
   3c0e4:	e903 0003 	stmdb	r3, {r0, r1}
		.topic = nct_evt->param.dc->topic,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   3c0e8:	f7ec fabc 	bl	28664 <nfsm_get_current_state>
   3c0ec:	4669      	mov	r1, sp
   3c0ee:	f7ec fabf 	bl	28670 <nfsm_set_current_state_and_notify>

	return 0;
}
   3c0f2:	4620      	mov	r0, r4
   3c0f4:	b006      	add	sp, #24
   3c0f6:	bd10      	pop	{r4, pc}

0003c0f8 <dc_connection_handler>:
{
   3c0f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   3c0fa:	6801      	ldr	r1, [r0, #0]
   3c0fc:	b951      	cbnz	r1, 3c114 <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   3c0fe:	2218      	movs	r2, #24
   3c100:	4668      	mov	r0, sp
   3c102:	f001 ff52 	bl	3dfaa <memset>
   3c106:	2305      	movs	r3, #5
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3c108:	4669      	mov	r1, sp
   3c10a:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   3c10c:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3c110:	f7ec faae 	bl	28670 <nfsm_set_current_state_and_notify>
}
   3c114:	2000      	movs	r0, #0
   3c116:	b007      	add	sp, #28
   3c118:	f85d fb04 	ldr.w	pc, [sp], #4

0003c11c <cc_tx_ack_in_state_requested_handler>:
{
   3c11c:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   3c11e:	f241 632e 	movw	r3, #5678	; 0x162e
   3c122:	6842      	ldr	r2, [r0, #4]
   3c124:	429a      	cmp	r2, r3
   3c126:	d103      	bne.n	3c130 <cc_tx_ack_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   3c128:	2100      	movs	r1, #0
   3c12a:	2005      	movs	r0, #5
   3c12c:	f7ec faa0 	bl	28670 <nfsm_set_current_state_and_notify>
}
   3c130:	2000      	movs	r0, #0
   3c132:	bd08      	pop	{r3, pc}

0003c134 <dc_disconnection_handler>:
   3c134:	2000      	movs	r0, #0
   3c136:	4770      	bx	lr

0003c138 <dc_tx_ack_handler>:
   3c138:	2000      	movs	r0, #0
   3c13a:	4770      	bx	lr

0003c13c <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   3c13c:	2101      	movs	r1, #1
   3c13e:	f7ed bad9 	b.w	296f4 <dc_send>

0003c142 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   3c142:	2100      	movs	r1, #0
   3c144:	f7ed bad6 	b.w	296f4 <dc_send>

0003c148 <reset_topic>:
{
   3c148:	b510      	push	{r4, lr}
   3c14a:	4604      	mov	r4, r0
	if (topic->utf8) {
   3c14c:	6800      	ldr	r0, [r0, #0]
   3c14e:	b118      	cbz	r0, 3c158 <reset_topic+0x10>
		nrf_cloud_free((void *)topic->utf8);
   3c150:	f001 fec8 	bl	3dee4 <k_free>
		topic->utf8 = NULL;
   3c154:	2300      	movs	r3, #0
   3c156:	6023      	str	r3, [r4, #0]
	topic->size = 0;
   3c158:	2300      	movs	r3, #0
   3c15a:	6063      	str	r3, [r4, #4]
}
   3c15c:	bd10      	pop	{r4, pc}

0003c15e <request_send>:
	switch (dl->proto) {
   3c15e:	f8d0 382c 	ldr.w	r3, [r0, #2092]	; 0x82c
   3c162:	2b06      	cmp	r3, #6
   3c164:	d002      	beq.n	3c16c <request_send+0xe>
   3c166:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3c16a:	d101      	bne.n	3c170 <request_send+0x12>
		return http_get_request_send(dl);
   3c16c:	f7ef bdb8 	b.w	2bce0 <http_get_request_send>
}
   3c170:	2000      	movs	r0, #0
   3c172:	4770      	bx	lr

0003c174 <error_evt_send.isra.0>:
static int error_evt_send(const struct download_client *dl, int error)
   3c174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   3c176:	2300      	movs	r3, #0
   3c178:	9301      	str	r3, [sp, #4]
   3c17a:	9303      	str	r3, [sp, #12]
   3c17c:	2301      	movs	r3, #1
		.error = -error
   3c17e:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   3c180:	f88d 3004 	strb.w	r3, [sp, #4]
   3c184:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   3c186:	6803      	ldr	r3, [r0, #0]
   3c188:	a801      	add	r0, sp, #4
   3c18a:	4798      	blx	r3
}
   3c18c:	b005      	add	sp, #20
   3c18e:	f85d fb04 	ldr.w	pc, [sp], #4

0003c192 <socket_send>:
{
   3c192:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	size_t off = 0;
   3c196:	2500      	movs	r5, #0
{
   3c198:	4606      	mov	r6, r0
   3c19a:	460c      	mov	r4, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3c19c:	462f      	mov	r7, r5
		sent = send(client->fd, client->buf + off, len, 0);
   3c19e:	f100 0804 	add.w	r8, r0, #4
	while (len) {
   3c1a2:	b90c      	cbnz	r4, 3c1a8 <socket_send+0x16>
	return 0;
   3c1a4:	4620      	mov	r0, r4
   3c1a6:	e00e      	b.n	3c1c6 <socket_send+0x34>
		sent = send(client->fd, client->buf + off, len, 0);
   3c1a8:	6830      	ldr	r0, [r6, #0]
   3c1aa:	2300      	movs	r3, #0
   3c1ac:	4622      	mov	r2, r4
   3c1ae:	e9cd 7700 	strd	r7, r7, [sp]
   3c1b2:	eb08 0105 	add.w	r1, r8, r5
   3c1b6:	f7fd fe44 	bl	39e42 <z_impl_zsock_sendto>
		if (sent <= 0) {
   3c1ba:	1e03      	subs	r3, r0, #0
   3c1bc:	dc06      	bgt.n	3c1cc <socket_send+0x3a>
			return -errno;
   3c1be:	f7fe f9f2 	bl	3a5a6 <__errno>
   3c1c2:	6800      	ldr	r0, [r0, #0]
   3c1c4:	4240      	negs	r0, r0
}
   3c1c6:	b002      	add	sp, #8
   3c1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		off += sent;
   3c1cc:	441d      	add	r5, r3
		len -= sent;
   3c1ce:	1ae4      	subs	r4, r4, r3
   3c1d0:	e7e7      	b.n	3c1a2 <socket_send+0x10>

0003c1d2 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   3c1d2:	b128      	cbz	r0, 3c1e0 <download_client_file_size_get+0xe>
   3c1d4:	b121      	cbz	r1, 3c1e0 <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   3c1d6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

	return 0;
   3c1da:	2000      	movs	r0, #0
	*size = client->file_size;
   3c1dc:	600b      	str	r3, [r1, #0]
	return 0;
   3c1de:	4770      	bx	lr
		return -EINVAL;
   3c1e0:	f06f 0015 	mvn.w	r0, #21
}
   3c1e4:	4770      	bx	lr

0003c1e6 <swallow>:
{
   3c1e6:	b570      	push	{r4, r5, r6, lr}
   3c1e8:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   3c1ea:	6800      	ldr	r0, [r0, #0]
{
   3c1ec:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   3c1ee:	f002 f8a9 	bl	3e344 <strstr>
	if (!p) {
   3c1f2:	4604      	mov	r4, r0
   3c1f4:	b130      	cbz	r0, 3c204 <swallow+0x1e>
	*str = p + strlen(swallow);
   3c1f6:	4630      	mov	r0, r6
   3c1f8:	f7e1 f830 	bl	1d25c <strlen>
   3c1fc:	4404      	add	r4, r0
	return 0;
   3c1fe:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   3c200:	602c      	str	r4, [r5, #0]
}
   3c202:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   3c204:	2001      	movs	r0, #1
   3c206:	e7fc      	b.n	3c202 <swallow+0x1c>

0003c208 <dfu_target_mcuboot_offset_get>:
	return dfu_target_stream_offset_get(out);
   3c208:	f7f0 b9f0 	b.w	2c5ec <dfu_target_stream_offset_get>

0003c20c <dfu_target_mcuboot_write>:
	return dfu_target_stream_write(buf, len);
   3c20c:	f7f0 b9f8 	b.w	2c600 <dfu_target_stream_write>

0003c210 <i2c_reg_update_byte.constprop.0>:
 * @param value Value for updating internal register.
 *
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_reg_update_byte(const struct device *dev,
   3c210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c214:	4699      	mov	r9, r3
	msg[0].flags = I2C_MSG_WRITE;
   3c216:	2300      	movs	r3, #0
	msg[0].len = num_write;
   3c218:	f04f 0801 	mov.w	r8, #1
static inline int i2c_reg_update_byte(const struct device *dev,
   3c21c:	b088      	sub	sp, #32
	msg[0].flags = I2C_MSG_WRITE;
   3c21e:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   3c222:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   3c226:	e9cd 3805 	strd	r3, r8, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3c22a:	2307      	movs	r3, #7
	msg[0].buf = (uint8_t *)write_buf;
   3c22c:	ad01      	add	r5, sp, #4
static inline int i2c_reg_update_byte(const struct device *dev,
   3c22e:	4606      	mov	r6, r0
   3c230:	460f      	mov	r7, r1
   3c232:	4614      	mov	r4, r2
   3c234:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   3c238:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   3c23a:	f8cd 800c 	str.w	r8, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3c23e:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   3c242:	6883      	ldr	r3, [r0, #8]
   3c244:	2202      	movs	r2, #2
   3c246:	f8d3 a004 	ldr.w	sl, [r3, #4]
   3c24a:	a902      	add	r1, sp, #8
   3c24c:	2338      	movs	r3, #56	; 0x38
   3c24e:	47d0      	blx	sl
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
	if (rc != 0) {
   3c250:	b9c0      	cbnz	r0, 3c284 <i2c_reg_update_byte.constprop.0+0x74>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
   3c252:	f89d 3003 	ldrb.w	r3, [sp, #3]
   3c256:	ea23 0104 	bic.w	r1, r3, r4
   3c25a:	ea04 0409 	and.w	r4, r4, r9
   3c25e:	430c      	orrs	r4, r1
	if (new_value == old_value) {
   3c260:	42a3      	cmp	r3, r4
   3c262:	d00f      	beq.n	3c284 <i2c_reg_update_byte.constprop.0+0x74>
	msg.len = num_bytes;
   3c264:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   3c266:	f88d 7004 	strb.w	r7, [sp, #4]
   3c26a:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   3c26e:	9502      	str	r5, [sp, #8]
	msg.len = num_bytes;
   3c270:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   3c272:	f88d 3010 	strb.w	r3, [sp, #16]
	return api->transfer(dev, msgs, num_msgs, addr);
   3c276:	68b3      	ldr	r3, [r6, #8]
   3c278:	4642      	mov	r2, r8
   3c27a:	685c      	ldr	r4, [r3, #4]
   3c27c:	4630      	mov	r0, r6
   3c27e:	2338      	movs	r3, #56	; 0x38
   3c280:	a902      	add	r1, sp, #8
   3c282:	47a0      	blx	r4
		return 0;
	}

	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
}
   3c284:	b008      	add	sp, #32
   3c286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003c28a <i2c_reg_read_byte>:
{
   3c28a:	b530      	push	{r4, r5, lr}
   3c28c:	b089      	sub	sp, #36	; 0x24
   3c28e:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   3c292:	f10d 0207 	add.w	r2, sp, #7
   3c296:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   3c298:	2201      	movs	r2, #1
	msg[0].flags = I2C_MSG_WRITE;
   3c29a:	2500      	movs	r5, #0
	msg[1].len = num_read;
   3c29c:	e9cd 3205 	strd	r3, r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3c2a0:	2307      	movs	r3, #7
	msg[0].len = num_write;
   3c2a2:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   3c2a4:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3c2a8:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   3c2ac:	6883      	ldr	r3, [r0, #8]
   3c2ae:	2202      	movs	r2, #2
   3c2b0:	685c      	ldr	r4, [r3, #4]
   3c2b2:	460b      	mov	r3, r1
   3c2b4:	a902      	add	r1, sp, #8
   3c2b6:	47a0      	blx	r4
}
   3c2b8:	b009      	add	sp, #36	; 0x24
   3c2ba:	bd30      	pop	{r4, r5, pc}

0003c2bc <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   3c2bc:	b538      	push	{r3, r4, r5, lr}
   3c2be:	460c      	mov	r4, r1
   3c2c0:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
   3c2c2:	f7fd ff4a 	bl	3a15a <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   3c2c6:	4621      	mov	r1, r4
   3c2c8:	4425      	add	r5, r4
   3c2ca:	42a9      	cmp	r1, r5
   3c2cc:	d101      	bne.n	3c2d2 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   3c2ce:	2001      	movs	r0, #1
}
   3c2d0:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   3c2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
   3c2d6:	4298      	cmp	r0, r3
   3c2d8:	d0f7      	beq.n	3c2ca <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   3c2da:	2000      	movs	r0, #0
   3c2dc:	e7f8      	b.n	3c2d0 <bootutil_buffer_is_erased.part.0+0x14>

0003c2de <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   3c2de:	b111      	cbz	r1, 3c2e6 <bootutil_buffer_is_erased+0x8>
   3c2e0:	b10a      	cbz	r2, 3c2e6 <bootutil_buffer_is_erased+0x8>
   3c2e2:	f7ff bfeb 	b.w	3c2bc <bootutil_buffer_is_erased.part.0>
}
   3c2e6:	2000      	movs	r0, #0
   3c2e8:	4770      	bx	lr

0003c2ea <boot_read_flag>:
{
   3c2ea:	b538      	push	{r3, r4, r5, lr}
   3c2ec:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3c2ee:	2301      	movs	r3, #1
{
   3c2f0:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3c2f2:	4622      	mov	r2, r4
{
   3c2f4:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3c2f6:	f7fd fea8 	bl	3a04a <flash_area_read>
    if (rc < 0) {
   3c2fa:	2800      	cmp	r0, #0
   3c2fc:	db10      	blt.n	3c320 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   3c2fe:	2201      	movs	r2, #1
   3c300:	4621      	mov	r1, r4
   3c302:	4628      	mov	r0, r5
   3c304:	f7ff ffeb 	bl	3c2de <bootutil_buffer_is_erased>
   3c308:	b118      	cbz	r0, 3c312 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   3c30a:	2303      	movs	r3, #3
    return 0;
   3c30c:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
   3c30e:	7023      	strb	r3, [r4, #0]
}
   3c310:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   3c312:	7823      	ldrb	r3, [r4, #0]
   3c314:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
   3c316:	bf0c      	ite	eq
   3c318:	2301      	moveq	r3, #1
   3c31a:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   3c31c:	7023      	strb	r3, [r4, #0]
   3c31e:	e7f7      	b.n	3c310 <boot_read_flag+0x26>
        return BOOT_EFLASH;
   3c320:	2001      	movs	r0, #1
   3c322:	e7f5      	b.n	3c310 <boot_read_flag+0x26>

0003c324 <boot_write_trailer>:
{
   3c324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3c328:	461d      	mov	r5, r3
   3c32a:	4606      	mov	r6, r0
   3c32c:	460f      	mov	r7, r1
   3c32e:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   3c330:	f7fd ff0a 	bl	3a148 <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
   3c334:	1944      	adds	r4, r0, r5
   3c336:	3c01      	subs	r4, #1
   3c338:	4240      	negs	r0, r0
   3c33a:	4004      	ands	r4, r0
   3c33c:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
   3c33e:	2c08      	cmp	r4, #8
   3c340:	d81b      	bhi.n	3c37a <boot_write_trailer+0x56>
    erased_val = flash_area_erased_val(fap);
   3c342:	4630      	mov	r0, r6
   3c344:	f7fd ff09 	bl	3a15a <flash_area_erased_val>
   3c348:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   3c34a:	2308      	movs	r3, #8
   3c34c:	462a      	mov	r2, r5
   3c34e:	4641      	mov	r1, r8
   3c350:	4668      	mov	r0, sp
   3c352:	f001 fe17 	bl	3df84 <__memcpy_chk>
__ssp_bos_icheck3(memset, void *, int)
   3c356:	4649      	mov	r1, r9
   3c358:	1b62      	subs	r2, r4, r5
   3c35a:	eb0d 0005 	add.w	r0, sp, r5
   3c35e:	f001 fe24 	bl	3dfaa <memset>
    rc = flash_area_write(fap, off, buf, align);
   3c362:	4623      	mov	r3, r4
   3c364:	466a      	mov	r2, sp
   3c366:	4639      	mov	r1, r7
   3c368:	4630      	mov	r0, r6
   3c36a:	f7fd fe8b 	bl	3a084 <flash_area_write>
    if (rc != 0) {
   3c36e:	3800      	subs	r0, #0
   3c370:	bf18      	it	ne
   3c372:	2001      	movne	r0, #1
}
   3c374:	b003      	add	sp, #12
   3c376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   3c37a:	f04f 30ff 	mov.w	r0, #4294967295
   3c37e:	e7f9      	b.n	3c374 <boot_write_trailer+0x50>

0003c380 <boot_write_trailer_flag>:
{
   3c380:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   3c382:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   3c384:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   3c388:	aa01      	add	r2, sp, #4
   3c38a:	f7ff ffcb 	bl	3c324 <boot_write_trailer>
}
   3c38e:	b003      	add	sp, #12
   3c390:	f85d fb04 	ldr.w	pc, [sp], #4

0003c394 <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
   3c394:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   3c396:	2201      	movs	r2, #1
   3c398:	3918      	subs	r1, #24
   3c39a:	f7ff bff1 	b.w	3c380 <boot_write_trailer_flag>

0003c39e <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
   3c39e:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   3c3a0:	3a18      	subs	r2, #24
   3c3a2:	f7ff bfa2 	b.w	3c2ea <boot_read_flag>

0003c3a6 <boot_read_swap_state_by_id>:
{
   3c3a6:	b513      	push	{r0, r1, r4, lr}
   3c3a8:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   3c3aa:	b2c0      	uxtb	r0, r0
   3c3ac:	a901      	add	r1, sp, #4
   3c3ae:	f7e5 fb93 	bl	21ad8 <flash_area_open>
    if (rc != 0) {
   3c3b2:	b950      	cbnz	r0, 3c3ca <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
   3c3b4:	4621      	mov	r1, r4
   3c3b6:	9801      	ldr	r0, [sp, #4]
   3c3b8:	f7f0 feb6 	bl	2d128 <boot_read_swap_state>
   3c3bc:	4604      	mov	r4, r0
    flash_area_close(fap);
   3c3be:	9801      	ldr	r0, [sp, #4]
   3c3c0:	f7fd fe42 	bl	3a048 <flash_area_close>
}
   3c3c4:	4620      	mov	r0, r4
   3c3c6:	b002      	add	sp, #8
   3c3c8:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   3c3ca:	2401      	movs	r4, #1
   3c3cc:	e7fa      	b.n	3c3c4 <boot_read_swap_state_by_id+0x1e>

0003c3ce <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   3c3ce:	4601      	mov	r1, r0
    return boot_set_pending_multi(0, permanent);
   3c3d0:	2000      	movs	r0, #0
   3c3d2:	f7f0 bf1d 	b.w	2d210 <boot_set_pending_multi>

0003c3d6 <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   3c3d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   3c3d8:	2002      	movs	r0, #2
   3c3da:	a902      	add	r1, sp, #8
   3c3dc:	f7ff ffe3 	bl	3c3a6 <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   3c3e0:	4604      	mov	r4, r0
   3c3e2:	b9b0      	cbnz	r0, 3c412 <boot_set_confirmed_multi+0x3c>
        return rc;
    }

    switch (state_primary_slot.magic) {
   3c3e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3c3e8:	2b02      	cmp	r3, #2
   3c3ea:	d017      	beq.n	3c41c <boot_set_confirmed_multi+0x46>
   3c3ec:	2b03      	cmp	r3, #3
   3c3ee:	d010      	beq.n	3c412 <boot_set_confirmed_multi+0x3c>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   3c3f0:	2002      	movs	r0, #2
   3c3f2:	a901      	add	r1, sp, #4
   3c3f4:	f7e5 fb70 	bl	21ad8 <flash_area_open>
    if (rc) {
   3c3f8:	4604      	mov	r4, r0
   3c3fa:	b968      	cbnz	r0, 3c418 <boot_set_confirmed_multi+0x42>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   3c3fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   3c400:	2b03      	cmp	r3, #3
   3c402:	d103      	bne.n	3c40c <boot_set_confirmed_multi+0x36>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   3c404:	9801      	ldr	r0, [sp, #4]
   3c406:	f7ff ffc5 	bl	3c394 <boot_write_image_ok>
   3c40a:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   3c40c:	9801      	ldr	r0, [sp, #4]
   3c40e:	f7fd fe1b 	bl	3a048 <flash_area_close>
    return rc;
}
   3c412:	4620      	mov	r0, r4
   3c414:	b004      	add	sp, #16
   3c416:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
   3c418:	2401      	movs	r4, #1
   3c41a:	e7f7      	b.n	3c40c <boot_set_confirmed_multi+0x36>
    switch (state_primary_slot.magic) {
   3c41c:	2404      	movs	r4, #4
   3c41e:	e7f8      	b.n	3c412 <boot_set_confirmed_multi+0x3c>

0003c420 <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   3c420:	2000      	movs	r0, #0
   3c422:	f7ff bfd8 	b.w	3c3d6 <boot_set_confirmed_multi>

0003c426 <parse_hex4>:
    for (i = 0; i < 4; i++)
   3c426:	2200      	movs	r2, #0
{
   3c428:	b510      	push	{r4, lr}
   3c42a:	4604      	mov	r4, r0
    unsigned int h = 0;
   3c42c:	4610      	mov	r0, r2
        if ((input[i] >= '0') && (input[i] <= '9'))
   3c42e:	5ca1      	ldrb	r1, [r4, r2]
   3c430:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3c434:	2b09      	cmp	r3, #9
   3c436:	d80b      	bhi.n	3c450 <parse_hex4+0x2a>
            h += (unsigned int) input[i] - '0';
   3c438:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        if (i < 3)
   3c43c:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   3c43e:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   3c442:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   3c446:	bf18      	it	ne
   3c448:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   3c44a:	2a04      	cmp	r2, #4
   3c44c:	d1ef      	bne.n	3c42e <parse_hex4+0x8>
}
   3c44e:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   3c450:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   3c454:	2b05      	cmp	r3, #5
   3c456:	d802      	bhi.n	3c45e <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   3c458:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   3c45c:	e7ee      	b.n	3c43c <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   3c45e:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   3c462:	2b05      	cmp	r3, #5
   3c464:	d802      	bhi.n	3c46c <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   3c466:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   3c46a:	e7e7      	b.n	3c43c <parse_hex4+0x16>
            return 0;
   3c46c:	2000      	movs	r0, #0
   3c46e:	e7ee      	b.n	3c44e <parse_hex4+0x28>

0003c470 <buffer_skip_whitespace>:
{
   3c470:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   3c472:	b128      	cbz	r0, 3c480 <buffer_skip_whitespace+0x10>
   3c474:	6801      	ldr	r1, [r0, #0]
   3c476:	b189      	cbz	r1, 3c49c <buffer_skip_whitespace+0x2c>
    if (cannot_access_at_index(buffer, 0))
   3c478:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   3c47c:	429a      	cmp	r2, r3
   3c47e:	d302      	bcc.n	3c486 <buffer_skip_whitespace+0x16>
}
   3c480:	bd10      	pop	{r4, pc}
       buffer->offset++;
   3c482:	3201      	adds	r2, #1
   3c484:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   3c486:	6882      	ldr	r2, [r0, #8]
   3c488:	4293      	cmp	r3, r2
   3c48a:	d903      	bls.n	3c494 <buffer_skip_whitespace+0x24>
   3c48c:	5c8c      	ldrb	r4, [r1, r2]
   3c48e:	2c20      	cmp	r4, #32
   3c490:	d9f7      	bls.n	3c482 <buffer_skip_whitespace+0x12>
   3c492:	e7f5      	b.n	3c480 <buffer_skip_whitespace+0x10>
    if (buffer->offset == buffer->length)
   3c494:	d1f4      	bne.n	3c480 <buffer_skip_whitespace+0x10>
        buffer->offset--;
   3c496:	3b01      	subs	r3, #1
   3c498:	6083      	str	r3, [r0, #8]
   3c49a:	e7f1      	b.n	3c480 <buffer_skip_whitespace+0x10>
        return NULL;
   3c49c:	4608      	mov	r0, r1
   3c49e:	e7ef      	b.n	3c480 <buffer_skip_whitespace+0x10>

0003c4a0 <get_array_item>:
    if (array == NULL)
   3c4a0:	b110      	cbz	r0, 3c4a8 <get_array_item+0x8>
    current_child = array->child;
   3c4a2:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   3c4a4:	b100      	cbz	r0, 3c4a8 <get_array_item+0x8>
   3c4a6:	b901      	cbnz	r1, 3c4aa <get_array_item+0xa>
}
   3c4a8:	4770      	bx	lr
        current_child = current_child->next;
   3c4aa:	6800      	ldr	r0, [r0, #0]
        index--;
   3c4ac:	3901      	subs	r1, #1
        current_child = current_child->next;
   3c4ae:	e7f9      	b.n	3c4a4 <get_array_item+0x4>

0003c4b0 <update_offset>:
{
   3c4b0:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   3c4b2:	4604      	mov	r4, r0
   3c4b4:	b140      	cbz	r0, 3c4c8 <update_offset+0x18>
   3c4b6:	6803      	ldr	r3, [r0, #0]
   3c4b8:	b133      	cbz	r3, 3c4c8 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   3c4ba:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   3c4bc:	4418      	add	r0, r3
   3c4be:	f7e0 fecd 	bl	1d25c <strlen>
   3c4c2:	68a3      	ldr	r3, [r4, #8]
   3c4c4:	4418      	add	r0, r3
   3c4c6:	60a0      	str	r0, [r4, #8]
}
   3c4c8:	bd10      	pop	{r4, pc}

0003c4ca <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   3c4ca:	b181      	cbz	r1, 3c4ee <add_item_to_array+0x24>
   3c4cc:	b138      	cbz	r0, 3c4de <add_item_to_array+0x14>
   3c4ce:	4281      	cmp	r1, r0
   3c4d0:	d00d      	beq.n	3c4ee <add_item_to_array+0x24>
    child = array->child;
   3c4d2:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   3c4d4:	b923      	cbnz	r3, 3c4e0 <add_item_to_array+0x16>
        array->child = item;
   3c4d6:	6081      	str	r1, [r0, #8]
        item->next = NULL;
   3c4d8:	e9c1 3100 	strd	r3, r1, [r1]
   3c4dc:	2001      	movs	r0, #1
}
   3c4de:	4770      	bx	lr
        if (child->prev)
   3c4e0:	685a      	ldr	r2, [r3, #4]
   3c4e2:	2a00      	cmp	r2, #0
   3c4e4:	d0fa      	beq.n	3c4dc <add_item_to_array+0x12>
    prev->next = item;
   3c4e6:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   3c4e8:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
   3c4ea:	6059      	str	r1, [r3, #4]
   3c4ec:	e7f6      	b.n	3c4dc <add_item_to_array+0x12>
        return false;
   3c4ee:	2000      	movs	r0, #0
   3c4f0:	4770      	bx	lr

0003c4f2 <ensure>:
{
   3c4f2:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   3c4f4:	4604      	mov	r4, r0
   3c4f6:	b1b8      	cbz	r0, 3c528 <ensure+0x36>
   3c4f8:	6805      	ldr	r5, [r0, #0]
   3c4fa:	b165      	cbz	r5, 3c516 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   3c4fc:	6842      	ldr	r2, [r0, #4]
   3c4fe:	b112      	cbz	r2, 3c506 <ensure+0x14>
   3c500:	6883      	ldr	r3, [r0, #8]
   3c502:	429a      	cmp	r2, r3
   3c504:	d910      	bls.n	3c528 <ensure+0x36>
    if (needed > INT_MAX)
   3c506:	2900      	cmp	r1, #0
   3c508:	db0e      	blt.n	3c528 <ensure+0x36>
    needed += p->offset + 1;
   3c50a:	68a0      	ldr	r0, [r4, #8]
   3c50c:	4401      	add	r1, r0
   3c50e:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   3c510:	429a      	cmp	r2, r3
   3c512:	d302      	bcc.n	3c51a <ensure+0x28>
        return p->buffer + p->offset;
   3c514:	4405      	add	r5, r0
}
   3c516:	4628      	mov	r0, r5
   3c518:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   3c51a:	6922      	ldr	r2, [r4, #16]
   3c51c:	b922      	cbnz	r2, 3c528 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   3c51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   3c522:	d303      	bcc.n	3c52c <ensure+0x3a>
        if (needed <= INT_MAX)
   3c524:	2b00      	cmp	r3, #0
   3c526:	da0f      	bge.n	3c548 <ensure+0x56>
        return NULL;
   3c528:	2500      	movs	r5, #0
   3c52a:	e7f4      	b.n	3c516 <ensure+0x24>
        newsize = needed + 1;
   3c52c:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   3c52e:	6a23      	ldr	r3, [r4, #32]
   3c530:	b16b      	cbz	r3, 3c54e <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   3c532:	4628      	mov	r0, r5
   3c534:	4631      	mov	r1, r6
   3c536:	4798      	blx	r3
        if (newbuffer == NULL)
   3c538:	4605      	mov	r5, r0
   3c53a:	b9b0      	cbnz	r0, 3c56a <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   3c53c:	69e3      	ldr	r3, [r4, #28]
   3c53e:	6820      	ldr	r0, [r4, #0]
   3c540:	4798      	blx	r3
            p->buffer = NULL;
   3c542:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   3c546:	e7e6      	b.n	3c516 <ensure+0x24>
            newsize = INT_MAX;
   3c548:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   3c54c:	e7ef      	b.n	3c52e <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   3c54e:	4630      	mov	r0, r6
   3c550:	69a3      	ldr	r3, [r4, #24]
   3c552:	4798      	blx	r3
        if (!newbuffer)
   3c554:	4605      	mov	r5, r0
   3c556:	2800      	cmp	r0, #0
   3c558:	d0f0      	beq.n	3c53c <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   3c55a:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3c55c:	6821      	ldr	r1, [r4, #0]
   3c55e:	3201      	adds	r2, #1
   3c560:	f001 fd03 	bl	3df6a <memcpy>
        p->hooks.deallocate(p->buffer);
   3c564:	69e3      	ldr	r3, [r4, #28]
   3c566:	6820      	ldr	r0, [r4, #0]
   3c568:	4798      	blx	r3
    return newbuffer + p->offset;
   3c56a:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   3c56c:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   3c570:	441d      	add	r5, r3
   3c572:	e7d0      	b.n	3c516 <ensure+0x24>

0003c574 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   3c574:	4603      	mov	r3, r0
   3c576:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   3c578:	2028      	movs	r0, #40	; 0x28
   3c57a:	4798      	blx	r3
    if (node)
   3c57c:	4604      	mov	r4, r0
   3c57e:	b118      	cbz	r0, 3c588 <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   3c580:	2228      	movs	r2, #40	; 0x28
   3c582:	2100      	movs	r1, #0
   3c584:	f001 fd11 	bl	3dfaa <memset>
}
   3c588:	4620      	mov	r0, r4
   3c58a:	bd10      	pop	{r4, pc}

0003c58c <cJSON_ParseWithOpts>:
{
   3c58c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3c58e:	460d      	mov	r5, r1
    if (NULL == value)
   3c590:	4604      	mov	r4, r0
{
   3c592:	9201      	str	r2, [sp, #4]
    if (NULL == value)
   3c594:	b150      	cbz	r0, 3c5ac <cJSON_ParseWithOpts+0x20>
    buffer_length = strlen(value) + sizeof("");
   3c596:	f7e0 fe61 	bl	1d25c <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   3c59a:	462a      	mov	r2, r5
   3c59c:	1c41      	adds	r1, r0, #1
   3c59e:	4620      	mov	r0, r4
   3c5a0:	9b01      	ldr	r3, [sp, #4]
}
   3c5a2:	b003      	add	sp, #12
   3c5a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   3c5a8:	f7f1 bb48 	b.w	2dc3c <cJSON_ParseWithLengthOpts>
}
   3c5ac:	b003      	add	sp, #12
   3c5ae:	bd30      	pop	{r4, r5, pc}

0003c5b0 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   3c5b0:	2200      	movs	r2, #0
   3c5b2:	4611      	mov	r1, r2
   3c5b4:	f7ff bfea 	b.w	3c58c <cJSON_ParseWithOpts>

0003c5b8 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   3c5b8:	2100      	movs	r1, #0
   3c5ba:	f7f1 ba69 	b.w	2da90 <print.constprop.0>

0003c5be <cJSON_GetArrayItem>:
    if (index < 0)
   3c5be:	2900      	cmp	r1, #0
   3c5c0:	db01      	blt.n	3c5c6 <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   3c5c2:	f7ff bf6d 	b.w	3c4a0 <get_array_item>
}
   3c5c6:	2000      	movs	r0, #0
   3c5c8:	4770      	bx	lr

0003c5ca <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   3c5ca:	2200      	movs	r2, #0
   3c5cc:	f7f0 bfaa 	b.w	2d524 <get_object_item>

0003c5d0 <cJSON_HasObjectItem>:
{
   3c5d0:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   3c5d2:	f7ff fffa 	bl	3c5ca <cJSON_GetObjectItem>
}
   3c5d6:	3800      	subs	r0, #0
   3c5d8:	bf18      	it	ne
   3c5da:	2001      	movne	r0, #1
   3c5dc:	bd08      	pop	{r3, pc}

0003c5de <cJSON_AddItemToArray>:
    return add_item_to_array(array, item);
   3c5de:	f7ff bf74 	b.w	3c4ca <add_item_to_array>

0003c5e2 <cJSON_AddItemToObject>:
    return add_item_to_object(object, string, item, &global_hooks, false);
   3c5e2:	2300      	movs	r3, #0
   3c5e4:	f7f1 bab8 	b.w	2db58 <add_item_to_object.constprop.0>

0003c5e8 <cJSON_DetachItemViaPointer>:
{
   3c5e8:	b510      	push	{r4, lr}
    if ((parent == NULL) || (item == NULL))
   3c5ea:	b190      	cbz	r0, 3c612 <cJSON_DetachItemViaPointer+0x2a>
   3c5ec:	b179      	cbz	r1, 3c60e <cJSON_DetachItemViaPointer+0x26>
    if (item != parent->child)
   3c5ee:	6883      	ldr	r3, [r0, #8]
   3c5f0:	428b      	cmp	r3, r1
        item->prev->next = item->next;
   3c5f2:	bf1c      	itt	ne
   3c5f4:	e9d1 4200 	ldrdne	r4, r2, [r1]
   3c5f8:	6014      	strne	r4, [r2, #0]
    if (item->next != NULL)
   3c5fa:	680a      	ldr	r2, [r1, #0]
   3c5fc:	b15a      	cbz	r2, 3c616 <cJSON_DetachItemViaPointer+0x2e>
        item->next->prev = item->prev;
   3c5fe:	684c      	ldr	r4, [r1, #4]
    if (item == parent->child)
   3c600:	428b      	cmp	r3, r1
        item->next->prev = item->prev;
   3c602:	6054      	str	r4, [r2, #4]
    if (item == parent->child)
   3c604:	d100      	bne.n	3c608 <cJSON_DetachItemViaPointer+0x20>
        parent->child = item->next;
   3c606:	6082      	str	r2, [r0, #8]
    item->prev = NULL;
   3c608:	2300      	movs	r3, #0
    item->next = NULL;
   3c60a:	e9c1 3300 	strd	r3, r3, [r1]
}
   3c60e:	4608      	mov	r0, r1
   3c610:	bd10      	pop	{r4, pc}
        return NULL;
   3c612:	4601      	mov	r1, r0
   3c614:	e7fb      	b.n	3c60e <cJSON_DetachItemViaPointer+0x26>
    if (item == parent->child)
   3c616:	428b      	cmp	r3, r1
   3c618:	d0f5      	beq.n	3c606 <cJSON_DetachItemViaPointer+0x1e>
        parent->child->prev = item->prev;
   3c61a:	684a      	ldr	r2, [r1, #4]
   3c61c:	605a      	str	r2, [r3, #4]
   3c61e:	e7f3      	b.n	3c608 <cJSON_DetachItemViaPointer+0x20>

0003c620 <cJSON_DetachItemFromObject>:
{
   3c620:	b510      	push	{r4, lr}
   3c622:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   3c624:	f7ff ffd1 	bl	3c5ca <cJSON_GetObjectItem>
   3c628:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   3c62a:	4620      	mov	r0, r4
}
   3c62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   3c630:	f7ff bfda 	b.w	3c5e8 <cJSON_DetachItemViaPointer>

0003c634 <cJSON_AddNumberToObject>:
{
   3c634:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3c636:	4605      	mov	r5, r0
   3c638:	9101      	str	r1, [sp, #4]
    cJSON *number_item = cJSON_CreateNumber(number);
   3c63a:	f7e1 f9d9 	bl	1d9f0 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3c63e:	2300      	movs	r3, #0
   3c640:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   3c642:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3c644:	9901      	ldr	r1, [sp, #4]
   3c646:	4628      	mov	r0, r5
   3c648:	f7f1 fa86 	bl	2db58 <add_item_to_object.constprop.0>
   3c64c:	4605      	mov	r5, r0
   3c64e:	b918      	cbnz	r0, 3c658 <cJSON_AddNumberToObject+0x24>
    cJSON_Delete(number_item);
   3c650:	4620      	mov	r0, r4
   3c652:	f7f1 facf 	bl	2dbf4 <cJSON_Delete>
    return NULL;
   3c656:	462c      	mov	r4, r5
}
   3c658:	4620      	mov	r0, r4
   3c65a:	b003      	add	sp, #12
   3c65c:	bd30      	pop	{r4, r5, pc}

0003c65e <cJSON_IsNumber>:
    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   3c65e:	b120      	cbz	r0, 3c66a <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   3c660:	7b00      	ldrb	r0, [r0, #12]
   3c662:	f1a0 0308 	sub.w	r3, r0, #8
   3c666:	4258      	negs	r0, r3
   3c668:	4158      	adcs	r0, r3
}
   3c66a:	4770      	bx	lr

0003c66c <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   3c66c:	b120      	cbz	r0, 3c678 <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   3c66e:	7b00      	ldrb	r0, [r0, #12]
   3c670:	f1a0 0310 	sub.w	r3, r0, #16
   3c674:	4258      	negs	r0, r3
   3c676:	4158      	adcs	r0, r3
}
   3c678:	4770      	bx	lr

0003c67a <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
    if (item == NULL)
   3c67a:	b120      	cbz	r0, 3c686 <cJSON_IsArray+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Array;
   3c67c:	7b00      	ldrb	r0, [r0, #12]
   3c67e:	f1a0 0320 	sub.w	r3, r0, #32
   3c682:	4258      	negs	r0, r3
   3c684:	4158      	adcs	r0, r3
}
   3c686:	4770      	bx	lr

0003c688 <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   3c688:	f001 bc2c 	b.w	3dee4 <k_free>

0003c68c <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   3c68c:	f001 bc31 	b.w	3def2 <k_malloc>

0003c690 <cJSON_FreeString>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   3c690:	f001 bc28 	b.w	3dee4 <k_free>

0003c694 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   3c694:	4700      	bx	r0

0003c696 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   3c696:	f001 bbb5 	b.w	3de04 <z_impl_k_busy_wait>

0003c69a <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   3c69a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   3c69e:	4770      	bx	lr

0003c6a0 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3c6a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   3c6a4:	4770      	bx	lr

0003c6a6 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3c6a6:	f44f 7080 	mov.w	r0, #256	; 0x100
   3c6aa:	4770      	bx	lr

0003c6ac <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   3c6ac:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   3c6ae:	2402      	movs	r4, #2
    p_cb->flags = flags;
   3c6b0:	724a      	strb	r2, [r1, #9]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   3c6b2:	720c      	strb	r4, [r1, #8]
    if (p_cb->handler)
   3c6b4:	6809      	ldr	r1, [r1, #0]
   3c6b6:	b171      	cbz	r1, 3c6d6 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   3c6b8:	f012 0f04 	tst.w	r2, #4
   3c6bc:	bf0c      	ite	eq
   3c6be:	2182      	moveq	r1, #130	; 0x82
   3c6c0:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   3c6c2:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   3c6c4:	bf48      	it	mi
   3c6c6:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   3c6ca:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   3c6cc:	bf48      	it	mi
   3c6ce:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   3c6d2:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   3c6d6:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c6d8:	f04f 0100 	mov.w	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c6dc:	bf58      	it	pl
   3c6de:	2201      	movpl	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c6e0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   3c6e4:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c6e8:	bf56      	itet	pl
   3c6ea:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   3c6ec:	18c0      	addmi	r0, r0, r3
    return 0;
   3c6ee:	4608      	movpl	r0, r1
}
   3c6f0:	bd10      	pop	{r4, pc}

0003c6f2 <nrf_gpio_pin_clear>:
{
   3c6f2:	b507      	push	{r0, r1, r2, lr}
   3c6f4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3c6f6:	a801      	add	r0, sp, #4
   3c6f8:	f7f2 f8f8 	bl	2e8ec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3c6fc:	2301      	movs	r3, #1
   3c6fe:	9a01      	ldr	r2, [sp, #4]
   3c700:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   3c702:	60c3      	str	r3, [r0, #12]
}
   3c704:	b003      	add	sp, #12
   3c706:	f85d fb04 	ldr.w	pc, [sp], #4

0003c70a <nrf_gpio_pin_set>:
{
   3c70a:	b507      	push	{r0, r1, r2, lr}
   3c70c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3c70e:	a801      	add	r0, sp, #4
   3c710:	f7f2 f8ec 	bl	2e8ec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3c714:	2301      	movs	r3, #1
   3c716:	9a01      	ldr	r2, [sp, #4]
   3c718:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3c71a:	6083      	str	r3, [r0, #8]
}
   3c71c:	b003      	add	sp, #12
   3c71e:	f85d fb04 	ldr.w	pc, [sp], #4

0003c722 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   3c722:	7b0b      	ldrb	r3, [r1, #12]
   3c724:	2b03      	cmp	r3, #3
   3c726:	d82a      	bhi.n	3c77e <xfer_completeness_check+0x5c>
   3c728:	e8df f003 	tbb	[pc, r3]
   3c72c:	021a2622 	.word	0x021a2622
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3c730:	688b      	ldr	r3, [r1, #8]
   3c732:	035a      	lsls	r2, r3, #13
   3c734:	d504      	bpl.n	3c740 <xfer_completeness_check+0x1e>
    return p_reg->TXD.AMOUNT;
   3c736:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
   3c73a:	690a      	ldr	r2, [r1, #16]
   3c73c:	429a      	cmp	r2, r3
   3c73e:	d107      	bne.n	3c750 <xfer_completeness_check+0x2e>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3c740:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   3c742:	035b      	lsls	r3, r3, #13
   3c744:	d41b      	bmi.n	3c77e <xfer_completeness_check+0x5c>
   3c746:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3c74a:	694a      	ldr	r2, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3c74c:	429a      	cmp	r2, r3
   3c74e:	d016      	beq.n	3c77e <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3c750:	2300      	movs	r3, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3c752:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3c754:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3c758:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
   3c75c:	4618      	mov	r0, r3
   3c75e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   3c760:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3c764:	690a      	ldr	r2, [r1, #16]
   3c766:	429a      	cmp	r2, r3
   3c768:	d1f2      	bne.n	3c750 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
   3c76a:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   3c76e:	e7ec      	b.n	3c74a <xfer_completeness_check+0x28>
    return p_reg->TXD.AMOUNT;
   3c770:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3c774:	690a      	ldr	r2, [r1, #16]
   3c776:	e7e9      	b.n	3c74c <xfer_completeness_check+0x2a>
    return p_reg->RXD.AMOUNT;
   3c778:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   3c77c:	e7fa      	b.n	3c774 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   3c77e:	2001      	movs	r0, #1
}
   3c780:	4770      	bx	lr

0003c782 <nrf_gpio_pin_set>:
{
   3c782:	b507      	push	{r0, r1, r2, lr}
   3c784:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3c786:	a801      	add	r0, sp, #4
   3c788:	f7f2 ffd6 	bl	2f738 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3c78c:	2301      	movs	r3, #1
   3c78e:	9a01      	ldr	r2, [sp, #4]
   3c790:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3c792:	6083      	str	r3, [r0, #8]
}
   3c794:	b003      	add	sp, #12
   3c796:	f85d fb04 	ldr.w	pc, [sp], #4

0003c79a <rpc_handle_ctrl_message>:
   3c79a:	2902      	cmp	r1, #2
   3c79c:	b510      	push	{r4, lr}
   3c79e:	4604      	mov	r4, r0
   3c7a0:	d005      	beq.n	3c7ae <rpc_handle_ctrl_message+0x14>
   3c7a2:	2904      	cmp	r1, #4
   3c7a4:	d001      	beq.n	3c7aa <rpc_handle_ctrl_message+0x10>
   3c7a6:	2901      	cmp	r1, #1
   3c7a8:	d107      	bne.n	3c7ba <rpc_handle_ctrl_message+0x20>
   3c7aa:	2000      	movs	r0, #0
   3c7ac:	bd10      	pop	{r4, pc}
   3c7ae:	6880      	ldr	r0, [r0, #8]
   3c7b0:	2800      	cmp	r0, #0
   3c7b2:	d0fa      	beq.n	3c7aa <rpc_handle_ctrl_message+0x10>
   3c7b4:	f000 f83b 	bl	3c82e <rpc_transport_data_free>
   3c7b8:	e7f7      	b.n	3c7aa <rpc_handle_ctrl_message+0x10>
   3c7ba:	6880      	ldr	r0, [r0, #8]
   3c7bc:	b108      	cbz	r0, 3c7c2 <rpc_handle_ctrl_message+0x28>
   3c7be:	f000 f836 	bl	3c82e <rpc_transport_data_free>
   3c7c2:	4620      	mov	r0, r4
   3c7c4:	f000 f82f 	bl	3c826 <rpc_transport_msg_free>
   3c7c8:	e7ef      	b.n	3c7aa <rpc_handle_ctrl_message+0x10>

0003c7ca <rpc_message_send>:
   3c7ca:	684b      	ldr	r3, [r1, #4]
   3c7cc:	8008      	strh	r0, [r1, #0]
   3c7ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3c7d2:	f043 0302 	orr.w	r3, r3, #2
   3c7d6:	4608      	mov	r0, r1
   3c7d8:	604b      	str	r3, [r1, #4]
   3c7da:	f000 b82a 	b.w	3c832 <rpc_transport_data_msg_send>

0003c7de <rpc_message_alloc>:
   3c7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c7e0:	2300      	movs	r3, #0
   3c7e2:	4607      	mov	r7, r0
   3c7e4:	4616      	mov	r6, r2
   3c7e6:	460d      	mov	r5, r1
   3c7e8:	6013      	str	r3, [r2, #0]
   3c7ea:	b131      	cbz	r1, 3c7fa <rpc_message_alloc+0x1c>
   3c7ec:	4608      	mov	r0, r1
   3c7ee:	f000 f81c 	bl	3c82a <rpc_transport_data_alloc>
   3c7f2:	4604      	mov	r4, r0
   3c7f4:	b910      	cbnz	r0, 3c7fc <rpc_message_alloc+0x1e>
   3c7f6:	200c      	movs	r0, #12
   3c7f8:	e008      	b.n	3c80c <rpc_message_alloc+0x2e>
   3c7fa:	460c      	mov	r4, r1
   3c7fc:	f000 f811 	bl	3c822 <rpc_transport_data_msg_alloc>
   3c800:	b128      	cbz	r0, 3c80e <rpc_message_alloc+0x30>
   3c802:	60c5      	str	r5, [r0, #12]
   3c804:	6084      	str	r4, [r0, #8]
   3c806:	8007      	strh	r7, [r0, #0]
   3c808:	6030      	str	r0, [r6, #0]
   3c80a:	2000      	movs	r0, #0
   3c80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c80e:	2c00      	cmp	r4, #0
   3c810:	d0f1      	beq.n	3c7f6 <rpc_message_alloc+0x18>
   3c812:	4620      	mov	r0, r4
   3c814:	f000 f80b 	bl	3c82e <rpc_transport_data_free>
   3c818:	e7ed      	b.n	3c7f6 <rpc_message_alloc+0x18>

0003c81a <rpc_message_free>:
   3c81a:	f000 b804 	b.w	3c826 <rpc_transport_msg_free>

0003c81e <rpc_message_data_free>:
   3c81e:	f000 b806 	b.w	3c82e <rpc_transport_data_free>

0003c822 <rpc_transport_data_msg_alloc>:
   3c822:	f7f3 b9a5 	b.w	2fb70 <rpc_transport_ipc_data_msg_alloc>

0003c826 <rpc_transport_msg_free>:
   3c826:	f7f3 b9db 	b.w	2fbe0 <rpc_transport_ipc_msg_free>

0003c82a <rpc_transport_data_alloc>:
   3c82a:	f7f3 b9bf 	b.w	2fbac <rpc_transport_ipc_data_alloc>

0003c82e <rpc_transport_data_free>:
   3c82e:	f7f3 b9fd 	b.w	2fc2c <rpc_transport_ipc_data_free>

0003c832 <rpc_transport_data_msg_send>:
   3c832:	f7f3 b949 	b.w	2fac8 <rpc_transport_ipc_data_msg_send>

0003c836 <trace_write>:
   3c836:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   3c83a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3c83c:	f8ad 3000 	strh.w	r3, [sp]
   3c840:	7803      	ldrb	r3, [r0, #0]
   3c842:	4604      	mov	r4, r0
   3c844:	f88d 3004 	strb.w	r3, [sp, #4]
   3c848:	6843      	ldr	r3, [r0, #4]
   3c84a:	6882      	ldr	r2, [r0, #8]
   3c84c:	2105      	movs	r1, #5
   3c84e:	4293      	cmp	r3, r2
   3c850:	bf96      	itet	ls
   3c852:	6906      	ldrls	r6, [r0, #16]
   3c854:	1a9e      	subhi	r6, r3, r2
   3c856:	1ab6      	subls	r6, r6, r2
   3c858:	4293      	cmp	r3, r2
   3c85a:	bf2c      	ite	cs
   3c85c:	2500      	movcs	r5, #0
   3c85e:	68c5      	ldrcc	r5, [r0, #12]
   3c860:	b2b6      	uxth	r6, r6
   3c862:	bf38      	it	cc
   3c864:	1b5b      	subcc	r3, r3, r5
   3c866:	4668      	mov	r0, sp
   3c868:	bf38      	it	cc
   3c86a:	b29d      	uxthcc	r5, r3
   3c86c:	f8ad 6002 	strh.w	r6, [sp, #2]
   3c870:	f7ff f90f 	bl	3ba92 <nrf_modem_os_trace_put>
   3c874:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3c878:	68a0      	ldr	r0, [r4, #8]
   3c87a:	b289      	uxth	r1, r1
   3c87c:	f7ff f909 	bl	3ba92 <nrf_modem_os_trace_put>
   3c880:	68a3      	ldr	r3, [r4, #8]
   3c882:	441e      	add	r6, r3
   3c884:	6923      	ldr	r3, [r4, #16]
   3c886:	60a6      	str	r6, [r4, #8]
   3c888:	429e      	cmp	r6, r3
   3c88a:	bf04      	itt	eq
   3c88c:	68e3      	ldreq	r3, [r4, #12]
   3c88e:	60a3      	streq	r3, [r4, #8]
   3c890:	b18d      	cbz	r5, 3c8b6 <trace_write+0x80>
   3c892:	2105      	movs	r1, #5
   3c894:	4668      	mov	r0, sp
   3c896:	f8ad 5002 	strh.w	r5, [sp, #2]
   3c89a:	f7ff f8fa 	bl	3ba92 <nrf_modem_os_trace_put>
   3c89e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3c8a2:	68e0      	ldr	r0, [r4, #12]
   3c8a4:	b289      	uxth	r1, r1
   3c8a6:	f7ff f8f4 	bl	3ba92 <nrf_modem_os_trace_put>
   3c8aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   3c8ae:	68e2      	ldr	r2, [r4, #12]
   3c8b0:	fa12 f383 	uxtah	r3, r2, r3
   3c8b4:	60a3      	str	r3, [r4, #8]
   3c8b6:	b002      	add	sp, #8
   3c8b8:	bd70      	pop	{r4, r5, r6, pc}

0003c8ba <rpc_transport_ipc_msg_alloc>:
   3c8ba:	2300      	movs	r3, #0
   3c8bc:	b570      	push	{r4, r5, r6, lr}
   3c8be:	6806      	ldr	r6, [r0, #0]
   3c8c0:	429e      	cmp	r6, r3
   3c8c2:	d101      	bne.n	3c8c8 <rpc_transport_ipc_msg_alloc+0xe>
   3c8c4:	2000      	movs	r0, #0
   3c8c6:	e00d      	b.n	3c8e4 <rpc_transport_ipc_msg_alloc+0x2a>
   3c8c8:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
   3c8cc:	6865      	ldr	r5, [r4, #4]
   3c8ce:	b2ed      	uxtb	r5, r5
   3c8d0:	2d03      	cmp	r5, #3
   3c8d2:	d108      	bne.n	3c8e6 <rpc_transport_ipc_msg_alloc+0x2c>
   3c8d4:	eb01 1083 	add.w	r0, r1, r3, lsl #6
   3c8d8:	60a0      	str	r0, [r4, #8]
   3c8da:	6863      	ldr	r3, [r4, #4]
   3c8dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3c8e0:	6063      	str	r3, [r4, #4]
   3c8e2:	7102      	strb	r2, [r0, #4]
   3c8e4:	bd70      	pop	{r4, r5, r6, pc}
   3c8e6:	b915      	cbnz	r5, 3c8ee <rpc_transport_ipc_msg_alloc+0x34>
   3c8e8:	68a5      	ldr	r5, [r4, #8]
   3c8ea:	2d00      	cmp	r5, #0
   3c8ec:	d0f2      	beq.n	3c8d4 <rpc_transport_ipc_msg_alloc+0x1a>
   3c8ee:	3301      	adds	r3, #1
   3c8f0:	e7e6      	b.n	3c8c0 <rpc_transport_ipc_msg_alloc+0x6>

0003c8f2 <at_client_evt_handler>:
   3c8f2:	b120      	cbz	r0, 3c8fe <at_client_evt_handler+0xc>
   3c8f4:	f850 1b08 	ldr.w	r1, [r0], #8
   3c8f8:	0c09      	lsrs	r1, r1, #16
   3c8fa:	f000 be43 	b.w	3d584 <rpc_at_event_handler>
   3c8fe:	4770      	bx	lr

0003c900 <rpc_at_client_request_alloc>:
   3c900:	2300      	movs	r3, #0
   3c902:	b513      	push	{r0, r1, r4, lr}
   3c904:	4604      	mov	r4, r0
   3c906:	aa01      	add	r2, sp, #4
   3c908:	2003      	movs	r0, #3
   3c90a:	9301      	str	r3, [sp, #4]
   3c90c:	f7ff ff67 	bl	3c7de <rpc_message_alloc>
   3c910:	b918      	cbnz	r0, 3c91a <rpc_at_client_request_alloc+0x1a>
   3c912:	9b01      	ldr	r3, [sp, #4]
   3c914:	b10b      	cbz	r3, 3c91a <rpc_at_client_request_alloc+0x1a>
   3c916:	3308      	adds	r3, #8
   3c918:	6023      	str	r3, [r4, #0]
   3c91a:	b002      	add	sp, #8
   3c91c:	bd10      	pop	{r4, pc}

0003c91e <rpc_at_client_request_send>:
   3c91e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3c922:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   3c926:	4601      	mov	r1, r0
   3c928:	2003      	movs	r0, #3
   3c92a:	f841 2d08 	str.w	r2, [r1, #-8]!
   3c92e:	f7ff bf4c 	b.w	3c7ca <rpc_message_send>

0003c932 <rpc_at_client_message_free>:
   3c932:	3808      	subs	r0, #8
   3c934:	f7ff bf71 	b.w	3c81a <rpc_message_free>

0003c938 <rpc_at_client_data_free>:
   3c938:	f7ff bf71 	b.w	3c81e <rpc_message_data_free>

0003c93c <ip_client_event_handler>:
   3c93c:	f850 1b08 	ldr.w	r1, [r0], #8
   3c940:	0c09      	lsrs	r1, r1, #16
   3c942:	f7f4 ba6f 	b.w	30e24 <rpc_ip_event_handler>

0003c946 <rpc_ip_client_request_alloc>:
   3c946:	2300      	movs	r3, #0
   3c948:	b513      	push	{r0, r1, r4, lr}
   3c94a:	4604      	mov	r4, r0
   3c94c:	aa01      	add	r2, sp, #4
   3c94e:	2004      	movs	r0, #4
   3c950:	9301      	str	r3, [sp, #4]
   3c952:	f7ff ff44 	bl	3c7de <rpc_message_alloc>
   3c956:	b918      	cbnz	r0, 3c960 <rpc_ip_client_request_alloc+0x1a>
   3c958:	9b01      	ldr	r3, [sp, #4]
   3c95a:	b10b      	cbz	r3, 3c960 <rpc_ip_client_request_alloc+0x1a>
   3c95c:	3308      	adds	r3, #8
   3c95e:	6023      	str	r3, [r4, #0]
   3c960:	b002      	add	sp, #8
   3c962:	bd10      	pop	{r4, pc}

0003c964 <rpc_ip_client_request_send>:
   3c964:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   3c968:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   3c96c:	d109      	bne.n	3c982 <rpc_ip_client_request_send+0x1e>
   3c96e:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   3c972:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3c976:	4601      	mov	r1, r0
   3c978:	2004      	movs	r0, #4
   3c97a:	f841 3d08 	str.w	r3, [r1, #-8]!
   3c97e:	f7ff bf24 	b.w	3c7ca <rpc_message_send>
   3c982:	2001      	movs	r0, #1
   3c984:	4770      	bx	lr

0003c986 <rpc_ip_client_message_free>:
   3c986:	3808      	subs	r0, #8
   3c988:	f7ff bf47 	b.w	3c81a <rpc_message_free>

0003c98c <rpc_ip_client_data_free>:
   3c98c:	f7ff bf47 	b.w	3c81e <rpc_message_data_free>

0003c990 <dfu_client_event_handler>:
   3c990:	f850 1b08 	ldr.w	r1, [r0], #8
   3c994:	0c09      	lsrs	r1, r1, #16
   3c996:	f7f5 b943 	b.w	31c20 <rpc_dfu_event_handler>

0003c99a <rpc_dfu_client_request_alloc>:
   3c99a:	2300      	movs	r3, #0
   3c99c:	b513      	push	{r0, r1, r4, lr}
   3c99e:	4604      	mov	r4, r0
   3c9a0:	aa01      	add	r2, sp, #4
   3c9a2:	2006      	movs	r0, #6
   3c9a4:	9301      	str	r3, [sp, #4]
   3c9a6:	f7ff ff1a 	bl	3c7de <rpc_message_alloc>
   3c9aa:	b918      	cbnz	r0, 3c9b4 <rpc_dfu_client_request_alloc+0x1a>
   3c9ac:	9b01      	ldr	r3, [sp, #4]
   3c9ae:	b10b      	cbz	r3, 3c9b4 <rpc_dfu_client_request_alloc+0x1a>
   3c9b0:	3308      	adds	r3, #8
   3c9b2:	6023      	str	r3, [r4, #0]
   3c9b4:	b002      	add	sp, #8
   3c9b6:	bd10      	pop	{r4, pc}

0003c9b8 <rpc_dfu_client_request_send>:
   3c9b8:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   3c9bc:	d109      	bne.n	3c9d2 <rpc_dfu_client_request_send+0x1a>
   3c9be:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   3c9c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3c9c6:	4601      	mov	r1, r0
   3c9c8:	2006      	movs	r0, #6
   3c9ca:	f841 3d08 	str.w	r3, [r1, #-8]!
   3c9ce:	f7ff befc 	b.w	3c7ca <rpc_message_send>
   3c9d2:	2001      	movs	r0, #1
   3c9d4:	4770      	bx	lr

0003c9d6 <rpc_dfu_client_message_free>:
   3c9d6:	3808      	subs	r0, #8
   3c9d8:	f7ff bf1f 	b.w	3c81a <rpc_message_free>

0003c9dc <rpc_dfu_client_data_free>:
   3c9dc:	f7ff bf1f 	b.w	3c81e <rpc_message_data_free>

0003c9e0 <rpc_gnss_client_request_alloc>:
   3c9e0:	2300      	movs	r3, #0
   3c9e2:	b513      	push	{r0, r1, r4, lr}
   3c9e4:	4604      	mov	r4, r0
   3c9e6:	aa01      	add	r2, sp, #4
   3c9e8:	2007      	movs	r0, #7
   3c9ea:	9301      	str	r3, [sp, #4]
   3c9ec:	f7ff fef7 	bl	3c7de <rpc_message_alloc>
   3c9f0:	b918      	cbnz	r0, 3c9fa <rpc_gnss_client_request_alloc+0x1a>
   3c9f2:	9b01      	ldr	r3, [sp, #4]
   3c9f4:	b10b      	cbz	r3, 3c9fa <rpc_gnss_client_request_alloc+0x1a>
   3c9f6:	3308      	adds	r3, #8
   3c9f8:	6023      	str	r3, [r4, #0]
   3c9fa:	b002      	add	sp, #8
   3c9fc:	bd10      	pop	{r4, pc}

0003c9fe <rpc_gnss_client_request_send>:
   3c9fe:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3ca02:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   3ca06:	4601      	mov	r1, r0
   3ca08:	2007      	movs	r0, #7
   3ca0a:	f841 2d08 	str.w	r2, [r1, #-8]!
   3ca0e:	f7ff bedc 	b.w	3c7ca <rpc_message_send>

0003ca12 <rpc_gnss_client_message_free>:
   3ca12:	3808      	subs	r0, #8
   3ca14:	f7ff bf01 	b.w	3c81a <rpc_message_free>

0003ca18 <rpc_gnss_client_data_free>:
   3ca18:	f7ff bf01 	b.w	3c81e <rpc_message_data_free>

0003ca1c <rpc_gnss_serialize_utc>:
   3ca1c:	b1c0      	cbz	r0, 3ca50 <rpc_gnss_serialize_utc+0x34>
   3ca1e:	b1b9      	cbz	r1, 3ca50 <rpc_gnss_serialize_utc+0x34>
   3ca20:	2301      	movs	r3, #1
   3ca22:	700b      	strb	r3, [r1, #0]
   3ca24:	2300      	movs	r3, #0
   3ca26:	704b      	strb	r3, [r1, #1]
   3ca28:	6843      	ldr	r3, [r0, #4]
   3ca2a:	f8c1 3006 	str.w	r3, [r1, #6]
   3ca2e:	6803      	ldr	r3, [r0, #0]
   3ca30:	f8c1 3002 	str.w	r3, [r1, #2]
   3ca34:	7a83      	ldrb	r3, [r0, #10]
   3ca36:	730b      	strb	r3, [r1, #12]
   3ca38:	7b43      	ldrb	r3, [r0, #13]
   3ca3a:	73cb      	strb	r3, [r1, #15]
   3ca3c:	7b03      	ldrb	r3, [r0, #12]
   3ca3e:	738b      	strb	r3, [r1, #14]
   3ca40:	7a03      	ldrb	r3, [r0, #8]
   3ca42:	728b      	strb	r3, [r1, #10]
   3ca44:	7ac3      	ldrb	r3, [r0, #11]
   3ca46:	734b      	strb	r3, [r1, #13]
   3ca48:	7a43      	ldrb	r3, [r0, #9]
   3ca4a:	2010      	movs	r0, #16
   3ca4c:	72cb      	strb	r3, [r1, #11]
   3ca4e:	4770      	bx	lr
   3ca50:	f04f 30ff 	mov.w	r0, #4294967295
   3ca54:	4770      	bx	lr

0003ca56 <rpc_gnss_serialize_ephe>:
   3ca56:	2800      	cmp	r0, #0
   3ca58:	d044      	beq.n	3cae4 <rpc_gnss_serialize_ephe+0x8e>
   3ca5a:	2900      	cmp	r1, #0
   3ca5c:	d042      	beq.n	3cae4 <rpc_gnss_serialize_ephe+0x8e>
   3ca5e:	2302      	movs	r3, #2
   3ca60:	700b      	strb	r3, [r1, #0]
   3ca62:	2300      	movs	r3, #0
   3ca64:	704b      	strb	r3, [r1, #1]
   3ca66:	68c3      	ldr	r3, [r0, #12]
   3ca68:	f8c1 300b 	str.w	r3, [r1, #11]
   3ca6c:	8903      	ldrh	r3, [r0, #8]
   3ca6e:	f8a1 3009 	strh.w	r3, [r1, #9]
   3ca72:	7983      	ldrb	r3, [r0, #6]
   3ca74:	720b      	strb	r3, [r1, #8]
   3ca76:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   3ca7a:	878b      	strh	r3, [r1, #60]	; 0x3c
   3ca7c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   3ca7e:	86cb      	strh	r3, [r1, #54]	; 0x36
   3ca80:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   3ca84:	874b      	strh	r3, [r1, #58]	; 0x3a
   3ca86:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   3ca88:	868b      	strh	r3, [r1, #52]	; 0x34
   3ca8a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   3ca8e:	87cb      	strh	r3, [r1, #62]	; 0x3e
   3ca90:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   3ca94:	870b      	strh	r3, [r1, #56]	; 0x38
   3ca96:	8b83      	ldrh	r3, [r0, #28]
   3ca98:	830b      	strh	r3, [r1, #24]
   3ca9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   3ca9c:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   3caa0:	7c83      	ldrb	r3, [r0, #18]
   3caa2:	744b      	strb	r3, [r1, #17]
   3caa4:	7843      	ldrb	r3, [r0, #1]
   3caa6:	70cb      	strb	r3, [r1, #3]
   3caa8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   3caaa:	62cb      	str	r3, [r1, #44]	; 0x2c
   3caac:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   3caae:	84cb      	strh	r3, [r1, #38]	; 0x26
   3cab0:	8843      	ldrh	r3, [r0, #2]
   3cab2:	808b      	strh	r3, [r1, #4]
   3cab4:	6a03      	ldr	r3, [r0, #32]
   3cab6:	f8c1 301a 	str.w	r3, [r1, #26]
   3caba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   3cabc:	630b      	str	r3, [r1, #48]	; 0x30
   3cabe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   3cac0:	f8c1 301e 	str.w	r3, [r1, #30]
   3cac4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   3cac6:	628b      	str	r3, [r1, #40]	; 0x28
   3cac8:	7803      	ldrb	r3, [r0, #0]
   3caca:	708b      	strb	r3, [r1, #2]
   3cacc:	7c03      	ldrb	r3, [r0, #16]
   3cace:	73cb      	strb	r3, [r1, #15]
   3cad0:	8883      	ldrh	r3, [r0, #4]
   3cad2:	80cb      	strh	r3, [r1, #6]
   3cad4:	8a83      	ldrh	r3, [r0, #20]
   3cad6:	824b      	strh	r3, [r1, #18]
   3cad8:	7c43      	ldrb	r3, [r0, #17]
   3cada:	740b      	strb	r3, [r1, #16]
   3cadc:	6983      	ldr	r3, [r0, #24]
   3cade:	2040      	movs	r0, #64	; 0x40
   3cae0:	614b      	str	r3, [r1, #20]
   3cae2:	4770      	bx	lr
   3cae4:	f04f 30ff 	mov.w	r0, #4294967295
   3cae8:	4770      	bx	lr

0003caea <rpc_gnss_serialize_alm>:
   3caea:	b340      	cbz	r0, 3cb3e <rpc_gnss_serialize_alm+0x54>
   3caec:	b339      	cbz	r1, 3cb3e <rpc_gnss_serialize_alm+0x54>
   3caee:	2303      	movs	r3, #3
   3caf0:	700b      	strb	r3, [r1, #0]
   3caf2:	2300      	movs	r3, #0
   3caf4:	704b      	strb	r3, [r1, #1]
   3caf6:	8b83      	ldrh	r3, [r0, #28]
   3caf8:	f8a1 301d 	strh.w	r3, [r1, #29]
   3cafc:	8bc3      	ldrh	r3, [r0, #30]
   3cafe:	f8a1 301f 	strh.w	r3, [r1, #31]
   3cb02:	88c3      	ldrh	r3, [r0, #6]
   3cb04:	810b      	strh	r3, [r1, #8]
   3cb06:	8883      	ldrh	r3, [r0, #4]
   3cb08:	80cb      	strh	r3, [r1, #6]
   3cb0a:	78c3      	ldrb	r3, [r0, #3]
   3cb0c:	714b      	strb	r3, [r1, #5]
   3cb0e:	6983      	ldr	r3, [r0, #24]
   3cb10:	f8c1 3019 	str.w	r3, [r1, #25]
   3cb14:	6903      	ldr	r3, [r0, #16]
   3cb16:	f8c1 3011 	str.w	r3, [r1, #17]
   3cb1a:	8903      	ldrh	r3, [r0, #8]
   3cb1c:	814b      	strh	r3, [r1, #10]
   3cb1e:	68c3      	ldr	r3, [r0, #12]
   3cb20:	f8c1 300d 	str.w	r3, [r1, #13]
   3cb24:	7a83      	ldrb	r3, [r0, #10]
   3cb26:	730b      	strb	r3, [r1, #12]
   3cb28:	7803      	ldrb	r3, [r0, #0]
   3cb2a:	708b      	strb	r3, [r1, #2]
   3cb2c:	7883      	ldrb	r3, [r0, #2]
   3cb2e:	710b      	strb	r3, [r1, #4]
   3cb30:	6943      	ldr	r3, [r0, #20]
   3cb32:	f8c1 3015 	str.w	r3, [r1, #21]
   3cb36:	7843      	ldrb	r3, [r0, #1]
   3cb38:	2021      	movs	r0, #33	; 0x21
   3cb3a:	70cb      	strb	r3, [r1, #3]
   3cb3c:	4770      	bx	lr
   3cb3e:	f04f 30ff 	mov.w	r0, #4294967295
   3cb42:	4770      	bx	lr

0003cb44 <rpc_gnss_serialize_klob>:
   3cb44:	b1b0      	cbz	r0, 3cb74 <rpc_gnss_serialize_klob+0x30>
   3cb46:	b1a9      	cbz	r1, 3cb74 <rpc_gnss_serialize_klob+0x30>
   3cb48:	2304      	movs	r3, #4
   3cb4a:	700b      	strb	r3, [r1, #0]
   3cb4c:	2300      	movs	r3, #0
   3cb4e:	704b      	strb	r3, [r1, #1]
   3cb50:	7803      	ldrb	r3, [r0, #0]
   3cb52:	708b      	strb	r3, [r1, #2]
   3cb54:	7843      	ldrb	r3, [r0, #1]
   3cb56:	70cb      	strb	r3, [r1, #3]
   3cb58:	7883      	ldrb	r3, [r0, #2]
   3cb5a:	710b      	strb	r3, [r1, #4]
   3cb5c:	78c3      	ldrb	r3, [r0, #3]
   3cb5e:	714b      	strb	r3, [r1, #5]
   3cb60:	7903      	ldrb	r3, [r0, #4]
   3cb62:	718b      	strb	r3, [r1, #6]
   3cb64:	7943      	ldrb	r3, [r0, #5]
   3cb66:	71cb      	strb	r3, [r1, #7]
   3cb68:	7983      	ldrb	r3, [r0, #6]
   3cb6a:	720b      	strb	r3, [r1, #8]
   3cb6c:	79c3      	ldrb	r3, [r0, #7]
   3cb6e:	200a      	movs	r0, #10
   3cb70:	724b      	strb	r3, [r1, #9]
   3cb72:	4770      	bx	lr
   3cb74:	f04f 30ff 	mov.w	r0, #4294967295
   3cb78:	4770      	bx	lr

0003cb7a <rpc_gnss_serialize_nequick>:
   3cb7a:	b180      	cbz	r0, 3cb9e <rpc_gnss_serialize_nequick+0x24>
   3cb7c:	b179      	cbz	r1, 3cb9e <rpc_gnss_serialize_nequick+0x24>
   3cb7e:	2305      	movs	r3, #5
   3cb80:	700b      	strb	r3, [r1, #0]
   3cb82:	2300      	movs	r3, #0
   3cb84:	704b      	strb	r3, [r1, #1]
   3cb86:	8803      	ldrh	r3, [r0, #0]
   3cb88:	804b      	strh	r3, [r1, #2]
   3cb8a:	8843      	ldrh	r3, [r0, #2]
   3cb8c:	808b      	strh	r3, [r1, #4]
   3cb8e:	8883      	ldrh	r3, [r0, #4]
   3cb90:	80cb      	strh	r3, [r1, #6]
   3cb92:	7983      	ldrb	r3, [r0, #6]
   3cb94:	720b      	strb	r3, [r1, #8]
   3cb96:	79c3      	ldrb	r3, [r0, #7]
   3cb98:	200a      	movs	r0, #10
   3cb9a:	724b      	strb	r3, [r1, #9]
   3cb9c:	4770      	bx	lr
   3cb9e:	f04f 30ff 	mov.w	r0, #4294967295
   3cba2:	4770      	bx	lr

0003cba4 <rpc_gnss_serialize_time_and_sv_tow>:
   3cba4:	b570      	push	{r4, r5, r6, lr}
   3cba6:	b1e8      	cbz	r0, 3cbe4 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   3cba8:	b1e1      	cbz	r1, 3cbe4 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   3cbaa:	2206      	movs	r2, #6
   3cbac:	2300      	movs	r3, #0
   3cbae:	700a      	strb	r2, [r1, #0]
   3cbb0:	8802      	ldrh	r2, [r0, #0]
   3cbb2:	704b      	strb	r3, [r1, #1]
   3cbb4:	804a      	strh	r2, [r1, #2]
   3cbb6:	68c2      	ldr	r2, [r0, #12]
   3cbb8:	f101 0410 	add.w	r4, r1, #16
   3cbbc:	f8c1 200a 	str.w	r2, [r1, #10]
   3cbc0:	8902      	ldrh	r2, [r0, #8]
   3cbc2:	810a      	strh	r2, [r1, #8]
   3cbc4:	6842      	ldr	r2, [r0, #4]
   3cbc6:	604a      	str	r2, [r1, #4]
   3cbc8:	8a06      	ldrh	r6, [r0, #16]
   3cbca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   3cbce:	188d      	adds	r5, r1, r2
   3cbd0:	81ee      	strh	r6, [r5, #14]
   3cbd2:	7c85      	ldrb	r5, [r0, #18]
   3cbd4:	3301      	adds	r3, #1
   3cbd6:	2b20      	cmp	r3, #32
   3cbd8:	54a5      	strb	r5, [r4, r2]
   3cbda:	f100 0004 	add.w	r0, r0, #4
   3cbde:	d1f3      	bne.n	3cbc8 <rpc_gnss_serialize_time_and_sv_tow+0x24>
   3cbe0:	206e      	movs	r0, #110	; 0x6e
   3cbe2:	bd70      	pop	{r4, r5, r6, pc}
   3cbe4:	f04f 30ff 	mov.w	r0, #4294967295
   3cbe8:	e7fb      	b.n	3cbe2 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

0003cbea <rpc_gnss_serialize_location>:
   3cbea:	b1c0      	cbz	r0, 3cc1e <rpc_gnss_serialize_location+0x34>
   3cbec:	b1b9      	cbz	r1, 3cc1e <rpc_gnss_serialize_location+0x34>
   3cbee:	2307      	movs	r3, #7
   3cbf0:	700b      	strb	r3, [r1, #0]
   3cbf2:	2300      	movs	r3, #0
   3cbf4:	704b      	strb	r3, [r1, #1]
   3cbf6:	8903      	ldrh	r3, [r0, #8]
   3cbf8:	814b      	strh	r3, [r1, #10]
   3cbfa:	7b83      	ldrb	r3, [r0, #14]
   3cbfc:	740b      	strb	r3, [r1, #16]
   3cbfe:	6803      	ldr	r3, [r0, #0]
   3cc00:	f8c1 3002 	str.w	r3, [r1, #2]
   3cc04:	6843      	ldr	r3, [r0, #4]
   3cc06:	f8c1 3006 	str.w	r3, [r1, #6]
   3cc0a:	7b03      	ldrb	r3, [r0, #12]
   3cc0c:	738b      	strb	r3, [r1, #14]
   3cc0e:	7b43      	ldrb	r3, [r0, #13]
   3cc10:	73cb      	strb	r3, [r1, #15]
   3cc12:	7a83      	ldrb	r3, [r0, #10]
   3cc14:	730b      	strb	r3, [r1, #12]
   3cc16:	7ac3      	ldrb	r3, [r0, #11]
   3cc18:	2011      	movs	r0, #17
   3cc1a:	734b      	strb	r3, [r1, #13]
   3cc1c:	4770      	bx	lr
   3cc1e:	f04f 30ff 	mov.w	r0, #4294967295
   3cc22:	4770      	bx	lr

0003cc24 <rpc_gnss_serialize_integrity>:
   3cc24:	b148      	cbz	r0, 3cc3a <rpc_gnss_serialize_integrity+0x16>
   3cc26:	b141      	cbz	r1, 3cc3a <rpc_gnss_serialize_integrity+0x16>
   3cc28:	2308      	movs	r3, #8
   3cc2a:	700b      	strb	r3, [r1, #0]
   3cc2c:	2300      	movs	r3, #0
   3cc2e:	704b      	strb	r3, [r1, #1]
   3cc30:	6803      	ldr	r3, [r0, #0]
   3cc32:	2006      	movs	r0, #6
   3cc34:	f8c1 3002 	str.w	r3, [r1, #2]
   3cc38:	4770      	bx	lr
   3cc3a:	f04f 30ff 	mov.w	r0, #4294967295
   3cc3e:	4770      	bx	lr

0003cc40 <packet_handler_alloc_and_init>:
   3cc40:	b538      	push	{r3, r4, r5, lr}
   3cc42:	4604      	mov	r4, r0
   3cc44:	4608      	mov	r0, r1
   3cc46:	4611      	mov	r1, r2
   3cc48:	4622      	mov	r2, r4
   3cc4a:	f7f6 faf7 	bl	3323c <packet_handler_create>
   3cc4e:	61e0      	str	r0, [r4, #28]
   3cc50:	b158      	cbz	r0, 3cc6a <packet_handler_alloc_and_init+0x2a>
   3cc52:	6803      	ldr	r3, [r0, #0]
   3cc54:	681b      	ldr	r3, [r3, #0]
   3cc56:	4798      	blx	r3
   3cc58:	4605      	mov	r5, r0
   3cc5a:	b120      	cbz	r0, 3cc66 <packet_handler_alloc_and_init+0x26>
   3cc5c:	69e0      	ldr	r0, [r4, #28]
   3cc5e:	f000 fe82 	bl	3d966 <packet_handler_delete>
   3cc62:	2300      	movs	r3, #0
   3cc64:	61e3      	str	r3, [r4, #28]
   3cc66:	4628      	mov	r0, r5
   3cc68:	bd38      	pop	{r3, r4, r5, pc}
   3cc6a:	250c      	movs	r5, #12
   3cc6c:	e7fb      	b.n	3cc66 <packet_handler_alloc_and_init+0x26>

0003cc6e <socket_free>:
   3cc6e:	b510      	push	{r4, lr}
   3cc70:	4604      	mov	r4, r0
   3cc72:	69c0      	ldr	r0, [r0, #28]
   3cc74:	b108      	cbz	r0, 3cc7a <socket_free+0xc>
   3cc76:	f000 fe76 	bl	3d966 <packet_handler_delete>
   3cc7a:	4620      	mov	r0, r4
   3cc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3cc80:	222c      	movs	r2, #44	; 0x2c
   3cc82:	2100      	movs	r1, #0
   3cc84:	f001 b991 	b.w	3dfaa <memset>

0003cc88 <interface_socket_event_get>:
   3cc88:	b510      	push	{r4, lr}
   3cc8a:	4604      	mov	r4, r0
   3cc8c:	b189      	cbz	r1, 3ccb2 <interface_socket_event_get+0x2a>
   3cc8e:	f7f3 f9ed 	bl	3006c <interface_socket_from_handle_get>
   3cc92:	b158      	cbz	r0, 3ccac <interface_socket_event_get+0x24>
   3cc94:	6803      	ldr	r3, [r0, #0]
   3cc96:	0c1b      	lsrs	r3, r3, #16
   3cc98:	f003 020a 	and.w	r2, r3, #10
   3cc9c:	2a0a      	cmp	r2, #10
   3cc9e:	bf14      	ite	ne
   3cca0:	f003 030f 	andne.w	r3, r3, #15
   3cca4:	f003 030d 	andeq.w	r3, r3, #13
   3cca8:	600b      	str	r3, [r1, #0]
   3ccaa:	e002      	b.n	3ccb2 <interface_socket_event_get+0x2a>
   3ccac:	2c00      	cmp	r4, #0
   3ccae:	da01      	bge.n	3ccb4 <interface_socket_event_get+0x2c>
   3ccb0:	6008      	str	r0, [r1, #0]
   3ccb2:	bd10      	pop	{r4, pc}
   3ccb4:	2310      	movs	r3, #16
   3ccb6:	e7f7      	b.n	3cca8 <interface_socket_event_get+0x20>

0003ccb8 <address_family_verify>:
   3ccb8:	3802      	subs	r0, #2
   3ccba:	2808      	cmp	r0, #8
   3ccbc:	b508      	push	{r3, lr}
   3ccbe:	d806      	bhi.n	3ccce <address_family_verify+0x16>
   3ccc0:	2301      	movs	r3, #1
   3ccc2:	fa03 f000 	lsl.w	r0, r3, r0
   3ccc6:	f240 1309 	movw	r3, #265	; 0x109
   3ccca:	4218      	tst	r0, r3
   3cccc:	d105      	bne.n	3ccda <address_family_verify+0x22>
   3ccce:	202f      	movs	r0, #47	; 0x2f
   3ccd0:	f7ea f8d6 	bl	26e80 <nrf_modem_os_errno_set>
   3ccd4:	f04f 30ff 	mov.w	r0, #4294967295
   3ccd8:	bd08      	pop	{r3, pc}
   3ccda:	2000      	movs	r0, #0
   3ccdc:	e7fc      	b.n	3ccd8 <address_family_verify+0x20>

0003ccde <ip_recvd_packet_free_cb>:
   3ccde:	b510      	push	{r4, lr}
   3cce0:	4604      	mov	r4, r0
   3cce2:	6800      	ldr	r0, [r0, #0]
   3cce4:	f7ff fe52 	bl	3c98c <rpc_ip_client_data_free>
   3cce8:	68a0      	ldr	r0, [r4, #8]
   3ccea:	b118      	cbz	r0, 3ccf4 <ip_recvd_packet_free_cb+0x16>
   3ccec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ccf0:	f7ea ba80 	b.w	271f4 <nrf_modem_os_free>
   3ccf4:	bd10      	pop	{r4, pc}

0003ccf6 <ip_addr_parse>:
   3ccf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ccf8:	684d      	ldr	r5, [r1, #4]
   3ccfa:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
   3ccfe:	4285      	cmp	r5, r0
   3cd00:	d11a      	bne.n	3cd38 <ip_addr_parse+0x42>
   3cd02:	780c      	ldrb	r4, [r1, #0]
   3cd04:	4294      	cmp	r4, r2
   3cd06:	d119      	bne.n	3cd3c <ip_addr_parse+0x46>
   3cd08:	2d02      	cmp	r5, #2
   3cd0a:	d10b      	bne.n	3cd24 <ip_addr_parse+0x2e>
   3cd0c:	2c10      	cmp	r4, #16
   3cd0e:	d115      	bne.n	3cd3c <ip_addr_parse+0x46>
   3cd10:	890a      	ldrh	r2, [r1, #8]
   3cd12:	310c      	adds	r1, #12
   3cd14:	803a      	strh	r2, [r7, #0]
   3cd16:	2204      	movs	r2, #4
   3cd18:	801a      	strh	r2, [r3, #0]
   3cd1a:	4630      	mov	r0, r6
   3cd1c:	f001 f925 	bl	3df6a <memcpy>
   3cd20:	2000      	movs	r0, #0
   3cd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3cd24:	2d0a      	cmp	r5, #10
   3cd26:	d109      	bne.n	3cd3c <ip_addr_parse+0x46>
   3cd28:	2c24      	cmp	r4, #36	; 0x24
   3cd2a:	d107      	bne.n	3cd3c <ip_addr_parse+0x46>
   3cd2c:	890a      	ldrh	r2, [r1, #8]
   3cd2e:	803a      	strh	r2, [r7, #0]
   3cd30:	2210      	movs	r2, #16
   3cd32:	801a      	strh	r2, [r3, #0]
   3cd34:	4411      	add	r1, r2
   3cd36:	e7f0      	b.n	3cd1a <ip_addr_parse+0x24>
   3cd38:	202f      	movs	r0, #47	; 0x2f
   3cd3a:	e7f2      	b.n	3cd22 <ip_addr_parse+0x2c>
   3cd3c:	2016      	movs	r0, #22
   3cd3e:	e7f0      	b.n	3cd22 <ip_addr_parse+0x2c>

0003cd40 <protocol_verify>:
   3cd40:	b508      	push	{r3, lr}
   3cd42:	4603      	mov	r3, r0
   3cd44:	b171      	cbz	r1, 3cd64 <protocol_verify+0x24>
   3cd46:	2801      	cmp	r0, #1
   3cd48:	d108      	bne.n	3cd5c <protocol_verify+0x1c>
   3cd4a:	2901      	cmp	r1, #1
   3cd4c:	d014      	beq.n	3cd78 <protocol_verify+0x38>
   3cd4e:	2029      	movs	r0, #41	; 0x29
   3cd50:	f7ea f896 	bl	26e80 <nrf_modem_os_errno_set>
   3cd54:	f04f 31ff 	mov.w	r1, #4294967295
   3cd58:	4608      	mov	r0, r1
   3cd5a:	bd08      	pop	{r3, pc}
   3cd5c:	2802      	cmp	r0, #2
   3cd5e:	d10b      	bne.n	3cd78 <protocol_verify+0x38>
   3cd60:	2902      	cmp	r1, #2
   3cd62:	e7f3      	b.n	3cd4c <protocol_verify+0xc>
   3cd64:	2801      	cmp	r0, #1
   3cd66:	d101      	bne.n	3cd6c <protocol_verify+0x2c>
   3cd68:	6013      	str	r3, [r2, #0]
   3cd6a:	e7f5      	b.n	3cd58 <protocol_verify+0x18>
   3cd6c:	2803      	cmp	r0, #3
   3cd6e:	d101      	bne.n	3cd74 <protocol_verify+0x34>
   3cd70:	6011      	str	r1, [r2, #0]
   3cd72:	e7f1      	b.n	3cd58 <protocol_verify+0x18>
   3cd74:	2302      	movs	r3, #2
   3cd76:	e7f7      	b.n	3cd68 <protocol_verify+0x28>
   3cd78:	2100      	movs	r1, #0
   3cd7a:	e7ed      	b.n	3cd58 <protocol_verify+0x18>

0003cd7c <ip_interface_request_create>:
   3cd7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3cd7e:	4614      	mov	r4, r2
   3cd80:	2200      	movs	r2, #0
   3cd82:	4606      	mov	r6, r0
   3cd84:	460d      	mov	r5, r1
   3cd86:	a801      	add	r0, sp, #4
   3cd88:	4619      	mov	r1, r3
   3cd8a:	9201      	str	r2, [sp, #4]
   3cd8c:	f7ff fddb 	bl	3c946 <rpc_ip_client_request_alloc>
   3cd90:	9b01      	ldr	r3, [sp, #4]
   3cd92:	b940      	cbnz	r0, 3cda6 <ip_interface_request_create+0x2a>
   3cd94:	2208      	movs	r2, #8
   3cd96:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   3cd9a:	60dc      	str	r4, [r3, #12]
   3cd9c:	611d      	str	r5, [r3, #16]
   3cd9e:	721a      	strb	r2, [r3, #8]
   3cda0:	7258      	strb	r0, [r3, #9]
   3cda2:	7298      	strb	r0, [r3, #10]
   3cda4:	72d8      	strb	r0, [r3, #11]
   3cda6:	4618      	mov	r0, r3
   3cda8:	b002      	add	sp, #8
   3cdaa:	bd70      	pop	{r4, r5, r6, pc}

0003cdac <ip_interface_request_send>:
   3cdac:	b570      	push	{r4, r5, r6, lr}
   3cdae:	460c      	mov	r4, r1
   3cdb0:	4605      	mov	r5, r0
   3cdb2:	4611      	mov	r1, r2
   3cdb4:	4620      	mov	r0, r4
   3cdb6:	461e      	mov	r6, r3
   3cdb8:	f7ff fdd4 	bl	3c964 <rpc_ip_client_request_send>
   3cdbc:	b140      	cbz	r0, 3cdd0 <ip_interface_request_send+0x24>
   3cdbe:	6820      	ldr	r0, [r4, #0]
   3cdc0:	b108      	cbz	r0, 3cdc6 <ip_interface_request_send+0x1a>
   3cdc2:	f7ff fde3 	bl	3c98c <rpc_ip_client_data_free>
   3cdc6:	4620      	mov	r0, r4
   3cdc8:	f7ff fddd 	bl	3c986 <rpc_ip_client_message_free>
   3cdcc:	2023      	movs	r0, #35	; 0x23
   3cdce:	602e      	str	r6, [r5, #0]
   3cdd0:	bd70      	pop	{r4, r5, r6, pc}

0003cdd2 <ip_interface_wait>:
   3cdd2:	b538      	push	{r3, r4, r5, lr}
   3cdd4:	4605      	mov	r5, r0
   3cdd6:	f7f3 f90f 	bl	2fff8 <interface_socket_wait>
   3cdda:	4604      	mov	r4, r0
   3cddc:	b938      	cbnz	r0, 3cdee <ip_interface_wait+0x1c>
   3cdde:	4628      	mov	r0, r5
   3cde0:	f7f3 f944 	bl	3006c <interface_socket_from_handle_get>
   3cde4:	b118      	cbz	r0, 3cdee <ip_interface_wait+0x1c>
   3cde6:	6844      	ldr	r4, [r0, #4]
   3cde8:	b10c      	cbz	r4, 3cdee <ip_interface_wait+0x1c>
   3cdea:	2300      	movs	r3, #0
   3cdec:	6043      	str	r3, [r0, #4]
   3cdee:	4620      	mov	r0, r4
   3cdf0:	bd38      	pop	{r3, r4, r5, pc}

0003cdf2 <ip_interface_recvfrom>:
   3cdf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cdf6:	b087      	sub	sp, #28
   3cdf8:	4681      	mov	r9, r0
   3cdfa:	461e      	mov	r6, r3
   3cdfc:	4690      	mov	r8, r2
   3cdfe:	9f11      	ldr	r7, [sp, #68]	; 0x44
   3ce00:	9101      	str	r1, [sp, #4]
   3ce02:	2a00      	cmp	r2, #0
   3ce04:	f000 80e3 	beq.w	3cfce <ip_interface_recvfrom+0x1dc>
   3ce08:	b11b      	cbz	r3, 3ce12 <ip_interface_recvfrom+0x20>
   3ce0a:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   3ce0e:	f000 80e0 	beq.w	3cfd2 <ip_interface_recvfrom+0x1e0>
   3ce12:	4648      	mov	r0, r9
   3ce14:	f7f3 f92a 	bl	3006c <interface_socket_from_handle_get>
   3ce18:	4604      	mov	r4, r0
   3ce1a:	2800      	cmp	r0, #0
   3ce1c:	f000 80db 	beq.w	3cfd6 <ip_interface_recvfrom+0x1e4>
   3ce20:	6803      	ldr	r3, [r0, #0]
   3ce22:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   3ce26:	d10f      	bne.n	3ce48 <ip_interface_recvfrom+0x56>
   3ce28:	6802      	ldr	r2, [r0, #0]
   3ce2a:	b292      	uxth	r2, r2
   3ce2c:	2a06      	cmp	r2, #6
   3ce2e:	f000 8094 	beq.w	3cf5a <ip_interface_recvfrom+0x168>
   3ce32:	6802      	ldr	r2, [r0, #0]
   3ce34:	461e      	mov	r6, r3
   3ce36:	b292      	uxth	r2, r2
   3ce38:	2a07      	cmp	r2, #7
   3ce3a:	469a      	mov	sl, r3
   3ce3c:	f000 808f 	beq.w	3cf5e <ip_interface_recvfrom+0x16c>
   3ce40:	2239      	movs	r2, #57	; 0x39
   3ce42:	f04f 35ff 	mov.w	r5, #4294967295
   3ce46:	e07a      	b.n	3cf3e <ip_interface_recvfrom+0x14c>
   3ce48:	07b1      	lsls	r1, r6, #30
   3ce4a:	d422      	bmi.n	3ce92 <ip_interface_recvfrom+0xa0>
   3ce4c:	6803      	ldr	r3, [r0, #0]
   3ce4e:	00da      	lsls	r2, r3, #3
   3ce50:	d522      	bpl.n	3ce98 <ip_interface_recvfrom+0xa6>
   3ce52:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   3ce56:	f04f 35ff 	mov.w	r5, #4294967295
   3ce5a:	f006 0b10 	and.w	fp, r6, #16
   3ce5e:	6822      	ldr	r2, [r4, #0]
   3ce60:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   3ce64:	d01b      	beq.n	3ce9e <ip_interface_recvfrom+0xac>
   3ce66:	6822      	ldr	r2, [r4, #0]
   3ce68:	69e0      	ldr	r0, [r4, #28]
   3ce6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   3ce6e:	6022      	str	r2, [r4, #0]
   3ce70:	6802      	ldr	r2, [r0, #0]
   3ce72:	68d2      	ldr	r2, [r2, #12]
   3ce74:	4790      	blx	r2
   3ce76:	1c43      	adds	r3, r0, #1
   3ce78:	4605      	mov	r5, r0
   3ce7a:	d029      	beq.n	3ced0 <ip_interface_recvfrom+0xde>
   3ce7c:	4580      	cmp	r8, r0
   3ce7e:	dd05      	ble.n	3ce8c <ip_interface_recvfrom+0x9a>
   3ce80:	6923      	ldr	r3, [r4, #16]
   3ce82:	2b01      	cmp	r3, #1
   3ce84:	d102      	bne.n	3ce8c <ip_interface_recvfrom+0x9a>
   3ce86:	f1bb 0f00 	cmp.w	fp, #0
   3ce8a:	d125      	bne.n	3ced8 <ip_interface_recvfrom+0xe6>
   3ce8c:	f04f 0a00 	mov.w	sl, #0
   3ce90:	e040      	b.n	3cf14 <ip_interface_recvfrom+0x122>
   3ce92:	f04f 0a00 	mov.w	sl, #0
   3ce96:	e7de      	b.n	3ce56 <ip_interface_recvfrom+0x64>
   3ce98:	f04f 0a01 	mov.w	sl, #1
   3ce9c:	e7db      	b.n	3ce56 <ip_interface_recvfrom+0x64>
   3ce9e:	6821      	ldr	r1, [r4, #0]
   3cea0:	0308      	lsls	r0, r1, #12
   3cea2:	d515      	bpl.n	3ced0 <ip_interface_recvfrom+0xde>
   3cea4:	6821      	ldr	r1, [r4, #0]
   3cea6:	b289      	uxth	r1, r1
   3cea8:	290d      	cmp	r1, #13
   3ceaa:	d011      	beq.n	3ced0 <ip_interface_recvfrom+0xde>
   3ceac:	6923      	ldr	r3, [r4, #16]
   3ceae:	2b01      	cmp	r3, #1
   3ceb0:	f000 8099 	beq.w	3cfe6 <ip_interface_recvfrom+0x1f4>
   3ceb4:	4692      	mov	sl, r2
   3ceb6:	2239      	movs	r2, #57	; 0x39
   3ceb8:	6823      	ldr	r3, [r4, #0]
   3ceba:	0c1b      	lsrs	r3, r3, #16
   3cebc:	041b      	lsls	r3, r3, #16
   3cebe:	f043 030d 	orr.w	r3, r3, #13
   3cec2:	6023      	str	r3, [r4, #0]
   3cec4:	6823      	ldr	r3, [r4, #0]
   3cec6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3ceca:	6023      	str	r3, [r4, #0]
   3cecc:	2600      	movs	r6, #0
   3cece:	e036      	b.n	3cf3e <ip_interface_recvfrom+0x14c>
   3ced0:	f1ba 0f00 	cmp.w	sl, #0
   3ced4:	f000 8088 	beq.w	3cfe8 <ip_interface_recvfrom+0x1f6>
   3ced8:	6a23      	ldr	r3, [r4, #32]
   3ceda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3cede:	2b00      	cmp	r3, #0
   3cee0:	bf08      	it	eq
   3cee2:	f04f 33ff 	moveq.w	r3, #4294967295
   3cee6:	4611      	mov	r1, r2
   3cee8:	9302      	str	r3, [sp, #8]
   3ceea:	4648      	mov	r0, r9
   3ceec:	ab02      	add	r3, sp, #8
   3ceee:	f7ff ff70 	bl	3cdd2 <ip_interface_wait>
   3cef2:	4602      	mov	r2, r0
   3cef4:	2800      	cmp	r0, #0
   3cef6:	d070      	beq.n	3cfda <ip_interface_recvfrom+0x1e8>
   3cef8:	6823      	ldr	r3, [r4, #0]
   3cefa:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   3cefe:	d06f      	beq.n	3cfe0 <ip_interface_recvfrom+0x1ee>
   3cf00:	6823      	ldr	r3, [r4, #0]
   3cf02:	b29b      	uxth	r3, r3
   3cf04:	2b0d      	cmp	r3, #13
   3cf06:	d06b      	beq.n	3cfe0 <ip_interface_recvfrom+0x1ee>
   3cf08:	6923      	ldr	r3, [r4, #16]
   3cf0a:	1e59      	subs	r1, r3, #1
   3cf0c:	f1d1 0a00 	rsbs	sl, r1, #0
   3cf10:	eb4a 0a01 	adc.w	sl, sl, r1
   3cf14:	b107      	cbz	r7, 3cf18 <ip_interface_recvfrom+0x126>
   3cf16:	683f      	ldr	r7, [r7, #0]
   3cf18:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3cf1a:	69e0      	ldr	r0, [r4, #28]
   3cf1c:	e9cd 2704 	strd	r2, r7, [sp, #16]
   3cf20:	9b01      	ldr	r3, [sp, #4]
   3cf22:	6802      	ldr	r2, [r0, #0]
   3cf24:	e9cd 3802 	strd	r3, r8, [sp, #8]
   3cf28:	6895      	ldr	r5, [r2, #8]
   3cf2a:	a902      	add	r1, sp, #8
   3cf2c:	4632      	mov	r2, r6
   3cf2e:	47a8      	blx	r5
   3cf30:	1c42      	adds	r2, r0, #1
   3cf32:	4605      	mov	r5, r0
   3cf34:	bf0b      	itete	eq
   3cf36:	2600      	moveq	r6, #0
   3cf38:	2601      	movne	r6, #1
   3cf3a:	2223      	moveq	r2, #35	; 0x23
   3cf3c:	2200      	movne	r2, #0
   3cf3e:	69e0      	ldr	r0, [r4, #28]
   3cf40:	9201      	str	r2, [sp, #4]
   3cf42:	6801      	ldr	r1, [r0, #0]
   3cf44:	68c9      	ldr	r1, [r1, #12]
   3cf46:	4788      	blx	r1
   3cf48:	3001      	adds	r0, #1
   3cf4a:	9a01      	ldr	r2, [sp, #4]
   3cf4c:	d009      	beq.n	3cf62 <ip_interface_recvfrom+0x170>
   3cf4e:	6823      	ldr	r3, [r4, #0]
   3cf50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3cf54:	6023      	str	r3, [r4, #0]
   3cf56:	b1a2      	cbz	r2, 3cf82 <ip_interface_recvfrom+0x190>
   3cf58:	e028      	b.n	3cfac <ip_interface_recvfrom+0x1ba>
   3cf5a:	461e      	mov	r6, r3
   3cf5c:	469a      	mov	sl, r3
   3cf5e:	2209      	movs	r2, #9
   3cf60:	e76f      	b.n	3ce42 <ip_interface_recvfrom+0x50>
   3cf62:	f1ba 0f00 	cmp.w	sl, #0
   3cf66:	d010      	beq.n	3cf8a <ip_interface_recvfrom+0x198>
   3cf68:	2e00      	cmp	r6, #0
   3cf6a:	d1f4      	bne.n	3cf56 <ip_interface_recvfrom+0x164>
   3cf6c:	4635      	mov	r5, r6
   3cf6e:	6823      	ldr	r3, [r4, #0]
   3cf70:	0c1b      	lsrs	r3, r3, #16
   3cf72:	041b      	lsls	r3, r3, #16
   3cf74:	f043 030d 	orr.w	r3, r3, #13
   3cf78:	6023      	str	r3, [r4, #0]
   3cf7a:	6823      	ldr	r3, [r4, #0]
   3cf7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3cf80:	6023      	str	r3, [r4, #0]
   3cf82:	4628      	mov	r0, r5
   3cf84:	b007      	add	sp, #28
   3cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cf8a:	2e00      	cmp	r6, #0
   3cf8c:	d1e3      	bne.n	3cf56 <ip_interface_recvfrom+0x164>
   3cf8e:	6823      	ldr	r3, [r4, #0]
   3cf90:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   3cf94:	6823      	ldr	r3, [r4, #0]
   3cf96:	d00f      	beq.n	3cfb8 <ip_interface_recvfrom+0x1c6>
   3cf98:	2269      	movs	r2, #105	; 0x69
   3cf9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   3cf9e:	6023      	str	r3, [r4, #0]
   3cfa0:	6823      	ldr	r3, [r4, #0]
   3cfa2:	0c1b      	lsrs	r3, r3, #16
   3cfa4:	041b      	lsls	r3, r3, #16
   3cfa6:	f043 030d 	orr.w	r3, r3, #13
   3cfaa:	6023      	str	r3, [r4, #0]
   3cfac:	4610      	mov	r0, r2
   3cfae:	f7e9 ff67 	bl	26e80 <nrf_modem_os_errno_set>
   3cfb2:	f04f 35ff 	mov.w	r5, #4294967295
   3cfb6:	e7e4      	b.n	3cf82 <ip_interface_recvfrom+0x190>
   3cfb8:	031b      	lsls	r3, r3, #12
   3cfba:	d5cc      	bpl.n	3cf56 <ip_interface_recvfrom+0x164>
   3cfbc:	6823      	ldr	r3, [r4, #0]
   3cfbe:	b29b      	uxth	r3, r3
   3cfc0:	2b0d      	cmp	r3, #13
   3cfc2:	d1c8      	bne.n	3cf56 <ip_interface_recvfrom+0x164>
   3cfc4:	68a3      	ldr	r3, [r4, #8]
   3cfc6:	2b00      	cmp	r3, #0
   3cfc8:	d0c5      	beq.n	3cf56 <ip_interface_recvfrom+0x164>
   3cfca:	68a2      	ldr	r2, [r4, #8]
   3cfcc:	e7c3      	b.n	3cf56 <ip_interface_recvfrom+0x164>
   3cfce:	2216      	movs	r2, #22
   3cfd0:	e7ec      	b.n	3cfac <ip_interface_recvfrom+0x1ba>
   3cfd2:	222d      	movs	r2, #45	; 0x2d
   3cfd4:	e7ea      	b.n	3cfac <ip_interface_recvfrom+0x1ba>
   3cfd6:	2209      	movs	r2, #9
   3cfd8:	e7e8      	b.n	3cfac <ip_interface_recvfrom+0x1ba>
   3cfda:	f04f 0a01 	mov.w	sl, #1
   3cfde:	e73e      	b.n	3ce5e <ip_interface_recvfrom+0x6c>
   3cfe0:	2600      	movs	r6, #0
   3cfe2:	46b2      	mov	sl, r6
   3cfe4:	e7ab      	b.n	3cf3e <ip_interface_recvfrom+0x14c>
   3cfe6:	469a      	mov	sl, r3
   3cfe8:	2223      	movs	r2, #35	; 0x23
   3cfea:	e76f      	b.n	3cecc <ip_interface_recvfrom+0xda>

0003cfec <ip_interface_connect>:
   3cfec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3cff0:	4606      	mov	r6, r0
   3cff2:	4691      	mov	r9, r2
   3cff4:	460f      	mov	r7, r1
   3cff6:	b085      	sub	sp, #20
   3cff8:	2900      	cmp	r1, #0
   3cffa:	d065      	beq.n	3d0c8 <ip_interface_connect+0xdc>
   3cffc:	2a00      	cmp	r2, #0
   3cffe:	d063      	beq.n	3d0c8 <ip_interface_connect+0xdc>
   3d000:	f7f3 f834 	bl	3006c <interface_socket_from_handle_get>
   3d004:	4604      	mov	r4, r0
   3d006:	2800      	cmp	r0, #0
   3d008:	d060      	beq.n	3d0cc <ip_interface_connect+0xe0>
   3d00a:	6803      	ldr	r3, [r0, #0]
   3d00c:	b29b      	uxth	r3, r3
   3d00e:	2b02      	cmp	r3, #2
   3d010:	d003      	beq.n	3d01a <ip_interface_connect+0x2e>
   3d012:	6803      	ldr	r3, [r0, #0]
   3d014:	b29b      	uxth	r3, r3
   3d016:	2b04      	cmp	r3, #4
   3d018:	d14f      	bne.n	3d0ba <ip_interface_connect+0xce>
   3d01a:	6823      	ldr	r3, [r4, #0]
   3d01c:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   3d020:	d156      	bne.n	3d0d0 <ip_interface_connect+0xe4>
   3d022:	f247 0202 	movw	r2, #28674	; 0x7002
   3d026:	4630      	mov	r0, r6
   3d028:	69a1      	ldr	r1, [r4, #24]
   3d02a:	f7ff fea7 	bl	3cd7c <ip_interface_request_create>
   3d02e:	4605      	mov	r5, r0
   3d030:	2800      	cmp	r0, #0
   3d032:	d04f      	beq.n	3d0d4 <ip_interface_connect+0xe8>
   3d034:	f247 0802 	movw	r8, #28674	; 0x7002
   3d038:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   3d03c:	60c3      	str	r3, [r0, #12]
   3d03e:	69a3      	ldr	r3, [r4, #24]
   3d040:	464a      	mov	r2, r9
   3d042:	6103      	str	r3, [r0, #16]
   3d044:	6883      	ldr	r3, [r0, #8]
   3d046:	4639      	mov	r1, r7
   3d048:	3304      	adds	r3, #4
   3d04a:	6083      	str	r3, [r0, #8]
   3d04c:	f100 0318 	add.w	r3, r0, #24
   3d050:	9301      	str	r3, [sp, #4]
   3d052:	f100 0314 	add.w	r3, r0, #20
   3d056:	9300      	str	r3, [sp, #0]
   3d058:	f100 0316 	add.w	r3, r0, #22
   3d05c:	68e0      	ldr	r0, [r4, #12]
   3d05e:	f7ff fe4a 	bl	3ccf6 <ip_addr_parse>
   3d062:	bb18      	cbnz	r0, 3d0ac <ip_interface_connect+0xc0>
   3d064:	68ab      	ldr	r3, [r5, #8]
   3d066:	8aea      	ldrh	r2, [r5, #22]
   3d068:	6827      	ldr	r7, [r4, #0]
   3d06a:	4413      	add	r3, r2
   3d06c:	60ab      	str	r3, [r5, #8]
   3d06e:	6823      	ldr	r3, [r4, #0]
   3d070:	4642      	mov	r2, r8
   3d072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   3d076:	6023      	str	r3, [r4, #0]
   3d078:	4629      	mov	r1, r5
   3d07a:	463b      	mov	r3, r7
   3d07c:	4620      	mov	r0, r4
   3d07e:	f7ff fe95 	bl	3cdac <ip_interface_request_send>
   3d082:	b998      	cbnz	r0, 3d0ac <ip_interface_connect+0xc0>
   3d084:	6823      	ldr	r3, [r4, #0]
   3d086:	00db      	lsls	r3, r3, #3
   3d088:	d426      	bmi.n	3d0d8 <ip_interface_connect+0xec>
   3d08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3d08c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3d090:	2b00      	cmp	r3, #0
   3d092:	bf08      	it	eq
   3d094:	f04f 33ff 	moveq.w	r3, #4294967295
   3d098:	2105      	movs	r1, #5
   3d09a:	9303      	str	r3, [sp, #12]
   3d09c:	4630      	mov	r0, r6
   3d09e:	ab03      	add	r3, sp, #12
   3d0a0:	f7ff fe97 	bl	3cdd2 <ip_interface_wait>
   3d0a4:	b130      	cbz	r0, 3d0b4 <ip_interface_connect+0xc8>
   3d0a6:	2873      	cmp	r0, #115	; 0x73
   3d0a8:	d000      	beq.n	3d0ac <ip_interface_connect+0xc0>
   3d0aa:	6027      	str	r7, [r4, #0]
   3d0ac:	f7e9 fee8 	bl	26e80 <nrf_modem_os_errno_set>
   3d0b0:	f04f 30ff 	mov.w	r0, #4294967295
   3d0b4:	b005      	add	sp, #20
   3d0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3d0ba:	6803      	ldr	r3, [r0, #0]
   3d0bc:	b29b      	uxth	r3, r3
   3d0be:	2b05      	cmp	r3, #5
   3d0c0:	bf14      	ite	ne
   3d0c2:	2009      	movne	r0, #9
   3d0c4:	2038      	moveq	r0, #56	; 0x38
   3d0c6:	e7f1      	b.n	3d0ac <ip_interface_connect+0xc0>
   3d0c8:	2016      	movs	r0, #22
   3d0ca:	e7ef      	b.n	3d0ac <ip_interface_connect+0xc0>
   3d0cc:	2009      	movs	r0, #9
   3d0ce:	e7ed      	b.n	3d0ac <ip_interface_connect+0xc0>
   3d0d0:	2072      	movs	r0, #114	; 0x72
   3d0d2:	e7eb      	b.n	3d0ac <ip_interface_connect+0xc0>
   3d0d4:	200c      	movs	r0, #12
   3d0d6:	e7e9      	b.n	3d0ac <ip_interface_connect+0xc0>
   3d0d8:	2073      	movs	r0, #115	; 0x73
   3d0da:	e7e7      	b.n	3d0ac <ip_interface_connect+0xc0>

0003d0dc <getopt_check_and_send_int>:
   3d0dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d0de:	4604      	mov	r4, r0
   3d0e0:	460d      	mov	r5, r1
   3d0e2:	4618      	mov	r0, r3
   3d0e4:	4611      	mov	r1, r2
   3d0e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3d0ea:	b193      	cbz	r3, 3d112 <getopt_check_and_send_int+0x36>
   3d0ec:	681e      	ldr	r6, [r3, #0]
   3d0ee:	2e04      	cmp	r6, #4
   3d0f0:	d10f      	bne.n	3d112 <getopt_check_and_send_int+0x36>
   3d0f2:	b172      	cbz	r2, 3d112 <getopt_check_and_send_int+0x36>
   3d0f4:	e9cd 2300 	strd	r2, r3, [sp]
   3d0f8:	462b      	mov	r3, r5
   3d0fa:	4622      	mov	r2, r4
   3d0fc:	f7f3 fa92 	bl	30624 <ip_interface_socketoption_get>
   3d100:	4603      	mov	r3, r0
   3d102:	b118      	cbz	r0, 3d10c <getopt_check_and_send_int+0x30>
   3d104:	f7e9 febc 	bl	26e80 <nrf_modem_os_errno_set>
   3d108:	f04f 33ff 	mov.w	r3, #4294967295
   3d10c:	4618      	mov	r0, r3
   3d10e:	b002      	add	sp, #8
   3d110:	bd70      	pop	{r4, r5, r6, pc}
   3d112:	2016      	movs	r0, #22
   3d114:	e7f6      	b.n	3d104 <getopt_check_and_send_int+0x28>

0003d116 <ip_interface_socketoption_send>:
   3d116:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d11a:	4699      	mov	r9, r3
   3d11c:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   3d120:	f04f 33ff 	mov.w	r3, #4294967295
   3d124:	9301      	str	r3, [sp, #4]
   3d126:	680b      	ldr	r3, [r1, #0]
   3d128:	4606      	mov	r6, r0
   3d12a:	025d      	lsls	r5, r3, #9
   3d12c:	460c      	mov	r4, r1
   3d12e:	4692      	mov	sl, r2
   3d130:	d43c      	bmi.n	3d1ac <ip_interface_socketoption_send+0x96>
   3d132:	680b      	ldr	r3, [r1, #0]
   3d134:	0219      	lsls	r1, r3, #8
   3d136:	d439      	bmi.n	3d1ac <ip_interface_socketoption_send+0x96>
   3d138:	6823      	ldr	r3, [r4, #0]
   3d13a:	01da      	lsls	r2, r3, #7
   3d13c:	d436      	bmi.n	3d1ac <ip_interface_socketoption_send+0x96>
   3d13e:	6823      	ldr	r3, [r4, #0]
   3d140:	019b      	lsls	r3, r3, #6
   3d142:	d433      	bmi.n	3d1ac <ip_interface_socketoption_send+0x96>
   3d144:	f8d4 8000 	ldr.w	r8, [r4]
   3d148:	6823      	ldr	r3, [r4, #0]
   3d14a:	f247 0203 	movw	r2, #28675	; 0x7003
   3d14e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   3d152:	6023      	str	r3, [r4, #0]
   3d154:	69a1      	ldr	r1, [r4, #24]
   3d156:	463b      	mov	r3, r7
   3d158:	f7ff fe10 	bl	3cd7c <ip_interface_request_create>
   3d15c:	4605      	mov	r5, r0
   3d15e:	b318      	cbz	r0, 3d1a8 <ip_interface_socketoption_send+0x92>
   3d160:	6883      	ldr	r3, [r0, #8]
   3d162:	f8c0 a014 	str.w	sl, [r0, #20]
   3d166:	3308      	adds	r3, #8
   3d168:	6083      	str	r3, [r0, #8]
   3d16a:	f8c0 9018 	str.w	r9, [r0, #24]
   3d16e:	b13f      	cbz	r7, 3d180 <ip_interface_socketoption_send+0x6a>
   3d170:	f1bb 0f00 	cmp.w	fp, #0
   3d174:	d004      	beq.n	3d180 <ip_interface_socketoption_send+0x6a>
   3d176:	463a      	mov	r2, r7
   3d178:	4659      	mov	r1, fp
   3d17a:	6800      	ldr	r0, [r0, #0]
   3d17c:	f000 fef5 	bl	3df6a <memcpy>
   3d180:	4643      	mov	r3, r8
   3d182:	f247 0203 	movw	r2, #28675	; 0x7003
   3d186:	4629      	mov	r1, r5
   3d188:	4620      	mov	r0, r4
   3d18a:	f7ff fe0f 	bl	3cdac <ip_interface_request_send>
   3d18e:	b930      	cbnz	r0, 3d19e <ip_interface_socketoption_send+0x88>
   3d190:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3d194:	4630      	mov	r0, r6
   3d196:	4611      	mov	r1, r2
   3d198:	ab01      	add	r3, sp, #4
   3d19a:	f7ff fe1a 	bl	3cdd2 <ip_interface_wait>
   3d19e:	f8c4 8000 	str.w	r8, [r4]
   3d1a2:	b003      	add	sp, #12
   3d1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d1a8:	200c      	movs	r0, #12
   3d1aa:	e7f8      	b.n	3d19e <ip_interface_socketoption_send+0x88>
   3d1ac:	2023      	movs	r0, #35	; 0x23
   3d1ae:	e7f8      	b.n	3d1a2 <ip_interface_socketoption_send+0x8c>

0003d1b0 <setopt_check_and_send_int>:
   3d1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3d1b2:	4604      	mov	r4, r0
   3d1b4:	460d      	mov	r5, r1
   3d1b6:	4618      	mov	r0, r3
   3d1b8:	4611      	mov	r1, r2
   3d1ba:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   3d1be:	2a04      	cmp	r2, #4
   3d1c0:	d10f      	bne.n	3d1e2 <setopt_check_and_send_int+0x32>
   3d1c2:	b173      	cbz	r3, 3d1e2 <setopt_check_and_send_int+0x32>
   3d1c4:	e9cd 3200 	strd	r3, r2, [sp]
   3d1c8:	462b      	mov	r3, r5
   3d1ca:	4622      	mov	r2, r4
   3d1cc:	f7ff ffa3 	bl	3d116 <ip_interface_socketoption_send>
   3d1d0:	4603      	mov	r3, r0
   3d1d2:	b118      	cbz	r0, 3d1dc <setopt_check_and_send_int+0x2c>
   3d1d4:	f7e9 fe54 	bl	26e80 <nrf_modem_os_errno_set>
   3d1d8:	f04f 33ff 	mov.w	r3, #4294967295
   3d1dc:	4618      	mov	r0, r3
   3d1de:	b003      	add	sp, #12
   3d1e0:	bd30      	pop	{r4, r5, pc}
   3d1e2:	2016      	movs	r0, #22
   3d1e4:	e7f6      	b.n	3d1d4 <setopt_check_and_send_int+0x24>

0003d1e6 <ip_interface_getopt>:
   3d1e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3d1ea:	2901      	cmp	r1, #1
   3d1ec:	4604      	mov	r4, r0
   3d1ee:	460f      	mov	r7, r1
   3d1f0:	4616      	mov	r6, r2
   3d1f2:	461d      	mov	r5, r3
   3d1f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
   3d1f8:	d007      	beq.n	3d20a <ip_interface_getopt+0x24>
   3d1fa:	202a      	movs	r0, #42	; 0x2a
   3d1fc:	f7e9 fe40 	bl	26e80 <nrf_modem_os_errno_set>
   3d200:	f04f 30ff 	mov.w	r0, #4294967295
   3d204:	b002      	add	sp, #8
   3d206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3d20a:	f7f2 ff2f 	bl	3006c <interface_socket_from_handle_get>
   3d20e:	4602      	mov	r2, r0
   3d210:	b908      	cbnz	r0, 3d216 <ip_interface_getopt+0x30>
   3d212:	2009      	movs	r0, #9
   3d214:	e7f2      	b.n	3d1fc <ip_interface_getopt+0x16>
   3d216:	2e28      	cmp	r6, #40	; 0x28
   3d218:	dc0d      	bgt.n	3d236 <ip_interface_getopt+0x50>
   3d21a:	2e1d      	cmp	r6, #29
   3d21c:	dd0d      	ble.n	3d23a <ip_interface_getopt+0x54>
   3d21e:	f1a6 031e 	sub.w	r3, r6, #30
   3d222:	2b0a      	cmp	r3, #10
   3d224:	d809      	bhi.n	3d23a <ip_interface_getopt+0x54>
   3d226:	e8df f003 	tbb	[pc, r3]
   3d22a:	1d13      	.short	0x1d13
   3d22c:	08080824 	.word	0x08080824
   3d230:	08080808 	.word	0x08080808
   3d234:	2b          	.byte	0x2b
   3d235:	00          	.byte	0x00
   3d236:	2e37      	cmp	r6, #55	; 0x37
   3d238:	d029      	beq.n	3d28e <ip_interface_getopt+0xa8>
   3d23a:	462b      	mov	r3, r5
   3d23c:	4632      	mov	r2, r6
   3d23e:	2101      	movs	r1, #1
   3d240:	4620      	mov	r0, r4
   3d242:	f8cd 8020 	str.w	r8, [sp, #32]
   3d246:	b002      	add	sp, #8
   3d248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3d24c:	f7f2 bf56 	b.w	300fc <interface_socket_getopt>
   3d250:	4623      	mov	r3, r4
   3d252:	f248 0101 	movw	r1, #32769	; 0x8001
   3d256:	f44f 7000 	mov.w	r0, #512	; 0x200
   3d25a:	e9cd 5800 	strd	r5, r8, [sp]
   3d25e:	f7ff ff3d 	bl	3d0dc <getopt_check_and_send_int>
   3d262:	e7cf      	b.n	3d204 <ip_interface_getopt+0x1e>
   3d264:	4623      	mov	r3, r4
   3d266:	f244 0110 	movw	r1, #16400	; 0x4010
   3d26a:	2004      	movs	r0, #4
   3d26c:	e9cd 5800 	strd	r5, r8, [sp]
   3d270:	e7f5      	b.n	3d25e <ip_interface_getopt+0x78>
   3d272:	4623      	mov	r3, r4
   3d274:	f246 0110 	movw	r1, #24592	; 0x6010
   3d278:	2006      	movs	r0, #6
   3d27a:	e9cd 5800 	strd	r5, r8, [sp]
   3d27e:	e7ee      	b.n	3d25e <ip_interface_getopt+0x78>
   3d280:	4623      	mov	r3, r4
   3d282:	f241 0104 	movw	r1, #4100	; 0x1004
   3d286:	2008      	movs	r0, #8
   3d288:	e9cd 5800 	strd	r5, r8, [sp]
   3d28c:	e7e7      	b.n	3d25e <ip_interface_getopt+0x78>
   3d28e:	4623      	mov	r3, r4
   3d290:	f245 0106 	movw	r1, #20486	; 0x5006
   3d294:	4638      	mov	r0, r7
   3d296:	e9cd 5800 	strd	r5, r8, [sp]
   3d29a:	e7e0      	b.n	3d25e <ip_interface_getopt+0x78>

0003d29c <attach_trigger_condition_verify>:
   3d29c:	6903      	ldr	r3, [r0, #16]
   3d29e:	2b01      	cmp	r3, #1
   3d2a0:	d105      	bne.n	3d2ae <attach_trigger_condition_verify+0x12>
   3d2a2:	6800      	ldr	r0, [r0, #0]
   3d2a4:	b280      	uxth	r0, r0
   3d2a6:	1f43      	subs	r3, r0, #5
   3d2a8:	4258      	negs	r0, r3
   3d2aa:	4158      	adcs	r0, r3
   3d2ac:	4770      	bx	lr
   3d2ae:	2b02      	cmp	r3, #2
   3d2b0:	d109      	bne.n	3d2c6 <attach_trigger_condition_verify+0x2a>
   3d2b2:	6803      	ldr	r3, [r0, #0]
   3d2b4:	b29b      	uxth	r3, r3
   3d2b6:	2b02      	cmp	r3, #2
   3d2b8:	d003      	beq.n	3d2c2 <attach_trigger_condition_verify+0x26>
   3d2ba:	6803      	ldr	r3, [r0, #0]
   3d2bc:	b29b      	uxth	r3, r3
   3d2be:	2b04      	cmp	r3, #4
   3d2c0:	d1ef      	bne.n	3d2a2 <attach_trigger_condition_verify+0x6>
   3d2c2:	2001      	movs	r0, #1
   3d2c4:	4770      	bx	lr
   3d2c6:	2000      	movs	r0, #0
   3d2c8:	4770      	bx	lr

0003d2ca <secure_client_socket>:
   3d2ca:	f04f 33ff 	mov.w	r3, #4294967295
   3d2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3d2d0:	9301      	str	r3, [sp, #4]
   3d2d2:	680b      	ldr	r3, [r1, #0]
   3d2d4:	4606      	mov	r6, r0
   3d2d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3d2da:	600b      	str	r3, [r1, #0]
   3d2dc:	680b      	ldr	r3, [r1, #0]
   3d2de:	460c      	mov	r4, r1
   3d2e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3d2e4:	600b      	str	r3, [r1, #0]
   3d2e6:	680f      	ldr	r7, [r1, #0]
   3d2e8:	463a      	mov	r2, r7
   3d2ea:	f7f4 f803 	bl	312f4 <secure_socket_attach_initiate>
   3d2ee:	4605      	mov	r5, r0
   3d2f0:	b950      	cbnz	r0, 3d308 <secure_client_socket+0x3e>
   3d2f2:	220c      	movs	r2, #12
   3d2f4:	4630      	mov	r0, r6
   3d2f6:	4611      	mov	r1, r2
   3d2f8:	ab01      	add	r3, sp, #4
   3d2fa:	f7ff fd6a 	bl	3cdd2 <ip_interface_wait>
   3d2fe:	4605      	mov	r5, r0
   3d300:	b128      	cbz	r0, 3d30e <secure_client_socket+0x44>
   3d302:	2873      	cmp	r0, #115	; 0x73
   3d304:	d000      	beq.n	3d308 <secure_client_socket+0x3e>
   3d306:	6027      	str	r7, [r4, #0]
   3d308:	4628      	mov	r0, r5
   3d30a:	b003      	add	sp, #12
   3d30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3d30e:	4630      	mov	r0, r6
   3d310:	f7f3 ffde 	bl	312d0 <hostname_free>
   3d314:	6823      	ldr	r3, [r4, #0]
   3d316:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   3d31a:	6023      	str	r3, [r4, #0]
   3d31c:	6823      	ldr	r3, [r4, #0]
   3d31e:	0c1b      	lsrs	r3, r3, #16
   3d320:	041b      	lsls	r3, r3, #16
   3d322:	f043 030c 	orr.w	r3, r3, #12
   3d326:	6023      	str	r3, [r4, #0]
   3d328:	6823      	ldr	r3, [r4, #0]
   3d32a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3d32e:	6023      	str	r3, [r4, #0]
   3d330:	6823      	ldr	r3, [r4, #0]
   3d332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3d336:	6023      	str	r3, [r4, #0]
   3d338:	e7e6      	b.n	3d308 <secure_client_socket+0x3e>

0003d33a <tls_interface_close>:
   3d33a:	b510      	push	{r4, lr}
   3d33c:	4604      	mov	r4, r0
   3d33e:	f7f2 fe95 	bl	3006c <interface_socket_from_handle_get>
   3d342:	b138      	cbz	r0, 3d354 <tls_interface_close+0x1a>
   3d344:	4620      	mov	r0, r4
   3d346:	f7f3 ffc3 	bl	312d0 <hostname_free>
   3d34a:	4620      	mov	r0, r4
   3d34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d350:	f7f2 bffe 	b.w	30350 <ip_interface_close>
   3d354:	2009      	movs	r0, #9
   3d356:	f7e9 fd93 	bl	26e80 <nrf_modem_os_errno_set>
   3d35a:	f04f 30ff 	mov.w	r0, #4294967295
   3d35e:	bd10      	pop	{r4, pc}

0003d360 <packet_free_cb>:
   3d360:	6800      	ldr	r0, [r0, #0]
   3d362:	f7ff bae9 	b.w	3c938 <rpc_at_client_data_free>

0003d366 <at_interface_wait>:
   3d366:	b538      	push	{r3, r4, r5, lr}
   3d368:	4605      	mov	r5, r0
   3d36a:	f7f2 fe45 	bl	2fff8 <interface_socket_wait>
   3d36e:	4604      	mov	r4, r0
   3d370:	b938      	cbnz	r0, 3d382 <at_interface_wait+0x1c>
   3d372:	4628      	mov	r0, r5
   3d374:	f7f2 fe7a 	bl	3006c <interface_socket_from_handle_get>
   3d378:	b118      	cbz	r0, 3d382 <at_interface_wait+0x1c>
   3d37a:	6844      	ldr	r4, [r0, #4]
   3d37c:	b10c      	cbz	r4, 3d382 <at_interface_wait+0x1c>
   3d37e:	2300      	movs	r3, #0
   3d380:	6043      	str	r3, [r0, #4]
   3d382:	4620      	mov	r0, r4
   3d384:	bd38      	pop	{r3, r4, r5, pc}

0003d386 <send_message>:
   3d386:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3d38a:	4606      	mov	r6, r0
   3d38c:	4668      	mov	r0, sp
   3d38e:	460f      	mov	r7, r1
   3d390:	4692      	mov	sl, r2
   3d392:	4699      	mov	r9, r3
   3d394:	f7ff fab4 	bl	3c900 <rpc_at_client_request_alloc>
   3d398:	4605      	mov	r5, r0
   3d39a:	4630      	mov	r0, r6
   3d39c:	f7f2 fe66 	bl	3006c <interface_socket_from_handle_get>
   3d3a0:	4680      	mov	r8, r0
   3d3a2:	bb5d      	cbnz	r5, 3d3fc <send_message+0x76>
   3d3a4:	2304      	movs	r3, #4
   3d3a6:	9c00      	ldr	r4, [sp, #0]
   3d3a8:	7223      	strb	r3, [r4, #8]
   3d3aa:	7265      	strb	r5, [r4, #9]
   3d3ac:	72a5      	strb	r5, [r4, #10]
   3d3ae:	72e5      	strb	r5, [r4, #11]
   3d3b0:	60e6      	str	r6, [r4, #12]
   3d3b2:	b127      	cbz	r7, 3d3be <send_message+0x38>
   3d3b4:	463a      	mov	r2, r7
   3d3b6:	4651      	mov	r1, sl
   3d3b8:	6820      	ldr	r0, [r4, #0]
   3d3ba:	f000 fdd6 	bl	3df6a <memcpy>
   3d3be:	4649      	mov	r1, r9
   3d3c0:	9800      	ldr	r0, [sp, #0]
   3d3c2:	f7ff faac 	bl	3c91e <rpc_at_client_request_send>
   3d3c6:	b158      	cbz	r0, 3d3e0 <send_message+0x5a>
   3d3c8:	b11f      	cbz	r7, 3d3d2 <send_message+0x4c>
   3d3ca:	9b00      	ldr	r3, [sp, #0]
   3d3cc:	6818      	ldr	r0, [r3, #0]
   3d3ce:	f7ff fab3 	bl	3c938 <rpc_at_client_data_free>
   3d3d2:	9800      	ldr	r0, [sp, #0]
   3d3d4:	f7ff faad 	bl	3c932 <rpc_at_client_message_free>
   3d3d8:	2023      	movs	r0, #35	; 0x23
   3d3da:	b002      	add	sp, #8
   3d3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3d3e0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   3d3e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3d3e6:	2b00      	cmp	r3, #0
   3d3e8:	bf08      	it	eq
   3d3ea:	f04f 33ff 	moveq.w	r3, #4294967295
   3d3ee:	4611      	mov	r1, r2
   3d3f0:	9301      	str	r3, [sp, #4]
   3d3f2:	4630      	mov	r0, r6
   3d3f4:	ab01      	add	r3, sp, #4
   3d3f6:	f7ff ffb6 	bl	3d366 <at_interface_wait>
   3d3fa:	e7ee      	b.n	3d3da <send_message+0x54>
   3d3fc:	200c      	movs	r0, #12
   3d3fe:	e7ec      	b.n	3d3da <send_message+0x54>

0003d400 <at_interface_write>:
   3d400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3d404:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   3d406:	4607      	mov	r7, r0
   3d408:	4688      	mov	r8, r1
   3d40a:	4615      	mov	r5, r2
   3d40c:	4699      	mov	r9, r3
   3d40e:	b146      	cbz	r6, 3d422 <at_interface_write+0x22>
   3d410:	2038      	movs	r0, #56	; 0x38
   3d412:	f7e9 fd35 	bl	26e80 <nrf_modem_os_errno_set>
   3d416:	f04f 35ff 	mov.w	r5, #4294967295
   3d41a:	4628      	mov	r0, r5
   3d41c:	b003      	add	sp, #12
   3d41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3d422:	f7f2 fe23 	bl	3006c <interface_socket_from_handle_get>
   3d426:	4604      	mov	r4, r0
   3d428:	f1b9 0f00 	cmp.w	r9, #0
   3d42c:	d124      	bne.n	3d478 <at_interface_write+0x78>
   3d42e:	b908      	cbnz	r0, 3d434 <at_interface_write+0x34>
   3d430:	2016      	movs	r0, #22
   3d432:	e7ee      	b.n	3d412 <at_interface_write+0x12>
   3d434:	2601      	movs	r6, #1
   3d436:	6822      	ldr	r2, [r4, #0]
   3d438:	0393      	lsls	r3, r2, #14
   3d43a:	d518      	bpl.n	3d46e <at_interface_write+0x6e>
   3d43c:	b1f6      	cbz	r6, 3d47c <at_interface_write+0x7c>
   3d43e:	6823      	ldr	r3, [r4, #0]
   3d440:	4642      	mov	r2, r8
   3d442:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3d446:	6023      	str	r3, [r4, #0]
   3d448:	6823      	ldr	r3, [r4, #0]
   3d44a:	4629      	mov	r1, r5
   3d44c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   3d450:	6023      	str	r3, [r4, #0]
   3d452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   3d456:	4638      	mov	r0, r7
   3d458:	9300      	str	r3, [sp, #0]
   3d45a:	2301      	movs	r3, #1
   3d45c:	f7ff ff93 	bl	3d386 <send_message>
   3d460:	2800      	cmp	r0, #0
   3d462:	d0da      	beq.n	3d41a <at_interface_write+0x1a>
   3d464:	6823      	ldr	r3, [r4, #0]
   3d466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3d46a:	6023      	str	r3, [r4, #0]
   3d46c:	e7d1      	b.n	3d412 <at_interface_write+0x12>
   3d46e:	2e00      	cmp	r6, #0
   3d470:	bf14      	ite	ne
   3d472:	2016      	movne	r0, #22
   3d474:	202d      	moveq	r0, #45	; 0x2d
   3d476:	e7cc      	b.n	3d412 <at_interface_write+0x12>
   3d478:	2800      	cmp	r0, #0
   3d47a:	d1dc      	bne.n	3d436 <at_interface_write+0x36>
   3d47c:	202d      	movs	r0, #45	; 0x2d
   3d47e:	e7c8      	b.n	3d412 <at_interface_write+0x12>

0003d480 <at_interface_close>:
   3d480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3d482:	4606      	mov	r6, r0
   3d484:	f7f2 fdf2 	bl	3006c <interface_socket_from_handle_get>
   3d488:	4604      	mov	r4, r0
   3d48a:	b308      	cbz	r0, 3d4d0 <at_interface_close+0x50>
   3d48c:	230d      	movs	r3, #13
   3d48e:	6807      	ldr	r7, [r0, #0]
   3d490:	6003      	str	r3, [r0, #0]
   3d492:	6803      	ldr	r3, [r0, #0]
   3d494:	2200      	movs	r2, #0
   3d496:	039b      	lsls	r3, r3, #14
   3d498:	bf48      	it	mi
   3d49a:	6803      	ldrmi	r3, [r0, #0]
   3d49c:	4611      	mov	r1, r2
   3d49e:	bf44      	itt	mi
   3d4a0:	f423 3300 	bicmi.w	r3, r3, #131072	; 0x20000
   3d4a4:	6003      	strmi	r3, [r0, #0]
   3d4a6:	230e      	movs	r3, #14
   3d4a8:	4630      	mov	r0, r6
   3d4aa:	9300      	str	r3, [sp, #0]
   3d4ac:	2306      	movs	r3, #6
   3d4ae:	f7ff ff6a 	bl	3d386 <send_message>
   3d4b2:	4605      	mov	r5, r0
   3d4b4:	b130      	cbz	r0, 3d4c4 <at_interface_close+0x44>
   3d4b6:	6027      	str	r7, [r4, #0]
   3d4b8:	4628      	mov	r0, r5
   3d4ba:	f7e9 fce1 	bl	26e80 <nrf_modem_os_errno_set>
   3d4be:	f04f 35ff 	mov.w	r5, #4294967295
   3d4c2:	e002      	b.n	3d4ca <at_interface_close+0x4a>
   3d4c4:	4630      	mov	r0, r6
   3d4c6:	f7f2 fd71 	bl	2ffac <interface_socket_free>
   3d4ca:	4628      	mov	r0, r5
   3d4cc:	b003      	add	sp, #12
   3d4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3d4d0:	2516      	movs	r5, #22
   3d4d2:	e7f1      	b.n	3d4b8 <at_interface_close+0x38>

0003d4d4 <at_interface_read>:
   3d4d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3d4d8:	b087      	sub	sp, #28
   3d4da:	4680      	mov	r8, r0
   3d4dc:	460e      	mov	r6, r1
   3d4de:	4614      	mov	r4, r2
   3d4e0:	461f      	mov	r7, r3
   3d4e2:	f7f2 fdc3 	bl	3006c <interface_socket_from_handle_get>
   3d4e6:	4605      	mov	r5, r0
   3d4e8:	2800      	cmp	r0, #0
   3d4ea:	d045      	beq.n	3d578 <at_interface_read+0xa4>
   3d4ec:	2300      	movs	r3, #0
   3d4ee:	e9cd 6402 	strd	r6, r4, [sp, #8]
   3d4f2:	9304      	str	r3, [sp, #16]
   3d4f4:	b117      	cbz	r7, 3d4fc <at_interface_read+0x28>
   3d4f6:	f017 0f2a 	tst.w	r7, #42	; 0x2a
   3d4fa:	d022      	beq.n	3d542 <at_interface_read+0x6e>
   3d4fc:	2400      	movs	r4, #0
   3d4fe:	9305      	str	r3, [sp, #20]
   3d500:	f007 0902 	and.w	r9, r7, #2
   3d504:	682b      	ldr	r3, [r5, #0]
   3d506:	69e8      	ldr	r0, [r5, #28]
   3d508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3d50c:	602b      	str	r3, [r5, #0]
   3d50e:	6803      	ldr	r3, [r0, #0]
   3d510:	463a      	mov	r2, r7
   3d512:	689b      	ldr	r3, [r3, #8]
   3d514:	a902      	add	r1, sp, #8
   3d516:	4798      	blx	r3
   3d518:	1e06      	subs	r6, r0, #0
   3d51a:	da1b      	bge.n	3d554 <at_interface_read+0x80>
   3d51c:	f1b9 0f00 	cmp.w	r9, #0
   3d520:	d113      	bne.n	3d54a <at_interface_read+0x76>
   3d522:	b9bc      	cbnz	r4, 3d554 <at_interface_read+0x80>
   3d524:	6a2b      	ldr	r3, [r5, #32]
   3d526:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3d52a:	2b00      	cmp	r3, #0
   3d52c:	bf08      	it	eq
   3d52e:	f04f 33ff 	moveq.w	r3, #4294967295
   3d532:	4611      	mov	r1, r2
   3d534:	9301      	str	r3, [sp, #4]
   3d536:	4640      	mov	r0, r8
   3d538:	ab01      	add	r3, sp, #4
   3d53a:	f7ff ff14 	bl	3d366 <at_interface_wait>
   3d53e:	4604      	mov	r4, r0
   3d540:	e7e0      	b.n	3d504 <at_interface_read+0x30>
   3d542:	242d      	movs	r4, #45	; 0x2d
   3d544:	f04f 36ff 	mov.w	r6, #4294967295
   3d548:	e00f      	b.n	3d56a <at_interface_read+0x96>
   3d54a:	1c73      	adds	r3, r6, #1
   3d54c:	d102      	bne.n	3d554 <at_interface_read+0x80>
   3d54e:	2c00      	cmp	r4, #0
   3d550:	bf08      	it	eq
   3d552:	2423      	moveq	r4, #35	; 0x23
   3d554:	69e8      	ldr	r0, [r5, #28]
   3d556:	6803      	ldr	r3, [r0, #0]
   3d558:	68db      	ldr	r3, [r3, #12]
   3d55a:	4798      	blx	r3
   3d55c:	3001      	adds	r0, #1
   3d55e:	bf1e      	ittt	ne
   3d560:	682b      	ldrne	r3, [r5, #0]
   3d562:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
   3d566:	602b      	strne	r3, [r5, #0]
   3d568:	b114      	cbz	r4, 3d570 <at_interface_read+0x9c>
   3d56a:	4620      	mov	r0, r4
   3d56c:	f7e9 fc88 	bl	26e80 <nrf_modem_os_errno_set>
   3d570:	4630      	mov	r0, r6
   3d572:	b007      	add	sp, #28
   3d574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3d578:	2416      	movs	r4, #22
   3d57a:	e7e3      	b.n	3d544 <at_interface_read+0x70>

0003d57c <at_interface_getopt>:
   3d57c:	f7f2 bdbe 	b.w	300fc <interface_socket_getopt>

0003d580 <at_interface_setopt>:
   3d580:	f7f2 bd84 	b.w	3008c <interface_socket_setopt>

0003d584 <rpc_at_event_handler>:
   3d584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3d586:	4606      	mov	r6, r0
   3d588:	68c0      	ldr	r0, [r0, #12]
   3d58a:	460d      	mov	r5, r1
   3d58c:	f7f2 fd6e 	bl	3006c <interface_socket_from_handle_get>
   3d590:	4604      	mov	r4, r0
   3d592:	2800      	cmp	r0, #0
   3d594:	d03a      	beq.n	3d60c <rpc_at_event_handler+0x88>
   3d596:	6803      	ldr	r3, [r0, #0]
   3d598:	b29b      	uxth	r3, r3
   3d59a:	2b01      	cmp	r3, #1
   3d59c:	d104      	bne.n	3d5a8 <rpc_at_event_handler+0x24>
   3d59e:	2d02      	cmp	r5, #2
   3d5a0:	d11c      	bne.n	3d5dc <rpc_at_event_handler+0x58>
   3d5a2:	6005      	str	r5, [r0, #0]
   3d5a4:	2000      	movs	r0, #0
   3d5a6:	e02b      	b.n	3d600 <rpc_at_event_handler+0x7c>
   3d5a8:	6803      	ldr	r3, [r0, #0]
   3d5aa:	b29b      	uxth	r3, r3
   3d5ac:	2b0d      	cmp	r3, #13
   3d5ae:	d104      	bne.n	3d5ba <rpc_at_event_handler+0x36>
   3d5b0:	2d02      	cmp	r5, #2
   3d5b2:	d113      	bne.n	3d5dc <rpc_at_event_handler+0x58>
   3d5b4:	230e      	movs	r3, #14
   3d5b6:	6023      	str	r3, [r4, #0]
   3d5b8:	e7f4      	b.n	3d5a4 <rpc_at_event_handler+0x20>
   3d5ba:	6803      	ldr	r3, [r0, #0]
   3d5bc:	b29b      	uxth	r3, r3
   3d5be:	2b02      	cmp	r3, #2
   3d5c0:	d10c      	bne.n	3d5dc <rpc_at_event_handler+0x58>
   3d5c2:	6803      	ldr	r3, [r0, #0]
   3d5c4:	029b      	lsls	r3, r3, #10
   3d5c6:	d509      	bpl.n	3d5dc <rpc_at_event_handler+0x58>
   3d5c8:	2d02      	cmp	r5, #2
   3d5ca:	d107      	bne.n	3d5dc <rpc_at_event_handler+0x58>
   3d5cc:	6803      	ldr	r3, [r0, #0]
   3d5ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   3d5d2:	6003      	str	r3, [r0, #0]
   3d5d4:	6803      	ldr	r3, [r0, #0]
   3d5d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3d5da:	e7ec      	b.n	3d5b6 <rpc_at_event_handler+0x32>
   3d5dc:	3d03      	subs	r5, #3
   3d5de:	2d01      	cmp	r5, #1
   3d5e0:	d8e0      	bhi.n	3d5a4 <rpc_at_event_handler+0x20>
   3d5e2:	2500      	movs	r5, #0
   3d5e4:	6833      	ldr	r3, [r6, #0]
   3d5e6:	69e0      	ldr	r0, [r4, #28]
   3d5e8:	9300      	str	r3, [sp, #0]
   3d5ea:	6873      	ldr	r3, [r6, #4]
   3d5ec:	4669      	mov	r1, sp
   3d5ee:	9301      	str	r3, [sp, #4]
   3d5f0:	6803      	ldr	r3, [r0, #0]
   3d5f2:	e9cd 5502 	strd	r5, r5, [sp, #8]
   3d5f6:	685b      	ldr	r3, [r3, #4]
   3d5f8:	4798      	blx	r3
   3d5fa:	3001      	adds	r0, #1
   3d5fc:	d102      	bne.n	3d604 <rpc_at_event_handler+0x80>
   3d5fe:	2002      	movs	r0, #2
   3d600:	b004      	add	sp, #16
   3d602:	bd70      	pop	{r4, r5, r6, pc}
   3d604:	6823      	ldr	r3, [r4, #0]
   3d606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3d60a:	e7d4      	b.n	3d5b6 <rpc_at_event_handler+0x32>
   3d60c:	6830      	ldr	r0, [r6, #0]
   3d60e:	2800      	cmp	r0, #0
   3d610:	d0c8      	beq.n	3d5a4 <rpc_at_event_handler+0x20>
   3d612:	f7ff f991 	bl	3c938 <rpc_at_client_data_free>
   3d616:	e7c5      	b.n	3d5a4 <rpc_at_event_handler+0x20>

0003d618 <packet_free_cb>:
   3d618:	b510      	push	{r4, lr}
   3d61a:	4604      	mov	r4, r0
   3d61c:	b118      	cbz	r0, 3d626 <packet_free_cb+0xe>
   3d61e:	6800      	ldr	r0, [r0, #0]
   3d620:	b108      	cbz	r0, 3d626 <packet_free_cb+0xe>
   3d622:	f7ff f9f9 	bl	3ca18 <rpc_gnss_client_data_free>
   3d626:	68a0      	ldr	r0, [r4, #8]
   3d628:	b118      	cbz	r0, 3d632 <packet_free_cb+0x1a>
   3d62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d62e:	f7e9 bde1 	b.w	271f4 <nrf_modem_os_free>
   3d632:	bd10      	pop	{r4, pc}

0003d634 <spaces_remove>:
   3d634:	2200      	movs	r2, #0
   3d636:	b510      	push	{r4, lr}
   3d638:	1e44      	subs	r4, r0, #1
   3d63a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   3d63e:	1881      	adds	r1, r0, r2
   3d640:	b90b      	cbnz	r3, 3d646 <spaces_remove+0x12>
   3d642:	700b      	strb	r3, [r1, #0]
   3d644:	bd10      	pop	{r4, pc}
   3d646:	2b20      	cmp	r3, #32
   3d648:	bf1c      	itt	ne
   3d64a:	700b      	strbne	r3, [r1, #0]
   3d64c:	3201      	addne	r2, #1
   3d64e:	e7f4      	b.n	3d63a <spaces_remove+0x6>

0003d650 <ok_rsp_parser>:
   3d650:	2000      	movs	r0, #0
   3d652:	4770      	bx	lr

0003d654 <context_query_parser>:
   3d654:	f06f 0004 	mvn.w	r0, #4
   3d658:	4770      	bx	lr

0003d65a <null_handler_init>:
   3d65a:	2000      	movs	r0, #0
   3d65c:	4770      	bx	lr

0003d65e <null_handler_put>:
   3d65e:	b510      	push	{r4, lr}
   3d660:	460c      	mov	r4, r1
   3d662:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   3d666:	4620      	mov	r0, r4
   3d668:	4798      	blx	r3
   3d66a:	6860      	ldr	r0, [r4, #4]
   3d66c:	bd10      	pop	{r4, pc}

0003d66e <null_handler_get>:
   3d66e:	f04f 30ff 	mov.w	r0, #4294967295
   3d672:	4770      	bx	lr

0003d674 <null_handler_available>:
   3d674:	f04f 30ff 	mov.w	r0, #4294967295
   3d678:	4770      	bx	lr

0003d67a <null_handler_flush>:
   3d67a:	2000      	movs	r0, #0
   3d67c:	4770      	bx	lr

0003d67e <null_handler_free>:
   3d67e:	4770      	bx	lr

0003d680 <stream_handler_free_packet>:
   3d680:	b530      	push	{r4, r5, lr}
   3d682:	4605      	mov	r5, r0
   3d684:	b085      	sub	sp, #20
   3d686:	68c0      	ldr	r0, [r0, #12]
   3d688:	f000 fb0f 	bl	3dcaa <linked_list_pop>
   3d68c:	4604      	mov	r4, r0
   3d68e:	b170      	cbz	r0, 3d6ae <stream_handler_free_packet+0x2e>
   3d690:	6843      	ldr	r3, [r0, #4]
   3d692:	9300      	str	r3, [sp, #0]
   3d694:	6883      	ldr	r3, [r0, #8]
   3d696:	9301      	str	r3, [sp, #4]
   3d698:	6903      	ldr	r3, [r0, #16]
   3d69a:	9302      	str	r3, [sp, #8]
   3d69c:	68c3      	ldr	r3, [r0, #12]
   3d69e:	4668      	mov	r0, sp
   3d6a0:	9303      	str	r3, [sp, #12]
   3d6a2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3d6a6:	4798      	blx	r3
   3d6a8:	4620      	mov	r0, r4
   3d6aa:	f7e9 fda3 	bl	271f4 <nrf_modem_os_free>
   3d6ae:	b005      	add	sp, #20
   3d6b0:	bd30      	pop	{r4, r5, pc}

0003d6b2 <stream_handler_init>:
   3d6b2:	b510      	push	{r4, lr}
   3d6b4:	4604      	mov	r4, r0
   3d6b6:	200c      	movs	r0, #12
   3d6b8:	f7e9 fd94 	bl	271e4 <nrf_modem_os_alloc>
   3d6bc:	60e0      	str	r0, [r4, #12]
   3d6be:	b128      	cbz	r0, 3d6cc <stream_handler_init+0x1a>
   3d6c0:	2300      	movs	r3, #0
   3d6c2:	6123      	str	r3, [r4, #16]
   3d6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d6c8:	f000 bad3 	b.w	3dc72 <linked_list_init>
   3d6cc:	200c      	movs	r0, #12
   3d6ce:	bd10      	pop	{r4, pc}

0003d6d0 <stream_handler_put>:
   3d6d0:	b570      	push	{r4, r5, r6, lr}
   3d6d2:	4606      	mov	r6, r0
   3d6d4:	2014      	movs	r0, #20
   3d6d6:	460d      	mov	r5, r1
   3d6d8:	f7e9 fd84 	bl	271e4 <nrf_modem_os_alloc>
   3d6dc:	4604      	mov	r4, r0
   3d6de:	b178      	cbz	r0, 3d700 <stream_handler_put+0x30>
   3d6e0:	682b      	ldr	r3, [r5, #0]
   3d6e2:	4601      	mov	r1, r0
   3d6e4:	6043      	str	r3, [r0, #4]
   3d6e6:	686b      	ldr	r3, [r5, #4]
   3d6e8:	6083      	str	r3, [r0, #8]
   3d6ea:	68eb      	ldr	r3, [r5, #12]
   3d6ec:	60c3      	str	r3, [r0, #12]
   3d6ee:	68ab      	ldr	r3, [r5, #8]
   3d6f0:	6103      	str	r3, [r0, #16]
   3d6f2:	68f0      	ldr	r0, [r6, #12]
   3d6f4:	f000 fac6 	bl	3dc84 <linked_list_push>
   3d6f8:	b128      	cbz	r0, 3d706 <stream_handler_put+0x36>
   3d6fa:	4620      	mov	r0, r4
   3d6fc:	f7e9 fd7a 	bl	271f4 <nrf_modem_os_free>
   3d700:	f04f 30ff 	mov.w	r0, #4294967295
   3d704:	e000      	b.n	3d708 <stream_handler_put+0x38>
   3d706:	6868      	ldr	r0, [r5, #4]
   3d708:	bd70      	pop	{r4, r5, r6, pc}

0003d70a <stream_handler_get>:
   3d70a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d70e:	4606      	mov	r6, r0
   3d710:	b085      	sub	sp, #20
   3d712:	68c0      	ldr	r0, [r0, #12]
   3d714:	468a      	mov	sl, r1
   3d716:	4617      	mov	r7, r2
   3d718:	f000 fad1 	bl	3dcbe <linked_list_peek>
   3d71c:	4604      	mov	r4, r0
   3d71e:	2800      	cmp	r0, #0
   3d720:	d055      	beq.n	3d7ce <stream_handler_get+0xc4>
   3d722:	f8da 0008 	ldr.w	r0, [sl, #8]
   3d726:	2800      	cmp	r0, #0
   3d728:	d049      	beq.n	3d7be <stream_handler_get+0xb4>
   3d72a:	6921      	ldr	r1, [r4, #16]
   3d72c:	2900      	cmp	r1, #0
   3d72e:	d046      	beq.n	3d7be <stream_handler_get+0xb4>
   3d730:	68e2      	ldr	r2, [r4, #12]
   3d732:	2a00      	cmp	r2, #0
   3d734:	d043      	beq.n	3d7be <stream_handler_get+0xb4>
   3d736:	f8da 500c 	ldr.w	r5, [sl, #12]
   3d73a:	42aa      	cmp	r2, r5
   3d73c:	bf28      	it	cs
   3d73e:	462a      	movcs	r2, r5
   3d740:	f8ca 200c 	str.w	r2, [sl, #12]
   3d744:	f000 fc11 	bl	3df6a <memcpy>
   3d748:	2500      	movs	r5, #0
   3d74a:	f8da 3004 	ldr.w	r3, [sl, #4]
   3d74e:	6931      	ldr	r1, [r6, #16]
   3d750:	9301      	str	r3, [sp, #4]
   3d752:	f8da 3000 	ldr.w	r3, [sl]
   3d756:	9302      	str	r3, [sp, #8]
   3d758:	f007 0320 	and.w	r3, r7, #32
   3d75c:	9303      	str	r3, [sp, #12]
   3d75e:	f007 0708 	and.w	r7, r7, #8
   3d762:	9b01      	ldr	r3, [sp, #4]
   3d764:	42ab      	cmp	r3, r5
   3d766:	d924      	bls.n	3d7b2 <stream_handler_get+0xa8>
   3d768:	68a2      	ldr	r2, [r4, #8]
   3d76a:	9b01      	ldr	r3, [sp, #4]
   3d76c:	eba2 0801 	sub.w	r8, r2, r1
   3d770:	eba3 0b05 	sub.w	fp, r3, r5
   3d774:	f8da 2000 	ldr.w	r2, [sl]
   3d778:	45d8      	cmp	r8, fp
   3d77a:	46c1      	mov	r9, r8
   3d77c:	bf28      	it	cs
   3d77e:	46d9      	movcs	r9, fp
   3d780:	b142      	cbz	r2, 3d794 <stream_handler_get+0x8a>
   3d782:	9b03      	ldr	r3, [sp, #12]
   3d784:	b933      	cbnz	r3, 3d794 <stream_handler_get+0x8a>
   3d786:	6860      	ldr	r0, [r4, #4]
   3d788:	9b02      	ldr	r3, [sp, #8]
   3d78a:	4401      	add	r1, r0
   3d78c:	464a      	mov	r2, r9
   3d78e:	1958      	adds	r0, r3, r5
   3d790:	f000 fbeb 	bl	3df6a <memcpy>
   3d794:	4620      	mov	r0, r4
   3d796:	f000 fa9a 	bl	3dcce <linked_list_get_next>
   3d79a:	4604      	mov	r4, r0
   3d79c:	b92f      	cbnz	r7, 3d7aa <stream_handler_get+0xa0>
   3d79e:	45d8      	cmp	r8, fp
   3d7a0:	d811      	bhi.n	3d7c6 <stream_handler_get+0xbc>
   3d7a2:	4630      	mov	r0, r6
   3d7a4:	f7ff ff6c 	bl	3d680 <stream_handler_free_packet>
   3d7a8:	6137      	str	r7, [r6, #16]
   3d7aa:	2100      	movs	r1, #0
   3d7ac:	444d      	add	r5, r9
   3d7ae:	2c00      	cmp	r4, #0
   3d7b0:	d1d7      	bne.n	3d762 <stream_handler_get+0x58>
   3d7b2:	4628      	mov	r0, r5
   3d7b4:	f8ca 5004 	str.w	r5, [sl, #4]
   3d7b8:	b005      	add	sp, #20
   3d7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d7be:	2200      	movs	r2, #0
   3d7c0:	f8ca 200c 	str.w	r2, [sl, #12]
   3d7c4:	e7c0      	b.n	3d748 <stream_handler_get+0x3e>
   3d7c6:	6932      	ldr	r2, [r6, #16]
   3d7c8:	444a      	add	r2, r9
   3d7ca:	6132      	str	r2, [r6, #16]
   3d7cc:	e7ed      	b.n	3d7aa <stream_handler_get+0xa0>
   3d7ce:	f04f 30ff 	mov.w	r0, #4294967295
   3d7d2:	e7f1      	b.n	3d7b8 <stream_handler_get+0xae>

0003d7d4 <stream_handler_available>:
   3d7d4:	b510      	push	{r4, lr}
   3d7d6:	4604      	mov	r4, r0
   3d7d8:	68c0      	ldr	r0, [r0, #12]
   3d7da:	f000 fa70 	bl	3dcbe <linked_list_peek>
   3d7de:	b150      	cbz	r0, 3d7f6 <stream_handler_available+0x22>
   3d7e0:	6924      	ldr	r4, [r4, #16]
   3d7e2:	4264      	negs	r4, r4
   3d7e4:	6883      	ldr	r3, [r0, #8]
   3d7e6:	441c      	add	r4, r3
   3d7e8:	f000 fa71 	bl	3dcce <linked_list_get_next>
   3d7ec:	2800      	cmp	r0, #0
   3d7ee:	d1f9      	bne.n	3d7e4 <stream_handler_available+0x10>
   3d7f0:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   3d7f4:	bd10      	pop	{r4, pc}
   3d7f6:	f04f 30ff 	mov.w	r0, #4294967295
   3d7fa:	e7fb      	b.n	3d7f4 <stream_handler_available+0x20>

0003d7fc <stream_handler_flush>:
   3d7fc:	68c3      	ldr	r3, [r0, #12]
   3d7fe:	b510      	push	{r4, lr}
   3d800:	4604      	mov	r4, r0
   3d802:	b923      	cbnz	r3, 3d80e <stream_handler_flush+0x12>
   3d804:	2016      	movs	r0, #22
   3d806:	e007      	b.n	3d818 <stream_handler_flush+0x1c>
   3d808:	4620      	mov	r0, r4
   3d80a:	f7ff ff39 	bl	3d680 <stream_handler_free_packet>
   3d80e:	68e0      	ldr	r0, [r4, #12]
   3d810:	f000 fa5b 	bl	3dcca <linked_list_size_get>
   3d814:	2800      	cmp	r0, #0
   3d816:	d1f7      	bne.n	3d808 <stream_handler_flush+0xc>
   3d818:	bd10      	pop	{r4, pc}

0003d81a <stream_handler_free>:
   3d81a:	68c3      	ldr	r3, [r0, #12]
   3d81c:	b510      	push	{r4, lr}
   3d81e:	4604      	mov	r4, r0
   3d820:	b133      	cbz	r3, 3d830 <stream_handler_free+0x16>
   3d822:	f7ff ffeb 	bl	3d7fc <stream_handler_flush>
   3d826:	68e0      	ldr	r0, [r4, #12]
   3d828:	f7e9 fce4 	bl	271f4 <nrf_modem_os_free>
   3d82c:	2300      	movs	r3, #0
   3d82e:	60e3      	str	r3, [r4, #12]
   3d830:	bd10      	pop	{r4, pc}

0003d832 <datagram_handler_free_packet>:
   3d832:	b530      	push	{r4, r5, lr}
   3d834:	4605      	mov	r5, r0
   3d836:	b085      	sub	sp, #20
   3d838:	68c0      	ldr	r0, [r0, #12]
   3d83a:	f000 fa36 	bl	3dcaa <linked_list_pop>
   3d83e:	4604      	mov	r4, r0
   3d840:	b170      	cbz	r0, 3d860 <datagram_handler_free_packet+0x2e>
   3d842:	6843      	ldr	r3, [r0, #4]
   3d844:	9300      	str	r3, [sp, #0]
   3d846:	6883      	ldr	r3, [r0, #8]
   3d848:	9301      	str	r3, [sp, #4]
   3d84a:	6903      	ldr	r3, [r0, #16]
   3d84c:	9302      	str	r3, [sp, #8]
   3d84e:	68c3      	ldr	r3, [r0, #12]
   3d850:	4668      	mov	r0, sp
   3d852:	9303      	str	r3, [sp, #12]
   3d854:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3d858:	4798      	blx	r3
   3d85a:	4620      	mov	r0, r4
   3d85c:	f7e9 fcca 	bl	271f4 <nrf_modem_os_free>
   3d860:	b005      	add	sp, #20
   3d862:	bd30      	pop	{r4, r5, pc}

0003d864 <datagram_handler_init>:
   3d864:	b510      	push	{r4, lr}
   3d866:	4604      	mov	r4, r0
   3d868:	200c      	movs	r0, #12
   3d86a:	f7e9 fcbb 	bl	271e4 <nrf_modem_os_alloc>
   3d86e:	60e0      	str	r0, [r4, #12]
   3d870:	b118      	cbz	r0, 3d87a <datagram_handler_init+0x16>
   3d872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d876:	f000 b9fc 	b.w	3dc72 <linked_list_init>
   3d87a:	200c      	movs	r0, #12
   3d87c:	bd10      	pop	{r4, pc}

0003d87e <datagram_handler_put>:
   3d87e:	b570      	push	{r4, r5, r6, lr}
   3d880:	4606      	mov	r6, r0
   3d882:	2014      	movs	r0, #20
   3d884:	460d      	mov	r5, r1
   3d886:	f7e9 fcad 	bl	271e4 <nrf_modem_os_alloc>
   3d88a:	4604      	mov	r4, r0
   3d88c:	b178      	cbz	r0, 3d8ae <datagram_handler_put+0x30>
   3d88e:	682b      	ldr	r3, [r5, #0]
   3d890:	4601      	mov	r1, r0
   3d892:	6043      	str	r3, [r0, #4]
   3d894:	686b      	ldr	r3, [r5, #4]
   3d896:	6083      	str	r3, [r0, #8]
   3d898:	68eb      	ldr	r3, [r5, #12]
   3d89a:	60c3      	str	r3, [r0, #12]
   3d89c:	68ab      	ldr	r3, [r5, #8]
   3d89e:	6103      	str	r3, [r0, #16]
   3d8a0:	68f0      	ldr	r0, [r6, #12]
   3d8a2:	f000 f9ef 	bl	3dc84 <linked_list_push>
   3d8a6:	b128      	cbz	r0, 3d8b4 <datagram_handler_put+0x36>
   3d8a8:	4620      	mov	r0, r4
   3d8aa:	f7e9 fca3 	bl	271f4 <nrf_modem_os_free>
   3d8ae:	f04f 30ff 	mov.w	r0, #4294967295
   3d8b2:	e000      	b.n	3d8b6 <datagram_handler_put+0x38>
   3d8b4:	6868      	ldr	r0, [r5, #4]
   3d8b6:	bd70      	pop	{r4, r5, r6, pc}

0003d8b8 <datagram_handler_get>:
   3d8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d8ba:	4607      	mov	r7, r0
   3d8bc:	68c0      	ldr	r0, [r0, #12]
   3d8be:	460c      	mov	r4, r1
   3d8c0:	4616      	mov	r6, r2
   3d8c2:	f000 f9fc 	bl	3dcbe <linked_list_peek>
   3d8c6:	4605      	mov	r5, r0
   3d8c8:	b328      	cbz	r0, 3d916 <datagram_handler_get+0x5e>
   3d8ca:	6882      	ldr	r2, [r0, #8]
   3d8cc:	6863      	ldr	r3, [r4, #4]
   3d8ce:	6820      	ldr	r0, [r4, #0]
   3d8d0:	429a      	cmp	r2, r3
   3d8d2:	bf28      	it	cs
   3d8d4:	461a      	movcs	r2, r3
   3d8d6:	6062      	str	r2, [r4, #4]
   3d8d8:	b110      	cbz	r0, 3d8e0 <datagram_handler_get+0x28>
   3d8da:	6869      	ldr	r1, [r5, #4]
   3d8dc:	f000 fb45 	bl	3df6a <memcpy>
   3d8e0:	68a0      	ldr	r0, [r4, #8]
   3d8e2:	b1a8      	cbz	r0, 3d910 <datagram_handler_get+0x58>
   3d8e4:	6929      	ldr	r1, [r5, #16]
   3d8e6:	b199      	cbz	r1, 3d910 <datagram_handler_get+0x58>
   3d8e8:	68eb      	ldr	r3, [r5, #12]
   3d8ea:	b18b      	cbz	r3, 3d910 <datagram_handler_get+0x58>
   3d8ec:	68e2      	ldr	r2, [r4, #12]
   3d8ee:	429a      	cmp	r2, r3
   3d8f0:	bf28      	it	cs
   3d8f2:	461a      	movcs	r2, r3
   3d8f4:	60e2      	str	r2, [r4, #12]
   3d8f6:	f000 fb38 	bl	3df6a <memcpy>
   3d8fa:	0732      	lsls	r2, r6, #28
   3d8fc:	68ad      	ldr	r5, [r5, #8]
   3d8fe:	d402      	bmi.n	3d906 <datagram_handler_get+0x4e>
   3d900:	4638      	mov	r0, r7
   3d902:	f7ff ff96 	bl	3d832 <datagram_handler_free_packet>
   3d906:	06b3      	lsls	r3, r6, #26
   3d908:	bf4c      	ite	mi
   3d90a:	4628      	movmi	r0, r5
   3d90c:	6860      	ldrpl	r0, [r4, #4]
   3d90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d910:	2300      	movs	r3, #0
   3d912:	60e3      	str	r3, [r4, #12]
   3d914:	e7f1      	b.n	3d8fa <datagram_handler_get+0x42>
   3d916:	f04f 30ff 	mov.w	r0, #4294967295
   3d91a:	e7f8      	b.n	3d90e <datagram_handler_get+0x56>

0003d91c <datagram_handler_available>:
   3d91c:	b508      	push	{r3, lr}
   3d91e:	68c0      	ldr	r0, [r0, #12]
   3d920:	f000 f9cd 	bl	3dcbe <linked_list_peek>
   3d924:	b108      	cbz	r0, 3d92a <datagram_handler_available+0xe>
   3d926:	6880      	ldr	r0, [r0, #8]
   3d928:	bd08      	pop	{r3, pc}
   3d92a:	f04f 30ff 	mov.w	r0, #4294967295
   3d92e:	e7fb      	b.n	3d928 <datagram_handler_available+0xc>

0003d930 <datagram_handler_flush>:
   3d930:	68c3      	ldr	r3, [r0, #12]
   3d932:	b510      	push	{r4, lr}
   3d934:	4604      	mov	r4, r0
   3d936:	b923      	cbnz	r3, 3d942 <datagram_handler_flush+0x12>
   3d938:	2016      	movs	r0, #22
   3d93a:	e007      	b.n	3d94c <datagram_handler_flush+0x1c>
   3d93c:	4620      	mov	r0, r4
   3d93e:	f7ff ff78 	bl	3d832 <datagram_handler_free_packet>
   3d942:	68e0      	ldr	r0, [r4, #12]
   3d944:	f000 f9c1 	bl	3dcca <linked_list_size_get>
   3d948:	2800      	cmp	r0, #0
   3d94a:	d1f7      	bne.n	3d93c <datagram_handler_flush+0xc>
   3d94c:	bd10      	pop	{r4, pc}

0003d94e <datagram_handler_free>:
   3d94e:	68c3      	ldr	r3, [r0, #12]
   3d950:	b510      	push	{r4, lr}
   3d952:	4604      	mov	r4, r0
   3d954:	b133      	cbz	r3, 3d964 <datagram_handler_free+0x16>
   3d956:	f7ff ffeb 	bl	3d930 <datagram_handler_flush>
   3d95a:	68e0      	ldr	r0, [r4, #12]
   3d95c:	f7e9 fc4a 	bl	271f4 <nrf_modem_os_free>
   3d960:	2300      	movs	r3, #0
   3d962:	60e3      	str	r3, [r4, #12]
   3d964:	bd10      	pop	{r4, pc}

0003d966 <packet_handler_delete>:
   3d966:	b510      	push	{r4, lr}
   3d968:	4604      	mov	r4, r0
   3d96a:	6803      	ldr	r3, [r0, #0]
   3d96c:	691b      	ldr	r3, [r3, #16]
   3d96e:	4798      	blx	r3
   3d970:	6823      	ldr	r3, [r4, #0]
   3d972:	4620      	mov	r0, r4
   3d974:	695b      	ldr	r3, [r3, #20]
   3d976:	4798      	blx	r3
   3d978:	4620      	mov	r0, r4
   3d97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d97e:	f7e9 bc39 	b.w	271f4 <nrf_modem_os_free>

0003d982 <nrf_modem_recoverable_error_handler>:
   3d982:	4770      	bx	lr

0003d984 <nrf_modem_platform_error_handler>:
   3d984:	b508      	push	{r3, lr}
   3d986:	f7ff fffc 	bl	3d982 <nrf_modem_recoverable_error_handler>
   3d98a:	bd08      	pop	{r3, pc}

0003d98c <unimplemented_method>:
   3d98c:	b40f      	push	{r0, r1, r2, r3}
   3d98e:	b508      	push	{r3, lr}
   3d990:	202d      	movs	r0, #45	; 0x2d
   3d992:	f7e9 fa75 	bl	26e80 <nrf_modem_os_errno_set>
   3d996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3d99a:	f04f 30ff 	mov.w	r0, #4294967295
   3d99e:	b004      	add	sp, #16
   3d9a0:	4770      	bx	lr

0003d9a2 <rpc_transport_ipc_fault_handler>:
   3d9a2:	f7ff bfef 	b.w	3d984 <nrf_modem_platform_error_handler>

0003d9a6 <nrf_modem_platform_init>:
   3d9a6:	b513      	push	{r0, r1, r4, lr}
   3d9a8:	4604      	mov	r4, r0
   3d9aa:	f7e9 fc37 	bl	2721c <nrf_modem_os_init>
   3d9ae:	6a23      	ldr	r3, [r4, #32]
   3d9b0:	4668      	mov	r0, sp
   3d9b2:	9400      	str	r4, [sp, #0]
   3d9b4:	f88d 3004 	strb.w	r3, [sp, #4]
   3d9b8:	f7f2 f95a 	bl	2fc70 <rpc_transport_ipc_init>
   3d9bc:	b920      	cbnz	r0, 3d9c8 <nrf_modem_platform_init+0x22>
   3d9be:	f7f2 fac3 	bl	2ff48 <interface_init>
   3d9c2:	b118      	cbz	r0, 3d9cc <nrf_modem_platform_init+0x26>
   3d9c4:	f04f 30ff 	mov.w	r0, #4294967295
   3d9c8:	b002      	add	sp, #8
   3d9ca:	bd10      	pop	{r4, pc}
   3d9cc:	f7f4 f88a 	bl	31ae4 <at_interface_init>
   3d9d0:	2800      	cmp	r0, #0
   3d9d2:	d1f7      	bne.n	3d9c4 <nrf_modem_platform_init+0x1e>
   3d9d4:	f7f2 fc26 	bl	30224 <ip_interface_init>
   3d9d8:	2800      	cmp	r0, #0
   3d9da:	d1f3      	bne.n	3d9c4 <nrf_modem_platform_init+0x1e>
   3d9dc:	f7f3 fcd8 	bl	31390 <tls_interface_init>
   3d9e0:	2800      	cmp	r0, #0
   3d9e2:	d1ef      	bne.n	3d9c4 <nrf_modem_platform_init+0x1e>
   3d9e4:	f7f4 f932 	bl	31c4c <mfu_interface_init>
   3d9e8:	2800      	cmp	r0, #0
   3d9ea:	d1eb      	bne.n	3d9c4 <nrf_modem_platform_init+0x1e>
   3d9ec:	f7f5 f81e 	bl	32a2c <pdn_interface_init>
   3d9f0:	2800      	cmp	r0, #0
   3d9f2:	d1e7      	bne.n	3d9c4 <nrf_modem_platform_init+0x1e>
   3d9f4:	f7f4 fe94 	bl	32720 <gnss_interface_init>
   3d9f8:	3800      	subs	r0, #0
   3d9fa:	bf18      	it	ne
   3d9fc:	2001      	movne	r0, #1
   3d9fe:	4240      	negs	r0, r0
   3da00:	e7e2      	b.n	3d9c8 <nrf_modem_platform_init+0x22>

0003da02 <internal_poll>:
   3da02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3da06:	2600      	movs	r6, #0
   3da08:	4688      	mov	r8, r1
   3da0a:	4604      	mov	r4, r0
   3da0c:	4637      	mov	r7, r6
   3da0e:	4546      	cmp	r6, r8
   3da10:	d103      	bne.n	3da1a <internal_poll+0x18>
   3da12:	4638      	mov	r0, r7
   3da14:	b002      	add	sp, #8
   3da16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3da1a:	88a5      	ldrh	r5, [r4, #4]
   3da1c:	6820      	ldr	r0, [r4, #0]
   3da1e:	a901      	add	r1, sp, #4
   3da20:	f7ff f932 	bl	3cc88 <interface_socket_event_get>
   3da24:	f005 0503 	and.w	r5, r5, #3
   3da28:	9b01      	ldr	r3, [sp, #4]
   3da2a:	f045 051c 	orr.w	r5, r5, #28
   3da2e:	401d      	ands	r5, r3
   3da30:	6820      	ldr	r0, [r4, #0]
   3da32:	80e5      	strh	r5, [r4, #6]
   3da34:	f7f2 fb1a 	bl	3006c <interface_socket_from_handle_get>
   3da38:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   3da3c:	b168      	cbz	r0, 3da5a <internal_poll+0x58>
   3da3e:	071a      	lsls	r2, r3, #28
   3da40:	d50b      	bpl.n	3da5a <internal_poll+0x58>
   3da42:	6942      	ldr	r2, [r0, #20]
   3da44:	2a01      	cmp	r2, #1
   3da46:	d003      	beq.n	3da50 <internal_poll+0x4e>
   3da48:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   3da4c:	2a01      	cmp	r2, #1
   3da4e:	d802      	bhi.n	3da56 <internal_poll+0x54>
   3da50:	f043 0301 	orr.w	r3, r3, #1
   3da54:	80e3      	strh	r3, [r4, #6]
   3da56:	3701      	adds	r7, #1
   3da58:	e001      	b.n	3da5e <internal_poll+0x5c>
   3da5a:	2b00      	cmp	r3, #0
   3da5c:	d1fb      	bne.n	3da56 <internal_poll+0x54>
   3da5e:	3601      	adds	r6, #1
   3da60:	3408      	adds	r4, #8
   3da62:	e7d4      	b.n	3da0e <internal_poll+0xc>

0003da64 <nrf_modem_platform_getaddrinfo>:
   3da64:	f7f3 b8b6 	b.w	30bd4 <ip_interface_getaddrinfo>

0003da68 <nrf_modem_platform_freeaddrinfo>:
   3da68:	f7f3 b9c2 	b.w	30df0 <ip_interface_freeaddrinfo>

0003da6c <nrf_modem_platform_poll>:
   3da6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3da6e:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   3da72:	2909      	cmp	r1, #9
   3da74:	4605      	mov	r5, r0
   3da76:	460e      	mov	r6, r1
   3da78:	9201      	str	r2, [sp, #4]
   3da7a:	d906      	bls.n	3da8a <nrf_modem_platform_poll+0x1e>
   3da7c:	2016      	movs	r0, #22
   3da7e:	f7e9 f9ff 	bl	26e80 <nrf_modem_os_errno_set>
   3da82:	f04f 30ff 	mov.w	r0, #4294967295
   3da86:	b002      	add	sp, #8
   3da88:	bd70      	pop	{r4, r5, r6, pc}
   3da8a:	b910      	cbnz	r0, 3da92 <nrf_modem_platform_poll+0x26>
   3da8c:	b109      	cbz	r1, 3da92 <nrf_modem_platform_poll+0x26>
   3da8e:	200e      	movs	r0, #14
   3da90:	e7f5      	b.n	3da7e <nrf_modem_platform_poll+0x12>
   3da92:	4631      	mov	r1, r6
   3da94:	4628      	mov	r0, r5
   3da96:	f7ff ffb4 	bl	3da02 <internal_poll>
   3da9a:	2400      	movs	r4, #0
   3da9c:	2800      	cmp	r0, #0
   3da9e:	d1f2      	bne.n	3da86 <nrf_modem_platform_poll+0x1a>
   3daa0:	2c00      	cmp	r4, #0
   3daa2:	d1f0      	bne.n	3da86 <nrf_modem_platform_poll+0x1a>
   3daa4:	4628      	mov	r0, r5
   3daa6:	a901      	add	r1, sp, #4
   3daa8:	f7e9 f932 	bl	26d10 <nrf_modem_os_timedwait>
   3daac:	4604      	mov	r4, r0
   3daae:	b118      	cbz	r0, 3dab8 <nrf_modem_platform_poll+0x4c>
   3dab0:	283c      	cmp	r0, #60	; 0x3c
   3dab2:	d001      	beq.n	3dab8 <nrf_modem_platform_poll+0x4c>
   3dab4:	2023      	movs	r0, #35	; 0x23
   3dab6:	e7e2      	b.n	3da7e <nrf_modem_platform_poll+0x12>
   3dab8:	4631      	mov	r1, r6
   3daba:	4628      	mov	r0, r5
   3dabc:	f7ff ffa1 	bl	3da02 <internal_poll>
   3dac0:	e7ec      	b.n	3da9c <nrf_modem_platform_poll+0x30>

0003dac2 <nrf_socket>:
   3dac2:	b570      	push	{r4, r5, r6, lr}
   3dac4:	4604      	mov	r4, r0
   3dac6:	460d      	mov	r5, r1
   3dac8:	4616      	mov	r6, r2
   3daca:	f7f5 fc1b 	bl	33304 <nrf_modem_platform_af_method_table_get>
   3dace:	b130      	cbz	r0, 3dade <nrf_socket+0x1c>
   3dad0:	4632      	mov	r2, r6
   3dad2:	4629      	mov	r1, r5
   3dad4:	6803      	ldr	r3, [r0, #0]
   3dad6:	4620      	mov	r0, r4
   3dad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3dadc:	4718      	bx	r3
   3dade:	f04f 30ff 	mov.w	r0, #4294967295
   3dae2:	bd70      	pop	{r4, r5, r6, pc}

0003dae4 <nrf_close>:
   3dae4:	b510      	push	{r4, lr}
   3dae6:	4604      	mov	r4, r0
   3dae8:	f7f5 fc5e 	bl	333a8 <nrf_modem_platform_fd_method_table_get>
   3daec:	b120      	cbz	r0, 3daf8 <nrf_close+0x14>
   3daee:	6843      	ldr	r3, [r0, #4]
   3daf0:	4620      	mov	r0, r4
   3daf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3daf6:	4718      	bx	r3
   3daf8:	f04f 30ff 	mov.w	r0, #4294967295
   3dafc:	bd10      	pop	{r4, pc}

0003dafe <nrf_sendto>:
   3dafe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3db00:	4604      	mov	r4, r0
   3db02:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   3db06:	e9cd 2102 	strd	r2, r1, [sp, #8]
   3db0a:	9301      	str	r3, [sp, #4]
   3db0c:	f7f5 fc4c 	bl	333a8 <nrf_modem_platform_fd_method_table_get>
   3db10:	b158      	cbz	r0, 3db2a <nrf_sendto+0x2c>
   3db12:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   3db16:	e9cd 5608 	strd	r5, r6, [sp, #32]
   3db1a:	6885      	ldr	r5, [r0, #8]
   3db1c:	4620      	mov	r0, r4
   3db1e:	46ac      	mov	ip, r5
   3db20:	9903      	ldr	r1, [sp, #12]
   3db22:	b004      	add	sp, #16
   3db24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3db28:	4760      	bx	ip
   3db2a:	f04f 30ff 	mov.w	r0, #4294967295
   3db2e:	b004      	add	sp, #16
   3db30:	bd70      	pop	{r4, r5, r6, pc}

0003db32 <nrf_recvfrom>:
   3db32:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3db34:	4604      	mov	r4, r0
   3db36:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   3db3a:	e9cd 2102 	strd	r2, r1, [sp, #8]
   3db3e:	9301      	str	r3, [sp, #4]
   3db40:	f7f5 fc32 	bl	333a8 <nrf_modem_platform_fd_method_table_get>
   3db44:	b158      	cbz	r0, 3db5e <nrf_recvfrom+0x2c>
   3db46:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   3db4a:	e9cd 5608 	strd	r5, r6, [sp, #32]
   3db4e:	68c5      	ldr	r5, [r0, #12]
   3db50:	4620      	mov	r0, r4
   3db52:	46ac      	mov	ip, r5
   3db54:	9903      	ldr	r1, [sp, #12]
   3db56:	b004      	add	sp, #16
   3db58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3db5c:	4760      	bx	ip
   3db5e:	f04f 30ff 	mov.w	r0, #4294967295
   3db62:	b004      	add	sp, #16
   3db64:	bd70      	pop	{r4, r5, r6, pc}

0003db66 <nrf_connect>:
   3db66:	b513      	push	{r0, r1, r4, lr}
   3db68:	4604      	mov	r4, r0
   3db6a:	e9cd 2100 	strd	r2, r1, [sp]
   3db6e:	f7f5 fc1b 	bl	333a8 <nrf_modem_platform_fd_method_table_get>
   3db72:	b138      	cbz	r0, 3db84 <nrf_connect+0x1e>
   3db74:	e9dd 2100 	ldrd	r2, r1, [sp]
   3db78:	6943      	ldr	r3, [r0, #20]
   3db7a:	4620      	mov	r0, r4
   3db7c:	b002      	add	sp, #8
   3db7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3db82:	4718      	bx	r3
   3db84:	f04f 30ff 	mov.w	r0, #4294967295
   3db88:	b002      	add	sp, #8
   3db8a:	bd10      	pop	{r4, pc}

0003db8c <nrf_listen>:
   3db8c:	b513      	push	{r0, r1, r4, lr}
   3db8e:	4604      	mov	r4, r0
   3db90:	9101      	str	r1, [sp, #4]
   3db92:	f7f5 fc09 	bl	333a8 <nrf_modem_platform_fd_method_table_get>
   3db96:	b130      	cbz	r0, 3dba6 <nrf_listen+0x1a>
   3db98:	6983      	ldr	r3, [r0, #24]
   3db9a:	4620      	mov	r0, r4
   3db9c:	9901      	ldr	r1, [sp, #4]
   3db9e:	b002      	add	sp, #8
   3dba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3dba4:	4718      	bx	r3
   3dba6:	f04f 30ff 	mov.w	r0, #4294967295
   3dbaa:	b002      	add	sp, #8
   3dbac:	bd10      	pop	{r4, pc}

0003dbae <nrf_accept>:
   3dbae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3dbb0:	4604      	mov	r4, r0
   3dbb2:	e9cd 2100 	strd	r2, r1, [sp]
   3dbb6:	f7f5 fbf7 	bl	333a8 <nrf_modem_platform_fd_method_table_get>
   3dbba:	b148      	cbz	r0, 3dbd0 <nrf_accept+0x22>
   3dbbc:	e9dd 2100 	ldrd	r2, r1, [sp]
   3dbc0:	69c5      	ldr	r5, [r0, #28]
   3dbc2:	2300      	movs	r3, #0
   3dbc4:	4620      	mov	r0, r4
   3dbc6:	46ac      	mov	ip, r5
   3dbc8:	b003      	add	sp, #12
   3dbca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3dbce:	4760      	bx	ip
   3dbd0:	f04f 30ff 	mov.w	r0, #4294967295
   3dbd4:	b003      	add	sp, #12
   3dbd6:	bd30      	pop	{r4, r5, pc}

0003dbd8 <nrf_bind>:
   3dbd8:	b513      	push	{r0, r1, r4, lr}
   3dbda:	4604      	mov	r4, r0
   3dbdc:	e9cd 2100 	strd	r2, r1, [sp]
   3dbe0:	f7f5 fbe2 	bl	333a8 <nrf_modem_platform_fd_method_table_get>
   3dbe4:	b138      	cbz	r0, 3dbf6 <nrf_bind+0x1e>
   3dbe6:	e9dd 2100 	ldrd	r2, r1, [sp]
   3dbea:	6903      	ldr	r3, [r0, #16]
   3dbec:	4620      	mov	r0, r4
   3dbee:	b002      	add	sp, #8
   3dbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3dbf4:	4718      	bx	r3
   3dbf6:	f04f 30ff 	mov.w	r0, #4294967295
   3dbfa:	b002      	add	sp, #8
   3dbfc:	bd10      	pop	{r4, pc}

0003dbfe <nrf_setsockopt>:
   3dbfe:	b530      	push	{r4, r5, lr}
   3dc00:	b085      	sub	sp, #20
   3dc02:	4604      	mov	r4, r0
   3dc04:	e9cd 2102 	strd	r2, r1, [sp, #8]
   3dc08:	9d08      	ldr	r5, [sp, #32]
   3dc0a:	9301      	str	r3, [sp, #4]
   3dc0c:	f7f5 fbcc 	bl	333a8 <nrf_modem_platform_fd_method_table_get>
   3dc10:	b150      	cbz	r0, 3dc28 <nrf_setsockopt+0x2a>
   3dc12:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   3dc16:	9508      	str	r5, [sp, #32]
   3dc18:	6a05      	ldr	r5, [r0, #32]
   3dc1a:	4620      	mov	r0, r4
   3dc1c:	46ac      	mov	ip, r5
   3dc1e:	9903      	ldr	r1, [sp, #12]
   3dc20:	b005      	add	sp, #20
   3dc22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3dc26:	4760      	bx	ip
   3dc28:	f04f 30ff 	mov.w	r0, #4294967295
   3dc2c:	b005      	add	sp, #20
   3dc2e:	bd30      	pop	{r4, r5, pc}

0003dc30 <nrf_getsockopt>:
   3dc30:	b530      	push	{r4, r5, lr}
   3dc32:	b085      	sub	sp, #20
   3dc34:	4604      	mov	r4, r0
   3dc36:	e9cd 2102 	strd	r2, r1, [sp, #8]
   3dc3a:	9d08      	ldr	r5, [sp, #32]
   3dc3c:	9301      	str	r3, [sp, #4]
   3dc3e:	f7f5 fbb3 	bl	333a8 <nrf_modem_platform_fd_method_table_get>
   3dc42:	b150      	cbz	r0, 3dc5a <nrf_getsockopt+0x2a>
   3dc44:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   3dc48:	9508      	str	r5, [sp, #32]
   3dc4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   3dc4c:	4620      	mov	r0, r4
   3dc4e:	46ac      	mov	ip, r5
   3dc50:	9903      	ldr	r1, [sp, #12]
   3dc52:	b005      	add	sp, #20
   3dc54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3dc58:	4760      	bx	ip
   3dc5a:	f04f 30ff 	mov.w	r0, #4294967295
   3dc5e:	b005      	add	sp, #20
   3dc60:	bd30      	pop	{r4, r5, pc}

0003dc62 <nrf_getaddrinfo>:
   3dc62:	f7ff beff 	b.w	3da64 <nrf_modem_platform_getaddrinfo>

0003dc66 <nrf_freeaddrinfo>:
   3dc66:	f7ff beff 	b.w	3da68 <nrf_modem_platform_freeaddrinfo>

0003dc6a <nrf_poll>:
   3dc6a:	f7ff beff 	b.w	3da6c <nrf_modem_platform_poll>

0003dc6e <nrf_fcntl>:
   3dc6e:	f7f5 bbcb 	b.w	33408 <nrf_modem_platform_fcntl>

0003dc72 <linked_list_init>:
   3dc72:	b128      	cbz	r0, 3dc80 <linked_list_init+0xe>
   3dc74:	2300      	movs	r3, #0
   3dc76:	e9c0 3301 	strd	r3, r3, [r0, #4]
   3dc7a:	6003      	str	r3, [r0, #0]
   3dc7c:	4618      	mov	r0, r3
   3dc7e:	4770      	bx	lr
   3dc80:	2016      	movs	r0, #22
   3dc82:	4770      	bx	lr

0003dc84 <linked_list_push>:
   3dc84:	6803      	ldr	r3, [r0, #0]
   3dc86:	3301      	adds	r3, #1
   3dc88:	d00d      	beq.n	3dca6 <linked_list_push+0x22>
   3dc8a:	2300      	movs	r3, #0
   3dc8c:	600b      	str	r3, [r1, #0]
   3dc8e:	6803      	ldr	r3, [r0, #0]
   3dc90:	b933      	cbnz	r3, 3dca0 <linked_list_push+0x1c>
   3dc92:	6041      	str	r1, [r0, #4]
   3dc94:	6803      	ldr	r3, [r0, #0]
   3dc96:	6081      	str	r1, [r0, #8]
   3dc98:	3301      	adds	r3, #1
   3dc9a:	6003      	str	r3, [r0, #0]
   3dc9c:	2000      	movs	r0, #0
   3dc9e:	4770      	bx	lr
   3dca0:	6883      	ldr	r3, [r0, #8]
   3dca2:	6019      	str	r1, [r3, #0]
   3dca4:	e7f6      	b.n	3dc94 <linked_list_push+0x10>
   3dca6:	200c      	movs	r0, #12
   3dca8:	4770      	bx	lr

0003dcaa <linked_list_pop>:
   3dcaa:	4603      	mov	r3, r0
   3dcac:	6800      	ldr	r0, [r0, #0]
   3dcae:	b128      	cbz	r0, 3dcbc <linked_list_pop+0x12>
   3dcb0:	6858      	ldr	r0, [r3, #4]
   3dcb2:	6802      	ldr	r2, [r0, #0]
   3dcb4:	605a      	str	r2, [r3, #4]
   3dcb6:	681a      	ldr	r2, [r3, #0]
   3dcb8:	3a01      	subs	r2, #1
   3dcba:	601a      	str	r2, [r3, #0]
   3dcbc:	4770      	bx	lr

0003dcbe <linked_list_peek>:
   3dcbe:	6803      	ldr	r3, [r0, #0]
   3dcc0:	b10b      	cbz	r3, 3dcc6 <linked_list_peek+0x8>
   3dcc2:	6840      	ldr	r0, [r0, #4]
   3dcc4:	4770      	bx	lr
   3dcc6:	4618      	mov	r0, r3
   3dcc8:	4770      	bx	lr

0003dcca <linked_list_size_get>:
   3dcca:	6800      	ldr	r0, [r0, #0]
   3dccc:	4770      	bx	lr

0003dcce <linked_list_get_next>:
   3dcce:	6800      	ldr	r0, [r0, #0]
   3dcd0:	4770      	bx	lr

0003dcd2 <z_device_state_init>:
}
   3dcd2:	4770      	bx	lr

0003dcd4 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   3dcd4:	68c3      	ldr	r3, [r0, #12]
   3dcd6:	8818      	ldrh	r0, [r3, #0]
   3dcd8:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   3dcdc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   3dce0:	4258      	negs	r0, r3
   3dce2:	4158      	adcs	r0, r3
   3dce4:	4770      	bx	lr

0003dce6 <arch_system_halt>:
	__asm__ volatile(
   3dce6:	f04f 0220 	mov.w	r2, #32
   3dcea:	f3ef 8311 	mrs	r3, BASEPRI
   3dcee:	f382 8811 	msr	BASEPRI, r2
   3dcf2:	f3bf 8f6f 	isb	sy
	for (;;) {
   3dcf6:	e7fe      	b.n	3dcf6 <arch_system_halt+0x10>

0003dcf8 <main>:
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
   3dcf8:	bf00      	nop
}
   3dcfa:	4770      	bx	lr

0003dcfc <k_heap_init>:
{
   3dcfc:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   3dcfe:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   3dd02:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   3dd06:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   3dd0a:	f7e2 b991 	b.w	20030 <sys_heap_init>

0003dd0e <k_heap_alloc>:
{
   3dd0e:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   3dd10:	e9cd 2300 	strd	r2, r3, [sp]
   3dd14:	460a      	mov	r2, r1
   3dd16:	2104      	movs	r1, #4
   3dd18:	f7f5 fd5e 	bl	337d8 <k_heap_aligned_alloc>
}
   3dd1c:	b003      	add	sp, #12
   3dd1e:	f85d fb04 	ldr.w	pc, [sp], #4

0003dd22 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3dd22:	f3ef 8005 	mrs	r0, IPSR
}
   3dd26:	3800      	subs	r0, #0
   3dd28:	bf18      	it	ne
   3dd2a:	2001      	movne	r0, #1
   3dd2c:	4770      	bx	lr

0003dd2e <z_impl_k_thread_name_set>:
}
   3dd2e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3dd32:	4770      	bx	lr

0003dd34 <k_thread_name_get>:
}
   3dd34:	2000      	movs	r0, #0
   3dd36:	4770      	bx	lr

0003dd38 <z_impl_k_thread_start>:
	z_sched_start(thread);
   3dd38:	f7f7 bc80 	b.w	3563c <z_sched_start>

0003dd3c <z_pm_save_idle_exit>:
{
   3dd3c:	b508      	push	{r3, lr}
	pm_system_resume();
   3dd3e:	f7e4 fd47 	bl	227d0 <pm_system_resume>
}
   3dd42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   3dd46:	f7fc bba6 	b.w	3a496 <sys_clock_idle_exit>

0003dd4a <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   3dd4a:	2300      	movs	r3, #0
   3dd4c:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   3dd50:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   3dd54:	4618      	mov	r0, r3
   3dd56:	4770      	bx	lr

0003dd58 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   3dd58:	b15a      	cbz	r2, 3dd72 <z_impl_k_sem_init+0x1a>
   3dd5a:	428a      	cmp	r2, r1
   3dd5c:	d309      	bcc.n	3dd72 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   3dd5e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3dd62:	e9c0 1202 	strd	r1, r2, [r0, #8]
   3dd66:	e9c0 0000 	strd	r0, r0, [r0]
   3dd6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   3dd6e:	2000      	movs	r0, #0
   3dd70:	4770      	bx	lr
		return -EINVAL;
   3dd72:	f06f 0015 	mvn.w	r0, #21
}
   3dd76:	4770      	bx	lr

0003dd78 <notify_queue_locked>:
	if (queue != NULL) {
   3dd78:	b120      	cbz	r0, 3dd84 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   3dd7a:	2200      	movs	r2, #0
   3dd7c:	30d0      	adds	r0, #208	; 0xd0
   3dd7e:	4611      	mov	r1, r2
   3dd80:	f7f8 b8ac 	b.w	35edc <z_sched_wake>
}
   3dd84:	4770      	bx	lr

0003dd86 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   3dd86:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   3dd8a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3dd8e:	4283      	cmp	r3, r0
		return b2 - b1;
   3dd90:	bf14      	ite	ne
   3dd92:	1ac0      	subne	r0, r0, r3
	return 0;
   3dd94:	2000      	moveq	r0, #0
}
   3dd96:	4770      	bx	lr

0003dd98 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3dd98:	4603      	mov	r3, r0
   3dd9a:	b920      	cbnz	r0, 3dda6 <z_reschedule_irqlock+0xe>
   3dd9c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   3dda0:	b90a      	cbnz	r2, 3dda6 <z_reschedule_irqlock+0xe>
   3dda2:	f7e5 b99f 	b.w	230e4 <arch_swap>
	__asm__ volatile(
   3dda6:	f383 8811 	msr	BASEPRI, r3
   3ddaa:	f3bf 8f6f 	isb	sy
}
   3ddae:	4770      	bx	lr

0003ddb0 <z_reschedule_unlocked>:
	__asm__ volatile(
   3ddb0:	f04f 0320 	mov.w	r3, #32
   3ddb4:	f3ef 8011 	mrs	r0, BASEPRI
   3ddb8:	f383 8811 	msr	BASEPRI, r3
   3ddbc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3ddc0:	f7ff bfea 	b.w	3dd98 <z_reschedule_irqlock>

0003ddc4 <z_priq_dumb_best>:
	return list->head == list;
   3ddc4:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ddc6:	4298      	cmp	r0, r3
   3ddc8:	d004      	beq.n	3ddd4 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   3ddca:	2b00      	cmp	r3, #0
   3ddcc:	bf38      	it	cc
   3ddce:	2300      	movcc	r3, #0
   3ddd0:	4618      	mov	r0, r3
   3ddd2:	4770      	bx	lr
	struct k_thread *thread = NULL;
   3ddd4:	2000      	movs	r0, #0
}
   3ddd6:	4770      	bx	lr

0003ddd8 <z_unpend_all>:
{
   3ddd8:	b538      	push	{r3, r4, r5, lr}
   3ddda:	4605      	mov	r5, r0
	int need_sched = 0;
   3dddc:	2000      	movs	r0, #0
	return list->head == list;
   3ddde:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3dde0:	42a5      	cmp	r5, r4
   3dde2:	d000      	beq.n	3dde6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3dde4:	b904      	cbnz	r4, 3dde8 <z_unpend_all+0x10>
}
   3dde6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   3dde8:	4620      	mov	r0, r4
   3ddea:	f7f7 f863 	bl	34eb4 <z_unpend_thread>
		z_ready_thread(thread);
   3ddee:	4620      	mov	r0, r4
   3ddf0:	f7f7 fbdc 	bl	355ac <z_ready_thread>
		need_sched = 1;
   3ddf4:	2001      	movs	r0, #1
   3ddf6:	e7f2      	b.n	3ddde <z_unpend_all+0x6>

0003ddf8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   3ddf8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   3ddfa:	f7f8 fbc7 	bl	3658c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3ddfe:	bd08      	pop	{r3, pc}

0003de00 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3de00:	f7f8 bbc4 	b.w	3658c <sys_clock_tick_get>

0003de04 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3de04:	b108      	cbz	r0, 3de0a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   3de06:	f7e3 b8d7 	b.w	20fb8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   3de0a:	4770      	bx	lr

0003de0c <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   3de0c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3de0e:	1c4b      	adds	r3, r1, #1
   3de10:	bf08      	it	eq
   3de12:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   3de16:	4604      	mov	r4, r0
   3de18:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3de1a:	d013      	beq.n	3de44 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3de1c:	ea54 0105 	orrs.w	r1, r4, r5
   3de20:	d103      	bne.n	3de2a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3de22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   3de26:	f7f8 bbb1 	b.w	3658c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3de2a:	f06f 0101 	mvn.w	r1, #1
   3de2e:	1a0a      	subs	r2, r1, r0
   3de30:	f04f 31ff 	mov.w	r1, #4294967295
   3de34:	eb61 0305 	sbc.w	r3, r1, r5
   3de38:	2a00      	cmp	r2, #0
   3de3a:	f173 0100 	sbcs.w	r1, r3, #0
   3de3e:	db02      	blt.n	3de46 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   3de40:	4610      	mov	r0, r2
   3de42:	4619      	mov	r1, r3
}
   3de44:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   3de46:	f7f8 fba1 	bl	3658c <sys_clock_tick_get>
   3de4a:	2c01      	cmp	r4, #1
   3de4c:	f175 0300 	sbcs.w	r3, r5, #0
   3de50:	bfbc      	itt	lt
   3de52:	2401      	movlt	r4, #1
   3de54:	2500      	movlt	r5, #0
   3de56:	1820      	adds	r0, r4, r0
   3de58:	eb45 0101 	adc.w	r1, r5, r1
   3de5c:	e7f2      	b.n	3de44 <sys_clock_timeout_end_calc+0x38>

0003de5e <add_event>:
{
   3de5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3de60:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3de62:	e9d0 2300 	ldrd	r2, r3, [r0]
   3de66:	4290      	cmp	r0, r2
   3de68:	4604      	mov	r4, r0
   3de6a:	460d      	mov	r5, r1
   3de6c:	d105      	bne.n	3de7a <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   3de6e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3de70:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   3de74:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3de76:	6065      	str	r5, [r4, #4]
}
   3de78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   3de7a:	2b00      	cmp	r3, #0
   3de7c:	d0f7      	beq.n	3de6e <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3de7e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3de80:	b100      	cbz	r0, 3de84 <add_event+0x26>
   3de82:	3860      	subs	r0, #96	; 0x60
   3de84:	b107      	cbz	r7, 3de88 <add_event+0x2a>
   3de86:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3de88:	4639      	mov	r1, r7
   3de8a:	f7ff ff7c 	bl	3dd86 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3de8e:	2800      	cmp	r0, #0
   3de90:	dced      	bgt.n	3de6e <add_event+0x10>
	return list->head == list;
   3de92:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3de94:	42b4      	cmp	r4, r6
   3de96:	d0ea      	beq.n	3de6e <add_event+0x10>
   3de98:	2e00      	cmp	r6, #0
   3de9a:	bf38      	it	cc
   3de9c:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3de9e:	2e00      	cmp	r6, #0
   3dea0:	d0e5      	beq.n	3de6e <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   3dea2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3dea4:	b101      	cbz	r1, 3dea8 <add_event+0x4a>
   3dea6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   3dea8:	4638      	mov	r0, r7
   3deaa:	f7ff ff6c 	bl	3dd86 <z_sched_prio_cmp>
   3deae:	2800      	cmp	r0, #0
   3deb0:	dd05      	ble.n	3debe <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   3deb2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3deb4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   3deb8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   3deba:	6075      	str	r5, [r6, #4]
			return;
   3debc:	e7dc      	b.n	3de78 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   3debe:	6863      	ldr	r3, [r4, #4]
   3dec0:	42b3      	cmp	r3, r6
   3dec2:	d0d4      	beq.n	3de6e <add_event+0x10>
   3dec4:	6836      	ldr	r6, [r6, #0]
   3dec6:	e7ea      	b.n	3de9e <add_event+0x40>

0003dec8 <z_handle_obj_poll_events>:
{
   3dec8:	4603      	mov	r3, r0
	return list->head == list;
   3deca:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3decc:	4283      	cmp	r3, r0
   3dece:	d008      	beq.n	3dee2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   3ded0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   3ded4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3ded6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3ded8:	2300      	movs	r3, #0
	node->prev = NULL;
   3deda:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   3dede:	f7f8 bd95 	b.w	36a0c <signal_poll_event>
}
   3dee2:	4770      	bx	lr

0003dee4 <k_free>:
	if (ptr != NULL) {
   3dee4:	b120      	cbz	r0, 3def0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   3dee6:	1f01      	subs	r1, r0, #4
   3dee8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3deec:	f7f5 bd22 	b.w	33934 <k_heap_free>
}
   3def0:	4770      	bx	lr

0003def2 <k_malloc>:

void *k_malloc(size_t size)
{
   3def2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_malloc, _SYSTEM_HEAP);

	void *ret = k_aligned_alloc(sizeof(void *), size);
   3def4:	2004      	movs	r0, #4
   3def6:	f7f8 bfa1 	b.w	36e3c <k_aligned_alloc>

0003defa <k_calloc>:

	return ret;
}

void *k_calloc(size_t nmemb, size_t size)
{
   3defa:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   3defc:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   3df00:	b118      	cbz	r0, 3df0a <k_calloc+0x10>
   3df02:	fbb2 f0f0 	udiv	r0, r2, r0
   3df06:	4281      	cmp	r1, r0
   3df08:	d10c      	bne.n	3df24 <k_calloc+0x2a>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_calloc, _SYSTEM_HEAP, NULL);

		return NULL;
	}

	ret = k_malloc(bounds);
   3df0a:	4610      	mov	r0, r2
   3df0c:	9201      	str	r2, [sp, #4]
   3df0e:	f7ff fff0 	bl	3def2 <k_malloc>
	if (ret != NULL) {
   3df12:	4604      	mov	r4, r0
   3df14:	b118      	cbz	r0, 3df1e <k_calloc+0x24>
   3df16:	2100      	movs	r1, #0
   3df18:	9a01      	ldr	r2, [sp, #4]
   3df1a:	f000 f846 	bl	3dfaa <memset>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_calloc, _SYSTEM_HEAP, ret);

	return ret;
}
   3df1e:	4620      	mov	r0, r4
   3df20:	b002      	add	sp, #8
   3df22:	bd10      	pop	{r4, pc}
		return NULL;
   3df24:	2400      	movs	r4, #0
   3df26:	e7fa      	b.n	3df1e <k_calloc+0x24>

0003df28 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   3df28:	4770      	bx	lr

0003df2a <atoi>:
   3df2a:	220a      	movs	r2, #10
   3df2c:	2100      	movs	r1, #0
   3df2e:	f7f9 be79 	b.w	37c24 <strtol>

0003df32 <memchr>:
   3df32:	b2c9      	uxtb	r1, r1
   3df34:	4402      	add	r2, r0
   3df36:	b510      	push	{r4, lr}
   3df38:	4290      	cmp	r0, r2
   3df3a:	4603      	mov	r3, r0
   3df3c:	d101      	bne.n	3df42 <memchr+0x10>
   3df3e:	2300      	movs	r3, #0
   3df40:	e003      	b.n	3df4a <memchr+0x18>
   3df42:	781c      	ldrb	r4, [r3, #0]
   3df44:	3001      	adds	r0, #1
   3df46:	428c      	cmp	r4, r1
   3df48:	d1f6      	bne.n	3df38 <memchr+0x6>
   3df4a:	4618      	mov	r0, r3
   3df4c:	bd10      	pop	{r4, pc}

0003df4e <memcmp>:
   3df4e:	b530      	push	{r4, r5, lr}
   3df50:	3901      	subs	r1, #1
   3df52:	2400      	movs	r4, #0
   3df54:	42a2      	cmp	r2, r4
   3df56:	d101      	bne.n	3df5c <memcmp+0xe>
   3df58:	2000      	movs	r0, #0
   3df5a:	e005      	b.n	3df68 <memcmp+0x1a>
   3df5c:	5d03      	ldrb	r3, [r0, r4]
   3df5e:	3401      	adds	r4, #1
   3df60:	5d0d      	ldrb	r5, [r1, r4]
   3df62:	42ab      	cmp	r3, r5
   3df64:	d0f6      	beq.n	3df54 <memcmp+0x6>
   3df66:	1b58      	subs	r0, r3, r5
   3df68:	bd30      	pop	{r4, r5, pc}

0003df6a <memcpy>:
   3df6a:	440a      	add	r2, r1
   3df6c:	1e43      	subs	r3, r0, #1
   3df6e:	4291      	cmp	r1, r2
   3df70:	d100      	bne.n	3df74 <memcpy+0xa>
   3df72:	4770      	bx	lr
   3df74:	b510      	push	{r4, lr}
   3df76:	f811 4b01 	ldrb.w	r4, [r1], #1
   3df7a:	4291      	cmp	r1, r2
   3df7c:	f803 4f01 	strb.w	r4, [r3, #1]!
   3df80:	d1f9      	bne.n	3df76 <memcpy+0xc>
   3df82:	bd10      	pop	{r4, pc}

0003df84 <__memcpy_chk>:
   3df84:	429a      	cmp	r2, r3
   3df86:	b508      	push	{r3, lr}
   3df88:	d901      	bls.n	3df8e <__memcpy_chk+0xa>
   3df8a:	f7e6 f82f 	bl	23fec <__chk_fail>
   3df8e:	4281      	cmp	r1, r0
   3df90:	d804      	bhi.n	3df9c <__memcpy_chk+0x18>
   3df92:	188b      	adds	r3, r1, r2
   3df94:	4298      	cmp	r0, r3
   3df96:	d3f8      	bcc.n	3df8a <__memcpy_chk+0x6>
   3df98:	4281      	cmp	r1, r0
   3df9a:	d102      	bne.n	3dfa2 <__memcpy_chk+0x1e>
   3df9c:	1883      	adds	r3, r0, r2
   3df9e:	4299      	cmp	r1, r3
   3dfa0:	d3f3      	bcc.n	3df8a <__memcpy_chk+0x6>
   3dfa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3dfa6:	f7ff bfe0 	b.w	3df6a <memcpy>

0003dfaa <memset>:
   3dfaa:	4402      	add	r2, r0
   3dfac:	4603      	mov	r3, r0
   3dfae:	4293      	cmp	r3, r2
   3dfb0:	d100      	bne.n	3dfb4 <memset+0xa>
   3dfb2:	4770      	bx	lr
   3dfb4:	f803 1b01 	strb.w	r1, [r3], #1
   3dfb8:	e7f9      	b.n	3dfae <memset+0x4>

0003dfba <__sfputc_r>:
   3dfba:	6893      	ldr	r3, [r2, #8]
   3dfbc:	3b01      	subs	r3, #1
   3dfbe:	2b00      	cmp	r3, #0
   3dfc0:	6093      	str	r3, [r2, #8]
   3dfc2:	b410      	push	{r4}
   3dfc4:	da08      	bge.n	3dfd8 <__sfputc_r+0x1e>
   3dfc6:	6994      	ldr	r4, [r2, #24]
   3dfc8:	42a3      	cmp	r3, r4
   3dfca:	db01      	blt.n	3dfd0 <__sfputc_r+0x16>
   3dfcc:	290a      	cmp	r1, #10
   3dfce:	d103      	bne.n	3dfd8 <__sfputc_r+0x1e>
   3dfd0:	f85d 4b04 	ldr.w	r4, [sp], #4
   3dfd4:	f7f9 beb4 	b.w	37d40 <__swbuf_r>
   3dfd8:	6813      	ldr	r3, [r2, #0]
   3dfda:	1c58      	adds	r0, r3, #1
   3dfdc:	6010      	str	r0, [r2, #0]
   3dfde:	4608      	mov	r0, r1
   3dfe0:	7019      	strb	r1, [r3, #0]
   3dfe2:	f85d 4b04 	ldr.w	r4, [sp], #4
   3dfe6:	4770      	bx	lr

0003dfe8 <__sfputs_r>:
   3dfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3dfea:	4606      	mov	r6, r0
   3dfec:	460f      	mov	r7, r1
   3dfee:	4614      	mov	r4, r2
   3dff0:	18d5      	adds	r5, r2, r3
   3dff2:	42ac      	cmp	r4, r5
   3dff4:	d101      	bne.n	3dffa <__sfputs_r+0x12>
   3dff6:	2000      	movs	r0, #0
   3dff8:	e007      	b.n	3e00a <__sfputs_r+0x22>
   3dffa:	463a      	mov	r2, r7
   3dffc:	f814 1b01 	ldrb.w	r1, [r4], #1
   3e000:	4630      	mov	r0, r6
   3e002:	f7ff ffda 	bl	3dfba <__sfputc_r>
   3e006:	1c43      	adds	r3, r0, #1
   3e008:	d1f3      	bne.n	3dff2 <__sfputs_r+0xa>
   3e00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003e00c <__cvt>:
   3e00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   3e010:	ec55 4b10 	vmov	r4, r5, d0
   3e014:	2d00      	cmp	r5, #0
   3e016:	460e      	mov	r6, r1
   3e018:	4619      	mov	r1, r3
   3e01a:	462b      	mov	r3, r5
   3e01c:	bfb4      	ite	lt
   3e01e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   3e022:	2300      	movge	r3, #0
   3e024:	4691      	mov	r9, r2
   3e026:	bfbf      	itttt	lt
   3e028:	4622      	movlt	r2, r4
   3e02a:	461d      	movlt	r5, r3
   3e02c:	232d      	movlt	r3, #45	; 0x2d
   3e02e:	4614      	movlt	r4, r2
   3e030:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   3e034:	700b      	strb	r3, [r1, #0]
   3e036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3e038:	f023 0820 	bic.w	r8, r3, #32
   3e03c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   3e040:	d005      	beq.n	3e04e <__cvt+0x42>
   3e042:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   3e046:	d100      	bne.n	3e04a <__cvt+0x3e>
   3e048:	3601      	adds	r6, #1
   3e04a:	2102      	movs	r1, #2
   3e04c:	e000      	b.n	3e050 <__cvt+0x44>
   3e04e:	2103      	movs	r1, #3
   3e050:	ab03      	add	r3, sp, #12
   3e052:	4632      	mov	r2, r6
   3e054:	9301      	str	r3, [sp, #4]
   3e056:	ab02      	add	r3, sp, #8
   3e058:	ec45 4b10 	vmov	d0, r4, r5
   3e05c:	9300      	str	r3, [sp, #0]
   3e05e:	4653      	mov	r3, sl
   3e060:	f7e0 fb0a 	bl	1e678 <_dtoa_r>
   3e064:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   3e068:	4607      	mov	r7, r0
   3e06a:	d102      	bne.n	3e072 <__cvt+0x66>
   3e06c:	f019 0f01 	tst.w	r9, #1
   3e070:	d022      	beq.n	3e0b8 <__cvt+0xac>
   3e072:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   3e076:	eb07 0906 	add.w	r9, r7, r6
   3e07a:	d110      	bne.n	3e09e <__cvt+0x92>
   3e07c:	783b      	ldrb	r3, [r7, #0]
   3e07e:	2b30      	cmp	r3, #48	; 0x30
   3e080:	d10a      	bne.n	3e098 <__cvt+0x8c>
   3e082:	2200      	movs	r2, #0
   3e084:	2300      	movs	r3, #0
   3e086:	4620      	mov	r0, r4
   3e088:	4629      	mov	r1, r5
   3e08a:	f7de fdfd 	bl	1cc88 <__aeabi_dcmpeq>
   3e08e:	b918      	cbnz	r0, 3e098 <__cvt+0x8c>
   3e090:	f1c6 0601 	rsb	r6, r6, #1
   3e094:	f8ca 6000 	str.w	r6, [sl]
   3e098:	f8da 3000 	ldr.w	r3, [sl]
   3e09c:	4499      	add	r9, r3
   3e09e:	2200      	movs	r2, #0
   3e0a0:	2300      	movs	r3, #0
   3e0a2:	4620      	mov	r0, r4
   3e0a4:	4629      	mov	r1, r5
   3e0a6:	f7de fdef 	bl	1cc88 <__aeabi_dcmpeq>
   3e0aa:	b108      	cbz	r0, 3e0b0 <__cvt+0xa4>
   3e0ac:	f8cd 900c 	str.w	r9, [sp, #12]
   3e0b0:	2230      	movs	r2, #48	; 0x30
   3e0b2:	9b03      	ldr	r3, [sp, #12]
   3e0b4:	454b      	cmp	r3, r9
   3e0b6:	d307      	bcc.n	3e0c8 <__cvt+0xbc>
   3e0b8:	9b03      	ldr	r3, [sp, #12]
   3e0ba:	4638      	mov	r0, r7
   3e0bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3e0be:	1bdb      	subs	r3, r3, r7
   3e0c0:	6013      	str	r3, [r2, #0]
   3e0c2:	b004      	add	sp, #16
   3e0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3e0c8:	1c59      	adds	r1, r3, #1
   3e0ca:	9103      	str	r1, [sp, #12]
   3e0cc:	701a      	strb	r2, [r3, #0]
   3e0ce:	e7f0      	b.n	3e0b2 <__cvt+0xa6>

0003e0d0 <__exponent>:
   3e0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3e0d2:	2900      	cmp	r1, #0
   3e0d4:	4603      	mov	r3, r0
   3e0d6:	bfb8      	it	lt
   3e0d8:	4249      	neglt	r1, r1
   3e0da:	f803 2b02 	strb.w	r2, [r3], #2
   3e0de:	bfb4      	ite	lt
   3e0e0:	222d      	movlt	r2, #45	; 0x2d
   3e0e2:	222b      	movge	r2, #43	; 0x2b
   3e0e4:	2909      	cmp	r1, #9
   3e0e6:	7042      	strb	r2, [r0, #1]
   3e0e8:	dd2a      	ble.n	3e140 <__exponent+0x70>
   3e0ea:	f10d 0407 	add.w	r4, sp, #7
   3e0ee:	270a      	movs	r7, #10
   3e0f0:	46a4      	mov	ip, r4
   3e0f2:	460a      	mov	r2, r1
   3e0f4:	46a6      	mov	lr, r4
   3e0f6:	3c01      	subs	r4, #1
   3e0f8:	2a63      	cmp	r2, #99	; 0x63
   3e0fa:	fb91 f6f7 	sdiv	r6, r1, r7
   3e0fe:	fb07 1516 	mls	r5, r7, r6, r1
   3e102:	4631      	mov	r1, r6
   3e104:	f105 0530 	add.w	r5, r5, #48	; 0x30
   3e108:	f80e 5c01 	strb.w	r5, [lr, #-1]
   3e10c:	dcf1      	bgt.n	3e0f2 <__exponent+0x22>
   3e10e:	3130      	adds	r1, #48	; 0x30
   3e110:	f1ae 0502 	sub.w	r5, lr, #2
   3e114:	f804 1c01 	strb.w	r1, [r4, #-1]
   3e118:	1c44      	adds	r4, r0, #1
   3e11a:	4629      	mov	r1, r5
   3e11c:	4561      	cmp	r1, ip
   3e11e:	d30a      	bcc.n	3e136 <__exponent+0x66>
   3e120:	f10d 0209 	add.w	r2, sp, #9
   3e124:	eba2 020e 	sub.w	r2, r2, lr
   3e128:	4565      	cmp	r5, ip
   3e12a:	bf88      	it	hi
   3e12c:	2200      	movhi	r2, #0
   3e12e:	4413      	add	r3, r2
   3e130:	1a18      	subs	r0, r3, r0
   3e132:	b003      	add	sp, #12
   3e134:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3e136:	f811 2b01 	ldrb.w	r2, [r1], #1
   3e13a:	f804 2f01 	strb.w	r2, [r4, #1]!
   3e13e:	e7ed      	b.n	3e11c <__exponent+0x4c>
   3e140:	2330      	movs	r3, #48	; 0x30
   3e142:	3130      	adds	r1, #48	; 0x30
   3e144:	7083      	strb	r3, [r0, #2]
   3e146:	1d03      	adds	r3, r0, #4
   3e148:	70c1      	strb	r1, [r0, #3]
   3e14a:	e7f1      	b.n	3e130 <__exponent+0x60>

0003e14c <_printf_common>:
   3e14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3e150:	4616      	mov	r6, r2
   3e152:	4699      	mov	r9, r3
   3e154:	688a      	ldr	r2, [r1, #8]
   3e156:	4607      	mov	r7, r0
   3e158:	690b      	ldr	r3, [r1, #16]
   3e15a:	460c      	mov	r4, r1
   3e15c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   3e160:	4293      	cmp	r3, r2
   3e162:	bfb8      	it	lt
   3e164:	4613      	movlt	r3, r2
   3e166:	6033      	str	r3, [r6, #0]
   3e168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   3e16c:	b10a      	cbz	r2, 3e172 <_printf_common+0x26>
   3e16e:	3301      	adds	r3, #1
   3e170:	6033      	str	r3, [r6, #0]
   3e172:	6823      	ldr	r3, [r4, #0]
   3e174:	0699      	lsls	r1, r3, #26
   3e176:	bf42      	ittt	mi
   3e178:	6833      	ldrmi	r3, [r6, #0]
   3e17a:	3302      	addmi	r3, #2
   3e17c:	6033      	strmi	r3, [r6, #0]
   3e17e:	6825      	ldr	r5, [r4, #0]
   3e180:	f015 0506 	ands.w	r5, r5, #6
   3e184:	d106      	bne.n	3e194 <_printf_common+0x48>
   3e186:	f104 0a19 	add.w	sl, r4, #25
   3e18a:	68e3      	ldr	r3, [r4, #12]
   3e18c:	6832      	ldr	r2, [r6, #0]
   3e18e:	1a9b      	subs	r3, r3, r2
   3e190:	42ab      	cmp	r3, r5
   3e192:	dc29      	bgt.n	3e1e8 <_printf_common+0x9c>
   3e194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   3e198:	1e13      	subs	r3, r2, #0
   3e19a:	6822      	ldr	r2, [r4, #0]
   3e19c:	bf18      	it	ne
   3e19e:	2301      	movne	r3, #1
   3e1a0:	0692      	lsls	r2, r2, #26
   3e1a2:	d42e      	bmi.n	3e202 <_printf_common+0xb6>
   3e1a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3e1a8:	4649      	mov	r1, r9
   3e1aa:	4638      	mov	r0, r7
   3e1ac:	47c0      	blx	r8
   3e1ae:	3001      	adds	r0, #1
   3e1b0:	d021      	beq.n	3e1f6 <_printf_common+0xaa>
   3e1b2:	6823      	ldr	r3, [r4, #0]
   3e1b4:	341a      	adds	r4, #26
   3e1b6:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   3e1ba:	f003 0306 	and.w	r3, r3, #6
   3e1be:	6832      	ldr	r2, [r6, #0]
   3e1c0:	2600      	movs	r6, #0
   3e1c2:	2b04      	cmp	r3, #4
   3e1c4:	f854 3c12 	ldr.w	r3, [r4, #-18]
   3e1c8:	bf08      	it	eq
   3e1ca:	1aad      	subeq	r5, r5, r2
   3e1cc:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   3e1d0:	bf14      	ite	ne
   3e1d2:	2500      	movne	r5, #0
   3e1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   3e1d8:	4293      	cmp	r3, r2
   3e1da:	bfc4      	itt	gt
   3e1dc:	1a9b      	subgt	r3, r3, r2
   3e1de:	18ed      	addgt	r5, r5, r3
   3e1e0:	42b5      	cmp	r5, r6
   3e1e2:	d11a      	bne.n	3e21a <_printf_common+0xce>
   3e1e4:	2000      	movs	r0, #0
   3e1e6:	e008      	b.n	3e1fa <_printf_common+0xae>
   3e1e8:	2301      	movs	r3, #1
   3e1ea:	4652      	mov	r2, sl
   3e1ec:	4649      	mov	r1, r9
   3e1ee:	4638      	mov	r0, r7
   3e1f0:	47c0      	blx	r8
   3e1f2:	3001      	adds	r0, #1
   3e1f4:	d103      	bne.n	3e1fe <_printf_common+0xb2>
   3e1f6:	f04f 30ff 	mov.w	r0, #4294967295
   3e1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3e1fe:	3501      	adds	r5, #1
   3e200:	e7c3      	b.n	3e18a <_printf_common+0x3e>
   3e202:	18e1      	adds	r1, r4, r3
   3e204:	1c5a      	adds	r2, r3, #1
   3e206:	2030      	movs	r0, #48	; 0x30
   3e208:	3302      	adds	r3, #2
   3e20a:	4422      	add	r2, r4
   3e20c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   3e210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   3e214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   3e218:	e7c4      	b.n	3e1a4 <_printf_common+0x58>
   3e21a:	2301      	movs	r3, #1
   3e21c:	4622      	mov	r2, r4
   3e21e:	4649      	mov	r1, r9
   3e220:	4638      	mov	r0, r7
   3e222:	47c0      	blx	r8
   3e224:	3001      	adds	r0, #1
   3e226:	d0e6      	beq.n	3e1f6 <_printf_common+0xaa>
   3e228:	3601      	adds	r6, #1
   3e22a:	e7d9      	b.n	3e1e0 <_printf_common+0x94>

0003e22c <__sread>:
   3e22c:	b510      	push	{r4, lr}
   3e22e:	460c      	mov	r4, r1
   3e230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3e234:	f7fa ff0a 	bl	3904c <_read_r>
   3e238:	2800      	cmp	r0, #0
   3e23a:	bfab      	itete	ge
   3e23c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   3e23e:	89a3      	ldrhlt	r3, [r4, #12]
   3e240:	181b      	addge	r3, r3, r0
   3e242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   3e246:	bfac      	ite	ge
   3e248:	6563      	strge	r3, [r4, #84]	; 0x54
   3e24a:	81a3      	strhlt	r3, [r4, #12]
   3e24c:	bd10      	pop	{r4, pc}

0003e24e <__seofread>:
   3e24e:	2000      	movs	r0, #0
   3e250:	4770      	bx	lr

0003e252 <__swrite>:
   3e252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e256:	461f      	mov	r7, r3
   3e258:	898b      	ldrh	r3, [r1, #12]
   3e25a:	4605      	mov	r5, r0
   3e25c:	460c      	mov	r4, r1
   3e25e:	05db      	lsls	r3, r3, #23
   3e260:	4616      	mov	r6, r2
   3e262:	d505      	bpl.n	3e270 <__swrite+0x1e>
   3e264:	2302      	movs	r3, #2
   3e266:	2200      	movs	r2, #0
   3e268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3e26c:	f7fa fa02 	bl	38674 <_lseek_r>
   3e270:	89a3      	ldrh	r3, [r4, #12]
   3e272:	4632      	mov	r2, r6
   3e274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3e278:	4628      	mov	r0, r5
   3e27a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   3e27e:	81a3      	strh	r3, [r4, #12]
   3e280:	463b      	mov	r3, r7
   3e282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3e286:	f7f9 bdad 	b.w	37de4 <_write_r>

0003e28a <__sseek>:
   3e28a:	b510      	push	{r4, lr}
   3e28c:	460c      	mov	r4, r1
   3e28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3e292:	f7fa f9ef 	bl	38674 <_lseek_r>
   3e296:	1c43      	adds	r3, r0, #1
   3e298:	89a3      	ldrh	r3, [r4, #12]
   3e29a:	bf15      	itete	ne
   3e29c:	6560      	strne	r0, [r4, #84]	; 0x54
   3e29e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   3e2a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   3e2a6:	81a3      	strheq	r3, [r4, #12]
   3e2a8:	bf18      	it	ne
   3e2aa:	81a3      	strhne	r3, [r4, #12]
   3e2ac:	bd10      	pop	{r4, pc}

0003e2ae <__sclose>:
   3e2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3e2b2:	f7f9 be17 	b.w	37ee4 <_close_r>

0003e2b6 <strchr>:
   3e2b6:	b2c9      	uxtb	r1, r1
   3e2b8:	4603      	mov	r3, r0
   3e2ba:	f810 2b01 	ldrb.w	r2, [r0], #1
   3e2be:	b11a      	cbz	r2, 3e2c8 <strchr+0x12>
   3e2c0:	428a      	cmp	r2, r1
   3e2c2:	d1f9      	bne.n	3e2b8 <strchr+0x2>
   3e2c4:	4618      	mov	r0, r3
   3e2c6:	4770      	bx	lr
   3e2c8:	2900      	cmp	r1, #0
   3e2ca:	bf18      	it	ne
   3e2cc:	2300      	movne	r3, #0
   3e2ce:	e7f9      	b.n	3e2c4 <strchr+0xe>

0003e2d0 <strcpy>:
   3e2d0:	4603      	mov	r3, r0
   3e2d2:	f811 2b01 	ldrb.w	r2, [r1], #1
   3e2d6:	f803 2b01 	strb.w	r2, [r3], #1
   3e2da:	2a00      	cmp	r2, #0
   3e2dc:	d1f9      	bne.n	3e2d2 <strcpy+0x2>
   3e2de:	4770      	bx	lr

0003e2e0 <strncmp>:
   3e2e0:	b510      	push	{r4, lr}
   3e2e2:	b16a      	cbz	r2, 3e300 <strncmp+0x20>
   3e2e4:	3901      	subs	r1, #1
   3e2e6:	1884      	adds	r4, r0, r2
   3e2e8:	f810 3b01 	ldrb.w	r3, [r0], #1
   3e2ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   3e2f0:	4293      	cmp	r3, r2
   3e2f2:	d103      	bne.n	3e2fc <strncmp+0x1c>
   3e2f4:	42a0      	cmp	r0, r4
   3e2f6:	d001      	beq.n	3e2fc <strncmp+0x1c>
   3e2f8:	2b00      	cmp	r3, #0
   3e2fa:	d1f5      	bne.n	3e2e8 <strncmp+0x8>
   3e2fc:	1a98      	subs	r0, r3, r2
   3e2fe:	bd10      	pop	{r4, pc}
   3e300:	4610      	mov	r0, r2
   3e302:	e7fc      	b.n	3e2fe <strncmp+0x1e>

0003e304 <strncpy>:
   3e304:	3901      	subs	r1, #1
   3e306:	4603      	mov	r3, r0
   3e308:	b510      	push	{r4, lr}
   3e30a:	b132      	cbz	r2, 3e31a <strncpy+0x16>
   3e30c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   3e310:	3a01      	subs	r2, #1
   3e312:	f803 4b01 	strb.w	r4, [r3], #1
   3e316:	2c00      	cmp	r4, #0
   3e318:	d1f7      	bne.n	3e30a <strncpy+0x6>
   3e31a:	441a      	add	r2, r3
   3e31c:	2100      	movs	r1, #0
   3e31e:	4293      	cmp	r3, r2
   3e320:	d100      	bne.n	3e324 <strncpy+0x20>
   3e322:	bd10      	pop	{r4, pc}
   3e324:	f803 1b01 	strb.w	r1, [r3], #1
   3e328:	e7f9      	b.n	3e31e <strncpy+0x1a>

0003e32a <strnlen>:
   3e32a:	4602      	mov	r2, r0
   3e32c:	4401      	add	r1, r0
   3e32e:	b510      	push	{r4, lr}
   3e330:	428a      	cmp	r2, r1
   3e332:	4613      	mov	r3, r2
   3e334:	d101      	bne.n	3e33a <strnlen+0x10>
   3e336:	1a18      	subs	r0, r3, r0
   3e338:	bd10      	pop	{r4, pc}
   3e33a:	781c      	ldrb	r4, [r3, #0]
   3e33c:	3201      	adds	r2, #1
   3e33e:	2c00      	cmp	r4, #0
   3e340:	d1f6      	bne.n	3e330 <strnlen+0x6>
   3e342:	e7f8      	b.n	3e336 <strnlen+0xc>

0003e344 <strstr>:
   3e344:	b5f0      	push	{r4, r5, r6, r7, lr}
   3e346:	780c      	ldrb	r4, [r1, #0]
   3e348:	b164      	cbz	r4, 3e364 <strstr+0x20>
   3e34a:	4603      	mov	r3, r0
   3e34c:	781a      	ldrb	r2, [r3, #0]
   3e34e:	4618      	mov	r0, r3
   3e350:	1c5e      	adds	r6, r3, #1
   3e352:	b90a      	cbnz	r2, 3e358 <strstr+0x14>
   3e354:	4610      	mov	r0, r2
   3e356:	e005      	b.n	3e364 <strstr+0x20>
   3e358:	4294      	cmp	r4, r2
   3e35a:	d108      	bne.n	3e36e <strstr+0x2a>
   3e35c:	460d      	mov	r5, r1
   3e35e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   3e362:	b902      	cbnz	r2, 3e366 <strstr+0x22>
   3e364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3e366:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   3e36a:	4297      	cmp	r7, r2
   3e36c:	d0f7      	beq.n	3e35e <strstr+0x1a>
   3e36e:	4633      	mov	r3, r6
   3e370:	e7ec      	b.n	3e34c <strstr+0x8>

0003e372 <sulp>:
   3e372:	b570      	push	{r4, r5, r6, lr}
   3e374:	4604      	mov	r4, r0
   3e376:	460d      	mov	r5, r1
   3e378:	4616      	mov	r6, r2
   3e37a:	ec45 4b10 	vmov	d0, r4, r5
   3e37e:	f7fa fa25 	bl	387cc <__ulp>
   3e382:	ec51 0b10 	vmov	r0, r1, d0
   3e386:	b17e      	cbz	r6, 3e3a8 <sulp+0x36>
   3e388:	f3c5 530a 	ubfx	r3, r5, #20, #11
   3e38c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   3e390:	2b00      	cmp	r3, #0
   3e392:	dd09      	ble.n	3e3a8 <sulp+0x36>
   3e394:	051b      	lsls	r3, r3, #20
   3e396:	2400      	movs	r4, #0
   3e398:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   3e39c:	4622      	mov	r2, r4
   3e39e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   3e3a2:	462b      	mov	r3, r5
   3e3a4:	f7de fa08 	bl	1c7b8 <__aeabi_dmul>
   3e3a8:	bd70      	pop	{r4, r5, r6, pc}

0003e3aa <_strtol_r>:
   3e3aa:	f7f9 bbc3 	b.w	37b34 <_strtol_l.isra.0>

0003e3ae <_strtoul_r>:
   3e3ae:	f7f9 bc43 	b.w	37c38 <_strtoul_l.isra.0>

0003e3b2 <abort>:
   3e3b2:	2006      	movs	r0, #6
   3e3b4:	b508      	push	{r3, lr}
   3e3b6:	f7fa fe5b 	bl	39070 <raise>
   3e3ba:	2001      	movs	r0, #1
   3e3bc:	f7e5 fdec 	bl	23f98 <_exit>

0003e3c0 <quorem>:
   3e3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e3c4:	6903      	ldr	r3, [r0, #16]
   3e3c6:	4607      	mov	r7, r0
   3e3c8:	690c      	ldr	r4, [r1, #16]
   3e3ca:	42a3      	cmp	r3, r4
   3e3cc:	f2c0 8085 	blt.w	3e4da <quorem+0x11a>
   3e3d0:	3c01      	subs	r4, #1
   3e3d2:	f100 0514 	add.w	r5, r0, #20
   3e3d6:	f101 0814 	add.w	r8, r1, #20
   3e3da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3e3de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3e3e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   3e3e6:	9301      	str	r3, [sp, #4]
   3e3e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   3e3ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   3e3f0:	3301      	adds	r3, #1
   3e3f2:	429a      	cmp	r2, r3
   3e3f4:	fbb2 f6f3 	udiv	r6, r2, r3
   3e3f8:	d333      	bcc.n	3e462 <quorem+0xa2>
   3e3fa:	f04f 0e00 	mov.w	lr, #0
   3e3fe:	4640      	mov	r0, r8
   3e400:	46ac      	mov	ip, r5
   3e402:	46f2      	mov	sl, lr
   3e404:	f850 2b04 	ldr.w	r2, [r0], #4
   3e408:	b293      	uxth	r3, r2
   3e40a:	4581      	cmp	r9, r0
   3e40c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   3e410:	fb06 e303 	mla	r3, r6, r3, lr
   3e414:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   3e418:	b29b      	uxth	r3, r3
   3e41a:	fb06 e202 	mla	r2, r6, r2, lr
   3e41e:	ebaa 0303 	sub.w	r3, sl, r3
   3e422:	f8dc a000 	ldr.w	sl, [ip]
   3e426:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   3e42a:	fa1f fa8a 	uxth.w	sl, sl
   3e42e:	4453      	add	r3, sl
   3e430:	fa1f fa82 	uxth.w	sl, r2
   3e434:	f8dc 2000 	ldr.w	r2, [ip]
   3e438:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   3e43c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   3e440:	b29b      	uxth	r3, r3
   3e442:	ea4f 4a22 	mov.w	sl, r2, asr #16
   3e446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3e44a:	f84c 3b04 	str.w	r3, [ip], #4
   3e44e:	d2d9      	bcs.n	3e404 <quorem+0x44>
   3e450:	f855 300b 	ldr.w	r3, [r5, fp]
   3e454:	b92b      	cbnz	r3, 3e462 <quorem+0xa2>
   3e456:	9b01      	ldr	r3, [sp, #4]
   3e458:	3b04      	subs	r3, #4
   3e45a:	429d      	cmp	r5, r3
   3e45c:	461a      	mov	r2, r3
   3e45e:	d330      	bcc.n	3e4c2 <quorem+0x102>
   3e460:	613c      	str	r4, [r7, #16]
   3e462:	4638      	mov	r0, r7
   3e464:	f000 fc06 	bl	3ec74 <__mcmp>
   3e468:	2800      	cmp	r0, #0
   3e46a:	db26      	blt.n	3e4ba <quorem+0xfa>
   3e46c:	3601      	adds	r6, #1
   3e46e:	4628      	mov	r0, r5
   3e470:	f04f 0c00 	mov.w	ip, #0
   3e474:	f858 1b04 	ldr.w	r1, [r8], #4
   3e478:	f8d0 e000 	ldr.w	lr, [r0]
   3e47c:	b28b      	uxth	r3, r1
   3e47e:	45c1      	cmp	r9, r8
   3e480:	fa1f f28e 	uxth.w	r2, lr
   3e484:	ebac 0303 	sub.w	r3, ip, r3
   3e488:	4413      	add	r3, r2
   3e48a:	ea4f 4211 	mov.w	r2, r1, lsr #16
   3e48e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   3e492:	eb02 4223 	add.w	r2, r2, r3, asr #16
   3e496:	b29b      	uxth	r3, r3
   3e498:	ea4f 4c22 	mov.w	ip, r2, asr #16
   3e49c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3e4a0:	f840 3b04 	str.w	r3, [r0], #4
   3e4a4:	d2e6      	bcs.n	3e474 <quorem+0xb4>
   3e4a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3e4aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3e4ae:	b922      	cbnz	r2, 3e4ba <quorem+0xfa>
   3e4b0:	3b04      	subs	r3, #4
   3e4b2:	429d      	cmp	r5, r3
   3e4b4:	461a      	mov	r2, r3
   3e4b6:	d30a      	bcc.n	3e4ce <quorem+0x10e>
   3e4b8:	613c      	str	r4, [r7, #16]
   3e4ba:	4630      	mov	r0, r6
   3e4bc:	b003      	add	sp, #12
   3e4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e4c2:	6812      	ldr	r2, [r2, #0]
   3e4c4:	3b04      	subs	r3, #4
   3e4c6:	2a00      	cmp	r2, #0
   3e4c8:	d1ca      	bne.n	3e460 <quorem+0xa0>
   3e4ca:	3c01      	subs	r4, #1
   3e4cc:	e7c5      	b.n	3e45a <quorem+0x9a>
   3e4ce:	6812      	ldr	r2, [r2, #0]
   3e4d0:	3b04      	subs	r3, #4
   3e4d2:	2a00      	cmp	r2, #0
   3e4d4:	d1f0      	bne.n	3e4b8 <quorem+0xf8>
   3e4d6:	3c01      	subs	r4, #1
   3e4d8:	e7eb      	b.n	3e4b2 <quorem+0xf2>
   3e4da:	2000      	movs	r0, #0
   3e4dc:	e7ee      	b.n	3e4bc <quorem+0xfc>

0003e4de <__sfmoreglue>:
   3e4de:	b570      	push	{r4, r5, r6, lr}
   3e4e0:	1e4a      	subs	r2, r1, #1
   3e4e2:	2568      	movs	r5, #104	; 0x68
   3e4e4:	460e      	mov	r6, r1
   3e4e6:	4355      	muls	r5, r2
   3e4e8:	f105 0174 	add.w	r1, r5, #116	; 0x74
   3e4ec:	f7f8 fda0 	bl	37030 <_malloc_r>
   3e4f0:	4604      	mov	r4, r0
   3e4f2:	b140      	cbz	r0, 3e506 <__sfmoreglue+0x28>
   3e4f4:	2100      	movs	r1, #0
   3e4f6:	f105 0268 	add.w	r2, r5, #104	; 0x68
   3e4fa:	e9c0 1600 	strd	r1, r6, [r0]
   3e4fe:	300c      	adds	r0, #12
   3e500:	60a0      	str	r0, [r4, #8]
   3e502:	f7ff fd52 	bl	3dfaa <memset>
   3e506:	4620      	mov	r0, r4
   3e508:	bd70      	pop	{r4, r5, r6, pc}

0003e50a <_fwalk_reent>:
   3e50a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e50e:	4606      	mov	r6, r0
   3e510:	4688      	mov	r8, r1
   3e512:	f100 0448 	add.w	r4, r0, #72	; 0x48
   3e516:	2700      	movs	r7, #0
   3e518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   3e51c:	f1b9 0901 	subs.w	r9, r9, #1
   3e520:	d505      	bpl.n	3e52e <_fwalk_reent+0x24>
   3e522:	6824      	ldr	r4, [r4, #0]
   3e524:	2c00      	cmp	r4, #0
   3e526:	d1f7      	bne.n	3e518 <_fwalk_reent+0xe>
   3e528:	4638      	mov	r0, r7
   3e52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3e52e:	89ab      	ldrh	r3, [r5, #12]
   3e530:	2b01      	cmp	r3, #1
   3e532:	d907      	bls.n	3e544 <_fwalk_reent+0x3a>
   3e534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   3e538:	3301      	adds	r3, #1
   3e53a:	d003      	beq.n	3e544 <_fwalk_reent+0x3a>
   3e53c:	4629      	mov	r1, r5
   3e53e:	4630      	mov	r0, r6
   3e540:	47c0      	blx	r8
   3e542:	4307      	orrs	r7, r0
   3e544:	3568      	adds	r5, #104	; 0x68
   3e546:	e7e9      	b.n	3e51c <_fwalk_reent+0x12>

0003e548 <rshift>:
   3e548:	6903      	ldr	r3, [r0, #16]
   3e54a:	114a      	asrs	r2, r1, #5
   3e54c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   3e550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3e554:	f100 0414 	add.w	r4, r0, #20
   3e558:	dd45      	ble.n	3e5e6 <rshift+0x9e>
   3e55a:	f011 011f 	ands.w	r1, r1, #31
   3e55e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   3e562:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   3e566:	d10c      	bne.n	3e582 <rshift+0x3a>
   3e568:	f100 0710 	add.w	r7, r0, #16
   3e56c:	4629      	mov	r1, r5
   3e56e:	42b1      	cmp	r1, r6
   3e570:	d334      	bcc.n	3e5dc <rshift+0x94>
   3e572:	1a9b      	subs	r3, r3, r2
   3e574:	1eea      	subs	r2, r5, #3
   3e576:	009b      	lsls	r3, r3, #2
   3e578:	4296      	cmp	r6, r2
   3e57a:	bf38      	it	cc
   3e57c:	2300      	movcc	r3, #0
   3e57e:	4423      	add	r3, r4
   3e580:	e015      	b.n	3e5ae <rshift+0x66>
   3e582:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   3e586:	f1c1 0820 	rsb	r8, r1, #32
   3e58a:	f105 0e04 	add.w	lr, r5, #4
   3e58e:	46a1      	mov	r9, r4
   3e590:	40cf      	lsrs	r7, r1
   3e592:	4576      	cmp	r6, lr
   3e594:	46f4      	mov	ip, lr
   3e596:	d815      	bhi.n	3e5c4 <rshift+0x7c>
   3e598:	1a9b      	subs	r3, r3, r2
   3e59a:	3501      	adds	r5, #1
   3e59c:	009a      	lsls	r2, r3, #2
   3e59e:	3a04      	subs	r2, #4
   3e5a0:	42ae      	cmp	r6, r5
   3e5a2:	bf38      	it	cc
   3e5a4:	2200      	movcc	r2, #0
   3e5a6:	18a3      	adds	r3, r4, r2
   3e5a8:	50a7      	str	r7, [r4, r2]
   3e5aa:	b107      	cbz	r7, 3e5ae <rshift+0x66>
   3e5ac:	3304      	adds	r3, #4
   3e5ae:	1b1a      	subs	r2, r3, r4
   3e5b0:	42a3      	cmp	r3, r4
   3e5b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
   3e5b6:	bf08      	it	eq
   3e5b8:	2300      	moveq	r3, #0
   3e5ba:	6102      	str	r2, [r0, #16]
   3e5bc:	bf08      	it	eq
   3e5be:	6143      	streq	r3, [r0, #20]
   3e5c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3e5c4:	f8dc c000 	ldr.w	ip, [ip]
   3e5c8:	fa0c fc08 	lsl.w	ip, ip, r8
   3e5cc:	ea4c 0707 	orr.w	r7, ip, r7
   3e5d0:	f849 7b04 	str.w	r7, [r9], #4
   3e5d4:	f85e 7b04 	ldr.w	r7, [lr], #4
   3e5d8:	40cf      	lsrs	r7, r1
   3e5da:	e7da      	b.n	3e592 <rshift+0x4a>
   3e5dc:	f851 cb04 	ldr.w	ip, [r1], #4
   3e5e0:	f847 cf04 	str.w	ip, [r7, #4]!
   3e5e4:	e7c3      	b.n	3e56e <rshift+0x26>
   3e5e6:	4623      	mov	r3, r4
   3e5e8:	e7e1      	b.n	3e5ae <rshift+0x66>

0003e5ea <__hexdig_fun>:
   3e5ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   3e5ee:	2b09      	cmp	r3, #9
   3e5f0:	d802      	bhi.n	3e5f8 <__hexdig_fun+0xe>
   3e5f2:	3820      	subs	r0, #32
   3e5f4:	b2c0      	uxtb	r0, r0
   3e5f6:	4770      	bx	lr
   3e5f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   3e5fc:	2b05      	cmp	r3, #5
   3e5fe:	d801      	bhi.n	3e604 <__hexdig_fun+0x1a>
   3e600:	3847      	subs	r0, #71	; 0x47
   3e602:	e7f7      	b.n	3e5f4 <__hexdig_fun+0xa>
   3e604:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   3e608:	2b05      	cmp	r3, #5
   3e60a:	d801      	bhi.n	3e610 <__hexdig_fun+0x26>
   3e60c:	3827      	subs	r0, #39	; 0x27
   3e60e:	e7f1      	b.n	3e5f4 <__hexdig_fun+0xa>
   3e610:	2000      	movs	r0, #0
   3e612:	4770      	bx	lr

0003e614 <L_shift>:
   3e614:	f1c2 0208 	rsb	r2, r2, #8
   3e618:	0092      	lsls	r2, r2, #2
   3e61a:	b570      	push	{r4, r5, r6, lr}
   3e61c:	f1c2 0620 	rsb	r6, r2, #32
   3e620:	6843      	ldr	r3, [r0, #4]
   3e622:	6804      	ldr	r4, [r0, #0]
   3e624:	fa03 f506 	lsl.w	r5, r3, r6
   3e628:	40d3      	lsrs	r3, r2
   3e62a:	432c      	orrs	r4, r5
   3e62c:	6004      	str	r4, [r0, #0]
   3e62e:	f840 3f04 	str.w	r3, [r0, #4]!
   3e632:	4288      	cmp	r0, r1
   3e634:	d3f4      	bcc.n	3e620 <L_shift+0xc>
   3e636:	bd70      	pop	{r4, r5, r6, pc}

0003e638 <__match>:
   3e638:	6803      	ldr	r3, [r0, #0]
   3e63a:	3301      	adds	r3, #1
   3e63c:	b530      	push	{r4, r5, lr}
   3e63e:	f811 4b01 	ldrb.w	r4, [r1], #1
   3e642:	b914      	cbnz	r4, 3e64a <__match+0x12>
   3e644:	6003      	str	r3, [r0, #0]
   3e646:	2001      	movs	r0, #1
   3e648:	bd30      	pop	{r4, r5, pc}
   3e64a:	f813 2b01 	ldrb.w	r2, [r3], #1
   3e64e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   3e652:	2d19      	cmp	r5, #25
   3e654:	bf98      	it	ls
   3e656:	3220      	addls	r2, #32
   3e658:	42a2      	cmp	r2, r4
   3e65a:	d0f0      	beq.n	3e63e <__match+0x6>
   3e65c:	2000      	movs	r0, #0
   3e65e:	e7f3      	b.n	3e648 <__match+0x10>

0003e660 <__hexnan>:
   3e660:	680b      	ldr	r3, [r1, #0]
   3e662:	6801      	ldr	r1, [r0, #0]
   3e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e668:	115e      	asrs	r6, r3, #5
   3e66a:	f013 031f 	ands.w	r3, r3, #31
   3e66e:	f04f 0500 	mov.w	r5, #0
   3e672:	b087      	sub	sp, #28
   3e674:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   3e678:	4682      	mov	sl, r0
   3e67a:	4690      	mov	r8, r2
   3e67c:	46ab      	mov	fp, r5
   3e67e:	bf18      	it	ne
   3e680:	3604      	addne	r6, #4
   3e682:	9301      	str	r3, [sp, #4]
   3e684:	9502      	str	r5, [sp, #8]
   3e686:	1f37      	subs	r7, r6, #4
   3e688:	f846 5c04 	str.w	r5, [r6, #-4]
   3e68c:	46b9      	mov	r9, r7
   3e68e:	463c      	mov	r4, r7
   3e690:	1c4b      	adds	r3, r1, #1
   3e692:	784a      	ldrb	r2, [r1, #1]
   3e694:	9303      	str	r3, [sp, #12]
   3e696:	b342      	cbz	r2, 3e6ea <__hexnan+0x8a>
   3e698:	4610      	mov	r0, r2
   3e69a:	9105      	str	r1, [sp, #20]
   3e69c:	9204      	str	r2, [sp, #16]
   3e69e:	f7ff ffa4 	bl	3e5ea <__hexdig_fun>
   3e6a2:	2800      	cmp	r0, #0
   3e6a4:	d14f      	bne.n	3e746 <__hexnan+0xe6>
   3e6a6:	9a04      	ldr	r2, [sp, #16]
   3e6a8:	9905      	ldr	r1, [sp, #20]
   3e6aa:	2a20      	cmp	r2, #32
   3e6ac:	d818      	bhi.n	3e6e0 <__hexnan+0x80>
   3e6ae:	9b02      	ldr	r3, [sp, #8]
   3e6b0:	459b      	cmp	fp, r3
   3e6b2:	dd13      	ble.n	3e6dc <__hexnan+0x7c>
   3e6b4:	454c      	cmp	r4, r9
   3e6b6:	d206      	bcs.n	3e6c6 <__hexnan+0x66>
   3e6b8:	2d07      	cmp	r5, #7
   3e6ba:	dc04      	bgt.n	3e6c6 <__hexnan+0x66>
   3e6bc:	462a      	mov	r2, r5
   3e6be:	4649      	mov	r1, r9
   3e6c0:	4620      	mov	r0, r4
   3e6c2:	f7ff ffa7 	bl	3e614 <L_shift>
   3e6c6:	4544      	cmp	r4, r8
   3e6c8:	d94f      	bls.n	3e76a <__hexnan+0x10a>
   3e6ca:	2300      	movs	r3, #0
   3e6cc:	f1a4 0904 	sub.w	r9, r4, #4
   3e6d0:	f8cd b008 	str.w	fp, [sp, #8]
   3e6d4:	f844 3c04 	str.w	r3, [r4, #-4]
   3e6d8:	461d      	mov	r5, r3
   3e6da:	464c      	mov	r4, r9
   3e6dc:	9903      	ldr	r1, [sp, #12]
   3e6de:	e7d7      	b.n	3e690 <__hexnan+0x30>
   3e6e0:	2a29      	cmp	r2, #41	; 0x29
   3e6e2:	d155      	bne.n	3e790 <__hexnan+0x130>
   3e6e4:	3102      	adds	r1, #2
   3e6e6:	f8ca 1000 	str.w	r1, [sl]
   3e6ea:	f1bb 0f00 	cmp.w	fp, #0
   3e6ee:	d04f      	beq.n	3e790 <__hexnan+0x130>
   3e6f0:	454c      	cmp	r4, r9
   3e6f2:	d206      	bcs.n	3e702 <__hexnan+0xa2>
   3e6f4:	2d07      	cmp	r5, #7
   3e6f6:	dc04      	bgt.n	3e702 <__hexnan+0xa2>
   3e6f8:	462a      	mov	r2, r5
   3e6fa:	4649      	mov	r1, r9
   3e6fc:	4620      	mov	r0, r4
   3e6fe:	f7ff ff89 	bl	3e614 <L_shift>
   3e702:	4544      	cmp	r4, r8
   3e704:	d933      	bls.n	3e76e <__hexnan+0x10e>
   3e706:	f1a8 0204 	sub.w	r2, r8, #4
   3e70a:	4623      	mov	r3, r4
   3e70c:	f853 1b04 	ldr.w	r1, [r3], #4
   3e710:	429f      	cmp	r7, r3
   3e712:	f842 1f04 	str.w	r1, [r2, #4]!
   3e716:	d2f9      	bcs.n	3e70c <__hexnan+0xac>
   3e718:	1b3b      	subs	r3, r7, r4
   3e71a:	3e03      	subs	r6, #3
   3e71c:	3401      	adds	r4, #1
   3e71e:	2200      	movs	r2, #0
   3e720:	f023 0303 	bic.w	r3, r3, #3
   3e724:	3304      	adds	r3, #4
   3e726:	42b4      	cmp	r4, r6
   3e728:	bf88      	it	hi
   3e72a:	2304      	movhi	r3, #4
   3e72c:	4443      	add	r3, r8
   3e72e:	f843 2b04 	str.w	r2, [r3], #4
   3e732:	429f      	cmp	r7, r3
   3e734:	d2fb      	bcs.n	3e72e <__hexnan+0xce>
   3e736:	683b      	ldr	r3, [r7, #0]
   3e738:	b91b      	cbnz	r3, 3e742 <__hexnan+0xe2>
   3e73a:	4547      	cmp	r7, r8
   3e73c:	d126      	bne.n	3e78c <__hexnan+0x12c>
   3e73e:	2301      	movs	r3, #1
   3e740:	603b      	str	r3, [r7, #0]
   3e742:	2005      	movs	r0, #5
   3e744:	e025      	b.n	3e792 <__hexnan+0x132>
   3e746:	3501      	adds	r5, #1
   3e748:	f10b 0b01 	add.w	fp, fp, #1
   3e74c:	2d08      	cmp	r5, #8
   3e74e:	dd05      	ble.n	3e75c <__hexnan+0xfc>
   3e750:	4544      	cmp	r4, r8
   3e752:	d9c3      	bls.n	3e6dc <__hexnan+0x7c>
   3e754:	2300      	movs	r3, #0
   3e756:	3c04      	subs	r4, #4
   3e758:	2501      	movs	r5, #1
   3e75a:	6023      	str	r3, [r4, #0]
   3e75c:	6822      	ldr	r2, [r4, #0]
   3e75e:	f000 000f 	and.w	r0, r0, #15
   3e762:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   3e766:	6022      	str	r2, [r4, #0]
   3e768:	e7b8      	b.n	3e6dc <__hexnan+0x7c>
   3e76a:	2508      	movs	r5, #8
   3e76c:	e7b6      	b.n	3e6dc <__hexnan+0x7c>
   3e76e:	9b01      	ldr	r3, [sp, #4]
   3e770:	2b00      	cmp	r3, #0
   3e772:	d0e0      	beq.n	3e736 <__hexnan+0xd6>
   3e774:	f04f 32ff 	mov.w	r2, #4294967295
   3e778:	f1c3 0320 	rsb	r3, r3, #32
   3e77c:	fa22 f303 	lsr.w	r3, r2, r3
   3e780:	f856 2c04 	ldr.w	r2, [r6, #-4]
   3e784:	401a      	ands	r2, r3
   3e786:	f846 2c04 	str.w	r2, [r6, #-4]
   3e78a:	e7d4      	b.n	3e736 <__hexnan+0xd6>
   3e78c:	3f04      	subs	r7, #4
   3e78e:	e7d2      	b.n	3e736 <__hexnan+0xd6>
   3e790:	2004      	movs	r0, #4
   3e792:	b007      	add	sp, #28
   3e794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003e798 <__retarget_lock_init_recursive>:
   3e798:	4770      	bx	lr

0003e79a <__retarget_lock_acquire_recursive>:
   3e79a:	4770      	bx	lr

0003e79c <__retarget_lock_release_recursive>:
   3e79c:	4770      	bx	lr

0003e79e <__swhatbuf_r>:
   3e79e:	b570      	push	{r4, r5, r6, lr}
   3e7a0:	460e      	mov	r6, r1
   3e7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3e7a6:	b096      	sub	sp, #88	; 0x58
   3e7a8:	4614      	mov	r4, r2
   3e7aa:	2900      	cmp	r1, #0
   3e7ac:	461d      	mov	r5, r3
   3e7ae:	da07      	bge.n	3e7c0 <__swhatbuf_r+0x22>
   3e7b0:	2300      	movs	r3, #0
   3e7b2:	602b      	str	r3, [r5, #0]
   3e7b4:	89b3      	ldrh	r3, [r6, #12]
   3e7b6:	061a      	lsls	r2, r3, #24
   3e7b8:	d410      	bmi.n	3e7dc <__swhatbuf_r+0x3e>
   3e7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3e7be:	e00e      	b.n	3e7de <__swhatbuf_r+0x40>
   3e7c0:	466a      	mov	r2, sp
   3e7c2:	f7fa fc6f 	bl	390a4 <_fstat_r>
   3e7c6:	2800      	cmp	r0, #0
   3e7c8:	dbf2      	blt.n	3e7b0 <__swhatbuf_r+0x12>
   3e7ca:	9a01      	ldr	r2, [sp, #4]
   3e7cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   3e7d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   3e7d4:	425a      	negs	r2, r3
   3e7d6:	415a      	adcs	r2, r3
   3e7d8:	602a      	str	r2, [r5, #0]
   3e7da:	e7ee      	b.n	3e7ba <__swhatbuf_r+0x1c>
   3e7dc:	2340      	movs	r3, #64	; 0x40
   3e7de:	2000      	movs	r0, #0
   3e7e0:	6023      	str	r3, [r4, #0]
   3e7e2:	b016      	add	sp, #88	; 0x58
   3e7e4:	bd70      	pop	{r4, r5, r6, pc}

0003e7e6 <__ascii_mbtowc>:
   3e7e6:	b082      	sub	sp, #8
   3e7e8:	b901      	cbnz	r1, 3e7ec <__ascii_mbtowc+0x6>
   3e7ea:	a901      	add	r1, sp, #4
   3e7ec:	b142      	cbz	r2, 3e800 <__ascii_mbtowc+0x1a>
   3e7ee:	b14b      	cbz	r3, 3e804 <__ascii_mbtowc+0x1e>
   3e7f0:	7813      	ldrb	r3, [r2, #0]
   3e7f2:	600b      	str	r3, [r1, #0]
   3e7f4:	7812      	ldrb	r2, [r2, #0]
   3e7f6:	1e10      	subs	r0, r2, #0
   3e7f8:	bf18      	it	ne
   3e7fa:	2001      	movne	r0, #1
   3e7fc:	b002      	add	sp, #8
   3e7fe:	4770      	bx	lr
   3e800:	4610      	mov	r0, r2
   3e802:	e7fb      	b.n	3e7fc <__ascii_mbtowc+0x16>
   3e804:	f06f 0001 	mvn.w	r0, #1
   3e808:	e7f8      	b.n	3e7fc <__ascii_mbtowc+0x16>

0003e80a <memmove>:
   3e80a:	4288      	cmp	r0, r1
   3e80c:	b510      	push	{r4, lr}
   3e80e:	eb01 0402 	add.w	r4, r1, r2
   3e812:	d902      	bls.n	3e81a <memmove+0x10>
   3e814:	4284      	cmp	r4, r0
   3e816:	4623      	mov	r3, r4
   3e818:	d807      	bhi.n	3e82a <memmove+0x20>
   3e81a:	1e43      	subs	r3, r0, #1
   3e81c:	42a1      	cmp	r1, r4
   3e81e:	d008      	beq.n	3e832 <memmove+0x28>
   3e820:	f811 2b01 	ldrb.w	r2, [r1], #1
   3e824:	f803 2f01 	strb.w	r2, [r3, #1]!
   3e828:	e7f8      	b.n	3e81c <memmove+0x12>
   3e82a:	4402      	add	r2, r0
   3e82c:	4601      	mov	r1, r0
   3e82e:	428a      	cmp	r2, r1
   3e830:	d100      	bne.n	3e834 <memmove+0x2a>
   3e832:	bd10      	pop	{r4, pc}
   3e834:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   3e838:	f802 4d01 	strb.w	r4, [r2, #-1]!
   3e83c:	e7f7      	b.n	3e82e <memmove+0x24>

0003e83e <_Balloc>:
   3e83e:	b570      	push	{r4, r5, r6, lr}
   3e840:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3e842:	4604      	mov	r4, r0
   3e844:	460d      	mov	r5, r1
   3e846:	b93e      	cbnz	r6, 3e858 <_Balloc+0x1a>
   3e848:	2010      	movs	r0, #16
   3e84a:	f7f8 fb91 	bl	36f70 <malloc>
   3e84e:	6260      	str	r0, [r4, #36]	; 0x24
   3e850:	6006      	str	r6, [r0, #0]
   3e852:	60c6      	str	r6, [r0, #12]
   3e854:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3e858:	6a66      	ldr	r6, [r4, #36]	; 0x24
   3e85a:	68f3      	ldr	r3, [r6, #12]
   3e85c:	b183      	cbz	r3, 3e880 <_Balloc+0x42>
   3e85e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3e860:	68db      	ldr	r3, [r3, #12]
   3e862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   3e866:	b9b8      	cbnz	r0, 3e898 <_Balloc+0x5a>
   3e868:	2101      	movs	r1, #1
   3e86a:	4620      	mov	r0, r4
   3e86c:	fa01 f605 	lsl.w	r6, r1, r5
   3e870:	1d72      	adds	r2, r6, #5
   3e872:	0092      	lsls	r2, r2, #2
   3e874:	f000 fb5e 	bl	3ef34 <_calloc_r>
   3e878:	b160      	cbz	r0, 3e894 <_Balloc+0x56>
   3e87a:	e9c0 5601 	strd	r5, r6, [r0, #4]
   3e87e:	e00e      	b.n	3e89e <_Balloc+0x60>
   3e880:	2221      	movs	r2, #33	; 0x21
   3e882:	2104      	movs	r1, #4
   3e884:	4620      	mov	r0, r4
   3e886:	f000 fb55 	bl	3ef34 <_calloc_r>
   3e88a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3e88c:	60f0      	str	r0, [r6, #12]
   3e88e:	68db      	ldr	r3, [r3, #12]
   3e890:	2b00      	cmp	r3, #0
   3e892:	d1e4      	bne.n	3e85e <_Balloc+0x20>
   3e894:	2000      	movs	r0, #0
   3e896:	bd70      	pop	{r4, r5, r6, pc}
   3e898:	6802      	ldr	r2, [r0, #0]
   3e89a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   3e89e:	2300      	movs	r3, #0
   3e8a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   3e8a4:	e7f7      	b.n	3e896 <_Balloc+0x58>

0003e8a6 <_Bfree>:
   3e8a6:	b570      	push	{r4, r5, r6, lr}
   3e8a8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3e8aa:	4605      	mov	r5, r0
   3e8ac:	460c      	mov	r4, r1
   3e8ae:	b93e      	cbnz	r6, 3e8c0 <_Bfree+0x1a>
   3e8b0:	2010      	movs	r0, #16
   3e8b2:	f7f8 fb5d 	bl	36f70 <malloc>
   3e8b6:	6268      	str	r0, [r5, #36]	; 0x24
   3e8b8:	6006      	str	r6, [r0, #0]
   3e8ba:	60c6      	str	r6, [r0, #12]
   3e8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3e8c0:	b13c      	cbz	r4, 3e8d2 <_Bfree+0x2c>
   3e8c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3e8c4:	6862      	ldr	r2, [r4, #4]
   3e8c6:	68db      	ldr	r3, [r3, #12]
   3e8c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3e8cc:	6021      	str	r1, [r4, #0]
   3e8ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   3e8d2:	bd70      	pop	{r4, r5, r6, pc}

0003e8d4 <__multadd>:
   3e8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e8d8:	4607      	mov	r7, r0
   3e8da:	4698      	mov	r8, r3
   3e8dc:	460c      	mov	r4, r1
   3e8de:	690e      	ldr	r6, [r1, #16]
   3e8e0:	f101 0014 	add.w	r0, r1, #20
   3e8e4:	2300      	movs	r3, #0
   3e8e6:	6805      	ldr	r5, [r0, #0]
   3e8e8:	3301      	adds	r3, #1
   3e8ea:	b2a9      	uxth	r1, r5
   3e8ec:	429e      	cmp	r6, r3
   3e8ee:	ea4f 4515 	mov.w	r5, r5, lsr #16
   3e8f2:	fb02 8101 	mla	r1, r2, r1, r8
   3e8f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   3e8fa:	b289      	uxth	r1, r1
   3e8fc:	fb02 c505 	mla	r5, r2, r5, ip
   3e900:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   3e904:	ea4f 4815 	mov.w	r8, r5, lsr #16
   3e908:	f840 1b04 	str.w	r1, [r0], #4
   3e90c:	dceb      	bgt.n	3e8e6 <__multadd+0x12>
   3e90e:	f1b8 0f00 	cmp.w	r8, #0
   3e912:	d01b      	beq.n	3e94c <__multadd+0x78>
   3e914:	68a3      	ldr	r3, [r4, #8]
   3e916:	42b3      	cmp	r3, r6
   3e918:	dc12      	bgt.n	3e940 <__multadd+0x6c>
   3e91a:	6861      	ldr	r1, [r4, #4]
   3e91c:	4638      	mov	r0, r7
   3e91e:	3101      	adds	r1, #1
   3e920:	f7ff ff8d 	bl	3e83e <_Balloc>
   3e924:	6922      	ldr	r2, [r4, #16]
   3e926:	4605      	mov	r5, r0
   3e928:	f104 010c 	add.w	r1, r4, #12
   3e92c:	3202      	adds	r2, #2
   3e92e:	300c      	adds	r0, #12
   3e930:	0092      	lsls	r2, r2, #2
   3e932:	f7ff fb1a 	bl	3df6a <memcpy>
   3e936:	4621      	mov	r1, r4
   3e938:	462c      	mov	r4, r5
   3e93a:	4638      	mov	r0, r7
   3e93c:	f7ff ffb3 	bl	3e8a6 <_Bfree>
   3e940:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   3e944:	3601      	adds	r6, #1
   3e946:	f8c3 8014 	str.w	r8, [r3, #20]
   3e94a:	6126      	str	r6, [r4, #16]
   3e94c:	4620      	mov	r0, r4
   3e94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003e952 <__s2b>:
   3e952:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e956:	4615      	mov	r5, r2
   3e958:	461f      	mov	r7, r3
   3e95a:	2209      	movs	r2, #9
   3e95c:	3308      	adds	r3, #8
   3e95e:	460c      	mov	r4, r1
   3e960:	4606      	mov	r6, r0
   3e962:	2100      	movs	r1, #0
   3e964:	fb93 f3f2 	sdiv	r3, r3, r2
   3e968:	2201      	movs	r2, #1
   3e96a:	429a      	cmp	r2, r3
   3e96c:	db20      	blt.n	3e9b0 <__s2b+0x5e>
   3e96e:	4630      	mov	r0, r6
   3e970:	f7ff ff65 	bl	3e83e <_Balloc>
   3e974:	9b08      	ldr	r3, [sp, #32]
   3e976:	2d09      	cmp	r5, #9
   3e978:	6143      	str	r3, [r0, #20]
   3e97a:	f04f 0301 	mov.w	r3, #1
   3e97e:	6103      	str	r3, [r0, #16]
   3e980:	dd19      	ble.n	3e9b6 <__s2b+0x64>
   3e982:	f104 0909 	add.w	r9, r4, #9
   3e986:	442c      	add	r4, r5
   3e988:	46c8      	mov	r8, r9
   3e98a:	f818 3b01 	ldrb.w	r3, [r8], #1
   3e98e:	4601      	mov	r1, r0
   3e990:	220a      	movs	r2, #10
   3e992:	4630      	mov	r0, r6
   3e994:	3b30      	subs	r3, #48	; 0x30
   3e996:	f7ff ff9d 	bl	3e8d4 <__multadd>
   3e99a:	45a0      	cmp	r8, r4
   3e99c:	d1f5      	bne.n	3e98a <__s2b+0x38>
   3e99e:	f1a5 0408 	sub.w	r4, r5, #8
   3e9a2:	444c      	add	r4, r9
   3e9a4:	1b2d      	subs	r5, r5, r4
   3e9a6:	1963      	adds	r3, r4, r5
   3e9a8:	42bb      	cmp	r3, r7
   3e9aa:	db07      	blt.n	3e9bc <__s2b+0x6a>
   3e9ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3e9b0:	0052      	lsls	r2, r2, #1
   3e9b2:	3101      	adds	r1, #1
   3e9b4:	e7d9      	b.n	3e96a <__s2b+0x18>
   3e9b6:	340a      	adds	r4, #10
   3e9b8:	2509      	movs	r5, #9
   3e9ba:	e7f3      	b.n	3e9a4 <__s2b+0x52>
   3e9bc:	f814 3b01 	ldrb.w	r3, [r4], #1
   3e9c0:	4601      	mov	r1, r0
   3e9c2:	220a      	movs	r2, #10
   3e9c4:	4630      	mov	r0, r6
   3e9c6:	3b30      	subs	r3, #48	; 0x30
   3e9c8:	f7ff ff84 	bl	3e8d4 <__multadd>
   3e9cc:	e7eb      	b.n	3e9a6 <__s2b+0x54>

0003e9ce <__hi0bits>:
   3e9ce:	0c03      	lsrs	r3, r0, #16
   3e9d0:	041b      	lsls	r3, r3, #16
   3e9d2:	b9d3      	cbnz	r3, 3ea0a <__hi0bits+0x3c>
   3e9d4:	0400      	lsls	r0, r0, #16
   3e9d6:	2310      	movs	r3, #16
   3e9d8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   3e9dc:	bf04      	itt	eq
   3e9de:	0200      	lsleq	r0, r0, #8
   3e9e0:	3308      	addeq	r3, #8
   3e9e2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   3e9e6:	bf04      	itt	eq
   3e9e8:	0100      	lsleq	r0, r0, #4
   3e9ea:	3304      	addeq	r3, #4
   3e9ec:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   3e9f0:	bf04      	itt	eq
   3e9f2:	0080      	lsleq	r0, r0, #2
   3e9f4:	3302      	addeq	r3, #2
   3e9f6:	2800      	cmp	r0, #0
   3e9f8:	db05      	blt.n	3ea06 <__hi0bits+0x38>
   3e9fa:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   3e9fe:	f103 0301 	add.w	r3, r3, #1
   3ea02:	bf08      	it	eq
   3ea04:	2320      	moveq	r3, #32
   3ea06:	4618      	mov	r0, r3
   3ea08:	4770      	bx	lr
   3ea0a:	2300      	movs	r3, #0
   3ea0c:	e7e4      	b.n	3e9d8 <__hi0bits+0xa>

0003ea0e <__lo0bits>:
   3ea0e:	6803      	ldr	r3, [r0, #0]
   3ea10:	4601      	mov	r1, r0
   3ea12:	f013 0207 	ands.w	r2, r3, #7
   3ea16:	d00b      	beq.n	3ea30 <__lo0bits+0x22>
   3ea18:	07da      	lsls	r2, r3, #31
   3ea1a:	d424      	bmi.n	3ea66 <__lo0bits+0x58>
   3ea1c:	0798      	lsls	r0, r3, #30
   3ea1e:	bf47      	ittee	mi
   3ea20:	085b      	lsrmi	r3, r3, #1
   3ea22:	2001      	movmi	r0, #1
   3ea24:	089b      	lsrpl	r3, r3, #2
   3ea26:	2002      	movpl	r0, #2
   3ea28:	bf4c      	ite	mi
   3ea2a:	600b      	strmi	r3, [r1, #0]
   3ea2c:	600b      	strpl	r3, [r1, #0]
   3ea2e:	4770      	bx	lr
   3ea30:	b298      	uxth	r0, r3
   3ea32:	b9b0      	cbnz	r0, 3ea62 <__lo0bits+0x54>
   3ea34:	0c1b      	lsrs	r3, r3, #16
   3ea36:	2010      	movs	r0, #16
   3ea38:	f013 0fff 	tst.w	r3, #255	; 0xff
   3ea3c:	bf04      	itt	eq
   3ea3e:	0a1b      	lsreq	r3, r3, #8
   3ea40:	3008      	addeq	r0, #8
   3ea42:	071a      	lsls	r2, r3, #28
   3ea44:	bf04      	itt	eq
   3ea46:	091b      	lsreq	r3, r3, #4
   3ea48:	3004      	addeq	r0, #4
   3ea4a:	079a      	lsls	r2, r3, #30
   3ea4c:	bf04      	itt	eq
   3ea4e:	089b      	lsreq	r3, r3, #2
   3ea50:	3002      	addeq	r0, #2
   3ea52:	07da      	lsls	r2, r3, #31
   3ea54:	d403      	bmi.n	3ea5e <__lo0bits+0x50>
   3ea56:	085b      	lsrs	r3, r3, #1
   3ea58:	f100 0001 	add.w	r0, r0, #1
   3ea5c:	d005      	beq.n	3ea6a <__lo0bits+0x5c>
   3ea5e:	600b      	str	r3, [r1, #0]
   3ea60:	4770      	bx	lr
   3ea62:	4610      	mov	r0, r2
   3ea64:	e7e8      	b.n	3ea38 <__lo0bits+0x2a>
   3ea66:	2000      	movs	r0, #0
   3ea68:	4770      	bx	lr
   3ea6a:	2020      	movs	r0, #32
   3ea6c:	4770      	bx	lr

0003ea6e <__i2b>:
   3ea6e:	b510      	push	{r4, lr}
   3ea70:	460c      	mov	r4, r1
   3ea72:	2101      	movs	r1, #1
   3ea74:	f7ff fee3 	bl	3e83e <_Balloc>
   3ea78:	2201      	movs	r2, #1
   3ea7a:	6144      	str	r4, [r0, #20]
   3ea7c:	6102      	str	r2, [r0, #16]
   3ea7e:	bd10      	pop	{r4, pc}

0003ea80 <__multiply>:
   3ea80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ea84:	4615      	mov	r5, r2
   3ea86:	690a      	ldr	r2, [r1, #16]
   3ea88:	460c      	mov	r4, r1
   3ea8a:	b085      	sub	sp, #20
   3ea8c:	692b      	ldr	r3, [r5, #16]
   3ea8e:	429a      	cmp	r2, r3
   3ea90:	bfbe      	ittt	lt
   3ea92:	460b      	movlt	r3, r1
   3ea94:	462c      	movlt	r4, r5
   3ea96:	461d      	movlt	r5, r3
   3ea98:	6927      	ldr	r7, [r4, #16]
   3ea9a:	68a3      	ldr	r3, [r4, #8]
   3ea9c:	f8d5 9010 	ldr.w	r9, [r5, #16]
   3eaa0:	6861      	ldr	r1, [r4, #4]
   3eaa2:	eb07 0609 	add.w	r6, r7, r9
   3eaa6:	42b3      	cmp	r3, r6
   3eaa8:	bfb8      	it	lt
   3eaaa:	3101      	addlt	r1, #1
   3eaac:	f7ff fec7 	bl	3e83e <_Balloc>
   3eab0:	f100 0114 	add.w	r1, r0, #20
   3eab4:	2200      	movs	r2, #0
   3eab6:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   3eaba:	460b      	mov	r3, r1
   3eabc:	4543      	cmp	r3, r8
   3eabe:	d31d      	bcc.n	3eafc <__multiply+0x7c>
   3eac0:	f104 0314 	add.w	r3, r4, #20
   3eac4:	f105 0214 	add.w	r2, r5, #20
   3eac8:	f104 0515 	add.w	r5, r4, #21
   3eacc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   3ead0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   3ead4:	9302      	str	r3, [sp, #8]
   3ead6:	1b3b      	subs	r3, r7, r4
   3ead8:	3b15      	subs	r3, #21
   3eada:	f023 0303 	bic.w	r3, r3, #3
   3eade:	3304      	adds	r3, #4
   3eae0:	42af      	cmp	r7, r5
   3eae2:	bf38      	it	cc
   3eae4:	2304      	movcc	r3, #4
   3eae6:	9301      	str	r3, [sp, #4]
   3eae8:	9b02      	ldr	r3, [sp, #8]
   3eaea:	9203      	str	r2, [sp, #12]
   3eaec:	4293      	cmp	r3, r2
   3eaee:	d808      	bhi.n	3eb02 <__multiply+0x82>
   3eaf0:	2e00      	cmp	r6, #0
   3eaf2:	dc5a      	bgt.n	3ebaa <__multiply+0x12a>
   3eaf4:	6106      	str	r6, [r0, #16]
   3eaf6:	b005      	add	sp, #20
   3eaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eafc:	f843 2b04 	str.w	r2, [r3], #4
   3eb00:	e7dc      	b.n	3eabc <__multiply+0x3c>
   3eb02:	f8b2 a000 	ldrh.w	sl, [r2]
   3eb06:	f1ba 0f00 	cmp.w	sl, #0
   3eb0a:	d024      	beq.n	3eb56 <__multiply+0xd6>
   3eb0c:	f104 0e14 	add.w	lr, r4, #20
   3eb10:	4689      	mov	r9, r1
   3eb12:	f04f 0c00 	mov.w	ip, #0
   3eb16:	f85e 5b04 	ldr.w	r5, [lr], #4
   3eb1a:	f8d9 b000 	ldr.w	fp, [r9]
   3eb1e:	b2ab      	uxth	r3, r5
   3eb20:	4577      	cmp	r7, lr
   3eb22:	fa1f fb8b 	uxth.w	fp, fp
   3eb26:	fb0a b303 	mla	r3, sl, r3, fp
   3eb2a:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   3eb2e:	f8d9 5000 	ldr.w	r5, [r9]
   3eb32:	4463      	add	r3, ip
   3eb34:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   3eb38:	fb0a c50b 	mla	r5, sl, fp, ip
   3eb3c:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   3eb40:	b29b      	uxth	r3, r3
   3eb42:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   3eb46:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   3eb4a:	f849 3b04 	str.w	r3, [r9], #4
   3eb4e:	d8e2      	bhi.n	3eb16 <__multiply+0x96>
   3eb50:	9b01      	ldr	r3, [sp, #4]
   3eb52:	f841 c003 	str.w	ip, [r1, r3]
   3eb56:	9b03      	ldr	r3, [sp, #12]
   3eb58:	3204      	adds	r2, #4
   3eb5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   3eb5e:	f1b9 0f00 	cmp.w	r9, #0
   3eb62:	d020      	beq.n	3eba6 <__multiply+0x126>
   3eb64:	680b      	ldr	r3, [r1, #0]
   3eb66:	f104 0c14 	add.w	ip, r4, #20
   3eb6a:	468e      	mov	lr, r1
   3eb6c:	f04f 0a00 	mov.w	sl, #0
   3eb70:	f8bc 5000 	ldrh.w	r5, [ip]
   3eb74:	b29b      	uxth	r3, r3
   3eb76:	f8be b002 	ldrh.w	fp, [lr, #2]
   3eb7a:	fb09 b505 	mla	r5, r9, r5, fp
   3eb7e:	44aa      	add	sl, r5
   3eb80:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   3eb84:	f84e 3b04 	str.w	r3, [lr], #4
   3eb88:	f85c 3b04 	ldr.w	r3, [ip], #4
   3eb8c:	f8be 5000 	ldrh.w	r5, [lr]
   3eb90:	0c1b      	lsrs	r3, r3, #16
   3eb92:	4567      	cmp	r7, ip
   3eb94:	fb09 5303 	mla	r3, r9, r3, r5
   3eb98:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   3eb9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   3eba0:	d8e6      	bhi.n	3eb70 <__multiply+0xf0>
   3eba2:	9d01      	ldr	r5, [sp, #4]
   3eba4:	514b      	str	r3, [r1, r5]
   3eba6:	3104      	adds	r1, #4
   3eba8:	e79e      	b.n	3eae8 <__multiply+0x68>
   3ebaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   3ebae:	2b00      	cmp	r3, #0
   3ebb0:	d1a0      	bne.n	3eaf4 <__multiply+0x74>
   3ebb2:	3e01      	subs	r6, #1
   3ebb4:	e79c      	b.n	3eaf0 <__multiply+0x70>

0003ebb6 <__lshift>:
   3ebb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ebba:	460c      	mov	r4, r1
   3ebbc:	4607      	mov	r7, r0
   3ebbe:	4691      	mov	r9, r2
   3ebc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   3ebc4:	6923      	ldr	r3, [r4, #16]
   3ebc6:	6849      	ldr	r1, [r1, #4]
   3ebc8:	eb03 1862 	add.w	r8, r3, r2, asr #5
   3ebcc:	68a3      	ldr	r3, [r4, #8]
   3ebce:	f108 0601 	add.w	r6, r8, #1
   3ebd2:	42b3      	cmp	r3, r6
   3ebd4:	db3f      	blt.n	3ec56 <__lshift+0xa0>
   3ebd6:	4638      	mov	r0, r7
   3ebd8:	f7ff fe31 	bl	3e83e <_Balloc>
   3ebdc:	2300      	movs	r3, #0
   3ebde:	4605      	mov	r5, r0
   3ebe0:	f100 0114 	add.w	r1, r0, #20
   3ebe4:	f100 0210 	add.w	r2, r0, #16
   3ebe8:	4618      	mov	r0, r3
   3ebea:	4553      	cmp	r3, sl
   3ebec:	db36      	blt.n	3ec5c <__lshift+0xa6>
   3ebee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   3ebf2:	f104 0314 	add.w	r3, r4, #20
   3ebf6:	6920      	ldr	r0, [r4, #16]
   3ebf8:	f019 091f 	ands.w	r9, r9, #31
   3ebfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   3ec00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3ec04:	d02e      	beq.n	3ec64 <__lshift+0xae>
   3ec06:	f1c9 0e20 	rsb	lr, r9, #32
   3ec0a:	468a      	mov	sl, r1
   3ec0c:	2200      	movs	r2, #0
   3ec0e:	6818      	ldr	r0, [r3, #0]
   3ec10:	fa00 f009 	lsl.w	r0, r0, r9
   3ec14:	4302      	orrs	r2, r0
   3ec16:	f84a 2b04 	str.w	r2, [sl], #4
   3ec1a:	f853 2b04 	ldr.w	r2, [r3], #4
   3ec1e:	459c      	cmp	ip, r3
   3ec20:	fa22 f20e 	lsr.w	r2, r2, lr
   3ec24:	d8f3      	bhi.n	3ec0e <__lshift+0x58>
   3ec26:	ebac 0304 	sub.w	r3, ip, r4
   3ec2a:	f104 0015 	add.w	r0, r4, #21
   3ec2e:	3b15      	subs	r3, #21
   3ec30:	f023 0303 	bic.w	r3, r3, #3
   3ec34:	3304      	adds	r3, #4
   3ec36:	4560      	cmp	r0, ip
   3ec38:	bf88      	it	hi
   3ec3a:	2304      	movhi	r3, #4
   3ec3c:	50ca      	str	r2, [r1, r3]
   3ec3e:	b10a      	cbz	r2, 3ec44 <__lshift+0x8e>
   3ec40:	f108 0602 	add.w	r6, r8, #2
   3ec44:	3e01      	subs	r6, #1
   3ec46:	4638      	mov	r0, r7
   3ec48:	4621      	mov	r1, r4
   3ec4a:	612e      	str	r6, [r5, #16]
   3ec4c:	f7ff fe2b 	bl	3e8a6 <_Bfree>
   3ec50:	4628      	mov	r0, r5
   3ec52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ec56:	3101      	adds	r1, #1
   3ec58:	005b      	lsls	r3, r3, #1
   3ec5a:	e7ba      	b.n	3ebd2 <__lshift+0x1c>
   3ec5c:	3301      	adds	r3, #1
   3ec5e:	f842 0f04 	str.w	r0, [r2, #4]!
   3ec62:	e7c2      	b.n	3ebea <__lshift+0x34>
   3ec64:	3904      	subs	r1, #4
   3ec66:	f853 2b04 	ldr.w	r2, [r3], #4
   3ec6a:	459c      	cmp	ip, r3
   3ec6c:	f841 2f04 	str.w	r2, [r1, #4]!
   3ec70:	d8f9      	bhi.n	3ec66 <__lshift+0xb0>
   3ec72:	e7e7      	b.n	3ec44 <__lshift+0x8e>

0003ec74 <__mcmp>:
   3ec74:	6902      	ldr	r2, [r0, #16]
   3ec76:	b530      	push	{r4, r5, lr}
   3ec78:	690c      	ldr	r4, [r1, #16]
   3ec7a:	1b12      	subs	r2, r2, r4
   3ec7c:	d10e      	bne.n	3ec9c <__mcmp+0x28>
   3ec7e:	f100 0314 	add.w	r3, r0, #20
   3ec82:	3114      	adds	r1, #20
   3ec84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   3ec88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   3ec8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   3ec90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   3ec94:	42a5      	cmp	r5, r4
   3ec96:	d003      	beq.n	3eca0 <__mcmp+0x2c>
   3ec98:	d305      	bcc.n	3eca6 <__mcmp+0x32>
   3ec9a:	2201      	movs	r2, #1
   3ec9c:	4610      	mov	r0, r2
   3ec9e:	bd30      	pop	{r4, r5, pc}
   3eca0:	4283      	cmp	r3, r0
   3eca2:	d3f3      	bcc.n	3ec8c <__mcmp+0x18>
   3eca4:	e7fa      	b.n	3ec9c <__mcmp+0x28>
   3eca6:	f04f 32ff 	mov.w	r2, #4294967295
   3ecaa:	e7f7      	b.n	3ec9c <__mcmp+0x28>

0003ecac <__mdiff>:
   3ecac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ecb0:	460c      	mov	r4, r1
   3ecb2:	4606      	mov	r6, r0
   3ecb4:	4611      	mov	r1, r2
   3ecb6:	4692      	mov	sl, r2
   3ecb8:	4620      	mov	r0, r4
   3ecba:	f7ff ffdb 	bl	3ec74 <__mcmp>
   3ecbe:	1e05      	subs	r5, r0, #0
   3ecc0:	d108      	bne.n	3ecd4 <__mdiff+0x28>
   3ecc2:	4629      	mov	r1, r5
   3ecc4:	4630      	mov	r0, r6
   3ecc6:	f7ff fdba 	bl	3e83e <_Balloc>
   3ecca:	2301      	movs	r3, #1
   3eccc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   3ecd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ecd4:	bfa3      	ittte	ge
   3ecd6:	4653      	movge	r3, sl
   3ecd8:	46a2      	movge	sl, r4
   3ecda:	2500      	movge	r5, #0
   3ecdc:	2501      	movlt	r5, #1
   3ecde:	bfa8      	it	ge
   3ece0:	461c      	movge	r4, r3
   3ece2:	f8da 1004 	ldr.w	r1, [sl, #4]
   3ece6:	4630      	mov	r0, r6
   3ece8:	f7ff fda9 	bl	3e83e <_Balloc>
   3ecec:	f104 0914 	add.w	r9, r4, #20
   3ecf0:	f8da 7010 	ldr.w	r7, [sl, #16]
   3ecf4:	f100 0814 	add.w	r8, r0, #20
   3ecf8:	6926      	ldr	r6, [r4, #16]
   3ecfa:	f10a 0210 	add.w	r2, sl, #16
   3ecfe:	60c5      	str	r5, [r0, #12]
   3ed00:	f10a 0514 	add.w	r5, sl, #20
   3ed04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   3ed08:	46c2      	mov	sl, r8
   3ed0a:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   3ed0e:	f04f 0c00 	mov.w	ip, #0
   3ed12:	f852 bf04 	ldr.w	fp, [r2, #4]!
   3ed16:	f859 3b04 	ldr.w	r3, [r9], #4
   3ed1a:	fa1f f18b 	uxth.w	r1, fp
   3ed1e:	454e      	cmp	r6, r9
   3ed20:	4461      	add	r1, ip
   3ed22:	fa1f fc83 	uxth.w	ip, r3
   3ed26:	ea4f 4313 	mov.w	r3, r3, lsr #16
   3ed2a:	eba1 010c 	sub.w	r1, r1, ip
   3ed2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   3ed32:	eb03 4321 	add.w	r3, r3, r1, asr #16
   3ed36:	b289      	uxth	r1, r1
   3ed38:	ea4f 4c23 	mov.w	ip, r3, asr #16
   3ed3c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   3ed40:	f84a 3b04 	str.w	r3, [sl], #4
   3ed44:	d8e5      	bhi.n	3ed12 <__mdiff+0x66>
   3ed46:	1b33      	subs	r3, r6, r4
   3ed48:	3415      	adds	r4, #21
   3ed4a:	3b15      	subs	r3, #21
   3ed4c:	f023 0303 	bic.w	r3, r3, #3
   3ed50:	3304      	adds	r3, #4
   3ed52:	42a6      	cmp	r6, r4
   3ed54:	bf38      	it	cc
   3ed56:	2304      	movcc	r3, #4
   3ed58:	441d      	add	r5, r3
   3ed5a:	4443      	add	r3, r8
   3ed5c:	462c      	mov	r4, r5
   3ed5e:	461e      	mov	r6, r3
   3ed60:	4574      	cmp	r4, lr
   3ed62:	d30e      	bcc.n	3ed82 <__mdiff+0xd6>
   3ed64:	f10e 0203 	add.w	r2, lr, #3
   3ed68:	1b52      	subs	r2, r2, r5
   3ed6a:	3d03      	subs	r5, #3
   3ed6c:	f022 0203 	bic.w	r2, r2, #3
   3ed70:	45ae      	cmp	lr, r5
   3ed72:	bf38      	it	cc
   3ed74:	2200      	movcc	r2, #0
   3ed76:	441a      	add	r2, r3
   3ed78:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3ed7c:	b18b      	cbz	r3, 3eda2 <__mdiff+0xf6>
   3ed7e:	6107      	str	r7, [r0, #16]
   3ed80:	e7a6      	b.n	3ecd0 <__mdiff+0x24>
   3ed82:	f854 8b04 	ldr.w	r8, [r4], #4
   3ed86:	fa1f f288 	uxth.w	r2, r8
   3ed8a:	4462      	add	r2, ip
   3ed8c:	1411      	asrs	r1, r2, #16
   3ed8e:	b292      	uxth	r2, r2
   3ed90:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   3ed94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   3ed98:	ea4f 4c21 	mov.w	ip, r1, asr #16
   3ed9c:	f846 2b04 	str.w	r2, [r6], #4
   3eda0:	e7de      	b.n	3ed60 <__mdiff+0xb4>
   3eda2:	3f01      	subs	r7, #1
   3eda4:	e7e8      	b.n	3ed78 <__mdiff+0xcc>

0003eda6 <__d2b>:
   3eda6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3edaa:	ec57 6b10 	vmov	r6, r7, d0
   3edae:	f3c7 550a 	ubfx	r5, r7, #20, #11
   3edb2:	4689      	mov	r9, r1
   3edb4:	2101      	movs	r1, #1
   3edb6:	4690      	mov	r8, r2
   3edb8:	f7ff fd41 	bl	3e83e <_Balloc>
   3edbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
   3edc0:	4604      	mov	r4, r0
   3edc2:	bb35      	cbnz	r5, 3ee12 <__d2b+0x6c>
   3edc4:	2e00      	cmp	r6, #0
   3edc6:	9301      	str	r3, [sp, #4]
   3edc8:	d028      	beq.n	3ee1c <__d2b+0x76>
   3edca:	4668      	mov	r0, sp
   3edcc:	9600      	str	r6, [sp, #0]
   3edce:	f7ff fe1e 	bl	3ea0e <__lo0bits>
   3edd2:	9900      	ldr	r1, [sp, #0]
   3edd4:	b300      	cbz	r0, 3ee18 <__d2b+0x72>
   3edd6:	9a01      	ldr	r2, [sp, #4]
   3edd8:	f1c0 0320 	rsb	r3, r0, #32
   3eddc:	fa02 f303 	lsl.w	r3, r2, r3
   3ede0:	40c2      	lsrs	r2, r0
   3ede2:	430b      	orrs	r3, r1
   3ede4:	9201      	str	r2, [sp, #4]
   3ede6:	6163      	str	r3, [r4, #20]
   3ede8:	9b01      	ldr	r3, [sp, #4]
   3edea:	2b00      	cmp	r3, #0
   3edec:	61a3      	str	r3, [r4, #24]
   3edee:	bf14      	ite	ne
   3edf0:	2202      	movne	r2, #2
   3edf2:	2201      	moveq	r2, #1
   3edf4:	6122      	str	r2, [r4, #16]
   3edf6:	b1d5      	cbz	r5, 3ee2e <__d2b+0x88>
   3edf8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   3edfc:	4405      	add	r5, r0
   3edfe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   3ee02:	f8c9 5000 	str.w	r5, [r9]
   3ee06:	f8c8 0000 	str.w	r0, [r8]
   3ee0a:	4620      	mov	r0, r4
   3ee0c:	b003      	add	sp, #12
   3ee0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3ee12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3ee16:	e7d5      	b.n	3edc4 <__d2b+0x1e>
   3ee18:	6161      	str	r1, [r4, #20]
   3ee1a:	e7e5      	b.n	3ede8 <__d2b+0x42>
   3ee1c:	a801      	add	r0, sp, #4
   3ee1e:	f7ff fdf6 	bl	3ea0e <__lo0bits>
   3ee22:	9b01      	ldr	r3, [sp, #4]
   3ee24:	2201      	movs	r2, #1
   3ee26:	3020      	adds	r0, #32
   3ee28:	6163      	str	r3, [r4, #20]
   3ee2a:	6122      	str	r2, [r4, #16]
   3ee2c:	e7e3      	b.n	3edf6 <__d2b+0x50>
   3ee2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   3ee32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   3ee36:	f8c9 0000 	str.w	r0, [r9]
   3ee3a:	6918      	ldr	r0, [r3, #16]
   3ee3c:	f7ff fdc7 	bl	3e9ce <__hi0bits>
   3ee40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   3ee44:	e7df      	b.n	3ee06 <__d2b+0x60>

0003ee46 <__ratio>:
   3ee46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ee4a:	4688      	mov	r8, r1
   3ee4c:	4681      	mov	r9, r0
   3ee4e:	4669      	mov	r1, sp
   3ee50:	f7f9 fce6 	bl	38820 <__b2d>
   3ee54:	a901      	add	r1, sp, #4
   3ee56:	4640      	mov	r0, r8
   3ee58:	ec55 4b10 	vmov	r4, r5, d0
   3ee5c:	f7f9 fce0 	bl	38820 <__b2d>
   3ee60:	f8d9 3010 	ldr.w	r3, [r9, #16]
   3ee64:	f8d8 2010 	ldr.w	r2, [r8, #16]
   3ee68:	462f      	mov	r7, r5
   3ee6a:	eba3 0c02 	sub.w	ip, r3, r2
   3ee6e:	e9dd 3200 	ldrd	r3, r2, [sp]
   3ee72:	ec51 0b10 	vmov	r0, r1, d0
   3ee76:	1a9b      	subs	r3, r3, r2
   3ee78:	468b      	mov	fp, r1
   3ee7a:	4620      	mov	r0, r4
   3ee7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   3ee80:	2b00      	cmp	r3, #0
   3ee82:	bfd5      	itete	le
   3ee84:	460a      	movle	r2, r1
   3ee86:	462a      	movgt	r2, r5
   3ee88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   3ee8c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   3ee90:	bfd8      	it	le
   3ee92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   3ee96:	ee10 2a10 	vmov	r2, s0
   3ee9a:	4639      	mov	r1, r7
   3ee9c:	465b      	mov	r3, fp
   3ee9e:	f7dd fdb5 	bl	1ca0c <__aeabi_ddiv>
   3eea2:	ec41 0b10 	vmov	d0, r0, r1
   3eea6:	b003      	add	sp, #12
   3eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003eeac <__copybits>:
   3eeac:	3901      	subs	r1, #1
   3eeae:	f102 0314 	add.w	r3, r2, #20
   3eeb2:	1149      	asrs	r1, r1, #5
   3eeb4:	b570      	push	{r4, r5, r6, lr}
   3eeb6:	3101      	adds	r1, #1
   3eeb8:	6914      	ldr	r4, [r2, #16]
   3eeba:	1f05      	subs	r5, r0, #4
   3eebc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   3eec0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   3eec4:	42a3      	cmp	r3, r4
   3eec6:	d30c      	bcc.n	3eee2 <__copybits+0x36>
   3eec8:	1aa3      	subs	r3, r4, r2
   3eeca:	3211      	adds	r2, #17
   3eecc:	3b11      	subs	r3, #17
   3eece:	f023 0303 	bic.w	r3, r3, #3
   3eed2:	42a2      	cmp	r2, r4
   3eed4:	bf88      	it	hi
   3eed6:	2300      	movhi	r3, #0
   3eed8:	4418      	add	r0, r3
   3eeda:	2300      	movs	r3, #0
   3eedc:	4288      	cmp	r0, r1
   3eede:	d305      	bcc.n	3eeec <__copybits+0x40>
   3eee0:	bd70      	pop	{r4, r5, r6, pc}
   3eee2:	f853 6b04 	ldr.w	r6, [r3], #4
   3eee6:	f845 6f04 	str.w	r6, [r5, #4]!
   3eeea:	e7eb      	b.n	3eec4 <__copybits+0x18>
   3eeec:	f840 3b04 	str.w	r3, [r0], #4
   3eef0:	e7f4      	b.n	3eedc <__copybits+0x30>

0003eef2 <__any_on>:
   3eef2:	f100 0214 	add.w	r2, r0, #20
   3eef6:	114b      	asrs	r3, r1, #5
   3eef8:	6900      	ldr	r0, [r0, #16]
   3eefa:	4298      	cmp	r0, r3
   3eefc:	b510      	push	{r4, lr}
   3eefe:	db11      	blt.n	3ef24 <__any_on+0x32>
   3ef00:	dd0a      	ble.n	3ef18 <__any_on+0x26>
   3ef02:	f011 011f 	ands.w	r1, r1, #31
   3ef06:	d007      	beq.n	3ef18 <__any_on+0x26>
   3ef08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   3ef0c:	fa24 f001 	lsr.w	r0, r4, r1
   3ef10:	fa00 f101 	lsl.w	r1, r0, r1
   3ef14:	428c      	cmp	r4, r1
   3ef16:	d10b      	bne.n	3ef30 <__any_on+0x3e>
   3ef18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3ef1c:	4293      	cmp	r3, r2
   3ef1e:	d803      	bhi.n	3ef28 <__any_on+0x36>
   3ef20:	2000      	movs	r0, #0
   3ef22:	bd10      	pop	{r4, pc}
   3ef24:	4603      	mov	r3, r0
   3ef26:	e7f7      	b.n	3ef18 <__any_on+0x26>
   3ef28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   3ef2c:	2900      	cmp	r1, #0
   3ef2e:	d0f5      	beq.n	3ef1c <__any_on+0x2a>
   3ef30:	2001      	movs	r0, #1
   3ef32:	e7f6      	b.n	3ef22 <__any_on+0x30>

0003ef34 <_calloc_r>:
   3ef34:	434a      	muls	r2, r1
   3ef36:	b513      	push	{r0, r1, r4, lr}
   3ef38:	4611      	mov	r1, r2
   3ef3a:	9201      	str	r2, [sp, #4]
   3ef3c:	f7f8 f878 	bl	37030 <_malloc_r>
   3ef40:	4604      	mov	r4, r0
   3ef42:	b118      	cbz	r0, 3ef4c <_calloc_r+0x18>
   3ef44:	9a01      	ldr	r2, [sp, #4]
   3ef46:	2100      	movs	r1, #0
   3ef48:	f7ff f82f 	bl	3dfaa <memset>
   3ef4c:	4620      	mov	r0, r4
   3ef4e:	b002      	add	sp, #8
   3ef50:	bd10      	pop	{r4, pc}

0003ef52 <_realloc_r>:
   3ef52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ef54:	4607      	mov	r7, r0
   3ef56:	4614      	mov	r4, r2
   3ef58:	460e      	mov	r6, r1
   3ef5a:	b921      	cbnz	r1, 3ef66 <_realloc_r+0x14>
   3ef5c:	4611      	mov	r1, r2
   3ef5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3ef62:	f7f8 b865 	b.w	37030 <_malloc_r>
   3ef66:	b922      	cbnz	r2, 3ef72 <_realloc_r+0x20>
   3ef68:	4625      	mov	r5, r4
   3ef6a:	f7f8 f811 	bl	36f90 <_free_r>
   3ef6e:	4628      	mov	r0, r5
   3ef70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3ef72:	f000 f970 	bl	3f256 <_malloc_usable_size_r>
   3ef76:	42a0      	cmp	r0, r4
   3ef78:	d20f      	bcs.n	3ef9a <_realloc_r+0x48>
   3ef7a:	4621      	mov	r1, r4
   3ef7c:	4638      	mov	r0, r7
   3ef7e:	f7f8 f857 	bl	37030 <_malloc_r>
   3ef82:	4605      	mov	r5, r0
   3ef84:	2800      	cmp	r0, #0
   3ef86:	d0f2      	beq.n	3ef6e <_realloc_r+0x1c>
   3ef88:	4631      	mov	r1, r6
   3ef8a:	4622      	mov	r2, r4
   3ef8c:	f7fe ffed 	bl	3df6a <memcpy>
   3ef90:	4631      	mov	r1, r6
   3ef92:	4638      	mov	r0, r7
   3ef94:	f7f7 fffc 	bl	36f90 <_free_r>
   3ef98:	e7e9      	b.n	3ef6e <_realloc_r+0x1c>
   3ef9a:	4635      	mov	r5, r6
   3ef9c:	e7e7      	b.n	3ef6e <_realloc_r+0x1c>

0003ef9e <__ssputs_r>:
   3ef9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3efa2:	688e      	ldr	r6, [r1, #8]
   3efa4:	4682      	mov	sl, r0
   3efa6:	460c      	mov	r4, r1
   3efa8:	4690      	mov	r8, r2
   3efaa:	429e      	cmp	r6, r3
   3efac:	461f      	mov	r7, r3
   3efae:	d838      	bhi.n	3f022 <__ssputs_r+0x84>
   3efb0:	898a      	ldrh	r2, [r1, #12]
   3efb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
   3efb6:	d032      	beq.n	3f01e <__ssputs_r+0x80>
   3efb8:	6825      	ldr	r5, [r4, #0]
   3efba:	3301      	adds	r3, #1
   3efbc:	6909      	ldr	r1, [r1, #16]
   3efbe:	eba5 0901 	sub.w	r9, r5, r1
   3efc2:	6965      	ldr	r5, [r4, #20]
   3efc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3efc8:	444b      	add	r3, r9
   3efca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   3efce:	106d      	asrs	r5, r5, #1
   3efd0:	429d      	cmp	r5, r3
   3efd2:	bf38      	it	cc
   3efd4:	461d      	movcc	r5, r3
   3efd6:	0553      	lsls	r3, r2, #21
   3efd8:	d531      	bpl.n	3f03e <__ssputs_r+0xa0>
   3efda:	4629      	mov	r1, r5
   3efdc:	f7f8 f828 	bl	37030 <_malloc_r>
   3efe0:	4606      	mov	r6, r0
   3efe2:	b950      	cbnz	r0, 3effa <__ssputs_r+0x5c>
   3efe4:	230c      	movs	r3, #12
   3efe6:	f04f 30ff 	mov.w	r0, #4294967295
   3efea:	f8ca 3000 	str.w	r3, [sl]
   3efee:	89a3      	ldrh	r3, [r4, #12]
   3eff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3eff4:	81a3      	strh	r3, [r4, #12]
   3eff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3effa:	464a      	mov	r2, r9
   3effc:	6921      	ldr	r1, [r4, #16]
   3effe:	f7fe ffb4 	bl	3df6a <memcpy>
   3f002:	89a3      	ldrh	r3, [r4, #12]
   3f004:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   3f008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3f00c:	81a3      	strh	r3, [r4, #12]
   3f00e:	6126      	str	r6, [r4, #16]
   3f010:	444e      	add	r6, r9
   3f012:	6165      	str	r5, [r4, #20]
   3f014:	eba5 0509 	sub.w	r5, r5, r9
   3f018:	6026      	str	r6, [r4, #0]
   3f01a:	463e      	mov	r6, r7
   3f01c:	60a5      	str	r5, [r4, #8]
   3f01e:	42be      	cmp	r6, r7
   3f020:	d900      	bls.n	3f024 <__ssputs_r+0x86>
   3f022:	463e      	mov	r6, r7
   3f024:	4632      	mov	r2, r6
   3f026:	4641      	mov	r1, r8
   3f028:	6820      	ldr	r0, [r4, #0]
   3f02a:	f7ff fbee 	bl	3e80a <memmove>
   3f02e:	68a3      	ldr	r3, [r4, #8]
   3f030:	6822      	ldr	r2, [r4, #0]
   3f032:	2000      	movs	r0, #0
   3f034:	1b9b      	subs	r3, r3, r6
   3f036:	4432      	add	r2, r6
   3f038:	60a3      	str	r3, [r4, #8]
   3f03a:	6022      	str	r2, [r4, #0]
   3f03c:	e7db      	b.n	3eff6 <__ssputs_r+0x58>
   3f03e:	462a      	mov	r2, r5
   3f040:	f7ff ff87 	bl	3ef52 <_realloc_r>
   3f044:	4606      	mov	r6, r0
   3f046:	2800      	cmp	r0, #0
   3f048:	d1e1      	bne.n	3f00e <__ssputs_r+0x70>
   3f04a:	6921      	ldr	r1, [r4, #16]
   3f04c:	4650      	mov	r0, sl
   3f04e:	f7f7 ff9f 	bl	36f90 <_free_r>
   3f052:	e7c7      	b.n	3efe4 <__ssputs_r+0x46>

0003f054 <_sungetc_r>:
   3f054:	b538      	push	{r3, r4, r5, lr}
   3f056:	1c4b      	adds	r3, r1, #1
   3f058:	4614      	mov	r4, r2
   3f05a:	d103      	bne.n	3f064 <_sungetc_r+0x10>
   3f05c:	f04f 35ff 	mov.w	r5, #4294967295
   3f060:	4628      	mov	r0, r5
   3f062:	bd38      	pop	{r3, r4, r5, pc}
   3f064:	8993      	ldrh	r3, [r2, #12]
   3f066:	b2cd      	uxtb	r5, r1
   3f068:	f023 0320 	bic.w	r3, r3, #32
   3f06c:	8193      	strh	r3, [r2, #12]
   3f06e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3f070:	6852      	ldr	r2, [r2, #4]
   3f072:	b18b      	cbz	r3, 3f098 <_sungetc_r+0x44>
   3f074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3f076:	4293      	cmp	r3, r2
   3f078:	dd08      	ble.n	3f08c <_sungetc_r+0x38>
   3f07a:	6823      	ldr	r3, [r4, #0]
   3f07c:	1e5a      	subs	r2, r3, #1
   3f07e:	6022      	str	r2, [r4, #0]
   3f080:	f803 5c01 	strb.w	r5, [r3, #-1]
   3f084:	6863      	ldr	r3, [r4, #4]
   3f086:	3301      	adds	r3, #1
   3f088:	6063      	str	r3, [r4, #4]
   3f08a:	e7e9      	b.n	3f060 <_sungetc_r+0xc>
   3f08c:	4621      	mov	r1, r4
   3f08e:	f000 f89e 	bl	3f1ce <__submore>
   3f092:	2800      	cmp	r0, #0
   3f094:	d0f1      	beq.n	3f07a <_sungetc_r+0x26>
   3f096:	e7e1      	b.n	3f05c <_sungetc_r+0x8>
   3f098:	6921      	ldr	r1, [r4, #16]
   3f09a:	6823      	ldr	r3, [r4, #0]
   3f09c:	b151      	cbz	r1, 3f0b4 <_sungetc_r+0x60>
   3f09e:	4299      	cmp	r1, r3
   3f0a0:	d208      	bcs.n	3f0b4 <_sungetc_r+0x60>
   3f0a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   3f0a6:	42a9      	cmp	r1, r5
   3f0a8:	d104      	bne.n	3f0b4 <_sungetc_r+0x60>
   3f0aa:	3b01      	subs	r3, #1
   3f0ac:	3201      	adds	r2, #1
   3f0ae:	6023      	str	r3, [r4, #0]
   3f0b0:	6062      	str	r2, [r4, #4]
   3f0b2:	e7d5      	b.n	3f060 <_sungetc_r+0xc>
   3f0b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   3f0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3f0bc:	6363      	str	r3, [r4, #52]	; 0x34
   3f0be:	2303      	movs	r3, #3
   3f0c0:	63a3      	str	r3, [r4, #56]	; 0x38
   3f0c2:	4623      	mov	r3, r4
   3f0c4:	f803 5f46 	strb.w	r5, [r3, #70]!
   3f0c8:	6023      	str	r3, [r4, #0]
   3f0ca:	2301      	movs	r3, #1
   3f0cc:	e7dc      	b.n	3f088 <_sungetc_r+0x34>

0003f0ce <__ssrefill_r>:
   3f0ce:	b510      	push	{r4, lr}
   3f0d0:	460c      	mov	r4, r1
   3f0d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
   3f0d4:	b169      	cbz	r1, 3f0f2 <__ssrefill_r+0x24>
   3f0d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3f0da:	4299      	cmp	r1, r3
   3f0dc:	d001      	beq.n	3f0e2 <__ssrefill_r+0x14>
   3f0de:	f7f7 ff57 	bl	36f90 <_free_r>
   3f0e2:	2000      	movs	r0, #0
   3f0e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3f0e6:	6360      	str	r0, [r4, #52]	; 0x34
   3f0e8:	6063      	str	r3, [r4, #4]
   3f0ea:	b113      	cbz	r3, 3f0f2 <__ssrefill_r+0x24>
   3f0ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   3f0ee:	6023      	str	r3, [r4, #0]
   3f0f0:	bd10      	pop	{r4, pc}
   3f0f2:	6923      	ldr	r3, [r4, #16]
   3f0f4:	f04f 30ff 	mov.w	r0, #4294967295
   3f0f8:	6023      	str	r3, [r4, #0]
   3f0fa:	2300      	movs	r3, #0
   3f0fc:	6063      	str	r3, [r4, #4]
   3f0fe:	89a3      	ldrh	r3, [r4, #12]
   3f100:	f043 0320 	orr.w	r3, r3, #32
   3f104:	81a3      	strh	r3, [r4, #12]
   3f106:	e7f3      	b.n	3f0f0 <__ssrefill_r+0x22>

0003f108 <__sccl>:
   3f108:	b570      	push	{r4, r5, r6, lr}
   3f10a:	780b      	ldrb	r3, [r1, #0]
   3f10c:	4604      	mov	r4, r0
   3f10e:	2b5e      	cmp	r3, #94	; 0x5e
   3f110:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   3f114:	bf13      	iteet	ne
   3f116:	1c48      	addne	r0, r1, #1
   3f118:	1c88      	addeq	r0, r1, #2
   3f11a:	784b      	ldrbeq	r3, [r1, #1]
   3f11c:	2200      	movne	r2, #0
   3f11e:	bf08      	it	eq
   3f120:	2201      	moveq	r2, #1
   3f122:	1e61      	subs	r1, r4, #1
   3f124:	f801 2f01 	strb.w	r2, [r1, #1]!
   3f128:	42a9      	cmp	r1, r5
   3f12a:	d1fb      	bne.n	3f124 <__sccl+0x1c>
   3f12c:	b90b      	cbnz	r3, 3f132 <__sccl+0x2a>
   3f12e:	3801      	subs	r0, #1
   3f130:	bd70      	pop	{r4, r5, r6, pc}
   3f132:	f082 0101 	eor.w	r1, r2, #1
   3f136:	1c42      	adds	r2, r0, #1
   3f138:	54e1      	strb	r1, [r4, r3]
   3f13a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   3f13e:	1e56      	subs	r6, r2, #1
   3f140:	4610      	mov	r0, r2
   3f142:	2d2d      	cmp	r5, #45	; 0x2d
   3f144:	d006      	beq.n	3f154 <__sccl+0x4c>
   3f146:	2d5d      	cmp	r5, #93	; 0x5d
   3f148:	d0f2      	beq.n	3f130 <__sccl+0x28>
   3f14a:	b90d      	cbnz	r5, 3f150 <__sccl+0x48>
   3f14c:	4630      	mov	r0, r6
   3f14e:	e7ef      	b.n	3f130 <__sccl+0x28>
   3f150:	462b      	mov	r3, r5
   3f152:	e7f0      	b.n	3f136 <__sccl+0x2e>
   3f154:	7816      	ldrb	r6, [r2, #0]
   3f156:	2e5d      	cmp	r6, #93	; 0x5d
   3f158:	d0fa      	beq.n	3f150 <__sccl+0x48>
   3f15a:	42b3      	cmp	r3, r6
   3f15c:	dcf8      	bgt.n	3f150 <__sccl+0x48>
   3f15e:	4618      	mov	r0, r3
   3f160:	3001      	adds	r0, #1
   3f162:	4286      	cmp	r6, r0
   3f164:	5421      	strb	r1, [r4, r0]
   3f166:	dcfb      	bgt.n	3f160 <__sccl+0x58>
   3f168:	43d8      	mvns	r0, r3
   3f16a:	1c5d      	adds	r5, r3, #1
   3f16c:	3202      	adds	r2, #2
   3f16e:	4430      	add	r0, r6
   3f170:	42b3      	cmp	r3, r6
   3f172:	bfa8      	it	ge
   3f174:	2000      	movge	r0, #0
   3f176:	182b      	adds	r3, r5, r0
   3f178:	e7df      	b.n	3f13a <__sccl+0x32>

0003f17a <_raise_r>:
   3f17a:	291f      	cmp	r1, #31
   3f17c:	b538      	push	{r3, r4, r5, lr}
   3f17e:	4604      	mov	r4, r0
   3f180:	460d      	mov	r5, r1
   3f182:	d904      	bls.n	3f18e <_raise_r+0x14>
   3f184:	2316      	movs	r3, #22
   3f186:	6003      	str	r3, [r0, #0]
   3f188:	f04f 30ff 	mov.w	r0, #4294967295
   3f18c:	bd38      	pop	{r3, r4, r5, pc}
   3f18e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3f190:	b112      	cbz	r2, 3f198 <_raise_r+0x1e>
   3f192:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   3f196:	b94b      	cbnz	r3, 3f1ac <_raise_r+0x32>
   3f198:	4620      	mov	r0, r4
   3f19a:	f000 f816 	bl	3f1ca <_getpid_r>
   3f19e:	462a      	mov	r2, r5
   3f1a0:	4601      	mov	r1, r0
   3f1a2:	4620      	mov	r0, r4
   3f1a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3f1a8:	f7f9 bf6a 	b.w	39080 <_kill_r>
   3f1ac:	2b01      	cmp	r3, #1
   3f1ae:	d00a      	beq.n	3f1c6 <_raise_r+0x4c>
   3f1b0:	1c59      	adds	r1, r3, #1
   3f1b2:	d103      	bne.n	3f1bc <_raise_r+0x42>
   3f1b4:	2316      	movs	r3, #22
   3f1b6:	6003      	str	r3, [r0, #0]
   3f1b8:	2001      	movs	r0, #1
   3f1ba:	e7e7      	b.n	3f18c <_raise_r+0x12>
   3f1bc:	2400      	movs	r4, #0
   3f1be:	4628      	mov	r0, r5
   3f1c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   3f1c4:	4798      	blx	r3
   3f1c6:	2000      	movs	r0, #0
   3f1c8:	e7e0      	b.n	3f18c <_raise_r+0x12>

0003f1ca <_getpid_r>:
   3f1ca:	f7fb b9e5 	b.w	3a598 <_getpid>

0003f1ce <__submore>:
   3f1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f1d2:	460c      	mov	r4, r1
   3f1d4:	6b49      	ldr	r1, [r1, #52]	; 0x34
   3f1d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3f1da:	4299      	cmp	r1, r3
   3f1dc:	d11a      	bne.n	3f214 <__submore+0x46>
   3f1de:	f44f 6180 	mov.w	r1, #1024	; 0x400
   3f1e2:	f7f7 ff25 	bl	37030 <_malloc_r>
   3f1e6:	b918      	cbnz	r0, 3f1f0 <__submore+0x22>
   3f1e8:	f04f 30ff 	mov.w	r0, #4294967295
   3f1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f1f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3f1f4:	6360      	str	r0, [r4, #52]	; 0x34
   3f1f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   3f1fa:	63a3      	str	r3, [r4, #56]	; 0x38
   3f1fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   3f200:	7083      	strb	r3, [r0, #2]
   3f202:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   3f206:	7043      	strb	r3, [r0, #1]
   3f208:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   3f20c:	7003      	strb	r3, [r0, #0]
   3f20e:	6020      	str	r0, [r4, #0]
   3f210:	2000      	movs	r0, #0
   3f212:	e7eb      	b.n	3f1ec <__submore+0x1e>
   3f214:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   3f216:	0077      	lsls	r7, r6, #1
   3f218:	463a      	mov	r2, r7
   3f21a:	f7ff fe9a 	bl	3ef52 <_realloc_r>
   3f21e:	4605      	mov	r5, r0
   3f220:	2800      	cmp	r0, #0
   3f222:	d0e1      	beq.n	3f1e8 <__submore+0x1a>
   3f224:	eb00 0806 	add.w	r8, r0, r6
   3f228:	4601      	mov	r1, r0
   3f22a:	4632      	mov	r2, r6
   3f22c:	4640      	mov	r0, r8
   3f22e:	f7fe fe9c 	bl	3df6a <memcpy>
   3f232:	f8c4 8000 	str.w	r8, [r4]
   3f236:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   3f23a:	e7e9      	b.n	3f210 <__submore+0x42>

0003f23c <__ascii_wctomb>:
   3f23c:	b149      	cbz	r1, 3f252 <__ascii_wctomb+0x16>
   3f23e:	2aff      	cmp	r2, #255	; 0xff
   3f240:	bf8d      	iteet	hi
   3f242:	238a      	movhi	r3, #138	; 0x8a
   3f244:	2001      	movls	r0, #1
   3f246:	700a      	strbls	r2, [r1, #0]
   3f248:	6003      	strhi	r3, [r0, #0]
   3f24a:	bf88      	it	hi
   3f24c:	f04f 30ff 	movhi.w	r0, #4294967295
   3f250:	4770      	bx	lr
   3f252:	4608      	mov	r0, r1
   3f254:	4770      	bx	lr

0003f256 <_malloc_usable_size_r>:
   3f256:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3f25a:	1f18      	subs	r0, r3, #4
   3f25c:	2b00      	cmp	r3, #0
   3f25e:	bfbc      	itt	lt
   3f260:	580b      	ldrlt	r3, [r1, r0]
   3f262:	18c0      	addlt	r0, r0, r3
   3f264:	4770      	bx	lr
